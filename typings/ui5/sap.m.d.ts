import sapimport = sap;

/**
 * The main UI5 control library, with responsive controls that can be used in touch devices as well as desktop browsers.
 */
declare namespace sap.m {

	/**
	 * Helper for rendering themable background.
	 */
	namespace BackgroundHelper {
		/**
		 * Adds CSS classes and styles to the given RenderManager, depending on the given configuration for background color and background image.
		 * To be called by control renderers supporting the global themable background image within their root tag, before they call writeClasses() and writeStyles().
		 * @param rm the RenderManager
		 * @param sBgColor a configured custom background color for the control, if any(optional)
		 * @param sBgImgUrl the configured custom background image for the control, if any(optional)
		 */
		function addBackgroundColorStyles(rm: sap.ui.core.RenderManager, sBgColor?: string, sBgImgUrl?: sap.ui.core.URI);
		/**
		 * Renders an HTML tag into the given RenderManager which carries the background image which is either configured and given or coming from the current theme.
		 * Should be called right after the opening root tag has been completed, so this is the first child element inside the control.
		 * @param rm the RenderManager
		 * @param oControl the control within which the tag will be rendered; its ID will be used to generate the element ID
		 * @param vCssClass a css class or an array of css classes to add to the element
		 * @param sBgImgUrl the image of a configured background image; if this is not given, the theme background will be used and also the other settings are ignored.(optional)
		 * @param bRepeat whether the background image should be repeated/tiled (or stretched)(optional)
		 * @param fOpacity the background image opacity, if any(optional)
		 */
		function renderBackgroundImageTag(rm: any, oControl: sap.ui.core.Control, vCssClass: string|string[], sBgImgUrl?: sap.ui.core.URI, bRepeat?: boolean, fOpacity?: number);
	}

	/**
	 * Helper for Images.
	 */
	namespace ImageHelper {
		/**
		 * Creates or updates an image control.
		 * @param sImgId id of the image to be dealt with.
		 * @param oImageControl the image to update. If undefined, a new image will be created.
		 * @param oParent oImageControl's parentControl.
		 * @param mProperties map object that contains key value pairs if image propeties. The 'src' property
		 * MUST be contained. Also the map's keys must be names of image properties
		 * @param aCssClassesToAdd array of css classes which will be added if the image needs to be created.
		 * @param aCssClassesToRemove all css clases that oImageControl has and which are contained in this array
		 * are removed bevore adding the css classes listed in aCssClassesToAdd.
		 * @return the new or updated image control
		 */
		function getImageControl(sImgId: string, oImageControl: Image, oParent: sap.ui.core.Control, mProperties: any, aCssClassesToAdd: any[], aCssClassesToRemove: any[]);
	}

	/**
	 * Suggestion helper for sap.m.Input fields: Creates a multi column suggest list for a sap.m.Input field based on a ValueList
	 * annotation. The ValueList annotation will be resolved via the binding information of the Input field.
	 * 
	 * If the annotation describes multiple input parameter the suggest provider will resolve all of these relative to the
	 * context of the Input filed and use them for the suggestion query. The suggest provider will write all values that are
	 * described as output parameters back to the model (relative to the context of the Input field). This can only be done if
	 * the model runs in "TwoWay" binding mode. Both features can be switched of via the bResolveInput/bResolveOutput parameter
	 * of the suggest function:
	 */
	namespace InputODataSuggestProvider {
	}

	/**
	 * Provides easier methods to create sap.m.Dialog with type sap.m.DialogType.Message, such as standard alerts,
	 * confirmation dialogs, or arbitrary message dialogs.
	 * 
	 * As <code>MessageBox</code> is a static class, a <code>jQuery.sap.require("sap.m.MessageBox");</code> statement
	 * must be explicitly executed before the class can be used. Example:
	 * <pre>
	 *   jQuery.sap.require("sap.m.MessageBox");
	 *   sap.m.MessageBox.show(
	 *       "This message should appear in the message box.", {
	 *           icon: sap.m.MessageBox.Icon.INFORMATION,
	 *           title: "My message box title",
	 *           actions: [sap.m.MessageBox.Action.YES, sap.m.MessageBox.Action.NO],
	 *           onClose: function(oAction) { / * do something * / }
	 *       }
	 *     );
	 * </pre>
	 */
	namespace MessageBox {
	
		class Action {
			/**
			 * Adds an "Abort" button to the message box.
			 */
			static ABORT: any;
			/**
			 * Adds a "Cancel" button to the message box.
			 */
			static CANCEL: any;
			/**
			 * Adds a "Close" button to the message box.
			 */
			static CLOSE: any;
			/**
			 * Adds a "Delete" button to the message box.
			 */
			static DELETE: any;
			/**
			 * Adds an "Ignore" button to the message box.
			 */
			static IGNORE: any;
			/**
			 * Adds a "No" button to the message box.
			 */
			static NO: any;
			/**
			 * Adds an "OK" button to the message box.
			 */
			static OK: any;
			/**
			 * Adds a "Retry" button to the message box.
			 */
			static RETRY: any;
			/**
			 * Adds a "Yes" button to the message box.
			 */
			static YES: any;
		}
	
		class Icon {
			/**
			 * Shows the error icon in the message box.
			 */
			static ERROR: any;
			/**
			 * Shows the information icon in the message box.
			 */
			static INFORMATION: any;
			/**
			 * Shows no icon in the message box.
			 */
			static NONE: any;
			/**
			 * Shows the question icon in the message box.
			 */
			static QUESTION: any;
			/**
			 * Shows the success icon in the message box.
			 */
			static SUCCESS: any;
			/**
			 * Shows the warning icon in the message box.
			 */
			static WARNING: any;
		}
		/**
		 * Displays an alert dialog with the given message and an OK button (no icons).
		 * 
		 * <pre>
		 * sap.m.MessageBox.alert("This message should appear in the alert", {
		 *     title: "Alert",                                      // default
		 *     onClose: null,                                       // default
		 *     styleClass: ""                                       // default
		 *     initialFocus: null                                   // default
		 *     textDirection: sap.ui.core.TextDirection.Inherit     // default
		 * });
		 * </pre>
		 * 
		 * If a callback is given, it is called after the alert dialog has been closed
		 * by the user via the OK button. The callback is called with the following signature:
		 * 
		 * <pre>
		 *   function (oAction)
		 * </pre>
		 * 
		 * where <code>oAction</code> can be either sap.m.MessageBox.Action.OK when the alert dialog is closed by tapping on the OK button
		 *    or null when the alert dialog is closed by calling <code>sap.m.InstanceManager.closeAllDialogs()</code>.
		 * 
		 * The alert dialog opened by this method is processed asynchronously.
		 * Applications have to use <code>fnCallback</code> to continue work after the
		 * user closed the alert dialog.
		 * @param vMessage Message to be displayed in the alert dialog. The usage of sap.core.Control as vMassage is deprecated since version 1.30.4.
		 * @param mOptions Other options (optional)(optional)
		 */
		function alert(vMessage: string, mOptions?: any);
		/**
		 * Displays a confirmation dialog with the given message, a QUESTION icon, an OK button
		 * and a Cancel button. If a callback is given, it is called after the confirmation box
		 * has been closed by the user with one of the buttons.
		 * 
		 * <pre>
		 * sap.m.MessageBox.confirm("This message should appear in the confirmation", {
		 *     title: "Confirm",                                    // default
		 *     onClose: null                                        // default
		 *     styleClass: ""                                       // default
		 *     initialFocus: null                                   // default
		 *     textDirection: sap.ui.core.TextDirection.Inherit     // default
		 *     });
		 * </pre>
		 * 
		 * The callback is called with the following signature
		 * 
		 * <pre>
		 *   function(oAction)
		 * </pre>
		 * 
		 * where oAction is set by one of the following three values:
		 * 1. sap.m.MessageBox.Action.OK: OK (confirmed) button is tapped.
		 * 2. sap.m.MessageBox.Action.Cancel: Cancel (unconfirmed) button is tapped.
		 * 3. null: Confirm dialog is closed by calling <code>sap.m.InstanceManager.closeAllDialogs()</code>
		 * 
		 * The confirmation dialog opened by this method is processed asynchronously.
		 * Applications have to use <code>fnCallback</code> to continue work after the
		 * user closed the confirmation dialog
		 * @param vMessage Message to be displayed in the alert dialog. The usage of sap.core.Control as vMassage is deprecated since version 1.30.4.
		 * @param mOptions Other options (optional)(optional)
		 */
		function confirm(vMessage: string, mOptions?: any);
		/**
		 * Displays an error dialog with the given message, an ERROR icon, a CLOSE button..
		 * If a callback is given, it is called after the error box
		 * has been closed by the user with one of the buttons.
		 * 
		 * <pre>
		 * sap.m.MessageBox.error("This message should appear in the error message box", {
		 *     title: "Error",                                      // default
		 *     onClose: null                                        // default
		 *     styleClass: ""                                       // default
		 *     initialFocus: null                                   // default
		 *     textDirection: sap.ui.core.TextDirection.Inherit     // default
		 *     });
		 * </pre>
		 * 
		 * The callback is called with the following signature
		 * 
		 * 
		 * <pre>
		 *   function (oAction)
		 * </pre>
		 * 
		 * The error dialog opened by this method is processed asynchronously.
		 * Applications have to use <code>fnCallback</code> to continue work after the
		 * user closed the error dialog.
		 * @param vMessage Message to be displayed in the alert dialog. The usage of sap.core.Control as vMassage is deprecated since version 1.30.4.
		 * @param mOptions Other options (optional)(optional)
		 */
		function error(vMessage: string, mOptions?: any);
		/**
		 * Displays an information dialog with the given message, an INFO icon, an OK button.
		 * If a callback is given, it is called after the info box
		 * has been closed by the user with one of the buttons.
		 * 
		 * <pre>
		 * sap.m.MessageBox.information("This message should appear in the information message box", {
		 *     title: "Information",                                // default
		 *     onClose: null                                        // default
		 *     styleClass: ""                                       // default
		 *     initialFocus: null                                   // default
		 *     textDirection: sap.ui.core.TextDirection.Inherit     // default
		 *     });
		 * </pre>
		 * 
		 * The callback is called with the following signature
		 * 				 *
		 * <pre>
		 *   function (oAction)
		 * </pre>
		 * 
		 * The information dialog opened by this method is processed asynchronously.
		 * Applications have to use <code>fnCallback</code> to continue work after the
		 * user closed the information dialog
		 * @param vMessage Message to be displayed in the alert dialog. The usage of sap.core.Control as vMassage is deprecated since version 1.30.4.
		 * @param mOptions Other options (optional)(optional)
		 */
		function information(vMessage: string, mOptions?: any);
		/**
		 * Creates and displays a sap.m.Dialog with type sap.m.DialogType.Message with the given text and buttons, and optionally other parts.
		 * After the user has tapped a button, the <code>onClose</code> function is invoked when given.
		 * 
		 * The only mandatory parameter is <code>vMessage</code>. Either a string with the corresponding text or even
		 * a layout control could be provided.
		 * 
		 * <pre>
		 * sap.m.MessageBox.show("This message should appear in the message box", {
		 *     icon: sap.m.MessageBox.Icon.NONE,                    // default
		 *     title: "",                                           // default
		 *     actions: sap.m.MessageBox.Action.OK                  // default
		 *     onClose: null                                        // default
		 *     styleClass: ""                                       // default
		 *     initialFocus: null                                   // default
		 *     textDirection: sap.ui.core.TextDirection.Inherit     // default
		 * });
		 * </pre>
		 * 
		 * The created dialog is executed asynchronously. When it has been created and registered for rendering,
		 * this function returns without waiting for a user reaction.
		 * 
		 * When applications have to react on the users choice, they have to provide a callback function and
		 * postpone any reaction on the user choice until that callback is triggered.
		 * 
		 * The signature of the callback is
		 * 
		 *   function (oAction);
		 * 
		 * where <code>oAction</code> is the button that the user has tapped. For example, when the user has pressed the close button,
		 * a sap.m.MessageBox.Action.Close is returned.
		 * @param vMessage Message to be displayed in the alert dialog. The usage of sap.core.Control as vMassage is deprecated since version 1.30.4.
		 * @param mOptions Other options (optional)(optional)
		 */
		function show(vMessage: string, mOptions?: any);
		/**
		 * Displays a success dialog with the given message, a SUCCESS icon, an OK button.
		 * If a callback is given, it is called after the success box
		 * has been closed by the user with one of the buttons.
		 * 
		 * <pre>
		 * sap.m.MessageBox.success("This message should appear in the success message box", {
		 *     title: "Success",                                    // default
		 *     onClose: null                                        // default
		 *     styleClass: ""                                       // default
		 *     initialFocus: null                                   // default
		 *     textDirection: sap.ui.core.TextDirection.Inherit     // default
		 *     });
		 * </pre>
		 * 
		 * The callback is called with the following signature
		 * 
		 * <pre>
		 *   function(oAction)
		 * </pre>
		 * 
		 * The success dialog opened by this method is processed asynchronously.
		 * Applications have to use <code>fnCallback</code> to continue work after the
		 * user closed the success dialog
		 * @param vMessage Message to be displayed in the alert dialog. The usage of sap.core.Control as vMassage is deprecated since version 1.30.4.
		 * @param mOptions Other options (optional)(optional)
		 */
		function success(vMessage: string, mOptions?: any);
		/**
		 * Displays a warning dialog with the given message, a WARNING icon, an OK button.
		 * If a callback is given, it is called after the warning box
		 * has been closed by the user with one of the buttons.
		 * 
		 * <pre>
		 * sap.m.MessageBox.warning("This message should appear in the warning message box", {
		 *     title: "Warning",                                    // default
		 *     onClose: null                                        // default
		 *     styleClass: ""                                       // default
		 *     initialFocus: null                                   // default
		 *     textDirection: sap.ui.core.TextDirection.Inherit     // default
		 *     });
		 * </pre>
		 * 
		 * The callback is called with the following signature
		 * 				 *
		 * <pre>
		 *   function (oAction)
		 * </pre>
		 * 
		 * The warning dialog opened by this method is processed asynchronously.
		 * Applications have to use <code>fnCallback</code> to continue work after the
		 * user closed the warning dialog
		 * @param vMessage Message to be displayed in the alert dialog. The usage of sap.core.Control as vMassage is deprecated since version 1.30.4.
		 * @param mOptions Other options (optional)(optional)
		 */
		function warning(vMessage: string, mOptions?: any);
	}

	/**
	 * A message toast notification offers simple feedback about an operation in a pop-up.
	 * Toasts automatically disappear after a timeout unless the user moves the mouse over
	 * the toast or taps on it. In this case the toast will remain on the screen and can
	 * be closed when the user moves the mouse out or taps out of the toast.
	 * Toasts appears close the bottom of the screen, centered horizontally, but you can change
	 * this position which is not dependent on the default values of the position settings.
	 * The default position applies as long as the application does not do any position setting.
	 * Position settings are "my", "at", "of" and "offset".
	 * 
	 * If the configured message contains HTML code or script tags, those will be escaped.<br>
	 * <b>Note: </b>Line breaks (\r\n, \n\r, \r, \n) will be visualized.
	 * 
	 * Beware that only one message toast can be shown at a time in the same place.
	 * If you want to have multiple message toasts visible at the same time, you need to position
	 * the message toasts in different places.
	 * This positioning needs to be handled in the application logic.
	 * 
	 * Message toast example:
	 * 
	 * <pre>
	 * sap.m.MessageToast.show("This message should appear in the message toast", {
	 *     duration: 3000,                  // default
	 *     width: "15em",                   // default
	 *     my: "center bottom",             // default
	 *     at: "center bottom",             // default
	 *     of: window,                      // default
	 *     offset: "0 0",                   // default
	 *     collision: "fit fit",            // default
	 *     onClose: null,                   // default
	 *     autoClose: true,                 // default
	 *     animationTimingFunction: "ease", // default
	 *     animationDuration: 1000,         // default
	 *     closeOnBrowserNavigation: true   // default
	 * });
	 * </pre>
	 */
	namespace MessageToast {
		/**
		 * Creates and displays a simple message toast notification message with the given text, and optionally other options.
		 * 
		 * The only mandatory parameter is <code>sMessage</code>.
		 * @param sMessage The message to be displayed.
		 * @param mOptions Object which can contain all other options. Not all entries in this object are required. This property is optional.(optional)
		 */
		function show(sMessage: string, mOptions?: any);
	}

	/**
	 * Helper for Popups.
	 */
	namespace PopupHelper {
		/**
		 * This methods converts the percentage value to an absolute number based on the given base number.
		 * @param sPercentage A percentage value in string format, for example "25%"
		 * @param fBaseSize A float number which the calculation is based on.
		 * @return The calculated size string with "px" as unit or null when the format of given parameter is wrong.
		 */
		function calcPercentageSize(sPercentage: string, fBaseSize: number);
	}

	/**
	 * Touch helper.
	 */
	namespace touch {
		/**
		 * Given a list of touches, count the number of touches related with the given element.
		 * @param oTouchList The list of touch objects to search.
		 * @param vElement A jQuery element or an element reference or an element id.
		 * @return The number of touches related with the given element.
		 */
		function countContained(oTouchList: any, vElement: any|string): number;
		/**
		 * Given a list of touch objects, find the touch that matches the given one.
		 * @param oTouchList The list of touch objects to search.
		 * @param oTouch A touch object to find or a Touch.identifier that uniquely identifies the current finger in the touch session.
		 * @return The touch matching if any.
		 */
		function find(oTouchList: any, oTouch: any|number): any;
	}

	/**
	 * URL(Uniform Resource Locator) Helper.
	 * 
	 * This helper can be used to trigger a native application (e.g. email, sms, phone) from the browser.
	 * That means we are restricted of browser or application implementation. e.g.
	 * <ul>
	 * <li>Some browsers do not let you to pass more than 2022 characters in the URL</li>
	 * <li>MAPI (Outlook) limit is 2083, max. path under Internet Explorer it is 2048</li>
	 * <li>Different Internet Explorer versions have a different limitation (IE9 approximately 1000 characters)</li>
	 * <li>MS mail app under Windows 8 cuts mail links after approximately 100 characters</li>
	 * <li>Safari gets a confirmation from user before opening a native application and can block other triggers if the user cancels it</li>
	 * <li>Some mail applications(Outlook) do not respect all encodings(e.g. Cyrillic texts are not encoded correctly)</li>
	 * </ul>
	 * 
	 * Note: all the given limitation lengths are for encoded text(e.g space character will be encoded to "%20").
	 */
	namespace URLHelper {
		/**
		 * Adds an event registration for redirect.
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener The object, that wants to be notified, when the event occurs.(optional)
		 * @return sap.m.URLHelper instance
		 */
		function attachRedirect(fnFunction: any, oListener?: any): any;
		/**
		 * Detach already registered redirect event.
		 * @param fnFunction The function to call, when the event occurs.
		 * @param oListener The object, that wants to be notified, when the event occurs.(optional)
		 * @return sap.m.URLHelper instance
		 */
		function detachRedirect(fnFunction: any, oListener?: any): any;
		/**
		 * Builds Email URI from given parameter.
		 * Trims spaces from email addresses.
		 * @param sEmail Destination email address(optional)
		 * @param sSubject Subject of the email address(optional)
		 * @param sBody Default message text(optional)
		 * @param sCC Carbon Copy email address(optional)
		 * @param sBCC Blind carbon copy email address(optional)
		 * @return Email URI scheme
		 */
		function normalizeEmail(sEmail?: string, sSubject?: string, sBody?: string, sCC?: string, sBCC?: string): string;
		/**
		 * Sanitizes the given telephone number and returns SMS URI scheme.
		 * @param sTel Telephone number(optional)
		 * @return SMS URI scheme
		 */
		function normalizeSms(sTel?: string): string;
		/**
		 * Sanitizes the given telephone number and returns a telephone URI scheme.
		 * @param sTel Telephone number(optional)
		 * @return Telephone URI scheme
		 */
		function normalizeTel(sTel?: string): string;
		/**
		 * Redirects to the given URL.
		 * This method fires "redirect" event before opening the URL.
		 * @param sURL Uniform resource locator
		 * @param bNewWindow Opens URL in a new browser window or tab. Please note that, opening a new window/tab can be ignored by browsers(e.g. on Windows Phone) or by popup blockers.
		 * NOTE: On Windows Phone the URL will be enforced to open in the same window if opening in a new window/tab fails (because of a known system restriction on cross-window communications). Use sap.m.Link instead (with blank target) if you necessarily need to open URL in a new window.(optional)
		 */
		function redirect(sURL: string, bNewWindow?: boolean);
		/**
		 * Trigger email application to send email.
		 * Trims spaces from email addresses.
		 * @param sEmail Destination email address(optional)
		 * @param sSubject Subject of the email address(optional)
		 * @param sBody Default message text(optional)
		 * @param sCC Carbon Copy email address(optional)
		 * @param sBCC Blind carbon copy email address(optional)
		 */
		function triggerEmail(sEmail?: string, sSubject?: string, sBody?: string, sCC?: string, sBCC?: string);
		/**
		 * Trigger SMS application to send SMS to given telephone number.
		 * @param sTel Telephone number(optional)
		 */
		function triggerSms(sTel?: string);
		/**
		 * Trigger telephone to call given telephone number.
		 * @param sTel Telephone number(optional)
		 */
		function triggerTel(sTel?: string);
	}

	/**
	 * A string type that represents CSS color values and sap.m.ValueColor.
	 * 
	 * Allowed values are {@link sap.ui.core.CSSColor} and {@link sap.m.ValueColor}
	 * 
	 * The empty string is also allowed and has the same effect as setting no color.
	 */
	namespace ValueCSSColor {
	}

	class ActionListItem extends ListItemBase {
		/**
		 * Constructor for a new ActionListItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId Id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.ActionListItemMetadata);
		/**
		 * Constructor for a new ActionListItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId Id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.ActionListItem with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ActionListItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.ListItemBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.ListItemBase
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ListItemBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Determines item specific mode
		 * 
		 * ActionListItems are not selectable because they are command controls (like Button or Link) so triggering the associated command, rather than selection is
		 * appropriate to happen upon user action on these items. By overwriting isSelectable (inherited from ListItemBase) we exclude the item from processing
		 * specific to selectable list-items.
		 */
		getMode();
		/**
		 * Gets current value of property <code>text</code>.
		 * 
		 * Defines the text that appears in the control.
		 * @return Value of property <code>text</code>
		 */
		getText(): string;
		/**
		 * Sets a new value for property <code>text</code>.
		 * 
		 * Defines the text that appears in the control.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sText New value for property <code>text</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setText(sText: string): ActionListItem;
	}

	class ActionSelect extends Select {
		/**
		 * Constructor for a new ActionSelect.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Constructor for a new ActionSelect.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some button into the association <code>buttons</code>.
		 * @param vButton the buttons to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addButton(vButton: sap.ui.core.ID|Button): ActionSelect;
		/**
		 * Creates a new subclass of class sap.m.ActionSelect with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.Select.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.Select with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.Select
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|SelectMetadata, FNMetaImpl?: any): any;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>buttons</code>.
		 * @return 
		 */
		getButtons(): sap.ui.core.ID[];
		/**
		 * Remove all buttons from the ActionSelect.
		 * @return An array with the ids of the removed elements (might be empty).
		 */
		removeAllButtons(): string[];
		/**
		 * Button to be removed from the ActionSelect content.
		 * @param vButton The button to remove or its index or id.
		 * @return The id of the removed button or null.
		 */
		removeButton(vButton: number|string|Button): string;
	}

	class ActionSheet extends sap.ui.core.Control {
		/**
		 * Constructor for a new ActionSheet.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.ActionSheetMetadata);
		/**
		 * Constructor for a new ActionSheet.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some button to the aggregation <code>buttons</code>.
		 * @param oButton the button to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addButton(oButton: Button): ActionSheet;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>afterClose</code> event of this <code>sap.m.ActionSheet</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.ActionSheet</code> itself.
		 * 
		 * This event will be fired after the ActionSheet is closed.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachAfterClose(oData: any, fnFunction: any, oListener?: any): ActionSheet;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>afterOpen</code> event of this <code>sap.m.ActionSheet</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.ActionSheet</code> itself.
		 * 
		 * This event will be fired after the ActionSheet is opened.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachAfterOpen(oData: any, fnFunction: any, oListener?: any): ActionSheet;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>beforeClose</code> event of this <code>sap.m.ActionSheet</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.ActionSheet</code> itself.
		 * 
		 * This event will be fired before the ActionSheet is closed.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachBeforeClose(oData: any, fnFunction: any, oListener?: any): ActionSheet;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>beforeOpen</code> event of this <code>sap.m.ActionSheet</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.ActionSheet</code> itself.
		 * 
		 * This event will be fired before the ActionSheet is opened.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachBeforeOpen(oData: any, fnFunction: any, oListener?: any): ActionSheet;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>cancelButtonPress</code> event of this <code>sap.m.ActionSheet</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.ActionSheet</code> itself.
		 * 
		 * This event is fired when the cancelButton is clicked. For iPad, this event is also fired when showCancelButton is set to true, and Popover is closed by clicking outside.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachCancelButtonPress(oData: any, fnFunction: any, oListener?: any): ActionSheet;
		/**
		 * Calling this method will make the ActionSheet disappear from the screen.
		 */
		close();
		/**
		 * Destroys all the buttons in the aggregation <code>buttons</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyButtons(): ActionSheet;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>afterClose</code> event of this <code>sap.m.ActionSheet</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachAfterClose(fnFunction: any, oListener: any): ActionSheet;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>afterOpen</code> event of this <code>sap.m.ActionSheet</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachAfterOpen(fnFunction: any, oListener: any): ActionSheet;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>beforeClose</code> event of this <code>sap.m.ActionSheet</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachBeforeClose(fnFunction: any, oListener: any): ActionSheet;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>beforeOpen</code> event of this <code>sap.m.ActionSheet</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachBeforeOpen(fnFunction: any, oListener: any): ActionSheet;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>cancelButtonPress</code> event of this <code>sap.m.ActionSheet</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachCancelButtonPress(fnFunction: any, oListener: any): ActionSheet;
		/**
		 * Creates a new subclass of class sap.m.ActionSheet with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ActionSheetMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>afterClose</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireAfterClose(mArguments?: any): ActionSheet;
		/**
		 * Fires event <code>afterOpen</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireAfterOpen(mArguments?: any): ActionSheet;
		/**
		 * Fires event <code>beforeClose</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireBeforeClose(mArguments?: any): ActionSheet;
		/**
		 * Fires event <code>beforeOpen</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireBeforeOpen(mArguments?: any): ActionSheet;
		/**
		 * Fires event <code>cancelButtonPress</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireCancelButtonPress(mArguments?: any): ActionSheet;
		/**
		 * Gets content of aggregation <code>buttons</code>.
		 * 
		 * These buttons are added to the content area in ActionSheet control. When button is tapped, the ActionSheet is closed before the tap event listener is called.
		 * @return 
		 */
		getButtons(): Button[];
		/**
		 * Gets current value of property <code>cancelButtonText</code>.
		 * 
		 * This is the text displayed in the cancelButton. Default value is "Cancel", and it's translated according to the current locale setting. This property will be ignored when running either in iPad or showCancelButton is set to false.
		 * @return Value of property <code>cancelButtonText</code>
		 */
		getCancelButtonText(): string;
		/**
		 * Gets current value of property <code>placement</code>.
		 * 
		 * The ActionSheet behaves as a sap.m.Popover in iPad and this property is the information about on which side will the popover be placed at. Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right, sap.m.PlacementType.Top, sap.m.PlacementType.Bottom, sap.m.PlacementType.Horizontal, sap.m.PlacementType.HorizontalPreferedLeft, sap.m.PlacementType.HorizontalPreferedRight, sap.m.PlacementType.Vertical, sap.m.PlacementType.VerticalPreferedTop, sap.m.PlacementType.VerticalPreferedBottom. The default value is sap.m.PlacementType.Bottom.
		 * 
		 * Default value is <code>Bottom</code>.
		 * @return Value of property <code>placement</code>
		 */
		getPlacement(): PlacementType;
		/**
		 * Gets current value of property <code>showCancelButton</code>.
		 * 
		 * If this is set to true, there will be a cancel button shown below the action buttons. There won't be any cancel button shown in iPad regardless of this property. The default value is set to true.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>showCancelButton</code>
		 */
		getShowCancelButton(): boolean;
		/**
		 * Gets current value of property <code>title</code>.
		 * 
		 * Title will be shown in the header area in iPhone and every Android devices. This property will be ignored in tablets and desktop browser.
		 * @return Value of property <code>title</code>
		 */
		getTitle(): string;
		/**
		 * Checks for the provided <code>sap.m.Button</code> in the aggregation <code>buttons</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oButton The button whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfButton(oButton: Button): number;
		/**
		 * Inserts a button into the aggregation <code>buttons</code>.
		 * @param oButton the button to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the button should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the button is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the button is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertButton(oButton: Button, iIndex: number): ActionSheet;
		/**
		 * The method checks if the ActionSheet is open. It returns true when the ActionSheet is currently open (this includes opening and closing animations), otherwise it returns false.
		 * @return 
		 */
		isOpen(): boolean;
		/**
		 * Calling this method will make the ActionSheet visible on the screen.
		 * @param oControl The ActionSheet behaves as a sap.m.Popover in iPad and the control parameter is the object to which the popover will be placed. It can be not only a UI5 control, but also an existing dom reference. The side of the placement depends on the placement property set in the popover. In other platforms, ActionSheet behaves as a standard dialog and this parameter is ignored because dialog is aligned to the screen.
		 */
		openBy(oControl: any);
		/**
		 * Removes all the controls from the aggregation <code>buttons</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllButtons(): Button[];
		/**
		 * Removes a button from the aggregation <code>buttons</code>.
		 * @param vButton The button to remove or its index or id
		 * @return The removed button or <code>null</code>
		 */
		removeButton(vButton: number|string|Button): Button;
		/**
		 * Sets a new value for property <code>cancelButtonText</code>.
		 * 
		 * This is the text displayed in the cancelButton. Default value is "Cancel", and it's translated according to the current locale setting. This property will be ignored when running either in iPad or showCancelButton is set to false.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sCancelButtonText New value for property <code>cancelButtonText</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setCancelButtonText(sCancelButtonText: string): ActionSheet;
		/**
		 * Sets a new value for property <code>placement</code>.
		 * 
		 * The ActionSheet behaves as a sap.m.Popover in iPad and this property is the information about on which side will the popover be placed at. Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right, sap.m.PlacementType.Top, sap.m.PlacementType.Bottom, sap.m.PlacementType.Horizontal, sap.m.PlacementType.HorizontalPreferedLeft, sap.m.PlacementType.HorizontalPreferedRight, sap.m.PlacementType.Vertical, sap.m.PlacementType.VerticalPreferedTop, sap.m.PlacementType.VerticalPreferedBottom. The default value is sap.m.PlacementType.Bottom.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Bottom</code>.
		 * @param sPlacement New value for property <code>placement</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setPlacement(sPlacement: PlacementType): ActionSheet;
		/**
		 * Sets a new value for property <code>showCancelButton</code>.
		 * 
		 * If this is set to true, there will be a cancel button shown below the action buttons. There won't be any cancel button shown in iPad regardless of this property. The default value is set to true.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bShowCancelButton New value for property <code>showCancelButton</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowCancelButton(bShowCancelButton: boolean): ActionSheet;
		/**
		 * Sets a new value for property <code>title</code>.
		 * 
		 * Title will be shown in the header area in iPhone and every Android devices. This property will be ignored in tablets and desktop browser.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sTitle New value for property <code>title</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTitle(sTitle: string): ActionSheet;
	}

	class App extends NavContainer {
		/**
		 * Constructor for a new App.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.AppMetadata);
		/**
		 * Constructor for a new App.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.App with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.NavContainer.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|AppMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.NavContainer with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.NavContainer
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|NavContainerMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>backgroundColor</code>.
		 * 
		 * Background color of the App. If set, this color will override the default background defined by the theme. So this should only be set when really required.
		 * Any configured background image will be placed above this colored background. But any theme adaptation in the Theme Designer will override this setting.
		 * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete App or whether it should be tiled.
		 * @return Value of property <code>backgroundColor</code>
		 */
		getBackgroundColor(): string;
		/**
		 * Gets current value of property <code>backgroundImage</code>.
		 * 
		 * Background image of the App. If set, this image will override the default background defined by the theme. So this should only be set when really required.
		 * This background image will be placed above any color set for the background. But any theme adaptation in the Theme Designer will override this image setting.
		 * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete App or whether it should be tiled.
		 * @return Value of property <code>backgroundImage</code>
		 */
		getBackgroundImage(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>backgroundOpacity</code>.
		 * 
		 * Opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 fully opaque).
		 * This can be used to make the application content better readable by making the background image partly transparent.
		 * 
		 * Default value is <code>1</code>.
		 * @return Value of property <code>backgroundOpacity</code>
		 */
		getBackgroundOpacity(): number;
		/**
		 * Gets current value of property <code>backgroundRepeat</code>.
		 * 
		 * Whether the background image (if configured) should be proportionally stretched to cover the whole App (false) or whether it should be tiled (true).
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>backgroundRepeat</code>
		 */
		getBackgroundRepeat(): boolean;
		/**
		 * Gets current value of property <code>homeIcon</code>.
		 * 
		 * The icon to be displayed on the home screen of iOS devices after the user does "add to home screen".
		 * 
		 * Note that only the first attempt to set the homeIcon will be executed, subsequent settings are ignored.
		 * 
		 * This icon must be in PNG format. The property can either hold the URL of one single icon which is used for all devices (and possibly scaled, which looks not perfect), or an object holding icon URLs for the different required sizes.
		 * 
		 * A desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires an object to be given and the "icon" property of this object then defines the desktop bookmark icon. For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all browsers. ICO is also preferred for this desktop icon setting because the file can contain different images for different resolutions.
		 * 
		 * One example is:
		 * 
		 * app.setHomeIcon({
		 * 'phone':'phone-icon.png',
		 * 'phone@2':'phone-retina.png',
		 * 'tablet':'tablet-icon.png',
		 * 'tablet@2':'tablet-retina.png',
		 * 'icon':'desktop.ico'
		 * });
		 * 
		 * The respective image sizes are 57/114 px for the phone and 72/144 px for the tablet.
		 * If an object is given but one of the sizes is not given, the largest given icon will be used for this size.
		 * 
		 * On Android these icons may or may not be used by the device. Apparently chances can be improved by adding glare effect and rounded corners, setting the file name so it ends with "-precomposed.png" and setting the "homeIconPrecomposed" property to "true".
		 * @return Value of property <code>homeIcon</code>
		 */
		getHomeIcon(): any;
		/**
		 * Sets a new value for property <code>backgroundColor</code>.
		 * 
		 * Background color of the App. If set, this color will override the default background defined by the theme. So this should only be set when really required.
		 * Any configured background image will be placed above this colored background. But any theme adaptation in the Theme Designer will override this setting.
		 * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete App or whether it should be tiled.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sBackgroundColor New value for property <code>backgroundColor</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setBackgroundColor(sBackgroundColor: string): App;
		/**
		 * Sets a new value for property <code>backgroundImage</code>.
		 * 
		 * Background image of the App. If set, this image will override the default background defined by the theme. So this should only be set when really required.
		 * This background image will be placed above any color set for the background. But any theme adaptation in the Theme Designer will override this image setting.
		 * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete App or whether it should be tiled.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sBackgroundImage New value for property <code>backgroundImage</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setBackgroundImage(sBackgroundImage: sap.ui.core.URI): App;
		/**
		 * Sets a new value for property <code>backgroundOpacity</code>.
		 * 
		 * Opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 fully opaque).
		 * This can be used to make the application content better readable by making the background image partly transparent.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>1</code>.
		 * @param fBackgroundOpacity New value for property <code>backgroundOpacity</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setBackgroundOpacity(fBackgroundOpacity: number): App;
		/**
		 * Sets a new value for property <code>backgroundRepeat</code>.
		 * 
		 * Whether the background image (if configured) should be proportionally stretched to cover the whole App (false) or whether it should be tiled (true).
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bBackgroundRepeat New value for property <code>backgroundRepeat</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setBackgroundRepeat(bBackgroundRepeat: boolean): App;
		/**
		 * Sets a new value for property <code>homeIcon</code>.
		 * 
		 * The icon to be displayed on the home screen of iOS devices after the user does "add to home screen".
		 * 
		 * Note that only the first attempt to set the homeIcon will be executed, subsequent settings are ignored.
		 * 
		 * This icon must be in PNG format. The property can either hold the URL of one single icon which is used for all devices (and possibly scaled, which looks not perfect), or an object holding icon URLs for the different required sizes.
		 * 
		 * A desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires an object to be given and the "icon" property of this object then defines the desktop bookmark icon. For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all browsers. ICO is also preferred for this desktop icon setting because the file can contain different images for different resolutions.
		 * 
		 * One example is:
		 * 
		 * app.setHomeIcon({
		 * 'phone':'phone-icon.png',
		 * 'phone@2':'phone-retina.png',
		 * 'tablet':'tablet-icon.png',
		 * 'tablet@2':'tablet-retina.png',
		 * 'icon':'desktop.ico'
		 * });
		 * 
		 * The respective image sizes are 57/114 px for the phone and 72/144 px for the tablet.
		 * If an object is given but one of the sizes is not given, the largest given icon will be used for this size.
		 * 
		 * On Android these icons may or may not be used by the device. Apparently chances can be improved by adding glare effect and rounded corners, setting the file name so it ends with "-precomposed.png" and setting the "homeIconPrecomposed" property to "true".
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param oHomeIcon New value for property <code>homeIcon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHomeIcon(oHomeIcon: any): App;
	}

	class BackgroundDesign {
		/**
		 * A solid background color dependent on the theme.
		 */
		static Solid: string;
		/**
		 * A translucent background depending on the opacity value of the theme.
		 */
		static Translucent: string;
		/**
		 * Transparent background.
		 */
		static Transparent: string;
	}

	class Bar extends sap.ui.core.Control {
		/**
		 * Constructor for a new Bar.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.BarMetadata);
		/**
		 * Constructor for a new Bar.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Sets classes and tag according to the context of the page. Possible contexts are header, footer and sub-header.
		 */
		applyTagAndContextClassFor: any;
		/**
		 * Gets the available Bar contexts.
		 */
		getContext: any;
		/**
		 * Gets the HTML tag of the root element.
		 */
		getHTMLTag: any;
		/**
		 * Determines whether the Bar is sensitive to the container context.
		 * 
		 * Implementation of the IBar interface.
		 */
		isContextSensitive: any;
		/**
		 * Sets the HTML tag of the root element.
		 */
		setHTMLTag: any;
		/**
		 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): Bar;
		/**
		 * Adds some contentLeft to the aggregation <code>contentLeft</code>.
		 * @param oContentLeft the contentLeft to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addContentLeft(oContentLeft: sap.ui.core.Control): Bar;
		/**
		 * Adds some contentMiddle to the aggregation <code>contentMiddle</code>.
		 * @param oContentMiddle the contentMiddle to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addContentMiddle(oContentMiddle: sap.ui.core.Control): Bar;
		/**
		 * Adds some contentRight to the aggregation <code>contentRight</code>.
		 * @param oContentRight the contentRight to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addContentRight(oContentRight: sap.ui.core.Control): Bar;
		/**
		 * Destroys all the contentLeft in the aggregation <code>contentLeft</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyContentLeft(): Bar;
		/**
		 * Destroys all the contentMiddle in the aggregation <code>contentMiddle</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyContentMiddle(): Bar;
		/**
		 * Destroys all the contentRight in the aggregation <code>contentRight</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyContentRight(): Bar;
		/**
		 * Creates a new subclass of class sap.m.Bar with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|BarMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
		 * @return 
		 */
		getAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Gets content of aggregation <code>contentLeft</code>.
		 * 
		 * Represents the left content area, usually containing a button or an app icon. If it is overlapped by the right content, its content will disappear and the text will show an ellipsis.
		 * @return 
		 */
		getContentLeft(): sap.ui.core.Control[];
		/**
		 * Gets content of aggregation <code>contentMiddle</code>.
		 * 
		 * Represents the middle content area. Controls such as label, segmented buttons or select can be placed here. The content is centrally positioned if there is enough space. If the right or left content overlaps the middle content, the middle content will be centered in the space between the left and the right content.
		 * @return 
		 */
		getContentMiddle(): sap.ui.core.Control[];
		/**
		 * Gets content of aggregation <code>contentRight</code>.
		 * 
		 * Represents the right content area. Controls such as action buttons or search field can be placed here.
		 * @return 
		 */
		getContentRight(): sap.ui.core.Control[];
		/**
		 * Gets current value of property <code>design</code>.
		 * 
		 * Determines the design of the bar. If set to auto, it becomes dependent on the place where the bar is placed.
		 * 
		 * Default value is <code>Auto</code>.
		 * @return Value of property <code>design</code>
		 */
		getDesign(): BarDesign;
		/**
		 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>contentLeft</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oContentLeft The contentLeft whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfContentLeft(oContentLeft: sap.ui.core.Control): number;
		/**
		 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>contentMiddle</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oContentMiddle The contentMiddle whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfContentMiddle(oContentMiddle: sap.ui.core.Control): number;
		/**
		 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>contentRight</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oContentRight The contentRight whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfContentRight(oContentRight: sap.ui.core.Control): number;
		/**
		 * Inserts a contentLeft into the aggregation <code>contentLeft</code>.
		 * @param oContentLeft the contentLeft to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the contentLeft should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the contentLeft is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the contentLeft is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertContentLeft(oContentLeft: sap.ui.core.Control, iIndex: number): Bar;
		/**
		 * Inserts a contentMiddle into the aggregation <code>contentMiddle</code>.
		 * @param oContentMiddle the contentMiddle to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the contentMiddle should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the contentMiddle is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the contentMiddle is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertContentMiddle(oContentMiddle: sap.ui.core.Control, iIndex: number): Bar;
		/**
		 * Inserts a contentRight into the aggregation <code>contentRight</code>.
		 * @param oContentRight the contentRight to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the contentRight should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the contentRight is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the contentRight is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertContentRight(oContentRight: sap.ui.core.Control, iIndex: number): Bar;
		/**
		 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Removes all the controls from the aggregation <code>contentLeft</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllContentLeft(): sap.ui.core.Control[];
		/**
		 * Removes all the controls from the aggregation <code>contentMiddle</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllContentMiddle(): sap.ui.core.Control[];
		/**
		 * Removes all the controls from the aggregation <code>contentRight</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllContentRight(): sap.ui.core.Control[];
		/**
		 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
		 * @return The removed ariaLabelledBy or <code>null</code>
		 */
		removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Removes a contentLeft from the aggregation <code>contentLeft</code>.
		 * @param vContentLeft The contentLeft to remove or its index or id
		 * @return The removed contentLeft or <code>null</code>
		 */
		removeContentLeft(vContentLeft: number|string|sap.ui.core.Control): sap.ui.core.Control;
		/**
		 * Removes a contentMiddle from the aggregation <code>contentMiddle</code>.
		 * @param vContentMiddle The contentMiddle to remove or its index or id
		 * @return The removed contentMiddle or <code>null</code>
		 */
		removeContentMiddle(vContentMiddle: number|string|sap.ui.core.Control): sap.ui.core.Control;
		/**
		 * Removes a contentRight from the aggregation <code>contentRight</code>.
		 * @param vContentRight The contentRight to remove or its index or id
		 * @return The removed contentRight or <code>null</code>
		 */
		removeContentRight(vContentRight: number|string|sap.ui.core.Control): sap.ui.core.Control;
		/**
		 * Sets a new value for property <code>design</code>.
		 * 
		 * Determines the design of the bar. If set to auto, it becomes dependent on the place where the bar is placed.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Auto</code>.
		 * @param sDesign New value for property <code>design</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDesign(sDesign: BarDesign): Bar;
	}

	class BarDesign {
		/**
		 * The Bar can be inserted into other controls and if the design is "Auto" then it inherits the design from parent control.
		 */
		static Auto: string;
		/**
		 * The bar will be styled like a footer of the page.
		 */
		static Footer: string;
		/**
		 * The bar will be styled like a header of the page.
		 */
		static Header: string;
		/**
		 * The bar will be styled like a subheader of the page.
		 */
		static SubHeader: string;
	}

	class Breadcrumbs extends sap.ui.core.Control {
		/**
		 * Constructor for a new Breadcrumbs
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.BreadcrumbsMetadata);
		/**
		 * Constructor for a new Breadcrumbs
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some link to the aggregation <code>links</code>.
		 * @param oLink the link to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addLink(oLink: Link): Breadcrumbs;
		/**
		 * Destroys all the links in the aggregation <code>links</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyLinks(): Breadcrumbs;
		/**
		 * Creates a new subclass of class sap.m.Breadcrumbs with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|BreadcrumbsMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>currentLocationText</code>.
		 * 
		 * Determines the text of current/last element in the Breadcrumbs path.
		 * @return Value of property <code>currentLocationText</code>
		 */
		getCurrentLocationText(): string;
		/**
		 * Gets content of aggregation <code>links</code>.
		 * 
		 * A list of all the active link elements in the Breadcrumbs control.
		 * <b>Note:</b> Enabling the property <code>wrapping</code> of the link will not work
		 * since it's incompatible with the concept of the control.
		 * The other properties will work, but their effect may be undesirable.
		 * @return 
		 */
		getLinks(): Link[];
		/**
		 * Checks for the provided <code>sap.m.Link</code> in the aggregation <code>links</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oLink The link whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfLink(oLink: Link): number;
		/**
		 * Inserts a link into the aggregation <code>links</code>.
		 * @param oLink the link to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the link should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the link is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the link is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertLink(oLink: Link, iIndex: number): Breadcrumbs;
		/**
		 * Removes all the controls from the aggregation <code>links</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllLinks(): Link[];
		/**
		 * Removes a link from the aggregation <code>links</code>.
		 * @param vLink The link to remove or its index or id
		 * @return The removed link or <code>null</code>
		 */
		removeLink(vLink: number|string|Link): Link;
		/**
		 * Sets a new value for property <code>currentLocationText</code>.
		 * 
		 * Determines the text of current/last element in the Breadcrumbs path.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sCurrentLocationText New value for property <code>currentLocationText</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setCurrentLocationText(sCurrentLocationText: string): Breadcrumbs;
	}

	class BusyDialog extends sap.ui.core.Control {
		/**
		 * Constructor for a new BusyDialog.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given.(optional)
		 * @param mSettings Initial settings for the new control.(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.BusyDialogMetadata);
		/**
		 * Constructor for a new BusyDialog.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given.(optional)
		 * @param mSettings Initial settings for the new control.(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): BusyDialog;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>close</code> event of this <code>sap.m.BusyDialog</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.BusyDialog</code> itself.
		 * 
		 * Fires when the busy dialog is closed.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.BusyDialog</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachClose(oData: any, fnFunction: any, oListener?: any): BusyDialog;
		/**
		 * Closes the BusyDialog.
		 * @return 
		 */
		close(): BusyDialog;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>close</code> event of this <code>sap.m.BusyDialog</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachClose(fnFunction: any, oListener: any): BusyDialog;
		/**
		 * Creates a new subclass of class sap.m.BusyDialog with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|BusyDialogMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>close</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>cancelPressed</code> of type <code>boolean</code>Indicates if the close events are triggered by a user, pressing a cancel button or because the operation was terminated.
		 * This parameter is set to true if the close event is fired by user interaction.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireClose(mArguments?: any): BusyDialog;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
		 * @return 
		 */
		getAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Gets current value of property <code>cancelButtonText</code>.
		 * 
		 * The text of the cancel button. The default text is "Cancel" (translated to the respective language).
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>cancelButtonText</code>
		 */
		getCancelButtonText(): string;
		/**
		 * Gets current value of property <code>customIcon</code>.
		 * 
		 * Icon, used from the BusyIndicator. This icon is invisible in iOS platform and it is density aware. You can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density screens.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>customIcon</code>
		 */
		getCustomIcon(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>customIconDensityAware</code>.
		 * 
		 * If this is set to <code>false</code>, the source image will be loaded directly without attempting to fetch the density perfect image for high density devices.
		 * By default, this is set to <code>true</code> but then one or more requests are sent trying to get the density perfect version of the image.
		 * 
		 * If bandwidth is the key for the application, set this value to <code>false</code>.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>customIconDensityAware</code>
		 */
		getCustomIconDensityAware(): boolean;
		/**
		 * Gets current value of property <code>customIconHeight</code>.
		 * 
		 * Height of the provided icon with default value "44px".
		 * 
		 * Default value is <code>44px</code>.
		 * @return Value of property <code>customIconHeight</code>
		 */
		getCustomIconHeight(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>customIconRotationSpeed</code>.
		 * 
		 * Defines the rotation speed of the given image. If GIF file is used, the speed has to be set to 0. The value is in milliseconds.
		 * 
		 * Default value is <code>1000</code>.
		 * @return Value of property <code>customIconRotationSpeed</code>
		 */
		getCustomIconRotationSpeed(): number;
		/**
		 * Gets current value of property <code>customIconWidth</code>.
		 * 
		 * Width of the provided icon with default value "44px".
		 * 
		 * Default value is <code>44px</code>.
		 * @return Value of property <code>customIconWidth</code>
		 */
		getCustomIconWidth(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>showCancelButton</code>.
		 * 
		 * Indicates if the cancel button will be rendered inside the busy dialog. The default value is set to <code>false</code>.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>showCancelButton</code>
		 */
		getShowCancelButton(): boolean;
		/**
		 * Gets current value of property <code>text</code>.
		 * 
		 * Optional text displayed inside the dialog.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>text</code>
		 */
		getText(): string;
		/**
		 * Gets current value of property <code>title</code>.
		 * 
		 * Sets the title of the BusyDialog. The default value is an empty string.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>title</code>
		 */
		getTitle(): string;
		/**
		 * Opens the BusyDialog.
		 * @return 
		 */
		open(): BusyDialog;
		/**
		 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
		 * @return The removed ariaLabelledBy or <code>null</code>
		 */
		removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Sets a new value for property <code>cancelButtonText</code>.
		 * 
		 * The text of the cancel button. The default text is "Cancel" (translated to the respective language).
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sCancelButtonText New value for property <code>cancelButtonText</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setCancelButtonText(sCancelButtonText: string): BusyDialog;
		/**
		 * Sets a new value for property <code>customIcon</code>.
		 * 
		 * Icon, used from the BusyIndicator. This icon is invisible in iOS platform and it is density aware. You can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density screens.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sCustomIcon New value for property <code>customIcon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setCustomIcon(sCustomIcon: sap.ui.core.URI): BusyDialog;
		/**
		 * Sets a new value for property <code>customIconDensityAware</code>.
		 * 
		 * If this is set to <code>false</code>, the source image will be loaded directly without attempting to fetch the density perfect image for high density devices.
		 * By default, this is set to <code>true</code> but then one or more requests are sent trying to get the density perfect version of the image.
		 * 
		 * If bandwidth is the key for the application, set this value to <code>false</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bCustomIconDensityAware New value for property <code>customIconDensityAware</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setCustomIconDensityAware(bCustomIconDensityAware: boolean): BusyDialog;
		/**
		 * Sets a new value for property <code>customIconHeight</code>.
		 * 
		 * Height of the provided icon with default value "44px".
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>44px</code>.
		 * @param sCustomIconHeight New value for property <code>customIconHeight</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setCustomIconHeight(sCustomIconHeight: sap.ui.core.CSSSize): BusyDialog;
		/**
		 * Sets a new value for property <code>customIconRotationSpeed</code>.
		 * 
		 * Defines the rotation speed of the given image. If GIF file is used, the speed has to be set to 0. The value is in milliseconds.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>1000</code>.
		 * @param iCustomIconRotationSpeed New value for property <code>customIconRotationSpeed</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setCustomIconRotationSpeed(iCustomIconRotationSpeed: number): BusyDialog;
		/**
		 * Sets a new value for property <code>customIconWidth</code>.
		 * 
		 * Width of the provided icon with default value "44px".
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>44px</code>.
		 * @param sCustomIconWidth New value for property <code>customIconWidth</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setCustomIconWidth(sCustomIconWidth: sap.ui.core.CSSSize): BusyDialog;
		/**
		 * Sets a new value for property <code>showCancelButton</code>.
		 * 
		 * Indicates if the cancel button will be rendered inside the busy dialog. The default value is set to <code>false</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bShowCancelButton New value for property <code>showCancelButton</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowCancelButton(bShowCancelButton: boolean): BusyDialog;
		/**
		 * Sets a new value for property <code>text</code>.
		 * 
		 * Optional text displayed inside the dialog.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sText New value for property <code>text</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setText(sText: string): BusyDialog;
		/**
		 * Sets a new value for property <code>title</code>.
		 * 
		 * Sets the title of the BusyDialog. The default value is an empty string.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sTitle New value for property <code>title</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTitle(sTitle: string): BusyDialog;
	}

	class BusyIndicator extends sap.ui.core.Control {
		/**
		 * Constructor for a new BusyIndicator.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.BusyIndicatorMetadata);
		/**
		 * Constructor for a new BusyIndicator.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): BusyIndicator;
		/**
		 * Creates a new subclass of class sap.m.BusyIndicator with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|BusyIndicatorMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
		 * @return 
		 */
		getAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Gets current value of property <code>customIcon</code>.
		 * 
		 * Icon URL if an icon is used as the busy indicator.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>customIcon</code>
		 */
		getCustomIcon(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>customIconDensityAware</code>.
		 * 
		 * If this is set to false, the src image will be loaded directly without attempting
		 * to fetch the density perfect image for high density device.
		 * By default, this is set to true but then one or more requests are sent to the server,
		 * trying to get the density perfect version of the specified image.
		 * If bandwidth is the key for the application, set this value to false.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>customIconDensityAware</code>
		 */
		getCustomIconDensityAware(): boolean;
		/**
		 * Gets current value of property <code>customIconHeight</code>.
		 * 
		 * Height of the provided icon. By default 44px are used.
		 * 
		 * Default value is <code>44px</code>.
		 * @return Value of property <code>customIconHeight</code>
		 */
		getCustomIconHeight(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>customIconRotationSpeed</code>.
		 * 
		 * Defines the rotation speed of the given image.
		 * If a .gif is used, the speed has to be set to 0.
		 * The unit is in ms.
		 * <b>Note:</b> Values are considered valid when greater than or equal to 0.
		 * If invalid value is provided the speed defaults to 0.
		 * 
		 * Default value is <code>1000</code>.
		 * @return Value of property <code>customIconRotationSpeed</code>
		 */
		getCustomIconRotationSpeed(): number;
		/**
		 * Gets current value of property <code>customIconWidth</code>.
		 * 
		 * Width of the provided icon. By default 44px are used.
		 * 
		 * Default value is <code>44px</code>.
		 * @return Value of property <code>customIconWidth</code>
		 */
		getCustomIconWidth(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>size</code>.
		 * 
		 * Defines the size of the busy indicator.
		 * The animation consists of three circles, each of which will be this size.
		 * Therefore the total width of the control amounts to three times the given size.
		 * 
		 * Default value is <code>1rem</code>.
		 * @return Value of property <code>size</code>
		 */
		getSize(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>text</code>.
		 * 
		 * Defines text to be displayed below the busy indicator.
		 * It can be used to inform the user of the current operation.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>text</code>
		 */
		getText(): string;
		/**
		 * Gets current value of property <code>textDirection</code>.
		 * 
		 * Options for the text direction are RTL and LTR.
		 * Alternatively, the control can inherit the text direction from its parent container.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @return Value of property <code>textDirection</code>
		 */
		getTextDirection(): sap.ui.core.TextDirection;
		/**
		 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
		 * @return The removed ariaLabelledBy or <code>null</code>
		 */
		removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Sets a new value for property <code>customIcon</code>.
		 * 
		 * Icon URL if an icon is used as the busy indicator.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sCustomIcon New value for property <code>customIcon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setCustomIcon(sCustomIcon: sap.ui.core.URI): BusyIndicator;
		/**
		 * Sets a new value for property <code>customIconDensityAware</code>.
		 * 
		 * If this is set to false, the src image will be loaded directly without attempting
		 * to fetch the density perfect image for high density device.
		 * By default, this is set to true but then one or more requests are sent to the server,
		 * trying to get the density perfect version of the specified image.
		 * If bandwidth is the key for the application, set this value to false.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bCustomIconDensityAware New value for property <code>customIconDensityAware</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setCustomIconDensityAware(bCustomIconDensityAware: boolean): BusyIndicator;
		/**
		 * Sets a new value for property <code>customIconHeight</code>.
		 * 
		 * Height of the provided icon. By default 44px are used.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>44px</code>.
		 * @param sCustomIconHeight New value for property <code>customIconHeight</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setCustomIconHeight(sCustomIconHeight: sap.ui.core.CSSSize): BusyIndicator;
		/**
		 * Sets a new value for property <code>customIconRotationSpeed</code>.
		 * 
		 * Defines the rotation speed of the given image.
		 * If a .gif is used, the speed has to be set to 0.
		 * The unit is in ms.
		 * <b>Note:</b> Values are considered valid when greater than or equal to 0.
		 * If invalid value is provided the speed defaults to 0.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>1000</code>.
		 * @param iCustomIconRotationSpeed New value for property <code>customIconRotationSpeed</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setCustomIconRotationSpeed(iCustomIconRotationSpeed: number): BusyIndicator;
		/**
		 * Sets a new value for property <code>customIconWidth</code>.
		 * 
		 * Width of the provided icon. By default 44px are used.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>44px</code>.
		 * @param sCustomIconWidth New value for property <code>customIconWidth</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setCustomIconWidth(sCustomIconWidth: sap.ui.core.CSSSize): BusyIndicator;
		/**
		 * Sets a new value for property <code>size</code>.
		 * 
		 * Defines the size of the busy indicator.
		 * The animation consists of three circles, each of which will be this size.
		 * Therefore the total width of the control amounts to three times the given size.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>1rem</code>.
		 * @param sSize New value for property <code>size</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setSize(sSize: sap.ui.core.CSSSize): BusyIndicator;
		/**
		 * Sets a new value for property <code>text</code>.
		 * 
		 * Defines text to be displayed below the busy indicator.
		 * It can be used to inform the user of the current operation.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sText New value for property <code>text</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setText(sText: string): BusyIndicator;
		/**
		 * Sets a new value for property <code>textDirection</code>.
		 * 
		 * Options for the text direction are RTL and LTR.
		 * Alternatively, the control can inherit the text direction from its parent container.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @param sTextDirection New value for property <code>textDirection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTextDirection(sTextDirection: sap.ui.core.TextDirection): BusyIndicator;
	}

	class Button extends sap.ui.core.Control {
		/**
		 * Constructor for a new Button.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.ButtonMetadata);
		/**
		 * Constructor for a new Button.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID|sap.ui.core.Control): Button;
		/**
		 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): Button;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this <code>sap.m.Button</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Button</code> itself.
		 * 
		 * Event is fired when the user clicks on the control.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Button</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachPress(oData: any, fnFunction: any, oListener?: any): Button;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this <code>sap.m.Button</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachPress(fnFunction: any, oListener: any): Button;
		/**
		 * Creates a new subclass of class sap.m.Button with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ButtonMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>press</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		firePress(mArguments?: any): Button;
		/**
		 * 
		 */
		getAccessibilityInfo();
		/**
		 * This function (if available on the concrete control) provides
		 * the current accessibility state of the control.
		 * 
		 * Applications must not call this hook method directly, it is called by the framework.
		 * 
		 * Subclasses of Control should implement this hook to provide any necessary accessibility information:
		 * 
		 * <pre>
		 * MyControl.prototype.getAccessibilityInfo = function() {
		 *    return {
		 *      role: "textbox",      // String which represents the WAI-ARIA role which is implemented by the control.
		 *      type: "date input",   // String which represents the control type (Must be a translated text). Might correlate with
		 *                            // the role.
		 *      description: "value", // String which describes the most relevant control state (e.g. the inputs value). Must be a
		 *                            // translated text.
		 *                            // Note: The type and the enabled/editable state must not be handled here.
		 *      focusable: true,      // Boolean which describes whether the control can get the focus.
		 *      enabled: true,        // Boolean which describes whether the control is enabled. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      editable: true,       // Boolean which describes whether the control is editable. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      children: []          // Array of accessibility info objects of children of the given control (e.g. when the control is a layout).
		 *                            // Note: Children should only be provided when it is helpful to understand the accessibility context
		 *                            //       (e.g. a form control must not provide details of its internals (fields, labels, ...) but a
		 *                            //       layout should).
		 *    };
		 * };
		 * </pre>
		 * 
		 * Note: The returned object provides the accessibility state of the control at the point in time when this function is called.
		 * @note Overload from base type sap.ui.core.Control
		 * @return Current accessibility state of the control.
		 */
		getAccessibilityInfo(): any;
		/**
		 * Gets current value of property <code>activeIcon</code>.
		 * 
		 * The source property of an alternative icon for the active (depressed) state of the button.
		 * Both active and default icon properties should be defined and have the same type: image or icon font.
		 * If the <code>icon</code> property is not set or has a different type, the active icon is not displayed.
		 * @return Value of property <code>activeIcon</code>
		 */
		getActiveIcon(): sap.ui.core.URI;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaDescribedBy</code>.
		 * @return 
		 */
		getAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
		 * @return 
		 */
		getAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Gets current value of property <code>enabled</code>.
		 * 
		 * Boolean property to enable the control (default is true). Buttons that are disabled have other colors than enabled ones, depending on custom settings
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>enabled</code>
		 */
		getEnabled(): boolean;
		/**
		 * Gets current value of property <code>icon</code>.
		 * 
		 * Icon to be displayed as graphical element within the button. This can be an image or an icon from the icon font.
		 * @return Value of property <code>icon</code>
		 */
		getIcon(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>iconDensityAware</code>.
		 * 
		 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
		 * 
		 * If only one version of image is provided, set this value to false to avoid the attempt of fetching density perfect image.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>iconDensityAware</code>
		 */
		getIconDensityAware(): boolean;
		/**
		 * Gets current value of property <code>iconFirst</code>.
		 * 
		 * If set to true (default), the display sequence is 1. icon 2. control text
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>iconFirst</code>
		 */
		getIconFirst(): boolean;
		/**
		 * Defines to which DOM reference the Popup should be docked
		 * @return the DOM reference that Popup should dock to
		 */
		getPopupAnchorDomRef(): any;
		/**
		 * Gets current value of property <code>text</code>.
		 * 
		 * Button text
		 * @return Value of property <code>text</code>
		 */
		getText(): string;
		/**
		 * Gets current value of property <code>textDirection</code>.
		 * 
		 * This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @return Value of property <code>textDirection</code>
		 */
		getTextDirection(): sap.ui.core.TextDirection;
		/**
		 * Gets current value of property <code>type</code>.
		 * 
		 * Type of a button (e.g. Default, Accept, Reject, Back, etc.)
		 * 
		 * Default value is <code>Default</code>.
		 * @return Value of property <code>type</code>
		 */
		getType(): ButtonType;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Defines the width of the button.
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Removes all the controls in the association named <code>ariaDescribedBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
		 * @return The removed ariaDescribedBy or <code>null</code>
		 */
		removeAriaDescribedBy(vAriaDescribedBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
		 * @return The removed ariaLabelledBy or <code>null</code>
		 */
		removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Sets a new value for property <code>activeIcon</code>.
		 * 
		 * The source property of an alternative icon for the active (depressed) state of the button.
		 * Both active and default icon properties should be defined and have the same type: image or icon font.
		 * If the <code>icon</code> property is not set or has a different type, the active icon is not displayed.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sActiveIcon New value for property <code>activeIcon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setActiveIcon(sActiveIcon: sap.ui.core.URI): Button;
		/**
		 * Sets a new value for property <code>enabled</code>.
		 * 
		 * Boolean property to enable the control (default is true). Buttons that are disabled have other colors than enabled ones, depending on custom settings
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bEnabled New value for property <code>enabled</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setEnabled(bEnabled: boolean): Button;
		/**
		 * Property setter for the icon
		 * @param sIcon new value of the Icon property
		 * @return this to allow method chaining
		 */
		setIcon(sIcon: sap.ui.core.URI): Button;
		/**
		 * Sets a new value for property <code>iconDensityAware</code>.
		 * 
		 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
		 * 
		 * If only one version of image is provided, set this value to false to avoid the attempt of fetching density perfect image.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bIconDensityAware New value for property <code>iconDensityAware</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIconDensityAware(bIconDensityAware: boolean): Button;
		/**
		 * Sets a new value for property <code>iconFirst</code>.
		 * 
		 * If set to true (default), the display sequence is 1. icon 2. control text
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bIconFirst New value for property <code>iconFirst</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIconFirst(bIconFirst: boolean): Button;
		/**
		 * Property setter for the text
		 * @param sText new value of the Text attribute
		 * @return this to allow method chaining
		 */
		setText(sText: string): Button;
		/**
		 * Sets a new value for property <code>textDirection</code>.
		 * 
		 * This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @param sTextDirection New value for property <code>textDirection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTextDirection(sTextDirection: sap.ui.core.TextDirection): Button;
		/**
		 * Sets a new value for property <code>type</code>.
		 * 
		 * Type of a button (e.g. Default, Accept, Reject, Back, etc.)
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Default</code>.
		 * @param sType New value for property <code>type</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setType(sType: ButtonType): Button;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Defines the width of the button.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): Button;
	}

	class ButtonType {
		/**
		 * accept type (blue button)
		 */
		static Accept: string;
		/**
		 * back type (back navigation button for header)
		 */
		static Back: string;
		/**
		 * default type (no special styling)
		 */
		static Default: string;
		/**
		 * emphasized type
		 */
		static Emphasized: string;
		/**
		 * reject style (red button)
		 */
		static Reject: string;
		/**
		 * transparent type
		 */
		static Transparent: string;
		/**
		 * Unstyled type (no styling)
		 */
		static Unstyled: string;
		/**
		 * up type (up navigation button for header)
		 */
		static Up: string;
	}

	class Carousel extends sap.ui.core.Control {
		/**
		 * Constructor for a new Carousel.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.CarouselMetadata);
		/**
		 * Constructor for a new Carousel.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some page to the aggregation <code>pages</code>.
		 * @param oPage the page to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addPage(oPage: sap.ui.core.Control): Carousel;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>pageChanged</code> event of this <code>sap.m.Carousel</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Carousel</code> itself.
		 * 
		 * This event is fired after a carousel swipe has been completed. It is triggered both by physical swipe events and through API carousel manipulations such as calling 'next', 'previous' or 'setActivePageId' functions.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Carousel</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachPageChanged(oData: any, fnFunction: any, oListener?: any): Carousel;
		/**
		 * Destroys all the pages in the aggregation <code>pages</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyPages(): Carousel;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>pageChanged</code> event of this <code>sap.m.Carousel</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachPageChanged(fnFunction: any, oListener: any): Carousel;
		/**
		 * Creates a new subclass of class sap.m.Carousel with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|CarouselMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>pageChanged</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>oldActivePageId</code> of type <code>string</code>Id of the page which was active before the page change.</li>
		 * <li><code>newActivePageId</code> of type <code>string</code>Id of the page which is active after the page change.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		firePageChanged(mArguments?: any): Carousel;
		/**
		 * ID of the element which is the current target of the association <code>activePage</code>, or <code>null</code>.
		 * @return 
		 */
		getActivePage(): sap.ui.core.ID;
		/**
		 * Gets current value of property <code>height</code>.
		 * 
		 * The height of the carousel. Note that when a percentage value is used, the height of the surrounding container must be defined.
		 * 
		 * Default value is <code>100%</code>.
		 * @return Value of property <code>height</code>
		 */
		getHeight(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>loop</code>.
		 * 
		 * Defines whether the carousel should loop, i.e show the first page after the last page is reached and vice versa.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>loop</code>
		 */
		getLoop(): boolean;
		/**
		 * Gets current value of property <code>pageIndicatorPlacement</code>.
		 * 
		 * Defines where the carousel's page indicator is displayed. Possible values are sap.m.PlacementType.Top, sap.m.PlacementType.Bottom. Other values are ignored and the default value will be applied. The default value is sap.m.PlacementType.Bottom.
		 * 
		 * Default value is <code>Bottom</code>.
		 * @return Value of property <code>pageIndicatorPlacement</code>
		 */
		getPageIndicatorPlacement(): PlacementType;
		/**
		 * Gets content of aggregation <code>pages</code>.
		 * 
		 * The content which the carousel displays.
		 * @return 
		 */
		getPages(): sap.ui.core.Control[];
		/**
		 * Gets current value of property <code>showPageIndicator</code>.
		 * 
		 * Show or hide carousel's page indicator.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>showPageIndicator</code>
		 */
		getShowPageIndicator(): boolean;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * The width of the carousel. Note that when a percentage value is used, the height of the surrounding container must be defined.
		 * 
		 * Default value is <code>100%</code>.
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>pages</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oPage The page whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfPage(oPage: sap.ui.core.Control): number;
		/**
		 * Inserts a page into the aggregation <code>pages</code>.
		 * @param oPage the page to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the page should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the page is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the page is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertPage(oPage: sap.ui.core.Control, iIndex: number): Carousel;
		/**
		 * Call this method to display the next page (corresponds to a swipe right). Returns 'this' for method chaining.
		 * @return 
		 */
		next(): Carousel;
		/**
		 * Call this method to display the previous page (corresponds to a swipe left). Returns 'this' for method chaining.
		 * @return 
		 */
		previous(): Carousel;
		/**
		 * Removes all the controls from the aggregation <code>pages</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllPages(): sap.ui.core.Control[];
		/**
		 * Removes a page from the aggregation <code>pages</code>.
		 * @param vPage The page to remove or its index or id
		 * @return The removed page or <code>null</code>
		 */
		removePage(vPage: number|string|sap.ui.core.Control): sap.ui.core.Control;
		/**
		 * Sets the associated <code>activePage</code>.
		 * @param oActivePage ID of an element which becomes the new target of this activePage association; alternatively, an element instance may be given
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setActivePage(oActivePage: sap.ui.core.ID|sap.ui.core.Control): Carousel;
		/**
		 * Sets a new value for property <code>height</code>.
		 * 
		 * The height of the carousel. Note that when a percentage value is used, the height of the surrounding container must be defined.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>100%</code>.
		 * @param sHeight New value for property <code>height</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHeight(sHeight: sap.ui.core.CSSSize): Carousel;
		/**
		 * Sets a new value for property <code>loop</code>.
		 * 
		 * Defines whether the carousel should loop, i.e show the first page after the last page is reached and vice versa.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bLoop New value for property <code>loop</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setLoop(bLoop: boolean): Carousel;
		/**
		 * Sets a new value for property <code>pageIndicatorPlacement</code>.
		 * 
		 * Defines where the carousel's page indicator is displayed. Possible values are sap.m.PlacementType.Top, sap.m.PlacementType.Bottom. Other values are ignored and the default value will be applied. The default value is sap.m.PlacementType.Bottom.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Bottom</code>.
		 * @param sPageIndicatorPlacement New value for property <code>pageIndicatorPlacement</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setPageIndicatorPlacement(sPageIndicatorPlacement: PlacementType): Carousel;
		/**
		 * Sets a new value for property <code>showPageIndicator</code>.
		 * 
		 * Show or hide carousel's page indicator.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bShowPageIndicator New value for property <code>showPageIndicator</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowPageIndicator(bShowPageIndicator: boolean): Carousel;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * The width of the carousel. Note that when a percentage value is used, the height of the surrounding container must be defined.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>100%</code>.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): Carousel;
	}

	class CheckBox extends sap.ui.core.Control {
		/**
		 * Constructor for a new CheckBox.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId The ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings The Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.CheckBoxMetadata);
		/**
		 * Constructor for a new CheckBox.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId The ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings The Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID|sap.ui.core.Control): CheckBox;
		/**
		 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): CheckBox;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>select</code> event of this <code>sap.m.CheckBox</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.CheckBox</code> itself.
		 * 
		 * Event is triggered when the control status is changed by the user by selecting or deselecting the checkbox.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.CheckBox</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachSelect(oData: any, fnFunction: any, oListener?: any): CheckBox;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>select</code> event of this <code>sap.m.CheckBox</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachSelect(fnFunction: any, oListener: any): CheckBox;
		/**
		 * Creates a new subclass of class sap.m.CheckBox with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|CheckBoxMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>select</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>selected</code> of type <code>boolean</code>Checks whether the CheckBox is marked or not .</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireSelect(mArguments?: any): CheckBox;
		/**
		 * 
		 */
		getAccessibilityInfo();
		/**
		 * This function (if available on the concrete control) provides
		 * the current accessibility state of the control.
		 * 
		 * Applications must not call this hook method directly, it is called by the framework.
		 * 
		 * Subclasses of Control should implement this hook to provide any necessary accessibility information:
		 * 
		 * <pre>
		 * MyControl.prototype.getAccessibilityInfo = function() {
		 *    return {
		 *      role: "textbox",      // String which represents the WAI-ARIA role which is implemented by the control.
		 *      type: "date input",   // String which represents the control type (Must be a translated text). Might correlate with
		 *                            // the role.
		 *      description: "value", // String which describes the most relevant control state (e.g. the inputs value). Must be a
		 *                            // translated text.
		 *                            // Note: The type and the enabled/editable state must not be handled here.
		 *      focusable: true,      // Boolean which describes whether the control can get the focus.
		 *      enabled: true,        // Boolean which describes whether the control is enabled. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      editable: true,       // Boolean which describes whether the control is editable. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      children: []          // Array of accessibility info objects of children of the given control (e.g. when the control is a layout).
		 *                            // Note: Children should only be provided when it is helpful to understand the accessibility context
		 *                            //       (e.g. a form control must not provide details of its internals (fields, labels, ...) but a
		 *                            //       layout should).
		 *    };
		 * };
		 * </pre>
		 * 
		 * Note: The returned object provides the accessibility state of the control at the point in time when this function is called.
		 * @note Overload from base type sap.ui.core.Control
		 * @return Current accessibility state of the control.
		 */
		getAccessibilityInfo(): any;
		/**
		 * Gets current value of property <code>activeHandling</code>.
		 * 
		 * Flag to switch on activeHandling, when it is switched off, there will be no visual changes on active state. Default value is 'true'
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>activeHandling</code>
		 */
		getActiveHandling(): boolean;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaDescribedBy</code>.
		 * @return 
		 */
		getAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
		 * @return 
		 */
		getAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Gets current value of property <code>editable</code>.
		 * 
		 * Specifies whether the user shall be allowed to edit the state of the checkbox
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>editable</code>
		 */
		getEditable(): boolean;
		/**
		 * Gets current value of property <code>enabled</code>.
		 * 
		 * Disables the Checkbox. Disabled controls are not interactive and are rendered differently according to the theme.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>enabled</code>
		 */
		getEnabled(): boolean;
		/**
		 * Gets current value of property <code>name</code>.
		 * 
		 * The 'name' property to be used in the HTML code, for example for HTML forms that send data to the server via submit.
		 * @return Value of property <code>name</code>
		 */
		getName(): string;
		/**
		 * Gets current value of property <code>selected</code>.
		 * 
		 * Stores the state of the checkbox whether it is selected or not.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>selected</code>
		 */
		getSelected(): boolean;
		/**
		 * Returns the CheckBox`s tab index.
		 * @return iTabIndex for Checkbox
		 */
		getTabIndex(): number;
		/**
		 * Gets current value of property <code>text</code>.
		 * 
		 * Defines the text displayed next to the checkbox
		 * @return Value of property <code>text</code>
		 */
		getText(): string;
		/**
		 * Gets current value of property <code>textAlign</code>.
		 * 
		 * Aligns the text of the checkbox. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
		 * 
		 * Default value is <code>Begin</code>.
		 * @return Value of property <code>textAlign</code>
		 */
		getTextAlign(): sap.ui.core.TextAlign;
		/**
		 * Gets current value of property <code>textDirection</code>.
		 * 
		 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @return Value of property <code>textDirection</code>
		 */
		getTextDirection(): sap.ui.core.TextDirection;
		/**
		 * Gets current value of property <code>valueState</code>.
		 * 
		 * Accepts the core enumeration ValueState.type that supports 'None', 'Error', 'Warning' and 'Success'.
		 * 
		 * Default value is <code>None</code>.
		 * @return Value of property <code>valueState</code>
		 */
		getValueState(): sap.ui.core.ValueState;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Width of the checkbox`s label
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Removes all the controls in the association named <code>ariaDescribedBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
		 * @return The removed ariaDescribedBy or <code>null</code>
		 */
		removeAriaDescribedBy(vAriaDescribedBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
		 * @return The removed ariaLabelledBy or <code>null</code>
		 */
		removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Sets a new value for property <code>activeHandling</code>.
		 * 
		 * Flag to switch on activeHandling, when it is switched off, there will be no visual changes on active state. Default value is 'true'
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bActiveHandling New value for property <code>activeHandling</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setActiveHandling(bActiveHandling: boolean): CheckBox;
		/**
		 * Sets a new value for property <code>editable</code>.
		 * 
		 * Specifies whether the user shall be allowed to edit the state of the checkbox
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bEditable New value for property <code>editable</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setEditable(bEditable: boolean): CheckBox;
		/**
		 * Sets a new value for property <code>enabled</code>.
		 * 
		 * Disables the Checkbox. Disabled controls are not interactive and are rendered differently according to the theme.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bEnabled New value for property <code>enabled</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setEnabled(bEnabled: boolean): CheckBox;
		/**
		 * Sets a new value for property <code>name</code>.
		 * 
		 * The 'name' property to be used in the HTML code, for example for HTML forms that send data to the server via submit.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sName New value for property <code>name</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setName(sName: string): CheckBox;
		/**
		 * Sets the tab index of the control
		 * @param iTabIndex The tab index should be greater than or equal -1
		 * @return 
		 */
		setTabIndex(iTabIndex: number): CheckBox;
		/**
		 * Sets a new value for property <code>text</code>.
		 * 
		 * Defines the text displayed next to the checkbox
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sText New value for property <code>text</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setText(sText: string): CheckBox;
		/**
		 * Sets a new value for property <code>textAlign</code>.
		 * 
		 * Aligns the text of the checkbox. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Begin</code>.
		 * @param sTextAlign New value for property <code>textAlign</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTextAlign(sTextAlign: sap.ui.core.TextAlign): CheckBox;
		/**
		 * Sets a new value for property <code>textDirection</code>.
		 * 
		 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @param sTextDirection New value for property <code>textDirection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTextDirection(sTextDirection: sap.ui.core.TextDirection): CheckBox;
		/**
		 * Sets a new value for property <code>valueState</code>.
		 * 
		 * Accepts the core enumeration ValueState.type that supports 'None', 'Error', 'Warning' and 'Success'.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>None</code>.
		 * @param sValueState New value for property <code>valueState</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setValueState(sValueState: sap.ui.core.ValueState): CheckBox;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Width of the checkbox`s label
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): CheckBox;
	}

	class Column extends sap.ui.core.Element {
		/**
		 * Constructor for a new Column.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.ColumnMetadata);
		/**
		 * Constructor for a new Column.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Apply text alignment of the Column to Text/Label/Link...
		 * 
		 * TODO: This is so ugly to check content functions
		 * instead we should document how to use our controls
		 * to inherit text-alignment and we should add a new
		 * sap.ui.core.TextAlign type called "Inherit"
		 * @param oControl List control
		 * @param sAlign TextAlign enumeration(optional)
		 * @return oControl
		 */
		applyAlignTo(oControl: sap.ui.core.Control, sAlign?: string): sap.ui.core.Control;
		/**
		 * Clears the last value of the column if mergeDuplicates property is true
		 * @return 
		 */
		clearLastValue(): Column;
		/**
		 * Destroys the footer in the aggregation <code>footer</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyFooter(): Column;
		/**
		 * Destroys the header in the aggregation <code>header</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyHeader(): Column;
		/**
		 * Creates a new subclass of class sap.m.Column with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ColumnMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Returns CSS alignment according to column hAlign setting or given parameter
		 * for Begin/End values checks the locale settings
		 * @param sAlign TextAlign enumeration(optional)
		 * @return left|center|right
		 */
		getCssAlign(sAlign?: string): string;
		/**
		 * Gets current value of property <code>demandPopin</code>.
		 * 
		 * According to your minScreenWidth settings, the column can be hidden in different screen sizes.
		 * Setting this property to true, shows this column as pop-in instead of hiding it.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>demandPopin</code>
		 */
		getDemandPopin(): boolean;
		/**
		 * Gets content of aggregation <code>footer</code>.
		 * 
		 * Control to be displayed in the column footer.
		 * @return 
		 */
		getFooter(): sap.ui.core.Control;
		/**
		 * Gets current value of property <code>hAlign</code>.
		 * 
		 * Horizontal alignment of the column content. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
		 * 
		 * NOTE: Control with a "textAlign" property inherits the horizontal alignment.
		 * 
		 * Default value is <code>Begin</code>.
		 * @return Value of property <code>hAlign</code>
		 */
		getHAlign(): sap.ui.core.TextAlign;
		/**
		 * Gets content of aggregation <code>header</code>.
		 * 
		 * Control to be displayed in the column header.
		 * @return 
		 */
		getHeader(): sap.ui.core.Control;
		/**
		 * Gets the initial order of the column
		 * @return initial order of the column
		 */
		getInitialOrder(): number;
		/**
		 * Gets the last value of the column
		 */
		getLastValue();
		/**
		 * Gets current value of property <code>mergeDuplicates</code>.
		 * 
		 * Set "true" to merge repeating cells(duplicates) into one cell block.
		 * Please see "mergeFunctionName" property to customize this property.
		 * Note: This feature must not be used together with two-way binding. This property is ignored if a column is shown in the pop-in.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>mergeDuplicates</code>
		 */
		getMergeDuplicates(): boolean;
		/**
		 * Gets current value of property <code>mergeFunctionName</code>.
		 * 
		 * Defines the value getter(serialization) function if "mergeDuplicates" property is set "true"
		 * Control itself uses this function to compare values of two repeating cells.
		 * Default value "getText" is suitable for Label and Text control.
		 * e.g. For "Icon" control "getSrc" can be used.
		 * Note: You can pass one string parameter to given function after "#" sign. e.g. "data#myparameter"
		 * 
		 * Default value is <code>getText</code>.
		 * @return Value of property <code>mergeFunctionName</code>
		 */
		getMergeFunctionName(): string;
		/**
		 * Gets current value of property <code>minScreenWidth</code>.
		 * 
		 * By default column is always shown. If you set this property, control checks the minimum width of the screen to show or hide this column.
		 * As you can give specific CSS sizes(e.g: "480px" or "40em"), you can also use sap.m.ScreenSize enumeration(e.g: "Phone", "Tablet", "Desktop", "Small", "Medium", "Large", ....).
		 * 
		 * sap.m.Column.MediaQuery1->Range1 = 199
		 * 
		 * This property can be used for responsive design. e.g: "40em"(or "640px" or "Tablet") setting shows this column in iPad(and Desktop) but hides in iPhone.
		 * Please also see "demandPopin" property
		 * @return Value of property <code>minScreenWidth</code>
		 */
		getMinScreenWidth(): string;
		/**
		 * Gets the order of the column
		 * @return nOrder order of the column
		 */
		getOrder(): number;
		/**
		 * Gets current value of property <code>popinDisplay</code>.
		 * 
		 * Defines enumerated display options for the pop-in.
		 * 
		 * Default value is <code>Block</code>.
		 * @return Value of property <code>popinDisplay</code>
		 */
		getPopinDisplay(): PopinDisplay;
		/**
		 * Gets current value of property <code>styleClass</code>.
		 * 
		 * CSS class name for column contents(header, cells and footer of column). This property can be used for different column styling. If column is shown as pop-in then this class name is applied to related pop-in row.
		 * @return Value of property <code>styleClass</code>
		 */
		getStyleClass(): string;
		/**
		 * Gets current value of property <code>vAlign</code>.
		 * 
		 * Vertical alignment of the cells in a column. Possible values are "Inherit", "Top", "Middle", "Bottom"
		 * This property does not affect the vertical alignment of header and footer.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @return Value of property <code>vAlign</code>
		 */
		getVAlign(): sap.ui.core.VerticalAlign;
		/**
		 * Gets current value of property <code>visible</code>.
		 * 
		 * Specifies whether or not the column is visible. Invisible columns are not rendered.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>visible</code>
		 */
		getVisible(): boolean;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Defines the width of the column. If you leave it empty then this column covers the remaining space.
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Determines whether the column will be hidden via media queries or not
		 */
		isHidden();
		/**
		 * Determines whether the column will be shown as pop-in or not
		 */
		isPopin();
		/**
		 * Gets called from the Table when the all items are removed
		 */
		onItemsRemoved();
		/**
		 * Sets a new value for property <code>demandPopin</code>.
		 * 
		 * According to your minScreenWidth settings, the column can be hidden in different screen sizes.
		 * Setting this property to true, shows this column as pop-in instead of hiding it.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bDemandPopin New value for property <code>demandPopin</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDemandPopin(bDemandPopin: boolean): Column;
		/**
		 * Display or hide the column from given table
		 * This does not set the visibility property of the column
		 * @param oTableDomRef Table DOM reference
		 * @param bDisplay whether visible or not(optional)
		 */
		setDisplay(oTableDomRef: any, bDisplay?: boolean);
		/**
		 * Display or hide the column from given table via checking media query changes
		 * @param oTableDomRef Table DOM reference
		 */
		setDisplayViaMedia(oTableDomRef: any);
		/**
		 * Sets the aggregated <code>footer</code>.
		 * @param oFooter The footer to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setFooter(oFooter: sap.ui.core.Control): Column;
		/**
		 * Sets a new value for property <code>hAlign</code>.
		 * 
		 * Horizontal alignment of the column content. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
		 * 
		 * NOTE: Control with a "textAlign" property inherits the horizontal alignment.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Begin</code>.
		 * @param sHAlign New value for property <code>hAlign</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHAlign(sHAlign: sap.ui.core.TextAlign): Column;
		/**
		 * Sets the aggregated <code>header</code>.
		 * @param oHeader The header to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHeader(oHeader: sap.ui.core.Control): Column;
		/**
		 * Sets the visible column index
		 * Negative index values can be used to clear
		 * @param nIndex index of the visible column
		 */
		setIndex(nIndex: number);
		/**
		 * Sets the initial order of the column
		 * @param nOrder initial order of the column
		 */
		setInitialOrder(nOrder: number);
		/**
		 * Sets the last value of the column if mergeDuplicates property is true
		 * @param value Any Value
		 * @return 
		 */
		setLastValue(value: any): Column;
		/**
		 * Sets a new value for property <code>mergeDuplicates</code>.
		 * 
		 * Set "true" to merge repeating cells(duplicates) into one cell block.
		 * Please see "mergeFunctionName" property to customize this property.
		 * Note: This feature must not be used together with two-way binding. This property is ignored if a column is shown in the pop-in.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bMergeDuplicates New value for property <code>mergeDuplicates</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMergeDuplicates(bMergeDuplicates: boolean): Column;
		/**
		 * Sets a new value for property <code>mergeFunctionName</code>.
		 * 
		 * Defines the value getter(serialization) function if "mergeDuplicates" property is set "true"
		 * Control itself uses this function to compare values of two repeating cells.
		 * Default value "getText" is suitable for Label and Text control.
		 * e.g. For "Icon" control "getSrc" can be used.
		 * Note: You can pass one string parameter to given function after "#" sign. e.g. "data#myparameter"
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>getText</code>.
		 * @param sMergeFunctionName New value for property <code>mergeFunctionName</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMergeFunctionName(sMergeFunctionName: string): Column;
		/**
		 * Sets a new value for property <code>minScreenWidth</code>.
		 * 
		 * By default column is always shown. If you set this property, control checks the minimum width of the screen to show or hide this column.
		 * As you can give specific CSS sizes(e.g: "480px" or "40em"), you can also use sap.m.ScreenSize enumeration(e.g: "Phone", "Tablet", "Desktop", "Small", "Medium", "Large", ....).
		 * 
		 * sap.m.Column.MediaQuery1->Range1 = 199
		 * 
		 * This property can be used for responsive design. e.g: "40em"(or "640px" or "Tablet") setting shows this column in iPad(and Desktop) but hides in iPhone.
		 * Please also see "demandPopin" property
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sMinScreenWidth New value for property <code>minScreenWidth</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMinScreenWidth(sMinScreenWidth: string): Column;
		/**
		 * Sets the order of the column
		 * Does not do the visual effect
		 * Table should be invalidate to re-render
		 * @param nOrder order of the column
		 */
		setOrder(nOrder: number);
		/**
		 * Sets a new value for property <code>popinDisplay</code>.
		 * 
		 * Defines enumerated display options for the pop-in.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Block</code>.
		 * @param sPopinDisplay New value for property <code>popinDisplay</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setPopinDisplay(sPopinDisplay: PopinDisplay): Column;
		/**
		 * Sets a new value for property <code>styleClass</code>.
		 * 
		 * CSS class name for column contents(header, cells and footer of column). This property can be used for different column styling. If column is shown as pop-in then this class name is applied to related pop-in row.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sStyleClass New value for property <code>styleClass</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setStyleClass(sStyleClass: string): Column;
		/**
		 * Sets a new value for property <code>vAlign</code>.
		 * 
		 * Vertical alignment of the cells in a column. Possible values are "Inherit", "Top", "Middle", "Bottom"
		 * This property does not affect the vertical alignment of header and footer.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @param sVAlign New value for property <code>vAlign</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setVAlign(sVAlign: sap.ui.core.VerticalAlign): Column;
		/**
		 * Sets a new value for property <code>visible</code>.
		 * 
		 * Specifies whether or not the column is visible. Invisible columns are not rendered.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bVisible New value for property <code>visible</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setVisible(bVisible: boolean): Column;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Defines the width of the column. If you leave it empty then this column covers the remaining space.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): Column;
	}

	class ColumnListItem extends ListItemBase {
		/**
		 * Constructor for a new ColumnListItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId Id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.ColumnListItemMetadata);
		/**
		 * Constructor for a new ColumnListItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId Id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some cell to the aggregation <code>cells</code>.
		 * @param oCell the cell to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addCell(oCell: sap.ui.core.Control): ColumnListItem;
		/**
		 * Binds aggregation <code>cells</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindCells(oBindingInfo: any): ColumnListItem;
		/**
		 * Destroys all the cells in the aggregation <code>cells</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyCells(): ColumnListItem;
		/**
		 * Creates a new subclass of class sap.m.ColumnListItem with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ColumnListItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.ListItemBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.ListItemBase
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ListItemBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets content of aggregation <code>cells</code>.
		 * 
		 * Every <code>control</code> inside the <code>cells</code> aggregation defines one cell of the row.
		 * <b>Note:</b> The order of the <code>cells</code> aggregation must match the order of the <code>columns</code> aggregation of <code>sap.m.Table</code>.
		 * @return 
		 */
		getCells(): sap.ui.core.Control[];
		/**
		 * Returns the pop-in element.
		 */
		getPopin();
		/**
		 * Returns the tabbable DOM elements as a jQuery collection
		 * When popin is available this separated dom should also be included
		 * @return jQuery object
		 */
		getTabbables(): any;
		/**
		 * Gets current value of property <code>vAlign</code>.
		 * 
		 * Sets the vertical alignment of all the cells within the table row (including selection and navigation).
		 * <b>Note:</b> <code>vAlign</code> property of <code>sap.m.Column</code> overrides the property for cell vertical alignment if both are set.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @return Value of property <code>vAlign</code>
		 */
		getVAlign(): sap.ui.core.VerticalAlign;
		/**
		 * Determines whether control has pop-in or not.
		 */
		hasPopin();
		/**
		 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>cells</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oCell The cell whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfCell(oCell: sap.ui.core.Control): number;
		/**
		 * Inserts a cell into the aggregation <code>cells</code>.
		 * @param oCell the cell to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the cell should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the cell is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the cell is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertCell(oCell: sap.ui.core.Control, iIndex: number): ColumnListItem;
		/**
		 * Returns pop-in DOMRef as a jQuery Object
		 */
		Popin();
		/**
		 * Removes all the controls from the aggregation <code>cells</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllCells(): sap.ui.core.Control[];
		/**
		 * Removes a cell from the aggregation <code>cells</code>.
		 * @param vCell The cell to remove or its index or id
		 * @return The removed cell or <code>null</code>
		 */
		removeCell(vCell: number|string|sap.ui.core.Control): sap.ui.core.Control;
		/**
		 * Pemove pop-in from DOM
		 */
		removePopin();
		/**
		 * Sets a new value for property <code>vAlign</code>.
		 * 
		 * Sets the vertical alignment of all the cells within the table row (including selection and navigation).
		 * <b>Note:</b> <code>vAlign</code> property of <code>sap.m.Column</code> overrides the property for cell vertical alignment if both are set.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @param sVAlign New value for property <code>vAlign</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setVAlign(sVAlign: sap.ui.core.VerticalAlign): ColumnListItem;
		/**
		 * Unbinds aggregation <code>cells</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindCells(): ColumnListItem;
	}

	class ComboBox extends ComboBoxBase {
		/**
		 * Constructor for a new <code>sap.m.ComboBox</code>.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given.(optional)
		 * @param mSettings Initial settings for the new control.(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.ComboBoxMetadata);
		/**
		 * Constructor for a new <code>sap.m.ComboBox</code>.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given.(optional)
		 * @param mSettings Initial settings for the new control.(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>selectionChange</code> event of this <code>sap.m.ComboBox</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.ComboBox</code> itself.
		 * 
		 * This event is fired when the user types something that matches with an item in the list;
		 * it is also fired when the user presses on a list item, or when navigating via keyboard.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.ComboBox</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachSelectionChange(oData: any, fnFunction: any, oListener?: any): ComboBox;
		/**
		 * Creates a picker popup container where the selection should take place.
		 * 
		 * To be overwritten by subclasses.
		 * @param sPickerType 
		 * @return The picker popup to be used.
		 */
		createPicker(sPickerType: string): Popover|Dialog;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>selectionChange</code> event of this <code>sap.m.ComboBox</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachSelectionChange(fnFunction: any, oListener: any): ComboBox;
		/**
		 * Creates a new subclass of class sap.m.ComboBox with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ComboBoxBase.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ComboBoxMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.InputBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.InputBase
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|InputBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.ComboBoxTextField with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.InputBase.extend}.
		 * @note Overload from base type sap.m.ComboBoxTextField
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ComboBoxTextFieldMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.ComboBoxBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ComboBoxTextField.extend}.
		 * @note Overload from base type sap.m.ComboBoxBase
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ComboBoxBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>selectionChange</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>selectedItem</code> of type <code>sap.ui.core.Item</code>The selected item.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireSelectionChange(mArguments?: any): ComboBox;
		/**
		 * Gets the default selected item from the aggregation named <code>items</code>.
		 * @return 
		 */
		getDefaultSelectedItem();
		/**
		 * Gets aggregation <code>items</code>.
		 * 
		 * <b>Note</b>: This is the default aggregation.
		 * @return 
		 */
		getItems(): sap.ui.core.Item[];
		/**
		 * Gets the selected item object from the aggregation named <code>items</code>.
		 * @return The current target of the <code>selectedItem</code> association,
		 * or <code>null</code>.
		 */
		getSelectedItem(): sap.ui.core.Item;
		/**
		 * Gets current value of property <code>selectedItemId</code>.
		 * 
		 * ID of the selected item.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>selectedItemId</code>
		 */
		getSelectedItemId(): string;
		/**
		 * Gets current value of property <code>selectedKey</code>.
		 * 
		 * Key of the selected item.
		 * 
		 * <b>Note:</b> If duplicate keys exist, the first item matching the key is used.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>selectedKey</code>
		 */
		getSelectedKey(): string;
		/**
		 * Gets current value of property <code>showSecondaryValues</code>.
		 * 
		 * Indicates whether the text values of the <code>additionalText</code> property of a
		 * {@link sap.ui.core.ListItem} are shown.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>showSecondaryValues</code>
		 */
		getShowSecondaryValues(): boolean;
		/**
		 * This event handler is called before the picker popup is opened.
		 */
		onBeforeOpen();
		/**
		 * Removes an item from the aggregation named <code>items</code>.
		 * @param vItem The item to be removed or its index or ID.
		 * @return The removed item or <code>null</code>.
		 */
		removeItem(vItem: number|string|sap.ui.core.Item): sap.ui.core.Item;
		/**
		 * Sets the start and end positions of the current text selection.
		 * @param iSelectionStart The index of the first selected character.
		 * @param iSelectionEnd The index of the character after the last selected character.
		 */
		selectText(iSelectionStart: number, iSelectionEnd: number);
		/**
		 * Selects the text within the input field between the specified start and end positions.
		 * Only supported for input control's type of Text, Url, Tel and Password.
		 * @note Overload from base type sap.m.InputBase
		 * @param iSelectionStart The index into the text at which the first selected character is located.
		 * @param iSelectionEnd The index into the text at which the last selected character is located.
		 * @return <code>this</code> to allow method chaining.
		 */
		selectText(iSelectionStart: number, iSelectionEnd: number): InputBase;
		/**
		 * Sets the <code>selectedItem</code> association.
		 * 
		 * Default value is <code>null</code>.
		 * @param vItem New value for the <code>selectedItem</code> association.
		 * If an ID of a <code>sap.ui.core.Item</code> is given, the item with this ID becomes the
		 * <code>selectedItem</code> association.
		 * Alternatively, a <code>sap.ui.core.Item</code> instance may be given or <code>null</code> to clear
		 * the selection.
		 * @return <code>this</code> to allow method chaining.
		 */
		setSelectedItem(vItem: string|sap.ui.core.Item): ComboBox;
		/**
		 * Sets the <code>selectedItemId</code> property.
		 * 
		 * Default value is an empty string <code>""</code> or <code>undefined</code>.
		 * @param vItem New value for property <code>selectedItemId</code>.
		 * If the provided <code>vItem</code> is an empty string <code>""</code> or <code>undefined</code>,
		 * the selection is cleared.
		 * If the ID has no corresponding aggregated item, the selected item is not changed.
		 * @return <code>this</code> to allow method chaining.
		 */
		setSelectedItemId(vItem: string|any): ComboBox;
		/**
		 * Sets the <code>selectedKey</code> property.
		 * 
		 * Default value is an empty string <code>""</code> or <code>undefined</code>.
		 * @param sKey New value for property <code>selectedKey</code>.
		 * If the provided <code>sKey</code> is an empty string <code>""</code> or <code>undefined</code>,
		 * the selection is cleared.
		 * If duplicate keys exist, the first item matching the key is selected.
		 * @return <code>this</code> to allow method chaining.
		 */
		setSelectedKey(sKey: string): ComboBox;
		/**
		 * Sets a new value for property <code>showSecondaryValues</code>.
		 * 
		 * Indicates whether the text values of the <code>additionalText</code> property of a
		 * {@link sap.ui.core.ListItem} are shown.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bShowSecondaryValues New value for property <code>showSecondaryValues</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowSecondaryValues(bShowSecondaryValues: boolean): ComboBox;
		/**
		 * Synchronizes the <code>selectedItem</code> association and the <code>selectedItemId</code> property.
		 */
		synchronizeSelection();
	}

	class ComboBoxBase extends ComboBoxTextField {
		/**
		 * Constructor for a new <code>sap.m.ComboBoxBase</code>.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given.(optional)
		 * @param mSettings Initial settings for the new control.(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.ComboBoxBaseMetadata);
		/**
		 * Constructor for a new <code>sap.m.ComboBoxBase</code>.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given.(optional)
		 * @param mSettings Initial settings for the new control.(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds an item to the aggregation named <code>items</code>.
		 * @param oItem The item to be added; if empty, nothing is added.
		 * @return <code>this</code> to allow method chaining.
		 */
		addItem(oItem: sap.ui.core.Item): ComboBoxBase;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>loadItems</code> event of this <code>sap.m.ComboBoxBase</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.ComboBoxBase</code> itself.
		 * 
		 * This event is fired when the end user moves the cursor to the text field, performs
		 * an action that requires items to be loaded, and items are not already loaded. For example,
		 * pressing F4 to open the dropdown list or typing something in the text field fires the event.
		 * 
		 * <b>Note:</b> We strongly recommend to only use this feature in performance critical scenarios.
		 * Loading the items lazily (on demand) to defer initialization has several implications for the end user
		 * experience. For example, the busy indicator has to be shown while the items are being loaded and
		 * assistive technology software also has to announce the state changes (which may be confusing
		 * for some screen reader users).
		 * 
		 * <b>Note</b>: Currently the <code>sap.m.MultiComboBox</code> does not support this event.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.ComboBoxBase</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachLoadItems(oData: any, fnFunction: any, oListener?: any): ComboBoxBase;
		/**
		 * Binds aggregation <code>items</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindItems(oBindingInfo: any): ComboBoxBase;
		/**
		 * Clears the selection.
		 * To be overwritten by subclasses.
		 */
		clearSelection();
		/**
		 * Closes the control's picker popup.
		 * @return <code>this</code> to allow method chaining.
		 */
		close(): ComboBoxBase;
		/**
		 * Creates a picker popup container where the selection should take place.
		 * To be overwritten by subclasses.
		 * @param sPickerType 
		 * @return The picker popup to be used.
		 */
		createPicker(sPickerType: string): Popover|Dialog;
		/**
		 * Destroys all the items in the aggregation named <code>items</code>.
		 * @return <code>this</code> to allow method chaining.
		 */
		destroyItems(): ComboBox;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>loadItems</code> event of this <code>sap.m.ComboBoxBase</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachLoadItems(fnFunction: any, oListener: any): ComboBoxBase;
		/**
		 * Creates a new subclass of class sap.m.ComboBoxBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ComboBoxTextField.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ComboBoxBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.InputBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.InputBase
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|InputBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.ComboBoxTextField with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.InputBase.extend}.
		 * @note Overload from base type sap.m.ComboBoxTextField
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ComboBoxTextFieldMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>loadItems</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireLoadItems(mArguments?: any): ComboBoxBase;
		/**
		 * Gets the enabled items from the aggregation named <code>items</code>.
		 * @param aItems Items to filter.(optional)
		 * @return An array containing the enabled items.
		 */
		getEnabledItems(aItems?: sap.ui.core.Item[]): sap.ui.core.Item[];
		/**
		 * Gets the first item from the aggregation named <code>items</code>.
		 * @return The first item, or null if there are no items.
		 */
		getFirstItem(): sap.ui.core.Item;
		/**
		 * Gets the item from the aggregation named <code>items</code> at the given 0-based index.
		 * @param iIndex Index of the item to return.
		 * @return Item at the given index, or null if none.
		 */
		getItemAt(iIndex: number): sap.ui.core.Item;
		/**
		 * Gets the item with the given key from the aggregation named <code>items</code>.
		 * 
		 * <b>Note:</b> If duplicate keys exist, the first item matching the key is returned.
		 * @param sKey An item key that specifies the item to retrieve.
		 * @return 
		 */
		getItemByKey(sKey: string): sap.ui.core.Item;
		/**
		 * Gets content of aggregation <code>items</code>.
		 * 
		 * Defines the items contained within this control.
		 * @return 
		 */
		getItems(): sap.ui.core.Item[];
		/**
		 * Gets the last item from the aggregation named <code>items</code>.
		 * @return The last item, or null if there are no items.
		 */
		getLastItem(): sap.ui.core.Item;
		/**
		 * Gets the <code>list</code>.
		 * @return The list instance object or <code>null</code>.
		 */
		getList(): SelectList;
		/**
		 * Gets the control's picker popup.
		 * @return The picker instance, creating it if necessary by calling
		 * the <code>createPicker()</code> method.
		 */
		getPicker(): Dialog|Popover;
		/**
		 * Gets the property <code>_sPickerType</code>
		 * @return 
		 */
		getPickerType(): string;
		/**
		 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation <code>items</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oItem The item whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfItem(oItem: sap.ui.core.Item): number;
		/**
		 * Inserts an item into the aggregation named <code>items</code>.
		 * @param oItem The item to be inserted; if empty, nothing is inserted.
		 * @param iIndex The <code>0</code>-based index the item should be inserted at; for
		 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
		 *             greater than the current size of the aggregation, the item is inserted at the last position.
		 * @return <code>this</code> to allow method chaining.
		 */
		insertItem(oItem: sap.ui.core.Item, iIndex: number): ComboBoxBase;
		/**
		 * Indicates whether the control's picker popup is open.
		 * @return Determines whether the control's picker popup is currently open (this includes opening and closing animations).
		 */
		isOpen(): boolean;
		/**
		 * Opens the control's picker popup.
		 * @return <code>this</code> to allow method chaining.
		 */
		open(): ComboBoxBase;
		/**
		 * Removes all the controls in the aggregation named <code>items</code>.
		 * Additionally unregisters them from the hosting UIArea and clears the selection.
		 * @return An array of the removed items (might be empty).
		 */
		removeAllItems(): sap.ui.core.Item[];
		/**
		 * Removes an item from the aggregation named <code>items</code>.
		 * @param vItem The item to remove or its index or ID.
		 * @return The removed item or null.
		 */
		removeItem(vItem: number|string|sap.ui.core.Item): sap.ui.core.Item;
		/**
		 * Sets the property <code>_sPickerType</code>.
		 * @param sPickerType 
		 */
		setPickerType(sPickerType: string);
		/**
		 * Unbinds aggregation <code>items</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindItems(): ComboBoxBase;
	}

	class ComboBoxTextField extends InputBase {
		/**
		 * Constructor for a new <code>sap.m.ComboBoxTextField</code>.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given.(optional)
		 * @param mSettings Initial settings for the new control.(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.ComboBoxTextFieldMetadata);
		/**
		 * Constructor for a new <code>sap.m.ComboBoxTextField</code>.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given.(optional)
		 * @param mSettings Initial settings for the new control.(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.ComboBoxTextField with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.InputBase.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ComboBoxTextFieldMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.InputBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.InputBase
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|InputBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * 
		 */
		getAccessibilityInfo();
		/**
		 * This function (if available on the concrete control) provides
		 * the current accessibility state of the control.
		 * 
		 * Applications must not call this hook method directly, it is called by the framework.
		 * 
		 * Subclasses of Control should implement this hook to provide any necessary accessibility information:
		 * 
		 * <pre>
		 * MyControl.prototype.getAccessibilityInfo = function() {
		 *    return {
		 *      role: "textbox",      // String which represents the WAI-ARIA role which is implemented by the control.
		 *      type: "date input",   // String which represents the control type (Must be a translated text). Might correlate with
		 *                            // the role.
		 *      description: "value", // String which describes the most relevant control state (e.g. the inputs value). Must be a
		 *                            // translated text.
		 *                            // Note: The type and the enabled/editable state must not be handled here.
		 *      focusable: true,      // Boolean which describes whether the control can get the focus.
		 *      enabled: true,        // Boolean which describes whether the control is enabled. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      editable: true,       // Boolean which describes whether the control is editable. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      children: []          // Array of accessibility info objects of children of the given control (e.g. when the control is a layout).
		 *                            // Note: Children should only be provided when it is helpful to understand the accessibility context
		 *                            //       (e.g. a form control must not provide details of its internals (fields, labels, ...) but a
		 *                            //       layout should).
		 *    };
		 * };
		 * </pre>
		 * 
		 * Note: The returned object provides the accessibility state of the control at the point in time when this function is called.
		 * @note Overload from base type sap.ui.core.Control
		 * @return Current accessibility state of the control.
		 */
		getAccessibilityInfo(): any;
		/**
		 * Gets current value of property <code>maxWidth</code>.
		 * 
		 * Sets the maximum width of the text field.
		 * 
		 * Default value is <code>100%</code>.
		 * @return Value of property <code>maxWidth</code>
		 */
		getMaxWidth(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>showButton</code>.
		 * 
		 * Indicates whether the dropdown arrow button is shown.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>showButton</code>
		 */
		getShowButton(): boolean;
		/**
		 * Gets the <code>value</code>.
		 * 
		 * Default value is an empty string.
		 * @return The value of property <code>value</code>
		 */
		getValue(): string;
		/**
		 * Sets a new value for property <code>maxWidth</code>.
		 * 
		 * Sets the maximum width of the text field.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>100%</code>.
		 * @param sMaxWidth New value for property <code>maxWidth</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMaxWidth(sMaxWidth: sap.ui.core.CSSSize): ComboBoxTextField;
		/**
		 * Sets a new value for property <code>showButton</code>.
		 * 
		 * Indicates whether the dropdown arrow button is shown.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bShowButton New value for property <code>showButton</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowButton(bShowButton: boolean): ComboBoxTextField;
	}

	class CustomListItem extends ListItemBase {
		/**
		 * Constructor for a new CustomListItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Constructor for a new CustomListItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some content to the aggregation <code>content</code>.
		 * @param oContent the content to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addContent(oContent: sap.ui.core.Control): CustomListItem;
		/**
		 * Binds aggregation <code>content</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindContent(oBindingInfo: any): CustomListItem;
		/**
		 * Destroys all the content in the aggregation <code>content</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyContent(): CustomListItem;
		/**
		 * Creates a new subclass of class sap.m.CustomListItem with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.ListItemBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.ListItemBase
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ListItemBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets content of aggregation <code>content</code>.
		 * 
		 * The content of this list item
		 * @return 
		 */
		getContent(): sap.ui.core.Control[];
		/**
		 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oContent The content whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfContent(oContent: sap.ui.core.Control): number;
		/**
		 * Inserts a content into the aggregation <code>content</code>.
		 * @param oContent the content to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the content should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the content is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertContent(oContent: sap.ui.core.Control, iIndex: number): CustomListItem;
		/**
		 * Removes all the controls from the aggregation <code>content</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllContent(): sap.ui.core.Control[];
		/**
		 * Removes a content from the aggregation <code>content</code>.
		 * @param vContent The content to remove or its index or id
		 * @return The removed content or <code>null</code>
		 */
		removeContent(vContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
		/**
		 * Unbinds aggregation <code>content</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindContent(): CustomListItem;
	}

	class CustomTile extends Tile {
		/**
		 * Constructor for a new CustomTile.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Constructor for a new CustomTile.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Destroys the content in the aggregation <code>content</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyContent(): CustomTile;
		/**
		 * Creates a new subclass of class sap.m.CustomTile with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.Tile.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.Tile with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.Tile
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|TileMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets content of aggregation <code>content</code>.
		 * 
		 * Defines the content of the CustomTile.
		 * @return 
		 */
		getContent(): sap.ui.core.Control;
		/**
		 * Sets the aggregated <code>content</code>.
		 * @param oContent The content to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setContent(oContent: sap.ui.core.Control): CustomTile;
	}

	class DatePicker extends InputBase {
		/**
		 * Constructor for a new DatePicker.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId Id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.DatePickerMetadata);
		/**
		 * Constructor for a new DatePicker.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId Id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some <code>specialDate</code> to the aggregation <code>specialDates</code>.
		 * @param oSpecialDate the specialDate to add; if empty, nothing is added
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addSpecialDate(oSpecialDate: sap.ui.unified.DateTypeRange): DatePicker;
		/**
		 * Destroys all the specialDates in the aggregation <code>specialDates</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroySpecialDates(): DatePicker;
		/**
		 * Creates a new subclass of class sap.m.DatePicker with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.InputBase.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|DatePickerMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.InputBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.InputBase
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|InputBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Fire event change to attached listeners.
		 * 
		 * Expects following event parameters:
		 * <ul>
		 * <li>'value' of type <code>string</code> The new value of the <code>sap.m.DatePicker</code>.</li>
		 * <li>'valid' of type <code>boolean</code> Indicator for a valid date.</li>
		 * </ul>
		 * @param mArguments the arguments to pass along with the event.(optional)
		 * @return <code>this</code> to allow method chaining
		 */
		fireChange(mArguments?: any): DatePicker;
		/**
		 * Fires event <code>change</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>value</code> of type <code>string</code>The new <code>value</code> of the <code>control</code>.</li>
		 * </ul>
		 * @note Overload from base type sap.m.InputBase
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireChange(mArguments?: any): InputBase;
		/**
		 * 
		 */
		getAccessibilityInfo();
		/**
		 * This function (if available on the concrete control) provides
		 * the current accessibility state of the control.
		 * 
		 * Applications must not call this hook method directly, it is called by the framework.
		 * 
		 * Subclasses of Control should implement this hook to provide any necessary accessibility information:
		 * 
		 * <pre>
		 * MyControl.prototype.getAccessibilityInfo = function() {
		 *    return {
		 *      role: "textbox",      // String which represents the WAI-ARIA role which is implemented by the control.
		 *      type: "date input",   // String which represents the control type (Must be a translated text). Might correlate with
		 *                            // the role.
		 *      description: "value", // String which describes the most relevant control state (e.g. the inputs value). Must be a
		 *                            // translated text.
		 *                            // Note: The type and the enabled/editable state must not be handled here.
		 *      focusable: true,      // Boolean which describes whether the control can get the focus.
		 *      enabled: true,        // Boolean which describes whether the control is enabled. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      editable: true,       // Boolean which describes whether the control is editable. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      children: []          // Array of accessibility info objects of children of the given control (e.g. when the control is a layout).
		 *                            // Note: Children should only be provided when it is helpful to understand the accessibility context
		 *                            //       (e.g. a form control must not provide details of its internals (fields, labels, ...) but a
		 *                            //       layout should).
		 *    };
		 * };
		 * </pre>
		 * 
		 * Note: The returned object provides the accessibility state of the control at the point in time when this function is called.
		 * @note Overload from base type sap.ui.core.Control
		 * @return Current accessibility state of the control.
		 */
		getAccessibilityInfo(): any;
		/**
		 * Gets current value of property <code>dateValue</code>.
		 * 
		 * The date as JavaScript Date object. This is independent from any formatter.
		 * 
		 * <b>Note:</b> If this property is used, the <code>value</code> property should not be changed from the caller.
		 * @return Value of property <code>dateValue</code>
		 */
		getDateValue(): any;
		/**
		 * Gets current value of property <code>displayFormat</code>.
		 * 
		 * The date is displayed in the input field using this format. By default, the medium format of the used locale is used.
		 * 
		 * Supported format options are pattern-based on Unicode LDML Date Format notation. {@link http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}
		 * <b>Note:</b> If you use data binding on the <code>value</code> property with type <code>sap.ui.model.type.Date</code> this property will be ignored.
		 * The format defined in the binding will be used.
		 * @return Value of property <code>displayFormat</code>
		 */
		getDisplayFormat(): string;
		/**
		 * Gets current value of property <code>displayFormatType</code>.
		 * 
		 * Displays date in this given type in input field. Default value is taken from locale settings.
		 * Accepted are values of <code>sap.ui.core.CalendarType</code> or an empty string. If no type is set, the default type of the
		 * configuration is used.
		 * <b>Note:</b> If data binding on <code>value</code> property with type <code>sap.ui.model.type.Date</code> is used, this property will be ignored.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>displayFormatType</code>
		 */
		getDisplayFormatType(): string;
		/**
		 * ID of the element which is the current target of the association <code>legend</code>, or <code>null</code>.
		 * @return 
		 */
		getLegend(): sap.ui.core.ID;
		/**
		 * Gets current value of property <code>maxDate</code>.
		 * 
		 * Maximum date that can be shown and selected in the <code>DatePicker</code>. This must be a JavaScript date object.
		 * 
		 * <b>Note:</b> If the <code>maxDate</code> is set to be before the <code>minDate</code>,
		 * the <code>maxDate</code> and the <code>minDate</code> are switched before rendering.
		 * @return Value of property <code>maxDate</code>
		 */
		getMaxDate(): any;
		/**
		 * Gets current value of property <code>minDate</code>.
		 * 
		 * Minimum date that can be shown and selected in the <code>DatePicker</code>. This must be a JavaScript date object.
		 * 
		 * <b>Note:</b> If the <code>minDate</code> is set to be after the <code>maxDate</code>,
		 * the <code>maxDate</code> and the <code>minDate</code> are switched before rendering.
		 * @return Value of property <code>minDate</code>
		 */
		getMinDate(): any;
		/**
		 * Gets current value of property <code>secondaryCalendarType</code>.
		 * 
		 * If set, the days in the calendar popup are also displayed in this calendar type
		 * If not set, the dates are only displayed in the primary calendar type
		 * @return Value of property <code>secondaryCalendarType</code>
		 */
		getSecondaryCalendarType(): sap.ui.core.CalendarType;
		/**
		 * Gets content of aggregation <code>specialDates</code>.
		 * 
		 * Date Range with type to visualize special days in the Calendar.
		 * If one day is assigned to more than one Type, only the first one will be used.
		 * @return 
		 */
		getSpecialDates(): sap.ui.core.Element[];
		/**
		 * Gets current value of property <code>valueFormat</code>.
		 * 
		 * The date string expected and returned in the <code>value</code> property uses this format. By default the short format of the used locale is used.
		 * 
		 * 
		 * Supported format options are pattern-based on Unicode LDML Date Format notation. {@link http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}
		 * 
		 * For example, if the date string represents an ABAP DATS type, the format should be "yyyyMMdd".
		 * 
		 * <b>Note:</b> If data binding on <code>value</code> property with type <code>sap.ui.model.type.Date</code> is used, this property will be ignored.
		 * The format defined in the binding will be used.
		 * @return Value of property <code>valueFormat</code>
		 */
		getValueFormat(): string;
		/**
		 * Checks for the provided <code>sap.ui.core.Element</code> in the aggregation <code>specialDates</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oSpecialDate The specialDate whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfSpecialDate(oSpecialDate: sap.ui.core.Element): number;
		/**
		 * Inserts a <code>specialDate</code> to the aggregation <code>specialDates</code>.
		 * @param oSpecialDate the specialDate to insert; if empty, nothing is inserted
		 * @param iIndex the 0-based index the <code>specialDate</code> should be inserted at;
		 *              for a negative value of <code>iIndex</code>, the <code>specialDate</code> is inserted at position 0;
		 *              for a value greater than the current size of the aggregation, the <code>specialDate</code> is inserted at the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertSpecialDate(oSpecialDate: sap.ui.unified.DateTypeRange, iIndex: number): DatePicker;
		/**
		 * Removes all the controls from the aggregation <code>specialDates</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllSpecialDates(): sap.ui.core.Element[];
		/**
		 * Removes a <code>specialDate</code> from the aggregation <code>specialDates</code>.
		 * @param oSpecialDate The <code>specialDate</code> to remove or its index or id
		 * @return The removed <code>specialDate</code> or null
		 */
		removeSpecialDate(oSpecialDate: sap.ui.unified.DateTypeRange): sap.ui.unified.DateTypeRange;
		/**
		 * Sets a new value for property <code>dateValue</code>.
		 * 
		 * The date as JavaScript Date object. This is independent from any formatter.
		 * 
		 * <b>Note:</b> If this property is used, the <code>value</code> property should not be changed from the caller.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param oDateValue New value for property <code>dateValue</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDateValue(oDateValue: any): DatePicker;
		/**
		 * Sets a new value for property <code>displayFormat</code>.
		 * 
		 * The date is displayed in the input field using this format. By default, the medium format of the used locale is used.
		 * 
		 * Supported format options are pattern-based on Unicode LDML Date Format notation. {@link http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}
		 * <b>Note:</b> If you use data binding on the <code>value</code> property with type <code>sap.ui.model.type.Date</code> this property will be ignored.
		 * The format defined in the binding will be used.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sDisplayFormat New value for property <code>displayFormat</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDisplayFormat(sDisplayFormat: string): DatePicker;
		/**
		 * Sets a new value for property <code>displayFormatType</code>.
		 * 
		 * Displays date in this given type in input field. Default value is taken from locale settings.
		 * Accepted are values of <code>sap.ui.core.CalendarType</code> or an empty string. If no type is set, the default type of the
		 * configuration is used.
		 * <b>Note:</b> If data binding on <code>value</code> property with type <code>sap.ui.model.type.Date</code> is used, this property will be ignored.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sDisplayFormatType New value for property <code>displayFormatType</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDisplayFormatType(sDisplayFormatType: string): DatePicker;
		/**
		 * Sets the associated legend.
		 * @param oLegend ID of an element which becomes the new target of this <code>legend</code> association;
		 *                                                         alternatively, an element instance may be given
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setLegend(oLegend: sap.ui.core.ID|sap.ui.unified.CalendarLegend): DatePicker;
		/**
		 * Sets a new value for property <code>maxDate</code>.
		 * 
		 * Maximum date that can be shown and selected in the <code>DatePicker</code>. This must be a JavaScript date object.
		 * 
		 * <b>Note:</b> If the <code>maxDate</code> is set to be before the <code>minDate</code>,
		 * the <code>maxDate</code> and the <code>minDate</code> are switched before rendering.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param oMaxDate New value for property <code>maxDate</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMaxDate(oMaxDate: any): DatePicker;
		/**
		 * Sets a new value for property <code>minDate</code>.
		 * 
		 * Minimum date that can be shown and selected in the <code>DatePicker</code>. This must be a JavaScript date object.
		 * 
		 * <b>Note:</b> If the <code>minDate</code> is set to be after the <code>maxDate</code>,
		 * the <code>maxDate</code> and the <code>minDate</code> are switched before rendering.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param oMinDate New value for property <code>minDate</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMinDate(oMinDate: any): DatePicker;
		/**
		 * Sets a new value for property <code>secondaryCalendarType</code>.
		 * 
		 * If set, the days in the calendar popup are also displayed in this calendar type
		 * If not set, the dates are only displayed in the primary calendar type
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sSecondaryCalendarType New value for property <code>secondaryCalendarType</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setSecondaryCalendarType(sSecondaryCalendarType: sap.ui.core.CalendarType): DatePicker;
		/**
		 * Sets a new value for property <code>valueFormat</code>.
		 * 
		 * The date string expected and returned in the <code>value</code> property uses this format. By default the short format of the used locale is used.
		 * 
		 * 
		 * Supported format options are pattern-based on Unicode LDML Date Format notation. {@link http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}
		 * 
		 * For example, if the date string represents an ABAP DATS type, the format should be "yyyyMMdd".
		 * 
		 * <b>Note:</b> If data binding on <code>value</code> property with type <code>sap.ui.model.type.Date</code> is used, this property will be ignored.
		 * The format defined in the binding will be used.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sValueFormat New value for property <code>valueFormat</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setValueFormat(sValueFormat: string): DatePicker;
		/**
		 * Defines the width of the DatePicker. Default value is 100%
		 * @param sWidth new value for <code>width</code>
		 * @return <code>this</code> to allow method chaining
		 */
		setWidth(sWidth: string): DatePicker;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Defines the width of the control.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @note Overload from base type sap.m.InputBase
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): InputBase;
	}

	class DateRangeSelection extends DatePicker {
		/**
		 * Constructor for a new DateRangeSelection.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId Id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.DateRangeSelectionMetadata);
		/**
		 * Constructor for a new DateRangeSelection.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId Id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.DateRangeSelection with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.DatePicker.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|DateRangeSelectionMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.InputBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.InputBase
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|InputBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.DatePicker with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.InputBase.extend}.
		 * @note Overload from base type sap.m.DatePicker
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|DatePickerMetadata, FNMetaImpl?: any): any;
		/**
		 * Fire event change to attached listeners.
		 * 
		 * Expects following event parameters:
		 * <ul>
		 * <li>'value' of type <code>string</code> The new value of the <code>sap.m.DateRangeSelection</code>.</li>
		 * <li>'valid' of type <code>boolean</code> Indicator for a valid date.</li>
		 * <li>'from' of type <code>object</code> Current start date after change.</li>
		 * <li>'to' of type <code>object</code> Current end date after change.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event.(optional)
		 * @return <code>this</code> to allow method chaining
		 */
		fireChange(mArguments?: any): DateRangeSelection;
		/**
		 * Fires event <code>change</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>value</code> of type <code>string</code>The new <code>value</code> of the <code>control</code>.</li>
		 * </ul>
		 * @note Overload from base type sap.m.InputBase
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireChange(mArguments?: any): InputBase;
		/**
		 * Fire event change to attached listeners.
		 * 
		 * Expects following event parameters:
		 * <ul>
		 * <li>'value' of type <code>string</code> The new value of the <code>sap.m.DatePicker</code>.</li>
		 * <li>'valid' of type <code>boolean</code> Indicator for a valid date.</li>
		 * </ul>
		 * @note Overload from base type sap.m.DatePicker
		 * @param mArguments the arguments to pass along with the event.(optional)
		 * @return <code>this</code> to allow method chaining
		 */
		fireChange(mArguments?: any): DatePicker;
		/**
		 * 
		 */
		getAccessibilityInfo();
		/**
		 * This function (if available on the concrete control) provides
		 * the current accessibility state of the control.
		 * 
		 * Applications must not call this hook method directly, it is called by the framework.
		 * 
		 * Subclasses of Control should implement this hook to provide any necessary accessibility information:
		 * 
		 * <pre>
		 * MyControl.prototype.getAccessibilityInfo = function() {
		 *    return {
		 *      role: "textbox",      // String which represents the WAI-ARIA role which is implemented by the control.
		 *      type: "date input",   // String which represents the control type (Must be a translated text). Might correlate with
		 *                            // the role.
		 *      description: "value", // String which describes the most relevant control state (e.g. the inputs value). Must be a
		 *                            // translated text.
		 *                            // Note: The type and the enabled/editable state must not be handled here.
		 *      focusable: true,      // Boolean which describes whether the control can get the focus.
		 *      enabled: true,        // Boolean which describes whether the control is enabled. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      editable: true,       // Boolean which describes whether the control is editable. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      children: []          // Array of accessibility info objects of children of the given control (e.g. when the control is a layout).
		 *                            // Note: Children should only be provided when it is helpful to understand the accessibility context
		 *                            //       (e.g. a form control must not provide details of its internals (fields, labels, ...) but a
		 *                            //       layout should).
		 *    };
		 * };
		 * </pre>
		 * 
		 * Note: The returned object provides the accessibility state of the control at the point in time when this function is called.
		 * @note Overload from base type sap.ui.core.Control
		 * @return Current accessibility state of the control.
		 */
		getAccessibilityInfo(): any;
		/**
		 * Getter for property <code>dateValue</code>.
		 * 
		 * The start date of the range as JavaScript Date object. This is independent from any formatter.
		 * 
		 * <b>Note:</b> If this property is used, the <code>value</code> property should not be changed from the caller.
		 * @return the value of property <code>dateValue</code>
		 */
		getDateValue(): any;
		/**
		 * Gets current value of property <code>delimiter</code>.
		 * 
		 * Delimiter between start and end date. Default value is "-".
		 * If no delimiter is given, the one defined for the used locale is used.
		 * 
		 * Default value is <code>-</code>.
		 * @return Value of property <code>delimiter</code>
		 */
		getDelimiter(): string;
		/**
		 * Gets current value of property <code>secondDateValue</code>.
		 * 
		 * The end date of the range as JavaScript Date object. This is independent from any formatter.
		 * 
		 * <b>Note:</b> If this property is used, the <code>value</code> property should not be changed from the caller.
		 * @return Value of property <code>secondDateValue</code>
		 */
		getSecondDateValue(): any;
		/**
		 * Getter for property <code>value</code>.
		 * 
		 * Returns a date as a string in the format defined in property <code>displayFormat</code>.
		 * 
		 * <b>Note:</b> As the value string always used the <code>displayFormat</code>, it is both locale-dependent and calendar-type-dependent.
		 * 
		 * If this property is used, the <code>dateValue</code> property should not be changed from the caller.
		 * @return the value of property <code>value</code>
		 */
		getValue(): string;
		/**
		 * Getter for property <code>valueFormat</code>.
		 * 
		 * <b>Note:</b> Property <code>valueFormat</code> is not supported in the <code>sap.m.DateRangeSelection</code> control.
		 * @return the value of property valueFormat
		 */
		getValueFormat(): string;
		/**
		 * This file defines behavior for the control
		 */
		init();
		/**
		 * Setter for property <code>dateValue</code>.
		 * 
		 * The start date of the range as JavaScript Date object. This is independent from any formatter.
		 * 
		 * <b>Note:</b> If this property is used, the <code>value</code> property should not be changed from the caller.
		 * @param oDateValue New value for property <code>dateValue</code>
		 * @return <code>this</code> to allow method chaining.
		 */
		setDateValue(oDateValue: any): DatePicker;
		/**
		 * Sets a new value for property <code>delimiter</code>.
		 * 
		 * Delimiter between start and end date. Default value is "-".
		 * If no delimiter is given, the one defined for the used locale is used.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>-</code>.
		 * @param sDelimiter New value for property <code>delimiter</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDelimiter(sDelimiter: string): DateRangeSelection;
		/**
		 * Sets a new value for property <code>secondDateValue</code>.
		 * 
		 * The end date of the range as JavaScript Date object. This is independent from any formatter.
		 * 
		 * <b>Note:</b> If this property is used, the <code>value</code> property should not be changed from the caller.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param oSecondDateValue New value for property <code>secondDateValue</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setSecondDateValue(oSecondDateValue: any): DateRangeSelection;
		/**
		 * Setter for property <code>value</code>.
		 * 
		 * Expects a date as a string in the format defined in property <code>displayFormat</code>.
		 * 
		 * <b>Note:</b> As the value string always used the <code>displayFormat</code>, it is both locale-dependent and calendar-type-dependent.
		 * 
		 * If this property is used, the <code>dateValue</code> property should not be changed from the caller.
		 * @param sValue The new value of the input.
		 * @return <code>this</code> to allow method chaining.
		 */
		setValue(sValue: string): DatePicker;
		/**
		 * Setter for property <code>value</code>.
		 * 
		 * Default value is empty/<code>undefined</code>.
		 * @note Overload from base type sap.m.InputBase
		 * @param sValue New value for property <code>value</code>.
		 * @return <code>this</code> to allow method chaining.
		 */
		setValue(sValue: string): InputBase;
		/**
		 * Setter for property <code>valueFormat</code>.
		 * 
		 * <b>Note:</b> Property <code>valueFormat</code> is not supported in the <code>sap.m.DateRangeSelection</code> control.
		 * @param sValueFormat New value for property valueFormat
		 * @return <code>this</code> to allow method chaining
		 */
		setValueFormat(sValueFormat: string): DateRangeSelection;
		/**
		 * Sets a new value for property <code>valueFormat</code>.
		 * 
		 * The date string expected and returned in the <code>value</code> property uses this format. By default the short format of the used locale is used.
		 * 
		 * 
		 * Supported format options are pattern-based on Unicode LDML Date Format notation. {@link http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}
		 * 
		 * For example, if the date string represents an ABAP DATS type, the format should be "yyyyMMdd".
		 * 
		 * <b>Note:</b> If data binding on <code>value</code> property with type <code>sap.ui.model.type.Date</code> is used, this property will be ignored.
		 * The format defined in the binding will be used.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @note Overload from base type sap.m.DatePicker
		 * @param sValueFormat New value for property <code>valueFormat</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setValueFormat(sValueFormat: string): DatePicker;
	}

	class DateTimePicker extends DatePicker {
		/**
		 * Constructor for a new DateTimePicker.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Constructor for a new DateTimePicker.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.DateTimePicker with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.DatePicker.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.InputBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.InputBase
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|InputBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.DatePicker with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.InputBase.extend}.
		 * @note Overload from base type sap.m.DatePicker
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|DatePickerMetadata, FNMetaImpl?: any): any;
		/**
		 * 
		 */
		getAccessibilityInfo();
		/**
		 * This function (if available on the concrete control) provides
		 * the current accessibility state of the control.
		 * 
		 * Applications must not call this hook method directly, it is called by the framework.
		 * 
		 * Subclasses of Control should implement this hook to provide any necessary accessibility information:
		 * 
		 * <pre>
		 * MyControl.prototype.getAccessibilityInfo = function() {
		 *    return {
		 *      role: "textbox",      // String which represents the WAI-ARIA role which is implemented by the control.
		 *      type: "date input",   // String which represents the control type (Must be a translated text). Might correlate with
		 *                            // the role.
		 *      description: "value", // String which describes the most relevant control state (e.g. the inputs value). Must be a
		 *                            // translated text.
		 *                            // Note: The type and the enabled/editable state must not be handled here.
		 *      focusable: true,      // Boolean which describes whether the control can get the focus.
		 *      enabled: true,        // Boolean which describes whether the control is enabled. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      editable: true,       // Boolean which describes whether the control is editable. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      children: []          // Array of accessibility info objects of children of the given control (e.g. when the control is a layout).
		 *                            // Note: Children should only be provided when it is helpful to understand the accessibility context
		 *                            //       (e.g. a form control must not provide details of its internals (fields, labels, ...) but a
		 *                            //       layout should).
		 *    };
		 * };
		 * </pre>
		 * 
		 * Note: The returned object provides the accessibility state of the control at the point in time when this function is called.
		 * @note Overload from base type sap.ui.core.Control
		 * @return Current accessibility state of the control.
		 */
		getAccessibilityInfo(): any;
	}

	class DeviationIndicator {
		/**
		 * The actual value is less than the target value.
		 */
		static Down: string;
		/**
		 * No value.
		 */
		static None: string;
		/**
		 * The actual value is more than the target value.
		 */
		static Up: string;
	}

	class Dialog extends sap.ui.core.Control {
		/**
		 * Constructor for a new Dialog.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.DialogMetadata);
		/**
		 * Constructor for a new Dialog.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Returns the custom header instance when the customHeader aggregation is set. Otherwise it returns the internal managed
		 * header instance. This method can be called within composite controls which use sap.m.Dialog inside.
		 */
		_getAnyHeader();
		/**
		 * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID|sap.ui.core.Control): Dialog;
		/**
		 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): Dialog;
		/**
		 * Adds some button to the aggregation <code>buttons</code>.
		 * @param oButton the button to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addButton(oButton: Button): Dialog;
		/**
		 * Adds some content to the aggregation <code>content</code>.
		 * @param oContent the content to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addContent(oContent: sap.ui.core.Control): Dialog;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>afterClose</code> event of this <code>sap.m.Dialog</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Dialog</code> itself.
		 * 
		 * This event will be fired after the dialog is closed.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachAfterClose(oData: any, fnFunction: any, oListener?: any): Dialog;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>afterOpen</code> event of this <code>sap.m.Dialog</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Dialog</code> itself.
		 * 
		 * This event will be fired after the dialog is opened.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachAfterOpen(oData: any, fnFunction: any, oListener?: any): Dialog;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>beforeClose</code> event of this <code>sap.m.Dialog</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Dialog</code> itself.
		 * 
		 * This event will be fired before the dialog is closed.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachBeforeClose(oData: any, fnFunction: any, oListener?: any): Dialog;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>beforeOpen</code> event of this <code>sap.m.Dialog</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Dialog</code> itself.
		 * 
		 * This event will be fired before the dialog is opened.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachBeforeOpen(oData: any, fnFunction: any, oListener?: any): Dialog;
		/**
		 * Close the dialog.
		 */
		close();
		/**
		 * Destroys the beginButton in the aggregation <code>beginButton</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyBeginButton(): Dialog;
		/**
		 * Destroys all the buttons in the aggregation <code>buttons</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyButtons(): Dialog;
		/**
		 * Destroys all the content in the aggregation <code>content</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyContent(): Dialog;
		/**
		 * Destroys the customHeader in the aggregation <code>customHeader</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyCustomHeader(): Dialog;
		/**
		 * Destroys the endButton in the aggregation <code>endButton</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyEndButton(): Dialog;
		/**
		 * Destroys the subHeader in the aggregation <code>subHeader</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroySubHeader(): Dialog;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>afterClose</code> event of this <code>sap.m.Dialog</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachAfterClose(fnFunction: any, oListener: any): Dialog;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>afterOpen</code> event of this <code>sap.m.Dialog</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachAfterOpen(fnFunction: any, oListener: any): Dialog;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>beforeClose</code> event of this <code>sap.m.Dialog</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachBeforeClose(fnFunction: any, oListener: any): Dialog;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>beforeOpen</code> event of this <code>sap.m.Dialog</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachBeforeOpen(fnFunction: any, oListener: any): Dialog;
		/**
		 * Creates a new subclass of class sap.m.Dialog with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|DialogMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>afterClose</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>origin</code> of type <code>sap.m.Button</code>This indicates the trigger of closing the dialog. If dialog is closed by either leftButton or rightButton, the button that closes the dialog is set to this parameter. Otherwise this parameter is set to null.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireAfterClose(mArguments?: any): Dialog;
		/**
		 * Fires event <code>afterOpen</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireAfterOpen(mArguments?: any): Dialog;
		/**
		 * Fires event <code>beforeClose</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>origin</code> of type <code>sap.m.Button</code>This indicates the trigger of closing the dialog. If dialog is closed by either leftButton or rightButton, the button that closes the dialog is set to this parameter. Otherwise this parameter is set to null.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireBeforeClose(mArguments?: any): Dialog;
		/**
		 * Fires event <code>beforeOpen</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireBeforeOpen(mArguments?: any): Dialog;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaDescribedBy</code>.
		 * @return 
		 */
		getAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
		 * @return 
		 */
		getAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Gets content of aggregation <code>beginButton</code>.
		 * 
		 * The button which is rendered to the left side (right side in RTL mode) of the endButton in the footer area inside the dialog. From UI5 version 1.21.1, there's a new aggregation "buttons" created with which more than 2 buttons can be added to the footer area of dialog. If the new "buttons" aggregation is set, any change made to this aggregation has no effect anymore. When runs on the phone, this button (and the endButton together when set) is (are) rendered at the center of the footer area. When runs on the other platforms, this button (and the endButton together when set) is (are) rendered at the right side (left side in RTL mode) of the footer area.
		 * @return 
		 */
		getBeginButton(): Button;
		/**
		 * Gets content of aggregation <code>buttons</code>.
		 * 
		 * Buttons can be added to the footer area of dialog through this aggregation. When this aggregation is set, any change to beginButton and endButton has no effect anymore. Buttons which are inside this aggregation are aligned at the right side (left side in RTL mode) of the footer instead of in the middle of the footer.
		 * @return 
		 */
		getButtons(): Button[];
		/**
		 * Gets content of aggregation <code>content</code>.
		 * 
		 * The content inside the dialog.<br/><b>Note:</b> When the content of the <code>Dialog</code> is comprised of controls that use <code>position: absolute</code>, such as <code>SplitContainer</code>, the dialog has to have either <code>stretch: true</code> or <code>contentHeight</code> set.
		 * @return 
		 */
		getContent(): sap.ui.core.Control[];
		/**
		 * Gets current value of property <code>contentHeight</code>.
		 * 
		 * Preferred height of content in Dialog. If the preferred height is bigger than the available space on screen, it will be overwritten by the maximum available height on screen in order to make sure that dialog isn't cut off.
		 * @return Value of property <code>contentHeight</code>
		 */
		getContentHeight(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>contentWidth</code>.
		 * 
		 * Preferred width of content in Dialog. This property affects the width of dialog on phone in landscape mode, tablet or desktop, because the dialog has a fixed width on phone in portrait mode. If the preferred width is less than the minimum width of dilaog or more than the available width of the screen, it will be overwritten by the min or max value. The current mininum value of dialog width on tablet is 400px.
		 * @return Value of property <code>contentWidth</code>
		 */
		getContentWidth(): sap.ui.core.CSSSize;
		/**
		 * Gets content of aggregation <code>customHeader</code>.
		 * 
		 * CustomHeader is only supported in theme sap_bluecrystal. When it's set, the icon, title and showHeader are properties ignored. Only the customHeader is shown as the header of the dialog.
		 * @return 
		 */
		getCustomHeader(): IBar;
		/**
		 * Gets current value of property <code>draggable</code>.
		 * 
		 * Indicates whether the dialog is draggable. If this property is set to true, the dialog will be draggable by it's header. This property has a default value false. The Dialog can be draggable only in desktop mode.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>draggable</code>
		 */
		getDraggable(): boolean;
		/**
		 * Gets content of aggregation <code>endButton</code>.
		 * 
		 * The button which is rendered to the right side (left side in RTL mode) of the beginButton in the footer area inside the dialog. From UI5 version 1.21.1, there's a new aggregation "buttons" created with which more than 2 buttons can be added to the footer area of dialog. If the new "buttons" aggregation is set, any change made to this aggregation has no effect anymore. When runs on the phone, this button (and the beginButton together when set) is (are) rendered at the center of the footer area. When runs on the other platforms, this button (and the beginButton together when set) is (are) rendered at the right side (left side in RTL mode) of the footer area.
		 * @return 
		 */
		getEndButton(): Button;
		/**
		 * Gets current value of property <code>horizontalScrolling</code>.
		 * 
		 * Indicates if user can scroll horizontally inside dialog when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the dialog, this property needs to be set to false to disable the scrolling in dialog in order to make the scrolling in the child control work properly.
		 * Dialog detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to dialog. If there is, dialog will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>horizontalScrolling</code>
		 */
		getHorizontalScrolling(): boolean;
		/**
		 * Gets current value of property <code>icon</code>.
		 * 
		 * Icon displayed in the dialog's header. This icon is invisible on the iOS platform and it's density aware. You can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density screen.
		 * @return Value of property <code>icon</code>
		 */
		getIcon(): sap.ui.core.URI;
		/**
		 * ID of the element which is the current target of the association <code>initialFocus</code>, or <code>null</code>.
		 * @return 
		 */
		getInitialFocus(): sap.ui.core.ID;
		/**
		 * Gets current value of property <code>resizable</code>.
		 * 
		 * Indicates whether the dialog is resizable. the dialog is resizable. If this property is set to true, the dialog will have a resize handler in it's bottom right corner. This property has a default value false. The Dialog can be resizable only in desktop mode.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>resizable</code>
		 */
		getResizable(): boolean;
		/**
		 * Gets current value of property <code>showHeader</code>.
		 * 
		 * Determines whether the header is shown inside the dialog. If this property is set to true, the text and icon property are ignored. This property has a default value true.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>showHeader</code>
		 */
		getShowHeader(): boolean;
		/**
		 * Gets current value of property <code>state</code>.
		 * 
		 * The state affects the icon and the title color. If other than "None" is set, a predefined icon will be added to the dialog. Setting icon property will overwrite the predefined icon. The default value is "None" which doesn't add any icon to the Dialog control. This property is by now only supported by blue crystal theme.
		 * 
		 * Default value is <code>None</code>.
		 * @return Value of property <code>state</code>
		 */
		getState(): sap.ui.core.ValueState;
		/**
		 * Gets current value of property <code>stretch</code>.
		 * 
		 * Determines  if the dialog will be stretched to full screen. This property is only applicable to standard dialog and message type dialog ignores this property.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>stretch</code>
		 */
		getStretch(): boolean;
		/**
		 * Gets content of aggregation <code>subHeader</code>.
		 * 
		 * When subHeader is assigned to Dialog, it's rendered directly after the main header in Dialog. SubHeader is out of the content area and won't be scrolled when content's size is bigger than the content area's size.
		 * @return 
		 */
		getSubHeader(): IBar;
		/**
		 * Gets current value of property <code>title</code>.
		 * 
		 * Title text appears in the dialog header.
		 * @return Value of property <code>title</code>
		 */
		getTitle(): string;
		/**
		 * Gets current value of property <code>type</code>.
		 * 
		 * The type of the dialog. In theme sap_bluecrystal, the type "message" will limit the dialog's width within 480px on tablet and desktop.
		 * 
		 * Default value is <code>Standard</code>.
		 * @return Value of property <code>type</code>
		 */
		getType(): DialogType;
		/**
		 * Gets current value of property <code>verticalScrolling</code>.
		 * 
		 * Indicates if user can scroll vertically inside dialog when the content is bignger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the dialog, this property needs to be set to false to disable the scrolling in dialog in order to make the scrolling in the child control work properly.
		 * Dialog detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to dialog. If there is, dialog will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>verticalScrolling</code>
		 */
		getVerticalScrolling(): boolean;
		/**
		 * Checks for the provided <code>sap.m.Button</code> in the aggregation <code>buttons</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oButton The button whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfButton(oButton: Button): number;
		/**
		 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oContent The content whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfContent(oContent: sap.ui.core.Control): number;
		/**
		 * Inserts a button into the aggregation <code>buttons</code>.
		 * @param oButton the button to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the button should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the button is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the button is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertButton(oButton: Button, iIndex: number): Dialog;
		/**
		 * Inserts a content into the aggregation <code>content</code>.
		 * @param oContent the content to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the content should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the content is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertContent(oContent: sap.ui.core.Control, iIndex: number): Dialog;
		/**
		 * The method checks if the Dialog is open. It returns true when the Dialog is currently open (this includes opening and closing animations), otherwise it returns false.
		 * @return boolean
		 */
		isOpen();
		/**
		 * Open the dialog.
		 */
		open();
		/**
		 * Removes all the controls in the association named <code>ariaDescribedBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Removes all the controls from the aggregation <code>buttons</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllButtons(): Button[];
		/**
		 * Removes all the controls from the aggregation <code>content</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllContent(): sap.ui.core.Control[];
		/**
		 * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
		 * @return The removed ariaDescribedBy or <code>null</code>
		 */
		removeAriaDescribedBy(vAriaDescribedBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
		 * @return The removed ariaLabelledBy or <code>null</code>
		 */
		removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Removes a button from the aggregation <code>buttons</code>.
		 * @param vButton The button to remove or its index or id
		 * @return The removed button or <code>null</code>
		 */
		removeButton(vButton: number|string|Button): Button;
		/**
		 * Removes a content from the aggregation <code>content</code>.
		 * @param vContent The content to remove or its index or id
		 * @return The removed content or <code>null</code>
		 */
		removeContent(vContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
		/**
		 * Sets the aggregated <code>beginButton</code>.
		 * @param oBeginButton The beginButton to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setBeginButton(oBeginButton: Button): Dialog;
		/**
		 * Sets a new value for property <code>contentHeight</code>.
		 * 
		 * Preferred height of content in Dialog. If the preferred height is bigger than the available space on screen, it will be overwritten by the maximum available height on screen in order to make sure that dialog isn't cut off.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sContentHeight New value for property <code>contentHeight</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setContentHeight(sContentHeight: sap.ui.core.CSSSize): Dialog;
		/**
		 * Sets a new value for property <code>contentWidth</code>.
		 * 
		 * Preferred width of content in Dialog. This property affects the width of dialog on phone in landscape mode, tablet or desktop, because the dialog has a fixed width on phone in portrait mode. If the preferred width is less than the minimum width of dilaog or more than the available width of the screen, it will be overwritten by the min or max value. The current mininum value of dialog width on tablet is 400px.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sContentWidth New value for property <code>contentWidth</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setContentWidth(sContentWidth: sap.ui.core.CSSSize): Dialog;
		/**
		 * Sets the aggregated <code>customHeader</code>.
		 * @param oCustomHeader The customHeader to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setCustomHeader(oCustomHeader: IBar): Dialog;
		/**
		 * Sets a new value for property <code>draggable</code>.
		 * 
		 * Indicates whether the dialog is draggable. If this property is set to true, the dialog will be draggable by it's header. This property has a default value false. The Dialog can be draggable only in desktop mode.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bDraggable New value for property <code>draggable</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDraggable(bDraggable: boolean): Dialog;
		/**
		 * Sets the aggregated <code>endButton</code>.
		 * @param oEndButton The endButton to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setEndButton(oEndButton: Button): Dialog;
		/**
		 * Sets a new value for property <code>horizontalScrolling</code>.
		 * 
		 * Indicates if user can scroll horizontally inside dialog when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the dialog, this property needs to be set to false to disable the scrolling in dialog in order to make the scrolling in the child control work properly.
		 * Dialog detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to dialog. If there is, dialog will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bHorizontalScrolling New value for property <code>horizontalScrolling</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHorizontalScrolling(bHorizontalScrolling: boolean): Dialog;
		/**
		 * Sets a new value for property <code>icon</code>.
		 * 
		 * Icon displayed in the dialog's header. This icon is invisible on the iOS platform and it's density aware. You can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density screen.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sIcon New value for property <code>icon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIcon(sIcon: sap.ui.core.URI): Dialog;
		/**
		 * Sets the associated <code>initialFocus</code>.
		 * @param oInitialFocus ID of an element which becomes the new target of this initialFocus association; alternatively, an element instance may be given
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setInitialFocus(oInitialFocus: sap.ui.core.ID|sap.ui.core.Control): Dialog;
		/**
		 * Sets a new value for property <code>resizable</code>.
		 * 
		 * Indicates whether the dialog is resizable. the dialog is resizable. If this property is set to true, the dialog will have a resize handler in it's bottom right corner. This property has a default value false. The Dialog can be resizable only in desktop mode.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bResizable New value for property <code>resizable</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setResizable(bResizable: boolean): Dialog;
		/**
		 * Sets a new value for property <code>showHeader</code>.
		 * 
		 * Determines whether the header is shown inside the dialog. If this property is set to true, the text and icon property are ignored. This property has a default value true.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bShowHeader New value for property <code>showHeader</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowHeader(bShowHeader: boolean): Dialog;
		/**
		 * Sets a new value for property <code>state</code>.
		 * 
		 * The state affects the icon and the title color. If other than "None" is set, a predefined icon will be added to the dialog. Setting icon property will overwrite the predefined icon. The default value is "None" which doesn't add any icon to the Dialog control. This property is by now only supported by blue crystal theme.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>None</code>.
		 * @param sState New value for property <code>state</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setState(sState: sap.ui.core.ValueState): Dialog;
		/**
		 * Sets a new value for property <code>stretch</code>.
		 * 
		 * Determines  if the dialog will be stretched to full screen. This property is only applicable to standard dialog and message type dialog ignores this property.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bStretch New value for property <code>stretch</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setStretch(bStretch: boolean): Dialog;
		/**
		 * Sets the aggregated <code>subHeader</code>.
		 * @param oSubHeader The subHeader to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setSubHeader(oSubHeader: IBar): Dialog;
		/**
		 * Sets a new value for property <code>title</code>.
		 * 
		 * Title text appears in the dialog header.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sTitle New value for property <code>title</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTitle(sTitle: string): Dialog;
		/**
		 * Sets a new value for property <code>type</code>.
		 * 
		 * The type of the dialog. In theme sap_bluecrystal, the type "message" will limit the dialog's width within 480px on tablet and desktop.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Standard</code>.
		 * @param sType New value for property <code>type</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setType(sType: DialogType): Dialog;
		/**
		 * Sets a new value for property <code>verticalScrolling</code>.
		 * 
		 * Indicates if user can scroll vertically inside dialog when the content is bignger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the dialog, this property needs to be set to false to disable the scrolling in dialog in order to make the scrolling in the child control work properly.
		 * Dialog detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to dialog. If there is, dialog will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bVerticalScrolling New value for property <code>verticalScrolling</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setVerticalScrolling(bVerticalScrolling: boolean): Dialog;
	}

	class DialogType {
		/**
		 * Dialog with type Message looks the same as the Stardard Dialog in Android. And it puts the left, right buttons to the bottom of the Dialog in iOS.
		 */
		static Message: string;
		/**
		 * This is the default value for Dialog type. Stardard dialog in iOS has a header on the top and the left, right buttons are put inside the header. In android, the left, right buttons are put to the bottom of the Dialog.
		 */
		static Standard: string;
	}

	class DisplayListItem extends ListItemBase {
		/**
		 * Constructor for a new DisplayListItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId Id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.DisplayListItemMetadata);
		/**
		 * Constructor for a new DisplayListItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId Id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.DisplayListItem with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|DisplayListItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.ListItemBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.ListItemBase
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ListItemBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>label</code>.
		 * 
		 * Defines the label of the list item.
		 * @return Value of property <code>label</code>
		 */
		getLabel(): string;
		/**
		 * Gets current value of property <code>value</code>.
		 * 
		 * Defines the value of the list item.
		 * @return Value of property <code>value</code>
		 */
		getValue(): string;
		/**
		 * Gets current value of property <code>valueTextDirection</code>.
		 * 
		 * Defines the <code>value</code> text directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @return Value of property <code>valueTextDirection</code>
		 */
		getValueTextDirection(): sap.ui.core.TextDirection;
		/**
		 * Sets a new value for property <code>label</code>.
		 * 
		 * Defines the label of the list item.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sLabel New value for property <code>label</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setLabel(sLabel: string): DisplayListItem;
		/**
		 * Sets a new value for property <code>value</code>.
		 * 
		 * Defines the value of the list item.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sValue New value for property <code>value</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setValue(sValue: string): DisplayListItem;
		/**
		 * Sets a new value for property <code>valueTextDirection</code>.
		 * 
		 * Defines the <code>value</code> text directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @param sValueTextDirection New value for property <code>valueTextDirection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setValueTextDirection(sValueTextDirection: sap.ui.core.TextDirection): DisplayListItem;
	}

	class DraftIndicator extends sap.ui.core.Control {
		/**
		 * Constructor for a new DraftIndicator.
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 */
		constructor(sId?: string);
		/**
		 * Clears the indicator state
		 */
		clearDraftState();
		/**
		 * Creates a new subclass of class sap.m.DraftIndicator with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|DraftIndicatorMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>minDisplayTime</code>.
		 * 
		 * Minimum time in milliseconds for showing the draft indicator
		 * 
		 * Default value is <code>1500</code>.
		 * @return Value of property <code>minDisplayTime</code>
		 */
		getMinDisplayTime(): number;
		/**
		 * Gets current value of property <code>state</code>.
		 * 
		 * State of the indicator. Could be "Saving", "Saved" and "Clear".
		 * 
		 * Default value is <code>Clear</code>.
		 * @return Value of property <code>state</code>
		 */
		getState(): DraftIndicatorState;
		/**
		 * Sets a new value for property <code>minDisplayTime</code>.
		 * 
		 * Minimum time in milliseconds for showing the draft indicator
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>1500</code>.
		 * @param iMinDisplayTime New value for property <code>minDisplayTime</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMinDisplayTime(iMinDisplayTime: number): DraftIndicator;
		/**
		 * Sets the indicator in "Saved" state
		 */
		showDraftSaved();
		/**
		 * Sets the indicator in "Saving..." state
		 */
		showDraftSaving();
	}

	class DraftIndicatorState {
		/**
		 * This is the default value for DraftIndicatorState type. This state has no visual information displayed.
		 */
		static Clear: string;
		/**
		 * Indicates that the draft is already saved
		 */
		static Saved: string;
		/**
		 * Indicates that the draft currently is being saved
		 */
		static Saving: string;
	}

	class FacetFilter extends sap.ui.core.Control {
		/**
		 * Constructor for a new FacetFilter.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.FacetFilterMetadata);
		/**
		 * Constructor for a new FacetFilter.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some list to the aggregation <code>lists</code>.
		 * @param oList the list to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addList(oList: FacetFilterList): FacetFilter;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>confirm</code> event of this <code>sap.m.FacetFilter</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.FacetFilter</code> itself.
		 * 
		 * Fired when the user confirms filter selection.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.FacetFilter</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachConfirm(oData: any, fnFunction: any, oListener?: any): FacetFilter;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>reset</code> event of this <code>sap.m.FacetFilter</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.FacetFilter</code> itself.
		 * 
		 * Fired when the Reset button is pressed to inform that all FacetFilterLists need to be reset.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.FacetFilter</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachReset(oData: any, fnFunction: any, oListener?: any): FacetFilter;
		/**
		 * Destroys all the lists in the aggregation <code>lists</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyLists(): FacetFilter;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>confirm</code> event of this <code>sap.m.FacetFilter</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachConfirm(fnFunction: any, oListener: any): FacetFilter;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>reset</code> event of this <code>sap.m.FacetFilter</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachReset(fnFunction: any, oListener: any): FacetFilter;
		/**
		 * Creates a new subclass of class sap.m.FacetFilter with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|FacetFilterMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>confirm</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireConfirm(mArguments?: any): FacetFilter;
		/**
		 * Fires event <code>reset</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireReset(mArguments?: any): FacetFilter;
		/**
		 * Gets current value of property <code>liveSearch</code>.
		 * 
		 * Enables/disables live search on all search fields except for the FacetFilterList search.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>liveSearch</code>
		 */
		getLiveSearch(): boolean;
		/**
		 * Gets current value of property <code>showPersonalization</code>.
		 * 
		 * If set to <code>true</code> and the FacetFilter type is <code>Simple</code>, then the Add Facet icon will be displayed and each facet button will also have a Facet Remove icon displayed beside it, allowing the user to deactivate the facet.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>showPersonalization</code>
		 */
		getShowPersonalization(): boolean;
		/**
		 * Gets current value of property <code>showPopoverOKButton</code>.
		 * 
		 * If set to <code>true</code>, an OK button is displayed for every FacetFilterList popover. This button allows the user to close the popover from within the popover instead of having to click outside of it.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>showPopoverOKButton</code>
		 */
		getShowPopoverOKButton(): boolean;
		/**
		 * Gets current value of property <code>showReset</code>.
		 * 
		 * Shows/hides the FacetFilter Reset button.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>showReset</code>
		 */
		getShowReset(): boolean;
		/**
		 * Gets current value of property <code>showSummaryBar</code>.
		 * 
		 * Shows the summary bar instead of the FacetFilter buttons bar when set to <code>true</code>.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>showSummaryBar</code>
		 */
		getShowSummaryBar(): boolean;
		/**
		 * Gets current value of property <code>type</code>.
		 * 
		 * Defines the default appearance of the FacetFilter on the device. Possible values are <code>Simple</code> (default) and <code>Light</code>.
		 * 
		 * Default value is <code>Simple</code>.
		 * @return Value of property <code>type</code>
		 */
		getType(): FacetFilterType;
		/**
		 * Checks for the provided <code>sap.m.FacetFilterList</code> in the aggregation <code>lists</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oList The list whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfList(oList: FacetFilterList): number;
		/**
		 * Inserts a list into the aggregation <code>lists</code>.
		 * @param oList the list to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the list should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the list is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the list is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertList(oList: FacetFilterList, iIndex: number): FacetFilter;
		/**
		 * Opens the FacetFilter dialog.
		 * @return this pointer for chaining
		 */
		openFilterDialog(): FacetFilter;
		/**
		 * Removes all the controls from the aggregation <code>lists</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllLists(): FacetFilterList[];
		/**
		 * Sets a new value for property <code>showPersonalization</code>.
		 * 
		 * If set to <code>true</code> and the FacetFilter type is <code>Simple</code>, then the Add Facet icon will be displayed and each facet button will also have a Facet Remove icon displayed beside it, allowing the user to deactivate the facet.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bShowPersonalization New value for property <code>showPersonalization</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowPersonalization(bShowPersonalization: boolean): FacetFilter;
		/**
		 * Sets a new value for property <code>showPopoverOKButton</code>.
		 * 
		 * If set to <code>true</code>, an OK button is displayed for every FacetFilterList popover. This button allows the user to close the popover from within the popover instead of having to click outside of it.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bShowPopoverOKButton New value for property <code>showPopoverOKButton</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowPopoverOKButton(bShowPopoverOKButton: boolean): FacetFilter;
	}

	class FacetFilterItem extends ListItemBase {
		/**
		 * Constructor for a new FacetFilterItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.FacetFilterItemMetadata);
		/**
		 * Constructor for a new FacetFilterItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.FacetFilterItem with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|FacetFilterItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.ListItemBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.ListItemBase
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ListItemBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>key</code>.
		 * 
		 * Can be used as input for subsequent actions.
		 * @return Value of property <code>key</code>
		 */
		getKey(): string;
		/**
		 * Gets current value of property <code>text</code>.
		 * 
		 * Determines the text to be displayed for the item.
		 * @return Value of property <code>text</code>
		 */
		getText(): string;
		/**
		 * Sets a new value for property <code>key</code>.
		 * 
		 * Can be used as input for subsequent actions.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sKey New value for property <code>key</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setKey(sKey: string): FacetFilterItem;
		/**
		 * Sets a new value for property <code>text</code>.
		 * 
		 * Determines the text to be displayed for the item.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sText New value for property <code>text</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setText(sText: string): FacetFilterItem;
	}

	class FacetFilterList extends List {
		/**
		 * Constructor for a new FacetFilterList.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.FacetFilterListMetadata);
		/**
		 * Constructor for a new FacetFilterList.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>listClose</code> event of this <code>sap.m.FacetFilterList</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.FacetFilterList</code> itself.
		 * 
		 * Triggered after the list of items is closed.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.FacetFilterList</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachListClose(oData: any, fnFunction: any, oListener?: any): FacetFilterList;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>listOpen</code> event of this <code>sap.m.FacetFilterList</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.FacetFilterList</code> itself.
		 * 
		 * Fired before the filter list is opened.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.FacetFilterList</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachListOpen(oData: any, fnFunction: any, oListener?: any): FacetFilterList;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>listClose</code> event of this <code>sap.m.FacetFilterList</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachListClose(fnFunction: any, oListener: any): FacetFilterList;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>listOpen</code> event of this <code>sap.m.FacetFilterList</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachListOpen(fnFunction: any, oListener: any): FacetFilterList;
		/**
		 * Creates a new subclass of class sap.m.FacetFilterList with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.List.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|FacetFilterListMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.ListBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.ListBase
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ListBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.List with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListBase.extend}.
		 * @note Overload from base type sap.m.List
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ListMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>listClose</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>selectedItems</code> of type <code>sap.m.FacetFilterItem[]</code>Array of selected items. Items returned are only copies and therefore can only be used to read properties, not set them.</li>
		 * <li><code>allSelected</code> of type <code>boolean</code><code>True</code> if the select All checkbox is selected. This will be <code>false</code> if all items are actually selected (every FacetFilterItem.selected == true). In that case selectedItems will contain all selected items.</li>
		 * <li><code>selectedKeys</code> of type <code>object</code>Associative array containing the keys of selected FacetFilterItems. Unlike the selectedItems parameter, this contains only the keys for all selected items, not the items themselves. Being an associative array, each object property is the FacetFilterItem key value and the value of the property is the FacetFilterItem text.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireListClose(mArguments?: any): FacetFilterList;
		/**
		 * Fires event <code>listOpen</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireListOpen(mArguments?: any): FacetFilterList;
		/**
		 * Gets current value of property <code>active</code>.
		 * 
		 * Indicates that the list is displayed as a button when the FacetFilter type is set to <code>Simple</code>.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>active</code>
		 */
		getActive(): boolean;
		/**
		 * Gets current value of property <code>allCount</code>.
		 * 
		 * Determines the number of objects that match this item in the target data set when all filter items are selected.
		 * @return Value of property <code>allCount</code>
		 */
		getAllCount(): number;
		/**
		 * Gets current value of property <code>dataType</code>.
		 * 
		 * FacetFilterList data type. Only String data type will provide search function.
		 * 
		 * Default value is <code>String</code>.
		 * @return Value of property <code>dataType</code>
		 */
		getDataType(): FacetFilterListDataType;
		/**
		 * Gets current value of property <code>enableCaseInsensitiveSearch</code>.
		 * 
		 * If set to <code>true</code>, enables case-insensitive search for OData.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>enableCaseInsensitiveSearch</code>
		 */
		getEnableCaseInsensitiveSearch(): boolean;
		/**
		 * Gets current value of property <code>key</code>.
		 * 
		 * Unique identifier for this filter list.
		 * @return Value of property <code>key</code>
		 */
		getKey(): string;
		/**
		 * Gets current value of property <code>retainListSequence</code>.
		 * 
		 * Retains the list sequence if it is inactive and made active again.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>retainListSequence</code>
		 */
		getRetainListSequence(): boolean;
		/**
		 * Returns the keys of the selected elements as an associative array.
		 * An empty object is returned if no items are selected.
		 * @return Object with the selected keys
		 */
		getSelectedKeys(): any;
		/**
		 * Gets current value of property <code>sequence</code>.
		 * 
		 * Sequence that determines the order in which FacetFilterList is shown on the FacetFilter. Lists are rendered by ascending order of sequence.
		 * 
		 * Default value is <code>-1</code>.
		 * @return Value of property <code>sequence</code>
		 */
		getSequence(): number;
		/**
		 * Gets current value of property <code>showRemoveFacetIcon</code>.
		 * 
		 * Specifies whether remove icon for facet is visible or hidden.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>showRemoveFacetIcon</code>
		 */
		getShowRemoveFacetIcon(): boolean;
		/**
		 * Gets current value of property <code>title</code>.
		 * 
		 * Defines the title of the facet. The facet title is displayed on the facet button when the FacetFilter type is set to <code>Simple</code>. It is also displayed as a list item in the facet page of the dialog.
		 * @return Value of property <code>title</code>
		 */
		getTitle(): string;
		/**
		 * Gets current value of property <code>wordWrap</code>.
		 * 
		 * If set to <code>true</code>, the item text wraps when it is too long.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>wordWrap</code>
		 */
		getWordWrap(): boolean;
		/**
		 * Removes the specified key from the selected keys cache and deselects the item.
		 * @param sKey The key of the selected item to be removed from the cache. If <code>null</code> then the text parameter will be used as the key.
		 * @param sText The text of the selected item to be removed from the cache. If the key parameter is <code>null</code> then text will be used as the key.
		 */
		removeSelectedKey(sKey: string, sText: string);
		/**
		 * Removes all selected keys from the selected keys cache and deselects all items.
		 */
		removeSelectedKeys();
		/**
		 * Sets a new value for property <code>active</code>.
		 * 
		 * Indicates that the list is displayed as a button when the FacetFilter type is set to <code>Simple</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bActive New value for property <code>active</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setActive(bActive: boolean): FacetFilterList;
		/**
		 * Sets a new value for property <code>allCount</code>.
		 * 
		 * Determines the number of objects that match this item in the target data set when all filter items are selected.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param iAllCount New value for property <code>allCount</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setAllCount(iAllCount: number): FacetFilterList;
		/**
		 * Sets a new value for property <code>dataType</code>.
		 * 
		 * FacetFilterList data type. Only String data type will provide search function.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>String</code>.
		 * @param sDataType New value for property <code>dataType</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDataType(sDataType: FacetFilterListDataType): FacetFilterList;
		/**
		 * Sets a new value for property <code>enableCaseInsensitiveSearch</code>.
		 * 
		 * If set to <code>true</code>, enables case-insensitive search for OData.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bEnableCaseInsensitiveSearch New value for property <code>enableCaseInsensitiveSearch</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setEnableCaseInsensitiveSearch(bEnableCaseInsensitiveSearch: boolean): FacetFilterList;
		/**
		 * Sets a new value for property <code>key</code>.
		 * 
		 * Unique identifier for this filter list.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sKey New value for property <code>key</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setKey(sKey: string): FacetFilterList;
		/**
		 * Overrides to allow only MultiSelect and SingleSelectMaster list modes.
		 * If an invalid mode is given then the mode will not be changed.
		 * @param mode The list mode
		 */
		setMode(mode: ListMode);
		/**
		 * Sets a new value for property <code>mode</code>.
		 * 
		 * Defines the mode of the control (e.g. <code>None</code>, <code>SingleSelect</code>, <code>MultiSelect</code>, <code>Delete</code>).
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>None</code>.
		 * @note Overload from base type sap.m.ListBase
		 * @param sMode New value for property <code>mode</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMode(sMode: ListMode): ListBase;
		/**
		 * Sets a new value for property <code>retainListSequence</code>.
		 * 
		 * Retains the list sequence if it is inactive and made active again.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bRetainListSequence New value for property <code>retainListSequence</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setRetainListSequence(bRetainListSequence: boolean): FacetFilterList;
		/**
		 * Used to pre-select FacetFilterItems, such as when restoring FacetFilterList selections from a variant.
		 * Keys are cached separately from the actual FacetFilterItems so that they remain even when the physical items are removed by filtering or sorting.
		 * If aKeys is <code>undefined</code>, <code>null</code>, or {} (empty object) then all keys are deleted.
		 * After this method completes, only those items with matching keys will be selected. All other items in the list will be deselected.
		 * @param oAKeys Associative array indicating which FacetFilterItems should be selected in the list. Each property must be set to the value of a FacetFilterItem.key property. Each property value should be set to the FacetFilterItem.text property value. The text value is used to display the FacetFilterItem text when the FacetFilterList button or FacetFilter summary bar is displayed. If no property value is set then the property key is used for the text.
		 */
		setSelectedKeys(oAKeys: any);
		/**
		 * Sets a new value for property <code>sequence</code>.
		 * 
		 * Sequence that determines the order in which FacetFilterList is shown on the FacetFilter. Lists are rendered by ascending order of sequence.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>-1</code>.
		 * @param iSequence New value for property <code>sequence</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setSequence(iSequence: number): FacetFilterList;
		/**
		 * Sets a new value for property <code>showRemoveFacetIcon</code>.
		 * 
		 * Specifies whether remove icon for facet is visible or hidden.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bShowRemoveFacetIcon New value for property <code>showRemoveFacetIcon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowRemoveFacetIcon(bShowRemoveFacetIcon: boolean): FacetFilterList;
		/**
		 * Sets a new value for property <code>wordWrap</code>.
		 * 
		 * If set to <code>true</code>, the item text wraps when it is too long.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bWordWrap New value for property <code>wordWrap</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWordWrap(bWordWrap: boolean): FacetFilterList;
	}

	class FacetFilterListDataType {
		/**
		 * >An input control for specifying a Boolean value
		 */
		static Boolean: string;
		/**
		 * An input control for specifying a date value. The user can select a month, day of the month, and year.
		 */
		static Date: string;
		/**
		 * An input control for specifying a date and time value. The user can select a month, day of the month, year, and time of day.
		 */
		static DateTime: string;
		/**
		 * >An input control for specifying a Float value
		 */
		static Float: string;
		/**
		 * >An input control for specifying a Integer value
		 */
		static Integer: string;
		/**
		 * >An input control for specifying a String value
		 */
		static String: string;
		/**
		 * An input control for specifying a time value. The user can select the hour, minute, and optionally AM or PM.
		 */
		static Time: string;
	}

	class FacetFilterType {
		/**
		 * Forces FacetFilter to display in light mode.
		 */
		static Light: string;
		/**
		 * Forces FacetFilter to display facet lists as a row of buttons, one button per facet. The FacetFilter will automatically adapt to the Light type when it detects smart phone sized displays.
		 */
		static Simple: string;
	}

	class FeedContent extends sap.ui.core.Control {
		/**
		 * Constructor for a new sap.m.FeedContent control.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.FeedContentMetadata);
		/**
		 * Constructor for a new sap.m.FeedContent control.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this <code>sap.m.FeedContent</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.FeedContent</code> itself.
		 * 
		 * The event is fired when the user chooses the feed content.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.FeedContent</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachPress(oData: any, fnFunction: any, oListener?: any): FeedContent;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this <code>sap.m.FeedContent</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachPress(fnFunction: any, oListener: any): FeedContent;
		/**
		 * Creates a new subclass of class sap.m.FeedContent with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|FeedContentMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>press</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		firePress(mArguments?: any): FeedContent;
		/**
		 * Gets current value of property <code>contentText</code>.
		 * 
		 * The content text.
		 * @return Value of property <code>contentText</code>
		 */
		getContentText(): string;
		/**
		 * Gets current value of property <code>subheader</code>.
		 * 
		 * The subheader.
		 * @return Value of property <code>subheader</code>
		 */
		getSubheader(): string;
		/**
		 * Gets current value of property <code>truncateValueTo</code>.
		 * 
		 * The number of characters to display for the value property.
		 * 
		 * Default value is <code>4</code>.
		 * @return Value of property <code>truncateValueTo</code>
		 */
		getTruncateValueTo(): number;
		/**
		 * Gets current value of property <code>value</code>.
		 * 
		 * The actual value.
		 * @return Value of property <code>value</code>
		 */
		getValue(): string;
		/**
		 * Gets current value of property <code>valueColor</code>.
		 * 
		 * The semantic color of the value.
		 * @return Value of property <code>valueColor</code>
		 */
		getValueColor(): ValueColor;
		/**
		 * Sets a new value for property <code>subheader</code>.
		 * 
		 * The subheader.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sSubheader New value for property <code>subheader</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setSubheader(sSubheader: string): FeedContent;
		/**
		 * Sets a new value for property <code>truncateValueTo</code>.
		 * 
		 * The number of characters to display for the value property.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>4</code>.
		 * @param iTruncateValueTo New value for property <code>truncateValueTo</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTruncateValueTo(iTruncateValueTo: number): FeedContent;
		/**
		 * Sets a new value for property <code>value</code>.
		 * 
		 * The actual value.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sValue New value for property <code>value</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setValue(sValue: string): FeedContent;
		/**
		 * Sets a new value for property <code>valueColor</code>.
		 * 
		 * The semantic color of the value.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sValueColor New value for property <code>valueColor</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setValueColor(sValueColor: ValueColor): FeedContent;
	}

	class FeedInput extends sap.ui.core.Control {
		/**
		 * Constructor for a new FeedInput.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.FeedInputMetadata);
		/**
		 * Constructor for a new FeedInput.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>post</code> event of this <code>sap.m.FeedInput</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.FeedInput</code> itself.
		 * 
		 * The Post event is triggered when the user has entered a value and pressed the post button. After firing this event, the value is reset.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.FeedInput</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachPost(oData: any, fnFunction: any, oListener?: any): FeedInput;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>post</code> event of this <code>sap.m.FeedInput</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachPost(fnFunction: any, oListener: any): FeedInput;
		/**
		 * Creates a new subclass of class sap.m.FeedInput with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|FeedInputMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>post</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>value</code> of type <code>string</code>The value of the feed input before reseting it.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		firePost(mArguments?: any): FeedInput;
		/**
		 * Gets current value of property <code>ariaLabelForPicture</code>.
		 * 
		 * Text for Picture which will be read by screenreader.
		 * If a new ariaLabelForPicture is set, any previously set ariaLabelForPicture is deactivated.
		 * @return Value of property <code>ariaLabelForPicture</code>
		 */
		getAriaLabelForPicture(): string;
		/**
		 * Gets current value of property <code>buttonTooltip</code>.
		 * 
		 * Sets a new tooltip for Submit button. The tooltip can either be a simple string (which in most cases will be rendered as the title attribute of this element)
		 * or an instance of sap.ui.core.TooltipBase.
		 * If a new tooltip is set, any previously set tooltip is deactivated.
		 * The default value is set language dependent.
		 * 
		 * Default value is <code>Submit</code>.
		 * @return Value of property <code>buttonTooltip</code>
		 */
		getButtonTooltip(): sap.ui.core.TooltipBase;
		/**
		 * Gets current value of property <code>enabled</code>.
		 * 
		 * Set this flag to "false" to disable both text input and post button.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>enabled</code>
		 */
		getEnabled(): boolean;
		/**
		 * Gets current value of property <code>icon</code>.
		 * 
		 * Icon to be displayed as a graphical element within the feed input. This can be an image or an icon from the icon font.
		 * @return Value of property <code>icon</code>
		 */
		getIcon(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>iconDensityAware</code>.
		 * 
		 * Some mobile devices support higher resolution images while others do not. Therefore, you should provide image resources for all relevant densities.
		 * If the property is set to "true", one or more requests are sent to the server to try and get the perfect density version of an image. If an image of a certain density is not available, the image control falls back to the default image, which should be provided.
		 * 
		 * If you do not have higher resolution images, you should set the property to "false" to avoid unnecessary round-trips.
		 * 
		 * Please be aware that this property is relevant only for images and not for icons.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>iconDensityAware</code>
		 */
		getIconDensityAware(): boolean;
		/**
		 * Gets current value of property <code>maxLength</code>.
		 * 
		 * The maximum length (the maximum number of characters) for the feed input's value. By default this is not limited.
		 * 
		 * Default value is <code>0</code>.
		 * @return Value of property <code>maxLength</code>
		 */
		getMaxLength(): number;
		/**
		 * Gets current value of property <code>placeholder</code>.
		 * 
		 * The placeholder text shown in the input area as long as the user has not entered any text value.
		 * 
		 * Default value is <code>Post something here</code>.
		 * @return Value of property <code>placeholder</code>
		 */
		getPlaceholder(): string;
		/**
		 * Gets current value of property <code>showIcon</code>.
		 * 
		 * If set to "true" (default), icons will be displayed. In case no icon is provided the standard placeholder will be displayed. if set to "false" icons are hidden
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>showIcon</code>
		 */
		getShowIcon(): boolean;
		/**
		 * Gets current value of property <code>value</code>.
		 * 
		 * The text value of the feed input. As long as the user has not entered any text the post button is disabled
		 * @return Value of property <code>value</code>
		 */
		getValue(): string;
		/**
		 * Sets a new value for property <code>ariaLabelForPicture</code>.
		 * 
		 * Text for Picture which will be read by screenreader.
		 * If a new ariaLabelForPicture is set, any previously set ariaLabelForPicture is deactivated.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sAriaLabelForPicture New value for property <code>ariaLabelForPicture</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setAriaLabelForPicture(sAriaLabelForPicture: string): FeedInput;
		/**
		 * Sets a new value for property <code>buttonTooltip</code>.
		 * 
		 * Sets a new tooltip for Submit button. The tooltip can either be a simple string (which in most cases will be rendered as the title attribute of this element)
		 * or an instance of sap.ui.core.TooltipBase.
		 * If a new tooltip is set, any previously set tooltip is deactivated.
		 * The default value is set language dependent.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Submit</code>.
		 * @param sButtonTooltip New value for property <code>buttonTooltip</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setButtonTooltip(sButtonTooltip: sap.ui.core.TooltipBase): FeedInput;
		/**
		 * Sets a new value for property <code>enabled</code>.
		 * 
		 * Set this flag to "false" to disable both text input and post button.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bEnabled New value for property <code>enabled</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setEnabled(bEnabled: boolean): FeedInput;
		/**
		 * Sets a new value for property <code>icon</code>.
		 * 
		 * Icon to be displayed as a graphical element within the feed input. This can be an image or an icon from the icon font.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sIcon New value for property <code>icon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIcon(sIcon: sap.ui.core.URI): FeedInput;
		/**
		 * Sets a new value for property <code>iconDensityAware</code>.
		 * 
		 * Some mobile devices support higher resolution images while others do not. Therefore, you should provide image resources for all relevant densities.
		 * If the property is set to "true", one or more requests are sent to the server to try and get the perfect density version of an image. If an image of a certain density is not available, the image control falls back to the default image, which should be provided.
		 * 
		 * If you do not have higher resolution images, you should set the property to "false" to avoid unnecessary round-trips.
		 * 
		 * Please be aware that this property is relevant only for images and not for icons.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bIconDensityAware New value for property <code>iconDensityAware</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIconDensityAware(bIconDensityAware: boolean): FeedInput;
		/**
		 * Sets a new value for property <code>maxLength</code>.
		 * 
		 * The maximum length (the maximum number of characters) for the feed input's value. By default this is not limited.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>0</code>.
		 * @param iMaxLength New value for property <code>maxLength</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMaxLength(iMaxLength: number): FeedInput;
		/**
		 * Sets a new value for property <code>placeholder</code>.
		 * 
		 * The placeholder text shown in the input area as long as the user has not entered any text value.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Post something here</code>.
		 * @param sPlaceholder New value for property <code>placeholder</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setPlaceholder(sPlaceholder: string): FeedInput;
		/**
		 * Sets a new value for property <code>showIcon</code>.
		 * 
		 * If set to "true" (default), icons will be displayed. In case no icon is provided the standard placeholder will be displayed. if set to "false" icons are hidden
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bShowIcon New value for property <code>showIcon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowIcon(bShowIcon: boolean): FeedInput;
		/**
		 * Sets a new value for property <code>value</code>.
		 * 
		 * The text value of the feed input. As long as the user has not entered any text the post button is disabled
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sValue New value for property <code>value</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setValue(sValue: string): FeedInput;
	}

	class FeedListItem extends ListItemBase {
		/**
		 * Constructor for a new FeedListItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.FeedListItemMetadata);
		/**
		 * Constructor for a new FeedListItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>iconPress</code> event of this <code>sap.m.FeedListItem</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.FeedListItem</code> itself.
		 * 
		 * Event is fired when the icon is pressed.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.FeedListItem</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachIconPress(oData: any, fnFunction: any, oListener?: any): FeedListItem;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>senderPress</code> event of this <code>sap.m.FeedListItem</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.FeedListItem</code> itself.
		 * 
		 * Event is fired when name of the sender is pressed.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.FeedListItem</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachSenderPress(oData: any, fnFunction: any, oListener?: any): FeedListItem;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>iconPress</code> event of this <code>sap.m.FeedListItem</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachIconPress(fnFunction: any, oListener: any): FeedListItem;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>senderPress</code> event of this <code>sap.m.FeedListItem</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachSenderPress(fnFunction: any, oListener: any): FeedListItem;
		/**
		 * Creates a new subclass of class sap.m.FeedListItem with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|FeedListItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.ListItemBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.ListItemBase
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ListItemBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>iconPress</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>domRef</code> of type <code>string</code>Dom reference of the feed item's icon to be used for positioning.</li>
		 * <li><code>getDomRef</code> of type <code>function</code>Function to retrieve the DOM reference for the <code>iconPress</code> event.
		 * The function returns the DOM element of the icon or null</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireIconPress(mArguments?: any): FeedListItem;
		/**
		 * Fires event <code>senderPress</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>domRef</code> of type <code>string</code>Dom reference of the feed item's sender string to be used for positioning.</li>
		 * <li><code>getDomRef</code> of type <code>function</code>Function to retrieve the DOM reference for the <code>senderPress</code> event.
		 * The function returns the DOM element of the sender link or null</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireSenderPress(mArguments?: any): FeedListItem;
		/**
		 * Gets current value of property <code>activeIcon</code>.
		 * 
		 * Icon displayed when the list item is active.
		 * @return Value of property <code>activeIcon</code>
		 */
		getActiveIcon(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>icon</code>.
		 * 
		 * Icon to be displayed as graphical element within the FeedListItem. This can be an image or an icon from the icon font. If no icon is provided, a default person-placeholder icon is displayed.
		 * Icon is only shown if showIcon = true.
		 * @return Value of property <code>icon</code>
		 */
		getIcon(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>iconActive</code>.
		 * 
		 * If true, icon is an link, which will fire 'iconPress' events. If false, icon is normal image
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>iconActive</code>
		 */
		getIconActive(): boolean;
		/**
		 * Gets current value of property <code>iconDensityAware</code>.
		 * 
		 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
		 * 
		 * If bandwidth is the key for the application, set this value to false.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>iconDensityAware</code>
		 */
		getIconDensityAware(): boolean;
		/**
		 * Gets current value of property <code>info</code>.
		 * 
		 * The Info text.
		 * @return Value of property <code>info</code>
		 */
		getInfo(): string;
		/**
		 * Gets current value of property <code>maxCharacters</code>.
		 * 
		 * The expand and collapse feature is set by default and uses 300 characters on mobile devices and 500 characters on desktops as limits. Based on these values, the text of the FeedListItem is collapsed once text reaches these limits. In this case, only the specified number of characters is displayed. By clicking on the text link More, the entire text can be displayed. The text link Less collapses the text. The application is able to set the value to its needs.
		 * @return Value of property <code>maxCharacters</code>
		 */
		getMaxCharacters(): number;
		/**
		 * Gets current value of property <code>sender</code>.
		 * 
		 * Sender of the chunk
		 * @return Value of property <code>sender</code>
		 */
		getSender(): string;
		/**
		 * Gets current value of property <code>senderActive</code>.
		 * 
		 * If true, sender string is an link, which will fire 'senderPress' events. If false, sender is normal text.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>senderActive</code>
		 */
		getSenderActive(): boolean;
		/**
		 * Gets current value of property <code>showIcon</code>.
		 * 
		 * If set to "true" (default), icons will be displayed, if set to false icons are hidden
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>showIcon</code>
		 */
		getShowIcon(): boolean;
		/**
		 * Gets current value of property <code>text</code>.
		 * 
		 * The FeedListItem text.
		 * @return Value of property <code>text</code>
		 */
		getText(): string;
		/**
		 * Gets current value of property <code>timestamp</code>.
		 * 
		 * This chunks timestamp
		 * @return Value of property <code>timestamp</code>
		 */
		getTimestamp(): string;
		/**
		 * Sets a new value for property <code>activeIcon</code>.
		 * 
		 * Icon displayed when the list item is active.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sActiveIcon New value for property <code>activeIcon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setActiveIcon(sActiveIcon: sap.ui.core.URI): FeedListItem;
		/**
		 * Sets a new value for property <code>icon</code>.
		 * 
		 * Icon to be displayed as graphical element within the FeedListItem. This can be an image or an icon from the icon font. If no icon is provided, a default person-placeholder icon is displayed.
		 * Icon is only shown if showIcon = true.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sIcon New value for property <code>icon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIcon(sIcon: sap.ui.core.URI): FeedListItem;
		/**
		 * Sets a new value for property <code>iconActive</code>.
		 * 
		 * If true, icon is an link, which will fire 'iconPress' events. If false, icon is normal image
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bIconActive New value for property <code>iconActive</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIconActive(bIconActive: boolean): FeedListItem;
		/**
		 * Sets a new value for property <code>iconDensityAware</code>.
		 * 
		 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
		 * 
		 * If bandwidth is the key for the application, set this value to false.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bIconDensityAware New value for property <code>iconDensityAware</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIconDensityAware(bIconDensityAware: boolean): FeedListItem;
		/**
		 * Sets a new value for property <code>info</code>.
		 * 
		 * The Info text.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sInfo New value for property <code>info</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setInfo(sInfo: string): FeedListItem;
		/**
		 * Sets a new value for property <code>maxCharacters</code>.
		 * 
		 * The expand and collapse feature is set by default and uses 300 characters on mobile devices and 500 characters on desktops as limits. Based on these values, the text of the FeedListItem is collapsed once text reaches these limits. In this case, only the specified number of characters is displayed. By clicking on the text link More, the entire text can be displayed. The text link Less collapses the text. The application is able to set the value to its needs.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param iMaxCharacters New value for property <code>maxCharacters</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMaxCharacters(iMaxCharacters: number): FeedListItem;
		/**
		 * Sets a new value for property <code>sender</code>.
		 * 
		 * Sender of the chunk
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sSender New value for property <code>sender</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setSender(sSender: string): FeedListItem;
		/**
		 * Sets a new value for property <code>senderActive</code>.
		 * 
		 * If true, sender string is an link, which will fire 'senderPress' events. If false, sender is normal text.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bSenderActive New value for property <code>senderActive</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setSenderActive(bSenderActive: boolean): FeedListItem;
		/**
		 * Sets a new value for property <code>showIcon</code>.
		 * 
		 * If set to "true" (default), icons will be displayed, if set to false icons are hidden
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bShowIcon New value for property <code>showIcon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowIcon(bShowIcon: boolean): FeedListItem;
		/**
		 * Sets a new value for property <code>text</code>.
		 * 
		 * The FeedListItem text.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sText New value for property <code>text</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setText(sText: string): FeedListItem;
		/**
		 * Sets a new value for property <code>timestamp</code>.
		 * 
		 * This chunks timestamp
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sTimestamp New value for property <code>timestamp</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTimestamp(sTimestamp: string): FeedListItem;
		/**
		 * Redefinition of sap.m.ListItemBase.setType: type = "sap.m.ListType.Navigation" behaves like type = "sap.m.ListType.Active" for a FeedListItem
		 * @param type new value for property type
		 * @return this allows method chaining
		 */
		setType(type: ListType): FeedListItem;
		/**
		 * Sets a new value for property <code>type</code>.
		 * 
		 * Defines the visual indication and behavior of the list items, e.g. <code>Active</code>, <code>Navigation</code>, <code>Detail</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Inactive</code>.
		 * @note Overload from base type sap.m.ListItemBase
		 * @param sType New value for property <code>type</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setType(sType: ListType): ListItemBase;
		/**
		 * Redefinition of sap.m.ListItemBase.setUnread: Unread is not supported for FeedListItem
		 * @param value new value for property unread is ignored
		 * @return this allows method chaining
		 */
		setUnread(value: boolean): FeedListItem;
		/**
		 * Sets a new value for property <code>unread</code>.
		 * 
		 * Activates the unread indicator for the list item, if set to <code>true</code>.
		 * <b>Note:</b> This flag is ignored when the <code>showUnread</code> property of the parent is set to <code>false</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @note Overload from base type sap.m.ListItemBase
		 * @param bUnread New value for property <code>unread</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setUnread(bUnread: boolean): ListItemBase;
	}

	class FlexAlignContent {
		/**
		 * Line are packed toward the center of the line.
		 */
		static Center: string;
		/**
		 * Lines are packed toward the end of the line.
		 */
		static End: string;
		/**
		 * Inherits the value from its parent.
		 */
		static Inherit: string;
		/**
		 * Lines are evenly distributed in the line, with half-size spaces on either end.
		 * <b>Note:</b> This value behaves like SpaceBetween in Internet Explorer 10.
		 */
		static SpaceAround: string;
		/**
		 * Lines are evenly distributed in the line.
		 */
		static SpaceBetween: string;
		/**
		 * Lines are packed toward the start of the line.
		 */
		static Start: string;
		/**
		 * Lines stretch to take up the remaining space.
		 */
		static Stretch: string;
	}

	class FlexAlignItems {
		/**
		 * If the flex item's inline axes are the same as the cross axis, this value is identical to "Start". Otherwise, it participates in baseline alignment: all participating box items on the line are aligned such that their baselines align, and the item with the largest distance between its baseline and its cross-start margin edge is placed flush against the cross-start edge of the line.
		 */
		static Baseline: string;
		/**
		 * The flex item's margin boxes are centered in the cross axis within the line.
		 */
		static Center: string;
		/**
		 * The cross-start margin edges of the flex items are placed flush with the cross-end edge of the line.
		 */
		static End: string;
		/**
		 * Inherits the value from its parent.
		 */
		static Inherit: string;
		/**
		 * The cross-start margin edges of the flex items are placed flush with the cross-start edge of the line.
		 */
		static Start: string;
		/**
		 * Make the cross size of the item's margin boxes as close to the same size as the line as possible.
		 */
		static Stretch: string;
	}

	class FlexAlignSelf {
		/**
		 * Takes up the value of alignItems from the parent FlexBox
		 */
		static Auto: string;
		/**
		 * If the flex item's inline axis is the same as the cross axis, this value is identical to "Start". Otherwise, it participates in baseline alignment: all participating box items on the line are aligned such that their baselines align, and the item with the largest distance between its baseline and its cross-start margin edge is placed flush against the cross-start edge of the line.
		 */
		static Baseline: string;
		/**
		 * The flex item's margin box is centered in the cross axis within the line.
		 */
		static Center: string;
		/**
		 * The cross-start margin edges of the flex item is placed flush with the cross-end edge of the line.
		 */
		static End: string;
		/**
		 * Inherits the value from its parent.
		 */
		static Inherit: string;
		/**
		 * The cross-start margin edges of the flex item is placed flush with the cross-start edge of the line.
		 */
		static Start: string;
		/**
		 * Make the cross size of the item's margin box as close to the same size as the line as possible.
		 */
		static Stretch: string;
	}

	class FlexBox extends sap.ui.core.Control {
		/**
		 * Constructor for a new <code>sap.m.FlexBox</code>.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.FlexBoxMetadata);
		/**
		 * Constructor for a new <code>sap.m.FlexBox</code>.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some item to the aggregation <code>items</code>.
		 * @param oItem the item to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addItem(oItem: sap.ui.core.Control): FlexBox;
		/**
		 * Destroys all the items in the aggregation <code>items</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyItems(): FlexBox;
		/**
		 * Creates a new subclass of class sap.m.FlexBox with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|FlexBoxMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * 
		 */
		getAccessibilityInfo();
		/**
		 * This function (if available on the concrete control) provides
		 * the current accessibility state of the control.
		 * 
		 * Applications must not call this hook method directly, it is called by the framework.
		 * 
		 * Subclasses of Control should implement this hook to provide any necessary accessibility information:
		 * 
		 * <pre>
		 * MyControl.prototype.getAccessibilityInfo = function() {
		 *    return {
		 *      role: "textbox",      // String which represents the WAI-ARIA role which is implemented by the control.
		 *      type: "date input",   // String which represents the control type (Must be a translated text). Might correlate with
		 *                            // the role.
		 *      description: "value", // String which describes the most relevant control state (e.g. the inputs value). Must be a
		 *                            // translated text.
		 *                            // Note: The type and the enabled/editable state must not be handled here.
		 *      focusable: true,      // Boolean which describes whether the control can get the focus.
		 *      enabled: true,        // Boolean which describes whether the control is enabled. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      editable: true,       // Boolean which describes whether the control is editable. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      children: []          // Array of accessibility info objects of children of the given control (e.g. when the control is a layout).
		 *                            // Note: Children should only be provided when it is helpful to understand the accessibility context
		 *                            //       (e.g. a form control must not provide details of its internals (fields, labels, ...) but a
		 *                            //       layout should).
		 *    };
		 * };
		 * </pre>
		 * 
		 * Note: The returned object provides the accessibility state of the control at the point in time when this function is called.
		 * @note Overload from base type sap.ui.core.Control
		 * @return Current accessibility state of the control.
		 */
		getAccessibilityInfo(): any;
		/**
		 * Gets current value of property <code>alignContent</code>.
		 * 
		 * Determines the layout behavior of container lines when there's extra space along the cross-axis. This property has no effect in Internet Explorer 10.
		 * 
		 * Default value is <code>Stretch</code>.
		 * @return Value of property <code>alignContent</code>
		 */
		getAlignContent(): FlexAlignContent;
		/**
		 * Gets current value of property <code>alignItems</code>.
		 * 
		 * Determines the layout behavior of items along the cross-axis. "Baseline" is not supported in Internet Explorer 10.
		 * 
		 * Default value is <code>Stretch</code>.
		 * @return Value of property <code>alignItems</code>
		 */
		getAlignItems(): FlexAlignItems;
		/**
		 * Gets current value of property <code>backgroundDesign</code>.
		 * 
		 * Defines the background style of the <code>sap.m.FlexBox</code>.
		 * 
		 * Default value is <code>Transparent</code>.
		 * @return Value of property <code>backgroundDesign</code>
		 */
		getBackgroundDesign(): BackgroundDesign;
		/**
		 * Gets current value of property <code>direction</code>.
		 * 
		 * Determines the direction of the layout of child elements.
		 * 
		 * Default value is <code>Row</code>.
		 * @return Value of property <code>direction</code>
		 */
		getDirection(): FlexDirection;
		/**
		 * Gets current value of property <code>displayInline</code>.
		 * 
		 * Determines whether the <code>sap.m.FlexBox</code> is in block or inline mode.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>displayInline</code>
		 */
		getDisplayInline(): boolean;
		/**
		 * Gets current value of property <code>fitContainer</code>.
		 * 
		 * Determines whether the <code>sap.m.FlexBox</code> will be sized to completely fill its container. If the <code>sap.m.FlexBox</code> is inserted into a Page, the property 'enableScrolling' of the Page needs to be set to 'false' for the FlexBox to fit the entire viewport.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>fitContainer</code>
		 */
		getFitContainer(): boolean;
		/**
		 * Gets current value of property <code>height</code>.
		 * 
		 * The height of the <code>sap.m.FlexBox</code>. Note that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>height</code>
		 */
		getHeight(): sap.ui.core.CSSSize;
		/**
		 * Gets content of aggregation <code>items</code>.
		 * 
		 * Flex items within the flexible box layout
		 * @return 
		 */
		getItems(): sap.ui.core.Control[];
		/**
		 * Gets current value of property <code>justifyContent</code>.
		 * 
		 * Determines the layout behavior along the main axis.
		 * 
		 * Default value is <code>Start</code>.
		 * @return Value of property <code>justifyContent</code>
		 */
		getJustifyContent(): FlexJustifyContent;
		/**
		 * Gets current value of property <code>renderType</code>.
		 * 
		 * Determines whether the layout is rendered as a series of divs or as an unordered list (ul)
		 * 
		 * Default value is <code>Div</code>.
		 * @return Value of property <code>renderType</code>
		 */
		getRenderType(): FlexRendertype;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * The width of the <code>sap.m.FlexBox</code>. Note that when a percentage is given, for the width to work as expected, the width of the surrounding container must be defined.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>wrap</code>.
		 * 
		 * Determines the wrapping behavior of the flex container. This property has no effect in older browsers, e.g. Android Native 4.3 and below.
		 * 
		 * Default value is <code>NoWrap</code>.
		 * @return Value of property <code>wrap</code>
		 */
		getWrap(): FlexWrap;
		/**
		 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>items</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oItem The item whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfItem(oItem: sap.ui.core.Control): number;
		/**
		 * Inserts a item into the aggregation <code>items</code>.
		 * @param oItem the item to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the item should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the item is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertItem(oItem: sap.ui.core.Control, iIndex: number): FlexBox;
		/**
		 * Removes all the controls from the aggregation <code>items</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllItems(): sap.ui.core.Control[];
		/**
		 * Removes a item from the aggregation <code>items</code>.
		 * @param vItem The item to remove or its index or id
		 * @return The removed item or <code>null</code>
		 */
		removeItem(vItem: number|string|sap.ui.core.Control): sap.ui.core.Control;
		/**
		 * Sets a new value for property <code>alignContent</code>.
		 * 
		 * Determines the layout behavior of container lines when there's extra space along the cross-axis. This property has no effect in Internet Explorer 10.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Stretch</code>.
		 * @param sAlignContent New value for property <code>alignContent</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setAlignContent(sAlignContent: FlexAlignContent): FlexBox;
		/**
		 * Sets a new value for property <code>alignItems</code>.
		 * 
		 * Determines the layout behavior of items along the cross-axis. "Baseline" is not supported in Internet Explorer 10.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Stretch</code>.
		 * @param sAlignItems New value for property <code>alignItems</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setAlignItems(sAlignItems: FlexAlignItems): FlexBox;
		/**
		 * Sets a new value for property <code>backgroundDesign</code>.
		 * 
		 * Defines the background style of the <code>sap.m.FlexBox</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Transparent</code>.
		 * @param sBackgroundDesign New value for property <code>backgroundDesign</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setBackgroundDesign(sBackgroundDesign: BackgroundDesign): FlexBox;
		/**
		 * Sets a new value for property <code>direction</code>.
		 * 
		 * Determines the direction of the layout of child elements.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Row</code>.
		 * @param sDirection New value for property <code>direction</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDirection(sDirection: FlexDirection): FlexBox;
		/**
		 * Sets a new value for property <code>displayInline</code>.
		 * 
		 * Determines whether the <code>sap.m.FlexBox</code> is in block or inline mode.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bDisplayInline New value for property <code>displayInline</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDisplayInline(bDisplayInline: boolean): FlexBox;
		/**
		 * Sets a new value for property <code>fitContainer</code>.
		 * 
		 * Determines whether the <code>sap.m.FlexBox</code> will be sized to completely fill its container. If the <code>sap.m.FlexBox</code> is inserted into a Page, the property 'enableScrolling' of the Page needs to be set to 'false' for the FlexBox to fit the entire viewport.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bFitContainer New value for property <code>fitContainer</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setFitContainer(bFitContainer: boolean): FlexBox;
		/**
		 * Sets a new value for property <code>height</code>.
		 * 
		 * The height of the <code>sap.m.FlexBox</code>. Note that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sHeight New value for property <code>height</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHeight(sHeight: sap.ui.core.CSSSize): FlexBox;
		/**
		 * Sets a new value for property <code>justifyContent</code>.
		 * 
		 * Determines the layout behavior along the main axis.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Start</code>.
		 * @param sJustifyContent New value for property <code>justifyContent</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setJustifyContent(sJustifyContent: FlexJustifyContent): FlexBox;
		/**
		 * Sets a new value for property <code>renderType</code>.
		 * 
		 * Determines whether the layout is rendered as a series of divs or as an unordered list (ul)
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Div</code>.
		 * @param sRenderType New value for property <code>renderType</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setRenderType(sRenderType: FlexRendertype): FlexBox;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * The width of the <code>sap.m.FlexBox</code>. Note that when a percentage is given, for the width to work as expected, the width of the surrounding container must be defined.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): FlexBox;
		/**
		 * Sets a new value for property <code>wrap</code>.
		 * 
		 * Determines the wrapping behavior of the flex container. This property has no effect in older browsers, e.g. Android Native 4.3 and below.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>NoWrap</code>.
		 * @param sWrap New value for property <code>wrap</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWrap(sWrap: FlexWrap): FlexBox;
	}

	class FlexDirection {
		/**
		 * Flex items are laid out along the direction of the block axis (usually top to bottom).
		 */
		static Column: string;
		/**
		 * Flex items are laid out along the reverse direction of the block axis (usually bottom to top).
		 */
		static ColumnReverse: string;
		/**
		 * Inherits the value from its parent.
		 */
		static Inherit: string;
		/**
		 * Flex items are laid out along the direction of the inline axis (text direction).
		 */
		static Row: string;
		/**
		 * Flex items are laid out along the reverse direction of the inline axis (against the text direction).
		 */
		static RowReverse: string;
	}

	class FlexItemData extends sap.ui.core.LayoutData {
		/**
		 * Constructor for a new <code>sap.m.FlexItemData</code>.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new element, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new element(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.FlexItemDataMetadata);
		/**
		 * Constructor for a new <code>sap.m.FlexItemData</code>.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new element, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new element(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.FlexItemData with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|FlexItemDataMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>alignSelf</code>.
		 * 
		 * Determines cross-axis alignment of individual element (not currently supported in Internet Explorer)
		 * 
		 * Default value is <code>Auto</code>.
		 * @return Value of property <code>alignSelf</code>
		 */
		getAlignSelf(): FlexAlignSelf;
		/**
		 * Gets current value of property <code>backgroundDesign</code>.
		 * 
		 * Defines the background style of the flex item.
		 * 
		 * Default value is <code>Transparent</code>.
		 * @return Value of property <code>backgroundDesign</code>
		 */
		getBackgroundDesign(): BackgroundDesign;
		/**
		 * Gets current value of property <code>baseSize</code>.
		 * 
		 * The base size is the initial main size of the item for the flex algorithm. If set to "auto", this will be the computed size of the item.
		 * 
		 * Default value is <code>auto</code>.
		 * @return Value of property <code>baseSize</code>
		 */
		getBaseSize(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>growFactor</code>.
		 * 
		 * Determines the flexibility of the flex item when allocatable space is remaining.
		 * 
		 * Default value is <code>0</code>.
		 * @return Value of property <code>growFactor</code>
		 */
		getGrowFactor(): number;
		/**
		 * Gets current value of property <code>maxHeight</code>.
		 * 
		 * The maximum height of the flex item.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>maxHeight</code>
		 */
		getMaxHeight(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>maxWidth</code>.
		 * 
		 * The maximum height of the flex item.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>maxWidth</code>
		 */
		getMaxWidth(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>minHeight</code>.
		 * 
		 * The minimum height of the flex item.
		 * 
		 * Default value is <code>auto</code>.
		 * @return Value of property <code>minHeight</code>
		 */
		getMinHeight(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>minWidth</code>.
		 * 
		 * The minimum height of the flex item.
		 * 
		 * Default value is <code>auto</code>.
		 * @return Value of property <code>minWidth</code>
		 */
		getMinWidth(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>order</code>.
		 * 
		 * Determines the display order of flex items independent of their source code order.
		 * 
		 * Default value is <code>0</code>.
		 * @return Value of property <code>order</code>
		 */
		getOrder(): number;
		/**
		 * Gets current value of property <code>shrinkFactor</code>.
		 * 
		 * The shrink factor determines how much the flex item will shrink relative to the rest of the flex items in the flex container when negative free space is distributed.
		 * 
		 * Default value is <code>1</code>.
		 * @return Value of property <code>shrinkFactor</code>
		 */
		getShrinkFactor(): number;
		/**
		 * Gets current value of property <code>styleClass</code>.
		 * 
		 * The style class will be applied to the flex item and can be used for CSS selectors
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>styleClass</code>
		 */
		getStyleClass(): string;
		/**
		 * Sets a new value for property <code>alignSelf</code>.
		 * 
		 * Determines cross-axis alignment of individual element (not currently supported in Internet Explorer)
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Auto</code>.
		 * @param sAlignSelf New value for property <code>alignSelf</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setAlignSelf(sAlignSelf: FlexAlignSelf): FlexItemData;
		/**
		 * Sets a new value for property <code>backgroundDesign</code>.
		 * 
		 * Defines the background style of the flex item.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Transparent</code>.
		 * @param sBackgroundDesign New value for property <code>backgroundDesign</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setBackgroundDesign(sBackgroundDesign: BackgroundDesign): FlexItemData;
		/**
		 * Sets a new value for property <code>baseSize</code>.
		 * 
		 * The base size is the initial main size of the item for the flex algorithm. If set to "auto", this will be the computed size of the item.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>auto</code>.
		 * @param sBaseSize New value for property <code>baseSize</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setBaseSize(sBaseSize: sap.ui.core.CSSSize): FlexItemData;
		/**
		 * Sets a new value for property <code>growFactor</code>.
		 * 
		 * Determines the flexibility of the flex item when allocatable space is remaining.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>0</code>.
		 * @param fGrowFactor New value for property <code>growFactor</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setGrowFactor(fGrowFactor: number): FlexItemData;
		/**
		 * Sets a new value for property <code>maxHeight</code>.
		 * 
		 * The maximum height of the flex item.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sMaxHeight New value for property <code>maxHeight</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMaxHeight(sMaxHeight: sap.ui.core.CSSSize): FlexItemData;
		/**
		 * Sets a new value for property <code>maxWidth</code>.
		 * 
		 * The maximum height of the flex item.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sMaxWidth New value for property <code>maxWidth</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMaxWidth(sMaxWidth: sap.ui.core.CSSSize): FlexItemData;
		/**
		 * Sets a new value for property <code>minHeight</code>.
		 * 
		 * The minimum height of the flex item.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>auto</code>.
		 * @param sMinHeight New value for property <code>minHeight</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMinHeight(sMinHeight: sap.ui.core.CSSSize): FlexItemData;
		/**
		 * Sets a new value for property <code>minWidth</code>.
		 * 
		 * The minimum height of the flex item.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>auto</code>.
		 * @param sMinWidth New value for property <code>minWidth</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMinWidth(sMinWidth: sap.ui.core.CSSSize): FlexItemData;
		/**
		 * Sets a new value for property <code>order</code>.
		 * 
		 * Determines the display order of flex items independent of their source code order.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>0</code>.
		 * @param iOrder New value for property <code>order</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setOrder(iOrder: number): FlexItemData;
		/**
		 * Sets a new value for property <code>shrinkFactor</code>.
		 * 
		 * The shrink factor determines how much the flex item will shrink relative to the rest of the flex items in the flex container when negative free space is distributed.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>1</code>.
		 * @param fShrinkFactor New value for property <code>shrinkFactor</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShrinkFactor(fShrinkFactor: number): FlexItemData;
		/**
		 * Sets a new value for property <code>styleClass</code>.
		 * 
		 * The style class will be applied to the flex item and can be used for CSS selectors
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sStyleClass New value for property <code>styleClass</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setStyleClass(sStyleClass: string): FlexItemData;
	}

	class FlexJustifyContent {
		/**
		 * Flex items are packed toward the center of the line.
		 */
		static Center: string;
		/**
		 * Flex items are packed toward the end of the line.
		 */
		static End: string;
		/**
		 * Inherits the value from its parent.
		 */
		static Inherit: string;
		/**
		 * Flex items are evenly distributed in the line, with half-size spaces on either end.
		 * <b>Note:</b> This value behaves like SpaceBetween in Internet Explorer 10.
		 */
		static SpaceAround: string;
		/**
		 * Flex items are evenly distributed in the line.
		 */
		static SpaceBetween: string;
		/**
		 * Flex items are packed toward the start of the line.
		 */
		static Start: string;
	}

	class FlexRendertype {
		/**
		 * The UI5 controls are wrapped in DIV elements
		 */
		static Div: string;
		/**
		 * The UI5 controls are wrapped in LI elements, the entire Flex Box is an unordered list (UL)
		 */
		static List: string;
	}

	class FlexWrap {
		/**
		 * The flex container is single-line.
		 */
		static NoWrap: string;
		/**
		 * The flex container is multi-line.
		 */
		static Wrap: string;
		/**
		 * The flex container is multi-line with the cross-axis start and end being swapped.
		 */
		static WrapReverse: string;
	}

	class FormattedText extends sap.ui.core.Control {
		/**
		 * Constructor for a new FormattedText.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.FormattedTextMetadata);
		/**
		 * Constructor for a new FormattedText.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.FormattedText with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|FormattedTextMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>height</code>.
		 * 
		 * Optional height of the control in CSS units.
		 * @return Value of property <code>height</code>
		 */
		getHeight(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>htmlText</code>.
		 * 
		 * Text in HTML format.
		 * The following tags are supported:
		 * <ul>
		 * 	<li><code>a</code></li>
		 * 	<li><code>abbr</code></li>
		 * 	<li><code>blockquote</code></li>
		 * 	<li><code>br</code></li>
		 * 	<li><code>cite</code></li>
		 * 	<li><code>code</code></li>
		 * 	<li><code>em</code></li>
		 * 	<li><code>h1</code></li>
		 * 	<li><code>h2</code></li>
		 * 	<li><code>h3</code></li>
		 * 	<li><code>h4</code></li>
		 * 	<li><code>h5</code></li>
		 * 	<li><code>h6</code></li>
		 * 	<li><code>p</code></li>
		 * 	<li><code>pre</code></li>
		 * 	<li><code>strong</code></li>
		 * 	<li><code>span</code></li>
		 * 	<li><code>u</code></li>
		 * 	<li><code>dl</code></li>
		 * 	<li><code>dt</code></li>
		 * 	<li><code>dl</code></li>
		 * 	<li><code>ul</code></li>
		 * 	<li><code>ol</code></li>
		 * 	<li><code>li</code></li>
		 * </ul>
		 * <p><code>class, style,</code> and <code>target</code> attributes are allowed.
		 * If <code>target</code> is not set, links open in a new window by default.
		 * <p>Only safe <code>href</code> attributes can be used. See {@link jQuery.sap.validateUrl}.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>htmlText</code>
		 */
		getHtmlText(): string;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Optional width of the control in CSS units.
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Sets a new value for property <code>height</code>.
		 * 
		 * Optional height of the control in CSS units.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sHeight New value for property <code>height</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHeight(sHeight: sap.ui.core.CSSSize): FormattedText;
		/**
		 * Defines the HTML text to be displayed.
		 * @param sText HTML text as a string
		 * @return this for chaining
		 */
		setHtmlText(sText: string): FormattedText;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Optional width of the control in CSS units.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): FormattedText;
	}

	class FrameType {
		/**
		 * The Auto frame type that adjusts the size of the control to the content.
		 */
		static Auto: string;
		/**
		 * The 1x1 frame type.
		 */
		static OneByOne: string;
		/**
		 * The 2x1 frame type.
		 */
		static TwoByOne: string;
		/**
		 * The 2/3 frame type.
		 */
		static TwoThirds: string;
	}

	class GenericTile extends sap.ui.core.Control {
		/**
		 * Constructor for a new sap.m.GenericTile control.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.GenericTileMetadata);
		/**
		 * Constructor for a new sap.m.GenericTile control.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some tileContent to the aggregation <code>tileContent</code>.
		 * @param oTileContent the tileContent to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addTileContent(oTileContent: TileContent): GenericTile;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this <code>sap.m.GenericTile</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.GenericTile</code> itself.
		 * 
		 * The event is fired when the user chooses the tile.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.GenericTile</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachPress(oData: any, fnFunction: any, oListener?: any): GenericTile;
		/**
		 * Destroys all the tileContent in the aggregation <code>tileContent</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyTileContent(): GenericTile;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this <code>sap.m.GenericTile</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachPress(fnFunction: any, oListener: any): GenericTile;
		/**
		 * Creates a new subclass of class sap.m.GenericTile with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|GenericTileMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>press</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		firePress(mArguments?: any): GenericTile;
		/**
		 * Gets current value of property <code>backgroundImage</code>.
		 * 
		 * The URI of the background image.
		 * @return Value of property <code>backgroundImage</code>
		 */
		getBackgroundImage(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>failedText</code>.
		 * 
		 * The message that appears when the control is in the Failed state.
		 * @return Value of property <code>failedText</code>
		 */
		getFailedText(): string;
		/**
		 * Gets current value of property <code>frameType</code>.
		 * 
		 * The frame type: 1x1 or 2x1.
		 * 
		 * Default value is <code>library.FrameType.OneByOne</code>.
		 * @return Value of property <code>frameType</code>
		 */
		getFrameType(): FrameType;
		/**
		 * Gets current value of property <code>header</code>.
		 * 
		 * The header of the tile.
		 * @return Value of property <code>header</code>
		 */
		getHeader(): string;
		/**
		 * Gets current value of property <code>headerImage</code>.
		 * 
		 * The image to be displayed as a graphical element within the header. This can be an image or an icon from the icon font.
		 * @return Value of property <code>headerImage</code>
		 */
		getHeaderImage(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>imageDescription</code>.
		 * 
		 * Description of a header image that is used in the tooltip.
		 * @return Value of property <code>imageDescription</code>
		 */
		getImageDescription(): string;
		/**
		 * Gets current value of property <code>mode</code>.
		 * 
		 * The mode of the GenericTile.
		 * 
		 * Default value is <code>library.GenericTileMode.ContentMode</code>.
		 * @return Value of property <code>mode</code>
		 */
		getMode(): GenericTileMode;
		/**
		 * Gets current value of property <code>state</code>.
		 * 
		 * The load status.
		 * 
		 * Default value is <code>Loaded</code>.
		 * @return Value of property <code>state</code>
		 */
		getState(): LoadState;
		/**
		 * Gets current value of property <code>subheader</code>.
		 * 
		 * The subheader of the tile.
		 * @return Value of property <code>subheader</code>
		 */
		getSubheader(): string;
		/**
		 * Gets content of aggregation <code>tileContent</code>.
		 * 
		 * The switchable view that depends on the tile type.
		 * @return 
		 */
		getTileContent(): TileContent[];
		/**
		 * Checks for the provided <code>sap.m.TileContent</code> in the aggregation <code>tileContent</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oTileContent The tileContent whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfTileContent(oTileContent: TileContent): number;
		/**
		 * Inserts a tileContent into the aggregation <code>tileContent</code>.
		 * @param oTileContent the tileContent to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the tileContent should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the tileContent is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the tileContent is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertTileContent(oTileContent: TileContent, iIndex: number): GenericTile;
		/**
		 * Removes all the controls from the aggregation <code>tileContent</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllTileContent(): TileContent[];
		/**
		 * Removes a tileContent from the aggregation <code>tileContent</code>.
		 * @param vTileContent The tileContent to remove or its index or id
		 * @return The removed tileContent or <code>null</code>
		 */
		removeTileContent(vTileContent: number|string|TileContent): TileContent;
		/**
		 * Sets a new value for property <code>backgroundImage</code>.
		 * 
		 * The URI of the background image.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sBackgroundImage New value for property <code>backgroundImage</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setBackgroundImage(sBackgroundImage: sap.ui.core.URI): GenericTile;
		/**
		 * Sets a new value for property <code>failedText</code>.
		 * 
		 * The message that appears when the control is in the Failed state.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sFailedText New value for property <code>failedText</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setFailedText(sFailedText: string): GenericTile;
		/**
		 * Sets a new value for property <code>frameType</code>.
		 * 
		 * The frame type: 1x1 or 2x1.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>library.FrameType.OneByOne</code>.
		 * @param sFrameType New value for property <code>frameType</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setFrameType(sFrameType: FrameType): GenericTile;
		/**
		 * Sets a new value for property <code>header</code>.
		 * 
		 * The header of the tile.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sHeader New value for property <code>header</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHeader(sHeader: string): GenericTile;
		/**
		 * Sets a new value for property <code>headerImage</code>.
		 * 
		 * The image to be displayed as a graphical element within the header. This can be an image or an icon from the icon font.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sHeaderImage New value for property <code>headerImage</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHeaderImage(sHeaderImage: sap.ui.core.URI): GenericTile;
		/**
		 * Sets a new value for property <code>imageDescription</code>.
		 * 
		 * Description of a header image that is used in the tooltip.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sImageDescription New value for property <code>imageDescription</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setImageDescription(sImageDescription: string): GenericTile;
		/**
		 * Sets a new value for property <code>mode</code>.
		 * 
		 * The mode of the GenericTile.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>library.GenericTileMode.ContentMode</code>.
		 * @param sMode New value for property <code>mode</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMode(sMode: GenericTileMode): GenericTile;
		/**
		 * Sets a new value for property <code>state</code>.
		 * 
		 * The load status.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Loaded</code>.
		 * @param sState New value for property <code>state</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setState(sState: LoadState): GenericTile;
		/**
		 * Sets a new value for property <code>subheader</code>.
		 * 
		 * The subheader of the tile.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sSubheader New value for property <code>subheader</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setSubheader(sSubheader: string): GenericTile;
	}

	class GenericTileMode {
		/**
		 * Default mode (Two lines for the header and one line for the subtitle).
		 */
		static ContentMode: string;
		/**
		 * Header mode (Four lines for the header and one line for the subtitle).
		 */
		static HeaderMode: string;
	}

	class GroupHeaderListItem extends ListItemBase {
		/**
		 * Constructor for a new GroupHeaderListItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId Id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.GroupHeaderListItemMetadata);
		/**
		 * Constructor for a new GroupHeaderListItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId Id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.GroupHeaderListItem with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|GroupHeaderListItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.ListItemBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.ListItemBase
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ListItemBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>count</code>.
		 * 
		 * Defines the count of items in the group, but it could also be an amount which represents the sum of all amounts in the group.
		 * <b>Note:</b> Will not be displayed if not set.
		 * @return Value of property <code>count</code>
		 */
		getCount(): string;
		/**
		 * Gets current value of property <code>title</code>.
		 * 
		 * Defines the title of the group header.
		 * @return Value of property <code>title</code>
		 */
		getTitle(): string;
		/**
		 * Gets current value of property <code>titleTextDirection</code>.
		 * 
		 * Defines the title text directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @return Value of property <code>titleTextDirection</code>
		 */
		getTitleTextDirection(): sap.ui.core.TextDirection;
		/**
		 * Gets current value of property <code>upperCase</code>.
		 * 
		 * By default, the title is capitalized automatically. To disable this automation, set this property to <b>false</b>.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>upperCase</code>
		 */
		getUpperCase(): boolean;
		/**
		 * Sets a new value for property <code>count</code>.
		 * 
		 * Defines the count of items in the group, but it could also be an amount which represents the sum of all amounts in the group.
		 * <b>Note:</b> Will not be displayed if not set.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sCount New value for property <code>count</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setCount(sCount: string): GroupHeaderListItem;
		/**
		 * Sets a new value for property <code>title</code>.
		 * 
		 * Defines the title of the group header.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sTitle New value for property <code>title</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTitle(sTitle: string): GroupHeaderListItem;
		/**
		 * Sets a new value for property <code>titleTextDirection</code>.
		 * 
		 * Defines the title text directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @param sTitleTextDirection New value for property <code>titleTextDirection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTitleTextDirection(sTitleTextDirection: sap.ui.core.TextDirection): GroupHeaderListItem;
		/**
		 * Sets a new value for property <code>upperCase</code>.
		 * 
		 * By default, the title is capitalized automatically. To disable this automation, set this property to <b>false</b>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bUpperCase New value for property <code>upperCase</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setUpperCase(bUpperCase: boolean): GroupHeaderListItem;
	}

	class GrowingEnablement extends sap.ui.base.Object {
		/**
		 * Creates a new subclass of class sap.m.GrowingEnablement with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
	}

	class HBox extends FlexBox {
		/**
		 * Constructor for a new HBox.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Constructor for a new HBox.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.HBox with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.FlexBox.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.FlexBox with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.FlexBox
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|FlexBoxMetadata, FNMetaImpl?: any): any;
	}

	class HeaderLevel {
		/**
		 * Header level 1
		 */
		static H1: string;
		/**
		 * Header level 2
		 */
		static H2: string;
		/**
		 * Header level 3
		 */
		static H3: string;
		/**
		 * Header level 4
		 */
		static H4: string;
		/**
		 * Header level 5
		 */
		static H5: string;
		/**
		 * Header level 6
		 */
		static H6: string;
	}

	interface IBar {
	}

	class IBarHTMLTag {
		/**
		 * Renders as a div element.
		 */
		static Div: string;
		/**
		 * Renders as a footer element.
		 */
		static Footer: string;
		/**
		 * Renders as a header element.
		 */
		static Header: string;
	}

	class IBarInPageEnabler  {
		/**
		 * Adds the sapMBarChildClass to a control.
		 * @param oControl 
		 */
		addChildClassTo(oControl: sap.ui.core.Control);
		/**
		 * Renders the tooltip for the given control
		 * @param oRM the RenderManager that can be used for writing to the render output buffer.
		 * @param oControl an object representation of the control that should be rendered.
		 */
		renderTooltip(oRM: sap.ui.core.RenderManager, oControl: sap.ui.core.Control);
	}

	interface IconTab {
	}

	class IconTabBar extends sap.ui.core.Control {
		/**
		 * Constructor for a new IconTabBar.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.IconTabBarMetadata);
		/**
		 * Constructor for a new IconTabBar.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some content to the aggregation <code>content</code>.
		 * @param oContent the content to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addContent(oContent: sap.ui.core.Control): IconTabBar;
		/**
		 * Adds some item to the aggregation <code>items</code>.
		 * @param oItem the item to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addItem(oItem: IconTab): IconTabBar;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>expand</code> event of this <code>sap.m.IconTabBar</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.IconTabBar</code> itself.
		 * 
		 * Indicates that the tab will expand or collapse.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.IconTabBar</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachExpand(oData: any, fnFunction: any, oListener?: any): IconTabBar;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>select</code> event of this <code>sap.m.IconTabBar</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.IconTabBar</code> itself.
		 * 
		 * Fires when an item is selected.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.IconTabBar</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachSelect(oData: any, fnFunction: any, oListener?: any): IconTabBar;
		/**
		 * Forwards aggregations with the name of items to the internal list.
		 * @param sAggregationName The name for the binding
		 * @param oBindingInfo The configuration parameters for the binding
		 * @return this pointer for chaining
		 */
		bindAggregation(sAggregationName: string, oBindingInfo: any): IconTabBar;
		/**
		 * Bind an aggregation to the model.
		 * 
		 * The bound aggregation will use the given template, clone it for each item
		 * which exists in the bound list and set the appropriate binding context.
		 * This is a generic method which can be used to bind any aggregation to the
		 * model. A managed object may flag aggregations in the metamodel with
		 * bindable="bindable" to get typed bind<i>Something</i> methods for those aggregations.
		 * @note Overload from base type sap.ui.base.ManagedObject
		 * @param sName the aggregation to bind
		 * @param oBindingInfo the binding info
		 * @return reference to the instance itself
		 */
		bindAggregation(sName: string, oBindingInfo: any): sap.ui.base.ManagedObject;
		/**
		 * Destroys all the content in the aggregation <code>content</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyContent(): IconTabBar;
		/**
		 * Destroys all the items in the aggregation <code>items</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyItems(): IconTabBar;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>expand</code> event of this <code>sap.m.IconTabBar</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachExpand(fnFunction: any, oListener: any): IconTabBar;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>select</code> event of this <code>sap.m.IconTabBar</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachSelect(fnFunction: any, oListener: any): IconTabBar;
		/**
		 * Creates a new subclass of class sap.m.IconTabBar with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|IconTabBarMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>expand</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>expand</code> of type <code>boolean</code>If the tab will expand, this is true.</li>
		 * <li><code>collapse</code> of type <code>boolean</code>If the tab will collapse, this is true.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireExpand(mArguments?: any): IconTabBar;
		/**
		 * Fires event <code>select</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>item</code> of type <code>sap.m.IconTabFilter</code>The selected item</li>
		 * <li><code>key</code> of type <code>string</code>The key of the selected item</li>
		 * <li><code>selectedItem</code> of type <code>sap.m.IconTabFilter</code>The selected item</li>
		 * <li><code>selectedKey</code> of type <code>string</code>The key of the selected item</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireSelect(mArguments?: any): IconTabBar;
		/**
		 * Gets current value of property <code>applyContentPadding</code>.
		 * 
		 * Determines whether the IconTabBar content fits to the full area.
		 * The paddings are removed if it's set to false.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>applyContentPadding</code>
		 */
		getApplyContentPadding(): boolean;
		/**
		 * Gets current value of property <code>backgroundDesign</code>.
		 * 
		 * Specifies the background color of the IconTabBar.
		 * 
		 * Depending on the theme, you can change the state of
		 * the background color to "Solid", "Translucent", or "Transparent".
		 * 
		 * Default value is <code>Solid</code>.
		 * @return Value of property <code>backgroundDesign</code>
		 */
		getBackgroundDesign(): BackgroundDesign;
		/**
		 * Gets content of aggregation <code>content</code>.
		 * 
		 * Represents the contents displayed below the IconTabBar.
		 * If there are multiple contents, they are rendered after each other.
		 * The developer has to manage to display the right one or use the content aggregation
		 * inside the IconTabFilter (which will be displayed instead if it is set).
		 * @return 
		 */
		getContent(): sap.ui.core.Control[];
		/**
		 * Gets current value of property <code>expandable</code>.
		 * 
		 * Defines if the tabs are collapsible and expandable.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>expandable</code>
		 */
		getExpandable(): boolean;
		/**
		 * Gets current value of property <code>expanded</code>.
		 * 
		 * Indicates if the actual tab content is expanded or not.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>expanded</code>
		 */
		getExpanded(): boolean;
		/**
		 * Gets current value of property <code>headerMode</code>.
		 * 
		 * Specifies the header mode.
		 * <b>Note:</b> The Inline mode works only if no icons are set.
		 * 
		 * Default value is <code>Standard</code>.
		 * @return Value of property <code>headerMode</code>
		 */
		getHeaderMode(): IconTabHeaderMode;
		/**
		 * Gets content of aggregation <code>items</code>.
		 * 
		 * The items displayed in the IconTabBar.
		 * @return 
		 */
		getItems(): IconTab[];
		/**
		 * Reflector for the internal header's selectedKey property.
		 * @return The current property value
		 */
		getSelectedKey(): string;
		/**
		 * Gets current value of property <code>stretchContentHeight</code>.
		 * 
		 * Determines whether the IconTabBar height is stretched to the maximum possible height
		 * of its parent container. As a prerequisite, the height of the parent container must be
		 * defined as a fixed value.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>stretchContentHeight</code>
		 */
		getStretchContentHeight(): boolean;
		/**
		 * Gets current value of property <code>upperCase</code>.
		 * 
		 * Determines whether the text of the icon tab filter (not the count) is displayed in uppercase.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>upperCase</code>
		 */
		getUpperCase(): boolean;
		/**
		 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oContent The content whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfContent(oContent: sap.ui.core.Control): number;
		/**
		 * Checks for the provided <code>sap.m.IconTab</code> in the aggregation <code>items</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oItem The item whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfItem(oItem: IconTab): number;
		/**
		 * Inserts a content into the aggregation <code>content</code>.
		 * @param oContent the content to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the content should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the content is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertContent(oContent: sap.ui.core.Control, iIndex: number): IconTabBar;
		/**
		 * Inserts a item into the aggregation <code>items</code>.
		 * @param oItem the item to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the item should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the item is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertItem(oItem: IconTab, iIndex: number): IconTabBar;
		/**
		 * Removes all the controls from the aggregation <code>content</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllContent(): sap.ui.core.Control[];
		/**
		 * Removes all the controls from the aggregation <code>items</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllItems(): IconTab[];
		/**
		 * Removes a content from the aggregation <code>content</code>.
		 * @param vContent The content to remove or its index or id
		 * @return The removed content or <code>null</code>
		 */
		removeContent(vContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
		/**
		 * Removes a item from the aggregation <code>items</code>.
		 * @param vItem The item to remove or its index or id
		 * @return The removed item or <code>null</code>
		 */
		removeItem(vItem: number|string|IconTab): IconTab;
		/**
		 * Sets a new value for property <code>applyContentPadding</code>.
		 * 
		 * Determines whether the IconTabBar content fits to the full area.
		 * The paddings are removed if it's set to false.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bApplyContentPadding New value for property <code>applyContentPadding</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setApplyContentPadding(bApplyContentPadding: boolean): IconTabBar;
		/**
		 * Sets a new value for property <code>backgroundDesign</code>.
		 * 
		 * Specifies the background color of the IconTabBar.
		 * 
		 * Depending on the theme, you can change the state of
		 * the background color to "Solid", "Translucent", or "Transparent".
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Solid</code>.
		 * @param sBackgroundDesign New value for property <code>backgroundDesign</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setBackgroundDesign(sBackgroundDesign: BackgroundDesign): IconTabBar;
		/**
		 * Sets the tabs as collapsible and expandable without re-rendering the control.
		 * @param bExpandable new parameter value
		 * @return this pointer for chaining
		 */
		setExpandable(bExpandable: boolean): IconTabBar;
		/**
		 * Sets the tab content as expanded.
		 * @param bExpanded new parameter value
		 * @return this pointer for chaining
		 */
		setExpanded(bExpanded: boolean): IconTabBar;
		/**
		 * Sets the header mode.
		 * @param mode new parameter value
		 * @return this pointer for chaining
		 */
		setHeaderMode(mode: IconTabHeaderMode): IconTabBar;
		/**
		 * Reflector for the internal header's selectedKey property.
		 * @param sValue the new value
		 * @return this pointer for chaining
		 */
		setSelectedKey(sValue: string): IconTabBar;
		/**
		 * Sets a new value for property <code>stretchContentHeight</code>.
		 * 
		 * Determines whether the IconTabBar height is stretched to the maximum possible height
		 * of its parent container. As a prerequisite, the height of the parent container must be
		 * defined as a fixed value.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bStretchContentHeight New value for property <code>stretchContentHeight</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setStretchContentHeight(bStretchContentHeight: boolean): IconTabBar;
		/**
		 * Sets a new value for property <code>upperCase</code>.
		 * 
		 * Determines whether the text of the icon tab filter (not the count) is displayed in uppercase.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bUpperCase New value for property <code>upperCase</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setUpperCase(bUpperCase: boolean): IconTabBar;
	}

	class IconTabFilter extends sap.ui.core.Item {
		/**
		 * Constructor for a new IconTabFilter.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given.(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.IconTabFilterMetadata);
		/**
		 * Constructor for a new IconTabFilter.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given.(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some content to the aggregation <code>content</code>.
		 * @param oContent the content to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addContent(oContent: sap.ui.core.Control): IconTabFilter;
		/**
		 * Destroys all the content in the aggregation <code>content</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyContent(): IconTabFilter;
		/**
		 * Creates a new subclass of class sap.m.IconTabFilter with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|IconTabFilterMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Item with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Item
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets content of aggregation <code>content</code>.
		 * 
		 * The content displayed for this item (optional).
		 * 
		 * If this content is set, it is displayed instead of the general content inside the IconTabBar.
		 * @return 
		 */
		getContent(): sap.ui.core.Control[];
		/**
		 * Gets current value of property <code>count</code>.
		 * 
		 * Represents the "count" text, which is displayed in the tab filter.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>count</code>
		 */
		getCount(): string;
		/**
		 * Gets current value of property <code>design</code>.
		 * 
		 * Specifies whether the icon and the texts are placed vertically or horizontally.
		 * 
		 * Default value is <code>Vertical</code>.
		 * @return Value of property <code>design</code>
		 */
		getDesign(): IconTabFilterDesign;
		/**
		 * Gets current value of property <code>icon</code>.
		 * 
		 * Specifies the icon to be displayed for the tab filter.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>icon</code>
		 */
		getIcon(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>iconColor</code>.
		 * 
		 * Specifies the icon color.
		 * 
		 * If an icon font is used, the color can be chosen from the icon colors (sap.ui.core.IconColor).
		 * Possible semantic colors are: Neutral, Positive, Critical, Negative.
		 * Instead of the semantic icon color the brand color can be used, this is named Default.
		 * Semantic colors and brand colors should not be mixed up inside one IconTabBar.
		 * 
		 * Default value is <code>Default</code>.
		 * @return Value of property <code>iconColor</code>
		 */
		getIconColor(): sap.ui.core.IconColor;
		/**
		 * Gets current value of property <code>iconDensityAware</code>.
		 * 
		 * If set to true, it sends one or more requests,
		 * trying to get the density perfect version of the image if this version of
		 * the image doesn't exist on the server. Default value is set to true.
		 * 
		 * If bandwidth is key for the application, set this value to false.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>iconDensityAware</code>
		 */
		getIconDensityAware(): boolean;
		/**
		 * Gets current value of property <code>showAll</code>.
		 * 
		 * Enables special visualization for disabled filter (show all items).
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>showAll</code>
		 */
		getShowAll(): boolean;
		/**
		 * Gets current value of property <code>visible</code>.
		 * 
		 * Specifies whether the tab filter is rendered.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>visible</code>
		 */
		getVisible(): boolean;
		/**
		 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oContent The content whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfContent(oContent: sap.ui.core.Control): number;
		/**
		 * Inserts a content into the aggregation <code>content</code>.
		 * @param oContent the content to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the content should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the content is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertContent(oContent: sap.ui.core.Control, iIndex: number): IconTabFilter;
		/**
		 * Removes all the controls from the aggregation <code>content</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllContent(): sap.ui.core.Control[];
		/**
		 * Removes a content from the aggregation <code>content</code>.
		 * @param vContent The content to remove or its index or id
		 * @return The removed content or <code>null</code>
		 */
		removeContent(vContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
		/**
		 * Sets a new value for property <code>count</code>.
		 * 
		 * Represents the "count" text, which is displayed in the tab filter.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sCount New value for property <code>count</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setCount(sCount: string): IconTabFilter;
		/**
		 * Sets a new value for property <code>design</code>.
		 * 
		 * Specifies whether the icon and the texts are placed vertically or horizontally.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Vertical</code>.
		 * @param sDesign New value for property <code>design</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDesign(sDesign: IconTabFilterDesign): IconTabFilter;
		/**
		 * Sets a new value for property <code>icon</code>.
		 * 
		 * Specifies the icon to be displayed for the tab filter.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sIcon New value for property <code>icon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIcon(sIcon: sap.ui.core.URI): IconTabFilter;
		/**
		 * Sets a new value for property <code>iconColor</code>.
		 * 
		 * Specifies the icon color.
		 * 
		 * If an icon font is used, the color can be chosen from the icon colors (sap.ui.core.IconColor).
		 * Possible semantic colors are: Neutral, Positive, Critical, Negative.
		 * Instead of the semantic icon color the brand color can be used, this is named Default.
		 * Semantic colors and brand colors should not be mixed up inside one IconTabBar.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Default</code>.
		 * @param sIconColor New value for property <code>iconColor</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIconColor(sIconColor: sap.ui.core.IconColor): IconTabFilter;
		/**
		 * Sets a new value for property <code>iconDensityAware</code>.
		 * 
		 * If set to true, it sends one or more requests,
		 * trying to get the density perfect version of the image if this version of
		 * the image doesn't exist on the server. Default value is set to true.
		 * 
		 * If bandwidth is key for the application, set this value to false.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bIconDensityAware New value for property <code>iconDensityAware</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIconDensityAware(bIconDensityAware: boolean): IconTabFilter;
		/**
		 * Sets a new value for property <code>showAll</code>.
		 * 
		 * Enables special visualization for disabled filter (show all items).
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bShowAll New value for property <code>showAll</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowAll(bShowAll: boolean): IconTabFilter;
		/**
		 * Sets a new value for property <code>visible</code>.
		 * 
		 * Specifies whether the tab filter is rendered.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bVisible New value for property <code>visible</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setVisible(bVisible: boolean): IconTabFilter;
	}

	class IconTabFilterDesign {
		/**
		 * A horizontally layouted design providing more space for texts.
		 */
		static Horizontal: string;
		/**
		 * A vertically layouted design using minimum horizontal space.
		 */
		static Vertical: string;
	}

	class IconTabHeader extends sap.ui.core.Control {
		/**
		 * Constructor for a new IconTabHeader.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.IconTabHeaderMetadata);
		/**
		 * Constructor for a new IconTabHeader.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some item to the aggregation <code>items</code>.
		 * @param oItem the item to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addItem(oItem: IconTab): IconTabHeader;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>select</code> event of this <code>sap.m.IconTabHeader</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.IconTabHeader</code> itself.
		 * 
		 * Fires when an item is selected.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.IconTabHeader</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachSelect(oData: any, fnFunction: any, oListener?: any): IconTabHeader;
		/**
		 * Destroys all the items in the aggregation <code>items</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyItems(): IconTabHeader;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>select</code> event of this <code>sap.m.IconTabHeader</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachSelect(fnFunction: any, oListener: any): IconTabHeader;
		/**
		 * Creates a new subclass of class sap.m.IconTabHeader with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|IconTabHeaderMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>select</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>item</code> of type <code>sap.m.IconTabFilter</code>The selected item</li>
		 * <li><code>key</code> of type <code>string</code>The key of the selected item</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireSelect(mArguments?: any): IconTabHeader;
		/**
		 * Gets content of aggregation <code>items</code>.
		 * 
		 * The items displayed in the IconTabHeader.
		 * @return 
		 */
		getItems(): IconTab[];
		/**
		 * Gets current value of property <code>mode</code>.
		 * 
		 * Specifies the header mode.
		 * <b>Note:</b> The Inline mode works only if no icons are set.
		 * 
		 * Default value is <code>Standard</code>.
		 * @return Value of property <code>mode</code>
		 */
		getMode(): IconTabHeaderMode;
		/**
		 * Gets current value of property <code>selectedKey</code>.
		 * 
		 * Key of the selected item.
		 * 
		 * If the key has no corresponding aggregated item, no changes will apply.
		 * If duplicate keys exists the first item matching, the key is used.
		 * @return Value of property <code>selectedKey</code>
		 */
		getSelectedKey(): string;
		/**
		 * Gets current value of property <code>visible</code>.
		 * 
		 * Specifies whether the control is rendered.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>visible</code>
		 */
		getVisible(): boolean;
		/**
		 * Checks for the provided <code>sap.m.IconTab</code> in the aggregation <code>items</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oItem The item whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfItem(oItem: IconTab): number;
		/**
		 * Inserts a item into the aggregation <code>items</code>.
		 * @param oItem the item to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the item should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the item is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertItem(oItem: IconTab, iIndex: number): IconTabHeader;
		/**
		 * Removes all the controls from the aggregation <code>items</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllItems(): IconTab[];
		/**
		 * Removes a item from the aggregation <code>items</code>.
		 * @param vItem The item to remove or its index or id
		 * @return The removed item or <code>null</code>
		 */
		removeItem(vItem: number|string|IconTab): IconTab;
		/**
		 * Sets a new value for property <code>mode</code>.
		 * 
		 * Specifies the header mode.
		 * <b>Note:</b> The Inline mode works only if no icons are set.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Standard</code>.
		 * @param sMode New value for property <code>mode</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMode(sMode: IconTabHeaderMode): IconTabHeader;
		/**
		 * Sets the selected item based on key.
		 * @param sKey The key of the item to be selected
		 * @return this pointer for chaining
		 */
		setSelectedKey(sKey: string): IconTabHeader;
		/**
		 * Sets a new value for property <code>visible</code>.
		 * 
		 * Specifies whether the control is rendered.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bVisible New value for property <code>visible</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setVisible(bVisible: boolean): IconTabHeader;
		/**
		 * Sets a new value for property <code>visible</code>.
		 * 
		 * Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead of the real control
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @note Overload from base type sap.ui.core.Control
		 * @param bVisible New value for property <code>visible</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setVisible(bVisible: boolean): sap.ui.core.Control;
	}

	class IconTabHeaderMode {
	}

	class IconTabSeparator extends sap.ui.core.Element {
		/**
		 * Constructor for a new IconTabSeparator.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.IconTabSeparatorMetadata);
		/**
		 * Constructor for a new IconTabSeparator.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.IconTabSeparator with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|IconTabSeparatorMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>icon</code>.
		 * 
		 * The icon to display for this separator. If no icon is given, a separator line is used instead.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>icon</code>
		 */
		getIcon(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>iconDensityAware</code>.
		 * 
		 * If set to true, it sends one or more requests,
		 * trying to get the density perfect version of the image if this version of
		 * the image doesn't exist on the server. Default value is set to true.
		 * 
		 * If bandwidth is key for the application, set this value to false.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>iconDensityAware</code>
		 */
		getIconDensityAware(): boolean;
		/**
		 * Sets a new value for property <code>icon</code>.
		 * 
		 * The icon to display for this separator. If no icon is given, a separator line is used instead.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sIcon New value for property <code>icon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIcon(sIcon: sap.ui.core.URI): IconTabSeparator;
		/**
		 * Sets a new value for property <code>iconDensityAware</code>.
		 * 
		 * If set to true, it sends one or more requests,
		 * trying to get the density perfect version of the image if this version of
		 * the image doesn't exist on the server. Default value is set to true.
		 * 
		 * If bandwidth is key for the application, set this value to false.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bIconDensityAware New value for property <code>iconDensityAware</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIconDensityAware(bIconDensityAware: boolean): IconTabSeparator;
	}

	class Image extends sap.ui.core.Control {
		/**
		 * Constructor for a new Image.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.ImageMetadata);
		/**
		 * Constructor for a new Image.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>error</code> event of this <code>sap.m.Image</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Image</code> itself.
		 * 
		 * Event is fired when the image resource can't be loaded. If densityAware is set to true, the event is fired when none of the fallback resources can be loaded.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Image</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachError(oData: any, fnFunction: any, oListener?: any): Image;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>load</code> event of this <code>sap.m.Image</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Image</code> itself.
		 * 
		 * Event is fired when the image resource is loaded.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Image</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachLoad(oData: any, fnFunction: any, oListener?: any): Image;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this <code>sap.m.Image</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Image</code> itself.
		 * 
		 * Event is fired when the user clicks on the control.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Image</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachPress(oData: any, fnFunction: any, oListener?: any): Image;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>tap</code> event of this <code>sap.m.Image</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Image</code> itself.
		 * 
		 * Event is fired when the user clicks on the control. (This event is deprecated, use the press event instead)
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Image</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachTap(oData: any, fnFunction: any, oListener?: any): Image;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>error</code> event of this <code>sap.m.Image</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachError(fnFunction: any, oListener: any): Image;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>load</code> event of this <code>sap.m.Image</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachLoad(fnFunction: any, oListener: any): Image;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this <code>sap.m.Image</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachPress(fnFunction: any, oListener: any): Image;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>tap</code> event of this <code>sap.m.Image</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachTap(fnFunction: any, oListener: any): Image;
		/**
		 * Creates a new subclass of class sap.m.Image with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ImageMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>error</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireError(mArguments?: any): Image;
		/**
		 * Fires event <code>load</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireLoad(mArguments?: any): Image;
		/**
		 * Fires event <code>press</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		firePress(mArguments?: any): Image;
		/**
		 * Fires event <code>tap</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireTap(mArguments?: any): Image;
		/**
		 * 
		 */
		getAccessibilityInfo();
		/**
		 * This function (if available on the concrete control) provides
		 * the current accessibility state of the control.
		 * 
		 * Applications must not call this hook method directly, it is called by the framework.
		 * 
		 * Subclasses of Control should implement this hook to provide any necessary accessibility information:
		 * 
		 * <pre>
		 * MyControl.prototype.getAccessibilityInfo = function() {
		 *    return {
		 *      role: "textbox",      // String which represents the WAI-ARIA role which is implemented by the control.
		 *      type: "date input",   // String which represents the control type (Must be a translated text). Might correlate with
		 *                            // the role.
		 *      description: "value", // String which describes the most relevant control state (e.g. the inputs value). Must be a
		 *                            // translated text.
		 *                            // Note: The type and the enabled/editable state must not be handled here.
		 *      focusable: true,      // Boolean which describes whether the control can get the focus.
		 *      enabled: true,        // Boolean which describes whether the control is enabled. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      editable: true,       // Boolean which describes whether the control is editable. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      children: []          // Array of accessibility info objects of children of the given control (e.g. when the control is a layout).
		 *                            // Note: Children should only be provided when it is helpful to understand the accessibility context
		 *                            //       (e.g. a form control must not provide details of its internals (fields, labels, ...) but a
		 *                            //       layout should).
		 *    };
		 * };
		 * </pre>
		 * 
		 * Note: The returned object provides the accessibility state of the control at the point in time when this function is called.
		 * @note Overload from base type sap.ui.core.Control
		 * @return Current accessibility state of the control.
		 */
		getAccessibilityInfo(): any;
		/**
		 * Gets current value of property <code>activeSrc</code>.
		 * 
		 * The source property which is used when the image is pressed.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>activeSrc</code>
		 */
		getActiveSrc(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>alt</code>.
		 * 
		 * The alternative text that is displayed in case the Image is not available, or cannot be displayed.
		 * If the image is set to decorative this property is ignored.
		 * @return Value of property <code>alt</code>
		 */
		getAlt(): string;
		/**
		 * Gets current value of property <code>backgroundPosition</code>.
		 * 
		 * Defines the position of the image in sap.m.ImageMode.Background mode. This property is set on the output DOM element using CSS style 'background-position'. This property takes effect only when the 'mode' property is set to sap.m.ImageMode.Background.
		 * 
		 * Default value is <code>initial</code>.
		 * @return Value of property <code>backgroundPosition</code>
		 */
		getBackgroundPosition(): string;
		/**
		 * Gets current value of property <code>backgroundRepeat</code>.
		 * 
		 * Defines whether the source image is repeated when the output DOM element is bigger than the source. This property is set on the output DOM element using CSS style 'background-repeat'. This property takes effect only when the 'mode' property is set to sap.m.ImageMode.Background.
		 * 
		 * Default value is <code>no-repeat</code>.
		 * @return Value of property <code>backgroundRepeat</code>
		 */
		getBackgroundRepeat(): string;
		/**
		 * Gets current value of property <code>backgroundSize</code>.
		 * 
		 * Defines the size of the image in sap.m.ImageMode.Background mode. This property is set on the output DOM element using CSS style 'background-size'. This property takes effect only when the 'mode' property is set to sap.m.ImageMode.Background.
		 * 
		 * Default value is <code>cover</code>.
		 * @return Value of property <code>backgroundSize</code>
		 */
		getBackgroundSize(): string;
		/**
		 * Gets current value of property <code>decorative</code>.
		 * 
		 * A decorative image is included for design reasons. Accessibility tools will ignore decorative images.
		 * 
		 * Note: If the Image has an image map (useMap is set), this property will be overridden (the image will not be rendered as decorative).
		 * A decorative image has no ALT attribute, so the Alt property is ignored if the image is decorative.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>decorative</code>
		 */
		getDecorative(): boolean;
		/**
		 * Gets current value of property <code>densityAware</code>.
		 * 
		 * If this is set to false, the src image will be loaded directly without attempting to fetch the density perfect image for high density device.
		 * 
		 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
		 * 
		 * If bandwidth is the key for the application, set this value to false.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>densityAware</code>
		 */
		getDensityAware(): boolean;
		/**
		 * Gets current value of property <code>height</code>.
		 * 
		 * When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the original ratio between width/height is maintained. When 'mode' property is set to sap.m.ImageMode.Background, this property always needs to be set. Otherwise the output DOM element has a 0 size.
		 * @return Value of property <code>height</code>
		 */
		getHeight(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>mode</code>.
		 * 
		 * Defines how the src and the activeSrc is output to the Dom Element. When set to sap.m.ImageMode.Image which is the default value, the src (activeSrc) is set to the 'src' attribute of the 'img' tag. When set to sap.m.ImageMode.Background, the src (activeSrc) is set to the CSS style 'background-image' and the root DOM element is rendered as a 'span' tag instead of an 'img' tag.
		 * 
		 * Default value is <code>Image</code>.
		 * @return Value of property <code>mode</code>
		 */
		getMode(): ImageMode;
		/**
		 * Gets current value of property <code>src</code>.
		 * 
		 * Relative or absolute path to URL where the image file is stored. The path will be adapted to the density aware format according to the density of the device following the convention that [imageName]@[densityValue].[extension]
		 * @return Value of property <code>src</code>
		 */
		getSrc(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>useMap</code>.
		 * 
		 * The name of the image map that defines the clickable areas
		 * @return Value of property <code>useMap</code>
		 */
		getUseMap(): string;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the original ratio between width/height is maintained. When 'mode' property is set to sap.m.ImageMode.Background, this property always needs to be set. Otherwise the output DOM element has a 0 size.
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * This overrides the default setter of the activeSrc property in order to avoid the rerendering.
		 * @param sActiveSrc 
		 * @return <code>this</code> pointer for chaining
		 */
		setActiveSrc(sActiveSrc: sap.ui.core.URI): Image;
		/**
		 * Sets a new value for property <code>alt</code>.
		 * 
		 * The alternative text that is displayed in case the Image is not available, or cannot be displayed.
		 * If the image is set to decorative this property is ignored.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sAlt New value for property <code>alt</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setAlt(sAlt: string): Image;
		/**
		 * Sets a new value for property <code>backgroundPosition</code>.
		 * 
		 * Defines the position of the image in sap.m.ImageMode.Background mode. This property is set on the output DOM element using CSS style 'background-position'. This property takes effect only when the 'mode' property is set to sap.m.ImageMode.Background.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>initial</code>.
		 * @param sBackgroundPosition New value for property <code>backgroundPosition</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setBackgroundPosition(sBackgroundPosition: string): Image;
		/**
		 * Sets a new value for property <code>backgroundRepeat</code>.
		 * 
		 * Defines whether the source image is repeated when the output DOM element is bigger than the source. This property is set on the output DOM element using CSS style 'background-repeat'. This property takes effect only when the 'mode' property is set to sap.m.ImageMode.Background.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>no-repeat</code>.
		 * @param sBackgroundRepeat New value for property <code>backgroundRepeat</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setBackgroundRepeat(sBackgroundRepeat: string): Image;
		/**
		 * Sets a new value for property <code>backgroundSize</code>.
		 * 
		 * Defines the size of the image in sap.m.ImageMode.Background mode. This property is set on the output DOM element using CSS style 'background-size'. This property takes effect only when the 'mode' property is set to sap.m.ImageMode.Background.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>cover</code>.
		 * @param sBackgroundSize New value for property <code>backgroundSize</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setBackgroundSize(sBackgroundSize: string): Image;
		/**
		 * Sets a new value for property <code>decorative</code>.
		 * 
		 * A decorative image is included for design reasons. Accessibility tools will ignore decorative images.
		 * 
		 * Note: If the Image has an image map (useMap is set), this property will be overridden (the image will not be rendered as decorative).
		 * A decorative image has no ALT attribute, so the Alt property is ignored if the image is decorative.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bDecorative New value for property <code>decorative</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDecorative(bDecorative: boolean): Image;
		/**
		 * Sets a new value for property <code>densityAware</code>.
		 * 
		 * If this is set to false, the src image will be loaded directly without attempting to fetch the density perfect image for high density device.
		 * 
		 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
		 * 
		 * If bandwidth is the key for the application, set this value to false.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bDensityAware New value for property <code>densityAware</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDensityAware(bDensityAware: boolean): Image;
		/**
		 * Sets a new value for property <code>height</code>.
		 * 
		 * When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the original ratio between width/height is maintained. When 'mode' property is set to sap.m.ImageMode.Background, this property always needs to be set. Otherwise the output DOM element has a 0 size.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sHeight New value for property <code>height</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHeight(sHeight: sap.ui.core.CSSSize): Image;
		/**
		 * Sets a new value for property <code>mode</code>.
		 * 
		 * Defines how the src and the activeSrc is output to the Dom Element. When set to sap.m.ImageMode.Image which is the default value, the src (activeSrc) is set to the 'src' attribute of the 'img' tag. When set to sap.m.ImageMode.Background, the src (activeSrc) is set to the CSS style 'background-image' and the root DOM element is rendered as a 'span' tag instead of an 'img' tag.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Image</code>.
		 * @param sMode New value for property <code>mode</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMode(sMode: ImageMode): Image;
		/**
		 * This overrides the default setter of the src property and update the dom node.
		 * @param sSrc 
		 */
		setSrc(sSrc: sap.ui.core.URI);
		/**
		 * Sets a new value for property <code>useMap</code>.
		 * 
		 * The name of the image map that defines the clickable areas
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sUseMap New value for property <code>useMap</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setUseMap(sUseMap: string): Image;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the original ratio between width/height is maintained. When 'mode' property is set to sap.m.ImageMode.Background, this property always needs to be set. Otherwise the output DOM element has a 0 size.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): Image;
	}

	class ImageContent extends sap.ui.core.Control {
		/**
		 * Constructor for a new sap.m.ImageContent control.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.ImageContentMetadata);
		/**
		 * Constructor for a new sap.m.ImageContent control.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this <code>sap.m.ImageContent</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.ImageContent</code> itself.
		 * 
		 * The event is fired when the user chooses the image content.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.ImageContent</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachPress(oData: any, fnFunction: any, oListener?: any): ImageContent;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this <code>sap.m.ImageContent</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachPress(fnFunction: any, oListener: any): ImageContent;
		/**
		 * Creates a new subclass of class sap.m.ImageContent with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ImageContentMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>press</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		firePress(mArguments?: any): ImageContent;
		/**
		 * Gets current value of property <code>description</code>.
		 * 
		 * Description of image. This text is used to provide ScreenReader information.
		 * @return Value of property <code>description</code>
		 */
		getDescription(): string;
		/**
		 * Gets current value of property <code>src</code>.
		 * 
		 * The image to be displayed as a graphical element within the imageContent. This can be an image or an icon from the icon font.
		 * @return Value of property <code>src</code>
		 */
		getSrc(): sap.ui.core.URI;
		/**
		 * Sets a new value for property <code>description</code>.
		 * 
		 * Description of image. This text is used to provide ScreenReader information.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sDescription New value for property <code>description</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDescription(sDescription: string): ImageContent;
		/**
		 * Sets a new value for property <code>src</code>.
		 * 
		 * The image to be displayed as a graphical element within the imageContent. This can be an image or an icon from the icon font.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sSrc New value for property <code>src</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setSrc(sSrc: sap.ui.core.URI): ImageContent;
	}

	class ImageMode {
		/**
		 * The image is rendered with 'span' tag and the 'src' property is set to the 'background-image' CSS style on the output DOM element
		 */
		static Background: string;
		/**
		 * The image is rendered with 'img' tag and the 'src' property is set to the src attribute on the output DOM element.
		 */
		static Image: string;
	}

	class Input extends InputBase {
		/**
		 * Constructor for a new Input.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.InputMetadata);
		/**
		 * Constructor for a new Input.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some suggestionColumn to the aggregation <code>suggestionColumns</code>.
		 * @param oSuggestionColumn the suggestionColumn to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addSuggestionColumn(oSuggestionColumn: Column): Input;
		/**
		 * Adds some suggestionItem to the aggregation <code>suggestionItems</code>.
		 * @param oSuggestionItem the suggestionItem to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addSuggestionItem(oSuggestionItem: sap.ui.core.Item): Input;
		/**
		 * Adds some suggestionRow to the aggregation <code>suggestionRows</code>.
		 * @param oSuggestionRow the suggestionRow to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addSuggestionRow(oSuggestionRow: ColumnListItem): Input;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>liveChange</code> event of this <code>sap.m.Input</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Input</code> itself.
		 * 
		 * This event is fired when the value of the input is changed - e.g. at each keypress
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Input</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachLiveChange(oData: any, fnFunction: any, oListener?: any): Input;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>submit</code> event of this <code>sap.m.Input</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Input</code> itself.
		 * 
		 * This event is fired when user presses the <code>Enter</code> key on the input.
		 * 
		 * <b>Note:</b>
		 * The event is fired independent of whether there was a change before or not. If a change was performed the event is fired after the change event.
		 * The event is also fired when an item of the select list is selected via <code>Enter</code>.
		 * The event is only fired on an input which allows text input (<code>editable</code>, <code>enabled</code> and not <code>valueHelpOnly</code>).
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Input</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachSubmit(oData: any, fnFunction: any, oListener?: any): Input;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>suggest</code> event of this <code>sap.m.Input</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Input</code> itself.
		 * 
		 * This event is fired when user types in the input and showSuggestion is set to true. Changing the suggestItems aggregation will show the suggestions within a popup.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Input</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachSuggest(oData: any, fnFunction: any, oListener?: any): Input;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>suggestionItemSelected</code> event of this <code>sap.m.Input</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Input</code> itself.
		 * 
		 * This event is fired when suggestionItem shown in suggestion popup are selected. This event is only fired when showSuggestion is set to true and there are suggestionItems shown in the suggestion popup.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Input</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachSuggestionItemSelected(oData: any, fnFunction: any, oListener?: any): Input;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>valueHelpRequest</code> event of this <code>sap.m.Input</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Input</code> itself.
		 * 
		 * When the value help indicator is clicked, this event will be fired.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Input</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachValueHelpRequest(oData: any, fnFunction: any, oListener?: any): Input;
		/**
		 * Forwards aggregations with the name of items or columns to the internal table.
		 * @param sAggregationName the name for the binding
		 * @param oBindingInfo the configuration parameters for the binding
		 * @return this pointer for chaining
		 */
		bindAggregation(sAggregationName: string, oBindingInfo: any): Input;
		/**
		 * Bind an aggregation to the model.
		 * 
		 * The bound aggregation will use the given template, clone it for each item
		 * which exists in the bound list and set the appropriate binding context.
		 * This is a generic method which can be used to bind any aggregation to the
		 * model. A managed object may flag aggregations in the metamodel with
		 * bindable="bindable" to get typed bind<i>Something</i> methods for those aggregations.
		 * @note Overload from base type sap.ui.base.ManagedObject
		 * @param sName the aggregation to bind
		 * @param oBindingInfo the binding info
		 * @return reference to the instance itself
		 */
		bindAggregation(sName: string, oBindingInfo: any): sap.ui.base.ManagedObject;
		/**
		 * Binds aggregation <code>suggestionColumns</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindSuggestionColumns(oBindingInfo: any): Input;
		/**
		 * Binds aggregation <code>suggestionRows</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindSuggestionRows(oBindingInfo: any): Input;
		/**
		 * Destroys all the suggestionColumns in the aggregation <code>suggestionColumns</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroySuggestionColumns(): Input;
		/**
		 * Destroys all the suggestionItems in the aggregation <code>suggestionItems</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroySuggestionItems(): Input;
		/**
		 * Destroys all the suggestionRows in the aggregation <code>suggestionRows</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroySuggestionRows(): Input;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>liveChange</code> event of this <code>sap.m.Input</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachLiveChange(fnFunction: any, oListener: any): Input;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>submit</code> event of this <code>sap.m.Input</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachSubmit(fnFunction: any, oListener: any): Input;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>suggest</code> event of this <code>sap.m.Input</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachSuggest(fnFunction: any, oListener: any): Input;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>suggestionItemSelected</code> event of this <code>sap.m.Input</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachSuggestionItemSelected(fnFunction: any, oListener: any): Input;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>valueHelpRequest</code> event of this <code>sap.m.Input</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachValueHelpRequest(fnFunction: any, oListener: any): Input;
		/**
		 * Creates a new subclass of class sap.m.Input with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.InputBase.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|InputMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.InputBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.InputBase
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|InputBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>liveChange</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>value</code> of type <code>string</code>The new value of the input.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireLiveChange(mArguments?: any): Input;
		/**
		 * Fires event <code>submit</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>value</code> of type <code>string</code>The new value of the input.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireSubmit(mArguments?: any): Input;
		/**
		 * Fires event <code>suggest</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>suggestValue</code> of type <code>string</code>The current value which has been typed in the input.</li>
		 * <li><code>suggestionColumns</code> of type <code>sap.m.ListBase</code>The suggestion list is passed to this event for convenience. If you use list-based or tabular suggestions, fill the suggestionList with the items you want to suggest. Otherwise, directly add the suggestions to the "suggestionItems" aggregation of the input control.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireSuggest(mArguments?: any): Input;
		/**
		 * Fires event <code>suggestionItemSelected</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>selectedItem</code> of type <code>sap.ui.core.Item</code>This is the item selected in the suggestion popup for one and two-value suggestions. For tabular suggestions, this value will not be set.</li>
		 * <li><code>selectedRow</code> of type <code>sap.m.ColumnListItem</code>This is the row selected in the tabular suggestion popup represented as a ColumnListItem. For one and two-value suggestions, this value will not be set.
		 * 
		 * Note: The row result function to select a result value for the string is already executed at this time. To pick different value for the input field or to do follow up steps after the item has been selected.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireSuggestionItemSelected(mArguments?: any): Input;
		/**
		 * Fires event <code>valueHelpRequest</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>fromSuggestions</code> of type <code>boolean</code>The event parameter is set to true, when the button at the end of the suggestion table is clicked, otherwise false. It can be used to determine whether the "value help" trigger or the "show all items" trigger has been pressed.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireValueHelpRequest(mArguments?: any): Input;
		/**
		 * 
		 */
		getAccessibilityInfo();
		/**
		 * This function (if available on the concrete control) provides
		 * the current accessibility state of the control.
		 * 
		 * Applications must not call this hook method directly, it is called by the framework.
		 * 
		 * Subclasses of Control should implement this hook to provide any necessary accessibility information:
		 * 
		 * <pre>
		 * MyControl.prototype.getAccessibilityInfo = function() {
		 *    return {
		 *      role: "textbox",      // String which represents the WAI-ARIA role which is implemented by the control.
		 *      type: "date input",   // String which represents the control type (Must be a translated text). Might correlate with
		 *                            // the role.
		 *      description: "value", // String which describes the most relevant control state (e.g. the inputs value). Must be a
		 *                            // translated text.
		 *                            // Note: The type and the enabled/editable state must not be handled here.
		 *      focusable: true,      // Boolean which describes whether the control can get the focus.
		 *      enabled: true,        // Boolean which describes whether the control is enabled. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      editable: true,       // Boolean which describes whether the control is editable. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      children: []          // Array of accessibility info objects of children of the given control (e.g. when the control is a layout).
		 *                            // Note: Children should only be provided when it is helpful to understand the accessibility context
		 *                            //       (e.g. a form control must not provide details of its internals (fields, labels, ...) but a
		 *                            //       layout should).
		 *    };
		 * };
		 * </pre>
		 * 
		 * Note: The returned object provides the accessibility state of the control at the point in time when this function is called.
		 * @note Overload from base type sap.ui.core.Control
		 * @return Current accessibility state of the control.
		 */
		getAccessibilityInfo(): any;
		/**
		 * Gets current value of property <code>description</code>.
		 * 
		 * The description is a text after the input field, e.g. units of measurement, currencies.
		 * @return Value of property <code>description</code>
		 */
		getDescription(): string;
		/**
		 * Gets current value of property <code>fieldWidth</code>.
		 * 
		 * This property only takes effect if the description property is set. It controls the distribution of space between the input field and the description text. The default value is 50% leaving the other 50% for the description.
		 * 
		 * Default value is <code>50%</code>.
		 * @return Value of property <code>fieldWidth</code>
		 */
		getFieldWidth(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>filterSuggests</code>.
		 * 
		 * Defines whether to filter the provided suggestions before showing them to the user.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>filterSuggests</code>
		 */
		getFilterSuggests(): boolean;
		/**
		 * Gets current value of property <code>maxLength</code>.
		 * 
		 * Maximum number of characters. Value '0' means the feature is switched off.
		 * This parameter is not compatible with the input type <code>sap.m.InputType.Number</code>.
		 * If the input type is set to <code>Number</code>, the <code>maxLength</code> value is ignored.
		 * 
		 * Default value is <code>0</code>.
		 * @return Value of property <code>maxLength</code>
		 */
		getMaxLength(): number;
		/**
		 * Gets current value of property <code>maxSuggestionWidth</code>.
		 * 
		 * If set, the value of this parameter will control the horizontal size of the suggestion list to display more data. This allows suggestion lists to be wider than the input field if there is enough space available. By default, the suggestion list is always as wide as the input field.
		 * Note: The value will be ignored if the actual width of the input field is larger than the specified parameter value.
		 * @return Value of property <code>maxSuggestionWidth</code>
		 */
		getMaxSuggestionWidth(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>showSuggestion</code>.
		 * 
		 * If this is set to true, suggest event is fired when user types in the input. Changing the suggestItems aggregation in suggest event listener will show suggestions within a popup. When runs on phone, input will first open a dialog where the input and suggestions are shown. When runs on a tablet, the suggestions are shown in a popup next to the input.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>showSuggestion</code>
		 */
		getShowSuggestion(): boolean;
		/**
		 * Gets current value of property <code>showTableSuggestionValueHelp</code>.
		 * 
		 * For tabular suggestions, this flag will show/hide the button at the end of the suggestion table that triggers the event "valueHelpRequest" when pressed. The default value is true.
		 * 
		 * NOTE: If suggestions are not tabular or no suggestions are used, the button will not be displayed and this flag is without effect.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>showTableSuggestionValueHelp</code>
		 */
		getShowTableSuggestionValueHelp(): boolean;
		/**
		 * Gets current value of property <code>showValueHelp</code>.
		 * 
		 * If set to true, a value help indicator will be displayed inside the control. When clicked the event "valueHelpRequest" will be fired.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>showValueHelp</code>
		 */
		getShowValueHelp(): boolean;
		/**
		 * Getter for property <code>showValueStateMessage</code>.
		 * Whether the value state message should be shown. This property is already available for sap.m.Input since 1.16.0.
		 * 
		 * Default value is <code>true</code>
		 * @return the value of property <code>showValueStateMessage</code>
		 */
		getShowValueStateMessage(): boolean;
		/**
		 * Gets current value of property <code>startSuggestion</code>.
		 * 
		 * Minimum length of the entered text in input before suggest event is fired. The default value is 1 which means the suggest event is fired after user types in input. When it's set to 0, suggest event is fired when input with no text gets focus.
		 * 
		 * Default value is <code>1</code>.
		 * @return Value of property <code>startSuggestion</code>
		 */
		getStartSuggestion(): number;
		/**
		 * Gets content of aggregation <code>suggestionColumns</code>.
		 * 
		 * The suggestionColumns and suggestionRows are for tabular input suggestions. This aggregation allows for binding the table columns; for more details see the aggregation "suggestionRows".
		 * @return 
		 */
		getSuggestionColumns(): Column[];
		/**
		 * Gets content of aggregation <code>suggestionItems</code>.
		 * 
		 * SuggestItems are the items which will be shown in the suggestion popup. Changing this aggregation (by calling addSuggestionItem, insertSuggestionItem, removeSuggestionItem, removeAllSuggestionItems, destroySuggestionItems) after input is rendered will open/close the suggestion popup. o display suggestions with two text values, it is also possible to add sap.ui.core/ListItems as SuggestionItems (since 1.21.1). For the selected ListItem, only the first value is returned to the input field.
		 * @return 
		 */
		getSuggestionItems(): sap.ui.core.Item[];
		/**
		 * Gets content of aggregation <code>suggestionRows</code>.
		 * 
		 * The suggestionColumns and suggestionRows are for tabular input suggestions. This aggregation allows for binding the table cells.
		 * The items of this aggregation are to be bound directly or to set in the suggest event method.
		 * Note: If this aggregation is filled, the aggregation suggestionItems will be ignored.
		 * @return 
		 */
		getSuggestionRows(): ColumnListItem[];
		/**
		 * Gets current value of property <code>type</code>.
		 * 
		 * HTML type of the internal <code>input</code> tag (e.g. Text, Number, Email, Phone).
		 * The particular effect of this property differs depending on the browser and the current language settings,
		 * especially for the type Number.<br>
		 * This parameter is intended to be used with touch devices that use different soft keyboard layouts depending on the given input type.<br>
		 * Only the default value <code>sap.m.InputType.Text</code> may be used in combination with data model formats.
		 * <code>sap.ui.model</code> defines extended formats that are mostly incompatible with normal HTML
		 * representations for numbers and dates.
		 * 
		 * Default value is <code>Text</code>.
		 * @return Value of property <code>type</code>
		 */
		getType(): InputType;
		/**
		 * Gets current value of property <code>valueHelpOnly</code>.
		 * 
		 * If set to true, direct text input is disabled and the control will trigger the event "valueHelpRequest" for all user interactions. The properties "showValueHelp", "editable", and "enabled" must be set to true, otherwise the property will have no effect
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>valueHelpOnly</code>
		 */
		getValueHelpOnly(): boolean;
		/**
		 * Gets current value of property <code>valueLiveUpdate</code>.
		 * 
		 * Indicates when the value gets updated with the user changes: At each keystroke (true) or first when the user presses enter or tabs out (false).
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>valueLiveUpdate</code>
		 */
		getValueLiveUpdate(): boolean;
		/**
		 * Getter for property <code>valueStateText</code>.
		 * The text which is shown in the value state message popup. If not specfied a default text is shown. This property is already available for sap.m.Input since 1.16.0.
		 * 
		 * Default value is empty/<code>undefined</code>
		 * @return the value of property <code>valueStateText</code>
		 */
		getValueStateText(): string;
		/**
		 * Returns the width of the input.
		 * @return The current width or 100% as default
		 */
		getWidth(): string;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Defines the width of the control.
		 * @note Overload from base type sap.m.InputBase
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Checks for the provided <code>sap.m.Column</code> in the aggregation <code>suggestionColumns</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oSuggestionColumn The suggestionColumn whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfSuggestionColumn(oSuggestionColumn: Column): number;
		/**
		 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation <code>suggestionItems</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oSuggestionItem The suggestionItem whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfSuggestionItem(oSuggestionItem: sap.ui.core.Item): number;
		/**
		 * Checks for the provided <code>sap.m.ColumnListItem</code> in the aggregation <code>suggestionRows</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oSuggestionRow The suggestionRow whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfSuggestionRow(oSuggestionRow: ColumnListItem): number;
		/**
		 * Inserts a suggestionColumn into the aggregation <code>suggestionColumns</code>.
		 * @param oSuggestionColumn the suggestionColumn to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the suggestionColumn should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the suggestionColumn is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the suggestionColumn is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertSuggestionColumn(oSuggestionColumn: Column, iIndex: number): Input;
		/**
		 * Inserts a suggestionItem into the aggregation <code>suggestionItems</code>.
		 * @param oSuggestionItem the suggestionItem to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the suggestionItem should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the suggestionItem is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the suggestionItem is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertSuggestionItem(oSuggestionItem: sap.ui.core.Item, iIndex: number): Input;
		/**
		 * Inserts a suggestionRow into the aggregation <code>suggestionRows</code>.
		 * @param oSuggestionRow the suggestionRow to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the suggestionRow should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the suggestionRow is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the suggestionRow is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertSuggestionRow(oSuggestionRow: ColumnListItem, iIndex: number): Input;
		/**
		 * Fire valueHelpRequest event on tap
		 * @param oEvent 
		 */
		ontap(oEvent: jQuery.Event);
		/**
		 * Removes all the controls from the aggregation <code>suggestionColumns</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllSuggestionColumns(): Column[];
		/**
		 * Removes all the controls from the aggregation <code>suggestionItems</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllSuggestionItems(): sap.ui.core.Item[];
		/**
		 * Removes all the controls from the aggregation <code>suggestionRows</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllSuggestionRows(): ColumnListItem[];
		/**
		 * Removes a suggestionColumn from the aggregation <code>suggestionColumns</code>.
		 * @param vSuggestionColumn The suggestionColumn to remove or its index or id
		 * @return The removed suggestionColumn or <code>null</code>
		 */
		removeSuggestionColumn(vSuggestionColumn: number|string|Column): Column;
		/**
		 * Removes a suggestionItem from the aggregation <code>suggestionItems</code>.
		 * @param vSuggestionItem The suggestionItem to remove or its index or id
		 * @return The removed suggestionItem or <code>null</code>
		 */
		removeSuggestionItem(vSuggestionItem: number|string|sap.ui.core.Item): sap.ui.core.Item;
		/**
		 * Removes a suggestionRow from the aggregation <code>suggestionRows</code>.
		 * @param vSuggestionRow The suggestionRow to remove or its index or id
		 * @return The removed suggestionRow or <code>null</code>
		 */
		removeSuggestionRow(vSuggestionRow: number|string|ColumnListItem): ColumnListItem;
		/**
		 * Sets a new value for property <code>description</code>.
		 * 
		 * The description is a text after the input field, e.g. units of measurement, currencies.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sDescription New value for property <code>description</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDescription(sDescription: string): Input;
		/**
		 * Sets a new value for property <code>fieldWidth</code>.
		 * 
		 * This property only takes effect if the description property is set. It controls the distribution of space between the input field and the description text. The default value is 50% leaving the other 50% for the description.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>50%</code>.
		 * @param sFieldWidth New value for property <code>fieldWidth</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setFieldWidth(sFieldWidth: sap.ui.core.CSSSize): Input;
		/**
		 * Sets a custom filter function for suggestions. The default is to check whether the first item text begins with the typed value. For one and two-value suggestions this callback function will operate on sap.ui.core.Item types, for tabular suggestions the function will operate on sap.m.ColumnListItem types.
		 * @param fnFilter The filter function is called when displaying suggestion items and has two input parameters: the first one is the string that is currently typed in the input field and the second one is the item that is being filtered. Returning true will add this item to the popup, returning false will not display it.
		 * @return this pointer for chaining
		 */
		setFilterFunction(fnFilter: any): Input;
		/**
		 * Sets a new value for property <code>filterSuggests</code>.
		 * 
		 * Defines whether to filter the provided suggestions before showing them to the user.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bFilterSuggests New value for property <code>filterSuggests</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setFilterSuggests(bFilterSuggests: boolean): Input;
		/**
		 * Sets a new value for property <code>maxLength</code>.
		 * 
		 * Maximum number of characters. Value '0' means the feature is switched off.
		 * This parameter is not compatible with the input type <code>sap.m.InputType.Number</code>.
		 * If the input type is set to <code>Number</code>, the <code>maxLength</code> value is ignored.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>0</code>.
		 * @param iMaxLength New value for property <code>maxLength</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMaxLength(iMaxLength: number): Input;
		/**
		 * Sets a new value for property <code>maxSuggestionWidth</code>.
		 * 
		 * If set, the value of this parameter will control the horizontal size of the suggestion list to display more data. This allows suggestion lists to be wider than the input field if there is enough space available. By default, the suggestion list is always as wide as the input field.
		 * Note: The value will be ignored if the actual width of the input field is larger than the specified parameter value.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sMaxSuggestionWidth New value for property <code>maxSuggestionWidth</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMaxSuggestionWidth(sMaxSuggestionWidth: sap.ui.core.CSSSize): Input;
		/**
		 * Sets a custom result filter function for tabular suggestions to select the text that is passed to the input field. Default is to check whether the first cell with a "text" property begins with the typed value. For one value and two-value suggestions this callback function is not called.
		 * @param fnFilter The result function is called with one parameter: the sap.m.ColumnListItem that is selected. The function must return a result string that will be displayed as the input field's value.
		 * @return this pointer for chaining
		 */
		setRowResultFunction(fnFilter: any): Input;
		/**
		 * Sets a new value for property <code>showSuggestion</code>.
		 * 
		 * If this is set to true, suggest event is fired when user types in the input. Changing the suggestItems aggregation in suggest event listener will show suggestions within a popup. When runs on phone, input will first open a dialog where the input and suggestions are shown. When runs on a tablet, the suggestions are shown in a popup next to the input.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bShowSuggestion New value for property <code>showSuggestion</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowSuggestion(bShowSuggestion: boolean): Input;
		/**
		 * Sets a new value for property <code>showTableSuggestionValueHelp</code>.
		 * 
		 * For tabular suggestions, this flag will show/hide the button at the end of the suggestion table that triggers the event "valueHelpRequest" when pressed. The default value is true.
		 * 
		 * NOTE: If suggestions are not tabular or no suggestions are used, the button will not be displayed and this flag is without effect.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bShowTableSuggestionValueHelp New value for property <code>showTableSuggestionValueHelp</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowTableSuggestionValueHelp(bShowTableSuggestionValueHelp: boolean): Input;
		/**
		 * Sets a new value for property <code>showValueHelp</code>.
		 * 
		 * If set to true, a value help indicator will be displayed inside the control. When clicked the event "valueHelpRequest" will be fired.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bShowValueHelp New value for property <code>showValueHelp</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowValueHelp(bShowValueHelp: boolean): Input;
		/**
		 * Setter for property <code>showValueStateMessage</code>.
		 * 
		 * Default value is <code>true</code>
		 * @param bShowValueStateMessage new value for property <code>showValueStateMessage</code>
		 * @return <code>this</code> to allow method chaining
		 */
		setShowValueStateMessage(bShowValueStateMessage: boolean): InputBase;
		/**
		 * Sets a new value for property <code>startSuggestion</code>.
		 * 
		 * Minimum length of the entered text in input before suggest event is fired. The default value is 1 which means the suggest event is fired after user types in input. When it's set to 0, suggest event is fired when input with no text gets focus.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>1</code>.
		 * @param iStartSuggestion New value for property <code>startSuggestion</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setStartSuggestion(iStartSuggestion: number): Input;
		/**
		 * Sets a new value for property <code>type</code>.
		 * 
		 * HTML type of the internal <code>input</code> tag (e.g. Text, Number, Email, Phone).
		 * The particular effect of this property differs depending on the browser and the current language settings,
		 * especially for the type Number.<br>
		 * This parameter is intended to be used with touch devices that use different soft keyboard layouts depending on the given input type.<br>
		 * Only the default value <code>sap.m.InputType.Text</code> may be used in combination with data model formats.
		 * <code>sap.ui.model</code> defines extended formats that are mostly incompatible with normal HTML
		 * representations for numbers and dates.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Text</code>.
		 * @param sType New value for property <code>type</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setType(sType: InputType): Input;
		/**
		 * Setter for property <code>value</code>.
		 * 
		 * Default value is empty/<code>undefined</code>.
		 * @param sValue New value for property <code>value</code>.
		 * @return <code>this</code> to allow method chaining.
		 */
		setValue(sValue: string): Input;
		/**
		 * Setter for property <code>value</code>.
		 * 
		 * Default value is empty/<code>undefined</code>.
		 * @note Overload from base type sap.m.InputBase
		 * @param sValue New value for property <code>value</code>.
		 * @return <code>this</code> to allow method chaining.
		 */
		setValue(sValue: string): InputBase;
		/**
		 * Sets a new value for property <code>valueHelpOnly</code>.
		 * 
		 * If set to true, direct text input is disabled and the control will trigger the event "valueHelpRequest" for all user interactions. The properties "showValueHelp", "editable", and "enabled" must be set to true, otherwise the property will have no effect
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bValueHelpOnly New value for property <code>valueHelpOnly</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setValueHelpOnly(bValueHelpOnly: boolean): Input;
		/**
		 * Sets a new value for property <code>valueLiveUpdate</code>.
		 * 
		 * Indicates when the value gets updated with the user changes: At each keystroke (true) or first when the user presses enter or tabs out (false).
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bValueLiveUpdate New value for property <code>valueLiveUpdate</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setValueLiveUpdate(bValueLiveUpdate: boolean): Input;
		/**
		 * Setter for property <code>valueStateText</code>.
		 * 
		 * Default value is empty/<code>undefined</code>
		 * @param sValueStateText new value for property <code>valueStateText</code>
		 * @return <code>this</code> to allow method chaining
		 */
		setValueStateText(sValueStateText: string): InputBase;
		/**
		 * Setter for property <code>valueStateText</code>.
		 * 
		 * Default value is empty/<code>undefined</code>.
		 * @note Overload from base type sap.m.InputBase
		 * @param sText New value for property <code>valueStateText</code>.
		 * @return <code>this</code> to allow method chaining
		 */
		setValueStateText(sText: string): InputBase;
		/**
		 * Defines the width of the input. Default value is 100%
		 * @param sWidth 
		 */
		setWidth(sWidth: string);
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Defines the width of the control.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @note Overload from base type sap.m.InputBase
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): InputBase;
		/**
		 * Unbinds aggregation <code>suggestionColumns</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindSuggestionColumns(): Input;
		/**
		 * Unbinds aggregation <code>suggestionRows</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindSuggestionRows(): Input;
	}

	class InputBase extends sap.ui.core.Control {
		/**
		 * Constructor for a new <code>sap.m.InputBase</code>.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.InputBaseMetadata);
		/**
		 * Constructor for a new <code>sap.m.InputBase</code>.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Use labels as placeholder configuration.
		 * It can be necessary for the subclasses to overwrite this when
		 * native placeholder usage causes undesired input events or when
		 * placeholder attribute is not supported for the specified type.
		 * https://html.spec.whatwg.org/multipage/forms.html#input-type-attr-summary
		 */
		bShowLabelAsPlaceholder: any;
		/**
		 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): InputBase;
		/**
		 * Applies the focus info.
		 * To be overwritten by subclasses.
		 * @param oFocusInfo 
		 */
		applyFocusInfo(oFocusInfo: any);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>change</code> event of this <code>sap.m.InputBase</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.InputBase</code> itself.
		 * 
		 * Is fired when the text in the input field has changed and the focus leaves the input field or the enter key is pressed.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.InputBase</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachChange(oData: any, fnFunction: any, oListener?: any): InputBase;
		/**
		 * Binds property <code>value</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindValue(oBindingInfo: any): InputBase;
		/**
		 * Close value state message popup.
		 */
		closeValueStateMessage();
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>change</code> event of this <code>sap.m.InputBase</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachChange(fnFunction: any, oListener: any): InputBase;
		/**
		 * Creates a new subclass of class sap.m.InputBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|InputBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>change</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>value</code> of type <code>string</code>The new <code>value</code> of the <code>control</code>.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireChange(mArguments?: any): InputBase;
		/**
		 * Fires the change event for the listeners
		 * @param sValue value of the input.
		 * @param oParams extra event parameters.(optional)
		 */
		fireChangeEvent(sValue: string, oParams?: any);
		/**
		 * 
		 */
		getAccessibilityInfo();
		/**
		 * This function (if available on the concrete control) provides
		 * the current accessibility state of the control.
		 * 
		 * Applications must not call this hook method directly, it is called by the framework.
		 * 
		 * Subclasses of Control should implement this hook to provide any necessary accessibility information:
		 * 
		 * <pre>
		 * MyControl.prototype.getAccessibilityInfo = function() {
		 *    return {
		 *      role: "textbox",      // String which represents the WAI-ARIA role which is implemented by the control.
		 *      type: "date input",   // String which represents the control type (Must be a translated text). Might correlate with
		 *                            // the role.
		 *      description: "value", // String which describes the most relevant control state (e.g. the inputs value). Must be a
		 *                            // translated text.
		 *                            // Note: The type and the enabled/editable state must not be handled here.
		 *      focusable: true,      // Boolean which describes whether the control can get the focus.
		 *      enabled: true,        // Boolean which describes whether the control is enabled. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      editable: true,       // Boolean which describes whether the control is editable. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      children: []          // Array of accessibility info objects of children of the given control (e.g. when the control is a layout).
		 *                            // Note: Children should only be provided when it is helpful to understand the accessibility context
		 *                            //       (e.g. a form control must not provide details of its internals (fields, labels, ...) but a
		 *                            //       layout should).
		 *    };
		 * };
		 * </pre>
		 * 
		 * Note: The returned object provides the accessibility state of the control at the point in time when this function is called.
		 * @note Overload from base type sap.ui.core.Control
		 * @return Current accessibility state of the control.
		 */
		getAccessibilityInfo(): any;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
		 * @return 
		 */
		getAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Gets the reference element which the message popup should dock to.
		 * @return DOM element which the message popup should dock to
		 */
		getDomRefForValueStateMessage(): any;
		/**
		 * Gets current value of property <code>editable</code>.
		 * 
		 * Defines whether the control can be modified by the user or not.
		 * <b>Note:</b> A user can tab to non-editable control, highlight it, and copy the text from it.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>editable</code>
		 */
		getEditable(): boolean;
		/**
		 * Gets current value of property <code>enabled</code>.
		 * 
		 * Indicates whether the user can interact with the control or not.
		 * <b>Note:</b> Disabled controls cannot be focused and they are out of the tab-chain.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>enabled</code>
		 */
		getEnabled(): boolean;
		/**
		 * Returns an object representing the serialized focus information.
		 * To be overwritten by subclasses.
		 * @return An object representing the serialized focus information.
		 */
		getFocusInfo(): any;
		/**
		 * Gets current value of property <code>name</code>.
		 * 
		 * Defines the name of the control for the purposes of form submission.
		 * @return Value of property <code>name</code>
		 */
		getName(): string;
		/**
		 * Gets current value of property <code>placeholder</code>.
		 * 
		 * Defines a short hint intended to aid the user with data entry when the control has no value.
		 * @return Value of property <code>placeholder</code>
		 */
		getPlaceholder(): string;
		/**
		 * Gets current value of property <code>required</code>.
		 * 
		 * Indicates that user input is required. This property is only needed for accessibility purposes when a single relationship between
		 * the field and a label (see aggregation <code>labelFor</code> of <code>sap.m.Label</code>) cannot be established
		 * (e.g. one label should label multiple fields).
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>required</code>
		 */
		getRequired(): boolean;
		/**
		 * Retrieves the selected text.
		 * Only supported for input control's type of Text, Url, Tel and Password.
		 * @return The selected text.
		 */
		getSelectedText(): string;
		/**
		 * Gets current value of property <code>showValueStateMessage</code>.
		 * 
		 * Indicates whether the value state message should be shown or not.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>showValueStateMessage</code>
		 */
		getShowValueStateMessage(): boolean;
		/**
		 * Gets current value of property <code>textAlign</code>.
		 * 
		 * Defines the horizontal alignment of the text that is shown inside the input field.
		 * 
		 * Default value is <code>Initial</code>.
		 * @return Value of property <code>textAlign</code>
		 */
		getTextAlign(): sap.ui.core.TextAlign;
		/**
		 * Gets current value of property <code>textDirection</code>.
		 * 
		 * Defines the text directionality of the input field, e.g. <code>RTL</code>, <code>LTR</code>
		 * 
		 * Default value is <code>Inherit</code>.
		 * @return Value of property <code>textDirection</code>
		 */
		getTextDirection(): sap.ui.core.TextDirection;
		/**
		 * Gets current value of property <code>value</code>.
		 * 
		 * Defines the value of the control.
		 * @return Value of property <code>value</code>
		 */
		getValue(): string;
		/**
		 * Gets current value of property <code>valueState</code>.
		 * 
		 * Visualizes the validation state of the control, e.g. <code>Error</code>, <code>Warning</code>, <code>Success</code>.
		 * 
		 * Default value is <code>None</code>.
		 * @return Value of property <code>valueState</code>
		 */
		getValueState(): sap.ui.core.ValueState;
		/**
		 * Gets current value of property <code>valueStateText</code>.
		 * 
		 * Defines the text that appears in the value state message pop-up. If this is not specified, a default text is shown from the resource bundle.
		 * @return Value of property <code>valueStateText</code>
		 */
		getValueStateText(): string;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Defines the width of the control.
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Handles the change event.
		 * @param oEvent 
		 * @return true when change event is fired
		 */
		onChange(oEvent: any): boolean|any;
		/**
		 * Hook method that gets called when the input value is reverted with hitting escape.
		 * It may require to re-implement this method from sub classes for control specific behaviour.
		 * @param sValue Reverted value of the input.
		 */
		onValueRevertedByEscape(sValue: string);
		/**
		 * Open value state message popup.
		 */
		openValueStateMessage();
		/**
		 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
		 * @return The removed ariaLabelledBy or <code>null</code>
		 */
		removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Selects the text within the input field between the specified start and end positions.
		 * Only supported for input control's type of Text, Url, Tel and Password.
		 * @param iSelectionStart The index into the text at which the first selected character is located.
		 * @param iSelectionEnd The index into the text at which the last selected character is located.
		 * @return <code>this</code> to allow method chaining.
		 */
		selectText(iSelectionStart: number, iSelectionEnd: number): InputBase;
		/**
		 * Sets a new value for property <code>editable</code>.
		 * 
		 * Defines whether the control can be modified by the user or not.
		 * <b>Note:</b> A user can tab to non-editable control, highlight it, and copy the text from it.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bEditable New value for property <code>editable</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setEditable(bEditable: boolean): InputBase;
		/**
		 * Sets a new value for property <code>enabled</code>.
		 * 
		 * Indicates whether the user can interact with the control or not.
		 * <b>Note:</b> Disabled controls cannot be focused and they are out of the tab-chain.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bEnabled New value for property <code>enabled</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setEnabled(bEnabled: boolean): InputBase;
		/**
		 * Sets a new value for property <code>name</code>.
		 * 
		 * Defines the name of the control for the purposes of form submission.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sName New value for property <code>name</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setName(sName: string): InputBase;
		/**
		 * Sets a new value for property <code>placeholder</code>.
		 * 
		 * Defines a short hint intended to aid the user with data entry when the control has no value.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sPlaceholder New value for property <code>placeholder</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setPlaceholder(sPlaceholder: string): InputBase;
		/**
		 * Sets a new value for property <code>required</code>.
		 * 
		 * Indicates that user input is required. This property is only needed for accessibility purposes when a single relationship between
		 * the field and a label (see aggregation <code>labelFor</code> of <code>sap.m.Label</code>) cannot be established
		 * (e.g. one label should label multiple fields).
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bRequired New value for property <code>required</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setRequired(bRequired: boolean): InputBase;
		/**
		 * Sets a new value for property <code>showValueStateMessage</code>.
		 * 
		 * Indicates whether the value state message should be shown or not.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bShowValueStateMessage New value for property <code>showValueStateMessage</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowValueStateMessage(bShowValueStateMessage: boolean): InputBase;
		/**
		 * Sets a new value for property <code>textAlign</code>.
		 * 
		 * Defines the horizontal alignment of the text that is shown inside the input field.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Initial</code>.
		 * @param sTextAlign New value for property <code>textAlign</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTextAlign(sTextAlign: sap.ui.core.TextAlign): InputBase;
		/**
		 * Sets a new value for property <code>textDirection</code>.
		 * 
		 * Defines the text directionality of the input field, e.g. <code>RTL</code>, <code>LTR</code>
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @param sTextDirection New value for property <code>textDirection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTextDirection(sTextDirection: sap.ui.core.TextDirection): InputBase;
		/**
		 * Setter for property <code>value</code>.
		 * 
		 * Default value is empty/<code>undefined</code>.
		 * @param sValue New value for property <code>value</code>.
		 * @return <code>this</code> to allow method chaining.
		 */
		setValue(sValue: string): InputBase;
		/**
		 * Setter for property <code>valueState</code>.
		 * 
		 * Default value is <code>None</code>.
		 * @param sValueState New value for property <code>valueState</code>.
		 * @return <code>this</code> to allow method chaining.
		 */
		setValueState(sValueState: sap.ui.core.ValueState): InputBase;
		/**
		 * Setter for property <code>valueStateText</code>.
		 * 
		 * Default value is empty/<code>undefined</code>.
		 * @param sText New value for property <code>valueStateText</code>.
		 * @return <code>this</code> to allow method chaining
		 */
		setValueStateText(sText: string): InputBase;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Defines the width of the control.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): InputBase;
		/**
		 * Unbinds property <code>value</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindValue(): InputBase;
		/**
		 * Sets the DOM value of the input field and handles placeholder visibility.
		 * @param sValue value of the input field.
		 * @return <code>this</code> to allow method chaining.
		 */
		updateDomValue(sValue: string): InputBase;
	}

	class InputListItem extends ListItemBase {
		/**
		 * Constructor for a new InputListItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.InputListItemMetadata);
		/**
		 * Constructor for a new InputListItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some content to the aggregation <code>content</code>.
		 * @param oContent the content to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addContent(oContent: sap.ui.core.Control): InputListItem;
		/**
		 * Binds aggregation <code>content</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindContent(oBindingInfo: any): InputListItem;
		/**
		 * Destroys all the content in the aggregation <code>content</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyContent(): InputListItem;
		/**
		 * Creates a new subclass of class sap.m.InputListItem with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|InputListItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.ListItemBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.ListItemBase
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ListItemBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets content of aggregation <code>content</code>.
		 * 
		 * Content controls can be added
		 * @return 
		 */
		getContent(): sap.ui.core.Control[];
		/**
		 * Gets current value of property <code>label</code>.
		 * 
		 * Label of the list item
		 * @return Value of property <code>label</code>
		 */
		getLabel(): string;
		/**
		 * Gets current value of property <code>labelTextDirection</code>.
		 * 
		 * This property specifies the label text directionality with enumerated options. By default, the label inherits text direction from the DOM.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @return Value of property <code>labelTextDirection</code>
		 */
		getLabelTextDirection(): sap.ui.core.TextDirection;
		/**
		 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oContent The content whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfContent(oContent: sap.ui.core.Control): number;
		/**
		 * Inserts a content into the aggregation <code>content</code>.
		 * @param oContent the content to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the content should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the content is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertContent(oContent: sap.ui.core.Control, iIndex: number): InputListItem;
		/**
		 * Removes all the controls from the aggregation <code>content</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllContent(): sap.ui.core.Control[];
		/**
		 * Removes a content from the aggregation <code>content</code>.
		 * @param vContent The content to remove or its index or id
		 * @return The removed content or <code>null</code>
		 */
		removeContent(vContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
		/**
		 * Sets a new value for property <code>label</code>.
		 * 
		 * Label of the list item
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sLabel New value for property <code>label</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setLabel(sLabel: string): InputListItem;
		/**
		 * Sets a new value for property <code>labelTextDirection</code>.
		 * 
		 * This property specifies the label text directionality with enumerated options. By default, the label inherits text direction from the DOM.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @param sLabelTextDirection New value for property <code>labelTextDirection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setLabelTextDirection(sLabelTextDirection: sap.ui.core.TextDirection): InputListItem;
		/**
		 * Unbinds aggregation <code>content</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindContent(): InputListItem;
	}

	class InputType {
		/**
		 * A text field for specifying an email address. Brings up a keyboard optimized for email address entry.
		 */
		static Email: string;
		/**
		 * A text field for specifying a number. Brings up a number pad keyboard. Specifying an input type of \d* or [0-9]* is equivalent to using this type.
		 */
		static Number: string;
		/**
		 * Password input where the user entry cannot be seen.
		 */
		static Password: string;
		/**
		 * A text field for specifying a phone number. Brings up a phone pad keyboard.
		 */
		static Tel: string;
		/**
		 * default (text)
		 */
		static Text: string;
		/**
		 * A text field for specifying a URL. Brings up a keyboard optimized for URL entry.
		 */
		static Url: string;
	}

	interface ISnappable {
	}

	class Label extends sap.ui.core.Control {
		/**
		 * Constructor for a new Label.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.LabelMetadata);
		/**
		 * Constructor for a new Label.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.Label with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|LabelMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * 
		 */
		getAccessibilityInfo();
		/**
		 * This function (if available on the concrete control) provides
		 * the current accessibility state of the control.
		 * 
		 * Applications must not call this hook method directly, it is called by the framework.
		 * 
		 * Subclasses of Control should implement this hook to provide any necessary accessibility information:
		 * 
		 * <pre>
		 * MyControl.prototype.getAccessibilityInfo = function() {
		 *    return {
		 *      role: "textbox",      // String which represents the WAI-ARIA role which is implemented by the control.
		 *      type: "date input",   // String which represents the control type (Must be a translated text). Might correlate with
		 *                            // the role.
		 *      description: "value", // String which describes the most relevant control state (e.g. the inputs value). Must be a
		 *                            // translated text.
		 *                            // Note: The type and the enabled/editable state must not be handled here.
		 *      focusable: true,      // Boolean which describes whether the control can get the focus.
		 *      enabled: true,        // Boolean which describes whether the control is enabled. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      editable: true,       // Boolean which describes whether the control is editable. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      children: []          // Array of accessibility info objects of children of the given control (e.g. when the control is a layout).
		 *                            // Note: Children should only be provided when it is helpful to understand the accessibility context
		 *                            //       (e.g. a form control must not provide details of its internals (fields, labels, ...) but a
		 *                            //       layout should).
		 *    };
		 * };
		 * </pre>
		 * 
		 * Note: The returned object provides the accessibility state of the control at the point in time when this function is called.
		 * @note Overload from base type sap.ui.core.Control
		 * @return Current accessibility state of the control.
		 */
		getAccessibilityInfo(): any;
		/**
		 * Gets current value of property <code>design</code>.
		 * 
		 * Sets the design of a Label to either Standard or Bold.
		 * 
		 * Default value is <code>Standard</code>.
		 * @return Value of property <code>design</code>
		 */
		getDesign(): LabelDesign;
		/**
		 * ID of the element which is the current target of the association <code>labelFor</code>, or <code>null</code>.
		 * @return 
		 */
		getLabelFor(): sap.ui.core.ID;
		/**
		 * Gets current value of property <code>required</code>.
		 * 
		 * Indicates that user input is required in the input this label labels.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>required</code>
		 */
		getRequired(): boolean;
		/**
		 * Gets current value of property <code>text</code>.
		 * 
		 * Determines the Label text to be displayed.
		 * @return Value of property <code>text</code>
		 */
		getText(): string;
		/**
		 * Gets current value of property <code>textAlign</code>.
		 * 
		 * Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
		 * 
		 * Default value is <code>Begin</code>.
		 * @return Value of property <code>textAlign</code>
		 */
		getTextAlign(): sap.ui.core.TextAlign;
		/**
		 * Gets current value of property <code>textDirection</code>.
		 * 
		 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @return Value of property <code>textDirection</code>
		 */
		getTextDirection(): sap.ui.core.TextDirection;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Determines the width of the label.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Sets a new value for property <code>design</code>.
		 * 
		 * Sets the design of a Label to either Standard or Bold.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Standard</code>.
		 * @param sDesign New value for property <code>design</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDesign(sDesign: LabelDesign): Label;
		/**
		 * Sets the associated <code>labelFor</code>.
		 * @param oLabelFor ID of an element which becomes the new target of this labelFor association; alternatively, an element instance may be given
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setLabelFor(oLabelFor: sap.ui.core.ID|sap.ui.core.Control): Label;
		/**
		 * Sets a new value for property <code>required</code>.
		 * 
		 * Indicates that user input is required in the input this label labels.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bRequired New value for property <code>required</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setRequired(bRequired: boolean): Label;
		/**
		 * Sets a new value for property <code>text</code>.
		 * 
		 * Determines the Label text to be displayed.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sText New value for property <code>text</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setText(sText: string): Label;
		/**
		 * Sets a new value for property <code>textAlign</code>.
		 * 
		 * Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Begin</code>.
		 * @param sTextAlign New value for property <code>textAlign</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTextAlign(sTextAlign: sap.ui.core.TextAlign): Label;
		/**
		 * Sets a new value for property <code>textDirection</code>.
		 * 
		 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @param sTextDirection New value for property <code>textDirection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTextDirection(sTextDirection: sap.ui.core.TextDirection): Label;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Determines the width of the label.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): Label;
	}

	class LabelDesign {
		/**
		 * Displays the label in bold.
		 */
		static Bold: string;
		/**
		 * Displays the label in normal mode.
		 */
		static Standard: string;
	}

	class Link extends sap.ui.core.Control {
		/**
		 * Constructor for a new Link.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.LinkMetadata);
		/**
		 * Constructor for a new Link.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID|sap.ui.core.Control): Link;
		/**
		 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): Link;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this <code>sap.m.Link</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Link</code> itself.
		 * 
		 * Event is fired when the user triggers the link control.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Link</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachPress(oData: any, fnFunction: any, oListener?: any): Link;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this <code>sap.m.Link</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachPress(fnFunction: any, oListener: any): Link;
		/**
		 * Creates a new subclass of class sap.m.Link with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|LinkMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>press</code> to attached listeners.
		 * 
		 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Whether or not to prevent the default action
		 */
		firePress(mArguments?: any): boolean;
		/**
		 * 
		 */
		getAccessibilityInfo();
		/**
		 * This function (if available on the concrete control) provides
		 * the current accessibility state of the control.
		 * 
		 * Applications must not call this hook method directly, it is called by the framework.
		 * 
		 * Subclasses of Control should implement this hook to provide any necessary accessibility information:
		 * 
		 * <pre>
		 * MyControl.prototype.getAccessibilityInfo = function() {
		 *    return {
		 *      role: "textbox",      // String which represents the WAI-ARIA role which is implemented by the control.
		 *      type: "date input",   // String which represents the control type (Must be a translated text). Might correlate with
		 *                            // the role.
		 *      description: "value", // String which describes the most relevant control state (e.g. the inputs value). Must be a
		 *                            // translated text.
		 *                            // Note: The type and the enabled/editable state must not be handled here.
		 *      focusable: true,      // Boolean which describes whether the control can get the focus.
		 *      enabled: true,        // Boolean which describes whether the control is enabled. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      editable: true,       // Boolean which describes whether the control is editable. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      children: []          // Array of accessibility info objects of children of the given control (e.g. when the control is a layout).
		 *                            // Note: Children should only be provided when it is helpful to understand the accessibility context
		 *                            //       (e.g. a form control must not provide details of its internals (fields, labels, ...) but a
		 *                            //       layout should).
		 *    };
		 * };
		 * </pre>
		 * 
		 * Note: The returned object provides the accessibility state of the control at the point in time when this function is called.
		 * @note Overload from base type sap.ui.core.Control
		 * @return Current accessibility state of the control.
		 */
		getAccessibilityInfo(): any;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaDescribedBy</code>.
		 * @return 
		 */
		getAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
		 * @return 
		 */
		getAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Gets current value of property <code>emphasized</code>.
		 * 
		 * Emphasized links look visually more important than regular links.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>emphasized</code>
		 */
		getEmphasized(): boolean;
		/**
		 * Gets current value of property <code>enabled</code>.
		 * 
		 * Determines whether the link can be triggered by the user.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>enabled</code>
		 */
		getEnabled(): boolean;
		/**
		 * Gets current value of property <code>href</code>.
		 * 
		 * The link target URI. Supports standard hyperlink behavior. If a JavaScript action should be triggered, this should not be set, but instead an event handler for the "press" event should be registered.
		 * @return Value of property <code>href</code>
		 */
		getHref(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>subtle</code>.
		 * 
		 * Subtle links look more like standard text than like links. They should only be used to help with visual hierarchy between large data lists of important and less important links. Subtle links should not be used in any other use case.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>subtle</code>
		 */
		getSubtle(): boolean;
		/**
		 * Gets current value of property <code>target</code>.
		 * 
		 * Options are the standard values for window.open() supported by browsers: _self, _top, _blank, _parent, _search. Alternatively, a frame name can be entered. This property is only used when the href property is set.
		 * @return Value of property <code>target</code>
		 */
		getTarget(): string;
		/**
		 * Gets current value of property <code>text</code>.
		 * 
		 * Link text to be displayed.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>text</code>
		 */
		getText(): string;
		/**
		 * Gets current value of property <code>textAlign</code>.
		 * 
		 * Sets the horizontal alignment of the text.
		 * 
		 * Default value is <code>Initial</code>.
		 * @return Value of property <code>textAlign</code>
		 */
		getTextAlign(): sap.ui.core.TextAlign;
		/**
		 * Gets current value of property <code>textDirection</code>.
		 * 
		 * This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the parent DOM.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @return Value of property <code>textDirection</code>
		 */
		getTextDirection(): sap.ui.core.TextDirection;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Width of the link (CSS-size such as % or px). When it is set, this is the exact size. When left blank, the text defines the size.
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>wrapping</code>.
		 * 
		 * Determines whether the link text is allowed to wrap when there is not sufficient space.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>wrapping</code>
		 */
		getWrapping(): boolean;
		/**
		 * Removes all the controls in the association named <code>ariaDescribedBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
		 * @return The removed ariaDescribedBy or <code>null</code>
		 */
		removeAriaDescribedBy(vAriaDescribedBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
		 * @return The removed ariaLabelledBy or <code>null</code>
		 */
		removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Sets a new value for property <code>emphasized</code>.
		 * 
		 * Emphasized links look visually more important than regular links.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bEmphasized New value for property <code>emphasized</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setEmphasized(bEmphasized: boolean): Link;
		/**
		 * Sets a new value for property <code>enabled</code>.
		 * 
		 * Determines whether the link can be triggered by the user.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bEnabled New value for property <code>enabled</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setEnabled(bEnabled: boolean): Link;
		/**
		 * Sets a new value for property <code>href</code>.
		 * 
		 * The link target URI. Supports standard hyperlink behavior. If a JavaScript action should be triggered, this should not be set, but instead an event handler for the "press" event should be registered.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sHref New value for property <code>href</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHref(sHref: sap.ui.core.URI): Link;
		/**
		 * Sets a new value for property <code>subtle</code>.
		 * 
		 * Subtle links look more like standard text than like links. They should only be used to help with visual hierarchy between large data lists of important and less important links. Subtle links should not be used in any other use case.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bSubtle New value for property <code>subtle</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setSubtle(bSubtle: boolean): Link;
		/**
		 * Sets a new value for property <code>target</code>.
		 * 
		 * Options are the standard values for window.open() supported by browsers: _self, _top, _blank, _parent, _search. Alternatively, a frame name can be entered. This property is only used when the href property is set.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sTarget New value for property <code>target</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTarget(sTarget: string): Link;
		/**
		 * Sets a new value for property <code>text</code>.
		 * 
		 * Link text to be displayed.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sText New value for property <code>text</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setText(sText: string): Link;
		/**
		 * Sets a new value for property <code>textAlign</code>.
		 * 
		 * Sets the horizontal alignment of the text.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Initial</code>.
		 * @param sTextAlign New value for property <code>textAlign</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTextAlign(sTextAlign: sap.ui.core.TextAlign): Link;
		/**
		 * Sets a new value for property <code>textDirection</code>.
		 * 
		 * This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the parent DOM.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @param sTextDirection New value for property <code>textDirection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTextDirection(sTextDirection: sap.ui.core.TextDirection): Link;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Width of the link (CSS-size such as % or px). When it is set, this is the exact size. When left blank, the text defines the size.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): Link;
		/**
		 * Sets a new value for property <code>wrapping</code>.
		 * 
		 * Determines whether the link text is allowed to wrap when there is not sufficient space.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bWrapping New value for property <code>wrapping</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWrapping(bWrapping: boolean): Link;
	}

	class List extends ListBase {
		/**
		 * Constructor for a new List.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId Id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.ListMetadata);
		/**
		 * Constructor for a new List.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId Id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.List with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListBase.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ListMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.ListBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.ListBase
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ListBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>backgroundDesign</code>.
		 * 
		 * Sets the background style of the list. Depending on the theme, you can change the state of the background from <code>Solid</code> to <code>Translucent</code> or to <code>Transparent</code>.
		 * 
		 * Default value is <code>Solid</code>.
		 * @return Value of property <code>backgroundDesign</code>
		 */
		getBackgroundDesign(): BackgroundDesign;
		/**
		 * Sets a new value for property <code>backgroundDesign</code>.
		 * 
		 * Sets the background style of the list. Depending on the theme, you can change the state of the background from <code>Solid</code> to <code>Translucent</code> or to <code>Transparent</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Solid</code>.
		 * @param sBackgroundDesign New value for property <code>backgroundDesign</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setBackgroundDesign(sBackgroundDesign: BackgroundDesign): List;
	}

	class ListBase extends sap.ui.core.Control {
		/**
		 * Constructor for a new ListBase.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId Id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.ListBaseMetadata);
		/**
		 * Constructor for a new ListBase.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId Id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): ListBase;
		/**
		 * Adds some item to the aggregation <code>items</code>.
		 * @param oItem the item to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addItem(oItem: ListItemBase): ListBase;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>delete</code> event of this <code>sap.m.ListBase</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.ListBase</code> itself.
		 * 
		 * Fires when delete icon is pressed by user.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachDelete(oData: any, fnFunction: any, oListener?: any): ListBase;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>itemPress</code> event of this <code>sap.m.ListBase</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.ListBase</code> itself.
		 * 
		 * Fires when an item is pressed unless the item's <code>type</code> property is <code>Inactive</code>.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachItemPress(oData: any, fnFunction: any, oListener?: any): ListBase;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>selectionChange</code> event of this <code>sap.m.ListBase</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.ListBase</code> itself.
		 * 
		 * Fires when selection is changed via user interaction inside the control.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachSelectionChange(oData: any, fnFunction: any, oListener?: any): ListBase;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>swipe</code> event of this <code>sap.m.ListBase</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.ListBase</code> itself.
		 * 
		 * Fires after user's swipe action and before the <code>swipeContent</code> is shown. On the <code>swipe</code> event handler, <code>swipeContent</code> can be changed according to the swiped item.
		 * Calling the <code>preventDefault</code> method of the event cancels the swipe action.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachSwipe(oData: any, fnFunction: any, oListener?: any): ListBase;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>updateFinished</code> event of this <code>sap.m.ListBase</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.ListBase</code> itself.
		 * 
		 * Fires after <code>items</code> binding is updated and processed by the control.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachUpdateFinished(oData: any, fnFunction: any, oListener?: any): ListBase;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>updateStarted</code> event of this <code>sap.m.ListBase</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.ListBase</code> itself.
		 * 
		 * Fires before <code>items</code> binding is updated (e.g. sorting, filtering)
		 * 
		 * <b>Note:</b> Event handler should not invalidate the control.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.ListBase</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachUpdateStarted(oData: any, fnFunction: any, oListener?: any): ListBase;
		/**
		 * Binds aggregation <code>items</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindItems(oBindingInfo: any): ListBase;
		/**
		 * Destroys the headerToolbar in the aggregation <code>headerToolbar</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyHeaderToolbar(): ListBase;
		/**
		 * Destroys the infoToolbar in the aggregation <code>infoToolbar</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyInfoToolbar(): ListBase;
		/**
		 * Destroys all the items in the aggregation <code>items</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyItems(): ListBase;
		/**
		 * Destroys the swipeContent in the aggregation <code>swipeContent</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroySwipeContent(): ListBase;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>delete</code> event of this <code>sap.m.ListBase</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachDelete(fnFunction: any, oListener: any): ListBase;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>itemPress</code> event of this <code>sap.m.ListBase</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachItemPress(fnFunction: any, oListener: any): ListBase;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>selectionChange</code> event of this <code>sap.m.ListBase</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachSelectionChange(fnFunction: any, oListener: any): ListBase;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>swipe</code> event of this <code>sap.m.ListBase</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachSwipe(fnFunction: any, oListener: any): ListBase;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>updateFinished</code> event of this <code>sap.m.ListBase</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachUpdateFinished(fnFunction: any, oListener: any): ListBase;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>updateStarted</code> event of this <code>sap.m.ListBase</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachUpdateStarted(fnFunction: any, oListener: any): ListBase;
		/**
		 * Creates a new subclass of class sap.m.ListBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ListBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>delete</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>listItem</code> of type <code>sap.m.ListItemBase</code>The item which fired the delete event.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireDelete(mArguments?: any): ListBase;
		/**
		 * Fires event <code>itemPress</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>listItem</code> of type <code>sap.m.ListItemBase</code>The item which fired the pressed event.</li>
		 * <li><code>srcControl</code> of type <code>sap.ui.core.Control</code>The control which caused the press event within the container.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireItemPress(mArguments?: any): ListBase;
		/**
		 * Fires event <code>selectionChange</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>listItem</code> of type <code>sap.m.ListItemBase</code>The item whose selection has changed. In <code>MultiSelect</code> mode, only the up-most selected item is returned. This parameter can be used for single-selection modes.</li>
		 * <li><code>listItems</code> of type <code>sap.m.ListItemBase[]</code>Array of items whose selection has changed. This parameter can be used for <code>MultiSelect</code> mode.</li>
		 * <li><code>selected</code> of type <code>boolean</code>Indicates whether the <code>listItem</code> parameter is selected or not.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireSelectionChange(mArguments?: any): ListBase;
		/**
		 * Fires event <code>swipe</code> to attached listeners.
		 * 
		 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>listItem</code> of type <code>sap.m.ListItemBase</code>The item which fired the swipe.</li>
		 * <li><code>swipeContent</code> of type <code>sap.ui.core.Control</code>Aggregated <code>swipeContent</code> control that is shown on the right hand side of the item.</li>
		 * <li><code>srcControl</code> of type <code>sap.ui.core.Control</code>Holds which control caused the swipe event within the item.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Whether or not to prevent the default action
		 */
		fireSwipe(mArguments?: any): boolean;
		/**
		 * Fires event <code>updateFinished</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>reason</code> of type <code>string</code>The reason of the update, e.g. Binding, Filter, Sort, Growing, Change, Refresh, Context.</li>
		 * <li><code>actual</code> of type <code>int</code>Actual number of items.</li>
		 * <li><code>total</code> of type <code>int</code>The total count of bound items. This can be used if the <code>growing</code> property is set to <code>true</code>.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireUpdateFinished(mArguments?: any): ListBase;
		/**
		 * Fires event <code>updateStarted</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>reason</code> of type <code>string</code>The reason of the update, e.g. Binding, Filter, Sort, Growing, Change, Refresh, Context.</li>
		 * <li><code>actual</code> of type <code>int</code>Actual number of items.</li>
		 * <li><code>total</code> of type <code>int</code>The total count of bound items. This can be used if the <code>growing</code> property is set to <code>true</code>.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireUpdateStarted(mArguments?: any): ListBase;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
		 * @return 
		 */
		getAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Gets current value of property <code>enableBusyIndicator</code>.
		 * 
		 * When this property is set to <code>true</code>, the control will automatically display a busy indicator when it detects that data is being loaded. This busy indicator blocks the interaction with the items until data loading is finished.
		 * By default, the busy indicator will be shown after one second. This behavior can be customized by setting the <code>busyIndicatorDelay</code> property.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>enableBusyIndicator</code>
		 */
		getEnableBusyIndicator(): boolean;
		/**
		 * Gets current value of property <code>footerText</code>.
		 * 
		 * Defines the footer text that appears in the control.
		 * @return Value of property <code>footerText</code>
		 */
		getFooterText(): string;
		/**
		 * Gets current value of property <code>growing</code>.
		 * 
		 * If set to <code>true</code>, enables the growing feature of the control to load more items by requesting from the model.
		 * <b>Note:</b>: This feature only works when an <code>items</code> aggregation is bound. Growing must not be used together with two-way binding.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>growing</code>
		 */
		getGrowing(): boolean;
		/**
		 * Gets current value of property <code>growingDirection</code>.
		 * 
		 * Defines the direction of the growing feature.
		 * If set to <code>Downwards</code> the user has to scroll down to load more items or the growing button is displayed at the bottom.
		 * If set to <code>Upwards</code> the user has to scroll up to load more items or the growing button is displayed at the top.
		 * 
		 * Default value is <code>Downwards</code>.
		 * @return Value of property <code>growingDirection</code>
		 */
		getGrowingDirection(): ListGrowingDirection;
		/**
		 * Returns growing information as object with "actual" and "total" keys.
		 * Note: This function returns "null" if "growing" feature is disabled.
		 * @return 
		 */
		getGrowingInfo(): any;
		/**
		 * Gets current value of property <code>growingScrollToLoad</code>.
		 * 
		 * If set to true, the user can scroll down/up to load more items. Otherwise a growing button is displayed at the bottom/top of the control.
		 * <b>Note:</b> This property can only be used if the <code>growing</code> property is set to <code>true</code> and only if there is one instance of <code>sap.m.List</code> or <code>sap.m.Table</code> inside the scrollable scroll container (e.g <code>sap.m.Page</code>).
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>growingScrollToLoad</code>
		 */
		getGrowingScrollToLoad(): boolean;
		/**
		 * Gets current value of property <code>growingThreshold</code>.
		 * 
		 * Defines the number of items to be requested from the model for each grow.
		 * This property can only be used if the <code>growing</code> property is set to <code>true</code>.
		 * 
		 * Default value is <code>20</code>.
		 * @return Value of property <code>growingThreshold</code>
		 */
		getGrowingThreshold(): number;
		/**
		 * Gets current value of property <code>growingTriggerText</code>.
		 * 
		 * Defines the text displayed on the growing button. The default is a translated text ("More") coming from the message bundle.
		 * This property can only be used if the <code>growing</code> property is set to <code>true</code>.
		 * @return Value of property <code>growingTriggerText</code>
		 */
		getGrowingTriggerText(): string;
		/**
		 * Gets current value of property <code>headerText</code>.
		 * 
		 * Defines the header text that appears in the control.
		 * <b>Note:</b> If <code>headerToolbar</code> aggregation is set, then this property is ignored.
		 * @return Value of property <code>headerText</code>
		 */
		getHeaderText(): string;
		/**
		 * Gets content of aggregation <code>headerToolbar</code>.
		 * 
		 * The header area can be used as a toolbar to add extra controls for user interactions.
		 * <b>Note:</b> When set, this overwrites the <code>headerText</code> property.
		 * @return 
		 */
		getHeaderToolbar(): Toolbar;
		/**
		 * Gets current value of property <code>includeItemInSelection</code>.
		 * 
		 * Defines whether the items are selectable by clicking on the item itself (<code>true</code>) rather than having to set the selection control first.
		 * <b>Note:</b> The <code>SingleSelectMaster</code> mode also provides this functionality by default.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>includeItemInSelection</code>
		 */
		getIncludeItemInSelection(): boolean;
		/**
		 * Gets content of aggregation <code>infoToolbar</code>.
		 * 
		 * A toolbar that is placed below the header to show extra information to the user.
		 * @return 
		 */
		getInfoToolbar(): Toolbar;
		/**
		 * Gets current value of property <code>inset</code>.
		 * 
		 * Defines the indentation of the container. Setting it to <code>true</code> indents the list.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>inset</code>
		 */
		getInset(): boolean;
		/**
		 * Returns ItemNavigation for controls uses List
		 * @return 
		 */
		getItemNavigation(): sap.ui.core.delegate.ItemNavigation|any;
		/**
		 * Gets content of aggregation <code>items</code>.
		 * 
		 * Defines the items contained within this control.
		 * @return 
		 */
		getItems(): ListItemBase[];
		/**
		 * Gets current value of property <code>keyboardMode</code>.
		 * 
		 * Defines keyboard handling behavior of the control.
		 * 
		 * Default value is <code>Navigation</code>.
		 * @return Value of property <code>keyboardMode</code>
		 */
		getKeyboardMode(): ListKeyboardMode;
		/**
		 * Returns the last list mode, the mode that is rendered
		 * This can be used to detect mode changes during rendering
		 */
		getLastMode();
		/**
		 * Gets current value of property <code>mode</code>.
		 * 
		 * Defines the mode of the control (e.g. <code>None</code>, <code>SingleSelect</code>, <code>MultiSelect</code>, <code>Delete</code>).
		 * 
		 * Default value is <code>None</code>.
		 * @return Value of property <code>mode</code>
		 */
		getMode(): ListMode;
		/**
		 * Gets current value of property <code>modeAnimationOn</code>.
		 * 
		 * Defines if animations will be shown while switching between modes.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>modeAnimationOn</code>
		 */
		getModeAnimationOn(): boolean;
		/**
		 * Gets current value of property <code>noDataText</code>.
		 * 
		 * This text is displayed when the control contains no items.
		 * @return Value of property <code>noDataText</code>
		 */
		getNoDataText(): string;
		/**
		 * Gets current value of property <code>rememberSelections</code>.
		 * 
		 * If set to true, this control remembers and retains the selection of the items after a binding update has been performed (e.g. sorting, filtering).
		 * <b>Note:</b> This feature works only if two-way data binding for the <code>selected</code> property of the item is not used. It also needs to be turned off if the binding context of the item does not always point to the same entry in the model, for example, if the order of the data in the <code>JSONModel</code> is changed.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>rememberSelections</code>
		 */
		getRememberSelections(): boolean;
		/**
		 * Returns the binding contexts of the selected items.
		 * Note: This method returns an empty array if no databinding is used.
		 * @param bAll Set true to include even invisible selected items(e.g. the selections from the previous filters).
		 *         Note: In single selection modes, only the last selected item's binding context is returned in array.
		 * @return 
		 */
		getSelectedContexts(bAll: boolean): any[];
		/**
		 * Returns selected list item. When no item is selected, "null" is returned. When "multi-selection" is enabled and multiple items are selected, only the up-most selected item is returned.
		 * @return 
		 */
		getSelectedItem(): ListItemBase;
		/**
		 * Returns an array containing the selected list items. If no items are selected, an empty array is returned.
		 * @return 
		 */
		getSelectedItems(): ListItemBase[];
		/**
		 * Gets current value of property <code>showNoData</code>.
		 * 
		 * Defines whether or not the text specified in the <code>noDataText</code> property is displayed.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>showNoData</code>
		 */
		getShowNoData(): boolean;
		/**
		 * Gets current value of property <code>showSeparators</code>.
		 * 
		 * Defines which item separator style will be used.
		 * 
		 * Default value is <code>All</code>.
		 * @return Value of property <code>showSeparators</code>
		 */
		getShowSeparators(): ListSeparators;
		/**
		 * Gets current value of property <code>showUnread</code>.
		 * 
		 * Activates the unread indicator for all items, if set to <code>true</code>.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>showUnread</code>
		 */
		getShowUnread(): boolean;
		/**
		 * Gets content of aggregation <code>swipeContent</code>.
		 * 
		 * User can swipe to bring in this control on the right hand side of an item.
		 * <b>Note:</b> For non-touch devices, this functionality is ignored.
		 * @return 
		 */
		getSwipeContent(): sap.ui.core.Control;
		/**
		 * Gets current value of property <code>swipeDirection</code>.
		 * 
		 * Defines the direction of the swipe movement (e.g LeftToRight, RightToLeft, Both) to display the control defined in the <code>swipeContent</code> aggregation.
		 * 
		 * Default value is <code>Both</code>.
		 * @return Value of property <code>swipeDirection</code>
		 */
		getSwipeDirection(): SwipeDirection;
		/**
		 * Returns swiped list item. When no item is swiped, "null" is returned.
		 * @return 
		 */
		getSwipedItem(): ListItemBase;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Sets the width of the control.
		 * 
		 * Default value is <code>100%</code>.
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Checks for the provided <code>sap.m.ListItemBase</code> in the aggregation <code>items</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oItem The item whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfItem(oItem: ListItemBase): number;
		/**
		 * Inserts a item into the aggregation <code>items</code>.
		 * @param oItem the item to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the item should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the item is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertItem(oItem: ListItemBase, iIndex: number): ListBase;
		/**
		 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Removes all the controls from the aggregation <code>items</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllItems(): ListItemBase[];
		/**
		 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
		 * @return The removed ariaLabelledBy or <code>null</code>
		 */
		removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Removes a item from the aggregation <code>items</code>.
		 * @param vItem The item to remove or its index or id
		 * @return The removed item or <code>null</code>
		 */
		removeItem(vItem: number|string|ListItemBase): ListItemBase;
		/**
		 * Removes visible selections of the current selection mode.
		 * @param bAll Since version 1.16.3. This control keeps old selections after filter or sorting. Set this parameter "true" to remove all selections.
		 * @return 
		 */
		removeSelections(bAll: boolean): ListBase;
		/**
		 * Select all items in "MultiSelection" mode.
		 * @return 
		 */
		selectAll(): ListBase;
		/**
		 * Sets a new value for property <code>enableBusyIndicator</code>.
		 * 
		 * When this property is set to <code>true</code>, the control will automatically display a busy indicator when it detects that data is being loaded. This busy indicator blocks the interaction with the items until data loading is finished.
		 * By default, the busy indicator will be shown after one second. This behavior can be customized by setting the <code>busyIndicatorDelay</code> property.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bEnableBusyIndicator New value for property <code>enableBusyIndicator</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setEnableBusyIndicator(bEnableBusyIndicator: boolean): ListBase;
		/**
		 * Sets a new value for property <code>footerText</code>.
		 * 
		 * Defines the footer text that appears in the control.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sFooterText New value for property <code>footerText</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setFooterText(sFooterText: string): ListBase;
		/**
		 * Sets a new value for property <code>growing</code>.
		 * 
		 * If set to <code>true</code>, enables the growing feature of the control to load more items by requesting from the model.
		 * <b>Note:</b>: This feature only works when an <code>items</code> aggregation is bound. Growing must not be used together with two-way binding.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bGrowing New value for property <code>growing</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setGrowing(bGrowing: boolean): ListBase;
		/**
		 * Sets a new value for property <code>growingDirection</code>.
		 * 
		 * Defines the direction of the growing feature.
		 * If set to <code>Downwards</code> the user has to scroll down to load more items or the growing button is displayed at the bottom.
		 * If set to <code>Upwards</code> the user has to scroll up to load more items or the growing button is displayed at the top.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Downwards</code>.
		 * @param sGrowingDirection New value for property <code>growingDirection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setGrowingDirection(sGrowingDirection: ListGrowingDirection): ListBase;
		/**
		 * Sets a new value for property <code>growingScrollToLoad</code>.
		 * 
		 * If set to true, the user can scroll down/up to load more items. Otherwise a growing button is displayed at the bottom/top of the control.
		 * <b>Note:</b> This property can only be used if the <code>growing</code> property is set to <code>true</code> and only if there is one instance of <code>sap.m.List</code> or <code>sap.m.Table</code> inside the scrollable scroll container (e.g <code>sap.m.Page</code>).
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bGrowingScrollToLoad New value for property <code>growingScrollToLoad</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setGrowingScrollToLoad(bGrowingScrollToLoad: boolean): ListBase;
		/**
		 * Sets a new value for property <code>growingThreshold</code>.
		 * 
		 * Defines the number of items to be requested from the model for each grow.
		 * This property can only be used if the <code>growing</code> property is set to <code>true</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>20</code>.
		 * @param iGrowingThreshold New value for property <code>growingThreshold</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setGrowingThreshold(iGrowingThreshold: number): ListBase;
		/**
		 * Sets a new value for property <code>growingTriggerText</code>.
		 * 
		 * Defines the text displayed on the growing button. The default is a translated text ("More") coming from the message bundle.
		 * This property can only be used if the <code>growing</code> property is set to <code>true</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sGrowingTriggerText New value for property <code>growingTriggerText</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setGrowingTriggerText(sGrowingTriggerText: string): ListBase;
		/**
		 * Sets a new value for property <code>headerText</code>.
		 * 
		 * Defines the header text that appears in the control.
		 * <b>Note:</b> If <code>headerToolbar</code> aggregation is set, then this property is ignored.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sHeaderText New value for property <code>headerText</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHeaderText(sHeaderText: string): ListBase;
		/**
		 * Sets the aggregated <code>headerToolbar</code>.
		 * @param oHeaderToolbar The headerToolbar to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHeaderToolbar(oHeaderToolbar: Toolbar): ListBase;
		/**
		 * Sets a new value for property <code>includeItemInSelection</code>.
		 * 
		 * Defines whether the items are selectable by clicking on the item itself (<code>true</code>) rather than having to set the selection control first.
		 * <b>Note:</b> The <code>SingleSelectMaster</code> mode also provides this functionality by default.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bIncludeItemInSelection New value for property <code>includeItemInSelection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIncludeItemInSelection(bIncludeItemInSelection: boolean): ListBase;
		/**
		 * Sets the aggregated <code>infoToolbar</code>.
		 * @param oInfoToolbar The infoToolbar to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setInfoToolbar(oInfoToolbar: Toolbar): ListBase;
		/**
		 * Sets a new value for property <code>inset</code>.
		 * 
		 * Defines the indentation of the container. Setting it to <code>true</code> indents the list.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bInset New value for property <code>inset</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setInset(bInset: boolean): ListBase;
		/**
		 * Sets a new value for property <code>keyboardMode</code>.
		 * 
		 * Defines keyboard handling behavior of the control.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Navigation</code>.
		 * @param sKeyboardMode New value for property <code>keyboardMode</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setKeyboardMode(sKeyboardMode: ListKeyboardMode): ListBase;
		/**
		 * Sets a new value for property <code>mode</code>.
		 * 
		 * Defines the mode of the control (e.g. <code>None</code>, <code>SingleSelect</code>, <code>MultiSelect</code>, <code>Delete</code>).
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>None</code>.
		 * @param sMode New value for property <code>mode</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMode(sMode: ListMode): ListBase;
		/**
		 * Sets a new value for property <code>modeAnimationOn</code>.
		 * 
		 * Defines if animations will be shown while switching between modes.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bModeAnimationOn New value for property <code>modeAnimationOn</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setModeAnimationOn(bModeAnimationOn: boolean): ListBase;
		/**
		 * Sets a new value for property <code>noDataText</code>.
		 * 
		 * This text is displayed when the control contains no items.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sNoDataText New value for property <code>noDataText</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setNoDataText(sNoDataText: string): ListBase;
		/**
		 * Sets a new value for property <code>rememberSelections</code>.
		 * 
		 * If set to true, this control remembers and retains the selection of the items after a binding update has been performed (e.g. sorting, filtering).
		 * <b>Note:</b> This feature works only if two-way data binding for the <code>selected</code> property of the item is not used. It also needs to be turned off if the binding context of the item does not always point to the same entry in the model, for example, if the order of the data in the <code>JSONModel</code> is changed.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bRememberSelections New value for property <code>rememberSelections</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setRememberSelections(bRememberSelections: boolean): ListBase;
		/**
		 * Selects or deselects the given list item.
		 * @param oListItem The list item whose selection to be changed. This parameter is mandatory.
		 * @param bSelect Sets selected status of the list item. Default value is true.
		 * @return 
		 */
		setSelectedItem(oListItem: ListItemBase, bSelect: boolean): ListBase;
		/**
		 * Sets a list item to be selected by id. In single mode the method removes the previous selection.
		 * @param sId The id of the list item whose selection to be changed.
		 * @param bSelect Sets selected status of the list item. Default value is true.
		 * @return 
		 */
		setSelectedItemById(sId: string, bSelect: boolean): ListBase;
		/**
		 * Sets a new value for property <code>showNoData</code>.
		 * 
		 * Defines whether or not the text specified in the <code>noDataText</code> property is displayed.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bShowNoData New value for property <code>showNoData</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowNoData(bShowNoData: boolean): ListBase;
		/**
		 * Sets a new value for property <code>showSeparators</code>.
		 * 
		 * Defines which item separator style will be used.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>All</code>.
		 * @param sShowSeparators New value for property <code>showSeparators</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowSeparators(sShowSeparators: ListSeparators): ListBase;
		/**
		 * Sets a new value for property <code>showUnread</code>.
		 * 
		 * Activates the unread indicator for all items, if set to <code>true</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bShowUnread New value for property <code>showUnread</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowUnread(bShowUnread: boolean): ListBase;
		/**
		 * Sets the aggregated <code>swipeContent</code>.
		 * @param oSwipeContent The swipeContent to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setSwipeContent(oSwipeContent: sap.ui.core.Control): ListBase;
		/**
		 * Sets a new value for property <code>swipeDirection</code>.
		 * 
		 * Defines the direction of the swipe movement (e.g LeftToRight, RightToLeft, Both) to display the control defined in the <code>swipeContent</code> aggregation.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Both</code>.
		 * @param sSwipeDirection New value for property <code>swipeDirection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setSwipeDirection(sSwipeDirection: SwipeDirection): ListBase;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Sets the width of the control.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>100%</code>.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): ListBase;
		/**
		 * After swipeContent is shown, user can interact with this control(e.g Tap). After interaction is done, you can/should use this method to hide swipeContent from screen.
		 * Note: If users try to tap inside of the list but outside of the swipeContent then control hides automatically.
		 * @param oCallback This callback function is called with two parameters(swipedListItem and swipedContent) after swipe-out animation is finished.
		 * @return 
		 */
		swipeOut(oCallback: any): ListBase;
		/**
		 * Unbinds aggregation <code>items</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindItems(): ListBase;
	}

	class ListGrowingDirection {
		/**
		 * User has to scroll down to load more items or the growing button is displayed at the bottom.
		 */
		static Downwards: string;
		/**
		 * User has to scroll up to load more items or the growing button is displayed at the top.
		 * <b>Note:</b> If this option is active, there should not be any other control than <code>sap.m.List</code> inside its <code>ScollContainer</code>.
		 */
		static Upwards: string;
	}

	class ListItemBase extends sap.ui.core.Control {
		/**
		 * Constructor for a new ListItemBase.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId Id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.ListItemBaseMetadata);
		/**
		 * Constructor for a new ListItemBase.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId Id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): ListItemBase;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>detailPress</code> event of this <code>sap.m.ListItemBase</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.ListItemBase</code> itself.
		 * 
		 * Fires when the user clicks on the detail button of the control.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachDetailPress(oData: any, fnFunction: any, oListener?: any): ListItemBase;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this <code>sap.m.ListItemBase</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.ListItemBase</code> itself.
		 * 
		 * Fires when the user clicks on the control.
		 * <b>Note:</b> This event is not fired when the parent <code>mode</code> is <code>SingleSelectMaster</code> or when the <code>includeItemInSelection</code> property is set to <code>true</code>.
		 * If there is an interactive element that handles its own <code>press</code> event then the list item's <code>press</code> event is not fired.
		 * Also see {@link sap.m.ListBase#attachItemPress}.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachPress(oData: any, fnFunction: any, oListener?: any): ListItemBase;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>detailPress</code> event of this <code>sap.m.ListItemBase</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachDetailPress(fnFunction: any, oListener: any): ListItemBase;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this <code>sap.m.ListItemBase</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachPress(fnFunction: any, oListener: any): ListItemBase;
		/**
		 * Creates a new subclass of class sap.m.ListItemBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ListItemBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>detailPress</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireDetailPress(mArguments?: any): ListItemBase;
		/**
		 * Fires event <code>press</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		firePress(mArguments?: any): ListItemBase;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
		 * @return 
		 */
		getAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Gets current value of property <code>counter</code>.
		 * 
		 * Defines the counter value of the list items.
		 * @return Value of property <code>counter</code>
		 */
		getCounter(): number;
		/**
		 * Gets current value of property <code>selected</code>.
		 * 
		 * Defines the selected state of the list items.
		 * <b>Note:</b> Binding the <code>selected</code> property in single selection modes may cause unwanted results if you have more than one selected items in your binding.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>selected</code>
		 */
		getSelected(): boolean;
		/**
		 * Returns the tabbable DOM elements as a jQuery collection
		 * @return jQuery object
		 */
		getTabbables(): any;
		/**
		 * Gets current value of property <code>type</code>.
		 * 
		 * Defines the visual indication and behavior of the list items, e.g. <code>Active</code>, <code>Navigation</code>, <code>Detail</code>.
		 * 
		 * Default value is <code>Inactive</code>.
		 * @return Value of property <code>type</code>
		 */
		getType(): ListType;
		/**
		 * Gets current value of property <code>unread</code>.
		 * 
		 * Activates the unread indicator for the list item, if set to <code>true</code>.
		 * <b>Note:</b> This flag is ignored when the <code>showUnread</code> property of the parent is set to <code>false</code>.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>unread</code>
		 */
		getUnread(): boolean;
		/**
		 * Gets current value of property <code>visible</code>.
		 * 
		 * Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead of the real control.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>visible</code>
		 */
		getVisible(): boolean;
		/**
		 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
		 * @return The removed ariaLabelledBy or <code>null</code>
		 */
		removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Sets a new value for property <code>counter</code>.
		 * 
		 * Defines the counter value of the list items.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param iCounter New value for property <code>counter</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setCounter(iCounter: number): ListItemBase;
		/**
		 * Sets a new value for property <code>selected</code>.
		 * 
		 * Defines the selected state of the list items.
		 * <b>Note:</b> Binding the <code>selected</code> property in single selection modes may cause unwanted results if you have more than one selected items in your binding.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bSelected New value for property <code>selected</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setSelected(bSelected: boolean): ListItemBase;
		/**
		 * Sets a new value for property <code>type</code>.
		 * 
		 * Defines the visual indication and behavior of the list items, e.g. <code>Active</code>, <code>Navigation</code>, <code>Detail</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Inactive</code>.
		 * @param sType New value for property <code>type</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setType(sType: ListType): ListItemBase;
		/**
		 * Sets a new value for property <code>unread</code>.
		 * 
		 * Activates the unread indicator for the list item, if set to <code>true</code>.
		 * <b>Note:</b> This flag is ignored when the <code>showUnread</code> property of the parent is set to <code>false</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bUnread New value for property <code>unread</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setUnread(bUnread: boolean): ListItemBase;
		/**
		 * Sets a new value for property <code>visible</code>.
		 * 
		 * Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead of the real control.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bVisible New value for property <code>visible</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setVisible(bVisible: boolean): ListItemBase;
		/**
		 * Sets a new value for property <code>visible</code>.
		 * 
		 * Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead of the real control
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @note Overload from base type sap.ui.core.Control
		 * @param bVisible New value for property <code>visible</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setVisible(bVisible: boolean): sap.ui.core.Control;
	}

	class ListKeyboardMode {
		/**
		 * This mode is suitable if the number of items is limited and if there are editable fields within the item.
		 * While the last/first interactive element within an item has the focus, pressing tab/shift+tab moves the focus to the next/previous element in the tab chain after/before the item </code>.
		 */
		static Edit: string;
		/**
		 * This default mode is suitable if the number of items is unlimited or if there is no editable field within the item.
		 * While the last/first interactive element within an item has the focus, pressing tab/shift+tab moves the focus to the next/previous element in the tab chain after/before the <code>sap.m.List</code> or <code>sap.m.Table</code>.
		 */
		static Navigation: string;
	}

	class ListMode {
		/**
		 * Delete mode (only one list item can be deleted via provided delete button)
		 */
		static Delete: string;
		/**
		 * Multi selection mode (more than one list item can be selected).
		 */
		static MultiSelect: string;
		/**
		 * Default mode (no selection).
		 */
		static None: string;
		/**
		 * Right-positioned single selection mode (only one list item can be selected).
		 */
		static SingleSelect: string;
		/**
		 * Left-positioned single selection mode (only one list item can be selected).
		 */
		static SingleSelectLeft: string;
		/**
		 * Selected item is highlighted but no selection control is visible (only one list item can be selected).
		 */
		static SingleSelectMaster: string;
	}

	class ListSeparators {
		/**
		 * Separators between the items including the last and the first one.
		 */
		static All: string;
		/**
		 * Separators between the items.
		 * <b>Note:</b> This enumeration depends on the theme.
		 */
		static Inner: string;
		/**
		 * No item separators.
		 */
		static None: string;
	}

	class ListType {
		/**
		 * Indicates that the item is clickable via active feedback when item is pressed.
		 */
		static Active: string;
		/**
		 * Enables detail button of the list item that fires <code>detailPress</code> event.
		 * Also see {@link sap.m.ListBase#attachDetailPress}.
		 */
		static Detail: string;
		/**
		 * Enables {@link sap.m.ListType#Detail} and {@link sap.m.ListType#Active} enumerations together.
		 */
		static DetailAndActive: string;
		/**
		 * Indicates the list item does not have any active feedback when item is pressed.
		 * <b>Note:</b> <code>Inactive</code> type cannot be used to disable list items.
		 */
		static Inactive: string;
		/**
		 * Indicates the list item is navigable to show extra information about the item.
		 */
		static Navigation: string;
	}

	class LoadState {
		/**
		 * The control is disabled.
		 */
		static Disabled: string;
		/**
		 * The control failed to load.
		 */
		static Failed: string;
		/**
		 * The control has loaded.
		 */
		static Loaded: string;
		/**
		 * The control is loading.
		 */
		static Loading: string;
	}

	class MaskInput extends InputBase {
		/**
		 * Constructor for a new MaskInput.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.MaskInputMetadata);
		/**
		 * Constructor for a new MaskInput.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Gets a replacement string for the character being placed in the input.
		 * Subclasses may override this method in order to get some additional behavior. For instance, switching current input
		 * character with other for time input purposes. As an example, if the user enters "2" (in 12-hour format), the consumer may use
		 * this method to replace the input from "2" to "02".
		 * @param sChar The current character from the input
		 * @param iPlacePosition The position the character should occupy
		 * @param sCurrentInputValue The value currently inside the input field (may differ from the property value)
		 * @return A string that replaces the character
		 */
		_feedReplaceChar(sChar: string, iPlacePosition: number, sCurrentInputValue: string): string;
		/**
		 * Verifies whether a character at a given position is allowed according to its mask rule.
		 * @param sChar The character
		 * @param iIndex The position of the character
		 */
		_isCharAllowed(sChar: string, iIndex: number);
		/**
		 * Adds some rule to the aggregation <code>rules</code>.
		 * @param oRule the rule to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addRule(oRule: MaskInputRule): MaskInput;
		/**
		 * Destroys all the rules in the aggregation <code>rules</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyRules(): MaskInput;
		/**
		 * Creates a new subclass of class sap.m.MaskInput with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.InputBase.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|MaskInputMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.InputBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.InputBase
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|InputBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>mask</code>.
		 * 
		 * Mask defined by its characters type (respectively, by its length).
		 * You should consider the following important facts:
		 * 1. The mask characters normally correspond to an existing rule (one rule per unique char).
		 * Characters which don't, are considered immutable characters (for example, the mask '2099', where '9' corresponds to a rule
		 * for digits, has the characters '2' and '0' as immutable).
		 * 2. Adding a rule corresponding to the <code>placeholderSymbol</code> is not recommended and would lead to an unpredictable behavior.
		 * 3. You can use the special escape character '^' called "Caret" prepending a rule character to make it immutable.
		 * Use the double escape '^^' if you want to make use of the escape character as a immutable one.
		 * @return Value of property <code>mask</code>
		 */
		getMask(): string;
		/**
		 * Gets current value of property <code>placeholderSymbol</code>.
		 * 
		 * Defines a placeholder symbol. Shown at the position where there is no user input yet.
		 * 
		 * Default value is <code>_</code>.
		 * @return Value of property <code>placeholderSymbol</code>
		 */
		getPlaceholderSymbol(): string;
		/**
		 * Gets content of aggregation <code>rules</code>.
		 * 
		 * A list of validation rules (one rule per mask character).
		 * @return 
		 */
		getRules(): MaskInputRule[];
		/**
		 * Checks for the provided <code>sap.m.MaskInputRule</code> in the aggregation <code>rules</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oRule The rule whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfRule(oRule: MaskInputRule): number;
		/**
		 * Inserts a rule into the aggregation <code>rules</code>.
		 * @param oRule the rule to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the rule should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the rule is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the rule is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertRule(oRule: MaskInputRule, iIndex: number): MaskInput;
		/**
		 * Removes all the controls from the aggregation <code>rules</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllRules(): MaskInputRule[];
		/**
		 * Removes a rule from the aggregation <code>rules</code>.
		 * @param vRule The rule to remove or its index or id
		 * @return The removed rule or <code>null</code>
		 */
		removeRule(vRule: number|string|MaskInputRule): MaskInputRule;
		/**
		 * Setter for property <code>value</code>.
		 * @param sValue New value for property <code>value</code>.
		 * @return <code>this</code> to allow method chaining.
		 */
		setValue(sValue: string): MaskInput;
		/**
		 * Setter for property <code>value</code>.
		 * 
		 * Default value is empty/<code>undefined</code>.
		 * @note Overload from base type sap.m.InputBase
		 * @param sValue New value for property <code>value</code>.
		 * @return <code>this</code> to allow method chaining.
		 */
		setValue(sValue: string): InputBase;
	}

	class MaskInputRule extends sap.ui.core.Element {
		/**
		 * Constructor for a new MaskInputRule.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.MaskInputRuleMetadata);
		/**
		 * Constructor for a new MaskInputRule.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.MaskInputRule with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|MaskInputRuleMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>maskFormatSymbol</code>.
		 * 
		 * Defines the symbol used in the mask format which will accept a certain range of characters.
		 * 
		 * Default value is <code>*</code>.
		 * @return Value of property <code>maskFormatSymbol</code>
		 */
		getMaskFormatSymbol(): string;
		/**
		 * Gets current value of property <code>regex</code>.
		 * 
		 * Defines the allowed characters as a regular expression.
		 * 
		 * Default value is <code>[a-zA-Z0-9]</code>.
		 * @return Value of property <code>regex</code>
		 */
		getRegex(): string;
	}

	class Menu extends sap.ui.core.Control {
		/**
		 * Constructor for a new Menu.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.MenuMetadata);
		/**
		 * Constructor for a new Menu.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some item to the aggregation <code>items</code>.
		 * @param oItem the item to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addItem(oItem: MenuItem): Menu;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>closed</code> event of this <code>sap.m.Menu</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Menu</code> itself.
		 * 
		 * Fired when the menu is closed.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Menu</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachClosed(oData: any, fnFunction: any, oListener?: any): Menu;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>itemSelected</code> event of this <code>sap.m.Menu</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Menu</code> itself.
		 * 
		 * Fired when a <code>MenuItem</code> is selected.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Menu</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachItemSelected(oData: any, fnFunction: any, oListener?: any): Menu;
		/**
		 * Binds aggregation <code>items</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindItems(oBindingInfo: any): Menu;
		/**
		 * Closes the <code>Menu</code>.
		 */
		close();
		/**
		 * Destroys all the items in the aggregation <code>items</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyItems(): Menu;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>closed</code> event of this <code>sap.m.Menu</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachClosed(fnFunction: any, oListener: any): Menu;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>itemSelected</code> event of this <code>sap.m.Menu</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachItemSelected(fnFunction: any, oListener: any): Menu;
		/**
		 * Creates a new subclass of class sap.m.Menu with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|MenuMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>closed</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireClosed(mArguments?: any): Menu;
		/**
		 * Fires event <code>itemSelected</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>item</code> of type <code>sap.m.MenuItem</code>The <code>MenuItem</code> which was selected.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireItemSelected(mArguments?: any): Menu;
		/**
		 * Gets content of aggregation <code>items</code>.
		 * 
		 * Defines the items contained within this control.
		 * @return 
		 */
		getItems(): MenuItem[];
		/**
		 * Gets current value of property <code>title</code>.
		 * 
		 * Defines the <code>Menu</code> title.
		 * @return Value of property <code>title</code>
		 */
		getTitle(): string;
		/**
		 * Checks for the provided <code>sap.m.MenuItem</code> in the aggregation <code>items</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oItem The item whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfItem(oItem: MenuItem): number;
		/**
		 * Initializes the control.
		 */
		init();
		/**
		 * Inserts a item into the aggregation <code>items</code>.
		 * @param oItem the item to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the item should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the item is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertItem(oItem: MenuItem, iIndex: number): Menu;
		/**
		 * Opens the <code>Menu</code> next to the given control.
		 * @param oControl The control that defines the position for the menu
		 * @param bWithKeyboard Whether the menu is opened with a shortcut or not
		 */
		openBy(oControl: any, bWithKeyboard: any);
		/**
		 * Removes all the controls from the aggregation <code>items</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllItems(): MenuItem[];
		/**
		 * Removes a item from the aggregation <code>items</code>.
		 * @param vItem The item to remove or its index or id
		 * @return The removed item or <code>null</code>
		 */
		removeItem(vItem: number|string|MenuItem): MenuItem;
		/**
		 * Sets the title of the <code>Menu</code>.
		 * @param sTitle The new title of the <code>Menu</code>
		 */
		setTitle(sTitle: string);
		/**
		 * Unbinds aggregation <code>items</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindItems(): Menu;
	}

	class MenuButton extends sap.ui.core.Control {
		/**
		 * Constructor for a new MenuButton.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.MenuButtonMetadata);
		/**
		 * Constructor for a new MenuButton.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>defaultAction</code> event of this <code>sap.m.MenuButton</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.MenuButton</code> itself.
		 * 
		 * Fired when the <code>buttonMode</code> is set to <code>Split</code> and the user presses the main button
		 * unless <code>useDefaultActionOnly</code> is set to <code>false</code> and another action
		 * from the menu has been selected previously.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.MenuButton</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachDefaultAction(oData: any, fnFunction: any, oListener?: any): MenuButton;
		/**
		 * Binds aggregation <code>menu</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindMenu(oBindingInfo: any): MenuButton;
		/**
		 * Destroys the menu in the aggregation <code>menu</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyMenu(): MenuButton;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>defaultAction</code> event of this <code>sap.m.MenuButton</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachDefaultAction(fnFunction: any, oListener: any): MenuButton;
		/**
		 * Creates a new subclass of class sap.m.MenuButton with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|MenuButtonMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>defaultAction</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireDefaultAction(mArguments?: any): MenuButton;
		/**
		 * Gets current value of property <code>activeIcon</code>.
		 * 
		 * The source property of an alternative icon for the active (pressed) state of the button.
		 * Both active and default icon properties should be defined and of the same type - image or icon font.
		 * If the <code>icon</code> property is not set or has a different type, the active icon is not displayed.
		 * @return Value of property <code>activeIcon</code>
		 */
		getActiveIcon(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>buttonMode</code>.
		 * 
		 * Defines whether the <code>MenuButton</code> is set to <code>Regular</code> or <code>Split</code> mode.
		 * 
		 * Default value is <code>Regular</code>.
		 * @return Value of property <code>buttonMode</code>
		 */
		getButtonMode(): MenuButtonMode;
		/**
		 * Gets current value of property <code>enabled</code>.
		 * 
		 * Boolean property to enable the control (default is <code>true</code>).
		 * <br/><b>Note:</b> Depending on custom settings, the buttons that are disabled have other colors than the enabled ones.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>enabled</code>
		 */
		getEnabled(): boolean;
		/**
		 * Gets current value of property <code>icon</code>.
		 * 
		 * Defines the icon to be displayed as a graphical element within the button.
		 * It can be an image or an icon from the icon font.
		 * @return Value of property <code>icon</code>
		 */
		getIcon(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>iconDensityAware</code>.
		 * 
		 * When set to <code>true</code> (default), one or more requests are sent trying to get the
		 * density perfect version of image if this version of image doesn't exist on the server.
		 * If only one version of image is provided, set this value to <code>false</code> to
		 * avoid the attempt of fetching density perfect image.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>iconDensityAware</code>
		 */
		getIconDensityAware(): boolean;
		/**
		 * Gets content of aggregation <code>menu</code>.
		 * 
		 * Defines the menu that opens for this button.
		 * @return 
		 */
		getMenu(): Menu;
		/**
		 * Gets current value of property <code>text</code>.
		 * 
		 * Defines the text of the <code>MenuButton</code>.
		 * <br/><b>Note:</b> In <code>Split</code> <code>buttonMode</code> with <code>useDefaultActionOnly</code>
		 * set to <code>false</code>, the text is changed to display the last selected item's text,
		 * while in <code>Regular</code> <code>buttonMode<code> the text stays unchanged.
		 * @return Value of property <code>text</code>
		 */
		getText(): string;
		/**
		 * Gets current value of property <code>textDirection</code>.
		 * 
		 * Specifies the element's text directionality with enumerated options.
		 * By default, the control inherits text direction from the DOM.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @return Value of property <code>textDirection</code>
		 */
		getTextDirection(): sap.ui.core.TextDirection;
		/**
		 * Gets current value of property <code>type</code>.
		 * 
		 * Defines the type of the <code>MenuButton</code> (for example, Default, Accept, Reject, Back, etc.)
		 * 
		 * Default value is <code>Default</code>.
		 * @return Value of property <code>type</code>
		 */
		getType(): ButtonType;
		/**
		 * Gets current value of property <code>useDefaultActionOnly</code>.
		 * 
		 * Controls whether the default action handler is invoked always or it is invoked only until a menu item is selected.
		 * Usable only if <code>buttonMode</code> is set to <code>Split</code>.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>useDefaultActionOnly</code>
		 */
		getUseDefaultActionOnly(): boolean;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Defines the width of the <code>MenuButton</code>.
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Initializes the control.
		 */
		init();
		/**
		 * Sets a new value for property <code>activeIcon</code>.
		 * 
		 * The source property of an alternative icon for the active (pressed) state of the button.
		 * Both active and default icon properties should be defined and of the same type - image or icon font.
		 * If the <code>icon</code> property is not set or has a different type, the active icon is not displayed.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sActiveIcon New value for property <code>activeIcon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setActiveIcon(sActiveIcon: sap.ui.core.URI): MenuButton;
		/**
		 * Sets the <code>buttonМode</code> of the control.
		 * @param sMode The new button mode
		 * @return This instance
		 */
		setButtonMode(sMode: MenuButtonMode): any;
		/**
		 * Sets a new value for property <code>enabled</code>.
		 * 
		 * Boolean property to enable the control (default is <code>true</code>).
		 * <br/><b>Note:</b> Depending on custom settings, the buttons that are disabled have other colors than the enabled ones.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bEnabled New value for property <code>enabled</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setEnabled(bEnabled: boolean): MenuButton;
		/**
		 * Sets a new value for property <code>iconDensityAware</code>.
		 * 
		 * When set to <code>true</code> (default), one or more requests are sent trying to get the
		 * density perfect version of image if this version of image doesn't exist on the server.
		 * If only one version of image is provided, set this value to <code>false</code> to
		 * avoid the attempt of fetching density perfect image.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bIconDensityAware New value for property <code>iconDensityAware</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIconDensityAware(bIconDensityAware: boolean): MenuButton;
		/**
		 * Sets the aggregated <code>menu</code>.
		 * @param oMenu The menu to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMenu(oMenu: Menu): MenuButton;
		/**
		 * Sets a new value for property <code>textDirection</code>.
		 * 
		 * Specifies the element's text directionality with enumerated options.
		 * By default, the control inherits text direction from the DOM.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @param sTextDirection New value for property <code>textDirection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTextDirection(sTextDirection: sap.ui.core.TextDirection): MenuButton;
		/**
		 * Sets the tooltip for the <code>MenuButton</code>.
		 * Can either be an instance of a TooltipBase subclass or a simple string.
		 * @param vTooltip The tooltip that should be shown.
		 * @return this instance
		 */
		setTooltip(vTooltip: sap.ui.core.TooltipBase): any;
		/**
		 * Sets a new tooltip for this object. The tooltip can either be a simple string
		 * (which in most cases will be rendered as the <code>title</code> attribute of this
		 * Element) or an instance of {@link sap.ui.core.TooltipBase}.
		 * 
		 * If a new tooltip is set, any previously set tooltip is deactivated.
		 * @note Overload from base type sap.ui.core.Element
		 * @param vTooltip 
		 */
		setTooltip(vTooltip: string|sap.ui.core.TooltipBase);
		/**
		 * Sets a new value for property <code>useDefaultActionOnly</code>.
		 * 
		 * Controls whether the default action handler is invoked always or it is invoked only until a menu item is selected.
		 * Usable only if <code>buttonMode</code> is set to <code>Split</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param sUseDefaultActionOnly New value for property <code>useDefaultActionOnly</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setUseDefaultActionOnly(sUseDefaultActionOnly: boolean): MenuButton;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Defines the width of the <code>MenuButton</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): MenuButton;
		/**
		 * Unbinds aggregation <code>menu</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindMenu(): MenuButton;
	}

	class MenuButtonMode {
		/**
		 * Default regular type (Menu button appears as a regular button, pressing opens a menu)
		 */
		static Regular: string;
		/**
		 * Split type (Menu button appears as a split button, pressing fires the default action a menu,
		 * pressing the arrow part opens a menu)
		 */
		static Split: string;
	}

	class MenuItem extends sap.ui.core.Item {
		/**
		 * Constructor for a new <code>MenuItem</code>.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.MenuItemMetadata);
		/**
		 * Constructor for a new <code>MenuItem</code>.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some item to the aggregation <code>items</code>.
		 * @param oItem the item to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addItem(oItem: MenuItem): MenuItem;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>aggregationChanged</code> event of this <code>sap.m.MenuItem</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.MenuItem</code> itself.
		 * 
		 * Fired when aggregation of the item changes.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.MenuItem</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachAggregationChanged(oData: any, fnFunction: any, oListener?: any): MenuItem;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this <code>sap.m.MenuItem</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.MenuItem</code> itself.
		 * 
		 * Fired after the item has been pressed.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.MenuItem</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachPress(oData: any, fnFunction: any, oListener?: any): MenuItem;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>propertyChanged</code> event of this <code>sap.m.MenuItem</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.MenuItem</code> itself.
		 * 
		 * Fired when a property of the item changes.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.MenuItem</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachPropertyChanged(oData: any, fnFunction: any, oListener?: any): MenuItem;
		/**
		 * Binds aggregation <code>items</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindItems(oBindingInfo: any): MenuItem;
		/**
		 * Destroys all the items in the aggregation <code>items</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyItems(): MenuItem;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>aggregationChanged</code> event of this <code>sap.m.MenuItem</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachAggregationChanged(fnFunction: any, oListener: any): MenuItem;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this <code>sap.m.MenuItem</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachPress(fnFunction: any, oListener: any): MenuItem;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>propertyChanged</code> event of this <code>sap.m.MenuItem</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachPropertyChanged(fnFunction: any, oListener: any): MenuItem;
		/**
		 * Creates a new subclass of class sap.m.MenuItem with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|MenuItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Item with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Item
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>aggregationChanged</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>aggregationName</code> of type <code>String</code>The aggregation name of the changed aggregation.</li>
		 * <li><code>methodName</code> of type <code>String</code>Which method changed the aggregation.</li>
		 * <li><code>methodParams</code> of type <code>Object</code>What parameters were used to change the aggregation.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireAggregationChanged(mArguments?: any): MenuItem;
		/**
		 * Fires event <code>press</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		firePress(mArguments?: any): MenuItem;
		/**
		 * Fires event <code>propertyChanged</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>propertyKey</code> of type <code>string</code>The property name to be changed.</li>
		 * <li><code>propertyValue</code> of type <code>mixed</code>The new property value.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		firePropertyChanged(mArguments?: any): MenuItem;
		/**
		 * Gets current value of property <code>icon</code>.
		 * 
		 * Defines the icon, which belongs to the item.
		 * This can be an URI to an image or an icon font URI.
		 * @return Value of property <code>icon</code>
		 */
		getIcon(): string;
		/**
		 * Gets content of aggregation <code>items</code>.
		 * 
		 * Defines the sub-items contained within this element.
		 * @return 
		 */
		getItems(): MenuItem[];
		/**
		 * Gets current value of property <code>startsSection</code>.
		 * 
		 * Defines whether a visual separator should be rendered before the item.
		 * <b>Note:</b> If an item is invisible its separator is also not displayed.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>startsSection</code>
		 */
		getStartsSection(): boolean;
		/**
		 * Gets current value of property <code>visible</code>.
		 * 
		 * Defines whether the item should be visible on the screen. If set to <code>false</code>,
		 * a placeholder is rendered instead of the real item.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>visible</code>
		 */
		getVisible(): boolean;
		/**
		 * Checks for the provided <code>sap.m.MenuItem</code> in the aggregation <code>items</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oItem The item whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfItem(oItem: MenuItem): number;
		/**
		 * Inserts a item into the aggregation <code>items</code>.
		 * @param oItem the item to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the item should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the item is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertItem(oItem: MenuItem, iIndex: number): MenuItem;
		/**
		 * Removes all the controls from the aggregation <code>items</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllItems(): MenuItem[];
		/**
		 * Removes a item from the aggregation <code>items</code>.
		 * @param vItem The item to remove or its index or id
		 * @return The removed item or <code>null</code>
		 */
		removeItem(vItem: number|string|MenuItem): MenuItem;
		/**
		 * Sets a new value for property <code>icon</code>.
		 * 
		 * Defines the icon, which belongs to the item.
		 * This can be an URI to an image or an icon font URI.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sIcon New value for property <code>icon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIcon(sIcon: string): MenuItem;
		/**
		 * Sets a new value for property <code>startsSection</code>.
		 * 
		 * Defines whether a visual separator should be rendered before the item.
		 * <b>Note:</b> If an item is invisible its separator is also not displayed.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bStartsSection New value for property <code>startsSection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setStartsSection(bStartsSection: boolean): MenuItem;
		/**
		 * Sets a new value for property <code>visible</code>.
		 * 
		 * Defines whether the item should be visible on the screen. If set to <code>false</code>,
		 * a placeholder is rendered instead of the real item.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bVisible New value for property <code>visible</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setVisible(bVisible: boolean): MenuItem;
		/**
		 * Unbinds aggregation <code>items</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindItems(): MenuItem;
	}

	class MessagePage extends sap.ui.core.Control {
		/**
		 * Constructor for a new MessagePage.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.MessagePageMetadata);
		/**
		 * Constructor for a new MessagePage.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID|sap.ui.core.Control): MessagePage;
		/**
		 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): MessagePage;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>navButtonPress</code> event of this <code>sap.m.MessagePage</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.MessagePage</code> itself.
		 * 
		 * This event is fired when Nav Button is pressed.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.MessagePage</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachNavButtonPress(oData: any, fnFunction: any, oListener?: any): MessagePage;
		/**
		 * Destroys the customDescription in the aggregation <code>customDescription</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyCustomDescription(): MessagePage;
		/**
		 * Destroys the customText in the aggregation <code>customText</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyCustomText(): MessagePage;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>navButtonPress</code> event of this <code>sap.m.MessagePage</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachNavButtonPress(fnFunction: any, oListener: any): MessagePage;
		/**
		 * Creates a new subclass of class sap.m.MessagePage with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|MessagePageMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>navButtonPress</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireNavButtonPress(mArguments?: any): MessagePage;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaDescribedBy</code>.
		 * @return 
		 */
		getAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
		 * @return 
		 */
		getAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Gets content of aggregation <code>customDescription</code>.
		 * 
		 * The (optional) custom description control of this page.
		 * Use this aggregation when the "description" (sap.m.Text) control needs to be replaced with a sap.m.Link control.
		 * "description" and "textDirection" setters can be used for this aggregation.
		 * @return 
		 */
		getCustomDescription(): Link;
		/**
		 * Gets content of aggregation <code>customText</code>.
		 * 
		 * The (optional) custom Text control of this page.
		 * Use this aggregation when the "text" (sap.m.Text) control needs to be replaced with a sap.m.Link control.
		 * "text" and "textDirection" setters can be used for this aggregation.
		 * @return 
		 */
		getCustomText(): Link;
		/**
		 * Gets current value of property <code>description</code>.
		 * 
		 * Determines the detailed description that shows additional information on the MessagePage.
		 * 
		 * Default value is <code>Check the filter settings.</code>.
		 * @return Value of property <code>description</code>
		 */
		getDescription(): string;
		/**
		 * Gets current value of property <code>icon</code>.
		 * 
		 * Determines the icon displayed on the MessagePage.
		 * 
		 * Default value is <code>sap-icon://documents</code>.
		 * @return Value of property <code>icon</code>
		 */
		getIcon(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>showHeader</code>.
		 * 
		 * Determines the visibility of the MessagePage header.
		 * Can be used to hide the header of the MessagePage when it's embedded in another page.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>showHeader</code>
		 */
		getShowHeader(): boolean;
		/**
		 * Gets current value of property <code>showNavButton</code>.
		 * 
		 * Determines the visibility of the navigation button in MessagePage header.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>showNavButton</code>
		 */
		getShowNavButton(): boolean;
		/**
		 * Gets current value of property <code>text</code>.
		 * 
		 * Determines the main text displayed on the MessagePage.
		 * 
		 * Default value is <code>No matching items found.</code>.
		 * @return Value of property <code>text</code>
		 */
		getText(): string;
		/**
		 * Gets current value of property <code>textDirection</code>.
		 * 
		 * Determines the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @return Value of property <code>textDirection</code>
		 */
		getTextDirection(): sap.ui.core.TextDirection;
		/**
		 * Gets current value of property <code>title</code>.
		 * 
		 * Determines the title in the header of MessagePage.
		 * @return Value of property <code>title</code>
		 */
		getTitle(): string;
		/**
		 * Removes all the controls in the association named <code>ariaDescribedBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
		 * @return The removed ariaDescribedBy or <code>null</code>
		 */
		removeAriaDescribedBy(vAriaDescribedBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
		 * @return The removed ariaLabelledBy or <code>null</code>
		 */
		removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Sets the aggregated <code>customDescription</code>.
		 * @param oCustomDescription The customDescription to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setCustomDescription(oCustomDescription: Link): MessagePage;
		/**
		 * Sets the aggregated <code>customText</code>.
		 * @param oCustomText The customText to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setCustomText(oCustomText: Link): MessagePage;
		/**
		 * Sets a new value for property <code>description</code>.
		 * 
		 * Determines the detailed description that shows additional information on the MessagePage.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Check the filter settings.</code>.
		 * @param sDescription New value for property <code>description</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDescription(sDescription: string): MessagePage;
		/**
		 * Sets a new value for property <code>icon</code>.
		 * 
		 * Determines the icon displayed on the MessagePage.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>sap-icon://documents</code>.
		 * @param sIcon New value for property <code>icon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIcon(sIcon: sap.ui.core.URI): MessagePage;
		/**
		 * Sets a new value for property <code>showHeader</code>.
		 * 
		 * Determines the visibility of the MessagePage header.
		 * Can be used to hide the header of the MessagePage when it's embedded in another page.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bShowHeader New value for property <code>showHeader</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowHeader(bShowHeader: boolean): MessagePage;
		/**
		 * Sets a new value for property <code>showNavButton</code>.
		 * 
		 * Determines the visibility of the navigation button in MessagePage header.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bShowNavButton New value for property <code>showNavButton</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowNavButton(bShowNavButton: boolean): MessagePage;
		/**
		 * Sets a new value for property <code>text</code>.
		 * 
		 * Determines the main text displayed on the MessagePage.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>No matching items found.</code>.
		 * @param sText New value for property <code>text</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setText(sText: string): MessagePage;
		/**
		 * Sets a new value for property <code>textDirection</code>.
		 * 
		 * Determines the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @param sTextDirection New value for property <code>textDirection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTextDirection(sTextDirection: sap.ui.core.TextDirection): MessagePage;
		/**
		 * Sets a new value for property <code>title</code>.
		 * 
		 * Determines the title in the header of MessagePage.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sTitle New value for property <code>title</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTitle(sTitle: string): MessagePage;
	}

	class MessagePopover extends sap.ui.core.Control {
		/**
		 * Constructor for a new MessagePopover
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.MessagePopoverMetadata);
		/**
		 * Constructor for a new MessagePopover
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some item to the aggregation <code>items</code>.
		 * @param oItem the item to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addItem(oItem: MessagePopoverItem): MessagePopover;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>afterClose</code> event of this <code>sap.m.MessagePopover</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.MessagePopover</code> itself.
		 * 
		 * This event will be fired after the popover is closed
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.MessagePopover</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachAfterClose(oData: any, fnFunction: any, oListener?: any): MessagePopover;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>afterOpen</code> event of this <code>sap.m.MessagePopover</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.MessagePopover</code> itself.
		 * 
		 * This event will be fired after the popover is opened
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.MessagePopover</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachAfterOpen(oData: any, fnFunction: any, oListener?: any): MessagePopover;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>beforeClose</code> event of this <code>sap.m.MessagePopover</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.MessagePopover</code> itself.
		 * 
		 * This event will be fired before the popover is closed
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.MessagePopover</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachBeforeClose(oData: any, fnFunction: any, oListener?: any): MessagePopover;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>beforeOpen</code> event of this <code>sap.m.MessagePopover</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.MessagePopover</code> itself.
		 * 
		 * This event will be fired before the popover is opened
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.MessagePopover</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachBeforeOpen(oData: any, fnFunction: any, oListener?: any): MessagePopover;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>itemSelect</code> event of this <code>sap.m.MessagePopover</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.MessagePopover</code> itself.
		 * 
		 * This event will be fired when description is shown
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.MessagePopover</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachItemSelect(oData: any, fnFunction: any, oListener?: any): MessagePopover;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>listSelect</code> event of this <code>sap.m.MessagePopover</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.MessagePopover</code> itself.
		 * 
		 * This event will be fired when one of the lists is shown when (not) filtered  by type
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.MessagePopover</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachListSelect(oData: any, fnFunction: any, oListener?: any): MessagePopover;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>longtextLoaded</code> event of this <code>sap.m.MessagePopover</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.MessagePopover</code> itself.
		 * 
		 * This event will be fired when the long text description data from a remote URL is loaded
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.MessagePopover</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachLongtextLoaded(oData: any, fnFunction: any, oListener?: any): MessagePopover;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>urlValidated</code> event of this <code>sap.m.MessagePopover</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.MessagePopover</code> itself.
		 * 
		 * This event will be fired when a validation of a URL from long text description is ready
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.MessagePopover</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachUrlValidated(oData: any, fnFunction: any, oListener?: any): MessagePopover;
		/**
		 * Closes the MessagePopover
		 * @return Reference to the 'this' for chaining purposes
		 */
		close(): MessagePopover;
		/**
		 * Destroys the headerButton in the aggregation <code>headerButton</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyHeaderButton(): MessagePopover;
		/**
		 * Destroys all the items in the aggregation <code>items</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyItems(): MessagePopover;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>afterClose</code> event of this <code>sap.m.MessagePopover</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachAfterClose(fnFunction: any, oListener: any): MessagePopover;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>afterOpen</code> event of this <code>sap.m.MessagePopover</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachAfterOpen(fnFunction: any, oListener: any): MessagePopover;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>beforeClose</code> event of this <code>sap.m.MessagePopover</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachBeforeClose(fnFunction: any, oListener: any): MessagePopover;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>beforeOpen</code> event of this <code>sap.m.MessagePopover</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachBeforeOpen(fnFunction: any, oListener: any): MessagePopover;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>itemSelect</code> event of this <code>sap.m.MessagePopover</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachItemSelect(fnFunction: any, oListener: any): MessagePopover;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>listSelect</code> event of this <code>sap.m.MessagePopover</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachListSelect(fnFunction: any, oListener: any): MessagePopover;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>longtextLoaded</code> event of this <code>sap.m.MessagePopover</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachLongtextLoaded(fnFunction: any, oListener: any): MessagePopover;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>urlValidated</code> event of this <code>sap.m.MessagePopover</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachUrlValidated(fnFunction: any, oListener: any): MessagePopover;
		/**
		 * Creates a new subclass of class sap.m.MessagePopover with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|MessagePopoverMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>afterClose</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>openBy</code> of type <code>sap.ui.core.Control</code>Refers to the control which opens the popover</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireAfterClose(mArguments?: any): MessagePopover;
		/**
		 * Fires event <code>afterOpen</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>openBy</code> of type <code>sap.ui.core.Control</code>This refers to the control which opens the popover</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireAfterOpen(mArguments?: any): MessagePopover;
		/**
		 * Fires event <code>beforeClose</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>openBy</code> of type <code>sap.ui.core.Control</code>Refers to the control which opens the popover
		 * See sap.ui.core.MessageType enum values for types</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireBeforeClose(mArguments?: any): MessagePopover;
		/**
		 * Fires event <code>beforeOpen</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>openBy</code> of type <code>sap.ui.core.Control</code>Refers to the control which opens the popover</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireBeforeOpen(mArguments?: any): MessagePopover;
		/**
		 * Fires event <code>itemSelect</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>item</code> of type <code>sap.m.MessagePopoverItem</code>Refers to the message popover item that is being presented</li>
		 * <li><code>messageTypeFilter</code> of type <code>sap.ui.core.MessageType</code>Refers to the type of messages being shown
		 * See sap.ui.core.MessageType values for types</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireItemSelect(mArguments?: any): MessagePopover;
		/**
		 * Fires event <code>listSelect</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>messageTypeFilter</code> of type <code>sap.ui.core.MessageType</code>This parameter refers to the type of messages being shown.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireListSelect(mArguments?: any): MessagePopover;
		/**
		 * Fires event <code>longtextLoaded</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireLongtextLoaded(mArguments?: any): MessagePopover;
		/**
		 * Fires event <code>urlValidated</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireUrlValidated(mArguments?: any): MessagePopover;
		/**
		 * Gets current value of property <code>asyncDescriptionHandler</code>.
		 * 
		 * Callback function for resolving a promise after description has been asynchronously loaded inside this function
		 * @return Value of property <code>asyncDescriptionHandler</code>
		 */
		getAsyncDescriptionHandler(): any;
		/**
		 * Gets current value of property <code>asyncURLHandler</code>.
		 * 
		 * Callback function for resolving a promise after a link has been asynchronously validated inside this function
		 * @return Value of property <code>asyncURLHandler</code>
		 */
		getAsyncURLHandler(): any;
		/**
		 * Gets content of aggregation <code>headerButton</code>.
		 * 
		 * A custom header button
		 * @return 
		 */
		getHeaderButton(): Button;
		/**
		 * Gets current value of property <code>initiallyExpanded</code>.
		 * 
		 * Sets the initial state of the control - expanded or collapsed. By default the control opens as expanded
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>initiallyExpanded</code>
		 */
		getInitiallyExpanded(): boolean;
		/**
		 * Gets content of aggregation <code>items</code>.
		 * 
		 * A list with message items
		 * @return 
		 */
		getItems(): MessagePopoverItem[];
		/**
		 * Gets current value of property <code>placement</code>.
		 * 
		 * Determines the position, where the control will appear on the screen. Possible values are: sap.m.VerticalPlacementType.Top, sap.m.VerticalPlacementType.Bottom and sap.m.VerticalPlacementType.Vertical.
		 * The default value is sap.m.VerticalPlacementType.Vertical. Setting this property while the control is open, will not cause any re-rendering and changing of the position. Changes will only be applied with the next interaction.
		 * 
		 * Default value is <code>Vertical</code>.
		 * @return Value of property <code>placement</code>
		 */
		getPlacement(): VerticalPlacementType;
		/**
		 * Checks for the provided <code>sap.m.MessagePopoverItem</code> in the aggregation <code>items</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oItem The item whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfItem(oItem: MessagePopoverItem): number;
		/**
		 * Inserts a item into the aggregation <code>items</code>.
		 * @param oItem the item to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the item should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the item is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertItem(oItem: MessagePopoverItem, iIndex: number): MessagePopover;
		/**
		 * The method checks if the MessagePopover is open. It returns true when the MessagePopover is currently open
		 * (this includes opening and closing animations), otherwise it returns false
		 * @return Whether the MessagePopover is open
		 */
		isOpen(): boolean;
		/**
		 * Opens the MessagePopover
		 * @param oControl Control which opens the MessagePopover
		 * @return Reference to the 'this' for chaining purposes
		 */
		openBy(oControl: sap.ui.core.Control): MessagePopover;
		/**
		 * Removes all the controls from the aggregation <code>items</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllItems(): MessagePopoverItem[];
		/**
		 * Removes a item from the aggregation <code>items</code>.
		 * @param vItem The item to remove or its index or id
		 * @return The removed item or <code>null</code>
		 */
		removeItem(vItem: number|string|MessagePopoverItem): MessagePopoverItem;
		/**
		 * Sets a new value for property <code>asyncDescriptionHandler</code>.
		 * 
		 * Callback function for resolving a promise after description has been asynchronously loaded inside this function
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param oAsyncDescriptionHandler New value for property <code>asyncDescriptionHandler</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setAsyncDescriptionHandler(oAsyncDescriptionHandler: any): MessagePopover;
		/**
		 * Sets a new value for property <code>asyncURLHandler</code>.
		 * 
		 * Callback function for resolving a promise after a link has been asynchronously validated inside this function
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param oAsyncURLHandler New value for property <code>asyncURLHandler</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setAsyncURLHandler(oAsyncURLHandler: any): MessagePopover;
		/**
		 * Setter for default description and URL validation callbacks across all instances of MessagePopover
		 * @param mDefaultHandlers An object setting default callbacks
		 */
		setDefaultHandlers(mDefaultHandlers: any);
		/**
		 * Sets the aggregated <code>headerButton</code>.
		 * @param oHeaderButton The headerButton to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHeaderButton(oHeaderButton: Button): MessagePopover;
		/**
		 * Sets a new value for property <code>initiallyExpanded</code>.
		 * 
		 * Sets the initial state of the control - expanded or collapsed. By default the control opens as expanded
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bInitiallyExpanded New value for property <code>initiallyExpanded</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setInitiallyExpanded(bInitiallyExpanded: boolean): MessagePopover;
		/**
		 * This method toggles between open and closed state of the MessagePopover instance.
		 * oControl parameter is mandatory in the same way as in 'openBy' method
		 * @param oControl Control which opens the MessagePopover
		 * @return Reference to the 'this' for chaining purposes
		 */
		toggle(oControl: sap.ui.core.Control): MessagePopover;
	}

	class MessagePopoverItem extends sap.ui.core.Element {
		/**
		 * Constructor for a new MessagePopoverItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.MessagePopoverItemMetadata);
		/**
		 * Constructor for a new MessagePopoverItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Destroys the link in the aggregation <code>link</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyLink(): MessagePopoverItem;
		/**
		 * Creates a new subclass of class sap.m.MessagePopoverItem with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|MessagePopoverItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>counter</code>.
		 * 
		 * Defines the number of messages for a given message.
		 * @return Value of property <code>counter</code>
		 */
		getCounter(): number;
		/**
		 * Gets current value of property <code>description</code>.
		 * 
		 * Specifies detailed description of the message
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>description</code>
		 */
		getDescription(): string;
		/**
		 * Gets content of aggregation <code>link</code>.
		 * 
		 * Adds a sap.m.Link control which will be displayed at the end of the description of a message.
		 * @return 
		 */
		getLink(): Link;
		/**
		 * Gets current value of property <code>longtextUrl</code>.
		 * 
		 * Specifies long text description location URL
		 * @return Value of property <code>longtextUrl</code>
		 */
		getLongtextUrl(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>markupDescription</code>.
		 * 
		 * Specifies if description should be interpreted as markup
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>markupDescription</code>
		 */
		getMarkupDescription(): boolean;
		/**
		 * Gets current value of property <code>subtitle</code>.
		 * 
		 * Specifies the subtitle of the message
		 * <b>Note:</b> This is only visible when the <code>title</code> property is not empty.
		 * @return Value of property <code>subtitle</code>
		 */
		getSubtitle(): string;
		/**
		 * Gets current value of property <code>title</code>.
		 * 
		 * Specifies the title of the message
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>title</code>
		 */
		getTitle(): string;
		/**
		 * Gets current value of property <code>type</code>.
		 * 
		 * Specifies the type of the message
		 * 
		 * Default value is <code>Error</code>.
		 * @return Value of property <code>type</code>
		 */
		getType(): sap.ui.core.MessageType;
		/**
		 * Sets a new value for property <code>counter</code>.
		 * 
		 * Defines the number of messages for a given message.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param iCounter New value for property <code>counter</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setCounter(iCounter: number): MessagePopoverItem;
		/**
		 * Sets a new value for property <code>description</code>.
		 * 
		 * Specifies detailed description of the message
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sDescription New value for property <code>description</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDescription(sDescription: string): MessagePopoverItem;
		/**
		 * Sets the aggregated <code>link</code>.
		 * @param oLink The link to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setLink(oLink: Link): MessagePopoverItem;
		/**
		 * Sets a new value for property <code>longtextUrl</code>.
		 * 
		 * Specifies long text description location URL
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sLongtextUrl New value for property <code>longtextUrl</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setLongtextUrl(sLongtextUrl: sap.ui.core.URI): MessagePopoverItem;
		/**
		 * Sets a new value for property <code>markupDescription</code>.
		 * 
		 * Specifies if description should be interpreted as markup
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bMarkupDescription New value for property <code>markupDescription</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMarkupDescription(bMarkupDescription: boolean): MessagePopoverItem;
		/**
		 * Sets a new value for property <code>subtitle</code>.
		 * 
		 * Specifies the subtitle of the message
		 * <b>Note:</b> This is only visible when the <code>title</code> property is not empty.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sSubtitle New value for property <code>subtitle</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setSubtitle(sSubtitle: string): MessagePopoverItem;
		/**
		 * Sets a new value for property <code>title</code>.
		 * 
		 * Specifies the title of the message
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sTitle New value for property <code>title</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTitle(sTitle: string): MessagePopoverItem;
		/**
		 * Sets a new value for property <code>type</code>.
		 * 
		 * Specifies the type of the message
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Error</code>.
		 * @param sType New value for property <code>type</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setType(sType: sap.ui.core.MessageType): MessagePopoverItem;
	}

	class MessageStrip extends sap.ui.core.Control {
		/**
		 * Constructor for a new MessageStrip.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.MessageStripMetadata);
		/**
		 * Constructor for a new MessageStrip.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>close</code> event of this <code>sap.m.MessageStrip</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.MessageStrip</code> itself.
		 * 
		 * This event will be fired after the container is closed.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.MessageStrip</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachClose(oData: any, fnFunction: any, oListener?: any): MessageStrip;
		/**
		 * Closes the MessageStrip.
		 * This method sets the visible property of the MessageStrip to false.
		 * The MessageStrip can be shown again by setting the visible property to true.
		 */
		close();
		/**
		 * Destroys the link in the aggregation <code>link</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyLink(): MessageStrip;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>close</code> event of this <code>sap.m.MessageStrip</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachClose(fnFunction: any, oListener: any): MessageStrip;
		/**
		 * Creates a new subclass of class sap.m.MessageStrip with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|MessageStripMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>close</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireClose(mArguments?: any): MessageStrip;
		/**
		 * Gets current value of property <code>customIcon</code>.
		 * 
		 * Determines a custom icon which is displayed.
		 * If none is set, the default icon for this message type is used.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>customIcon</code>
		 */
		getCustomIcon(): sap.ui.core.URI;
		/**
		 * Gets content of aggregation <code>link</code>.
		 * 
		 * Adds a sap.m.Link control which will be displayed at the end of the message.
		 * @return 
		 */
		getLink(): Link;
		/**
		 * Gets current value of property <code>showCloseButton</code>.
		 * 
		 * Determines if the message has a close button in the upper right corner.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>showCloseButton</code>
		 */
		getShowCloseButton(): boolean;
		/**
		 * Gets current value of property <code>showIcon</code>.
		 * 
		 * Determines if an icon is displayed for the message.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>showIcon</code>
		 */
		getShowIcon(): boolean;
		/**
		 * Gets current value of property <code>text</code>.
		 * 
		 * Determines the text of the message.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>text</code>
		 */
		getText(): string;
		/**
		 * Gets current value of property <code>type</code>.
		 * 
		 * Determines the type of messages that are displayed in the MessageStrip.
		 * Possible values are: Information (default), Success, Warning, Error.
		 * If None is passed, the value is set to Information and a warning is displayed in the console.
		 * 
		 * Default value is <code>Information</code>.
		 * @return Value of property <code>type</code>
		 */
		getType(): sap.ui.core.MessageType;
		/**
		 * Sets a new value for property <code>customIcon</code>.
		 * 
		 * Determines a custom icon which is displayed.
		 * If none is set, the default icon for this message type is used.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sCustomIcon New value for property <code>customIcon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setCustomIcon(sCustomIcon: sap.ui.core.URI): MessageStrip;
		/**
		 * Sets the aggregated <code>link</code>.
		 * @param oLink The link to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setLink(oLink: Link): MessageStrip;
		/**
		 * Sets a new value for property <code>showCloseButton</code>.
		 * 
		 * Determines if the message has a close button in the upper right corner.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bShowCloseButton New value for property <code>showCloseButton</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowCloseButton(bShowCloseButton: boolean): MessageStrip;
		/**
		 * Sets a new value for property <code>showIcon</code>.
		 * 
		 * Determines if an icon is displayed for the message.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bShowIcon New value for property <code>showIcon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowIcon(bShowIcon: boolean): MessageStrip;
		/**
		 * Setter for property text.
		 * Default value is empty/undefined
		 * @param sText new value for property text
		 * @return this to allow method chaining
		 */
		setText(sText: string): MessageStrip;
		/**
		 * Setter for property type.
		 * Default value is sap.ui.core.MessageType.Information
		 * @param sType The Message type
		 * @return this to allow method chaining
		 */
		setType(sType: sap.ui.core.MessageType): MessageStrip;
	}

	class MultiComboBox extends ComboBoxBase {
		/**
		 * Constructor for a new MultiComboBox.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.MultiComboBoxMetadata);
		/**
		 * Constructor for a new MultiComboBox.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some item <code>oItem</code> to the association named <code>selectedItems</code>.
		 * @param oItem The selected item to add; if empty, nothing is added.
		 * @return <code>this</code> to allow method chaining.
		 */
		addSelectedItem(oItem: sap.ui.core.Item): MultiComboBox;
		/**
		 * Adds selected items. Only items with valid keys are added as selected.
		 * @param aKeys An array of item keys that identifies the items to be added as selected
		 * @return 
		 */
		addSelectedKeys(aKeys: string[]): MultiComboBox;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>selectionChange</code> event of this <code>sap.m.MultiComboBox</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.MultiComboBox</code> itself.
		 * 
		 * Event is fired when selection of an item is changed.
		 * Note: please do not use the "change" event inherited from sap.m.InputBase
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.MultiComboBox</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachSelectionChange(oData: any, fnFunction: any, oListener?: any): MultiComboBox;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>selectionFinish</code> event of this <code>sap.m.MultiComboBox</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.MultiComboBox</code> itself.
		 * 
		 * Event is fired when user has finished a selection of items in a list box and list box has been closed.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.MultiComboBox</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachSelectionFinish(oData: any, fnFunction: any, oListener?: any): MultiComboBox;
		/**
		 * Clear the selection.
		 */
		clearSelection();
		/**
		 * Creates a picker. To be overwritten by subclasses.
		 * @param sPickerType 
		 * @return The picker pop-up to be used.
		 */
		createPicker(sPickerType: string): Popover|Dialog;
		/**
		 * Destroys all the items in the aggregation named <code>items</code>.
		 * @return <code>this</code> to allow method chaining.
		 */
		destroyItems(): MultiComboBox;
		/**
		 * Destroys all the items in the aggregation named <code>items</code>.
		 * @note Overload from base type sap.m.ComboBoxBase
		 * @return <code>this</code> to allow method chaining.
		 */
		destroyItems(): ComboBox;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>selectionChange</code> event of this <code>sap.m.MultiComboBox</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachSelectionChange(fnFunction: any, oListener: any): MultiComboBox;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>selectionFinish</code> event of this <code>sap.m.MultiComboBox</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachSelectionFinish(fnFunction: any, oListener: any): MultiComboBox;
		/**
		 * Creates a new subclass of class sap.m.MultiComboBox with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ComboBoxBase.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|MultiComboBoxMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.InputBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.InputBase
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|InputBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.ComboBoxTextField with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.InputBase.extend}.
		 * @note Overload from base type sap.m.ComboBoxTextField
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ComboBoxTextFieldMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.ComboBoxBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ComboBoxTextField.extend}.
		 * @note Overload from base type sap.m.ComboBoxBase
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ComboBoxBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>selectionChange</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>changedItem</code> of type <code>sap.ui.core.Item</code>Item which selection is changed</li>
		 * <li><code>selected</code> of type <code>boolean</code>Selection state: true if item is selected, false if
		 * item is not selected</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireSelectionChange(mArguments?: any): MultiComboBox;
		/**
		 * Fires event <code>selectionFinish</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>selectedItems</code> of type <code>sap.ui.core.Item[]</code>The selected items which are selected after list box has been closed.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireSelectionFinish(mArguments?: any): MultiComboBox;
		/**
		 * 
		 */
		getAccessibilityInfo();
		/**
		 * This function (if available on the concrete control) provides
		 * the current accessibility state of the control.
		 * 
		 * Applications must not call this hook method directly, it is called by the framework.
		 * 
		 * Subclasses of Control should implement this hook to provide any necessary accessibility information:
		 * 
		 * <pre>
		 * MyControl.prototype.getAccessibilityInfo = function() {
		 *    return {
		 *      role: "textbox",      // String which represents the WAI-ARIA role which is implemented by the control.
		 *      type: "date input",   // String which represents the control type (Must be a translated text). Might correlate with
		 *                            // the role.
		 *      description: "value", // String which describes the most relevant control state (e.g. the inputs value). Must be a
		 *                            // translated text.
		 *                            // Note: The type and the enabled/editable state must not be handled here.
		 *      focusable: true,      // Boolean which describes whether the control can get the focus.
		 *      enabled: true,        // Boolean which describes whether the control is enabled. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      editable: true,       // Boolean which describes whether the control is editable. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      children: []          // Array of accessibility info objects of children of the given control (e.g. when the control is a layout).
		 *                            // Note: Children should only be provided when it is helpful to understand the accessibility context
		 *                            //       (e.g. a form control must not provide details of its internals (fields, labels, ...) but a
		 *                            //       layout should).
		 *    };
		 * };
		 * </pre>
		 * 
		 * Note: The returned object provides the accessibility state of the control at the point in time when this function is called.
		 * @note Overload from base type sap.ui.core.Control
		 * @return Current accessibility state of the control.
		 */
		getAccessibilityInfo(): any;
		/**
		 * Gets the enabled items from the aggregation named <code>items</code>.
		 * @param aItems Items to filter.(optional)
		 * @return An array containing the enabled items.
		 */
		getEnabledItems(aItems?: sap.ui.core.Item[]): sap.ui.core.Item[];
		/**
		 * Gets the item with the given key from the aggregation named <code>items</code>.<br>
		 * <b>Note:</b> If duplicate keys exist, the first item matching the key is returned.
		 * @param sKey An item key that specifies the item to retrieve.
		 * @return 
		 */
		getItemByKey(sKey: string): sap.ui.core.Item;
		/**
		 * Retrieves the selected item objects from the association named <code>selectedItems</code>.
		 * @return Array of sap.ui.core.Item instances. The current target of the <code>selectedItems</code>
		 *          association.
		 */
		getSelectedItems(): sap.ui.core.Item[];
		/**
		 * Gets current value of property <code>selectedKeys</code>.
		 * 
		 * Keys of the selected items. If the key has no corresponding item, no changes will apply. If duplicate keys exists the first item matching the key is used.
		 * 
		 * Default value is <code>[]</code>.
		 * @return Value of property <code>selectedKeys</code>
		 */
		getSelectedKeys(): string[];
		/**
		 * Inserts an item into the aggregation named <code>items</code>.
		 * @param oItem The item to insert; if empty, nothing is inserted.
		 * @param iIndex The <code>0</code>-based index the item should be inserted at; for
		 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
		 *             greater than the current size of the aggregation, the item is inserted at
		 *             the last position.
		 * @return <code>this</code> to allow method chaining.
		 */
		insertItem(oItem: sap.ui.core.Item, iIndex: number): MultiComboBox;
		/**
		 * Inserts an item into the aggregation named <code>items</code>.
		 * @note Overload from base type sap.m.ComboBoxBase
		 * @param oItem The item to be inserted; if empty, nothing is inserted.
		 * @param iIndex The <code>0</code>-based index the item should be inserted at; for
		 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
		 *             greater than the current size of the aggregation, the item is inserted at the last position.
		 * @return <code>this</code> to allow method chaining.
		 */
		insertItem(oItem: sap.ui.core.Item, iIndex: number): ComboBoxBase;
		/**
		 * This hook method is called after the MultiComboBox's Pop-up is rendered.
		 */
		onAfterRenderingPicker();
		/**
		 * This hook method is called before the MultiComboBox's Pop-up is rendered.
		 */
		onBeforeRenderingPicker();
		/**
		 * Removes all the items in the aggregation named <code>items</code>.
		 * @return An array of sap.ui.core.Item of the removed items (might be empty).
		 */
		removeAllItems(): sap.ui.core.Item[];
		/**
		 * Removes all the controls in the association named <code>selectedItems</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllSelectedItems(): sap.ui.core.ID[];
		/**
		 * Removes an item from the aggregation named <code>items</code>.
		 * @param oItem The item to remove or its index or id.
		 * @return The removed item or null.
		 */
		removeItem(oItem: number|string|sap.ui.core.Item): sap.ui.core.Item;
		/**
		 * Removes an item from the aggregation named <code>items</code>.
		 * @note Overload from base type sap.m.ComboBoxBase
		 * @param vItem The item to remove or its index or ID.
		 * @return The removed item or null.
		 */
		removeItem(vItem: number|string|sap.ui.core.Item): sap.ui.core.Item;
		/**
		 * Removes an selectedItem from the association named <code>selectedItems</code>.
		 * @param vSelectedItem The selectedItem to be removed or its index or ID
		 * @return The removed selectedItem or <code>null</code>
		 */
		removeSelectedItem(vSelectedItem: number|sap.ui.core.ID|sap.ui.core.Item): sap.ui.core.ID;
		/**
		 * Removes selected items. Only items with valid keys are removed.
		 * @param aKeys An array of item keys that identifies the items to be removed
		 * @return 
		 */
		removeSelectedKeys(aKeys: string[]): MultiComboBox;
		/**
		 * Setter for association <code>selectedItems</code>.
		 * @param aItems new values for association <code>selectedItems</code>.
		 * Array of sap.ui.core.Item Id which becomes the new target of this <code>selectedItems</code> association.
		 * Alternatively, an array of sap.ui.core.Item instance may be given or null.
		 * @return <code>this</code> to allow method chaining.
		 */
		setSelectedItems(aItems: string[]|sap.ui.core.Item[]): MultiComboBox;
		/**
		 * Sets a new value for property <code>selectedKeys</code>.
		 * 
		 * Keys of the selected items. If the key has no corresponding item, no changes will apply. If duplicate keys exists the first item matching the key is used.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>[]</code>.
		 * @param sSelectedKeys New value for property <code>selectedKeys</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setSelectedKeys(sSelectedKeys: string[]): MultiComboBox;
	}

	class MultiInput extends Input {
		/**
		 * Constructor for a new MultiInput.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.MultiInputMetadata);
		/**
		 * Constructor for a new MultiInput.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some token to the aggregation <code>tokens</code>.
		 * @param oToken the token to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addToken(oToken: Token): MultiInput;
		/**
		 * Function adds an validation callback called before any new token gets added to the tokens aggregation
		 * @param fValidator 
		 */
		addValidator(fValidator: any);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>tokenChange</code> event of this <code>sap.m.MultiInput</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.MultiInput</code> itself.
		 * 
		 * Fired when the tokens aggregation changed (add / remove token)
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.MultiInput</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachTokenChange(oData: any, fnFunction: any, oListener?: any): MultiInput;
		/**
		 * Function overwrites clone function to add tokens to MultiInput
		 * @return reference to the newly created clone
		 */
		clone(): sap.ui.core.Element;
		/**
		 * Clones a tree of objects starting with the object on which clone is called first (root object).
		 * 
		 * The ids within the newly created clone tree are derived from the original ids by appending
		 * the given <code>sIdSuffix</code> (if no suffix is given, one will be created; it will be
		 * unique across multiple clone calls).
		 * 
		 * The <code>oOptions</code> configuration object can have the following properties:
		 * <ul>
		 * <li>The boolean value <code>cloneChildren</code> specifies wether associations/aggregations will be cloned</li>
		 * <li>The boolean value <code>cloneBindings</code> specifies if bindings will be cloned</li>
		 * </ul>
		 * 
		 * For each cloned object the following settings are cloned based on the metadata of the object and the defined options:
		 * <ul>
		 * <li>all properties that are not bound. If cloneBinding is false even these properties will be cloned;
		 * the values are used by reference, they are not cloned</li>
		 * <li>all aggregated objects that are not bound. If cloneBinding is false even the ones that are bound will be cloned;
		 * they are all cloned recursively using the same <code>sIdSuffix</code></li>
		 * <li>all associated controls; when an association points to an object inside the cloned object tree,
		 *     then the cloned association will be modified to that it points to the clone of the target object.
		 *     When the association points to a managed object outside of the cloned object tree, then its
		 *     target won't be changed.</li>
		 * <li>all models set via setModel(); used by reference </li>
		 * <li>all property and aggregation bindings (if cloneBindings is true); the pure binding infos (path, model name) are
		 *     cloned, but all other information like template control or factory function,
		 *     data type or formatter function are copied by reference. The bindings themselves
		 *     are created anew as they are specific for the combination (object, property, model).
		 *     As a result, any later changes to a binding of the original object are not reflected
		 *     in the clone, but changes to e.g the type or template etc. are.</li>
		 * </ul>
		 * 
		 * Each clone is created by first collecting the above mentioned settings and then creating
		 * a new instance with the normal constructor function. As a result, any side effects of
		 * mutator methods (setProperty etc.) or init hooks are repeated during clone creation.
		 * There is no need to override <code>clone()</code> just to reproduce these internal settings!
		 * 
		 * Custom controls however can override <code>clone()</code> to implement additional clone steps.
		 * They usually will first call <code>clone()</code> on the super class and then modify the
		 * returned clone accordingly.
		 * 
		 * Applications <b>must never provide</b> the second parameter <code>aLocaleIds</code>.
		 * It is determined automatically for the root object (and its non-existance also serves as
		 * an indicator for the root object). Specifying it will break the implementation of <code>clone()</code>.
		 * @note Overload from base type sap.ui.base.ManagedObject
		 * @param sIdSuffix a suffix to be appended to the cloned object id(optional)
		 * @param aLocalIds an array of local IDs within the cloned hierarchy (internally used)(optional)
		 * @param oOptions configuration object(optional)
		 * @return reference to the newly created clone
		 */
		clone(sIdSuffix?: string, aLocalIds?: string[], oOptions?: any): sap.ui.base.ManagedObject;
		/**
		 * Clone delegates
		 * @note Overload from base type sap.ui.core.Element
		 * @param sIdSuffix a suffix to be appended to the cloned element id(optional)
		 * @param aLocalIds an array of local IDs within the cloned hierarchy (internally used)(optional)
		 * @return reference to the newly created clone
		 */
		clone(sIdSuffix?: string, aLocalIds?: string[]): sap.ui.base.ManagedObject;
		/**
		 * Overrides {@link sap.ui.core.Element#clone Element.clone} to clone additional
		 * internal state.
		 * 
		 * The additionally cloned information contains:
		 * <ul>
		 * <li>browser event handlers attached with {@link #attachBrowserEvent}
		 * <li>text selection behavior
		 * <li>style classes added with {@link #addStyleClass}
		 * </ul>
		 * @note Overload from base type sap.ui.core.Control
		 * @param sIdSuffix a suffix to be appended to the cloned element id(optional)
		 * @param aLocalIds an array of local IDs within the cloned hierarchy (internally used)(optional)
		 * @return reference to the newly created clone
		 */
		clone(sIdSuffix?: string, aLocalIds?: string[]): sap.ui.core.Element;
		/**
		 * Close multi-line MultiInput in multi-line mode
		 */
		closeMultiLine();
		/**
		 * Destroys all the tokens in the aggregation <code>tokens</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyTokens(): MultiInput;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>tokenChange</code> event of this <code>sap.m.MultiInput</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachTokenChange(fnFunction: any, oListener: any): MultiInput;
		/**
		 * Creates a new subclass of class sap.m.MultiInput with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.Input.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|MultiInputMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.InputBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.InputBase
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|InputBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.Input with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.InputBase.extend}.
		 * @note Overload from base type sap.m.Input
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|InputMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>tokenChange</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>type</code> of type <code>string</code>Type of tokenChange event.
		 * There are four TokenChange types: "added", "removed", "removedAll", "tokensChanged".
		 * Use Tokenizer.TokenChangeType.Added for "added",	Tokenizer.TokenChangeType.Removed for "removed", Tokenizer.TokenChangeType.RemovedAll for "removedAll" and Tokenizer.TokenChangeType.TokensChanged for "tokensChanged".</li>
		 * <li><code>token</code> of type <code>sap.m.Token</code>The added token or removed token.
		 * This parameter is used when tokenChange type is "added" or "removed".</li>
		 * <li><code>tokens</code> of type <code>sap.m.Token[]</code>The array of removed tokens.
		 * This parameter is used when tokenChange type is "removedAll".</li>
		 * <li><code>addedTokens</code> of type <code>sap.m.Token[]</code>The array of tokens that are added.
		 * This parameter is used when tokenChange type is "tokenChanged".</li>
		 * <li><code>removedTokens</code> of type <code>sap.m.Token[]</code>The array of tokens that are removed.
		 * This parameter is used when tokenChange type is "tokenChanged".</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireTokenChange(mArguments?: any): MultiInput;
		/**
		 * 
		 */
		getAccessibilityInfo();
		/**
		 * This function (if available on the concrete control) provides
		 * the current accessibility state of the control.
		 * 
		 * Applications must not call this hook method directly, it is called by the framework.
		 * 
		 * Subclasses of Control should implement this hook to provide any necessary accessibility information:
		 * 
		 * <pre>
		 * MyControl.prototype.getAccessibilityInfo = function() {
		 *    return {
		 *      role: "textbox",      // String which represents the WAI-ARIA role which is implemented by the control.
		 *      type: "date input",   // String which represents the control type (Must be a translated text). Might correlate with
		 *                            // the role.
		 *      description: "value", // String which describes the most relevant control state (e.g. the inputs value). Must be a
		 *                            // translated text.
		 *                            // Note: The type and the enabled/editable state must not be handled here.
		 *      focusable: true,      // Boolean which describes whether the control can get the focus.
		 *      enabled: true,        // Boolean which describes whether the control is enabled. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      editable: true,       // Boolean which describes whether the control is editable. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      children: []          // Array of accessibility info objects of children of the given control (e.g. when the control is a layout).
		 *                            // Note: Children should only be provided when it is helpful to understand the accessibility context
		 *                            //       (e.g. a form control must not provide details of its internals (fields, labels, ...) but a
		 *                            //       layout should).
		 *    };
		 * };
		 * </pre>
		 * 
		 * Note: The returned object provides the accessibility state of the control at the point in time when this function is called.
		 * @note Overload from base type sap.ui.core.Control
		 * @return Current accessibility state of the control.
		 */
		getAccessibilityInfo(): any;
		/**
		 * Get the reference element which the message popup should dock to
		 * @return Dom Element which the message popup should dock to
		 */
		getDomRefForValueStateMessage(): any;
		/**
		 * Gets current value of property <code>enableMultiLineMode</code>.
		 * 
		 * If set to true, the MultiInput will be displayed in multi-line display mode.
		 * In multi-line display mode, all tokens can be fully viewed and easily edited in the MultiInput.
		 * The default value is false.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>enableMultiLineMode</code>
		 */
		getEnableMultiLineMode(): boolean;
		/**
		 * Gets current value of property <code>maxTokens</code>.
		 * 
		 * The max number of tokens that is allowed in MultiInput.
		 * @return Value of property <code>maxTokens</code>
		 */
		getMaxTokens(): number;
		/**
		 * Function returns domref which acts as reference point for the opening suggestion menu
		 * @return the domref at which to open the suggestion menu
		 */
		getPopupAnchorDomRef(): any;
		/**
		 * Gets content of aggregation <code>tokens</code>.
		 * 
		 * The currently displayed tokens
		 * @return 
		 */
		getTokens(): Token[];
		/**
		 * Checks for the provided <code>sap.m.Token</code> in the aggregation <code>tokens</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oToken The token whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfToken(oToken: Token): number;
		/**
		 * Inserts a token into the aggregation <code>tokens</code>.
		 * @param oToken the token to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the token should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the token is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the token is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertToken(oToken: Token, iIndex: number): MultiInput;
		/**
		 * Focus is on MultiInput
		 * @param oEvent 
		 */
		onfocusin(oEvent: jQuery.Event);
		/**
		 * When press ESC, deselect all tokens and all texts
		 * @param oEvent 
		 */
		onsapescape(oEvent: jQuery.Event);
		/**
		 * When tap on text field, deselect all tokens
		 * @param oEvent 
		 */
		ontap(oEvent: jQuery.Event);
		/**
		 * Expand multi-line MultiInput in multi-line mode
		 */
		openMultiLine();
		/**
		 * Removes all the controls from the aggregation <code>tokens</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllTokens(): Token[];
		/**
		 * Function removes all validation callbacks
		 */
		removeAllValidators();
		/**
		 * Removes a token from the aggregation <code>tokens</code>.
		 * @param vToken The token to remove or its index or id
		 * @return The removed token or <code>null</code>
		 */
		removeToken(vToken: number|string|Token): Token;
		/**
		 * Function removes an validation callback
		 * @param fValidator 
		 */
		removeValidator(fValidator: any);
		/**
		 * Setter for property <code>enableMultiLineMode</code>.
		 */
		setEnableMultiLineMode();
		/**
		 * Sets a new value for property <code>maxTokens</code>.
		 * 
		 * The max number of tokens that is allowed in MultiInput.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param iMaxTokens New value for property <code>maxTokens</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMaxTokens(iMaxTokens: number): MultiInput;
		/**
		 * Function sets an array of tokens, existing tokens will get overridden
		 * @param aTokens the new token set
		 */
		setTokens(aTokens: Token[]);
	}

	class NavContainer extends sap.ui.core.Control {
		/**
		 * Constructor for a new NavContainer.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.NavContainerMetadata);
		/**
		 * Constructor for a new NavContainer.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds a custom transition to the NavContainer type (not to a particular instance!). The transition is identified by a "name". Make sure to only use names that will not collide with transitions which may be added to the NavContainer later. A suggestion is to use the prefix "c_" or "_" for your custom transitions to ensure this.
		 * 
		 * "to" and "back" are the transition functions for the forward and backward navigation.
		 * Both will be called with the following parameters:
		 * - oFromPage: the Control which is currently being displayed by the NavContainer
		 * - oToPage: the Control which should be displayed by the NavContainer after the transition
		 * - fCallback: a function which MUST be called when the transition has completed
		 * - oTransitionParameters: a data object that can be given by application code when triggering the transition by calling to() or back(); this object could give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration
		 * 
		 * The contract for "to" and "back" is that they may do an animation of their choice, but it should not take "too long". At the beginning of the transition the target page "oToPage" does have the CSS class "sapMNavItemHidden" which initially hides the target page (visibility:hidden). The transition can do any preparation (e.g. move that page out of the screen or make it transparent) and then should remove this CSS class.
		 * After the animation the target page "oToPage" should cover the entire screen and the source page "oFromPage" should not be visible anymore. This page should then have the CSS class "sapMNavItemHidden".
		 * For adding/removing this or other CSS classes, the transition can use the addStyleClass/removeStyleClass method:
		 * oFromPage.addStyleClass("sapMNavItemHidden");
		 * When the transition is complete, it MUST call the given fCallback method to inform the NavContainer that navigation has finished!
		 * 
		 * Hint: if the target page of your transition stays black on iPhone, try wrapping the animation start into a
		 * setTimeout(..., 0)
		 * block (delayed, but without waiting).
		 * 
		 * This method can be called on any NavContainer instance or statically on the sap.m.NavContainer type. However, the transition will always be registered for the type (and ALL instances), not for the single instance on which this method was invoked.
		 * 
		 * Returns the sap.m.NavContainer type if called statically, or "this" (to allow method chaining) if called on a particular NavContainer instance.
		 * @param sName The name of the transition. This name can be used by the application to choose this transition when navigating "to()" or "back()": the "transitionName" parameter of "NavContainer.to()" corresponds to this name, the back() navigation will automatically use the same transition.
		 * 
		 *         Make sure to only use names that will not collide with transitions which may be added to the NavContainer later. A suggestion is to use the prefix "c_" or "_" for your custom transitions to ensure this.
		 * @param oTo The function which will be called by the NavContainer when the application navigates "to()", using this animation's name. The NavContainer instance is the "this" context within the animation function.
		 * 
		 *         See the documentation of NavContainer.addCustomTransitions for more details about this function.
		 * @param oBack The function which will be called by the NavContainer when the application navigates "back()" from a page where it had navigated to using this animation's name. The NavContainer instance is the "this" context within the animation function.
		 * 
		 *         See the documentation of NavContainer.addCustomTransitions for more details about this function.
		 * @return 
		 */
		addCustomTransition(sName: string, oTo: any, oBack: any): NavContainer;
		/**
		 * Adds some page to the aggregation <code>pages</code>.
		 * @param oPage the page to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addPage(oPage: sap.ui.core.Control): NavContainer;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>afterNavigate</code> event of this <code>sap.m.NavContainer</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.NavContainer</code> itself.
		 * 
		 * The event is fired when navigation between two pages has completed. In case of animated transitions this event is fired with some delay after the "navigate" event.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.NavContainer</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachAfterNavigate(oData: any, fnFunction: any, oListener?: any): NavContainer;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>navigate</code> event of this <code>sap.m.NavContainer</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.NavContainer</code> itself.
		 * 
		 * The event is fired when navigation between two pages has been triggered. The transition (if any) to the new page has not started yet.
		 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.NavContainer</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachNavigate(oData: any, fnFunction: any, oListener?: any): NavContainer;
		/**
		 * Navigates back one level. If already on the initial page and there is no place to go back, nothing happens.
		 * 
		 * Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given backData object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property. The original "data" object from the "to" navigation is also available in these event objects.
		 * @param oBackData Since version 1.7.1. This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as "backData" property. (The original data from the "to()" navigation will still be available as "data" property.)
		 * 
		 *         In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
		 *         For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.
		 * 
		 *         When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.(optional)
		 * @param oTransitionParameters Since version 1.7.1. This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
		 *         The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
		 * 
		 *         In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
		 * 
		 *         NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.(optional)
		 * @return 
		 */
		back(oBackData?: any, oTransitionParameters?: any): NavContainer;
		/**
		 * Navigates back to the nearest previous page in the NavContainer history with the given ID. If there is no such page among the previous pages, nothing happens.
		 * The transition effect which had been used to get to the current page is inverted and used for this navigation.
		 * 
		 * Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given backData object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property. The original "data" object from the "to" navigation is also available in these event objects.
		 * @param sPageId The ID of the screen to which back navigation should happen. The ID or the control itself can be given. The nearest such page among the previous pages in the history stack will be used.
		 * @param oBackData This optional object can carry any payload data which should be made available to the target page of the "backToPage" navigation. The event on the target page will contain this data object as "backData" property.
		 * 
		 *         When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.(optional)
		 * @param oTransitionParameters This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
		 *         The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
		 * 
		 *         In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
		 * 
		 *         NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.(optional)
		 * @return 
		 */
		backToPage(sPageId: string, oBackData?: any, oTransitionParameters?: any): NavContainer;
		/**
		 * Navigates back to the initial/top level (this is the element aggregated as "initialPage", or the first added element). If already on the initial page, nothing happens.
		 * The transition effect which had been used to get to the current page is inverted and used for this navigation.
		 * 
		 * Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given backData object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property.
		 * @param oBackData This optional object can carry any payload data which should be made available to the target page of the "backToTop" navigation. The event on the target page will contain this data object as "backData" property.
		 * 
		 *         When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.(optional)
		 * @param oTransitionParameters This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
		 *         The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
		 * 
		 *         In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
		 * 
		 *         NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.(optional)
		 * @return 
		 */
		backToTop(oBackData?: any, oTransitionParameters?: any): NavContainer;
		/**
		 * Returns whether the current page is the top/initial page.
		 * 
		 * Note: going to the initial page again with a row of "to" navigations causes the initial page to be displayed again, but logically one is not at the top level, so this method returns "false" in this case.
		 * @return 
		 */
		currentPageIsTopPage(): boolean;
		/**
		 * Destroys all the pages in the aggregation <code>pages</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyPages(): NavContainer;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>afterNavigate</code> event of this <code>sap.m.NavContainer</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachAfterNavigate(fnFunction: any, oListener: any): NavContainer;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>navigate</code> event of this <code>sap.m.NavContainer</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachNavigate(fnFunction: any, oListener: any): NavContainer;
		/**
		 * Creates a new subclass of class sap.m.NavContainer with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|NavContainerMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>afterNavigate</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>from</code> of type <code>sap.ui.core.Control</code>The page which had been shown before navigation.</li>
		 * <li><code>fromId</code> of type <code>string</code>The ID of the page which had been shown before navigation.</li>
		 * <li><code>to</code> of type <code>sap.ui.core.Control</code>The page which is now shown after navigation.</li>
		 * <li><code>toId</code> of type <code>string</code>The ID of the page which is now shown after navigation.</li>
		 * <li><code>firstTime</code> of type <code>boolean</code>Whether the "to" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.</li>
		 * <li><code>isTo</code> of type <code>boolean</code>Whether was a forward navigation, triggered by "to()".</li>
		 * <li><code>isBack</code> of type <code>boolean</code>Whether this was a back navigation, triggered by "back()".</li>
		 * <li><code>isBackToTop</code> of type <code>boolean</code>Whether this was a navigation to the root page, triggered by "backToTop()".</li>
		 * <li><code>isBackToPage</code> of type <code>boolean</code>Whether this was a navigation to a specific page, triggered by "backToPage()".</li>
		 * <li><code>direction</code> of type <code>string</code>How the navigation was triggered, possible values are "to", "back", "backToPage", and "backToTop".</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireAfterNavigate(mArguments?: any): NavContainer;
		/**
		 * Fires event <code>navigate</code> to attached listeners.
		 * 
		 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>from</code> of type <code>sap.ui.core.Control</code>The page which was shown before the current navigation.</li>
		 * <li><code>fromId</code> of type <code>string</code>The ID of the page which was shown before the current navigation.</li>
		 * <li><code>to</code> of type <code>sap.ui.core.Control</code>The page which will be shown after the current navigation.</li>
		 * <li><code>toId</code> of type <code>string</code>The ID of the page which will be shown after the current navigation.</li>
		 * <li><code>firstTime</code> of type <code>boolean</code>Whether the "to" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.</li>
		 * <li><code>isTo</code> of type <code>boolean</code>Whether this is a forward navigation, triggered by "to()".</li>
		 * <li><code>isBack</code> of type <code>boolean</code>Whether this is a back navigation, triggered by "back()".</li>
		 * <li><code>isBackToTop</code> of type <code>boolean</code>Whether this is a navigation to the root page, triggered by "backToTop()".</li>
		 * <li><code>isBackToPage</code> of type <code>boolean</code>Whether this was a navigation to a specific page, triggered by "backToPage()".</li>
		 * <li><code>direction</code> of type <code>string</code>How the navigation was triggered, possible values are "to", "back", "backToPage", and "backToTop".</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Whether or not to prevent the default action
		 */
		fireNavigate(mArguments?: any): boolean;
		/**
		 * Gets current value of property <code>autoFocus</code>.
		 * 
		 * Determines whether the initial focus is set automatically on first rendering and after navigating to a new page.
		 * This is useful when on touch devices the keyboard pops out due to the focus being automatically set on an input field.
		 * If necessary the "afterShow" event can be used to focus another element.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>autoFocus</code>
		 */
		getAutoFocus(): boolean;
		/**
		 * Returns the currently displayed page-level control. Note: it is not necessarily an instance of sap.m.Page, but it could also be a sap.ui.core.View, sap.m.Carousel, or whatever is aggregated.
		 * 
		 * Returns undefined if no page has been added yet.
		 * @return 
		 */
		getCurrentPage(): sap.ui.core.Control;
		/**
		 * Gets current value of property <code>defaultTransitionName</code>.
		 * 
		 * The type of the transition/animation to apply when "to()" is called without defining a transition type to use. The default is "slide". Other options are: "fade", "flip" and "show" - and the names of any registered custom transitions.
		 * 
		 * Default value is <code>slide</code>.
		 * @return Value of property <code>defaultTransitionName</code>
		 */
		getDefaultTransitionName(): string;
		/**
		 * Gets current value of property <code>height</code>.
		 * 
		 * The height of the NavContainer. Can be changed when the NavContainer should not cover the whole available area.
		 * 
		 * Default value is <code>100%</code>.
		 * @return Value of property <code>height</code>
		 */
		getHeight(): sap.ui.core.CSSSize;
		/**
		 * ID of the element which is the current target of the association <code>initialPage</code>, or <code>null</code>.
		 * @return 
		 */
		getInitialPage(): sap.ui.core.ID;
		/**
		 * Returns the control with the given ID from the "pages" aggregation (if available).
		 * @param sId The ID of the aggregated control to find.
		 * @return 
		 */
		getPage(sId: string): sap.ui.core.Control;
		/**
		 * Gets content of aggregation <code>pages</code>.
		 * 
		 * The content entities between which this NavContainer navigates. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.
		 * 
		 * These aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}
		 * @return 
		 */
		getPages(): sap.ui.core.Control[];
		/**
		 * Returns the previous page (the page from which the user drilled down to the current page with "to()").
		 * Note: this is not the page which the user has seen before, but the page which is the target of the next "back()" navigation.
		 * If there is no previous page, "undefined" is returned.
		 * @return 
		 */
		getPreviousPage(): sap.ui.core.Control;
		/**
		 * Gets current value of property <code>visible</code>.
		 * 
		 * Whether the NavContainer is visible.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>visible</code>
		 */
		getVisible(): boolean;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * The width of the NavContainer. Can be changed when the NavContainer should not cover the whole available area.
		 * 
		 * Default value is <code>100%</code>.
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>pages</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oPage The page whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfPage(oPage: sap.ui.core.Control): number;
		/**
		 * Inserts a page into the aggregation <code>pages</code>.
		 * @param oPage the page to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the page should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the page is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the page is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertPage(oPage: sap.ui.core.Control, iIndex: number): NavContainer;
		/**
		 * Inserts the page/control with the specified ID into the navigation history stack of the NavContainer.
		 * 
		 * This can be used for deep-linking when the user directly reached a drilldown detail page using a bookmark and then wants to navigate up in the drilldown hierarchy. Normally such a back navigation would not be possible because there is no previous page in the NavContainer's history stack.
		 * @param sPageId The ID of the control/page/screen which is inserted into the history stack. The respective control must be aggregated by the NavContainer, otherwise this will cause an error.
		 * @param sTransitionName The type of the transition/animation which would have been used to navigate from the (inserted) previous page to the current page. When navigating back, the inverse animation will be applied.
		 *         This parameter can be omitted; then the default is "slide" (horizontal movement from the right).(optional)
		 * @param oData This optional object can carry any payload data which would have been given to the inserted previous page if the user would have done a normal forward navigation to it.(optional)
		 * @return 
		 */
		insertPreviousPage(sPageId: string, sTransitionName?: string, oData?: any): NavContainer;
		/**
		 * Removes all the controls from the aggregation <code>pages</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllPages(): sap.ui.core.Control[];
		/**
		 * Removes a page from the aggregation <code>pages</code>.
		 * @param vPage The page to remove or its index or id
		 * @return The removed page or <code>null</code>
		 */
		removePage(vPage: number|string|sap.ui.core.Control): sap.ui.core.Control;
		/**
		 * Sets a new value for property <code>autoFocus</code>.
		 * 
		 * Determines whether the initial focus is set automatically on first rendering and after navigating to a new page.
		 * This is useful when on touch devices the keyboard pops out due to the focus being automatically set on an input field.
		 * If necessary the "afterShow" event can be used to focus another element.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bAutoFocus New value for property <code>autoFocus</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setAutoFocus(bAutoFocus: boolean): NavContainer;
		/**
		 * Sets a new value for property <code>defaultTransitionName</code>.
		 * 
		 * The type of the transition/animation to apply when "to()" is called without defining a transition type to use. The default is "slide". Other options are: "fade", "flip" and "show" - and the names of any registered custom transitions.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>slide</code>.
		 * @param sDefaultTransitionName New value for property <code>defaultTransitionName</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDefaultTransitionName(sDefaultTransitionName: string): NavContainer;
		/**
		 * Sets a new value for property <code>height</code>.
		 * 
		 * The height of the NavContainer. Can be changed when the NavContainer should not cover the whole available area.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>100%</code>.
		 * @param sHeight New value for property <code>height</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHeight(sHeight: sap.ui.core.CSSSize): NavContainer;
		/**
		 * Sets the associated <code>initialPage</code>.
		 * @param oInitialPage ID of an element which becomes the new target of this initialPage association; alternatively, an element instance may be given
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setInitialPage(oInitialPage: sap.ui.core.ID|sap.ui.core.Control): NavContainer;
		/**
		 * Sets a new value for property <code>visible</code>.
		 * 
		 * Whether the NavContainer is visible.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bVisible New value for property <code>visible</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setVisible(bVisible: boolean): NavContainer;
		/**
		 * Sets a new value for property <code>visible</code>.
		 * 
		 * Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead of the real control
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @note Overload from base type sap.ui.core.Control
		 * @param bVisible New value for property <code>visible</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setVisible(bVisible: boolean): sap.ui.core.Control;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * The width of the NavContainer. Can be changed when the NavContainer should not cover the whole available area.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>100%</code>.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): NavContainer;
		/**
		 * Navigates to the next page (with drill-down semantic) with the given (or default) animation. This creates a new history item inside the NavContainer and allows going back.
		 * 
		 * Note that any modifications to the target page (like setting its title, or anything else that could cause a re-rendering) should be done BEFORE calling to(), in order to avoid unwanted side effects, e.g. related to the page animation.
		 * 
		 * Available transitions currently include "slide" (default), "fade", "flip", and "show". None of these is currently making use of any given transitionParameters.
		 * 
		 * Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given data object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property.
		 * @param sPageId The screen to which drilldown should happen. The ID or the control itself can be given.
		 * @param sTransitionName The type of the transition/animation to apply. This parameter can be omitted; then the default is "slide" (horizontal movement from the right).
		 *         Other options are: "fade", "flip", and "show" and the names of any registered custom transitions.
		 * 
		 *         None of the standard transitions is currently making use of any given transition parameters.(optional)
		 * @param oData Since version 1.7.1. This optional object can carry any payload data which should be made available to the target page. The "beforeShow" event on the target page will contain this data object as "data" property.
		 * 
		 *         Use case: in scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
		 * 
		 *         When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.(optional)
		 * @param oTransitionParameters Since version 1.7.1. This optional object can contain additional information for the transition function, like the DOM element which triggered the transition or the desired transition duration.
		 * 
		 *         For a proper parameter order, the "data" parameter must be given when the "transitionParameters" parameter is used. (it can be given as "null")
		 * 
		 *         NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
		 *         The "show", "slide" and "fade" transitions do not use any parameter.(optional)
		 * @return 
		 */
		to(sPageId: string, sTransitionName?: string, oData?: any, oTransitionParameters?: any): NavContainer;
	}

	interface NavContainerChild {
		/**
		 * This event is fired every time when the NavContainer has made this child control invisible. In case of animated transitions this
		 * event is fired after the transition finishes. This control is now no longer being displayed and not animated anymore.
		 */
		AfterHide?: () => void;
		/**
		 * This event is fired every time when the NavContainer has made this child control visible. In case of animated transitions this
		 * event is fired after the transition finishes. This control is now being displayed and not animated anymore.
		 */
		AfterShow?: () => void;
		/**
		 * This event is fired before the NavContainer shows this child control for the first time.
		 */
		BeforeFirstShow?: () => void;
		/**
		 * This event is fired every time before the NavContainer hides this child control. In case of animated transitions this
		 * event is fired before the transition starts.
		 */
		BeforeHide?: () => void;
		/**
		 * This event is fired every time before the NavContainer shows this child control. In case of animated transitions this
		 * event is fired before the transition starts.
		 */
		BeforeShow?: () => void;
	}

	class NewsContent extends sap.ui.core.Control {
		/**
		 * Constructor for a new sap.m.NewsContent control.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.NewsContentMetadata);
		/**
		 * Constructor for a new sap.m.NewsContent control.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this <code>sap.m.NewsContent</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.NewsContent</code> itself.
		 * 
		 * The event is fired when the user chooses the news content.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.NewsContent</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachPress(oData: any, fnFunction: any, oListener?: any): NewsContent;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this <code>sap.m.NewsContent</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachPress(fnFunction: any, oListener: any): NewsContent;
		/**
		 * Creates a new subclass of class sap.m.NewsContent with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|NewsContentMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>press</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		firePress(mArguments?: any): NewsContent;
		/**
		 * Gets current value of property <code>contentText</code>.
		 * 
		 * The content text.
		 * @return Value of property <code>contentText</code>
		 */
		getContentText(): string;
		/**
		 * Gets current value of property <code>subheader</code>.
		 * 
		 * The subheader.
		 * @return Value of property <code>subheader</code>
		 */
		getSubheader(): string;
		/**
		 * Sets a new value for property <code>subheader</code>.
		 * 
		 * The subheader.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sSubheader New value for property <code>subheader</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setSubheader(sSubheader: string): NewsContent;
	}

	class NotificationListBase extends ListItemBase {
		/**
		 * Constructor for a new NotificationListBase.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.NotificationListBaseMetadata);
		/**
		 * Constructor for a new NotificationListBase.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Returns the sap.m.Image or the sap.ui.core.Control used in the NotificationListBase's author picture.
		 * @return The notification author picture text
		 */
		_getAuthorImage(): Image|sap.ui.core.Control;
		/**
		 * Returns the sap.m.Text control used in the NotificationListBase's author name.
		 * @return The notification author name text
		 */
		_getAuthorName(): Text;
		/**
		 * Returns the sap.m.Text control used in the NotificationListBase's header title.
		 * @return The datetime control inside the Notification List Base control
		 */
		_getDateTimeText(): Text;
		/**
		 * Returns the sap.m.Text control used in the NotificationListBase's header title.
		 * @return The title control inside the Notification List Base control
		 */
		_getHeaderTitle(): Text;
		/**
		 * Returns the sap.m.OverflowToolbar control used in the NotificationListBase.
		 * @return The footer toolbar
		 */
		_getToolbar(): OverflowToolbar;
		/**
		 * Adds some button to the aggregation <code>buttons</code>.
		 * @param oButton the button to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addButton(oButton: Button): NotificationListBase;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>close</code> event of this <code>sap.m.NotificationListBase</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.NotificationListBase</code> itself.
		 * 
		 * Fired when the close button of the notification is pressed.<br><b>Note:</b> Pressing the close button doesn't destroy the notification automatically.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.NotificationListBase</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachClose(oData: any, fnFunction: any, oListener?: any): NotificationListBase;
		/**
		 * Destroys all the buttons in the aggregation <code>buttons</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyButtons(): NotificationListBase;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>close</code> event of this <code>sap.m.NotificationListBase</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachClose(fnFunction: any, oListener: any): NotificationListBase;
		/**
		 * Creates a new subclass of class sap.m.NotificationListBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|NotificationListBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.ListItemBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.ListItemBase
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ListItemBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>close</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireClose(mArguments?: any): NotificationListBase;
		/**
		 * Gets current value of property <code>authorName</code>.
		 * 
		 * Determines the notification group's author name.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>authorName</code>
		 */
		getAuthorName(): string;
		/**
		 * Gets current value of property <code>authorPicture</code>.
		 * 
		 * Determines the URL of the notification group's author picture.
		 * @return Value of property <code>authorPicture</code>
		 */
		getAuthorPicture(): sap.ui.core.URI;
		/**
		 * Gets content of aggregation <code>buttons</code>.
		 * 
		 * Action buttons.
		 * @return 
		 */
		getButtons(): Button[];
		/**
		 * Gets current value of property <code>datetime</code>.
		 * 
		 * Determines the due date of the NotificationListItem.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>datetime</code>
		 */
		getDatetime(): string;
		/**
		 * Gets current value of property <code>priority</code>.
		 * 
		 * Determines the priority of the Notification.
		 * 
		 * Default value is <code>None</code>.
		 * @return Value of property <code>priority</code>
		 */
		getPriority(): sap.ui.core.Priority;
		/**
		 * Gets current value of property <code>showButtons</code>.
		 * 
		 * Determines the action buttons visibility.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>showButtons</code>
		 */
		getShowButtons(): boolean;
		/**
		 * Gets current value of property <code>showCloseButton</code>.
		 * 
		 * Determines the visibility of the close button.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>showCloseButton</code>
		 */
		getShowCloseButton(): boolean;
		/**
		 * Gets current value of property <code>title</code>.
		 * 
		 * Determines the title of the NotificationListBase item.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>title</code>
		 */
		getTitle(): string;
		/**
		 * Checks for the provided <code>sap.m.Button</code> in the aggregation <code>buttons</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oButton The button whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfButton(oButton: Button): number;
		/**
		 * Inserts a button into the aggregation <code>buttons</code>.
		 * @param oButton the button to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the button should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the button is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the button is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertButton(oButton: Button, iIndex: number): NotificationListBase;
		/**
		 * Removes all the controls from the aggregation <code>buttons</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllButtons(): Button[];
		/**
		 * Removes a button from the aggregation <code>buttons</code>.
		 * @param vButton The button to remove or its index or id
		 * @return The removed button or <code>null</code>
		 */
		removeButton(vButton: number|string|Button): Button;
		/**
		 * Sets a new value for property <code>authorName</code>.
		 * 
		 * Determines the notification group's author name.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sAuthorName New value for property <code>authorName</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setAuthorName(sAuthorName: string): NotificationListBase;
		/**
		 * Sets a new value for property <code>authorPicture</code>.
		 * 
		 * Determines the URL of the notification group's author picture.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sAuthorPicture New value for property <code>authorPicture</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setAuthorPicture(sAuthorPicture: sap.ui.core.URI): NotificationListBase;
		/**
		 * Sets a new value for property <code>datetime</code>.
		 * 
		 * Determines the due date of the NotificationListItem.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sDatetime New value for property <code>datetime</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDatetime(sDatetime: string): NotificationListBase;
		/**
		 * Sets a new value for property <code>priority</code>.
		 * 
		 * Determines the priority of the Notification.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>None</code>.
		 * @param sPriority New value for property <code>priority</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setPriority(sPriority: sap.ui.core.Priority): NotificationListBase;
		/**
		 * Sets a new value for property <code>showButtons</code>.
		 * 
		 * Determines the action buttons visibility.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bShowButtons New value for property <code>showButtons</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowButtons(bShowButtons: boolean): NotificationListBase;
		/**
		 * Sets a new value for property <code>showCloseButton</code>.
		 * 
		 * Determines the visibility of the close button.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bShowCloseButton New value for property <code>showCloseButton</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowCloseButton(bShowCloseButton: boolean): NotificationListBase;
		/**
		 * Sets a new value for property <code>title</code>.
		 * 
		 * Determines the title of the NotificationListBase item.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sTitle New value for property <code>title</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTitle(sTitle: string): NotificationListBase;
	}

	class NotificationListGroup extends NotificationListBase {
		/**
		 * Constructor for a new NotificationListGroup.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.NotificationListGroupMetadata);
		/**
		 * Constructor for a new NotificationListGroup.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some item to the aggregation <code>items</code>.
		 * @param oItem the item to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addItem(oItem: NotificationListItem): NotificationListGroup;
		/**
		 * Destroys all the items in the aggregation <code>items</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyItems(): NotificationListGroup;
		/**
		 * Creates a new subclass of class sap.m.NotificationListGroup with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.NotificationListBase.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|NotificationListGroupMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.ListItemBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.ListItemBase
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ListItemBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.NotificationListBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
		 * @note Overload from base type sap.m.NotificationListBase
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|NotificationListBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>autoPriority</code>.
		 * 
		 * Determines if the group will automatically set the priority based on the highest priority of its notifications or get its priority from the developer.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>autoPriority</code>
		 */
		getAutoPriority(): boolean;
		/**
		 * Gets current value of property <code>collapsed</code>.
		 * 
		 * Determines if the group is collapsed or expanded.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>collapsed</code>
		 */
		getCollapsed(): boolean;
		/**
		 * Gets content of aggregation <code>items</code>.
		 * 
		 * The NotificationListItems inside the group.
		 * @return 
		 */
		getItems(): NotificationListItem[];
		/**
		 * Gets current value of property <code>showEmptyGroup</code>.
		 * 
		 * Determines if the group header/footer of the empty group will be always shown. By default groups with 0 notifications are not shown.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>showEmptyGroup</code>
		 */
		getShowEmptyGroup(): boolean;
		/**
		 * Checks for the provided <code>sap.m.NotificationListItem</code> in the aggregation <code>items</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oItem The item whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfItem(oItem: NotificationListItem): number;
		/**
		 * Inserts a item into the aggregation <code>items</code>.
		 * @param oItem the item to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the item should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the item is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertItem(oItem: NotificationListItem, iIndex: number): NotificationListGroup;
		/**
		 * Removes all the controls from the aggregation <code>items</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllItems(): NotificationListItem[];
		/**
		 * Removes a item from the aggregation <code>items</code>.
		 * @param vItem The item to remove or its index or id
		 * @return The removed item or <code>null</code>
		 */
		removeItem(vItem: number|string|NotificationListItem): NotificationListItem;
		/**
		 * Sets a new value for property <code>autoPriority</code>.
		 * 
		 * Determines if the group will automatically set the priority based on the highest priority of its notifications or get its priority from the developer.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bAutoPriority New value for property <code>autoPriority</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setAutoPriority(bAutoPriority: boolean): NotificationListGroup;
		/**
		 * Sets a new value for property <code>collapsed</code>.
		 * 
		 * Determines if the group is collapsed or expanded.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bCollapsed New value for property <code>collapsed</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setCollapsed(bCollapsed: boolean): NotificationListGroup;
		/**
		 * Sets a new value for property <code>showEmptyGroup</code>.
		 * 
		 * Determines if the group header/footer of the empty group will be always shown. By default groups with 0 notifications are not shown.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bShowEmptyGroup New value for property <code>showEmptyGroup</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowEmptyGroup(bShowEmptyGroup: boolean): NotificationListGroup;
	}

	class NotificationListItem extends NotificationListBase {
		/**
		 * Constructor for a new NotificationListItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.NotificationListItemMetadata);
		/**
		 * Constructor for a new NotificationListItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.NotificationListItem with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.NotificationListBase.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|NotificationListItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.ListItemBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.ListItemBase
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ListItemBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.NotificationListBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
		 * @note Overload from base type sap.m.NotificationListBase
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|NotificationListBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>description</code>.
		 * 
		 * Determines the description of the NotificationListItem.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>description</code>
		 */
		getDescription(): string;
		/**
		 * Gets current value of property <code>hideShowMoreButton</code>.
		 * 
		 * Determines it the "Show More" button should be hidden.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>hideShowMoreButton</code>
		 */
		getHideShowMoreButton(): boolean;
		/**
		 * Gets current value of property <code>truncate</code>.
		 * 
		 * Determines if the text in the title and the description of the notification are truncated to the first two lines.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>truncate</code>
		 */
		getTruncate(): boolean;
		/**
		 * Sets a new value for property <code>description</code>.
		 * 
		 * Determines the description of the NotificationListItem.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sDescription New value for property <code>description</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDescription(sDescription: string): NotificationListItem;
		/**
		 * Sets a new value for property <code>hideShowMoreButton</code>.
		 * 
		 * Determines it the "Show More" button should be hidden.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bHideShowMoreButton New value for property <code>hideShowMoreButton</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHideShowMoreButton(bHideShowMoreButton: boolean): NotificationListItem;
		/**
		 * Sets a new value for property <code>truncate</code>.
		 * 
		 * Determines if the text in the title and the description of the notification are truncated to the first two lines.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bTruncate New value for property <code>truncate</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTruncate(bTruncate: boolean): NotificationListItem;
	}

	class NumericContent extends sap.ui.core.Control {
		/**
		 * Constructor for a new sap.m.GenericTile control.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.NumericContentMetadata);
		/**
		 * Constructor for a new sap.m.GenericTile control.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this <code>sap.m.NumericContent</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.NumericContent</code> itself.
		 * 
		 * The event is fired when the user chooses the numeric content.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.NumericContent</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachPress(oData: any, fnFunction: any, oListener?: any): NumericContent;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this <code>sap.m.NumericContent</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachPress(fnFunction: any, oListener: any): NumericContent;
		/**
		 * Creates a new subclass of class sap.m.NumericContent with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|NumericContentMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>press</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		firePress(mArguments?: any): NumericContent;
		/**
		 * Gets current value of property <code>animateTextChange</code>.
		 * 
		 * If set to true, the change of the value will be animated.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>animateTextChange</code>
		 */
		getAnimateTextChange(): boolean;
		/**
		 * Gets current value of property <code>formatterValue</code>.
		 * 
		 * If set to true, the value parameter contains a numeric value and scale. If set to false (default), the value parameter contains a numeric value only.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>formatterValue</code>
		 */
		getFormatterValue(): boolean;
		/**
		 * Gets current value of property <code>icon</code>.
		 * 
		 * The icon to be displayed as a graphical element within the control. This can be an image or an icon from the icon font.
		 * @return Value of property <code>icon</code>
		 */
		getIcon(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>iconDescription</code>.
		 * 
		 * Description of an icon that is used in the tooltip.
		 * @return Value of property <code>iconDescription</code>
		 */
		getIconDescription(): string;
		/**
		 * Gets current value of property <code>indicator</code>.
		 * 
		 * The indicator arrow that shows value deviation.
		 * 
		 * Default value is <code>None</code>.
		 * @return Value of property <code>indicator</code>
		 */
		getIndicator(): DeviationIndicator;
		/**
		 * Gets current value of property <code>nullifyValue</code>.
		 * 
		 * If set to true, the omitted value property is set to 0.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>nullifyValue</code>
		 */
		getNullifyValue(): boolean;
		/**
		 * Gets current value of property <code>scale</code>.
		 * 
		 * The scaling prefix. Financial characters can be used for currencies and counters. The SI prefixes can be used for units. If the scaling prefix contains more than three characters, only the first three characters are displayed.
		 * @return Value of property <code>scale</code>
		 */
		getScale(): string;
		/**
		 * Gets current value of property <code>state</code>.
		 * 
		 * Indicates the load status.
		 * 
		 * Default value is <code>Loaded</code>.
		 * @return Value of property <code>state</code>
		 */
		getState(): LoadState;
		/**
		 * Gets current value of property <code>truncateValueTo</code>.
		 * 
		 * The number of characters to display for the value property.
		 * 
		 * Default value is <code>4</code>.
		 * @return Value of property <code>truncateValueTo</code>
		 */
		getTruncateValueTo(): number;
		/**
		 * Gets current value of property <code>value</code>.
		 * 
		 * The actual value.
		 * @return Value of property <code>value</code>
		 */
		getValue(): string;
		/**
		 * Gets current value of property <code>valueColor</code>.
		 * 
		 * The semantic color of the value.
		 * 
		 * Default value is <code>Neutral</code>.
		 * @return Value of property <code>valueColor</code>
		 */
		getValueColor(): ValueColor;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * The width of the chart. If it is not set, the size of the control is defined by the size property.
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>withMargin</code>.
		 * 
		 * If the value is set to false, the content will fit to the whole size of the control.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>withMargin</code>
		 */
		getWithMargin(): boolean;
		/**
		 * Sets a new value for property <code>animateTextChange</code>.
		 * 
		 * If set to true, the change of the value will be animated.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bAnimateTextChange New value for property <code>animateTextChange</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setAnimateTextChange(bAnimateTextChange: boolean): NumericContent;
		/**
		 * Sets a new value for property <code>formatterValue</code>.
		 * 
		 * If set to true, the value parameter contains a numeric value and scale. If set to false (default), the value parameter contains a numeric value only.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bFormatterValue New value for property <code>formatterValue</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setFormatterValue(bFormatterValue: boolean): NumericContent;
		/**
		 * Sets a new value for property <code>iconDescription</code>.
		 * 
		 * Description of an icon that is used in the tooltip.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sIconDescription New value for property <code>iconDescription</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIconDescription(sIconDescription: string): NumericContent;
		/**
		 * Sets a new value for property <code>indicator</code>.
		 * 
		 * The indicator arrow that shows value deviation.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>None</code>.
		 * @param sIndicator New value for property <code>indicator</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIndicator(sIndicator: DeviationIndicator): NumericContent;
		/**
		 * Sets a new value for property <code>nullifyValue</code>.
		 * 
		 * If set to true, the omitted value property is set to 0.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bNullifyValue New value for property <code>nullifyValue</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setNullifyValue(bNullifyValue: boolean): NumericContent;
		/**
		 * Sets a new value for property <code>scale</code>.
		 * 
		 * The scaling prefix. Financial characters can be used for currencies and counters. The SI prefixes can be used for units. If the scaling prefix contains more than three characters, only the first three characters are displayed.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sScale New value for property <code>scale</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setScale(sScale: string): NumericContent;
		/**
		 * Sets a new value for property <code>state</code>.
		 * 
		 * Indicates the load status.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Loaded</code>.
		 * @param sState New value for property <code>state</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setState(sState: LoadState): NumericContent;
		/**
		 * Sets a new value for property <code>truncateValueTo</code>.
		 * 
		 * The number of characters to display for the value property.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>4</code>.
		 * @param iTruncateValueTo New value for property <code>truncateValueTo</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTruncateValueTo(iTruncateValueTo: number): NumericContent;
		/**
		 * Sets a new value for property <code>value</code>.
		 * 
		 * The actual value.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sValue New value for property <code>value</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setValue(sValue: string): NumericContent;
		/**
		 * Sets a new value for property <code>valueColor</code>.
		 * 
		 * The semantic color of the value.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Neutral</code>.
		 * @param sValueColor New value for property <code>valueColor</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setValueColor(sValueColor: ValueColor): NumericContent;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * The width of the chart. If it is not set, the size of the control is defined by the size property.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): NumericContent;
		/**
		 * Sets a new value for property <code>withMargin</code>.
		 * 
		 * If the value is set to false, the content will fit to the whole size of the control.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bWithMargin New value for property <code>withMargin</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWithMargin(bWithMargin: boolean): NumericContent;
	}

	class ObjectAttribute extends sap.ui.core.Control {
		/**
		 * Constructor for a new ObjectAttribute.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.ObjectAttributeMetadata);
		/**
		 * Constructor for a new ObjectAttribute.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this <code>sap.m.ObjectAttribute</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.ObjectAttribute</code> itself.
		 * 
		 * Fires when the user clicks on active text.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.ObjectAttribute</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachPress(oData: any, fnFunction: any, oListener?: any): ObjectAttribute;
		/**
		 * Destroys the customContent in the aggregation <code>customContent</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyCustomContent(): ObjectAttribute;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this <code>sap.m.ObjectAttribute</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachPress(fnFunction: any, oListener: any): ObjectAttribute;
		/**
		 * Creates a new subclass of class sap.m.ObjectAttribute with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ObjectAttributeMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>press</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>domRef</code> of type <code>string</code>DOM reference of the ObjectAttribute's text to be used for positioning.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		firePress(mArguments?: any): ObjectAttribute;
		/**
		 * Gets current value of property <code>active</code>.
		 * 
		 * Indicates if the ObjectAttribute text is selectable for the user.
		 * @return Value of property <code>active</code>
		 */
		getActive(): boolean;
		/**
		 * Gets content of aggregation <code>customContent</code>.
		 * 
		 * When the aggregation is set, it replaces the text, active and textDirection properties. This also ignores the press event. The provided control is displayed as an active link.
		 * <b>Note:</b> It will only allow sap.m.Text and sap.m.Link controls.
		 * @return 
		 */
		getCustomContent(): sap.ui.core.Control;
		/**
		 * Defines to which DOM reference the Popup should be docked.
		 * @return The DOM reference that Popup should dock to
		 */
		getPopupAnchorDomRef(): any;
		/**
		 * Gets current value of property <code>text</code>.
		 * 
		 * Defines the ObjectAttribute text.
		 * @return Value of property <code>text</code>
		 */
		getText(): string;
		/**
		 * Gets current value of property <code>textDirection</code>.
		 * 
		 * Determines the direction of the text, not including the title.
		 * Available options for the text direction are LTR (left-to-right) and RTL (right-to-left). By default the control inherits the text direction from its parent control.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @return Value of property <code>textDirection</code>
		 */
		getTextDirection(): sap.ui.core.TextDirection;
		/**
		 * Gets current value of property <code>title</code>.
		 * 
		 * Defines the ObjectAttribute title.
		 * @return Value of property <code>title</code>
		 */
		getTitle(): string;
		/**
		 * Sets a new value for property <code>active</code>.
		 * 
		 * Indicates if the ObjectAttribute text is selectable for the user.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param bActive New value for property <code>active</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setActive(bActive: boolean): ObjectAttribute;
		/**
		 * Sets the aggregated <code>customContent</code>.
		 * @param oCustomContent The customContent to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setCustomContent(oCustomContent: sap.ui.core.Control): ObjectAttribute;
		/**
		 * Sets a new value for property <code>text</code>.
		 * 
		 * Defines the ObjectAttribute text.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sText New value for property <code>text</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setText(sText: string): ObjectAttribute;
		/**
		 * Sets a new value for property <code>textDirection</code>.
		 * 
		 * Determines the direction of the text, not including the title.
		 * Available options for the text direction are LTR (left-to-right) and RTL (right-to-left). By default the control inherits the text direction from its parent control.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @param sTextDirection New value for property <code>textDirection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTextDirection(sTextDirection: sap.ui.core.TextDirection): ObjectAttribute;
		/**
		 * Sets a new value for property <code>title</code>.
		 * 
		 * Defines the ObjectAttribute title.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sTitle New value for property <code>title</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTitle(sTitle: string): ObjectAttribute;
	}

	class ObjectHeader extends sap.ui.core.Control {
		/**
		 * Constructor for a new ObjectHeader.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.ObjectHeaderMetadata);
		/**
		 * Constructor for a new ObjectHeader.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some additionalNumber to the aggregation <code>additionalNumbers</code>.
		 * @param oAdditionalNumber the additionalNumber to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAdditionalNumber(oAdditionalNumber: ObjectNumber): ObjectHeader;
		/**
		 * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID|sap.ui.core.Control): ObjectHeader;
		/**
		 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): ObjectHeader;
		/**
		 * Adds some attribute to the aggregation <code>attributes</code>.
		 * @param oAttribute the attribute to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAttribute(oAttribute: ObjectAttribute): ObjectHeader;
		/**
		 * Adds some status to the aggregation <code>statuses</code>.
		 * @param oStatus the status to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addStatus(oStatus: sap.ui.core.Control): ObjectHeader;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>iconPress</code> event of this <code>sap.m.ObjectHeader</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.ObjectHeader</code> itself.
		 * 
		 * Event is fired when the title icon is active and the user taps/clicks on it
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.ObjectHeader</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachIconPress(oData: any, fnFunction: any, oListener?: any): ObjectHeader;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>introPress</code> event of this <code>sap.m.ObjectHeader</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.ObjectHeader</code> itself.
		 * 
		 * Event is fired when the intro is active and the user taps/clicks on it
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.ObjectHeader</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachIntroPress(oData: any, fnFunction: any, oListener?: any): ObjectHeader;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>titlePress</code> event of this <code>sap.m.ObjectHeader</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.ObjectHeader</code> itself.
		 * 
		 * Event is fired when the title is active and the user taps/clicks on it
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.ObjectHeader</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachTitlePress(oData: any, fnFunction: any, oListener?: any): ObjectHeader;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>titleSelectorPress</code> event of this <code>sap.m.ObjectHeader</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.ObjectHeader</code> itself.
		 * 
		 * Event is fired when the object header title selector (down-arrow) is pressed
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.ObjectHeader</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachTitleSelectorPress(oData: any, fnFunction: any, oListener?: any): ObjectHeader;
		/**
		 * Destroys all the additionalNumbers in the aggregation <code>additionalNumbers</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyAdditionalNumbers(): ObjectHeader;
		/**
		 * Destroys all the attributes in the aggregation <code>attributes</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyAttributes(): ObjectHeader;
		/**
		 * Destroys the headerContainer in the aggregation <code>headerContainer</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyHeaderContainer(): ObjectHeader;
		/**
		 * Destroys all the statuses in the aggregation <code>statuses</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyStatuses(): ObjectHeader;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>iconPress</code> event of this <code>sap.m.ObjectHeader</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachIconPress(fnFunction: any, oListener: any): ObjectHeader;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>introPress</code> event of this <code>sap.m.ObjectHeader</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachIntroPress(fnFunction: any, oListener: any): ObjectHeader;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>titlePress</code> event of this <code>sap.m.ObjectHeader</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachTitlePress(fnFunction: any, oListener: any): ObjectHeader;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>titleSelectorPress</code> event of this <code>sap.m.ObjectHeader</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachTitleSelectorPress(fnFunction: any, oListener: any): ObjectHeader;
		/**
		 * Creates a new subclass of class sap.m.ObjectHeader with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ObjectHeaderMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>iconPress</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>domRef</code> of type <code>object</code>Dom reference of the object header' icon to be used for positioning.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireIconPress(mArguments?: any): ObjectHeader;
		/**
		 * Fires event <code>introPress</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>domRef</code> of type <code>object</code>Dom reference of the object header' intro to be used for positioning.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireIntroPress(mArguments?: any): ObjectHeader;
		/**
		 * Fires event <code>titlePress</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>domRef</code> of type <code>object</code>Dom reference of the object header' title to be used for positioning.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireTitlePress(mArguments?: any): ObjectHeader;
		/**
		 * Fires event <code>titleSelectorPress</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>domRef</code> of type <code>object</code>Dom reference of the object header' titleArrow to be used for positioning.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireTitleSelectorPress(mArguments?: any): ObjectHeader;
		/**
		 * Gets content of aggregation <code>additionalNumbers</code>.
		 * 
		 * NOTE: Only applied if you set "responsive=false".
		 * Additional object numbers and units are managed in this aggregation.
		 * The numbers are hidden on tablet and phone size screens.
		 * When only one number is provided, it is rendered with additional separator from the main ObjectHeader number.
		 * @return 
		 */
		getAdditionalNumbers(): ObjectNumber[];
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaDescribedBy</code>.
		 * @return 
		 */
		getAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
		 * @return 
		 */
		getAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Gets content of aggregation <code>attributes</code>.
		 * 
		 * The list of Object Attributes
		 * @return 
		 */
		getAttributes(): ObjectAttribute[];
		/**
		 * Gets current value of property <code>backgroundDesign</code>.
		 * 
		 * This property is used to set the background color of the ObjectHeader. Possible values are "Solid", "Translucent" and "Transparent".
		 * NOTE: The different types of ObjectHeader come with different default background.
		 * - non responsive ObjectHeader: Transparent
		 * - responsive ObjectHeader: Translucent
		 * - condensed ObjectHeder: Solid
		 * @return Value of property <code>backgroundDesign</code>
		 */
		getBackgroundDesign(): BackgroundDesign;
		/**
		 * Gets current value of property <code>condensed</code>.
		 * 
		 * <code>ObjectHeader</code> with title, one attribute, number, and number unit.<br>
		 * <b>Note:</b> Only applied if the <code>responsive</code> property is set to <code>false</code>.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>condensed</code>
		 */
		getCondensed(): boolean;
		/**
		 * Gets current value of property <code>fullScreenOptimized</code>.
		 * 
		 * Optimizes the display of the elements of the <code>ObjectHeader</code>.<br>
		 * Set this property to <code>true</code> if your application uses a full-screen layout (as opposed to a master-detail or other split-screen layout).<br>
		 * <b>Note</b>: Only applied if the <code>responsive</code> property is also set to <code>true</code>.
		 * 
		 * If set to <code>true</code>, the following situations apply:
		 * <ul>
		 *                 <li>On desktop, 1-3 attributes/statuses - positioned as a third block on the right side of the Title/Number group</li>
		 *                 <li>On desktop, 4+ attributes/statuses - 4 columns below the Title/Number</li>
		 *                 <li>On tablet (portrait mode), always in 2 columns below the Title/Number</li>
		 *                 <li>On tablet (landscape mode), 1-2 attributes/statuses - 2 columns below the Title/Number</li>
		 *                 <li>On tablet (landscape mode), 3+ attributes/statuses - 3 columns below the Title/Number</li>
		 * </ul>
		 * On phone, the attributes and statuses are always positioned in 1 column below the Title/Number of the <code>ObjectHeader</code>.<br>
		 * 
		 * If set to <code>false</code>, the attributes and statuses are being positioned below the Title/Number of the <code>ObjectHeader</code> in 2 or 3 columns depending on their number:
		 * <ul>
		 *                <li>On desktop, 1-4 attributes/statuses - 2 columns</li>
		 *                <li>On desktop, 5+ attributes/statuses - 3 columns</li>
		 *                <li>On tablet, always in 2 columns</li>
		 * </ul>
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>fullScreenOptimized</code>
		 */
		getFullScreenOptimized(): boolean;
		/**
		 * Gets content of aggregation <code>headerContainer</code>.
		 * 
		 * This aggregation takes only effect when you set "responsive" to true.
		 * It can either be filled with an sap.m.IconTabBar or a sap.suite.ui.commons.HeaderContainer control. Overflow handling must be taken care of by the inner control. If used with an IconTabBar control, only the header will be displayed inside the object header, the content will be displayed below the ObjectHeader.
		 * @return 
		 */
		getHeaderContainer(): ObjectHeaderContainer;
		/**
		 * Gets current value of property <code>icon</code>.
		 * 
		 * Object header icon.
		 * 
		 * <b>Note:</b> Recursive resolution of binding expressions is not supported by the framework.
		 * It works only in ObjectHeader, since it is a composite control and creates an Image control internally.
		 * @return Value of property <code>icon</code>
		 */
		getIcon(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>iconActive</code>.
		 * 
		 * Indicates that the object header icon is clickable
		 * @return Value of property <code>iconActive</code>
		 */
		getIconActive(): boolean;
		/**
		 * Gets current value of property <code>iconAlt</code>.
		 * 
		 * Object header icon alternative text that is displayed in case the Image is not available, or cannot be displayed.
		 * @return Value of property <code>iconAlt</code>
		 */
		getIconAlt(): string;
		/**
		 * Gets current value of property <code>iconDensityAware</code>.
		 * 
		 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
		 * 
		 * If bandwidth is the key for the application, set this value to false.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>iconDensityAware</code>
		 */
		getIconDensityAware(): boolean;
		/**
		 * Gets current value of property <code>intro</code>.
		 * 
		 * Introductory text for the object header
		 * @return Value of property <code>intro</code>
		 */
		getIntro(): string;
		/**
		 * Gets current value of property <code>introActive</code>.
		 * 
		 * Indicates that the intro is clickable
		 * @return Value of property <code>introActive</code>
		 */
		getIntroActive(): boolean;
		/**
		 * Gets current value of property <code>introHref</code>.
		 * 
		 * The intro link target URI. Supports standard hyperlink behavior. If an action should be triggered, this should not be set, but instead an event handler for the "introPress" event should be registered.
		 * @return Value of property <code>introHref</code>
		 */
		getIntroHref(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>introTarget</code>.
		 * 
		 * Options are _self, _top, _blank, _parent, _search. Alternatively, a frame name can be entered.
		 * @return Value of property <code>introTarget</code>
		 */
		getIntroTarget(): string;
		/**
		 * Gets current value of property <code>introTextDirection</code>.
		 * 
		 * This property specifies the intro text directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @return Value of property <code>introTextDirection</code>
		 */
		getIntroTextDirection(): sap.ui.core.TextDirection;
		/**
		 * Gets current value of property <code>markFavorite</code>.
		 * 
		 * Sets the favorite state to true or false. The showMarkers property must be true for this property to take effect.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>markFavorite</code>
		 */
		getMarkFavorite(): boolean;
		/**
		 * Gets current value of property <code>markFlagged</code>.
		 * 
		 * Sets the flagged state to true or false. The showMarkers property must be true for this property to take effect.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>markFlagged</code>
		 */
		getMarkFlagged(): boolean;
		/**
		 * Gets current value of property <code>number</code>.
		 * 
		 * Object header number field
		 * @return Value of property <code>number</code>
		 */
		getNumber(): string;
		/**
		 * Gets current value of property <code>numberState</code>.
		 * 
		 * Object header number and numberUnit value state.
		 * 
		 * Default value is <code>None</code>.
		 * @return Value of property <code>numberState</code>
		 */
		getNumberState(): sap.ui.core.ValueState;
		/**
		 * Gets current value of property <code>numberTextDirection</code>.
		 * 
		 * This property specifies the number and unit directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @return Value of property <code>numberTextDirection</code>
		 */
		getNumberTextDirection(): sap.ui.core.TextDirection;
		/**
		 * Gets current value of property <code>numberUnit</code>.
		 * 
		 * Object header number units qualifier
		 * @return Value of property <code>numberUnit</code>
		 */
		getNumberUnit(): string;
		/**
		 * Gets current value of property <code>responsive</code>.
		 * 
		 * If this property is set to true the ObjectHeader is rendered with a different design and reacts responsively to the screen sizes.
		 * Be aware that the design and behavior of the responsive ObjectHeader can change without further notification.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>responsive</code>
		 */
		getResponsive(): boolean;
		/**
		 * Gets current value of property <code>showMarkers</code>.
		 * 
		 * Indicates if object header supports showing markers such as flagged and favorite.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>showMarkers</code>
		 */
		getShowMarkers(): boolean;
		/**
		 * Gets current value of property <code>showTitleSelector</code>.
		 * 
		 * When set to true, the selector arrow icon/image is shown and can be pressed.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>showTitleSelector</code>
		 */
		getShowTitleSelector(): boolean;
		/**
		 * Gets content of aggregation <code>statuses</code>.
		 * 
		 * The list of Object sap.ui.core.Control. It will only allow sap.m.ObjectStatus and sap.m.ProgressIndicator controls.
		 * @return 
		 */
		getStatuses(): sap.ui.core.Control[];
		/**
		 * Gets current value of property <code>title</code>.
		 * 
		 * Object header title
		 * @return Value of property <code>title</code>
		 */
		getTitle(): string;
		/**
		 * Gets current value of property <code>titleActive</code>.
		 * 
		 * Indicates that the title is clickable and is set only if a title is provided
		 * @return Value of property <code>titleActive</code>
		 */
		getTitleActive(): boolean;
		/**
		 * Gets current value of property <code>titleHref</code>.
		 * 
		 * The title link target URI. Supports standard hyperlink behavior. If an action should be triggered, this should not be set, but instead an event handler for the "titlePress" event should be registered.
		 * @return Value of property <code>titleHref</code>
		 */
		getTitleHref(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>titleLevel</code>.
		 * 
		 * Defines the semantic level of the title.
		 * This information is e.g. used by assistive technologies like screenreaders to create a hierarchical site map for faster navigation.
		 * Depending on this setting a HTML h1-h6 element is used.
		 * 
		 * Default value is <code>H1</code>.
		 * @return Value of property <code>titleLevel</code>
		 */
		getTitleLevel(): sap.ui.core.TitleLevel;
		/**
		 * Gets current value of property <code>titleSelectorTooltip</code>.
		 * 
		 * Sets custom text for the tooltip of the select title arrow. If not set, a default text of the tooltip will be displayed.
		 * 
		 * Default value is <code>Options</code>.
		 * @return Value of property <code>titleSelectorTooltip</code>
		 */
		getTitleSelectorTooltip(): string;
		/**
		 * Gets current value of property <code>titleTarget</code>.
		 * 
		 * Options are _self, _top, _blank, _parent, _search. Alternatively, a frame name can be entered.
		 * @return Value of property <code>titleTarget</code>
		 */
		getTitleTarget(): string;
		/**
		 * Gets current value of property <code>titleTextDirection</code>.
		 * 
		 * This property specifies the title text directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @return Value of property <code>titleTextDirection</code>
		 */
		getTitleTextDirection(): sap.ui.core.TextDirection;
		/**
		 * Checks for the provided <code>sap.m.ObjectNumber</code> in the aggregation <code>additionalNumbers</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oAdditionalNumber The additionalNumber whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfAdditionalNumber(oAdditionalNumber: ObjectNumber): number;
		/**
		 * Checks for the provided <code>sap.m.ObjectAttribute</code> in the aggregation <code>attributes</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oAttribute The attribute whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfAttribute(oAttribute: ObjectAttribute): number;
		/**
		 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>statuses</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oStatus The status whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfStatus(oStatus: sap.ui.core.Control): number;
		/**
		 * Inserts a additionalNumber into the aggregation <code>additionalNumbers</code>.
		 * @param oAdditionalNumber the additionalNumber to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the additionalNumber should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the additionalNumber is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the additionalNumber is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertAdditionalNumber(oAdditionalNumber: ObjectNumber, iIndex: number): ObjectHeader;
		/**
		 * Inserts a attribute into the aggregation <code>attributes</code>.
		 * @param oAttribute the attribute to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the attribute should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the attribute is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertAttribute(oAttribute: ObjectAttribute, iIndex: number): ObjectHeader;
		/**
		 * Inserts a status into the aggregation <code>statuses</code>.
		 * @param oStatus the status to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the status should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the status is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the status is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertStatus(oStatus: sap.ui.core.Control, iIndex: number): ObjectHeader;
		/**
		 * Removes a additionalNumber from the aggregation <code>additionalNumbers</code>.
		 * @param vAdditionalNumber The additionalNumber to remove or its index or id
		 * @return The removed additionalNumber or <code>null</code>
		 */
		removeAdditionalNumber(vAdditionalNumber: number|string|ObjectNumber): ObjectNumber;
		/**
		 * Removes all the controls from the aggregation <code>additionalNumbers</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAdditionalNumbers(): ObjectNumber[];
		/**
		 * Removes all the controls in the association named <code>ariaDescribedBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Removes all the controls from the aggregation <code>attributes</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAttributes(): ObjectAttribute[];
		/**
		 * Removes all the controls from the aggregation <code>statuses</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllStatuses(): sap.ui.core.Control[];
		/**
		 * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
		 * @return The removed ariaDescribedBy or <code>null</code>
		 */
		removeAriaDescribedBy(vAriaDescribedBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
		 * @return The removed ariaLabelledBy or <code>null</code>
		 */
		removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Removes a attribute from the aggregation <code>attributes</code>.
		 * @param vAttribute The attribute to remove or its index or id
		 * @return The removed attribute or <code>null</code>
		 */
		removeAttribute(vAttribute: number|string|ObjectAttribute): ObjectAttribute;
		/**
		 * Removes a status from the aggregation <code>statuses</code>.
		 * @param vStatus The status to remove or its index or id
		 * @return The removed status or <code>null</code>
		 */
		removeStatus(vStatus: number|string|sap.ui.core.Control): sap.ui.core.Control;
		/**
		 * Sets a new value for property <code>backgroundDesign</code>.
		 * 
		 * This property is used to set the background color of the ObjectHeader. Possible values are "Solid", "Translucent" and "Transparent".
		 * NOTE: The different types of ObjectHeader come with different default background.
		 * - non responsive ObjectHeader: Transparent
		 * - responsive ObjectHeader: Translucent
		 * - condensed ObjectHeder: Solid
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sBackgroundDesign New value for property <code>backgroundDesign</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setBackgroundDesign(sBackgroundDesign: BackgroundDesign): ObjectHeader;
		/**
		 * Set the condensed flag
		 * @param bCondensed the new value
		 * @return this pointer for chaining
		 */
		setCondensed(bCondensed: boolean): ObjectHeader;
		/**
		 * Sets a new value for property <code>fullScreenOptimized</code>.
		 * 
		 * Optimizes the display of the elements of the <code>ObjectHeader</code>.<br>
		 * Set this property to <code>true</code> if your application uses a full-screen layout (as opposed to a master-detail or other split-screen layout).<br>
		 * <b>Note</b>: Only applied if the <code>responsive</code> property is also set to <code>true</code>.
		 * 
		 * If set to <code>true</code>, the following situations apply:
		 * <ul>
		 *                 <li>On desktop, 1-3 attributes/statuses - positioned as a third block on the right side of the Title/Number group</li>
		 *                 <li>On desktop, 4+ attributes/statuses - 4 columns below the Title/Number</li>
		 *                 <li>On tablet (portrait mode), always in 2 columns below the Title/Number</li>
		 *                 <li>On tablet (landscape mode), 1-2 attributes/statuses - 2 columns below the Title/Number</li>
		 *                 <li>On tablet (landscape mode), 3+ attributes/statuses - 3 columns below the Title/Number</li>
		 * </ul>
		 * On phone, the attributes and statuses are always positioned in 1 column below the Title/Number of the <code>ObjectHeader</code>.<br>
		 * 
		 * If set to <code>false</code>, the attributes and statuses are being positioned below the Title/Number of the <code>ObjectHeader</code> in 2 or 3 columns depending on their number:
		 * <ul>
		 *                <li>On desktop, 1-4 attributes/statuses - 2 columns</li>
		 *                <li>On desktop, 5+ attributes/statuses - 3 columns</li>
		 *                <li>On tablet, always in 2 columns</li>
		 * </ul>
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bFullScreenOptimized New value for property <code>fullScreenOptimized</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setFullScreenOptimized(bFullScreenOptimized: boolean): ObjectHeader;
		/**
		 * Sets the aggregated <code>headerContainer</code>.
		 * @param oHeaderContainer The headerContainer to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHeaderContainer(oHeaderContainer: ObjectHeaderContainer): ObjectHeader;
		/**
		 * Sets a new value for property <code>icon</code>.
		 * 
		 * Object header icon.
		 * 
		 * <b>Note:</b> Recursive resolution of binding expressions is not supported by the framework.
		 * It works only in ObjectHeader, since it is a composite control and creates an Image control internally.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sIcon New value for property <code>icon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIcon(sIcon: sap.ui.core.URI): ObjectHeader;
		/**
		 * Sets a new value for property <code>iconActive</code>.
		 * 
		 * Indicates that the object header icon is clickable
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param bIconActive New value for property <code>iconActive</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIconActive(bIconActive: boolean): ObjectHeader;
		/**
		 * Sets a new value for property <code>iconAlt</code>.
		 * 
		 * Object header icon alternative text that is displayed in case the Image is not available, or cannot be displayed.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sIconAlt New value for property <code>iconAlt</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIconAlt(sIconAlt: string): ObjectHeader;
		/**
		 * Sets a new value for property <code>iconDensityAware</code>.
		 * 
		 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
		 * 
		 * If bandwidth is the key for the application, set this value to false.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bIconDensityAware New value for property <code>iconDensityAware</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIconDensityAware(bIconDensityAware: boolean): ObjectHeader;
		/**
		 * Sets a new value for property <code>intro</code>.
		 * 
		 * Introductory text for the object header
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sIntro New value for property <code>intro</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIntro(sIntro: string): ObjectHeader;
		/**
		 * Sets a new value for property <code>introActive</code>.
		 * 
		 * Indicates that the intro is clickable
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param bIntroActive New value for property <code>introActive</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIntroActive(bIntroActive: boolean): ObjectHeader;
		/**
		 * Sets a new value for property <code>introHref</code>.
		 * 
		 * The intro link target URI. Supports standard hyperlink behavior. If an action should be triggered, this should not be set, but instead an event handler for the "introPress" event should be registered.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sIntroHref New value for property <code>introHref</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIntroHref(sIntroHref: sap.ui.core.URI): ObjectHeader;
		/**
		 * Sets a new value for property <code>introTarget</code>.
		 * 
		 * Options are _self, _top, _blank, _parent, _search. Alternatively, a frame name can be entered.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sIntroTarget New value for property <code>introTarget</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIntroTarget(sIntroTarget: string): ObjectHeader;
		/**
		 * Sets a new value for property <code>introTextDirection</code>.
		 * 
		 * This property specifies the intro text directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @param sIntroTextDirection New value for property <code>introTextDirection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIntroTextDirection(sIntroTextDirection: sap.ui.core.TextDirection): ObjectHeader;
		/**
		 * Sets the visibility value of the Favorite marker.
		 * @param bMarked the new value
		 * @return this pointer for chaining
		 */
		setMarkFavorite(bMarked: boolean): ObjectHeader;
		/**
		 * Sets the visibility value of the Flagged marker.
		 * @param bMarked the new value
		 * @return this pointer for chaining
		 */
		setMarkFlagged(bMarked: boolean): ObjectHeader;
		/**
		 * Set the number value to the internal aggregation
		 * @param sNumber the new value
		 * @return this pointer for chaining
		 */
		setNumber(sNumber: string): ObjectHeader;
		/**
		 * Set the number state to the internal aggregation
		 * @param sState the new value
		 * @return this pointer for chaining
		 */
		setNumberState(sState: sap.ui.core.ValueState): ObjectHeader;
		/**
		 * Sets a new value for property <code>numberTextDirection</code>.
		 * 
		 * This property specifies the number and unit directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @param sNumberTextDirection New value for property <code>numberTextDirection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setNumberTextDirection(sNumberTextDirection: sap.ui.core.TextDirection): ObjectHeader;
		/**
		 * Set the number unit to the internal aggregation
		 * @param sUnit the new value
		 * @return this pointer for chaining
		 */
		setNumberUnit(sUnit: string): ObjectHeader;
		/**
		 * Sets a new value for property <code>responsive</code>.
		 * 
		 * If this property is set to true the ObjectHeader is rendered with a different design and reacts responsively to the screen sizes.
		 * Be aware that the design and behavior of the responsive ObjectHeader can change without further notification.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bResponsive New value for property <code>responsive</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setResponsive(bResponsive: boolean): ObjectHeader;
		/**
		 * Sets a new value for property <code>showMarkers</code>.
		 * 
		 * Indicates if object header supports showing markers such as flagged and favorite.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bShowMarkers New value for property <code>showMarkers</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowMarkers(bShowMarkers: boolean): ObjectHeader;
		/**
		 * Sets a new value for property <code>showTitleSelector</code>.
		 * 
		 * When set to true, the selector arrow icon/image is shown and can be pressed.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bShowTitleSelector New value for property <code>showTitleSelector</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowTitleSelector(bShowTitleSelector: boolean): ObjectHeader;
		/**
		 * Sets a new value for property <code>title</code>.
		 * 
		 * Object header title
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sTitle New value for property <code>title</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTitle(sTitle: string): ObjectHeader;
		/**
		 * Sets a new value for property <code>titleActive</code>.
		 * 
		 * Indicates that the title is clickable and is set only if a title is provided
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param bTitleActive New value for property <code>titleActive</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTitleActive(bTitleActive: boolean): ObjectHeader;
		/**
		 * Sets a new value for property <code>titleHref</code>.
		 * 
		 * The title link target URI. Supports standard hyperlink behavior. If an action should be triggered, this should not be set, but instead an event handler for the "titlePress" event should be registered.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sTitleHref New value for property <code>titleHref</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTitleHref(sTitleHref: sap.ui.core.URI): ObjectHeader;
		/**
		 * Sets a new value for property <code>titleLevel</code>.
		 * 
		 * Defines the semantic level of the title.
		 * This information is e.g. used by assistive technologies like screenreaders to create a hierarchical site map for faster navigation.
		 * Depending on this setting a HTML h1-h6 element is used.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>H1</code>.
		 * @param sTitleLevel New value for property <code>titleLevel</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTitleLevel(sTitleLevel: sap.ui.core.TitleLevel): ObjectHeader;
		/**
		 * Sets the new text for the tooltip of the select title arrow to the internal aggregation
		 * @param sTooltip the new value
		 * @return this pointer for chaining
		 */
		setTitleSelectorTooltip(sTooltip: any): ObjectHeader;
		/**
		 * Sets a new value for property <code>titleTarget</code>.
		 * 
		 * Options are _self, _top, _blank, _parent, _search. Alternatively, a frame name can be entered.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sTitleTarget New value for property <code>titleTarget</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTitleTarget(sTitleTarget: string): ObjectHeader;
		/**
		 * Sets a new value for property <code>titleTextDirection</code>.
		 * 
		 * This property specifies the title text directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @param sTitleTextDirection New value for property <code>titleTextDirection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTitleTextDirection(sTitleTextDirection: sap.ui.core.TextDirection): ObjectHeader;
	}

	interface ObjectHeaderContainer {
	}

	class ObjectIdentifier extends sap.ui.core.Control {
		/**
		 * Constructor for a new ObjectIdentifier.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.ObjectIdentifierMetadata);
		/**
		 * Constructor for a new ObjectIdentifier.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): ObjectIdentifier;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>titlePress</code> event of this <code>sap.m.ObjectIdentifier</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.ObjectIdentifier</code> itself.
		 * 
		 * Fires when the title is active and the user taps/clicks on it.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.ObjectIdentifier</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachTitlePress(oData: any, fnFunction: any, oListener?: any): ObjectIdentifier;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>titlePress</code> event of this <code>sap.m.ObjectIdentifier</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachTitlePress(fnFunction: any, oListener: any): ObjectIdentifier;
		/**
		 * Creates a new subclass of class sap.m.ObjectIdentifier with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ObjectIdentifierMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>titlePress</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>domRef</code> of type <code>object</code>DOM reference of the object identifier's title.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireTitlePress(mArguments?: any): ObjectIdentifier;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
		 * @return 
		 */
		getAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Gets current value of property <code>text</code>.
		 * 
		 * Defines the object text.
		 * @return Value of property <code>text</code>
		 */
		getText(): string;
		/**
		 * Gets current value of property <code>textDirection</code>.
		 * 
		 * Specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @return Value of property <code>textDirection</code>
		 */
		getTextDirection(): sap.ui.core.TextDirection;
		/**
		 * Gets current value of property <code>title</code>.
		 * 
		 * Defines the object title.
		 * @return Value of property <code>title</code>
		 */
		getTitle(): string;
		/**
		 * Gets current value of property <code>titleActive</code>.
		 * 
		 * Indicates if the ObjectIdentifier's title is clickable.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>titleActive</code>
		 */
		getTitleActive(): boolean;
		/**
		 * Gets current value of property <code>visible</code>.
		 * 
		 * Indicates if the ObjectIdentifier is visible. An invisible ObjectIdentifier is not being rendered.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>visible</code>
		 */
		getVisible(): boolean;
		/**
		 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
		 * @return The removed ariaLabelledBy or <code>null</code>
		 */
		removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Sets text.
		 * Default value is empty/undefined.
		 * @param sText New value for property text
		 * @return this to allow method chaining
		 */
		setText(sText: string): ObjectIdentifier;
		/**
		 * Sets a new value for property <code>textDirection</code>.
		 * 
		 * Specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @param sTextDirection New value for property <code>textDirection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTextDirection(sTextDirection: sap.ui.core.TextDirection): ObjectIdentifier;
		/**
		 * Sets the title.
		 * Default value is empty/undefined.
		 * @param sTitle New value for property title
		 * @return this to allow method chaining
		 */
		setTitle(sTitle: string): ObjectIdentifier;
		/**
		 * Sets property titleActive.
		 * Default value is false.
		 * @param bValue new value for property titleActive
		 * @return this to allow method chaining
		 */
		setTitleActive(bValue: boolean): ObjectIdentifier;
		/**
		 * Sets a new value for property <code>visible</code>.
		 * 
		 * Indicates if the ObjectIdentifier is visible. An invisible ObjectIdentifier is not being rendered.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bVisible New value for property <code>visible</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setVisible(bVisible: boolean): ObjectIdentifier;
		/**
		 * Sets a new value for property <code>visible</code>.
		 * 
		 * Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead of the real control
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @note Overload from base type sap.ui.core.Control
		 * @param bVisible New value for property <code>visible</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setVisible(bVisible: boolean): sap.ui.core.Control;
	}

	class ObjectListItem extends ListItemBase {
		/**
		 * Constructor for a new ObjectListItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.ObjectListItemMetadata);
		/**
		 * Constructor for a new ObjectListItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some attribute to the aggregation <code>attributes</code>.
		 * @param oAttribute the attribute to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAttribute(oAttribute: ObjectAttribute): ObjectListItem;
		/**
		 * Destroys all the attributes in the aggregation <code>attributes</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyAttributes(): ObjectListItem;
		/**
		 * Destroys the firstStatus in the aggregation <code>firstStatus</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyFirstStatus(): ObjectListItem;
		/**
		 * Destroys the secondStatus in the aggregation <code>secondStatus</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroySecondStatus(): ObjectListItem;
		/**
		 * Creates a new subclass of class sap.m.ObjectListItem with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ObjectListItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.ListItemBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.ListItemBase
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ListItemBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>activeIcon</code>.
		 * 
		 * Icon displayed when the ObjectListItem is active.
		 * @return Value of property <code>activeIcon</code>
		 */
		getActiveIcon(): sap.ui.core.URI;
		/**
		 * Gets content of aggregation <code>attributes</code>.
		 * 
		 * List of attributes displayed below the title to the left of the status fields.
		 * @return 
		 */
		getAttributes(): ObjectAttribute[];
		/**
		 * Gets content of aggregation <code>firstStatus</code>.
		 * 
		 * First status text field displayed on the right side of the attributes.
		 * @return 
		 */
		getFirstStatus(): ObjectStatus;
		/**
		 * Gets current value of property <code>icon</code>.
		 * 
		 * ObjectListItem icon displayed to the left of the title.
		 * @return Value of property <code>icon</code>
		 */
		getIcon(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>iconDensityAware</code>.
		 * 
		 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image (in case this version of image dоesn't exist on the server).
		 * 
		 * If bandwidth is key for the application, set this value to false.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>iconDensityAware</code>
		 */
		getIconDensityAware(): boolean;
		/**
		 * Gets current value of property <code>intro</code>.
		 * 
		 * Defines the introductory text for the ObjectListItem.
		 * @return Value of property <code>intro</code>
		 */
		getIntro(): string;
		/**
		 * Gets current value of property <code>introTextDirection</code>.
		 * 
		 * Determines the text direction of the item intro.
		 * Available options for the intro direction are LTR (left-to-right) and RTL (right-to-left).
		 * By default the item intro inherits the text direction from its parent.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @return Value of property <code>introTextDirection</code>
		 */
		getIntroTextDirection(): sap.ui.core.TextDirection;
		/**
		 * Gets current value of property <code>markFavorite</code>.
		 * 
		 * Sets the favorite state for the ObjectListItem.
		 * @return Value of property <code>markFavorite</code>
		 */
		getMarkFavorite(): boolean;
		/**
		 * Gets current value of property <code>markFlagged</code>.
		 * 
		 * Sets the flagged state for the ObjectListItem.
		 * @return Value of property <code>markFlagged</code>
		 */
		getMarkFlagged(): boolean;
		/**
		 * Gets current value of property <code>markLocked</code>.
		 * 
		 * Sets the locked state of the ObjectListItem.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>markLocked</code>
		 */
		getMarkLocked(): boolean;
		/**
		 * Gets current value of property <code>number</code>.
		 * 
		 * Defines the ObjectListItem number.
		 * @return Value of property <code>number</code>
		 */
		getNumber(): string;
		/**
		 * Gets current value of property <code>numberState</code>.
		 * 
		 * Defines the ObjectListItem number and numberUnit value state.
		 * 
		 * Default value is <code>None</code>.
		 * @return Value of property <code>numberState</code>
		 */
		getNumberState(): sap.ui.core.ValueState;
		/**
		 * Gets current value of property <code>numberTextDirection</code>.
		 * 
		 * Determines the text direction of the item number.
		 * Available options for the number direction are LTR (left-to-right) and RTL (right-to-left).
		 * By default the item number inherits the text direction from its parent.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @return Value of property <code>numberTextDirection</code>
		 */
		getNumberTextDirection(): sap.ui.core.TextDirection;
		/**
		 * Gets current value of property <code>numberUnit</code>.
		 * 
		 * Defines the number units qualifier of the ObjectListItem.
		 * @return Value of property <code>numberUnit</code>
		 */
		getNumberUnit(): string;
		/**
		 * Gets content of aggregation <code>secondStatus</code>.
		 * 
		 * Second status text field displayed on the right side of the attributes.
		 * @return 
		 */
		getSecondStatus(): ObjectStatus;
		/**
		 * Gets current value of property <code>showMarkers</code>.
		 * 
		 * If set to true, the ObjectListItem can be marked with icons such as favorite and flag.
		 * @return Value of property <code>showMarkers</code>
		 */
		getShowMarkers(): boolean;
		/**
		 * Gets current value of property <code>title</code>.
		 * 
		 * Defines the ObjectListItem title.
		 * @return Value of property <code>title</code>
		 */
		getTitle(): string;
		/**
		 * Gets current value of property <code>titleTextDirection</code>.
		 * 
		 * Determines the text direction of the item title.
		 * Available options for the title direction are LTR (left-to-right) and RTL (right-to-left).
		 * By default the item title inherits the text direction from its parent.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @return Value of property <code>titleTextDirection</code>
		 */
		getTitleTextDirection(): sap.ui.core.TextDirection;
		/**
		 * Checks for the provided <code>sap.m.ObjectAttribute</code> in the aggregation <code>attributes</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oAttribute The attribute whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfAttribute(oAttribute: ObjectAttribute): number;
		/**
		 * Inserts a attribute into the aggregation <code>attributes</code>.
		 * @param oAttribute the attribute to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the attribute should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the attribute is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertAttribute(oAttribute: ObjectAttribute, iIndex: number): ObjectListItem;
		/**
		 * Removes all the controls from the aggregation <code>attributes</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAttributes(): ObjectAttribute[];
		/**
		 * Removes a attribute from the aggregation <code>attributes</code>.
		 * @param vAttribute The attribute to remove or its index or id
		 * @return The removed attribute or <code>null</code>
		 */
		removeAttribute(vAttribute: number|string|ObjectAttribute): ObjectAttribute;
		/**
		 * Sets a new value for property <code>activeIcon</code>.
		 * 
		 * Icon displayed when the ObjectListItem is active.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sActiveIcon New value for property <code>activeIcon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setActiveIcon(sActiveIcon: sap.ui.core.URI): ObjectListItem;
		/**
		 * Sets the aggregated <code>firstStatus</code>.
		 * @param oFirstStatus The firstStatus to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setFirstStatus(oFirstStatus: ObjectStatus): ObjectListItem;
		/**
		 * Sets a new value for property <code>icon</code>.
		 * 
		 * ObjectListItem icon displayed to the left of the title.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sIcon New value for property <code>icon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIcon(sIcon: sap.ui.core.URI): ObjectListItem;
		/**
		 * Sets a new value for property <code>iconDensityAware</code>.
		 * 
		 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image (in case this version of image dоesn't exist on the server).
		 * 
		 * If bandwidth is key for the application, set this value to false.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bIconDensityAware New value for property <code>iconDensityAware</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIconDensityAware(bIconDensityAware: boolean): ObjectListItem;
		/**
		 * Sets a new value for property <code>intro</code>.
		 * 
		 * Defines the introductory text for the ObjectListItem.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sIntro New value for property <code>intro</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIntro(sIntro: string): ObjectListItem;
		/**
		 * Sets a new value for property <code>introTextDirection</code>.
		 * 
		 * Determines the text direction of the item intro.
		 * Available options for the intro direction are LTR (left-to-right) and RTL (right-to-left).
		 * By default the item intro inherits the text direction from its parent.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @param sIntroTextDirection New value for property <code>introTextDirection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIntroTextDirection(sIntroTextDirection: sap.ui.core.TextDirection): ObjectListItem;
		/**
		 * Sets a new value for property <code>markFavorite</code>.
		 * 
		 * Sets the favorite state for the ObjectListItem.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param bMarkFavorite New value for property <code>markFavorite</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMarkFavorite(bMarkFavorite: boolean): ObjectListItem;
		/**
		 * Sets a new value for property <code>markFlagged</code>.
		 * 
		 * Sets the flagged state for the ObjectListItem.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param bMarkFlagged New value for property <code>markFlagged</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMarkFlagged(bMarkFlagged: boolean): ObjectListItem;
		/**
		 * Sets a new value for property <code>markLocked</code>.
		 * 
		 * Sets the locked state of the ObjectListItem.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bMarkLocked New value for property <code>markLocked</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMarkLocked(bMarkLocked: boolean): ObjectListItem;
		/**
		 * Sets a new value for property <code>number</code>.
		 * 
		 * Defines the ObjectListItem number.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sNumber New value for property <code>number</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setNumber(sNumber: string): ObjectListItem;
		/**
		 * Sets a new value for property <code>numberState</code>.
		 * 
		 * Defines the ObjectListItem number and numberUnit value state.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>None</code>.
		 * @param sNumberState New value for property <code>numberState</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setNumberState(sNumberState: sap.ui.core.ValueState): ObjectListItem;
		/**
		 * Sets a new value for property <code>numberTextDirection</code>.
		 * 
		 * Determines the text direction of the item number.
		 * Available options for the number direction are LTR (left-to-right) and RTL (right-to-left).
		 * By default the item number inherits the text direction from its parent.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @param sNumberTextDirection New value for property <code>numberTextDirection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setNumberTextDirection(sNumberTextDirection: sap.ui.core.TextDirection): ObjectListItem;
		/**
		 * Sets a new value for property <code>numberUnit</code>.
		 * 
		 * Defines the number units qualifier of the ObjectListItem.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sNumberUnit New value for property <code>numberUnit</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setNumberUnit(sNumberUnit: string): ObjectListItem;
		/**
		 * Sets the aggregated <code>secondStatus</code>.
		 * @param oSecondStatus The secondStatus to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setSecondStatus(oSecondStatus: ObjectStatus): ObjectListItem;
		/**
		 * Sets a new value for property <code>showMarkers</code>.
		 * 
		 * If set to true, the ObjectListItem can be marked with icons such as favorite and flag.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param bShowMarkers New value for property <code>showMarkers</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowMarkers(bShowMarkers: boolean): ObjectListItem;
		/**
		 * Sets a new value for property <code>title</code>.
		 * 
		 * Defines the ObjectListItem title.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sTitle New value for property <code>title</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTitle(sTitle: string): ObjectListItem;
		/**
		 * Sets a new value for property <code>titleTextDirection</code>.
		 * 
		 * Determines the text direction of the item title.
		 * Available options for the title direction are LTR (left-to-right) and RTL (right-to-left).
		 * By default the item title inherits the text direction from its parent.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @param sTitleTextDirection New value for property <code>titleTextDirection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTitleTextDirection(sTitleTextDirection: sap.ui.core.TextDirection): ObjectListItem;
	}

	class ObjectMarker extends sap.ui.core.Control {
		/**
		 * Constructor for a new ObjectMarker.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.ObjectMarkerMetadata);
		/**
		 * Constructor for a new ObjectMarker.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.ObjectMarker with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ObjectMarkerMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>press</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		firePress(mArguments?: any): ObjectMarker;
		/**
		 * Gets current value of property <code>type</code>.
		 * 
		 * Sets one of the predefined types.<br>
		 * <b>Note</b>: If the <code>visibility</code> property is not specified explicitly, every <code>type</code> comes with predefined one as follows:
		 * <ul>
		 *                 <li>For <code>Flagged</code> and <code>Favorite</code> the icon is visible and the text is not displayed</li>
		 *                 <li>For <code>Draft</code> the text is visible and the icon is not displayed</li>
		 *                 <li>For <code>Locked</code> and <code>Unsaved</code> - on screens larger than 600px both icon and text are visible, otherwise only the icon</li>
		 * 
		 * </ul>
		 * @return Value of property <code>type</code>
		 */
		getType(): ObjectMarkerType;
		/**
		 * Gets current value of property <code>visibility</code>.
		 * 
		 * Sets one of the visibility states.
		 * Visibility states are as follows:
		 * <ul>
		 *                 <li><code>IconOnly</code> - displays only icon, regardless of the screen size</li>
		 *                 <li><code>TextOnly</code> - displays only text, regardless of the screen size</li>
		 *                 <li><code>IconAndText</code> - displays both icon and text, regardless of the screen size</li>
		 * </ul>
		 * @return Value of property <code>visibility</code>
		 */
		getVisibility(): ObjectMarkerVisibility;
	}

	class ObjectMarkerType {
		/**
		 * Draft type
		 */
		static Draft: string;
		/**
		 * Favorite type
		 */
		static Favorite: string;
		/**
		 * Flagged type
		 */
		static Flagged: string;
		/**
		 * Locked type
		 */
		static Locked: string;
		/**
		 * Unsaved type
		 */
		static Unsaved: string;
	}

	class ObjectMarkerVisibility {
		/**
		 * Shows icon and text
		 */
		static IconAndText: string;
		/**
		 * Shows only icon
		 */
		static IconOnly: string;
		/**
		 * Shows only text
		 */
		static TextOnly: string;
	}

	class ObjectNumber extends sap.ui.core.Control {
		/**
		 * Constructor for a new ObjectNumber.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.ObjectNumberMetadata);
		/**
		 * Constructor for a new ObjectNumber.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID|sap.ui.core.Control): ObjectNumber;
		/**
		 * Creates a new subclass of class sap.m.ObjectNumber with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ObjectNumberMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaDescribedBy</code>.
		 * @return 
		 */
		getAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Gets current value of property <code>emphasized</code>.
		 * 
		 * Indicates if the object number should appear emphasized.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>emphasized</code>
		 */
		getEmphasized(): boolean;
		/**
		 * Gets current value of property <code>number</code>.
		 * 
		 * Defines the number field.
		 * @return Value of property <code>number</code>
		 */
		getNumber(): string;
		/**
		 * Gets current value of property <code>state</code>.
		 * 
		 * Determines the object number's value state. Setting this state will cause the number to be rendered in state-specific colors (only blue-crystal theme).
		 * 
		 * Default value is <code>None</code>.
		 * @return Value of property <code>state</code>
		 */
		getState(): sap.ui.core.ValueState;
		/**
		 * Gets current value of property <code>textAlign</code>.
		 * 
		 * Sets the horizontal alignment of the number and unit.
		 * 
		 * Default value is <code>Begin</code>.
		 * @return Value of property <code>textAlign</code>
		 */
		getTextAlign(): sap.ui.core.TextAlign;
		/**
		 * Gets current value of property <code>textDirection</code>.
		 * 
		 * Available options for the number and unit text direction are LTR(left-to-right) and RTL(right-to-left). By default, the control inherits the text direction from its parent control.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @return Value of property <code>textDirection</code>
		 */
		getTextDirection(): sap.ui.core.TextDirection;
		/**
		 * Gets current value of property <code>unit</code>.
		 * 
		 * Defines the number units qualifier. If numberUnit and unit are both set, the unit value is used.
		 * @return Value of property <code>unit</code>
		 */
		getUnit(): string;
		/**
		 * Removes all the controls in the association named <code>ariaDescribedBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
		 * @return The removed ariaDescribedBy or <code>null</code>
		 */
		removeAriaDescribedBy(vAriaDescribedBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Sets a new value for property <code>emphasized</code>.
		 * 
		 * Indicates if the object number should appear emphasized.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bEmphasized New value for property <code>emphasized</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setEmphasized(bEmphasized: boolean): ObjectNumber;
		/**
		 * Sets a new value for property <code>number</code>.
		 * 
		 * Defines the number field.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sNumber New value for property <code>number</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setNumber(sNumber: string): ObjectNumber;
		/**
		 * Sets the ObjectNumber's value state.
		 * @param sState The state to be set to
		 * @return this pointer for chaining
		 */
		setState(sState: sap.ui.core.ValueState): number;
		/**
		 * Sets the text alignment of the control without re-rendering the whole ObjectNumber.
		 * @param sAlign The new value
		 * @return <code>this</code> pointer for chaining
		 */
		setTextAlign(sAlign: sap.ui.core.TextAlign): ObjectNumber;
		/**
		 * Sets a new value for property <code>textDirection</code>.
		 * 
		 * Available options for the number and unit text direction are LTR(left-to-right) and RTL(right-to-left). By default, the control inherits the text direction from its parent control.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @param sTextDirection New value for property <code>textDirection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTextDirection(sTextDirection: sap.ui.core.TextDirection): ObjectNumber;
		/**
		 * Sets a new value for property <code>unit</code>.
		 * 
		 * Defines the number units qualifier. If numberUnit and unit are both set, the unit value is used.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sUnit New value for property <code>unit</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setUnit(sUnit: string): ObjectNumber;
	}

	class ObjectStatus extends sap.ui.core.Control {
		/**
		 * Constructor for a new ObjectStatus.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.ObjectStatusMetadata);
		/**
		 * Constructor for a new ObjectStatus.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID|sap.ui.core.Control): ObjectStatus;
		/**
		 * Creates a new subclass of class sap.m.ObjectStatus with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ObjectStatusMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * 
		 */
		getAccessibilityInfo();
		/**
		 * This function (if available on the concrete control) provides
		 * the current accessibility state of the control.
		 * 
		 * Applications must not call this hook method directly, it is called by the framework.
		 * 
		 * Subclasses of Control should implement this hook to provide any necessary accessibility information:
		 * 
		 * <pre>
		 * MyControl.prototype.getAccessibilityInfo = function() {
		 *    return {
		 *      role: "textbox",      // String which represents the WAI-ARIA role which is implemented by the control.
		 *      type: "date input",   // String which represents the control type (Must be a translated text). Might correlate with
		 *                            // the role.
		 *      description: "value", // String which describes the most relevant control state (e.g. the inputs value). Must be a
		 *                            // translated text.
		 *                            // Note: The type and the enabled/editable state must not be handled here.
		 *      focusable: true,      // Boolean which describes whether the control can get the focus.
		 *      enabled: true,        // Boolean which describes whether the control is enabled. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      editable: true,       // Boolean which describes whether the control is editable. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      children: []          // Array of accessibility info objects of children of the given control (e.g. when the control is a layout).
		 *                            // Note: Children should only be provided when it is helpful to understand the accessibility context
		 *                            //       (e.g. a form control must not provide details of its internals (fields, labels, ...) but a
		 *                            //       layout should).
		 *    };
		 * };
		 * </pre>
		 * 
		 * Note: The returned object provides the accessibility state of the control at the point in time when this function is called.
		 * @note Overload from base type sap.ui.core.Control
		 * @return Current accessibility state of the control.
		 */
		getAccessibilityInfo(): any;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaDescribedBy</code>.
		 * @return 
		 */
		getAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Gets current value of property <code>icon</code>.
		 * 
		 * Icon URI. This may be either an icon font or image path.
		 * @return Value of property <code>icon</code>
		 */
		getIcon(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>iconDensityAware</code>.
		 * 
		 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
		 * 
		 * If bandwidth is key for the application, set this value to false.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>iconDensityAware</code>
		 */
		getIconDensityAware(): boolean;
		/**
		 * Gets current value of property <code>state</code>.
		 * 
		 * Defines the text value state.
		 * 
		 * Default value is <code>None</code>.
		 * @return Value of property <code>state</code>
		 */
		getState(): sap.ui.core.ValueState;
		/**
		 * Gets current value of property <code>text</code>.
		 * 
		 * Defines the ObjectStatus text.
		 * @return Value of property <code>text</code>
		 */
		getText(): string;
		/**
		 * Gets current value of property <code>textDirection</code>.
		 * 
		 * Determines the direction of the text, not including the title.
		 * Available options for the text direction are LTR (left-to-right) and RTL (right-to-left). By default the control inherits the text direction from its parent control.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @return Value of property <code>textDirection</code>
		 */
		getTextDirection(): sap.ui.core.TextDirection;
		/**
		 * Gets current value of property <code>title</code>.
		 * 
		 * Defines the ObjectStatus title.
		 * @return Value of property <code>title</code>
		 */
		getTitle(): string;
		/**
		 * Removes all the controls in the association named <code>ariaDescribedBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
		 * @return The removed ariaDescribedBy or <code>null</code>
		 */
		removeAriaDescribedBy(vAriaDescribedBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Sets a new value for property <code>icon</code>.
		 * 
		 * Icon URI. This may be either an icon font or image path.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sIcon New value for property <code>icon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIcon(sIcon: sap.ui.core.URI): ObjectStatus;
		/**
		 * Sets a new value for property <code>iconDensityAware</code>.
		 * 
		 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
		 * 
		 * If bandwidth is key for the application, set this value to false.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bIconDensityAware New value for property <code>iconDensityAware</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIconDensityAware(bIconDensityAware: boolean): ObjectStatus;
		/**
		 * Sets a new value for property <code>state</code>.
		 * 
		 * Defines the text value state.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>None</code>.
		 * @param sState New value for property <code>state</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setState(sState: sap.ui.core.ValueState): ObjectStatus;
		/**
		 * Sets the text.
		 * The default value is empty/undefined.
		 * @param sText New value for property text
		 * @return this to allow method chaining
		 */
		setText(sText: string): ObjectStatus;
		/**
		 * Sets a new value for property <code>textDirection</code>.
		 * 
		 * Determines the direction of the text, not including the title.
		 * Available options for the text direction are LTR (left-to-right) and RTL (right-to-left). By default the control inherits the text direction from its parent control.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @param sTextDirection New value for property <code>textDirection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTextDirection(sTextDirection: sap.ui.core.TextDirection): ObjectStatus;
		/**
		 * Sets the title.
		 * The default value is empty/undefined.
		 * @param sTitle New value for property title
		 * @return this to allow method chaining
		 */
		setTitle(sTitle: string): ObjectStatus;
	}

	class OverflowToolbar extends Toolbar {
		/**
		 * Constructor for a new Overflow Toolbar
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Constructor for a new Overflow Toolbar
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Closes the overflow area.
		 * Useful to manually close the overflow after having suppressed automatic closing with "closeOverflowOnInteraction=false".
		 */
		closeOverflow();
		/**
		 * Creates a new subclass of class sap.m.OverflowToolbar with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.Toolbar.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.Toolbar with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.Toolbar
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ToolbarMetadata, FNMetaImpl?: any): any;
	}

	class OverflowToolbarLayoutData extends ToolbarLayoutData {
		/**
		 * Constructor for a new OverflowToolbarLayoutData.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new element, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.OverflowToolbarLayoutDataMetadata);
		/**
		 * Constructor for a new OverflowToolbarLayoutData.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new element, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.OverflowToolbarLayoutData with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ToolbarLayoutData.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|OverflowToolbarLayoutDataMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.ToolbarLayoutData with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.
		 * @note Overload from base type sap.m.ToolbarLayoutData
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ToolbarLayoutDataMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>closeOverflowOnInteraction</code>.
		 * 
		 * Defines whether the overflow area is automatically closed when interacting with a control in it
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>closeOverflowOnInteraction</code>
		 */
		getCloseOverflowOnInteraction(): boolean;
		/**
		 * Gets current value of property <code>group</code>.
		 * 
		 * Defines OverflowToolbar items group number.
		 * Default value is 0, which means that the control does not belong to any group.
		 * Elements that belong to a group overflow together. The overall priority of the group is defined by the element with highest priority.
		 * Elements that belong to a group are not allowed to have AlwaysOverflow or NeverOverflow priority.
		 * 
		 * Default value is <code>0</code>.
		 * @return Value of property <code>group</code>
		 */
		getGroup(): number;
		/**
		 * Gets current value of property <code>priority</code>.
		 * 
		 * Defines OverflowToolbar items priority, Available priorities ate NeverOverflow, High, Low, Disappear and AlwaysOverflow
		 * 
		 * Default value is <code>High</code>.
		 * @return Value of property <code>priority</code>
		 */
		getPriority(): OverflowToolbarPriority;
		/**
		 * Sets a new value for property <code>closeOverflowOnInteraction</code>.
		 * 
		 * Defines whether the overflow area is automatically closed when interacting with a control in it
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bCloseOverflowOnInteraction New value for property <code>closeOverflowOnInteraction</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setCloseOverflowOnInteraction(bCloseOverflowOnInteraction: boolean): OverflowToolbarLayoutData;
		/**
		 * Sets a new value for property <code>group</code>.
		 * 
		 * Defines OverflowToolbar items group number.
		 * Default value is 0, which means that the control does not belong to any group.
		 * Elements that belong to a group overflow together. The overall priority of the group is defined by the element with highest priority.
		 * Elements that belong to a group are not allowed to have AlwaysOverflow or NeverOverflow priority.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>0</code>.
		 * @param iGroup New value for property <code>group</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setGroup(iGroup: number): OverflowToolbarLayoutData;
		/**
		 * Sets a new value for property <code>priority</code>.
		 * 
		 * Defines OverflowToolbar items priority, Available priorities ate NeverOverflow, High, Low, Disappear and AlwaysOverflow
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>High</code>.
		 * @param sPriority New value for property <code>priority</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setPriority(sPriority: OverflowToolbarPriority): OverflowToolbarLayoutData;
	}

	class OverflowToolbarPriority {
		/**
		 * AlwaysOverflow priority forces OverflowToolbar items to remain always in the overflow area
		 */
		static AlwaysOverflow: string;
		/**
		 * Disappear priority  OverflowToolbar items overflow before the items with higher priority such as Low and High priority items and remain hidden in the overflow area
		 */
		static Disappear: string;
		/**
		 * High priority OverflowToolbar items overflow after the items with lower priority
		 */
		static High: string;
		/**
		 * Low priority  OverflowToolbar items overflow before the items with higher priority such as High priority items
		 */
		static Low: string;
		/**
		 * NeverOverflow priority forces OverflowToolbar items to remain always in the toolbar
		 */
		static NeverOverflow: string;
	}

	class P13nColumnsItem extends sap.ui.core.Item {
		/**
		 * Constructor for a new P13nColumnsItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.P13nColumnsItemMetadata);
		/**
		 * Constructor for a new P13nColumnsItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.P13nColumnsItem with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|P13nColumnsItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Item with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Item
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>columnKey</code>.
		 * 
		 * This property contains the unique table column key
		 * @return Value of property <code>columnKey</code>
		 */
		getColumnKey(): string;
		/**
		 * Gets current value of property <code>index</code>.
		 * 
		 * This property contains the index of a table column
		 * @return Value of property <code>index</code>
		 */
		getIndex(): number;
		/**
		 * Gets current value of property <code>total</code>.
		 * 
		 * This property contains the total flag of a table column.
		 * @return Value of property <code>total</code>
		 */
		getTotal(): boolean;
		/**
		 * Gets current value of property <code>visible</code>.
		 * 
		 * This property decides whether a P13nColumnsItem is visible
		 * @return Value of property <code>visible</code>
		 */
		getVisible(): boolean;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * This property contains the with of a table column.
		 * @return Value of property <code>width</code>
		 */
		getWidth(): string;
		/**
		 * Sets a new value for property <code>columnKey</code>.
		 * 
		 * This property contains the unique table column key
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sColumnKey New value for property <code>columnKey</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setColumnKey(sColumnKey: string): P13nColumnsItem;
		/**
		 * Sets a new value for property <code>index</code>.
		 * 
		 * This property contains the index of a table column
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param iIndex New value for property <code>index</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIndex(iIndex: number): P13nColumnsItem;
		/**
		 * Sets a new value for property <code>total</code>.
		 * 
		 * This property contains the total flag of a table column.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param bTotal New value for property <code>total</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTotal(bTotal: boolean): P13nColumnsItem;
		/**
		 * Sets a new value for property <code>visible</code>.
		 * 
		 * This property decides whether a P13nColumnsItem is visible
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param bVisible New value for property <code>visible</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setVisible(bVisible: boolean): P13nColumnsItem;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * This property contains the with of a table column.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: string): P13nColumnsItem;
	}

	class P13nColumnsPanel extends P13nPanel {
		/**
		 * Constructor for a new P13nColumnsPanel.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.P13nColumnsPanelMetadata);
		/**
		 * Constructor for a new P13nColumnsPanel.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Add ColumnsItem to columnsItems aggregation
		 * @param oColumnsItem is the new ColumnsItem that shall be added
		 * @return <code>this</code> to allow method chaining.
		 */
		addColumnsItem(oColumnsItem: P13nColumnsItem): P13nColumnsPanel;
		/**
		 * Add item to items aggregation
		 * @param oItem is the new item that shall be added
		 * @return <code>this</code> to allow method chaining.
		 */
		addItem(oItem: P13nItem): P13nColumnsPanel;
		/**
		 * Adds some item to the aggregation <code>items</code>.
		 * @note Overload from base type sap.m.P13nPanel
		 * @param oItem the item to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addItem(oItem: P13nItem): P13nPanel;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>addColumnsItem</code> event of this <code>sap.m.P13nColumnsPanel</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.P13nColumnsPanel</code> itself.
		 * 
		 * Event raised when a <code>columnsItem</code> is added.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.P13nColumnsPanel</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachAddColumnsItem(oData: any, fnFunction: any, oListener?: any): P13nColumnsPanel;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>changeColumnsItems</code> event of this <code>sap.m.P13nColumnsPanel</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.P13nColumnsPanel</code> itself.
		 * 
		 * Event raised if <code>columnsItems</code> is changed or new one needs to be created in the model.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.P13nColumnsPanel</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachChangeColumnsItems(oData: any, fnFunction: any, oListener?: any): P13nColumnsPanel;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>setData</code> event of this <code>sap.m.P13nColumnsPanel</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.P13nColumnsPanel</code> itself.
		 * 
		 * Event raised if <code>setData</code> is called in model. The event serves the purpose of minimizing such calls since they can
		 * take up a lot of performance.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.P13nColumnsPanel</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachSetData(oData: any, fnFunction: any, oListener?: any): P13nColumnsPanel;
		/**
		 * Binds aggregation <code>columnsItems</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindColumnsItems(oBindingInfo: any): P13nColumnsPanel;
		/**
		 * Destroy all instances from columnsItems aggregation
		 * @return <code>this</code> to allow method chaining.
		 */
		destroyColumnsItems(): P13nColumnsPanel;
		/**
		 * Destroy all items from items aggregation
		 * @return <code>this</code> to allow method chaining.
		 */
		destroyItems(): P13nColumnsPanel;
		/**
		 * Destroys all the items in the aggregation <code>items</code>.
		 * @note Overload from base type sap.m.P13nPanel
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyItems(): P13nPanel;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>addColumnsItem</code> event of this <code>sap.m.P13nColumnsPanel</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachAddColumnsItem(fnFunction: any, oListener: any): P13nColumnsPanel;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>changeColumnsItems</code> event of this <code>sap.m.P13nColumnsPanel</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachChangeColumnsItems(fnFunction: any, oListener: any): P13nColumnsPanel;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>setData</code> event of this <code>sap.m.P13nColumnsPanel</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachSetData(fnFunction: any, oListener: any): P13nColumnsPanel;
		/**
		 * Cleans up before destruction.
		 */
		exit();
		/**
		 * Creates a new subclass of class sap.m.P13nColumnsPanel with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.P13nPanel.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|P13nColumnsPanelMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.P13nPanel with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.P13nPanel
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|P13nPanelMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>addColumnsItem</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>newItem</code> of type <code>sap.m.P13nColumnsItem</code><code>columnsItem</code> that needs to be added in the model.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireAddColumnsItem(mArguments?: any): P13nColumnsPanel;
		/**
		 * Fires event <code>changeColumnsItems</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>newItems</code> of type <code>sap.m.P13nColumnsItem[]</code>Contains <code>columnsItems</code> that needs to be created in the model.</li>
		 * <li><code>existingItems</code> of type <code>sap.m.P13nColumnsItem[]</code>Contains <code>columnsItems</code> that needs to be changed in the model.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireChangeColumnsItems(mArguments?: any): P13nColumnsPanel;
		/**
		 * Fires event <code>setData</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireSetData(mArguments?: any): P13nColumnsPanel;
		/**
		 * Gets content of aggregation <code>columnsItems</code>.
		 * 
		 * List of columns that has been changed.
		 * @return 
		 */
		getColumnsItems(): P13nColumnsItem[];
		/**
		 * Delivers a payload for columnsPanel that can be used at consumer side
		 * @return oPayload, which contains useful information
		 */
		getOkPayload(): any;
		/**
		 * This method can be overwritten by subclass in order to return a payload for Ok action
		 * @note Overload from base type sap.m.P13nPanel
		 */
		getOkPayload();
		/**
		 * Delivers a payload for columnsPanel that can be used at consumer side
		 * @return oPayload, which contains useful information
		 */
		getResetPayload(): any;
		/**
		 * This method can be overwritten by subclass in order to return a payload for Reset action
		 * @note Overload from base type sap.m.P13nPanel
		 */
		getResetPayload();
		/**
		 * Gets current value of property <code>visibleItemsThreshold</code>.
		 * 
		 * Specifies a threshold of visible items. If the end user makes a lot of columns visible, this might cause performance to slow down.
		 * When this happens, the user can receive a corresponding warning triggered by the <code>visibleItemsThreshold</code> property. The
		 * property needs to be activated and set to the required value by the consuming application to ensure that the warning message is
		 * shown when the threshold has been exceeded. In the following example the message will be shown if more than 100 visible columns are
		 * selected:
		 * 
		 * <pre>
		 * customData&gt;
		 * core:CustomData key=&quot;p13nDialogSettings&quot;
		 * value='\{&quot;columns&quot;:\{&quot;visible&quot;: true, &quot;payload&quot;: \{&quot;visibleItemsThreshold&quot;: 3\}\}\}' /&gt;
		 * /customData&gt;
		 * </pre>
		 * 
		 * Default value is <code>-1</code>.
		 * @return Value of property <code>visibleItemsThreshold</code>
		 */
		getVisibleItemsThreshold(): number;
		/**
		 * Checks for the provided <code>sap.m.P13nColumnsItem</code> in the aggregation <code>columnsItems</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oColumnsItem The columnsItem whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfColumnsItem(oColumnsItem: P13nColumnsItem): number;
		/**
		 * Insert ColumnsItem to columnsItems aggregation
		 * @param iIndex is the index where the columnsItem item shall be inserted
		 * @param oColumnsItem is the new columnsItem that shall be inserted
		 * @return <code>this</code> to allow method chaining.
		 */
		insertColumnsItem(iIndex: number, oColumnsItem: P13nColumnsItem): P13nColumnsPanel;
		/**
		 * Add item to items aggregation
		 * @param iIndex is the index where the new item shall be inserted
		 * @param oItem is the new item that shall be added
		 * @return <code>this</code> to allow method chaining.
		 */
		insertItem(iIndex: number, oItem: P13nItem): P13nColumnsPanel;
		/**
		 * Inserts a item into the aggregation <code>items</code>.
		 * @note Overload from base type sap.m.P13nPanel
		 * @param oItem the item to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the item should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the item is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertItem(oItem: P13nItem, iIndex: number): P13nPanel;
		/**
		 * This method does a re-initialization of the panel
		 */
		reInitialize();
		/**
		 * Remove all ColumnsItems from columnsItems aggregation
		 * @return An array of the removed items (might be empty).
		 */
		removeAllColumnsItems(): P13nColumnsItem[];
		/**
		 * Remove all item from items aggregation
		 * @return An array of the removed items (might be empty).
		 */
		removeAllItems(): P13nItem[];
		/**
		 * Remove ColumnsItem from columnsItems aggregation
		 * @param oColumnsItem is the ColumnsItem that shall be removed
		 * @return The removed item or null.
		 */
		removeColumnsItem(oColumnsItem: P13nColumnsItem): P13nColumnsItem;
		/**
		 * Remove item from items aggregation
		 * @param oItem is the item that shall be removed
		 * @return The removed item or null.
		 */
		removeItem(oItem: P13nItem): P13nItem;
		/**
		 * Removes a item from the aggregation <code>items</code>.
		 * @note Overload from base type sap.m.P13nPanel
		 * @param vItem The item to remove or its index or id
		 * @return The removed item or <code>null</code>
		 */
		removeItem(vItem: number|string|P13nItem): P13nItem;
		/**
		 * Sets a new value for property <code>visibleItemsThreshold</code>.
		 * 
		 * Specifies a threshold of visible items. If the end user makes a lot of columns visible, this might cause performance to slow down.
		 * When this happens, the user can receive a corresponding warning triggered by the <code>visibleItemsThreshold</code> property. The
		 * property needs to be activated and set to the required value by the consuming application to ensure that the warning message is
		 * shown when the threshold has been exceeded. In the following example the message will be shown if more than 100 visible columns are
		 * selected:
		 * 
		 * <pre>
		 * customData&gt;
		 * core:CustomData key=&quot;p13nDialogSettings&quot;
		 * value='\{&quot;columns&quot;:\{&quot;visible&quot;: true, &quot;payload&quot;: \{&quot;visibleItemsThreshold&quot;: 3\}\}\}' /&gt;
		 * /customData&gt;
		 * </pre>
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>-1</code>.
		 * @param iVisibleItemsThreshold New value for property <code>visibleItemsThreshold</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setVisibleItemsThreshold(iVisibleItemsThreshold: number): P13nColumnsPanel;
		/**
		 * Unbinds aggregation <code>columnsItems</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindColumnsItems(): P13nColumnsPanel;
	}

	class P13nConditionPanel extends sap.ui.core.Control {
		/**
		 * Constructor for a new P13nConditionPanel.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.P13nConditionPanelMetadata);
		/**
		 * Constructor for a new P13nConditionPanel.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * add a single condition.
		 * @param oCondition the new condition of type { "key": "007", "operation": sap.m.P13nConditionOperation.Ascending, "keyField":
		 *        "keyFieldKey", "value1": "", "value2": ""};
		 */
		addCondition(oCondition: any);
		/**
		 * add a single KeyField
		 * @param oKeyField {key: "CompanyCode", text: "ID"}
		 */
		addKeyField(oKeyField: any);
		/**
		 * add a single operation
		 * @param oOperation 
		 * @param sType defines the type for which this operations will be used.
		 */
		addOperation(oOperation: any, sType: string);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>dataChange</code> event of this <code>sap.m.P13nConditionPanel</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.P13nConditionPanel</code> itself.
		 * 
		 * Workaround for updating the binding
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.P13nConditionPanel</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachDataChange(oData: any, fnFunction: any, oListener?: any): P13nConditionPanel;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>dataChange</code> event of this <code>sap.m.P13nConditionPanel</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachDataChange(fnFunction: any, oListener: any): P13nConditionPanel;
		/**
		 * Creates a new subclass of class sap.m.P13nConditionPanel with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|P13nConditionPanelMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>dataChange</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireDataChange(mArguments?: any): P13nConditionPanel;
		/**
		 * Gets current value of property <code>alwaysShowAddIcon</code>.
		 * 
		 * makes the Add icon visible on each condition row. If is set to false the Add is only visible at the end and you can only append a
		 * new condition.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>alwaysShowAddIcon</code>
		 */
		getAlwaysShowAddIcon(): boolean;
		/**
		 * Gets current value of property <code>autoAddNewRow</code>.
		 * 
		 * adds initial a new empty condition row
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>autoAddNewRow</code>
		 */
		getAutoAddNewRow(): boolean;
		/**
		 * Gets current value of property <code>autoReduceKeyFieldItems</code>.
		 * 
		 * KeyField value can only be selected once. When you set the property to true the ConditionPanel will automatically offers on the
		 * KeyField drop down only the keyFields which are not used. The default behavior is that in each keyField dropdown all keyfields are
		 * listed.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>autoReduceKeyFieldItems</code>
		 */
		getAutoReduceKeyFieldItems(): boolean;
		/**
		 * returns array of all defined conditions.
		 * @return array of Conditions
		 */
		getConditions(): any[];
		/**
		 * Gets current value of property <code>containerQuery</code>.
		 * 
		 * defines if the mediaQuery or a ContainerResize will be used for layout update. When the P13nConditionPanel is used on a dialog the
		 * property should be set to true!
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>containerQuery</code>
		 */
		getContainerQuery(): boolean;
		/**
		 * Gets current value of property <code>disableFirstRemoveIcon</code>.
		 * 
		 * makes the remove icon on the first condition row disabled when only one condition exist.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>disableFirstRemoveIcon</code>
		 */
		getDisableFirstRemoveIcon(): boolean;
		/**
		 * Gets current value of property <code>displayFormat</code>.
		 * 
		 * This represents the displayFormat of the condition Values. With the value "UpperCase" the entered value of the condition will be
		 * converted to upperCase.
		 * @return Value of property <code>displayFormat</code>
		 */
		getDisplayFormat(): string;
		/**
		 * Gets current value of property <code>exclude</code>.
		 * 
		 * exclude options for filter
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>exclude</code>
		 */
		getExclude(): boolean;
		/**
		 * getter for KeyFields array
		 * @return array of KeyFields [{key: "CompanyCode", text: "ID"}, {key:"CompanyName", text : "Name"}]
		 */
		getKeyFields(): any[];
		/**
		 * Gets current value of property <code>layoutMode</code>.
		 * 
		 * can be used to control the layout behavior. Default is "" which will automatically change the layout. With "Desktop", "Table"
		 * or"Phone" you can set a fixed layout.
		 * @return Value of property <code>layoutMode</code>
		 */
		getLayoutMode(): string;
		/**
		 * Gets current value of property <code>maxConditions</code>.
		 * 
		 * defines the max number of conditions on the ConditionPanel
		 * 
		 * Default value is <code>-1</code>.
		 * @return Value of property <code>maxConditions</code>
		 */
		getMaxConditions(): string;
		/**
		 * returns the default array of operations
		 * @param sType defines the type for which the operations should be returned.
		 * @return array of operations
		 */
		getOperations(sType: string): any[];
		/**
		 * Gets current value of property <code>showLabel</code>.
		 * 
		 * show additional labels in the condition
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>showLabel</code>
		 */
		getShowLabel(): boolean;
		/**
		 * Gets current value of property <code>usePrevConditionSetting</code>.
		 * 
		 * new added condition use the settings from the previous condition as default.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>usePrevConditionSetting</code>
		 */
		getUsePrevConditionSetting(): boolean;
		/**
		 * Gets current value of property <code>validationExecutor</code>.
		 * 
		 * Calls the validation listener tbd...
		 * @return Value of property <code>validationExecutor</code>
		 */
		getValidationExecutor(): any;
		/**
		 * insert a single condition.
		 * @param oCondition the new condition of type { "key": "007", "operation": sap.m.P13nConditionOperation.Ascending, "keyField":
		 *        "keyFieldKey", "value1": "", "value2": ""};
		 * @param index of the new condition
		 */
		insertCondition(oCondition: any, index: number);
		/**
		 * remove all conditions.
		 */
		removeAllConditions();
		/**
		 * removes all KeyFields
		 */
		removeAllKeyFields();
		/**
		 * remove all operations
		 * @param sType defines the type for which all operations should be removed
		 */
		removeAllOperations(sType: string);
		/**
		 * remove a single condition.
		 * @param vCondition is the condition which should be removed. can be either a string with the key of the condition of the condition
		 *        object itself.
		 */
		removeCondition(vCondition: any);
		/**
		 * removes all invalid conditions.
		 */
		removeInvalidConditions();
		/**
		 * removes all errors/warning states from the value1/2 fields of all conditions.
		 */
		removeValidationErrors();
		/**
		 * Sets a new value for property <code>autoAddNewRow</code>.
		 * 
		 * adds initial a new empty condition row
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bAutoAddNewRow New value for property <code>autoAddNewRow</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setAutoAddNewRow(bAutoAddNewRow: boolean): P13nConditionPanel;
		/**
		 * Sets a new value for property <code>autoReduceKeyFieldItems</code>.
		 * 
		 * KeyField value can only be selected once. When you set the property to true the ConditionPanel will automatically offers on the
		 * KeyField drop down only the keyFields which are not used. The default behavior is that in each keyField dropdown all keyfields are
		 * listed.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bAutoReduceKeyFieldItems New value for property <code>autoReduceKeyFieldItems</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setAutoReduceKeyFieldItems(bAutoReduceKeyFieldItems: boolean): P13nConditionPanel;
		/**
		 * This method must be used to assign a list of conditions.
		 * @param aConditions array of Conditions.
		 */
		setConditions(aConditions: any[]);
		/**
		 * Sets a new value for property <code>disableFirstRemoveIcon</code>.
		 * 
		 * makes the remove icon on the first condition row disabled when only one condition exist.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bDisableFirstRemoveIcon New value for property <code>disableFirstRemoveIcon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDisableFirstRemoveIcon(bDisableFirstRemoveIcon: boolean): P13nConditionPanel;
		/**
		 * Sets a new value for property <code>displayFormat</code>.
		 * 
		 * This represents the displayFormat of the condition Values. With the value "UpperCase" the entered value of the condition will be
		 * converted to upperCase.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sDisplayFormat New value for property <code>displayFormat</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDisplayFormat(sDisplayFormat: string): P13nConditionPanel;
		/**
		 * Sets a new value for property <code>exclude</code>.
		 * 
		 * exclude options for filter
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bExclude New value for property <code>exclude</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setExclude(bExclude: boolean): P13nConditionPanel;
		/**
		 * This method allows you to specify the KeyFields for the conditions. You can set an array of object with Key and Text properties to define the
		 * keyfields.
		 * @param aKeyFields array of KeyFields [{key: "CompanyCode", text: "ID"}, {key:"CompanyName", text : "Name"}]
		 */
		setKeyFields(aKeyFields: any[]);
		/**
		 * Sets a new value for property <code>maxConditions</code>.
		 * 
		 * defines the max number of conditions on the ConditionPanel
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>-1</code>.
		 * @param sMaxConditions New value for property <code>maxConditions</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMaxConditions(sMaxConditions: string): P13nConditionPanel;
		/**
		 * setter for the supported operations which we show per condition row. This array of "default" operations will only be used when we do not have
		 * on the keyfield itself some specific operations and a keyfield is of not of type date or numeric.
		 * @param aOperations array of operations [sap.m.P13nConditionOperation.BT, sap.m.P13nConditionOperation.EQ]
		 * @param sType defines the type for which this operations will be used. is sType is not defined the operations will be used as default
		 *        operations.
		 */
		setOperations(aOperations: any[], sType: string);
		/**
		 * Sets a new value for property <code>showLabel</code>.
		 * 
		 * show additional labels in the condition
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bShowLabel New value for property <code>showLabel</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowLabel(bShowLabel: boolean): P13nConditionPanel;
		/**
		 * Sets a new value for property <code>usePrevConditionSetting</code>.
		 * 
		 * new added condition use the settings from the previous condition as default.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bUsePrevConditionSetting New value for property <code>usePrevConditionSetting</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setUsePrevConditionSetting(bUsePrevConditionSetting: boolean): P13nConditionPanel;
		/**
		 * Sets a new value for property <code>validationExecutor</code>.
		 * 
		 * Calls the validation listener tbd...
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param oValidationExecutor New value for property <code>validationExecutor</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setValidationExecutor(oValidationExecutor: any): P13nConditionPanel;
	}

	class P13nDialog extends Dialog {
		/**
		 * Constructor for a new P13nDialog.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.P13nDialogMetadata);
		/**
		 * Constructor for a new P13nDialog.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some panel to the aggregation <code>panels</code>.
		 * @param oPanel the panel to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addPanel(oPanel: P13nPanel): P13nDialog;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>cancel</code> event of this <code>sap.m.P13nDialog</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.P13nDialog</code> itself.
		 * 
		 * Event fired if the 'cancel' button in P13nDialog is clicked.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.P13nDialog</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachCancel(oData: any, fnFunction: any, oListener?: any): P13nDialog;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>ok</code> event of this <code>sap.m.P13nDialog</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.P13nDialog</code> itself.
		 * 
		 * Event fired if the 'ok' button in P13nDialog is clicked.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.P13nDialog</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachOk(oData: any, fnFunction: any, oListener?: any): P13nDialog;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>reset</code> event of this <code>sap.m.P13nDialog</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.P13nDialog</code> itself.
		 * 
		 * Event fired if the 'reset' button in P13nDialog is clicked.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.P13nDialog</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachReset(oData: any, fnFunction: any, oListener?: any): P13nDialog;
		/**
		 * Binds aggregation <code>panels</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindPanels(oBindingInfo: any): P13nDialog;
		/**
		 * Destroys all the panels in the aggregation <code>panels</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyPanels(): P13nDialog;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>cancel</code> event of this <code>sap.m.P13nDialog</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachCancel(fnFunction: any, oListener: any): P13nDialog;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>ok</code> event of this <code>sap.m.P13nDialog</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachOk(fnFunction: any, oListener: any): P13nDialog;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>reset</code> event of this <code>sap.m.P13nDialog</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachReset(fnFunction: any, oListener: any): P13nDialog;
		/**
		 * Creates a new subclass of class sap.m.P13nDialog with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.Dialog.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|P13nDialogMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.Dialog with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.Dialog
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|DialogMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>cancel</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireCancel(mArguments?: any): P13nDialog;
		/**
		 * Fires event <code>ok</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireOk(mArguments?: any): P13nDialog;
		/**
		 * Fires event <code>reset</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireReset(mArguments?: any): P13nDialog;
		/**
		 * Gets current value of property <code>initialVisiblePanelType</code>.
		 * 
		 * This property determines which panel is initially shown when dialog is opened. Due to extensibility reason the type should be
		 * <code>string</code>. So it is feasible to add a custom panel without expanding the type.
		 * @return Value of property <code>initialVisiblePanelType</code>
		 */
		getInitialVisiblePanelType(): string;
		/**
		 * Gets content of aggregation <code>panels</code>.
		 * 
		 * The dialog panels displayed in the dialog.
		 * @return 
		 */
		getPanels(): P13nPanel[];
		/**
		 * Gets current value of property <code>showReset</code>.
		 * 
		 * This property determines whether the 'Restore' button is shown inside the dialog. If this property is set to true, clicking the
		 * 'Reset' button will trigger the <code>reset</code> event sending a notification that model data must be reset.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>showReset</code>
		 */
		getShowReset(): boolean;
		/**
		 * Gets current value of property <code>showResetEnabled</code>.
		 * 
		 * This property determines whether the 'Restore' button is enabled and is taken into account only if <code>showReset</code> is set
		 * to <code>true</code>.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>showResetEnabled</code>
		 */
		getShowResetEnabled(): boolean;
		/**
		 * Gets current value of property <code>validationExecutor</code>.
		 * 
		 * Calls the validation listener once all panel-relevant validation checks have been done. This callback function is called in order
		 * to perform cross-model validation checks.
		 * @return Value of property <code>validationExecutor</code>
		 */
		getValidationExecutor(): any;
		/**
		 * Returns visible panel.
		 * @return 
		 */
		getVisiblePanel(): P13nPanel;
		/**
		 * Checks for the provided <code>sap.m.P13nPanel</code> in the aggregation <code>panels</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oPanel The panel whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfPanel(oPanel: P13nPanel): number;
		/**
		 * Inserts a panel into the aggregation <code>panels</code>.
		 * @param oPanel the panel to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the panel should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the panel is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the panel is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertPanel(oPanel: P13nPanel, iIndex: number): P13nDialog;
		/**
		 * Removes all the controls from the aggregation <code>panels</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllPanels(): P13nPanel[];
		/**
		 * Removes a panel from the aggregation <code>panels</code>.
		 * @param vPanel The panel to remove or its index or id
		 * @return The removed panel or <code>null</code>
		 */
		removePanel(vPanel: number|string|P13nPanel): P13nPanel;
		/**
		 * Sets a new value for property <code>initialVisiblePanelType</code>.
		 * 
		 * This property determines which panel is initially shown when dialog is opened. Due to extensibility reason the type should be
		 * <code>string</code>. So it is feasible to add a custom panel without expanding the type.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sInitialVisiblePanelType New value for property <code>initialVisiblePanelType</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setInitialVisiblePanelType(sInitialVisiblePanelType: string): P13nDialog;
		/**
		 * Sets a new value for property <code>showReset</code>.
		 * 
		 * This property determines whether the 'Restore' button is shown inside the dialog. If this property is set to true, clicking the
		 * 'Reset' button will trigger the <code>reset</code> event sending a notification that model data must be reset.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bShowReset New value for property <code>showReset</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowReset(bShowReset: boolean): P13nDialog;
		/**
		 * Sets a new value for property <code>showResetEnabled</code>.
		 * 
		 * This property determines whether the 'Restore' button is enabled and is taken into account only if <code>showReset</code> is set
		 * to <code>true</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bShowResetEnabled New value for property <code>showResetEnabled</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowResetEnabled(bShowResetEnabled: boolean): P13nDialog;
		/**
		 * Sets a new value for property <code>validationExecutor</code>.
		 * 
		 * Calls the validation listener once all panel-relevant validation checks have been done. This callback function is called in order
		 * to perform cross-model validation checks.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param oValidationExecutor New value for property <code>validationExecutor</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setValidationExecutor(oValidationExecutor: any): P13nDialog;
		/**
		 * Unbinds aggregation <code>panels</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindPanels(): P13nDialog;
	}

	class P13nDimMeasureItem extends sap.ui.core.Item {
		/**
		 * Constructor for a new P13nDimMeasureItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.P13nDimMeasureItemMetadata);
		/**
		 * Constructor for a new P13nDimMeasureItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.P13nDimMeasureItem with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|P13nDimMeasureItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Item with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Item
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>columnKey</code>.
		 * 
		 * Specifies the unique chart column key. In this context a column refers to dimensions or measures of a chart.
		 * @return Value of property <code>columnKey</code>
		 */
		getColumnKey(): string;
		/**
		 * Gets current value of property <code>index</code>.
		 * 
		 * Specifies the order of visible dimensions or measures of a chart.
		 * 
		 * Default value is <code>-1</code>.
		 * @return Value of property <code>index</code>
		 */
		getIndex(): number;
		/**
		 * Gets current value of property <code>role</code>.
		 * 
		 * Specifies the role of dimensions or measures. The role determines how dimensions and measures influence the chart.
		 * @return Value of property <code>role</code>
		 */
		getRole(): string;
		/**
		 * Gets current value of property <code>visible</code>.
		 * 
		 * Specifies the visibility of dimensions or measures.
		 * @return Value of property <code>visible</code>
		 */
		getVisible(): boolean;
		/**
		 * Sets a new value for property <code>columnKey</code>.
		 * 
		 * Specifies the unique chart column key. In this context a column refers to dimensions or measures of a chart.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sColumnKey New value for property <code>columnKey</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setColumnKey(sColumnKey: string): P13nDimMeasureItem;
		/**
		 * Sets a new value for property <code>index</code>.
		 * 
		 * Specifies the order of visible dimensions or measures of a chart.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>-1</code>.
		 * @param iIndex New value for property <code>index</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIndex(iIndex: number): P13nDimMeasureItem;
		/**
		 * Sets a new value for property <code>role</code>.
		 * 
		 * Specifies the role of dimensions or measures. The role determines how dimensions and measures influence the chart.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sRole New value for property <code>role</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setRole(sRole: string): P13nDimMeasureItem;
		/**
		 * Sets a new value for property <code>visible</code>.
		 * 
		 * Specifies the visibility of dimensions or measures.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param bVisible New value for property <code>visible</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setVisible(bVisible: boolean): P13nDimMeasureItem;
	}

	class P13nDimMeasurePanel extends P13nPanel {
		/**
		 * Constructor for a new P13nDimMeasurePanel.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.P13nDimMeasurePanelMetadata);
		/**
		 * Constructor for a new P13nDimMeasurePanel.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some availableChartType to the aggregation <code>availableChartTypes</code>.
		 * @param oAvailableChartType the availableChartType to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAvailableChartType(oAvailableChartType: sap.ui.core.Item): P13nDimMeasurePanel;
		/**
		 * Adds some dimMeasureItem to the aggregation <code>dimMeasureItems</code>.
		 * @param oDimMeasureItem the dimMeasureItem to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addDimMeasureItem(oDimMeasureItem: P13nDimMeasureItem): P13nDimMeasurePanel;
		/**
		 * Binds aggregation <code>dimMeasureItems</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindDimMeasureItems(oBindingInfo: any): P13nDimMeasurePanel;
		/**
		 * Destroys all the availableChartTypes in the aggregation <code>availableChartTypes</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyAvailableChartTypes(): P13nDimMeasurePanel;
		/**
		 * Destroys all the dimMeasureItems in the aggregation <code>dimMeasureItems</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyDimMeasureItems(): P13nDimMeasurePanel;
		/**
		 * Creates a new subclass of class sap.m.P13nDimMeasurePanel with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.P13nPanel.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|P13nDimMeasurePanelMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.P13nPanel with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.P13nPanel
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|P13nPanelMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets content of aggregation <code>availableChartTypes</code>.
		 * 
		 * Specifies available chart types.
		 * @return 
		 */
		getAvailableChartTypes(): sap.ui.core.Item[];
		/**
		 * Gets current value of property <code>chartTypeKey</code>.
		 * 
		 * Specifies a chart type key.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>chartTypeKey</code>
		 */
		getChartTypeKey(): string;
		/**
		 * Gets content of aggregation <code>dimMeasureItems</code>.
		 * 
		 * List of columns that has been changed.
		 * @return 
		 */
		getDimMeasureItems(): P13nDimMeasureItem[];
		/**
		 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation <code>availableChartTypes</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oAvailableChartType The availableChartType whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfAvailableChartType(oAvailableChartType: sap.ui.core.Item): number;
		/**
		 * Checks for the provided <code>sap.m.P13nDimMeasureItem</code> in the aggregation <code>dimMeasureItems</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oDimMeasureItem The dimMeasureItem whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfDimMeasureItem(oDimMeasureItem: P13nDimMeasureItem): number;
		/**
		 * Inserts a availableChartType into the aggregation <code>availableChartTypes</code>.
		 * @param oAvailableChartType the availableChartType to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the availableChartType should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the availableChartType is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the availableChartType is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertAvailableChartType(oAvailableChartType: sap.ui.core.Item, iIndex: number): P13nDimMeasurePanel;
		/**
		 * Inserts a dimMeasureItem into the aggregation <code>dimMeasureItems</code>.
		 * @param oDimMeasureItem the dimMeasureItem to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the dimMeasureItem should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the dimMeasureItem is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the dimMeasureItem is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertDimMeasureItem(oDimMeasureItem: P13nDimMeasureItem, iIndex: number): P13nDimMeasurePanel;
		/**
		 * Removes all the controls from the aggregation <code>availableChartTypes</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAvailableChartTypes(): sap.ui.core.Item[];
		/**
		 * Removes all the controls from the aggregation <code>dimMeasureItems</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllDimMeasureItems(): P13nDimMeasureItem[];
		/**
		 * Removes a availableChartType from the aggregation <code>availableChartTypes</code>.
		 * @param vAvailableChartType The availableChartType to remove or its index or id
		 * @return The removed availableChartType or <code>null</code>
		 */
		removeAvailableChartType(vAvailableChartType: number|string|sap.ui.core.Item): sap.ui.core.Item;
		/**
		 * Removes a dimMeasureItem from the aggregation <code>dimMeasureItems</code>.
		 * @param vDimMeasureItem The dimMeasureItem to remove or its index or id
		 * @return The removed dimMeasureItem or <code>null</code>
		 */
		removeDimMeasureItem(vDimMeasureItem: number|string|P13nDimMeasureItem): P13nDimMeasureItem;
		/**
		 * Sets a new value for property <code>chartTypeKey</code>.
		 * 
		 * Specifies a chart type key.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sChartTypeKey New value for property <code>chartTypeKey</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setChartTypeKey(sChartTypeKey: string): P13nDimMeasurePanel;
		/**
		 * Unbinds aggregation <code>dimMeasureItems</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindDimMeasureItems(): P13nDimMeasurePanel;
	}

	class P13nFilterItem extends sap.ui.core.Item {
		/**
		 * Constructor for a new P13nFilterItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.P13nFilterItemMetadata);
		/**
		 * Constructor for a new P13nFilterItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.P13nFilterItem with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|P13nFilterItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Item with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Item
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>columnKey</code>.
		 * 
		 * key of the column
		 * @return Value of property <code>columnKey</code>
		 */
		getColumnKey(): string;
		/**
		 * Gets current value of property <code>exclude</code>.
		 * 
		 * defines if the filter is an include or exclude filter item
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>exclude</code>
		 */
		getExclude(): boolean;
		/**
		 * Gets current value of property <code>operation</code>.
		 * 
		 * sap.m.P13nConditionOperation
		 * @return Value of property <code>operation</code>
		 */
		getOperation(): string;
		/**
		 * Gets current value of property <code>value1</code>.
		 * 
		 * value of the filter
		 * @return Value of property <code>value1</code>
		 */
		getValue1(): string;
		/**
		 * Gets current value of property <code>value2</code>.
		 * 
		 * to value of the between filter
		 * @return Value of property <code>value2</code>
		 */
		getValue2(): string;
		/**
		 * Sets a new value for property <code>columnKey</code>.
		 * 
		 * key of the column
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sColumnKey New value for property <code>columnKey</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setColumnKey(sColumnKey: string): P13nFilterItem;
		/**
		 * Sets a new value for property <code>exclude</code>.
		 * 
		 * defines if the filter is an include or exclude filter item
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bExclude New value for property <code>exclude</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setExclude(bExclude: boolean): P13nFilterItem;
		/**
		 * Sets a new value for property <code>operation</code>.
		 * 
		 * sap.m.P13nConditionOperation
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sOperation New value for property <code>operation</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setOperation(sOperation: string): P13nFilterItem;
		/**
		 * Sets a new value for property <code>value1</code>.
		 * 
		 * value of the filter
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sValue1 New value for property <code>value1</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setValue1(sValue1: string): P13nFilterItem;
		/**
		 * Sets a new value for property <code>value2</code>.
		 * 
		 * to value of the between filter
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sValue2 New value for property <code>value2</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setValue2(sValue2: string): P13nFilterItem;
	}

	class P13nFilterPanel extends P13nPanel {
		/**
		 * Constructor for a new P13nFilterPanel.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.P13nFilterPanelMetadata);
		/**
		 * Constructor for a new P13nFilterPanel.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some filterItem to the aggregation <code>filterItems</code>.
		 * @param oFilterItem the filterItem to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addFilterItem(oFilterItem: P13nFilterItem): P13nFilterPanel;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>addFilterItem</code> event of this <code>sap.m.P13nFilterPanel</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.P13nFilterPanel</code> itself.
		 * 
		 * Event raised if a filter item has been added.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.P13nFilterPanel</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachAddFilterItem(oData: any, fnFunction: any, oListener?: any): P13nFilterPanel;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>removeFilterItem</code> event of this <code>sap.m.P13nFilterPanel</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.P13nFilterPanel</code> itself.
		 * 
		 * Removes a filter item.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.P13nFilterPanel</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachRemoveFilterItem(oData: any, fnFunction: any, oListener?: any): P13nFilterPanel;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>updateFilterItem</code> event of this <code>sap.m.P13nFilterPanel</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.P13nFilterPanel</code> itself.
		 * 
		 * Updates a filter item.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.P13nFilterPanel</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachUpdateFilterItem(oData: any, fnFunction: any, oListener?: any): P13nFilterPanel;
		/**
		 * Binds aggregation <code>filterItems</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindFilterItems(oBindingInfo: any): P13nFilterPanel;
		/**
		 * Destroys all the filterItems in the aggregation <code>filterItems</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyFilterItems(): P13nFilterPanel;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>addFilterItem</code> event of this <code>sap.m.P13nFilterPanel</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachAddFilterItem(fnFunction: any, oListener: any): P13nFilterPanel;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>removeFilterItem</code> event of this <code>sap.m.P13nFilterPanel</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachRemoveFilterItem(fnFunction: any, oListener: any): P13nFilterPanel;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>updateFilterItem</code> event of this <code>sap.m.P13nFilterPanel</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachUpdateFilterItem(fnFunction: any, oListener: any): P13nFilterPanel;
		/**
		 * Creates a new subclass of class sap.m.P13nFilterPanel with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.P13nPanel.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|P13nFilterPanelMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.P13nPanel with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.P13nPanel
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|P13nPanelMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>addFilterItem</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireAddFilterItem(mArguments?: any): P13nFilterPanel;
		/**
		 * Fires event <code>removeFilterItem</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireRemoveFilterItem(mArguments?: any): P13nFilterPanel;
		/**
		 * Fires event <code>updateFilterItem</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireUpdateFilterItem(mArguments?: any): P13nFilterPanel;
		/**
		 * Returns the array of conditions.
		 */
		getConditions();
		/**
		 * Gets current value of property <code>containerQuery</code>.
		 * 
		 * Defines if the <code>mediaQuery</code> or a <code>ContainerResize</code> is used for layout update. If the
		 * <code>ConditionPanel</code> is used in a dialog, the property must be set to <code>true</code>.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>containerQuery</code>
		 */
		getContainerQuery(): boolean;
		/**
		 * Getter for the exclude operations.
		 * @param the type for which the operations are defined
		 * @return array of operations [<code>sap.m.P13nConditionOperation.BT</code>,
		 *          <code>sap.m.P13nConditionOperation.EQ</code>]
		 */
		getExcludeOperations(the: string): any[];
		/**
		 * Gets content of aggregation <code>filterItems</code>.
		 * 
		 * Defines filter items.
		 * @return 
		 */
		getFilterItems(): P13nFilterItem[];
		/**
		 * Getter for the include operations.
		 * @param the type for which the operations are defined
		 * @return array of operations [<code>sap.m.P13nConditionOperation.BT</code>,
		 *          <code>sap.m.P13nConditionOperation.EQ</code>]
		 */
		getIncludeOperations(the: string): any;
		/**
		 * Gets current value of property <code>layoutMode</code>.
		 * 
		 * Can be used to control the layout behavior. Default is "" which will automatically change the layout. With "Desktop", "Table"
		 * or"Phone" you can set a fixed layout.
		 * @return Value of property <code>layoutMode</code>
		 */
		getLayoutMode(): string;
		/**
		 * Gets current value of property <code>maxExcludes</code>.
		 * 
		 * Defines the maximum number of exclude filters.
		 * 
		 * Default value is <code>-1</code>.
		 * @return Value of property <code>maxExcludes</code>
		 */
		getMaxExcludes(): string;
		/**
		 * Gets current value of property <code>maxIncludes</code>.
		 * 
		 * Defines the maximum number of include filters.
		 * 
		 * Default value is <code>-1</code>.
		 * @return Value of property <code>maxIncludes</code>
		 */
		getMaxIncludes(): string;
		/**
		 * Checks for the provided <code>sap.m.P13nFilterItem</code> in the aggregation <code>filterItems</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oFilterItem The filterItem whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfFilterItem(oFilterItem: P13nFilterItem): number;
		/**
		 * Inserts a filterItem into the aggregation <code>filterItems</code>.
		 * @param oFilterItem the filterItem to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the filterItem should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the filterItem is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the filterItem is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertFilterItem(oFilterItem: P13nFilterItem, iIndex: number): P13nFilterPanel;
		/**
		 * Removes all the controls from the aggregation <code>filterItems</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllFilterItems(): P13nFilterItem[];
		/**
		 * Removes a filterItem from the aggregation <code>filterItems</code>.
		 * @param vFilterItem The filterItem to remove or its index or id
		 * @return The removed filterItem or <code>null</code>
		 */
		removeFilterItem(vFilterItem: number|string|P13nFilterItem): P13nFilterItem;
		/**
		 * Removes all invalid conditions.
		 */
		removeInvalidConditions();
		/**
		 * Removes all errors and warnings states from of all filter conditions.
		 */
		removeValidationErrors();
		/**
		 * Sets the array of conditions.
		 * @param aConditions the complete list of conditions
		 * @return this for chaining
		 */
		setConditions(aConditions: any[]): P13nFilterPanel;
		/**
		 * Sets a new value for property <code>containerQuery</code>.
		 * 
		 * Defines if the <code>mediaQuery</code> or a <code>ContainerResize</code> is used for layout update. If the
		 * <code>ConditionPanel</code> is used in a dialog, the property must be set to <code>true</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bContainerQuery New value for property <code>containerQuery</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setContainerQuery(bContainerQuery: boolean): P13nFilterPanel;
		/**
		 * Setter for the supported exclude operations array.
		 * @param array of operations [<code>sap.m.P13nConditionOperation.BT</code>,
		 *        <code>sap.m.P13nConditionOperation.EQ</code>]
		 * @param the type for which the operations are defined
		 */
		setExcludeOperations(array: any[], the: string);
		/**
		 * Setter for the supported Include operations array.
		 * @param array of operations [<code>sap.m.P13nConditionOperation.BT</code>,
		 *        <code>sap.m.P13nConditionOperation.EQ</code>]
		 * @param the type for which the operations are defined
		 */
		setIncludeOperations(array: any[], the: string);
		/**
		 * Sets a new value for property <code>layoutMode</code>.
		 * 
		 * Can be used to control the layout behavior. Default is "" which will automatically change the layout. With "Desktop", "Table"
		 * or"Phone" you can set a fixed layout.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sLayoutMode New value for property <code>layoutMode</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setLayoutMode(sLayoutMode: string): P13nFilterPanel;
		/**
		 * Sets a new value for property <code>maxExcludes</code>.
		 * 
		 * Defines the maximum number of exclude filters.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>-1</code>.
		 * @param sMaxExcludes New value for property <code>maxExcludes</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMaxExcludes(sMaxExcludes: string): P13nFilterPanel;
		/**
		 * Sets a new value for property <code>maxIncludes</code>.
		 * 
		 * Defines the maximum number of include filters.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>-1</code>.
		 * @param sMaxIncludes New value for property <code>maxIncludes</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMaxIncludes(sMaxIncludes: string): P13nFilterPanel;
		/**
		 * Unbinds aggregation <code>filterItems</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindFilterItems(): P13nFilterPanel;
		/**
		 * Checks if the entered and modified conditions are correct, marks invalid fields in yellow (warning).
		 * @return <code>false</code>, if there is an invalid condition
		 */
		validateConditions(): boolean;
	}

	class P13nGroupItem extends sap.ui.core.Item {
		/**
		 * Constructor for a new P13nGroupItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.P13nGroupItemMetadata);
		/**
		 * Constructor for a new P13nGroupItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.P13nGroupItem with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|P13nGroupItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Item with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Item
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>columnKey</code>.
		 * 
		 * key of the column
		 * @return Value of property <code>columnKey</code>
		 */
		getColumnKey(): string;
		/**
		 * Gets current value of property <code>operation</code>.
		 * 
		 * sap.m.P13nConditionOperation
		 * @return Value of property <code>operation</code>
		 */
		getOperation(): string;
		/**
		 * Gets current value of property <code>showIfGrouped</code>.
		 * 
		 * make the grouped column as normalcolumn visible
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>showIfGrouped</code>
		 */
		getShowIfGrouped(): boolean;
		/**
		 * Sets a new value for property <code>columnKey</code>.
		 * 
		 * key of the column
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sColumnKey New value for property <code>columnKey</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setColumnKey(sColumnKey: string): P13nGroupItem;
		/**
		 * Sets a new value for property <code>operation</code>.
		 * 
		 * sap.m.P13nConditionOperation
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sOperation New value for property <code>operation</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setOperation(sOperation: string): P13nGroupItem;
		/**
		 * Sets a new value for property <code>showIfGrouped</code>.
		 * 
		 * make the grouped column as normalcolumn visible
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bShowIfGrouped New value for property <code>showIfGrouped</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowIfGrouped(bShowIfGrouped: boolean): P13nGroupItem;
	}

	class P13nGroupPanel extends P13nPanel {
		/**
		 * Constructor for a new P13nGroupPanel.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.P13nGroupPanelMetadata);
		/**
		 * Constructor for a new P13nGroupPanel.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some groupItem to the aggregation <code>groupItems</code>.
		 * @param oGroupItem the groupItem to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addGroupItem(oGroupItem: P13nGroupItem): P13nGroupPanel;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>addGroupItem</code> event of this <code>sap.m.P13nGroupPanel</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.P13nGroupPanel</code> itself.
		 * 
		 * Event raised if a <code>GroupItem</code> has been added.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.P13nGroupPanel</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachAddGroupItem(oData: any, fnFunction: any, oListener?: any): P13nGroupPanel;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>removeGroupItem</code> event of this <code>sap.m.P13nGroupPanel</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.P13nGroupPanel</code> itself.
		 * 
		 * Removes a group item.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.P13nGroupPanel</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachRemoveGroupItem(oData: any, fnFunction: any, oListener?: any): P13nGroupPanel;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>updateGroupItem</code> event of this <code>sap.m.P13nGroupPanel</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.P13nGroupPanel</code> itself.
		 * 
		 * Updates a group item.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.P13nGroupPanel</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachUpdateGroupItem(oData: any, fnFunction: any, oListener?: any): P13nGroupPanel;
		/**
		 * Binds aggregation <code>groupItems</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindGroupItems(oBindingInfo: any): P13nGroupPanel;
		/**
		 * Destroys all the groupItems in the aggregation <code>groupItems</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyGroupItems(): P13nGroupPanel;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>addGroupItem</code> event of this <code>sap.m.P13nGroupPanel</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachAddGroupItem(fnFunction: any, oListener: any): P13nGroupPanel;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>removeGroupItem</code> event of this <code>sap.m.P13nGroupPanel</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachRemoveGroupItem(fnFunction: any, oListener: any): P13nGroupPanel;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>updateGroupItem</code> event of this <code>sap.m.P13nGroupPanel</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachUpdateGroupItem(fnFunction: any, oListener: any): P13nGroupPanel;
		/**
		 * Creates a new subclass of class sap.m.P13nGroupPanel with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.P13nPanel.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|P13nGroupPanelMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.P13nPanel with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.P13nPanel
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|P13nPanelMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>addGroupItem</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireAddGroupItem(mArguments?: any): P13nGroupPanel;
		/**
		 * Fires event <code>removeGroupItem</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireRemoveGroupItem(mArguments?: any): P13nGroupPanel;
		/**
		 * Fires event <code>updateGroupItem</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireUpdateGroupItem(mArguments?: any): P13nGroupPanel;
		/**
		 * Gets current value of property <code>containerQuery</code>.
		 * 
		 * Defines if <code>mediaQuery</code> or <code>ContainerResize</code> is used for a layout update. If <code>ConditionPanel</code>
		 * is used in a dialog, the property must be set to true.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>containerQuery</code>
		 */
		getContainerQuery(): boolean;
		/**
		 * Gets content of aggregation <code>groupItems</code>.
		 * 
		 * Defined group items.
		 * @return 
		 */
		getGroupItems(): P13nGroupItem[];
		/**
		 * Gets current value of property <code>layoutMode</code>.
		 * 
		 * Can be used to control the layout behavior. Default is "" which will automatically change the layout. With "Desktop", "Table"
		 * or"Phone" you can set a fixed layout.
		 * @return Value of property <code>layoutMode</code>
		 */
		getLayoutMode(): string;
		/**
		 * Gets current value of property <code>maxGroups</code>.
		 * 
		 * Defines the maximum number of groups.
		 * 
		 * Default value is <code>-1</code>.
		 * @return Value of property <code>maxGroups</code>
		 */
		getMaxGroups(): string;
		/**
		 * Checks for the provided <code>sap.m.P13nGroupItem</code> in the aggregation <code>groupItems</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oGroupItem The groupItem whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfGroupItem(oGroupItem: P13nGroupItem): number;
		/**
		 * Inserts a groupItem into the aggregation <code>groupItems</code>.
		 * @param oGroupItem the groupItem to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the groupItem should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the groupItem is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the groupItem is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertGroupItem(oGroupItem: P13nGroupItem, iIndex: number): P13nGroupPanel;
		/**
		 * Removes all the controls from the aggregation <code>groupItems</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllGroupItems(): P13nGroupItem[];
		/**
		 * Removes a groupItem from the aggregation <code>groupItems</code>.
		 * @param vGroupItem The groupItem to remove or its index or id
		 * @return The removed groupItem or <code>null</code>
		 */
		removeGroupItem(vGroupItem: number|string|P13nGroupItem): P13nGroupItem;
		/**
		 * Removes all invalid group conditions.
		 */
		removeInvalidConditions();
		/**
		 * Removes all errors/warning states from of all group conditions.
		 */
		removeValidationErrors();
		/**
		 * Sets a new value for property <code>containerQuery</code>.
		 * 
		 * Defines if <code>mediaQuery</code> or <code>ContainerResize</code> is used for a layout update. If <code>ConditionPanel</code>
		 * is used in a dialog, the property must be set to true.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bContainerQuery New value for property <code>containerQuery</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setContainerQuery(bContainerQuery: boolean): P13nGroupPanel;
		/**
		 * Sets a new value for property <code>layoutMode</code>.
		 * 
		 * Can be used to control the layout behavior. Default is "" which will automatically change the layout. With "Desktop", "Table"
		 * or"Phone" you can set a fixed layout.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sLayoutMode New value for property <code>layoutMode</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setLayoutMode(sLayoutMode: string): P13nGroupPanel;
		/**
		 * Sets a new value for property <code>maxGroups</code>.
		 * 
		 * Defines the maximum number of groups.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>-1</code>.
		 * @param sMaxGroups New value for property <code>maxGroups</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMaxGroups(sMaxGroups: string): P13nGroupPanel;
		/**
		 * Setter for the supported operations array.
		 * @param array of operations [sap.m.P13nConditionOperation.BT, sap.m.P13nConditionOperation.EQ]
		 */
		setOperations(array: any[]);
		/**
		 * Unbinds aggregation <code>groupItems</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindGroupItems(): P13nGroupPanel;
		/**
		 * Checks if the entered or modified conditions are correct, marks invalid fields yellow (Warning) and opens a popup message dialog to let the
		 * user know that some values are not correct or missing.
		 */
		validateConditions();
	}

	class P13nItem extends sap.ui.core.Item {
		/**
		 * Constructor for a new P13nItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.P13nItemMetadata);
		/**
		 * Constructor for a new P13nItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.P13nItem with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|P13nItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Item with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Item
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>aggregationRole</code>.
		 * 
		 * Defines aggregation role
		 * @return Value of property <code>aggregationRole</code>
		 */
		getAggregationRole(): string;
		/**
		 * Gets current value of property <code>columnKey</code>.
		 * 
		 * Can be used as input for subsequent actions.
		 * @return Value of property <code>columnKey</code>
		 */
		getColumnKey(): string;
		/**
		 * Gets current value of property <code>isDefault</code>.
		 * 
		 * the column with isDefault==true will be used as the selected column item on the conditionPanel
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>isDefault</code>
		 */
		getIsDefault(): boolean;
		/**
		 * Gets current value of property <code>maxLength</code>.
		 * 
		 * specifies the number of characters which can be entered in the value fields of the condition panel
		 * @return Value of property <code>maxLength</code>
		 */
		getMaxLength(): string;
		/**
		 * Gets current value of property <code>precision</code>.
		 * 
		 * if type==numeric the precision will be used to format the entered value (maxIntegerDigits of the used Formatter)
		 * @return Value of property <code>precision</code>
		 */
		getPrecision(): string;
		/**
		 * Gets current value of property <code>role</code>.
		 * 
		 * Defines role. The role is reflected in the manner how the dimension will influence the chart layout.
		 * @return Value of property <code>role</code>
		 */
		getRole(): string;
		/**
		 * Gets current value of property <code>scale</code>.
		 * 
		 * if type==numeric the scale will be used to format the entered value (maxFractionDigits of the used Formatter)
		 * @return Value of property <code>scale</code>
		 */
		getScale(): string;
		/**
		 * Gets current value of property <code>text</code>.
		 * 
		 * The text to be displayed for the item.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>text</code>
		 */
		getText(): string;
		/**
		 * Gets current value of property <code>type</code>.
		 * 
		 * data type of the column (text, numeric or date is supported)
		 * 
		 * Default value is <code>text</code>.
		 * @return Value of property <code>type</code>
		 */
		getType(): string;
		/**
		 * Gets current value of property <code>values</code>.
		 * 
		 * the array of values for type bool. e.g. ["", "Off", "On"]. The first entry can be empty (used to blank the value field). Next value
		 * represent the false value, last entry the true value.
		 * @return Value of property <code>values</code>
		 */
		getValues(): string[];
		/**
		 * Gets current value of property <code>visible</code>.
		 * 
		 * Defines visibility of column
		 * @return Value of property <code>visible</code>
		 */
		getVisible(): boolean;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Defines column width
		 * @return Value of property <code>width</code>
		 */
		getWidth(): string;
		/**
		 * Sets a new value for property <code>aggregationRole</code>.
		 * 
		 * Defines aggregation role
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sAggregationRole New value for property <code>aggregationRole</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setAggregationRole(sAggregationRole: string): P13nItem;
		/**
		 * Sets a new value for property <code>columnKey</code>.
		 * 
		 * Can be used as input for subsequent actions.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sColumnKey New value for property <code>columnKey</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setColumnKey(sColumnKey: string): P13nItem;
		/**
		 * Sets a new value for property <code>isDefault</code>.
		 * 
		 * the column with isDefault==true will be used as the selected column item on the conditionPanel
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bIsDefault New value for property <code>isDefault</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIsDefault(bIsDefault: boolean): P13nItem;
		/**
		 * Sets a new value for property <code>maxLength</code>.
		 * 
		 * specifies the number of characters which can be entered in the value fields of the condition panel
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sMaxLength New value for property <code>maxLength</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMaxLength(sMaxLength: string): P13nItem;
		/**
		 * Sets a new value for property <code>precision</code>.
		 * 
		 * if type==numeric the precision will be used to format the entered value (maxIntegerDigits of the used Formatter)
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sPrecision New value for property <code>precision</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setPrecision(sPrecision: string): P13nItem;
		/**
		 * Sets a new value for property <code>role</code>.
		 * 
		 * Defines role. The role is reflected in the manner how the dimension will influence the chart layout.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sRole New value for property <code>role</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setRole(sRole: string): P13nItem;
		/**
		 * Sets a new value for property <code>scale</code>.
		 * 
		 * if type==numeric the scale will be used to format the entered value (maxFractionDigits of the used Formatter)
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sScale New value for property <code>scale</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setScale(sScale: string): P13nItem;
		/**
		 * Sets a new value for property <code>text</code>.
		 * 
		 * The text to be displayed for the item.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sText New value for property <code>text</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setText(sText: string): P13nItem;
		/**
		 * Sets a new value for property <code>text</code>.
		 * 
		 * The text to be displayed for the item.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @note Overload from base type sap.ui.core.Item
		 * @param sText New value for property <code>text</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setText(sText: string): sap.ui.core.Item;
		/**
		 * Sets a new value for property <code>type</code>.
		 * 
		 * data type of the column (text, numeric or date is supported)
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>text</code>.
		 * @param sType New value for property <code>type</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setType(sType: string): P13nItem;
		/**
		 * Sets a new value for property <code>values</code>.
		 * 
		 * the array of values for type bool. e.g. ["", "Off", "On"]. The first entry can be empty (used to blank the value field). Next value
		 * represent the false value, last entry the true value.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sValues New value for property <code>values</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setValues(sValues: string[]): P13nItem;
		/**
		 * Sets a new value for property <code>visible</code>.
		 * 
		 * Defines visibility of column
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param bVisible New value for property <code>visible</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setVisible(bVisible: boolean): P13nItem;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Defines column width
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: string): P13nItem;
	}

	class P13nPanel extends sap.ui.core.Control {
		/**
		 * Constructor for a new P13nPanel.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.P13nPanelMetadata);
		/**
		 * Constructor for a new P13nPanel.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some item to the aggregation <code>items</code>.
		 * @param oItem the item to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addItem(oItem: P13nItem): P13nPanel;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>beforeNavigationTo</code> event of this <code>sap.m.P13nPanel</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.P13nPanel</code> itself.
		 * 
		 * Due to performance the data of the panel can be requested in lazy mode e.g. when the panel is displayed
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.P13nPanel</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachBeforeNavigationTo(oData: any, fnFunction: any, oListener?: any): P13nPanel;
		/**
		 * 
		 */
		beforeNavigationTo();
		/**
		 * Binds aggregation <code>items</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindItems(oBindingInfo: any): P13nPanel;
		/**
		 * Destroys all the items in the aggregation <code>items</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyItems(): P13nPanel;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>beforeNavigationTo</code> event of this <code>sap.m.P13nPanel</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachBeforeNavigationTo(fnFunction: any, oListener: any): P13nPanel;
		/**
		 * Creates a new subclass of class sap.m.P13nPanel with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|P13nPanelMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>beforeNavigationTo</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireBeforeNavigationTo(mArguments?: any): P13nPanel;
		/**
		 * Gets current value of property <code>changeNotifier</code>.
		 * 
		 * Callback which notifies a change on this panel.
		 * @return Value of property <code>changeNotifier</code>
		 */
		getChangeNotifier(): any;
		/**
		 * Gets content of aggregation <code>items</code>.
		 * 
		 * Aggregation of items
		 * @return 
		 */
		getItems(): P13nItem[];
		/**
		 * This method can be overwritten by subclass in order to return a payload for Ok action
		 */
		getOkPayload();
		/**
		 * This method can be overwritten by subclass in order to return a payload for Reset action
		 */
		getResetPayload();
		/**
		 * Gets current value of property <code>title</code>.
		 * 
		 * Title text appears in the panel.
		 * @return Value of property <code>title</code>
		 */
		getTitle(): string;
		/**
		 * Gets current value of property <code>titleLarge</code>.
		 * 
		 * Large title text appears e.g. in dialog header in case that only one panel is shown.
		 * @return Value of property <code>titleLarge</code>
		 */
		getTitleLarge(): string;
		/**
		 * Gets current value of property <code>type</code>.
		 * 
		 * Panel type for generic use. Due to extensibility reason the type of <code>type</code> property should be <code>string</code>.
		 * So it is feasible to add a custom panel without expanding the type.
		 * @return Value of property <code>type</code>
		 */
		getType(): string;
		/**
		 * Gets current value of property <code>validationExecutor</code>.
		 * 
		 * Callback method which is called in order to validate end user entry.
		 * @return Value of property <code>validationExecutor</code>
		 */
		getValidationExecutor(): any;
		/**
		 * Gets current value of property <code>validationListener</code>.
		 * 
		 * Callback method which is called in order to register for validation result.
		 * @return Value of property <code>validationListener</code>
		 */
		getValidationListener(): any;
		/**
		 * Gets current value of property <code>verticalScrolling</code>.
		 * 
		 * Enables the vertical Scrolling on the P13nDialog when the panel is shown.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>verticalScrolling</code>
		 */
		getVerticalScrolling(): boolean;
		/**
		 * Checks for the provided <code>sap.m.P13nItem</code> in the aggregation <code>items</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oItem The item whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfItem(oItem: P13nItem): number;
		/**
		 * Inserts a item into the aggregation <code>items</code>.
		 * @param oItem the item to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the item should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the item is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertItem(oItem: P13nItem, iIndex: number): P13nPanel;
		/**
		 * This method can be overwritten by subclass in order to cleanup after navigation, e.g. to remove invalid content on the panel.
		 */
		onAfterNavigationFrom();
		/**
		 * This method can be overwritten by subclass in order to prevent navigation to another panel. This could be the case if some content on the panel
		 * is considered 'invalid'.
		 * @return true if it is allowed to navigate away from this panel, false if it is not allowed
		 */
		onBeforeNavigationFrom(): boolean;
		/**
		 * Removes all the controls from the aggregation <code>items</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllItems(): P13nItem[];
		/**
		 * Removes a item from the aggregation <code>items</code>.
		 * @param vItem The item to remove or its index or id
		 * @return The removed item or <code>null</code>
		 */
		removeItem(vItem: number|string|P13nItem): P13nItem;
		/**
		 * Sets a new value for property <code>changeNotifier</code>.
		 * 
		 * Callback which notifies a change on this panel.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param oChangeNotifier New value for property <code>changeNotifier</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setChangeNotifier(oChangeNotifier: any): P13nPanel;
		/**
		 * Sets a new value for property <code>title</code>.
		 * 
		 * Title text appears in the panel.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sTitle New value for property <code>title</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTitle(sTitle: string): P13nPanel;
		/**
		 * Sets a new value for property <code>titleLarge</code>.
		 * 
		 * Large title text appears e.g. in dialog header in case that only one panel is shown.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sTitleLarge New value for property <code>titleLarge</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTitleLarge(sTitleLarge: string): P13nPanel;
		/**
		 * Sets a new value for property <code>type</code>.
		 * 
		 * Panel type for generic use. Due to extensibility reason the type of <code>type</code> property should be <code>string</code>.
		 * So it is feasible to add a custom panel without expanding the type.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sType New value for property <code>type</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setType(sType: string): P13nPanel;
		/**
		 * Sets a new value for property <code>validationExecutor</code>.
		 * 
		 * Callback method which is called in order to validate end user entry.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param oValidationExecutor New value for property <code>validationExecutor</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setValidationExecutor(oValidationExecutor: any): P13nPanel;
		/**
		 * Sets a new value for property <code>validationListener</code>.
		 * 
		 * Callback method which is called in order to register for validation result.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param oValidationListener New value for property <code>validationListener</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setValidationListener(oValidationListener: any): P13nPanel;
		/**
		 * Sets a new value for property <code>verticalScrolling</code>.
		 * 
		 * Enables the vertical Scrolling on the P13nDialog when the panel is shown.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bVerticalScrolling New value for property <code>verticalScrolling</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setVerticalScrolling(bVerticalScrolling: boolean): P13nPanel;
		/**
		 * Unbinds aggregation <code>items</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindItems(): P13nPanel;
	}

	class P13nPanelType {
		/**
		 * Panel type for column settings.
		 */
		static columns: string;
		/**
		 * Panel type for dimension and measure settings.
		 */
		static dimeasure: string;
		/**
		 * Panel type for filtering.
		 */
		static filter: string;
		/**
		 * Panel type for grouping.
		 */
		static group: string;
		/**
		 * Panel type for sorting.
		 */
		static sort: string;
	}

	class P13nSortItem extends sap.ui.core.Item {
		/**
		 * Constructor for a new P13nSortItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.P13nSortItemMetadata);
		/**
		 * Constructor for a new P13nSortItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.P13nSortItem with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|P13nSortItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Item with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Item
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>columnKey</code>.
		 * 
		 * key of the column
		 * @return Value of property <code>columnKey</code>
		 */
		getColumnKey(): string;
		/**
		 * Gets current value of property <code>operation</code>.
		 * 
		 * sap.m.P13nConditionOperation
		 * @return Value of property <code>operation</code>
		 */
		getOperation(): string;
		/**
		 * Sets a new value for property <code>columnKey</code>.
		 * 
		 * key of the column
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sColumnKey New value for property <code>columnKey</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setColumnKey(sColumnKey: string): P13nSortItem;
		/**
		 * Sets a new value for property <code>operation</code>.
		 * 
		 * sap.m.P13nConditionOperation
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sOperation New value for property <code>operation</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setOperation(sOperation: string): P13nSortItem;
	}

	class P13nSortPanel extends P13nPanel {
		/**
		 * Constructor for a new P13nSortPanel.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.P13nSortPanelMetadata);
		/**
		 * Constructor for a new P13nSortPanel.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some sortItem to the aggregation <code>sortItems</code>.
		 * @param oSortItem the sortItem to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addSortItem(oSortItem: P13nSortItem): P13nSortPanel;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>addSortItem</code> event of this <code>sap.m.P13nSortPanel</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.P13nSortPanel</code> itself.
		 * 
		 * event raised when a SortItem was added
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.P13nSortPanel</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachAddSortItem(oData: any, fnFunction: any, oListener?: any): P13nSortPanel;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>removeSortItem</code> event of this <code>sap.m.P13nSortPanel</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.P13nSortPanel</code> itself.
		 * 
		 * remove a sort item
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.P13nSortPanel</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachRemoveSortItem(oData: any, fnFunction: any, oListener?: any): P13nSortPanel;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>updateSortItem</code> event of this <code>sap.m.P13nSortPanel</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.P13nSortPanel</code> itself.
		 * 
		 * update a sort item
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.P13nSortPanel</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachUpdateSortItem(oData: any, fnFunction: any, oListener?: any): P13nSortPanel;
		/**
		 * Binds aggregation <code>sortItems</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindSortItems(oBindingInfo: any): P13nSortPanel;
		/**
		 * Destroys all the sortItems in the aggregation <code>sortItems</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroySortItems(): P13nSortPanel;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>addSortItem</code> event of this <code>sap.m.P13nSortPanel</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachAddSortItem(fnFunction: any, oListener: any): P13nSortPanel;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>removeSortItem</code> event of this <code>sap.m.P13nSortPanel</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachRemoveSortItem(fnFunction: any, oListener: any): P13nSortPanel;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>updateSortItem</code> event of this <code>sap.m.P13nSortPanel</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachUpdateSortItem(fnFunction: any, oListener: any): P13nSortPanel;
		/**
		 * Creates a new subclass of class sap.m.P13nSortPanel with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.P13nPanel.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|P13nSortPanelMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.P13nPanel with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.P13nPanel
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|P13nPanelMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>addSortItem</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireAddSortItem(mArguments?: any): P13nSortPanel;
		/**
		 * Fires event <code>removeSortItem</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireRemoveSortItem(mArguments?: any): P13nSortPanel;
		/**
		 * Fires event <code>updateSortItem</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireUpdateSortItem(mArguments?: any): P13nSortPanel;
		/**
		 * Gets current value of property <code>containerQuery</code>.
		 * 
		 * defines if the mediaQuery or a ContainerResize will be used for layout update. When the ConditionPanel is used on a dialog the
		 * property should be set to true!
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>containerQuery</code>
		 */
		getContainerQuery(): boolean;
		/**
		 * Gets current value of property <code>layoutMode</code>.
		 * 
		 * can be used to control the layout behavior. Default is "" which will automatically change the layout. With "Desktop", "Table"
		 * or"Phone" you can set a fixed layout.
		 * @return Value of property <code>layoutMode</code>
		 */
		getLayoutMode(): string;
		/**
		 * Gets content of aggregation <code>sortItems</code>.
		 * 
		 * defined Sort Items
		 * @return 
		 */
		getSortItems(): P13nSortItem[];
		/**
		 * Checks for the provided <code>sap.m.P13nSortItem</code> in the aggregation <code>sortItems</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oSortItem The sortItem whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfSortItem(oSortItem: P13nSortItem): number;
		/**
		 * Inserts a sortItem into the aggregation <code>sortItems</code>.
		 * @param oSortItem the sortItem to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the sortItem should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the sortItem is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the sortItem is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertSortItem(oSortItem: P13nSortItem, iIndex: number): P13nSortPanel;
		/**
		 * Removes all the controls from the aggregation <code>sortItems</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllSortItems(): P13nSortItem[];
		/**
		 * removes all invalid sort conditions.
		 */
		removeInvalidConditions();
		/**
		 * Removes a sortItem from the aggregation <code>sortItems</code>.
		 * @param vSortItem The sortItem to remove or its index or id
		 * @return The removed sortItem or <code>null</code>
		 */
		removeSortItem(vSortItem: number|string|P13nSortItem): P13nSortItem;
		/**
		 * removes all errors/warning states from of all sort conditions.
		 */
		removeValidationErrors();
		/**
		 * Sets a new value for property <code>containerQuery</code>.
		 * 
		 * defines if the mediaQuery or a ContainerResize will be used for layout update. When the ConditionPanel is used on a dialog the
		 * property should be set to true!
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bContainerQuery New value for property <code>containerQuery</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setContainerQuery(bContainerQuery: boolean): P13nSortPanel;
		/**
		 * Sets a new value for property <code>layoutMode</code>.
		 * 
		 * can be used to control the layout behavior. Default is "" which will automatically change the layout. With "Desktop", "Table"
		 * or"Phone" you can set a fixed layout.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sLayoutMode New value for property <code>layoutMode</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setLayoutMode(sLayoutMode: string): P13nSortPanel;
		/**
		 * setter for the supported operations array
		 * @param array of operations [sap.m.P13nConditionOperation.BT, sap.m.P13nConditionOperation.EQ]
		 * @return this for chaining
		 */
		setOperations(array: any[]): P13nSortPanel;
		/**
		 * Unbinds aggregation <code>sortItems</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindSortItems(): P13nSortPanel;
		/**
		 * check if the entered/modified conditions are correct, marks invalid fields yellow (Warning state) and opens a popup message dialog to give the
		 * user the feedback that some values are wrong or missing.
		 */
		validateConditions();
	}

	class Page extends sap.ui.core.Control {
		/**
		 * Constructor for a new Page.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.PageMetadata);
		/**
		 * Constructor for a new Page.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some content to the aggregation <code>content</code>.
		 * @param oContent the content to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addContent(oContent: sap.ui.core.Control): Page;
		/**
		 * Adds some headerContent to the aggregation <code>headerContent</code>.
		 * @param oHeaderContent the headerContent to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addHeaderContent(oHeaderContent: sap.ui.core.Control): Page;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>navButtonPress</code> event of this <code>sap.m.Page</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Page</code> itself.
		 * 
		 * this event is fired when Nav Button is pressed
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Page</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachNavButtonPress(oData: any, fnFunction: any, oListener?: any): Page;
		/**
		 * Destroys all the content in the aggregation <code>content</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyContent(): Page;
		/**
		 * Destroys the customHeader in the aggregation <code>customHeader</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyCustomHeader(): Page;
		/**
		 * Destroys the footer in the aggregation <code>footer</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyFooter(): Page;
		/**
		 * Destroys all the headerContent in the aggregation <code>headerContent</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyHeaderContent(): Page;
		/**
		 * Destroys the landmarkInfo in the aggregation <code>landmarkInfo</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyLandmarkInfo(): Page;
		/**
		 * Destroys the subHeader in the aggregation <code>subHeader</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroySubHeader(): Page;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>navButtonPress</code> event of this <code>sap.m.Page</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachNavButtonPress(fnFunction: any, oListener: any): Page;
		/**
		 * Creates a new subclass of class sap.m.Page with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|PageMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>navButtonPress</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireNavButtonPress(mArguments?: any): Page;
		/**
		 * Gets current value of property <code>backgroundDesign</code>.
		 * 
		 * This property is used to set the background color of a page. When a list is placed inside a page, the value "List" should be used to display a gray background. "Standard", with the value white, is used as default if not specified.
		 * 
		 * Default value is <code>Standard</code>.
		 * @return Value of property <code>backgroundDesign</code>
		 */
		getBackgroundDesign(): PageBackgroundDesign;
		/**
		 * Gets content of aggregation <code>content</code>.
		 * 
		 * The content of this page
		 * @return 
		 */
		getContent(): sap.ui.core.Control[];
		/**
		 * Gets current value of property <code>contentOnlyBusy</code>.
		 * 
		 * Decides which area is covered by the local BusyIndicator when <code>page.setBusy()</code> is called. By default the entire page is covered, including headers and footer. When this property is set to "true", only the content area is covered (not header/sub header and footer), which is useful e.g. when there is a SearchField in the sub header and live search continuously updates the content area while the user is still able to type.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>contentOnlyBusy</code>
		 */
		getContentOnlyBusy(): boolean;
		/**
		 * Gets content of aggregation <code>customHeader</code>.
		 * 
		 * The (optional) custom header of this page.
		 * Use this aggregation only when a custom header is constructed where the default header consisting of title text + nav button is not sufficient.
		 * If this aggregation is set, the simple properties "title", "showNavButton", "NavButtonText" and "icon" are not used.
		 * @return 
		 */
		getCustomHeader(): IBar;
		/**
		 * Gets current value of property <code>enableScrolling</code>.
		 * 
		 * Enable vertical scrolling of page contents. Page headers and footers are fixed and do not scroll.
		 * If set to false, there will be no scrolling at all.
		 * 
		 * The Page only allows vertical scrolling because horizontal scrolling is discouraged in general for full-page content. If it still needs to be achieved, disable the Page scrolling and use a ScrollContainer as full-page content of the Page. This allows you to freely configure scrolling. It can also be used to create horizontally-scrolling sub-areas of (vertically-scrolling) Pages.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>enableScrolling</code>
		 */
		getEnableScrolling(): boolean;
		/**
		 * Gets current value of property <code>floatingFooter</code>.
		 * 
		 * Decides whether the floating footer behavior should be enabled.
		 * When the floating footer behavior is used, the content is visible when it's underneath the footer.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>floatingFooter</code>
		 */
		getFloatingFooter(): boolean;
		/**
		 * Gets content of aggregation <code>footer</code>.
		 * 
		 * The (optional) footer of this page. It is always located at the bottom of the page
		 * @return 
		 */
		getFooter(): IBar;
		/**
		 * Gets content of aggregation <code>headerContent</code>.
		 * 
		 * Controls to be added to the right side of the page header. Usually an application would use Button controls and limit the number to one when the application needs to run on smartphones. There is no automatic overflow handling when the space is insufficient.
		 * When a customHeader is used, this aggregation will be ignored.
		 * @return 
		 */
		getHeaderContent(): sap.ui.core.Control[];
		/**
		 * Gets content of aggregation <code>landmarkInfo</code>.
		 * 
		 * Accessible landmark settings to be applied on the containers of the <code>sap.m.Page</code> control.
		 * 
		 * If not set, no landmarks will be written.
		 * @return 
		 */
		getLandmarkInfo(): PageAccessibleLandmarkInfo;
		/**
		 * Gets current value of property <code>navButtonTooltip</code>.
		 * 
		 * The tooltip of the nav button
		 * 
		 * Since version 1.34
		 * @return Value of property <code>navButtonTooltip</code>
		 */
		getNavButtonTooltip(): string;
		/**
		 * Gets current value of property <code>showFooter</code>.
		 * 
		 * Whether this page shall have a footer
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>showFooter</code>
		 */
		getShowFooter(): boolean;
		/**
		 * Gets current value of property <code>showHeader</code>.
		 * 
		 * Whether this page shall have a header.
		 * If set to true, either the control under the "customHeader" aggregation is used, or if there is no such control, a Header control is constructed from the properties "title", "showNavButton", "navButtonText" and "icon" depending on the platform.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>showHeader</code>
		 */
		getShowHeader(): boolean;
		/**
		 * Gets current value of property <code>showNavButton</code>.
		 * 
		 * A nav button will be rendered on the left area of header bar if this property is set to true.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>showNavButton</code>
		 */
		getShowNavButton(): boolean;
		/**
		 * Gets current value of property <code>showSubHeader</code>.
		 * 
		 * Whether this page shall show the subheader.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>showSubHeader</code>
		 */
		getShowSubHeader(): boolean;
		/**
		 * Gets content of aggregation <code>subHeader</code>.
		 * 
		 * a subHeader will be rendered directly under the header
		 * @return 
		 */
		getSubHeader(): IBar;
		/**
		 * Gets current value of property <code>title</code>.
		 * 
		 * The title text appearing in the page header bar.
		 * @return Value of property <code>title</code>
		 */
		getTitle(): string;
		/**
		 * Gets current value of property <code>titleLevel</code>.
		 * 
		 * Defines the semantic level of the title. Using "Auto" no explicit level information is written.
		 * Used for accessibility purposes only.
		 * 
		 * Default value is <code>Auto</code>.
		 * @return Value of property <code>titleLevel</code>
		 */
		getTitleLevel(): sap.ui.core.TitleLevel;
		/**
		 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oContent The content whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfContent(oContent: sap.ui.core.Control): number;
		/**
		 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>headerContent</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oHeaderContent The headerContent whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfHeaderContent(oHeaderContent: sap.ui.core.Control): number;
		/**
		 * Inserts a content into the aggregation <code>content</code>.
		 * @param oContent the content to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the content should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the content is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertContent(oContent: sap.ui.core.Control, iIndex: number): Page;
		/**
		 * Inserts a headerContent into the aggregation <code>headerContent</code>.
		 * @param oHeaderContent the headerContent to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the headerContent should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the headerContent is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the headerContent is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertHeaderContent(oHeaderContent: sap.ui.core.Control, iIndex: number): Page;
		/**
		 * Removes all the controls from the aggregation <code>content</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllContent(): sap.ui.core.Control[];
		/**
		 * Removes all the controls from the aggregation <code>headerContent</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllHeaderContent(): sap.ui.core.Control[];
		/**
		 * Removes a content from the aggregation <code>content</code>.
		 * @param vContent The content to remove or its index or id
		 * @return The removed content or <code>null</code>
		 */
		removeContent(vContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
		/**
		 * Removes a headerContent from the aggregation <code>headerContent</code>.
		 * @param vHeaderContent The headerContent to remove or its index or id
		 * @return The removed headerContent or <code>null</code>
		 */
		removeHeaderContent(vHeaderContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
		/**
		 * Scrolls to the given position. Only available if enableScrolling is set to "true".
		 * @param y The vertical pixel position to scroll to. Scrolling down happens with positive values.
		 * @param time The duration of animated scrolling. To scroll immediately without animation, give 0 as value. 0 is also the default value, when this optional parameter is omitted.
		 * @return 
		 */
		scrollTo(y: number, time: number): Page;
		/**
		 * Scrolls to an element(DOM or sap.ui.core.Element) within the page if the element is rendered.
		 * @param oElement The element to which should be scrolled.
		 * @param iTime The duration of animated scrolling. To scroll immediately without animation, give 0 as value or leave it default.(optional)
		 * @return <code>this</code> to facilitate method chaining.
		 */
		scrollToElement(oElement: any|sap.ui.core.Element, iTime?: number): Page;
		/**
		 * Sets a new value for property <code>backgroundDesign</code>.
		 * 
		 * This property is used to set the background color of a page. When a list is placed inside a page, the value "List" should be used to display a gray background. "Standard", with the value white, is used as default if not specified.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Standard</code>.
		 * @param sBackgroundDesign New value for property <code>backgroundDesign</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setBackgroundDesign(sBackgroundDesign: PageBackgroundDesign): Page;
		/**
		 * Sets a new value for property <code>contentOnlyBusy</code>.
		 * 
		 * Decides which area is covered by the local BusyIndicator when <code>page.setBusy()</code> is called. By default the entire page is covered, including headers and footer. When this property is set to "true", only the content area is covered (not header/sub header and footer), which is useful e.g. when there is a SearchField in the sub header and live search continuously updates the content area while the user is still able to type.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bContentOnlyBusy New value for property <code>contentOnlyBusy</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setContentOnlyBusy(bContentOnlyBusy: boolean): Page;
		/**
		 * Sets a new value for property <code>enableScrolling</code>.
		 * 
		 * Enable vertical scrolling of page contents. Page headers and footers are fixed and do not scroll.
		 * If set to false, there will be no scrolling at all.
		 * 
		 * The Page only allows vertical scrolling because horizontal scrolling is discouraged in general for full-page content. If it still needs to be achieved, disable the Page scrolling and use a ScrollContainer as full-page content of the Page. This allows you to freely configure scrolling. It can also be used to create horizontally-scrolling sub-areas of (vertically-scrolling) Pages.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bEnableScrolling New value for property <code>enableScrolling</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setEnableScrolling(bEnableScrolling: boolean): Page;
		/**
		 * Sets a new value for property <code>floatingFooter</code>.
		 * 
		 * Decides whether the floating footer behavior should be enabled.
		 * When the floating footer behavior is used, the content is visible when it's underneath the footer.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bFloatingFooter New value for property <code>floatingFooter</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setFloatingFooter(bFloatingFooter: boolean): Page;
		/**
		 * Sets the aggregated <code>footer</code>.
		 * @param oFooter The footer to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setFooter(oFooter: IBar): Page;
		/**
		 * Sets the aggregated <code>landmarkInfo</code>.
		 * @param oLandmarkInfo The landmarkInfo to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setLandmarkInfo(oLandmarkInfo: PageAccessibleLandmarkInfo): Page;
		/**
		 * Sets a new value for property <code>navButtonTooltip</code>.
		 * 
		 * The tooltip of the nav button
		 * 
		 * Since version 1.34
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sNavButtonTooltip New value for property <code>navButtonTooltip</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setNavButtonTooltip(sNavButtonTooltip: string): Page;
		/**
		 * Sets a new value for property <code>showFooter</code>.
		 * 
		 * Whether this page shall have a footer
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bShowFooter New value for property <code>showFooter</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowFooter(bShowFooter: boolean): Page;
		/**
		 * Sets a new value for property <code>showHeader</code>.
		 * 
		 * Whether this page shall have a header.
		 * If set to true, either the control under the "customHeader" aggregation is used, or if there is no such control, a Header control is constructed from the properties "title", "showNavButton", "navButtonText" and "icon" depending on the platform.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bShowHeader New value for property <code>showHeader</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowHeader(bShowHeader: boolean): Page;
		/**
		 * Sets a new value for property <code>showNavButton</code>.
		 * 
		 * A nav button will be rendered on the left area of header bar if this property is set to true.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bShowNavButton New value for property <code>showNavButton</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowNavButton(bShowNavButton: boolean): Page;
		/**
		 * Sets a new value for property <code>showSubHeader</code>.
		 * 
		 * Whether this page shall show the subheader.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bShowSubHeader New value for property <code>showSubHeader</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowSubHeader(bShowSubHeader: boolean): Page;
		/**
		 * Sets the aggregated <code>subHeader</code>.
		 * @param oSubHeader The subHeader to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setSubHeader(oSubHeader: IBar): Page;
		/**
		 * Sets a new value for property <code>title</code>.
		 * 
		 * The title text appearing in the page header bar.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sTitle New value for property <code>title</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTitle(sTitle: string): Page;
		/**
		 * Sets a new value for property <code>titleLevel</code>.
		 * 
		 * Defines the semantic level of the title. Using "Auto" no explicit level information is written.
		 * Used for accessibility purposes only.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Auto</code>.
		 * @param sTitleLevel New value for property <code>titleLevel</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTitleLevel(sTitleLevel: sap.ui.core.TitleLevel): Page;
	}

	class PageAccessibleLandmarkInfo extends sap.ui.core.Element {
		/**
		 * Constructor for a new <code>sap.m.PageAccessibleLandmarkInfo</code> element.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId Id for the new element, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new element(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.PageAccessibleLandmarkInfoMetadata);
		/**
		 * Constructor for a new <code>sap.m.PageAccessibleLandmarkInfo</code> element.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId Id for the new element, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new element(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.PageAccessibleLandmarkInfo with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|PageAccessibleLandmarkInfoMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>contentLabel</code>.
		 * 
		 * Texts which describes the landmark of the content container of the corresponding <code>sap.m.Page</code> control.
		 * 
		 * If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text
		 * is used.
		 * @return Value of property <code>contentLabel</code>
		 */
		getContentLabel(): string;
		/**
		 * Gets current value of property <code>contentRole</code>.
		 * 
		 * Landmark role of the content container of the corresponding <code>sap.m.Page</code> control.
		 * 
		 * If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.
		 * 
		 * Default value is <code>Main</code>.
		 * @return Value of property <code>contentRole</code>
		 */
		getContentRole(): sap.ui.core.AccessibleLandmarkRole;
		/**
		 * Gets current value of property <code>footerLabel</code>.
		 * 
		 * Texts which describes the landmark of the header container of the corresponding <code>sap.m.Page</code> control.
		 * 
		 * If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text
		 * is used.
		 * @return Value of property <code>footerLabel</code>
		 */
		getFooterLabel(): string;
		/**
		 * Gets current value of property <code>footerRole</code>.
		 * 
		 * Landmark role of the footer container of the corresponding <code>sap.m.Page</code> control.
		 * 
		 * If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.
		 * 
		 * Default value is <code>Region</code>.
		 * @return Value of property <code>footerRole</code>
		 */
		getFooterRole(): sap.ui.core.AccessibleLandmarkRole;
		/**
		 * Gets current value of property <code>headerLabel</code>.
		 * 
		 * Texts which describes the landmark of the header container of the corresponding <code>sap.m.Page</code> control.
		 * 
		 * If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text
		 * is used.
		 * @return Value of property <code>headerLabel</code>
		 */
		getHeaderLabel(): string;
		/**
		 * Gets current value of property <code>headerRole</code>.
		 * 
		 * Landmark role of the header container of the corresponding <code>sap.m.Page</code> control.
		 * 
		 * If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.
		 * 
		 * Default value is <code>Region</code>.
		 * @return Value of property <code>headerRole</code>
		 */
		getHeaderRole(): sap.ui.core.AccessibleLandmarkRole;
		/**
		 * Gets current value of property <code>rootLabel</code>.
		 * 
		 * Texts which describes the landmark of the root container of the corresponding <code>sap.m.Page</code> control.
		 * 
		 * If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text
		 * is used.
		 * @return Value of property <code>rootLabel</code>
		 */
		getRootLabel(): string;
		/**
		 * Gets current value of property <code>rootRole</code>.
		 * 
		 * Landmark role of the root container of the corresponding <code>sap.m.Page</code> control.
		 * 
		 * If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.
		 * 
		 * Default value is <code>Region</code>.
		 * @return Value of property <code>rootRole</code>
		 */
		getRootRole(): sap.ui.core.AccessibleLandmarkRole;
		/**
		 * Gets current value of property <code>subHeaderLabel</code>.
		 * 
		 * Texts which describes the landmark of the subheader container of the corresponding <code>sap.m.Page</code> control.
		 * 
		 * If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text
		 * is used.
		 * @return Value of property <code>subHeaderLabel</code>
		 */
		getSubHeaderLabel(): string;
		/**
		 * Gets current value of property <code>subHeaderRole</code>.
		 * 
		 * Landmark role of the subheader container of the corresponding <code>sap.m.Page</code> control.
		 * 
		 * If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.
		 * @return Value of property <code>subHeaderRole</code>
		 */
		getSubHeaderRole(): sap.ui.core.AccessibleLandmarkRole;
		/**
		 * Sets a new value for property <code>contentLabel</code>.
		 * 
		 * Texts which describes the landmark of the content container of the corresponding <code>sap.m.Page</code> control.
		 * 
		 * If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text
		 * is used.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sContentLabel New value for property <code>contentLabel</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setContentLabel(sContentLabel: string): PageAccessibleLandmarkInfo;
		/**
		 * Sets a new value for property <code>contentRole</code>.
		 * 
		 * Landmark role of the content container of the corresponding <code>sap.m.Page</code> control.
		 * 
		 * If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Main</code>.
		 * @param sContentRole New value for property <code>contentRole</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setContentRole(sContentRole: sap.ui.core.AccessibleLandmarkRole): PageAccessibleLandmarkInfo;
		/**
		 * Sets a new value for property <code>footerLabel</code>.
		 * 
		 * Texts which describes the landmark of the header container of the corresponding <code>sap.m.Page</code> control.
		 * 
		 * If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text
		 * is used.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sFooterLabel New value for property <code>footerLabel</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setFooterLabel(sFooterLabel: string): PageAccessibleLandmarkInfo;
		/**
		 * Sets a new value for property <code>footerRole</code>.
		 * 
		 * Landmark role of the footer container of the corresponding <code>sap.m.Page</code> control.
		 * 
		 * If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Region</code>.
		 * @param sFooterRole New value for property <code>footerRole</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setFooterRole(sFooterRole: sap.ui.core.AccessibleLandmarkRole): PageAccessibleLandmarkInfo;
		/**
		 * Sets a new value for property <code>headerLabel</code>.
		 * 
		 * Texts which describes the landmark of the header container of the corresponding <code>sap.m.Page</code> control.
		 * 
		 * If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text
		 * is used.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sHeaderLabel New value for property <code>headerLabel</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHeaderLabel(sHeaderLabel: string): PageAccessibleLandmarkInfo;
		/**
		 * Sets a new value for property <code>headerRole</code>.
		 * 
		 * Landmark role of the header container of the corresponding <code>sap.m.Page</code> control.
		 * 
		 * If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Region</code>.
		 * @param sHeaderRole New value for property <code>headerRole</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHeaderRole(sHeaderRole: sap.ui.core.AccessibleLandmarkRole): PageAccessibleLandmarkInfo;
		/**
		 * Sets a new value for property <code>rootLabel</code>.
		 * 
		 * Texts which describes the landmark of the root container of the corresponding <code>sap.m.Page</code> control.
		 * 
		 * If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text
		 * is used.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sRootLabel New value for property <code>rootLabel</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setRootLabel(sRootLabel: string): PageAccessibleLandmarkInfo;
		/**
		 * Sets a new value for property <code>rootRole</code>.
		 * 
		 * Landmark role of the root container of the corresponding <code>sap.m.Page</code> control.
		 * 
		 * If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Region</code>.
		 * @param sRootRole New value for property <code>rootRole</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setRootRole(sRootRole: sap.ui.core.AccessibleLandmarkRole): PageAccessibleLandmarkInfo;
		/**
		 * Sets a new value for property <code>subHeaderLabel</code>.
		 * 
		 * Texts which describes the landmark of the subheader container of the corresponding <code>sap.m.Page</code> control.
		 * 
		 * If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text
		 * is used.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sSubHeaderLabel New value for property <code>subHeaderLabel</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setSubHeaderLabel(sSubHeaderLabel: string): PageAccessibleLandmarkInfo;
		/**
		 * Sets a new value for property <code>subHeaderRole</code>.
		 * 
		 * Landmark role of the subheader container of the corresponding <code>sap.m.Page</code> control.
		 * 
		 * If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sSubHeaderRole New value for property <code>subHeaderRole</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setSubHeaderRole(sSubHeaderRole: sap.ui.core.AccessibleLandmarkRole): PageAccessibleLandmarkInfo;
	}

	class PageBackgroundDesign {
		/**
		 * Page background color when a List is set as the Page content.
		 */
		static List: string;
		/**
		 * A solid background color dependent on the theme.
		 */
		static Solid: string;
		/**
		 * Standard Page background color.
		 */
		static Standard: string;
		/**
		 * Transparent background for the page.
		 */
		static Transparent: string;
	}

	class PagingButton extends sap.ui.core.Control {
		/**
		 * Constructor for a new PagingButton.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.PagingButtonMetadata);
		/**
		 * Constructor for a new PagingButton.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>positionChange</code> event of this <code>sap.m.PagingButton</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.PagingButton</code> itself.
		 * 
		 * Fired when the current position is changed.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.PagingButton</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachPositionChange(oData: any, fnFunction: any, oListener?: any): PagingButton;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>positionChange</code> event of this <code>sap.m.PagingButton</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachPositionChange(fnFunction: any, oListener: any): PagingButton;
		/**
		 * Creates a new subclass of class sap.m.PagingButton with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|PagingButtonMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>positionChange</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>newPosition</code> of type <code>int</code>The number of the new position.</li>
		 * <li><code>oldPosition</code> of type <code>int</code>The number of the old position.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		firePositionChange(mArguments?: any): PagingButton;
		/**
		 * Gets current value of property <code>count</code>.
		 * 
		 * Determines the total count of items/entities that the control navigates through.
		 * The minimum number of items/entities is 1.
		 * 
		 * Default value is <code>1</code>.
		 * @return Value of property <code>count</code>
		 */
		getCount(): number;
		/**
		 * Gets current value of property <code>nextButtonTooltip</code>.
		 * 
		 * Determines the tooltip of the next button.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>nextButtonTooltip</code>
		 */
		getNextButtonTooltip(): string;
		/**
		 * Gets current value of property <code>position</code>.
		 * 
		 * Determines the current position in the items/entities that the control navigates through.
		 * Starting (minimum) number is 1.
		 * 
		 * Default value is <code>1</code>.
		 * @return Value of property <code>position</code>
		 */
		getPosition(): number;
		/**
		 * Gets current value of property <code>previousButtonTooltip</code>.
		 * 
		 * Determines the tooltip of the previous button.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>previousButtonTooltip</code>
		 */
		getPreviousButtonTooltip(): string;
	}

	class Panel extends sap.ui.core.Control {
		/**
		 * Constructor for a new Panel.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.PanelMetadata);
		/**
		 * Constructor for a new Panel.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some content to the aggregation <code>content</code>.
		 * @param oContent the content to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addContent(oContent: sap.ui.core.Control): Panel;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>expand</code> event of this <code>sap.m.Panel</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Panel</code> itself.
		 * 
		 * Indicates that the panel will expand or collapse
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Panel</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachExpand(oData: any, fnFunction: any, oListener?: any): Panel;
		/**
		 * Destroys all the content in the aggregation <code>content</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyContent(): Panel;
		/**
		 * Destroys the headerToolbar in the aggregation <code>headerToolbar</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyHeaderToolbar(): Panel;
		/**
		 * Destroys the infoToolbar in the aggregation <code>infoToolbar</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyInfoToolbar(): Panel;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>expand</code> event of this <code>sap.m.Panel</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachExpand(fnFunction: any, oListener: any): Panel;
		/**
		 * Creates a new subclass of class sap.m.Panel with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|PanelMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>expand</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>expand</code> of type <code>boolean</code>If the panel will expand, this is true.
		 * If the panel will collapse, this is false.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireExpand(mArguments?: any): Panel;
		/**
		 * Gets current value of property <code>backgroundDesign</code>.
		 * 
		 * This property is used to set the background color of the Panel.
		 * Depending on the theme you can change the state of the background from "Solid" over "Translucent" to "Transparent".
		 * 
		 * Default value is <code>Translucent</code>.
		 * @return Value of property <code>backgroundDesign</code>
		 */
		getBackgroundDesign(): BackgroundDesign;
		/**
		 * Gets content of aggregation <code>content</code>.
		 * 
		 * Determines the content of the Panel.
		 * The content will be visible only when the Panel is expanded.
		 * @return 
		 */
		getContent(): sap.ui.core.Control[];
		/**
		 * Gets current value of property <code>expandable</code>.
		 * 
		 * Specifies whether the control is expandable.
		 * This allows for collapsing or expanding the infoToolbar (if available) and content of the Panel.
		 * Note: If expandable is set to false, the Panel will always be rendered expanded.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>expandable</code>
		 */
		getExpandable(): boolean;
		/**
		 * Gets current value of property <code>expandAnimation</code>.
		 * 
		 * Indicates whether the transition between the expanded and the collapsed state of the control is animated.
		 * By default the animation is enabled.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>expandAnimation</code>
		 */
		getExpandAnimation(): boolean;
		/**
		 * Gets current value of property <code>expanded</code>.
		 * 
		 * Indicates whether the Panel is expanded or not.
		 * If expanded is set to true, then both the infoToolbar (if available) and the content are rendered.
		 * If expanded is set to false, then only the headerText or headerToolbar is rendered.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>expanded</code>
		 */
		getExpanded(): boolean;
		/**
		 * Gets current value of property <code>headerText</code>.
		 * 
		 * This property is used to set the header text of the Panel.
		 * The "headerText" is visible in both expanded and collapsed state.
		 * Note: This property is overwritten by the "headerToolbar" aggregation.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>headerText</code>
		 */
		getHeaderText(): string;
		/**
		 * Gets content of aggregation <code>headerToolbar</code>.
		 * 
		 * This aggregation allows the use of a custom Toolbar as header for the Panel.
		 * The "headerToolbar" is visible in both expanded and collapsed state.
		 * Use it when you want to add extra controls for user interactions in the header.
		 * Note: This aggregation overwrites "headerText" property.
		 * @return 
		 */
		getHeaderToolbar(): Toolbar;
		/**
		 * Gets current value of property <code>height</code>.
		 * 
		 * Determines the Panel height.
		 * 
		 * Default value is <code>auto</code>.
		 * @return Value of property <code>height</code>
		 */
		getHeight(): sap.ui.core.CSSSize;
		/**
		 * Gets content of aggregation <code>infoToolbar</code>.
		 * 
		 * This aggregation allows the use of a custom Toolbar as information bar for the Panel.
		 * The "infoToolbar" is placed below the header and is visible only in expanded state.
		 * Use it when you want to show extra information to the user.
		 * @return 
		 */
		getInfoToolbar(): Toolbar;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Determines the Panel width.
		 * 
		 * Default value is <code>100%</code>.
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oContent The content whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfContent(oContent: sap.ui.core.Control): number;
		/**
		 * Inserts a content into the aggregation <code>content</code>.
		 * @param oContent the content to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the content should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the content is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertContent(oContent: sap.ui.core.Control, iIndex: number): Panel;
		/**
		 * Removes all the controls from the aggregation <code>content</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllContent(): sap.ui.core.Control[];
		/**
		 * Removes a content from the aggregation <code>content</code>.
		 * @param vContent The content to remove or its index or id
		 * @return The removed content or <code>null</code>
		 */
		removeContent(vContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
		/**
		 * Sets a new value for property <code>backgroundDesign</code>.
		 * 
		 * This property is used to set the background color of the Panel.
		 * Depending on the theme you can change the state of the background from "Solid" over "Translucent" to "Transparent".
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Translucent</code>.
		 * @param sBackgroundDesign New value for property <code>backgroundDesign</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setBackgroundDesign(sBackgroundDesign: BackgroundDesign): Panel;
		/**
		 * Sets the expandable property of the control.
		 * @param bExpandable Defines whether the control is expandable or not.
		 * @return Pointer to the control instance to allow method chaining.
		 */
		setExpandable(bExpandable: boolean): Panel;
		/**
		 * Sets a new value for property <code>expandAnimation</code>.
		 * 
		 * Indicates whether the transition between the expanded and the collapsed state of the control is animated.
		 * By default the animation is enabled.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bExpandAnimation New value for property <code>expandAnimation</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setExpandAnimation(bExpandAnimation: boolean): Panel;
		/**
		 * Sets the expanded property of the control.
		 * @param bExpanded Defines whether control is expanded or not.
		 * @return Pointer to the control instance to allow method chaining.
		 */
		setExpanded(bExpanded: boolean): Panel;
		/**
		 * Sets a new value for property <code>headerText</code>.
		 * 
		 * This property is used to set the header text of the Panel.
		 * The "headerText" is visible in both expanded and collapsed state.
		 * Note: This property is overwritten by the "headerToolbar" aggregation.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sHeaderText New value for property <code>headerText</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHeaderText(sHeaderText: string): Panel;
		/**
		 * Sets the aggregated <code>headerToolbar</code>.
		 * @param oHeaderToolbar The headerToolbar to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHeaderToolbar(oHeaderToolbar: Toolbar): Panel;
		/**
		 * Sets the height of the panel.
		 * @param sHeight The height of the panel as CSS size.
		 * @return Pointer to the control instance to allow method chaining.
		 */
		setHeight(sHeight: sap.ui.core.CSSSize): Panel;
		/**
		 * Sets the aggregated <code>infoToolbar</code>.
		 * @param oInfoToolbar The infoToolbar to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setInfoToolbar(oInfoToolbar: Toolbar): Panel;
		/**
		 * Sets the width of the panel.
		 * @param sWidth The width of the Panel as CSS size.
		 * @return Pointer to the control instance to allow method chaining.
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): Panel;
	}

	class PlacementType {
		/**
		 * Popover will be placed automatically at the reference control.
		 */
		static Auto: string;
		/**
		 * Popover will be placed at the bottom of the reference control.
		 */
		static Bottom: string;
		/**
		 * Popover will be placed at the right or left side of the reference control.
		 */
		static Horizontal: string;
		/**
		 * Popover will be placed at the right or left side of the reference control but will try to position on the
		 * left side if the space is greater than the Popover's width.
		 */
		static HorizontalPreferredLeft: string;
		/**
		 * Popover will be placed at the right or left side of the reference control but will try to position on the
		 * right side if the space is greater than the Popover's width.
		 */
		static HorizontalPreferredRight: string;
		/**
		 * Popover will be placed at the left side of the reference control.
		 */
		static Left: string;
		/**
		 * Popover will be placed to the bottom of the reference control. If the available space is less than the Popover's height,
		 * it will appear to the top of the same reference control bottom border.
		 */
		static PreferredBottomOrFlip: string;
		/**
		 * Popover will be placed to the left of the reference control. If the available space is less than the Popover's width,
		 * it will appear to the right of the same reference control left border.
		 */
		static PreferredLeftOrFlip: string;
		/**
		 * Popover will be placed to the right of the reference control. If the available space is less than the Popover's width,
		 * it will appear to the left of the same reference control right border.
		 */
		static PreferredRightOrFlip: string;
		/**
		 * Popover will be placed to the top of the reference control. If the available space is less than the Popover's height,
		 * it will appear to the bottom of the same reference control top border.
		 */
		static PreferredTopOrFlip: string;
		/**
		 * Popover will be placed at the right side of the reference control.
		 */
		static Right: string;
		/**
		 * Popover will be placed at the top of the reference control.
		 */
		static Top: string;
		/**
		 * Popover will be placed at the top or bottom of the reference control.
		 */
		static Vertical: string;
		/**
		 * Popover will be placed at the top or bottom of the reference control but will try to position on the
		 * bottom side if the space is greater than the Popover's height.
		 */
		static VerticalPreferredBottom: string;
		/**
		 * Popover will be placed at the top or bottom of the reference control but will try to position on the
		 * top side if the space is greater than the Popover's height.
		 */
		static VerticalPreferredTop: string;
	}

	class PlanningCalendar extends sap.ui.core.Control {
		/**
		 * Constructor for a new <code>PlanningCalendar</code>.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sID ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sID?: string, mSettings?: sap.m.PlanningCalendarMetadata);
		/**
		 * Constructor for a new <code>PlanningCalendar</code>.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sID ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sID?: string, mSettings?: any);
		/**
		 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): PlanningCalendar;
		/**
		 * Adds some row to the aggregation <code>rows</code>.
		 * @param oRow the row to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addRow(oRow: PlanningCalendarRow): PlanningCalendar;
		/**
		 * Adds some specialDate to the aggregation <code>specialDates</code>.
		 * @param oSpecialDate the specialDate to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addSpecialDate(oSpecialDate: sap.ui.unified.DateTypeRange): PlanningCalendar;
		/**
		 * Adds some toolbarContent to the aggregation <code>toolbarContent</code>.
		 * @param oToolbarContent the toolbarContent to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addToolbarContent(oToolbarContent: sap.ui.core.Control): PlanningCalendar;
		/**
		 * Adds some view to the aggregation <code>views</code>.
		 * @param oView the view to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addView(oView: PlanningCalendarView): PlanningCalendar;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>appointmentSelect</code> event of this <code>sap.m.PlanningCalendar</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.PlanningCalendar</code> itself.
		 * 
		 * Fired if an appointment was selected
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.PlanningCalendar</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachAppointmentSelect(oData: any, fnFunction: any, oListener?: any): PlanningCalendar;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>intervalSelect</code> event of this <code>sap.m.PlanningCalendar</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.PlanningCalendar</code> itself.
		 * 
		 * Fired if an interval was selected in the header calendar or in the row
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.PlanningCalendar</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachIntervalSelect(oData: any, fnFunction: any, oListener?: any): PlanningCalendar;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>rowSelectionChange</code> event of this <code>sap.m.PlanningCalendar</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.PlanningCalendar</code> itself.
		 * 
		 * Fires when row selection is changed
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.PlanningCalendar</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachRowSelectionChange(oData: any, fnFunction: any, oListener?: any): PlanningCalendar;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>startDateChange</code> event of this <code>sap.m.PlanningCalendar</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.PlanningCalendar</code> itself.
		 * 
		 * <code>startDate</code> was changed while navigating in <code>PlanningCalendar</code>
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.PlanningCalendar</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachStartDateChange(oData: any, fnFunction: any, oListener?: any): PlanningCalendar;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>viewChange</code> event of this <code>sap.m.PlanningCalendar</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.PlanningCalendar</code> itself.
		 * 
		 * <code>viewKey</code> was changed by user interaction
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.PlanningCalendar</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachViewChange(oData: any, fnFunction: any, oListener?: any): PlanningCalendar;
		/**
		 * Destroys all the rows in the aggregation <code>rows</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyRows(): PlanningCalendar;
		/**
		 * Destroys all the specialDates in the aggregation <code>specialDates</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroySpecialDates(): PlanningCalendar;
		/**
		 * Destroys all the toolbarContent in the aggregation <code>toolbarContent</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyToolbarContent(): PlanningCalendar;
		/**
		 * Destroys all the views in the aggregation <code>views</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyViews(): PlanningCalendar;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>appointmentSelect</code> event of this <code>sap.m.PlanningCalendar</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachAppointmentSelect(fnFunction: any, oListener: any): PlanningCalendar;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>intervalSelect</code> event of this <code>sap.m.PlanningCalendar</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachIntervalSelect(fnFunction: any, oListener: any): PlanningCalendar;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>rowSelectionChange</code> event of this <code>sap.m.PlanningCalendar</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachRowSelectionChange(fnFunction: any, oListener: any): PlanningCalendar;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>startDateChange</code> event of this <code>sap.m.PlanningCalendar</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachStartDateChange(fnFunction: any, oListener: any): PlanningCalendar;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>viewChange</code> event of this <code>sap.m.PlanningCalendar</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachViewChange(fnFunction: any, oListener: any): PlanningCalendar;
		/**
		 * Creates a new subclass of class sap.m.PlanningCalendar with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|PlanningCalendarMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>appointmentSelect</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>appointment</code> of type <code>sap.ui.unified.CalendarAppointment</code>Selected appointment</li>
		 * <li><code>appointments</code> of type <code>sap.ui.unified.CalendarAppointment[]</code>Selected appointments in case a group appointment is selected</li>
		 * <li><code>multiSelect</code> of type <code>boolean</code>If set, the appointment was selected using multiple selection (e.g. Shift + single mouse click),
		 * meaning more than the current appointment could be selected.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireAppointmentSelect(mArguments?: any): PlanningCalendar;
		/**
		 * Fires event <code>intervalSelect</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>startDate</code> of type <code>object</code>Start date of the selected interval, as JavaScript date object.</li>
		 * <li><code>endDate</code> of type <code>object</code>Interval end date as JavaScript date object</li>
		 * <li><code>subInterval</code> of type <code>boolean</code>If set, the selected interval is a subinterval</li>
		 * <li><code>row</code> of type <code>sap.m.PlanningCalendarRow</code>Row of the selected interval</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireIntervalSelect(mArguments?: any): PlanningCalendar;
		/**
		 * Fires event <code>rowSelectionChange</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>rows</code> of type <code>sap.m.PlanningCalendarRow[]</code>Array of rows whose selection has changed.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireRowSelectionChange(mArguments?: any): PlanningCalendar;
		/**
		 * Fires event <code>startDateChange</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireStartDateChange(mArguments?: any): PlanningCalendar;
		/**
		 * Fires event <code>viewChange</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireViewChange(mArguments?: any): PlanningCalendar;
		/**
		 * Gets current value of property <code>appointmentsReducedHeight</code>.
		 * 
		 * If set the appointments without text (only title) are rendered with a smaller height.
		 * 
		 * <b>Note:</b> On phone devices this property is ignored, appointments are always rendered in full height
		 * to allow touching.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>appointmentsReducedHeight</code>
		 */
		getAppointmentsReducedHeight(): boolean;
		/**
		 * Gets current value of property <code>appointmentsVisualization</code>.
		 * 
		 * Defines the visualization of the <code>CalendarAppoinment</code>
		 * 
		 * <b>Note:</b> The real visualization depends on the used theme.
		 * 
		 * Default value is <code>Standard</code>.
		 * @return Value of property <code>appointmentsVisualization</code>
		 */
		getAppointmentsVisualization(): sap.ui.unified.CalendarAppointmentVisualization;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
		 * @return 
		 */
		getAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Gets current value of property <code>height</code>.
		 * 
		 * Height of the <code>PlanningCalendar</code>
		 * @return Value of property <code>height</code>
		 */
		getHeight(): sap.ui.core.CSSSize;
		/**
		 * ID of the element which is the current target of the association <code>legend</code>, or <code>null</code>.
		 * @return 
		 */
		getLegend(): sap.ui.core.ID;
		/**
		 * Gets current value of property <code>maxDate</code>.
		 * 
		 * Maximum date that can be shown and selected in the <code>PlanningCalendar</code>. This must be a JavaScript date object.
		 * 
		 * <b>Note:</b> If the <code>maxDate</code> is set to be before the <code>minDate</code>,
		 * the <code>minDate</code> is set to the begin of the month of the <code>maxDate</code>.
		 * @return Value of property <code>maxDate</code>
		 */
		getMaxDate(): any;
		/**
		 * Gets current value of property <code>minDate</code>.
		 * 
		 * Minimum date that can be shown and selected in the <code>PlanningCalendar</code>. This must be a JavaScript date object.
		 * 
		 * <b>Note:</b> If the <code>minDate</code> is set to be after the <code>maxDate</code>,
		 * the <code>maxDate</code> is set to the end of the month of the <code>minDate</code>.
		 * @return Value of property <code>minDate</code>
		 */
		getMinDate(): any;
		/**
		 * Gets current value of property <code>noDataText</code>.
		 * 
		 * This text is displayed when no rows are assigned.
		 * @return Value of property <code>noDataText</code>
		 */
		getNoDataText(): string;
		/**
		 * Gets content of aggregation <code>rows</code>.
		 * 
		 * rows of the <code>PlanningCalendar</code>
		 * @return 
		 */
		getRows(): PlanningCalendarRow[];
		/**
		 * Returns an array containing the selected rows. If no row is selected, an empty array is returned.
		 * @return selected rows
		 */
		getSelectedRows(): PlanningCalendarRow[];
		/**
		 * Gets current value of property <code>showEmptyIntervalHeaders</code>.
		 * 
		 * If set, interval headers are shown even if no <code>intervalHeaders</code> are assigned to the visible time frame.
		 * 
		 * If not set, no interval headers are shown if no <code>intervalHeaders</code> are assigned.
		 * 
		 * <b>Note:</b> This property is only used if <code>showIntervalHeaders</code> is set to <code>true</code>.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>showEmptyIntervalHeaders</code>
		 */
		getShowEmptyIntervalHeaders(): boolean;
		/**
		 * Gets current value of property <code>showIntervalHeaders</code>.
		 * 
		 * If set, interval headers are shown like specified in <code>showEmptyIntervalHeaders</code>.
		 * 
		 * If not set, no interval headers are shown even if <code>intervalHeaders</code> are assigned.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>showIntervalHeaders</code>
		 */
		getShowIntervalHeaders(): boolean;
		/**
		 * Gets current value of property <code>showRowHeaders</code>.
		 * 
		 * If set, headers of the <code>PlanningCalendarRows</code> are shown. This means the column with the headers is shown.
		 * 
		 * If not set, the header column is not shown at all, even if header information is provided.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>showRowHeaders</code>
		 */
		getShowRowHeaders(): boolean;
		/**
		 * Gets current value of property <code>singleSelection</code>.
		 * 
		 * If set, only a single row can be selected
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>singleSelection</code>
		 */
		getSingleSelection(): boolean;
		/**
		 * Gets content of aggregation <code>specialDates</code>.
		 * 
		 * Date range along with a type to visualize special days in the header calendar.
		 * If one day is assigned to more than one type, only the first one will be used.
		 * @return 
		 */
		getSpecialDates(): sap.ui.unified.DateTypeRange[];
		/**
		 * Gets current value of property <code>startDate</code>.
		 * 
		 * Start date of the row, as JavaScript date object. As a default the current date is used.
		 * @return Value of property <code>startDate</code>
		 */
		getStartDate(): any;
		/**
		 * Gets content of aggregation <code>toolbarContent</code>.
		 * 
		 * The content of the toolbar.
		 * @return 
		 */
		getToolbarContent(): sap.ui.core.Control[];
		/**
		 * Gets current value of property <code>viewKey</code>.
		 * 
		 * Key of the <code>PlanningCalendarView</code> used for the output. The default value uses a default view.
		 * If you are using own views, the keys of these views must be used instead.
		 * 
		 * Default value is <code>sap.ui.unified.CalendarIntervalType.Hour</code>.
		 * @return Value of property <code>viewKey</code>
		 */
		getViewKey(): string;
		/**
		 * Gets content of aggregation <code>views</code>.
		 * 
		 * Views of the <code>PlanningCalendar</code>.
		 * 
		 * If not set, three default views are used to allow you to switch between hour, day and month granularity.
		 * The default views have the keys defined in </code>sap.ui.unified.CalendarIntervalType</code>
		 * @return 
		 */
		getViews(): PlanningCalendarView[];
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Width of the <code>PlanningCalendar</code>
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Checks for the provided <code>sap.m.PlanningCalendarRow</code> in the aggregation <code>rows</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oRow The row whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfRow(oRow: PlanningCalendarRow): number;
		/**
		 * Checks for the provided <code>sap.ui.unified.DateTypeRange</code> in the aggregation <code>specialDates</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oSpecialDate The specialDate whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfSpecialDate(oSpecialDate: sap.ui.unified.DateTypeRange): number;
		/**
		 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>toolbarContent</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oToolbarContent The toolbarContent whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfToolbarContent(oToolbarContent: sap.ui.core.Control): number;
		/**
		 * Checks for the provided <code>sap.m.PlanningCalendarView</code> in the aggregation <code>views</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oView The view whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfView(oView: PlanningCalendarView): number;
		/**
		 * Inserts a row into the aggregation <code>rows</code>.
		 * @param oRow the row to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the row should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the row is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the row is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertRow(oRow: PlanningCalendarRow, iIndex: number): PlanningCalendar;
		/**
		 * Inserts a specialDate into the aggregation <code>specialDates</code>.
		 * @param oSpecialDate the specialDate to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the specialDate should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the specialDate is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the specialDate is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertSpecialDate(oSpecialDate: sap.ui.unified.DateTypeRange, iIndex: number): PlanningCalendar;
		/**
		 * Inserts a toolbarContent into the aggregation <code>toolbarContent</code>.
		 * @param oToolbarContent the toolbarContent to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the toolbarContent should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the toolbarContent is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the toolbarContent is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertToolbarContent(oToolbarContent: sap.ui.core.Control, iIndex: number): PlanningCalendar;
		/**
		 * Inserts a view into the aggregation <code>views</code>.
		 * @param oView the view to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the view should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the view is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the view is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertView(oView: PlanningCalendarView, iIndex: number): PlanningCalendar;
		/**
		 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Removes all the controls from the aggregation <code>rows</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllRows(): PlanningCalendarRow[];
		/**
		 * Removes all the controls from the aggregation <code>specialDates</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllSpecialDates(): sap.ui.unified.DateTypeRange[];
		/**
		 * Removes all the controls from the aggregation <code>toolbarContent</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllToolbarContent(): sap.ui.core.Control[];
		/**
		 * Removes all the controls from the aggregation <code>views</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllViews(): PlanningCalendarView[];
		/**
		 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
		 * @return The removed ariaLabelledBy or <code>null</code>
		 */
		removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Removes a row from the aggregation <code>rows</code>.
		 * @param vRow The row to remove or its index or id
		 * @return The removed row or <code>null</code>
		 */
		removeRow(vRow: number|string|PlanningCalendarRow): PlanningCalendarRow;
		/**
		 * Removes a specialDate from the aggregation <code>specialDates</code>.
		 * @param vSpecialDate The specialDate to remove or its index or id
		 * @return The removed specialDate or <code>null</code>
		 */
		removeSpecialDate(vSpecialDate: number|string|sap.ui.unified.DateTypeRange): sap.ui.unified.DateTypeRange;
		/**
		 * Removes a toolbarContent from the aggregation <code>toolbarContent</code>.
		 * @param vToolbarContent The toolbarContent to remove or its index or id
		 * @return The removed toolbarContent or <code>null</code>
		 */
		removeToolbarContent(vToolbarContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
		/**
		 * Removes a view from the aggregation <code>views</code>.
		 * @param vView The view to remove or its index or id
		 * @return The removed view or <code>null</code>
		 */
		removeView(vView: number|string|PlanningCalendarView): PlanningCalendarView;
		/**
		 * Selects or deselects all <code>PlanningCalendarRows</code>.
		 * 
		 * <b>Note:</b> Selection only works if <code>singleSelection</code> is not set
		 * @param bSelect Indicator showing whether <code>PlanningCalendarRows</code> should be selected or deselected
		 * @return <code>this</code> to allow method chaining
		 */
		selectAllRows(bSelect: boolean): PlanningCalendar;
		/**
		 * Sets a new value for property <code>appointmentsReducedHeight</code>.
		 * 
		 * If set the appointments without text (only title) are rendered with a smaller height.
		 * 
		 * <b>Note:</b> On phone devices this property is ignored, appointments are always rendered in full height
		 * to allow touching.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bAppointmentsReducedHeight New value for property <code>appointmentsReducedHeight</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setAppointmentsReducedHeight(bAppointmentsReducedHeight: boolean): PlanningCalendar;
		/**
		 * Sets a new value for property <code>appointmentsVisualization</code>.
		 * 
		 * Defines the visualization of the <code>CalendarAppoinment</code>
		 * 
		 * <b>Note:</b> The real visualization depends on the used theme.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Standard</code>.
		 * @param sAppointmentsVisualization New value for property <code>appointmentsVisualization</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setAppointmentsVisualization(sAppointmentsVisualization: sap.ui.unified.CalendarAppointmentVisualization): PlanningCalendar;
		/**
		 * Sets a new value for property <code>height</code>.
		 * 
		 * Height of the <code>PlanningCalendar</code>
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sHeight New value for property <code>height</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHeight(sHeight: sap.ui.core.CSSSize): PlanningCalendar;
		/**
		 * Sets the associated <code>legend</code>.
		 * @param oLegend ID of an element which becomes the new target of this legend association; alternatively, an element instance may be given
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setLegend(oLegend: sap.ui.core.ID|sap.ui.unified.CalendarLegend): PlanningCalendar;
		/**
		 * Sets a new value for property <code>maxDate</code>.
		 * 
		 * Maximum date that can be shown and selected in the <code>PlanningCalendar</code>. This must be a JavaScript date object.
		 * 
		 * <b>Note:</b> If the <code>maxDate</code> is set to be before the <code>minDate</code>,
		 * the <code>minDate</code> is set to the begin of the month of the <code>maxDate</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param oMaxDate New value for property <code>maxDate</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMaxDate(oMaxDate: any): PlanningCalendar;
		/**
		 * Sets a new value for property <code>minDate</code>.
		 * 
		 * Minimum date that can be shown and selected in the <code>PlanningCalendar</code>. This must be a JavaScript date object.
		 * 
		 * <b>Note:</b> If the <code>minDate</code> is set to be after the <code>maxDate</code>,
		 * the <code>maxDate</code> is set to the end of the month of the <code>minDate</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param oMinDate New value for property <code>minDate</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMinDate(oMinDate: any): PlanningCalendar;
		/**
		 * Sets a new value for property <code>noDataText</code>.
		 * 
		 * This text is displayed when no rows are assigned.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sNoDataText New value for property <code>noDataText</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setNoDataText(sNoDataText: string): PlanningCalendar;
		/**
		 * Sets a new value for property <code>showEmptyIntervalHeaders</code>.
		 * 
		 * If set, interval headers are shown even if no <code>intervalHeaders</code> are assigned to the visible time frame.
		 * 
		 * If not set, no interval headers are shown if no <code>intervalHeaders</code> are assigned.
		 * 
		 * <b>Note:</b> This property is only used if <code>showIntervalHeaders</code> is set to <code>true</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bShowEmptyIntervalHeaders New value for property <code>showEmptyIntervalHeaders</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowEmptyIntervalHeaders(bShowEmptyIntervalHeaders: boolean): PlanningCalendar;
		/**
		 * Sets a new value for property <code>showIntervalHeaders</code>.
		 * 
		 * If set, interval headers are shown like specified in <code>showEmptyIntervalHeaders</code>.
		 * 
		 * If not set, no interval headers are shown even if <code>intervalHeaders</code> are assigned.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bShowIntervalHeaders New value for property <code>showIntervalHeaders</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowIntervalHeaders(bShowIntervalHeaders: boolean): PlanningCalendar;
		/**
		 * Sets a new value for property <code>showRowHeaders</code>.
		 * 
		 * If set, headers of the <code>PlanningCalendarRows</code> are shown. This means the column with the headers is shown.
		 * 
		 * If not set, the header column is not shown at all, even if header information is provided.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bShowRowHeaders New value for property <code>showRowHeaders</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowRowHeaders(bShowRowHeaders: boolean): PlanningCalendar;
		/**
		 * Sets a new value for property <code>singleSelection</code>.
		 * 
		 * If set, only a single row can be selected
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bSingleSelection New value for property <code>singleSelection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setSingleSelection(bSingleSelection: boolean): PlanningCalendar;
		/**
		 * Sets a new value for property <code>startDate</code>.
		 * 
		 * Start date of the row, as JavaScript date object. As a default the current date is used.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param oStartDate New value for property <code>startDate</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setStartDate(oStartDate: any): PlanningCalendar;
		/**
		 * Sets a new value for property <code>viewKey</code>.
		 * 
		 * Key of the <code>PlanningCalendarView</code> used for the output. The default value uses a default view.
		 * If you are using own views, the keys of these views must be used instead.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>sap.ui.unified.CalendarIntervalType.Hour</code>.
		 * @param sViewKey New value for property <code>viewKey</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setViewKey(sViewKey: string): PlanningCalendar;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Width of the <code>PlanningCalendar</code>
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): PlanningCalendar;
	}

	class PlanningCalendarRow extends sap.ui.core.Element {
		/**
		 * Constructor for a new <code>PlanningCalendarRow</code>.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.PlanningCalendarRowMetadata);
		/**
		 * Constructor for a new <code>PlanningCalendarRow</code>.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some appointment to the aggregation <code>appointments</code>.
		 * @param oAppointment the appointment to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAppointment(oAppointment: sap.ui.unified.CalendarAppointment): PlanningCalendarRow;
		/**
		 * Adds some intervalHeader to the aggregation <code>intervalHeaders</code>.
		 * @param oIntervalHeader the intervalHeader to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addIntervalHeader(oIntervalHeader: sap.ui.unified.CalendarAppointment): PlanningCalendarRow;
		/**
		 * Destroys all the appointments in the aggregation <code>appointments</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyAppointments(): PlanningCalendarRow;
		/**
		 * Destroys all the intervalHeaders in the aggregation <code>intervalHeaders</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyIntervalHeaders(): PlanningCalendarRow;
		/**
		 * Creates a new subclass of class sap.m.PlanningCalendarRow with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|PlanningCalendarRowMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Gets content of aggregation <code>appointments</code>.
		 * 
		 * Appointments to be displayed in the row. Appointments outside the visible time frame are not rendered.
		 * 
		 * <b>Note:</b> For performance reasons only appointments in the visible time range or nearby should be assigned.
		 * @return 
		 */
		getAppointments(): sap.ui.unified.CalendarAppointment[];
		/**
		 * Gets current value of property <code>icon</code>.
		 * 
		 * Icon of the header (e.g. picture of the person)
		 * 
		 * URI of an image or an icon registered in sap.ui.core.IconPool.
		 * @return Value of property <code>icon</code>
		 */
		getIcon(): sap.ui.core.URI;
		/**
		 * Gets content of aggregation <code>intervalHeaders</code>.
		 * 
		 * Appointments to be displayed in the top of the intervals. The <code>intervalHeaders</code> are used to visualize
		 * public holidays and similar things.
		 * 
		 * Appointments outside the visible time frame are not rendered.
		 * 
		 * The <code>intervalHeaders</code> always fill whole intervals. If they are shorter than one interval they are not displayed.
		 * 
		 * <b>Note:</b> For performance reasons only appointments in the visible time range or nearby should be assigned.
		 * @return 
		 */
		getIntervalHeaders(): sap.ui.unified.CalendarAppointment[];
		/**
		 * Gets current value of property <code>key</code>.
		 * 
		 * Can be used as an identifier of the row
		 * @return Value of property <code>key</code>
		 */
		getKey(): string;
		/**
		 * Gets current value of property <code>nonWorkingDays</code>.
		 * 
		 * If set, the provided weekdays are displayed as non-working days.
		 * Valid values inside the array are 0 to 6. (other values will just be ignored.)
		 * 
		 * If not set, the weekend defined in the locale settings is displayed as non-working days.
		 * 
		 * <b>Note:</b> The non-working days are only visualized if <code>intervalType</code> is set to day.
		 * @return Value of property <code>nonWorkingDays</code>
		 */
		getNonWorkingDays(): number[];
		/**
		 * Gets current value of property <code>nonWorkingHours</code>.
		 * 
		 * If set, the provided hours are displayed as non-working hours.
		 * Valid values inside the array are 0 to 23. (other values will just be ignored.)
		 * 
		 * <b>Note:</b> The non-working hours are only visualized if <code>intervalType</code> is set to hour.
		 * @return Value of property <code>nonWorkingHours</code>
		 */
		getNonWorkingHours(): number[];
		/**
		 * Gets current value of property <code>selected</code>.
		 * 
		 * Defines the selected state of the <code>PlanningCalendarRow</code>.
		 * <b>Note:</b> Binding the <code>selected</code> property in single selection modes may cause unwanted results if you have more than one selected row in your binding.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>selected</code>
		 */
		getSelected(): boolean;
		/**
		 * Gets current value of property <code>text</code>.
		 * 
		 * Text of the header (e.g. department of the person)
		 * @return Value of property <code>text</code>
		 */
		getText(): string;
		/**
		 * Gets current value of property <code>title</code>.
		 * 
		 * Title of the header (e.g. name of the person)
		 * @return Value of property <code>title</code>
		 */
		getTitle(): string;
		/**
		 * Checks for the provided <code>sap.ui.unified.CalendarAppointment</code> in the aggregation <code>appointments</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oAppointment The appointment whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfAppointment(oAppointment: sap.ui.unified.CalendarAppointment): number;
		/**
		 * Checks for the provided <code>sap.ui.unified.CalendarAppointment</code> in the aggregation <code>intervalHeaders</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oIntervalHeader The intervalHeader whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfIntervalHeader(oIntervalHeader: sap.ui.unified.CalendarAppointment): number;
		/**
		 * Inserts a appointment into the aggregation <code>appointments</code>.
		 * @param oAppointment the appointment to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the appointment should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the appointment is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the appointment is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertAppointment(oAppointment: sap.ui.unified.CalendarAppointment, iIndex: number): PlanningCalendarRow;
		/**
		 * Inserts a intervalHeader into the aggregation <code>intervalHeaders</code>.
		 * @param oIntervalHeader the intervalHeader to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the intervalHeader should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the intervalHeader is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the intervalHeader is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertIntervalHeader(oIntervalHeader: sap.ui.unified.CalendarAppointment, iIndex: number): PlanningCalendarRow;
		/**
		 * Removes all the controls from the aggregation <code>appointments</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAppointments(): sap.ui.unified.CalendarAppointment[];
		/**
		 * Removes all the controls from the aggregation <code>intervalHeaders</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllIntervalHeaders(): sap.ui.unified.CalendarAppointment[];
		/**
		 * Removes a appointment from the aggregation <code>appointments</code>.
		 * @param vAppointment The appointment to remove or its index or id
		 * @return The removed appointment or <code>null</code>
		 */
		removeAppointment(vAppointment: number|string|sap.ui.unified.CalendarAppointment): sap.ui.unified.CalendarAppointment;
		/**
		 * Removes a intervalHeader from the aggregation <code>intervalHeaders</code>.
		 * @param vIntervalHeader The intervalHeader to remove or its index or id
		 * @return The removed intervalHeader or <code>null</code>
		 */
		removeIntervalHeader(vIntervalHeader: number|string|sap.ui.unified.CalendarAppointment): sap.ui.unified.CalendarAppointment;
		/**
		 * Sets a new value for property <code>icon</code>.
		 * 
		 * Icon of the header (e.g. picture of the person)
		 * 
		 * URI of an image or an icon registered in sap.ui.core.IconPool.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sIcon New value for property <code>icon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIcon(sIcon: sap.ui.core.URI): PlanningCalendarRow;
		/**
		 * Sets a new value for property <code>key</code>.
		 * 
		 * Can be used as an identifier of the row
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sKey New value for property <code>key</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setKey(sKey: string): PlanningCalendarRow;
		/**
		 * Sets a new value for property <code>nonWorkingDays</code>.
		 * 
		 * If set, the provided weekdays are displayed as non-working days.
		 * Valid values inside the array are 0 to 6. (other values will just be ignored.)
		 * 
		 * If not set, the weekend defined in the locale settings is displayed as non-working days.
		 * 
		 * <b>Note:</b> The non-working days are only visualized if <code>intervalType</code> is set to day.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sNonWorkingDays New value for property <code>nonWorkingDays</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setNonWorkingDays(sNonWorkingDays: number[]): PlanningCalendarRow;
		/**
		 * Sets a new value for property <code>nonWorkingHours</code>.
		 * 
		 * If set, the provided hours are displayed as non-working hours.
		 * Valid values inside the array are 0 to 23. (other values will just be ignored.)
		 * 
		 * <b>Note:</b> The non-working hours are only visualized if <code>intervalType</code> is set to hour.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sNonWorkingHours New value for property <code>nonWorkingHours</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setNonWorkingHours(sNonWorkingHours: number[]): PlanningCalendarRow;
		/**
		 * Sets a new value for property <code>selected</code>.
		 * 
		 * Defines the selected state of the <code>PlanningCalendarRow</code>.
		 * <b>Note:</b> Binding the <code>selected</code> property in single selection modes may cause unwanted results if you have more than one selected row in your binding.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bSelected New value for property <code>selected</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setSelected(bSelected: boolean): PlanningCalendarRow;
		/**
		 * Sets a new value for property <code>text</code>.
		 * 
		 * Text of the header (e.g. department of the person)
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sText New value for property <code>text</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setText(sText: string): PlanningCalendarRow;
		/**
		 * Sets a new value for property <code>title</code>.
		 * 
		 * Title of the header (e.g. name of the person)
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sTitle New value for property <code>title</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTitle(sTitle: string): PlanningCalendarRow;
	}

	class PlanningCalendarView extends sap.ui.core.Element {
		/**
		 * Constructor for a new <code>PlanningCalendarView</code>.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.PlanningCalendarViewMetadata);
		/**
		 * Constructor for a new <code>PlanningCalendarView</code>.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.PlanningCalendarView with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|PlanningCalendarViewMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>description</code>.
		 * 
		 * Description of the <code>PlanningCalendarView</code>
		 * @return Value of property <code>description</code>
		 */
		getDescription(): string;
		/**
		 * Gets current value of property <code>intervalsL</code>.
		 * 
		 * Number of intervals (defined with <code>intervalType</code>) that are displayed on large size (desktop)
		 * 
		 * <b>Note:</b> It is not only the screen size which is used to determine the available space, the size of the <code>PlanningCalendar</code> is used as well.
		 * 
		 * Default value is <code>12</code>.
		 * @return Value of property <code>intervalsL</code>
		 */
		getIntervalsL(): number;
		/**
		 * Gets current value of property <code>intervalsM</code>.
		 * 
		 * Number of intervals (defined with <code>intervalType</code>) that are displayed on medium size (tablet)
		 * 
		 * <b>Note:</b> It is not only the screen size which is used to determine the available space, the size of the <code>PlanningCalendar</code> is used as well.
		 * 
		 * Default value is <code>8</code>.
		 * @return Value of property <code>intervalsM</code>
		 */
		getIntervalsM(): number;
		/**
		 * Gets current value of property <code>intervalsS</code>.
		 * 
		 * Number of intervals (defined with <code>intervalType</code>) that are displayed on small size (phones).
		 * 
		 * <b>Note:</b> It is not only the screen size which is used to determine the available space, the size of the <code>PlanningCalendar</code> is used as well.
		 * 
		 * Default value is <code>6</code>.
		 * @return Value of property <code>intervalsS</code>
		 */
		getIntervalsS(): number;
		/**
		 * Gets current value of property <code>intervalType</code>.
		 * 
		 * Type of the intervals of the row. Default is Hour.
		 * 
		 * Default value is <code>Hour</code>.
		 * @return Value of property <code>intervalType</code>
		 */
		getIntervalType(): sap.ui.unified.CalendarIntervalType;
		/**
		 * Gets current value of property <code>key</code>.
		 * 
		 * Key of the view. This must be set to identify the used view in the <code>PlanningCalendar</code>
		 * @return Value of property <code>key</code>
		 */
		getKey(): string;
		/**
		 * Gets current value of property <code>showSubIntervals</code>.
		 * 
		 * If set subintervals are shown.
		 * 
		 * If the interval type is <code>Hour</code>, quarter hours are shown.
		 * 
		 * If the interval type is <code>Day</code>, hours are shown.
		 * 
		 * If the interval type is <code>Month</code>, days are shown.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>showSubIntervals</code>
		 */
		getShowSubIntervals(): boolean;
		/**
		 * Sets a new value for property <code>description</code>.
		 * 
		 * Description of the <code>PlanningCalendarView</code>
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sDescription New value for property <code>description</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDescription(sDescription: string): PlanningCalendarView;
		/**
		 * Sets a new value for property <code>intervalsL</code>.
		 * 
		 * Number of intervals (defined with <code>intervalType</code>) that are displayed on large size (desktop)
		 * 
		 * <b>Note:</b> It is not only the screen size which is used to determine the available space, the size of the <code>PlanningCalendar</code> is used as well.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>12</code>.
		 * @param iIntervalsL New value for property <code>intervalsL</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIntervalsL(iIntervalsL: number): PlanningCalendarView;
		/**
		 * Sets a new value for property <code>intervalsM</code>.
		 * 
		 * Number of intervals (defined with <code>intervalType</code>) that are displayed on medium size (tablet)
		 * 
		 * <b>Note:</b> It is not only the screen size which is used to determine the available space, the size of the <code>PlanningCalendar</code> is used as well.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>8</code>.
		 * @param iIntervalsM New value for property <code>intervalsM</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIntervalsM(iIntervalsM: number): PlanningCalendarView;
		/**
		 * Sets a new value for property <code>intervalsS</code>.
		 * 
		 * Number of intervals (defined with <code>intervalType</code>) that are displayed on small size (phones).
		 * 
		 * <b>Note:</b> It is not only the screen size which is used to determine the available space, the size of the <code>PlanningCalendar</code> is used as well.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>6</code>.
		 * @param iIntervalsS New value for property <code>intervalsS</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIntervalsS(iIntervalsS: number): PlanningCalendarView;
		/**
		 * Sets a new value for property <code>intervalType</code>.
		 * 
		 * Type of the intervals of the row. Default is Hour.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Hour</code>.
		 * @param sIntervalType New value for property <code>intervalType</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIntervalType(sIntervalType: sap.ui.unified.CalendarIntervalType): PlanningCalendarView;
		/**
		 * Sets a new value for property <code>key</code>.
		 * 
		 * Key of the view. This must be set to identify the used view in the <code>PlanningCalendar</code>
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sKey New value for property <code>key</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setKey(sKey: string): PlanningCalendarView;
		/**
		 * Sets a new value for property <code>showSubIntervals</code>.
		 * 
		 * If set subintervals are shown.
		 * 
		 * If the interval type is <code>Hour</code>, quarter hours are shown.
		 * 
		 * If the interval type is <code>Day</code>, hours are shown.
		 * 
		 * If the interval type is <code>Month</code>, days are shown.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bShowSubIntervals New value for property <code>showSubIntervals</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowSubIntervals(bShowSubIntervals: boolean): PlanningCalendarView;
	}

	class PopinDisplay {
		/**
		 * Inside the table popin, header is displayed at the first line and cell content is displayed at the next line.
		 */
		static Block: string;
		/**
		 * Inside the table popin, cell content is displayed next to the header in the same line. Note: If there is not enough space for the cell content then it jumps to the next line.
		 */
		static Inline: string;
		/**
		 * Inside the table popin, only the cell content will be visible.
		 */
		static WithoutHeader: string;
	}

	class Popover extends sap.ui.core.Control {
		/**
		 * Constructor for a new Popover.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.PopoverMetadata);
		/**
		 * Constructor for a new Popover.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Hook called after adjusment of the Popover position.
		 */
		_afterAdjustPositionAndArrowHook();
		/**
		 * If customHeader is set, this will return the customHeaer. Otherwise it creates a header and put the
		 * title and buttons if needed inside, and finally return this newly create header.
		 */
		_getAnyHeader();
		/**
		 * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID|sap.ui.core.Control): Popover;
		/**
		 * Adds some content to the aggregation <code>content</code>.
		 * @param oContent the content to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addContent(oContent: sap.ui.core.Control): Popover;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>afterClose</code> event of this <code>sap.m.Popover</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Popover</code> itself.
		 * 
		 * This event will be fired after the popover is closed.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachAfterClose(oData: any, fnFunction: any, oListener?: any): Popover;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>afterOpen</code> event of this <code>sap.m.Popover</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Popover</code> itself.
		 * 
		 * This event will be fired after the popover is opened.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachAfterOpen(oData: any, fnFunction: any, oListener?: any): Popover;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>beforeClose</code> event of this <code>sap.m.Popover</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Popover</code> itself.
		 * 
		 * This event will be fired before the popover is closed.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachBeforeClose(oData: any, fnFunction: any, oListener?: any): Popover;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>beforeOpen</code> event of this <code>sap.m.Popover</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Popover</code> itself.
		 * 
		 * This event will be fired before the popover is opened.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachBeforeOpen(oData: any, fnFunction: any, oListener?: any): Popover;
		/**
		 * Closes the popover when it's already opened.
		 * @return Reference to the control instance for chaining
		 */
		close(): Popover;
		/**
		 * Destroys the beginButton in the aggregation <code>beginButton</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyBeginButton(): Popover;
		/**
		 * Destroys all the content in the aggregation <code>content</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyContent(): Popover;
		/**
		 * Destroys the customHeader in the aggregation <code>customHeader</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyCustomHeader(): Popover;
		/**
		 * Destroys the endButton in the aggregation <code>endButton</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyEndButton(): Popover;
		/**
		 * Destroys the footer in the aggregation <code>footer</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyFooter(): Popover;
		/**
		 * Destroys the subHeader in the aggregation <code>subHeader</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroySubHeader(): Popover;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>afterClose</code> event of this <code>sap.m.Popover</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachAfterClose(fnFunction: any, oListener: any): Popover;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>afterOpen</code> event of this <code>sap.m.Popover</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachAfterOpen(fnFunction: any, oListener: any): Popover;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>beforeClose</code> event of this <code>sap.m.Popover</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachBeforeClose(fnFunction: any, oListener: any): Popover;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>beforeOpen</code> event of this <code>sap.m.Popover</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachBeforeOpen(fnFunction: any, oListener: any): Popover;
		/**
		 * Creates a new subclass of class sap.m.Popover with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|PopoverMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>afterClose</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>openBy</code> of type <code>sap.ui.core.Control</code>This refers to the control which opens the popover.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireAfterClose(mArguments?: any): Popover;
		/**
		 * Fires event <code>afterOpen</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>openBy</code> of type <code>sap.ui.core.Control</code>This refers to the control which opens the popover.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireAfterOpen(mArguments?: any): Popover;
		/**
		 * Fires event <code>beforeClose</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>openBy</code> of type <code>sap.ui.core.Control</code>This refers to the control which opens the popover.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireBeforeClose(mArguments?: any): Popover;
		/**
		 * Fires event <code>beforeOpen</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>openBy</code> of type <code>sap.ui.core.Control</code>This refers to the control which opens the popover.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireBeforeOpen(mArguments?: any): Popover;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaDescribedBy</code>.
		 * @return 
		 */
		getAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Gets content of aggregation <code>beginButton</code>.
		 * 
		 * BeginButton is shown at the left side (right side in RTL mode) inside the header. When showHeader is set to false, the property is ignored.
		 * @return 
		 */
		getBeginButton(): sap.ui.core.Control;
		/**
		 * Gets content of aggregation <code>content</code>.
		 * 
		 * The content inside the popover.
		 * @return 
		 */
		getContent(): sap.ui.core.Control[];
		/**
		 * Gets current value of property <code>contentHeight</code>.
		 * 
		 * Set the height of the content area inside Popover. When controls which adapt their size to the parent control are added directly into Popover, for example sap.m.Page control, a size needs to be specified to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the right way. This values isn't necessary for controls added to Popover directly which can decide their size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent control.
		 * @return Value of property <code>contentHeight</code>
		 */
		getContentHeight(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>contentMinWidth</code>.
		 * 
		 * Sets the minimum width of the content area inside popover.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>contentMinWidth</code>
		 */
		getContentMinWidth(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>contentWidth</code>.
		 * 
		 * Set the width of the content area inside Popover. When controls which adapt their size to the parent control are added directly into Popover, for example sap.m.Page control, a size needs to be specified to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the right way. This values isn't necessary for controls added to Popover directly which can decide their size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent control.
		 * @return Value of property <code>contentWidth</code>
		 */
		getContentWidth(): sap.ui.core.CSSSize;
		/**
		 * Gets content of aggregation <code>customHeader</code>.
		 * 
		 * Any control that needed to be displayed in the header area. When this is set, the showHeader property is ignored, and only this customHeader is shown on the top of popover.
		 * @return 
		 */
		getCustomHeader(): sap.ui.core.Control;
		/**
		 * Gets content of aggregation <code>endButton</code>.
		 * 
		 * EndButton is always shown at the right side (left side in RTL mode) inside the header. When showHeader is set to false, the property is ignored.
		 * @return 
		 */
		getEndButton(): sap.ui.core.Control;
		/**
		 * Gets content of aggregation <code>footer</code>.
		 * 
		 * This is optional footer which is shown on the bottom of the popover.
		 * @return 
		 */
		getFooter(): sap.ui.core.Control;
		/**
		 * Gets current value of property <code>horizontalScrolling</code>.
		 * 
		 * This property indicates if user can scroll horizontally inside popover when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be set to false to disable the scrolling in popover in order to make the scrolling in the child control work properly.
		 * Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>horizontalScrolling</code>
		 */
		getHorizontalScrolling(): boolean;
		/**
		 * ID of the element which is the current target of the association <code>initialFocus</code>, or <code>null</code>.
		 * @return 
		 */
		getInitialFocus(): sap.ui.core.ID;
		/**
		 * Gets current value of property <code>modal</code>.
		 * 
		 * If the popover will not be closed when tapping outside the popover. It also blocks any interaction with the background. The default value is false.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>modal</code>
		 */
		getModal(): boolean;
		/**
		 * Gets current value of property <code>offsetX</code>.
		 * 
		 * The offset for the popover placement in the x axis. It's with unit pixel.
		 * 
		 * Default value is <code>0</code>.
		 * @return Value of property <code>offsetX</code>
		 */
		getOffsetX(): number;
		/**
		 * Gets current value of property <code>offsetY</code>.
		 * 
		 * The offset for the popover placement in the y axis. It's with unit pixel.
		 * 
		 * Default value is <code>0</code>.
		 * @return Value of property <code>offsetY</code>
		 */
		getOffsetY(): number;
		/**
		 * Gets current value of property <code>placement</code>.
		 * 
		 * This is the information about on which side will the popover be placed at. Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right, sap.m.PlacementType.Top, sap.m.PlacementType.Bottom, sap.m.PlacementType.Horizontal, sap.m.PlacementType.HorizontalPreferredLeft, sap.m.PlacementType.HorizontalPreferredRight, sap.m.PlacementType.Vertical, sap.m.PlacementType.VerticalPreferredTop, sap.m.PlacementType.VerticalPreferredBottom, sap.m.PlacementType.Auto. The default value is sap.m.PlacementType.Right. Setting this property while popover is open won't cause any rerendering of the popover, but it will take effect when it's opened again.
		 * 
		 * Default value is <code>Right</code>.
		 * @return Value of property <code>placement</code>
		 */
		getPlacement(): PlacementType;
		/**
		 * Gets current value of property <code>resizable</code>.
		 * 
		 * Whether resize option is enabled.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>resizable</code>
		 */
		getResizable(): boolean;
		/**
		 * Gets current value of property <code>showArrow</code>.
		 * 
		 * Whether Popover arrow should be visible
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>showArrow</code>
		 */
		getShowArrow(): boolean;
		/**
		 * Gets current value of property <code>showHeader</code>.
		 * 
		 * If a header should be shown at the top of the popover.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>showHeader</code>
		 */
		getShowHeader(): boolean;
		/**
		 * Gets content of aggregation <code>subHeader</code>.
		 * 
		 * When subHeader is assigned to Popover, it's rendered directly after the main header if there is, or at the beginning of Popover when there's no main header. SubHeader is out of the content area and won't be scrolled when content's size is bigger than the content area's size.
		 * @return 
		 */
		getSubHeader(): sap.ui.core.Control;
		/**
		 * Gets current value of property <code>title</code>.
		 * 
		 * Title text appears in the header. This property will be ignored when showHeader is set to false.
		 * @return Value of property <code>title</code>
		 */
		getTitle(): string;
		/**
		 * Gets current value of property <code>verticalScrolling</code>.
		 * 
		 * This property indicates if user can scroll vertically inside popover when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be set to false to disable the scrolling in popover in order to make the scrolling in the child control work properly.
		 * Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>verticalScrolling</code>
		 */
		getVerticalScrolling(): boolean;
		/**
		 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oContent The content whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfContent(oContent: sap.ui.core.Control): number;
		/**
		 * Inserts a content into the aggregation <code>content</code>.
		 * @param oContent the content to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the content should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the content is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertContent(oContent: sap.ui.core.Control, iIndex: number): Popover;
		/**
		 * The method checks if the Popover is open. It returns true when the Popover is currently open (this includes opening and closing animations), otherwise it returns false.
		 * @return whether the Popover is currently opened
		 */
		isOpen(): boolean;
		/**
		 * Opens the Popover and set the Popover position according to the {@link #getPlacement() placement} property around the <code>oControl</code> parameter.
		 * @param oControl This is the control to which the Popover will be placed. It can be not only a UI5 control, but also an existing DOM reference. The side of the placement depends on the placement property set in the Popover.
		 * @param bSkipInstanceManager 
		 * @return Reference to the control instance for chaining
		 */
		openBy(oControl: any, bSkipInstanceManager: boolean): Popover;
		/**
		 * Calculate outerHeight of the element; used as hook for SVG elements
		 * @param oElement An Element for which outerHeight will be calculated.
		 * @param bIncludeMargin Determines if the margins should be included in the calculated outerHeight. Default value is false.
		 */
		outerHeight(oElement: any, bIncludeMargin: boolean);
		/**
		 * Calculate outerWidth of the element; used as hook for SVG elements
		 * @param oElement An Element for which outerWidth will be calculated.
		 * @param bIncludeMargin Determines if the margins should be included in the calculated outerWidth. Default value is false.
		 */
		outerWidth(oElement: any, bIncludeMargin: boolean);
		/**
		 * Removes all the controls in the association named <code>ariaDescribedBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Removes all the controls from the aggregation <code>content</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllContent(): sap.ui.core.Control[];
		/**
		 * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
		 * @return The removed ariaDescribedBy or <code>null</code>
		 */
		removeAriaDescribedBy(vAriaDescribedBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Removes a content from the aggregation <code>content</code>.
		 * @param vContent The content to remove or its index or id
		 * @return The removed content or <code>null</code>
		 */
		removeContent(vContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
		/**
		 * Sets the aggregated <code>beginButton</code>.
		 * @param oBeginButton The beginButton to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setBeginButton(oBeginButton: sap.ui.core.Control): Popover;
		/**
		 * Setter for property <code>bounce</code>.
		 * 
		 * Default value is empty
		 * @param bBounce New value for property <code>bounce</code>
		 * @return Reference to the control instance for chaining
		 */
		setBounce(bBounce: boolean): Popover;
		/**
		 * Sets a new value for property <code>contentHeight</code>.
		 * 
		 * Set the height of the content area inside Popover. When controls which adapt their size to the parent control are added directly into Popover, for example sap.m.Page control, a size needs to be specified to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the right way. This values isn't necessary for controls added to Popover directly which can decide their size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent control.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sContentHeight New value for property <code>contentHeight</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setContentHeight(sContentHeight: sap.ui.core.CSSSize): Popover;
		/**
		 * Sets a new value for property <code>contentMinWidth</code>.
		 * 
		 * Sets the minimum width of the content area inside popover.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sContentMinWidth New value for property <code>contentMinWidth</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setContentMinWidth(sContentMinWidth: sap.ui.core.CSSSize): Popover;
		/**
		 * Sets a new value for property <code>contentWidth</code>.
		 * 
		 * Set the width of the content area inside Popover. When controls which adapt their size to the parent control are added directly into Popover, for example sap.m.Page control, a size needs to be specified to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the right way. This values isn't necessary for controls added to Popover directly which can decide their size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent control.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sContentWidth New value for property <code>contentWidth</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setContentWidth(sContentWidth: sap.ui.core.CSSSize): Popover;
		/**
		 * Sets the aggregated <code>customHeader</code>.
		 * @param oCustomHeader The customHeader to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setCustomHeader(oCustomHeader: sap.ui.core.Control): Popover;
		/**
		 * Sets the aggregated <code>endButton</code>.
		 * @param oEndButton The endButton to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setEndButton(oEndButton: sap.ui.core.Control): Popover;
		/**
		 * The followOf feature closes the Popover when the position of the control that opened the Popover changes by at least  32 pixels (on desktop browsers). This may lead to unwanted closing of the Popover.
		 * 
		 * This function is for enabling/disabling the followOf feature.
		 * @param bValue Enables the followOf feature
		 * @return Reference to the control instance for chaining
		 */
		setFollowOf(bValue: boolean): Popover;
		/**
		 * Sets the aggregated <code>footer</code>.
		 * @param oFooter The footer to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setFooter(oFooter: sap.ui.core.Control): Popover;
		/**
		 * Sets a new value for property <code>horizontalScrolling</code>.
		 * 
		 * This property indicates if user can scroll horizontally inside popover when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be set to false to disable the scrolling in popover in order to make the scrolling in the child control work properly.
		 * Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bHorizontalScrolling New value for property <code>horizontalScrolling</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHorizontalScrolling(bHorizontalScrolling: boolean): Popover;
		/**
		 * Sets the associated <code>initialFocus</code>.
		 * @param oInitialFocus ID of an element which becomes the new target of this initialFocus association; alternatively, an element instance may be given
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setInitialFocus(oInitialFocus: sap.ui.core.ID|sap.ui.core.Control): Popover;
		/**
		 * Setter for property <code>modal</code>.
		 * This overwrites the default setter of the property <code>modal</code> to avoid rerendering the whole popover control.
		 * 
		 * Default value is <code>false</code>
		 * @param bModal New value for property <code>modal</code>.
		 * @param sModalCSSClass A CSS class (or space-separated list of classes) that should be added to the block layer.(optional)
		 * @return Reference to the control instance for chaining
		 */
		setModal(bModal: boolean, sModalCSSClass?: string): Popover;
		/**
		 * Sets a new value for property <code>offsetX</code>.
		 * 
		 * The offset for the popover placement in the x axis. It's with unit pixel.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>0</code>.
		 * @param iOffsetX New value for property <code>offsetX</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setOffsetX(iOffsetX: number): Popover;
		/**
		 * Sets a new value for property <code>offsetY</code>.
		 * 
		 * The offset for the popover placement in the y axis. It's with unit pixel.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>0</code>.
		 * @param iOffsetY New value for property <code>offsetY</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setOffsetY(iOffsetY: number): Popover;
		/**
		 * Set the placement of the Popover.
		 * @param sPlacement The position of the Popover
		 * @return Reference to the control instance for chaining
		 */
		setPlacement(sPlacement: PlacementType): Popover;
		/**
		 * Sets a new value for property <code>resizable</code>.
		 * 
		 * Whether resize option is enabled.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bResizable New value for property <code>resizable</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setResizable(bResizable: boolean): Popover;
		/**
		 * Sets a new value for property <code>showArrow</code>.
		 * 
		 * Whether Popover arrow should be visible
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bShowArrow New value for property <code>showArrow</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowArrow(bShowArrow: boolean): Popover;
		/**
		 * Sets a new value for property <code>showHeader</code>.
		 * 
		 * If a header should be shown at the top of the popover.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bShowHeader New value for property <code>showHeader</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowHeader(bShowHeader: boolean): Popover;
		/**
		 * Sets the aggregated <code>subHeader</code>.
		 * @param oSubHeader The subHeader to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setSubHeader(oSubHeader: sap.ui.core.Control): Popover;
		/**
		 * The setter of the title property.
		 * 
		 * If you want to show a header in the popover, don't forget to set the
		 * {@link #setShowHeader showHeader} property to true.
		 * @param sTitle The title to be set
		 * @return Reference to the control instance for chaining
		 */
		setTitle(sTitle: string): Popover;
		/**
		 * Sets a new value for property <code>verticalScrolling</code>.
		 * 
		 * This property indicates if user can scroll vertically inside popover when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be set to false to disable the scrolling in popover in order to make the scrolling in the child control work properly.
		 * Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bVerticalScrolling New value for property <code>verticalScrolling</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setVerticalScrolling(bVerticalScrolling: boolean): Popover;
	}

	class ProgressIndicator extends sap.ui.core.Control {
		/**
		 * Constructor for a new ProgressIndicator.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.ProgressIndicatorMetadata);
		/**
		 * Constructor for a new ProgressIndicator.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.ProgressIndicator with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ProgressIndicatorMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * 
		 */
		getAccessibilityInfo();
		/**
		 * This function (if available on the concrete control) provides
		 * the current accessibility state of the control.
		 * 
		 * Applications must not call this hook method directly, it is called by the framework.
		 * 
		 * Subclasses of Control should implement this hook to provide any necessary accessibility information:
		 * 
		 * <pre>
		 * MyControl.prototype.getAccessibilityInfo = function() {
		 *    return {
		 *      role: "textbox",      // String which represents the WAI-ARIA role which is implemented by the control.
		 *      type: "date input",   // String which represents the control type (Must be a translated text). Might correlate with
		 *                            // the role.
		 *      description: "value", // String which describes the most relevant control state (e.g. the inputs value). Must be a
		 *                            // translated text.
		 *                            // Note: The type and the enabled/editable state must not be handled here.
		 *      focusable: true,      // Boolean which describes whether the control can get the focus.
		 *      enabled: true,        // Boolean which describes whether the control is enabled. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      editable: true,       // Boolean which describes whether the control is editable. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      children: []          // Array of accessibility info objects of children of the given control (e.g. when the control is a layout).
		 *                            // Note: Children should only be provided when it is helpful to understand the accessibility context
		 *                            //       (e.g. a form control must not provide details of its internals (fields, labels, ...) but a
		 *                            //       layout should).
		 *    };
		 * };
		 * </pre>
		 * 
		 * Note: The returned object provides the accessibility state of the control at the point in time when this function is called.
		 * @note Overload from base type sap.ui.core.Control
		 * @return Current accessibility state of the control.
		 */
		getAccessibilityInfo(): any;
		/**
		 * Gets current value of property <code>displayValue</code>.
		 * 
		 * Specifies the text value to be displayed in the bar.
		 * @return Value of property <code>displayValue</code>
		 */
		getDisplayValue(): string;
		/**
		 * Gets current value of property <code>enabled</code>.
		 * 
		 * Switches enabled state of the control. Disabled fields have different colors, and cannot be focused.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>enabled</code>
		 */
		getEnabled(): boolean;
		/**
		 * Gets current value of property <code>height</code>.
		 * 
		 * Specifies the height of the control. The default value depends on the theme. Suggested size for normal use is 2.5rem (40px). Suggested size for small size (like for use in ObjectHeader) is 1.375rem (22px).
		 * @return Value of property <code>height</code>
		 */
		getHeight(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>percentValue</code>.
		 * 
		 * Specifies the numerical value in percent for the length of the progress bar.
		 * 
		 * Default value is <code>0</code>.
		 * @return Value of property <code>percentValue</code>
		 */
		getPercentValue(): number;
		/**
		 * Gets current value of property <code>showValue</code>.
		 * 
		 * Indicates whether the displayValue should be shown in the ProgressIndicator.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>showValue</code>
		 */
		getShowValue(): boolean;
		/**
		 * Gets current value of property <code>state</code>.
		 * 
		 * Specifies the state of the bar. Enumeration sap.ui.core.ValueState provides Error (red), Warning (yellow), Success (green), None (blue) (default value).
		 * 
		 * Default value is <code>None</code>.
		 * @return Value of property <code>state</code>
		 */
		getState(): sap.ui.core.ValueState;
		/**
		 * Gets current value of property <code>textDirection</code>.
		 * 
		 * Specifies the element's text directionality with enumerated options (RTL or LTR). By default, the control inherits text direction from the DOM.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @return Value of property <code>textDirection</code>
		 */
		getTextDirection(): sap.ui.core.TextDirection;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Specifies the width of the control.
		 * 
		 * Default value is <code>100%</code>.
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Sets a new value for property <code>displayValue</code>.
		 * 
		 * Specifies the text value to be displayed in the bar.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sDisplayValue New value for property <code>displayValue</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDisplayValue(sDisplayValue: string): ProgressIndicator;
		/**
		 * Sets a new value for property <code>enabled</code>.
		 * 
		 * Switches enabled state of the control. Disabled fields have different colors, and cannot be focused.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bEnabled New value for property <code>enabled</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setEnabled(bEnabled: boolean): ProgressIndicator;
		/**
		 * Sets a new value for property <code>height</code>.
		 * 
		 * Specifies the height of the control. The default value depends on the theme. Suggested size for normal use is 2.5rem (40px). Suggested size for small size (like for use in ObjectHeader) is 1.375rem (22px).
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sHeight New value for property <code>height</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHeight(sHeight: sap.ui.core.CSSSize): ProgressIndicator;
		/**
		 * Sets a new value for property <code>percentValue</code>.
		 * 
		 * Specifies the numerical value in percent for the length of the progress bar.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>0</code>.
		 * @param fPercentValue New value for property <code>percentValue</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setPercentValue(fPercentValue: number): ProgressIndicator;
		/**
		 * Sets a new value for property <code>showValue</code>.
		 * 
		 * Indicates whether the displayValue should be shown in the ProgressIndicator.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bShowValue New value for property <code>showValue</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowValue(bShowValue: boolean): ProgressIndicator;
		/**
		 * Sets a new value for property <code>state</code>.
		 * 
		 * Specifies the state of the bar. Enumeration sap.ui.core.ValueState provides Error (red), Warning (yellow), Success (green), None (blue) (default value).
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>None</code>.
		 * @param sState New value for property <code>state</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setState(sState: sap.ui.core.ValueState): ProgressIndicator;
		/**
		 * Sets a new value for property <code>textDirection</code>.
		 * 
		 * Specifies the element's text directionality with enumerated options (RTL or LTR). By default, the control inherits text direction from the DOM.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @param sTextDirection New value for property <code>textDirection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTextDirection(sTextDirection: sap.ui.core.TextDirection): ProgressIndicator;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Specifies the width of the control.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>100%</code>.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): ProgressIndicator;
	}

	class PullToRefresh extends sap.ui.core.Control {
		/**
		 * Constructor for a new PullToRefresh.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.PullToRefreshMetadata);
		/**
		 * Constructor for a new PullToRefresh.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>refresh</code> event of this <code>sap.m.PullToRefresh</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.PullToRefresh</code> itself.
		 * 
		 * Event indicates that the user has requested new data
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.PullToRefresh</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachRefresh(oData: any, fnFunction: any, oListener?: any): PullToRefresh;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>refresh</code> event of this <code>sap.m.PullToRefresh</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachRefresh(fnFunction: any, oListener: any): PullToRefresh;
		/**
		 * Creates a new subclass of class sap.m.PullToRefresh with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|PullToRefreshMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>refresh</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireRefresh(mArguments?: any): PullToRefresh;
		/**
		 * Gets current value of property <code>customIcon</code>.
		 * 
		 * Provide a URI to a custom icon image to replace the SAP logo. Large images are scaled down to max 50px height.
		 * @return Value of property <code>customIcon</code>
		 */
		getCustomIcon(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>description</code>.
		 * 
		 * Optional description. May be used to inform a user, for example, when the list has been updated last time.
		 * @return Value of property <code>description</code>
		 */
		getDescription(): string;
		/**
		 * Gets current value of property <code>iconDensityAware</code>.
		 * 
		 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
		 * 
		 * If bandwidth is the key for the application, set this value to false.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>iconDensityAware</code>
		 */
		getIconDensityAware(): boolean;
		/**
		 * Gets current value of property <code>showIcon</code>.
		 * 
		 * Set to true to display an icon/logo. Icon must be set either in the customIcon property or in the CSS theme for the PullToRefresh control.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>showIcon</code>
		 */
		getShowIcon(): boolean;
		/**
		 * Hides the control and resets it to the normal state. In non-touch environments the control is not hidden.
		 */
		hide();
		/**
		 * Sets a new value for property <code>customIcon</code>.
		 * 
		 * Provide a URI to a custom icon image to replace the SAP logo. Large images are scaled down to max 50px height.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sCustomIcon New value for property <code>customIcon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setCustomIcon(sCustomIcon: sap.ui.core.URI): PullToRefresh;
		/**
		 * Sets a new value for property <code>description</code>.
		 * 
		 * Optional description. May be used to inform a user, for example, when the list has been updated last time.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sDescription New value for property <code>description</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDescription(sDescription: string): PullToRefresh;
		/**
		 * Sets a new value for property <code>iconDensityAware</code>.
		 * 
		 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
		 * 
		 * If bandwidth is the key for the application, set this value to false.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bIconDensityAware New value for property <code>iconDensityAware</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIconDensityAware(bIconDensityAware: boolean): PullToRefresh;
		/**
		 * Sets a new value for property <code>showIcon</code>.
		 * 
		 * Set to true to display an icon/logo. Icon must be set either in the customIcon property or in the CSS theme for the PullToRefresh control.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bShowIcon New value for property <code>showIcon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowIcon(bShowIcon: boolean): PullToRefresh;
	}

	class QuickView extends QuickViewBase {
		/**
		 * Constructor for a new QuickView.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.QuickViewMetadata);
		/**
		 * Constructor for a new QuickView.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>afterClose</code> event of this <code>sap.m.QuickView</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.QuickView</code> itself.
		 * 
		 * This event fires after the QuickView is closed.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.QuickView</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachAfterClose(oData: any, fnFunction: any, oListener?: any): QuickView;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>afterOpen</code> event of this <code>sap.m.QuickView</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.QuickView</code> itself.
		 * 
		 * This event fires after the QuickView is opened.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.QuickView</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachAfterOpen(oData: any, fnFunction: any, oListener?: any): QuickView;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>beforeClose</code> event of this <code>sap.m.QuickView</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.QuickView</code> itself.
		 * 
		 * This event fires before the QuickView is closed.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.QuickView</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachBeforeClose(oData: any, fnFunction: any, oListener?: any): QuickView;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>beforeOpen</code> event of this <code>sap.m.QuickView</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.QuickView</code> itself.
		 * 
		 * This event fires before the QuickView is opened.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.QuickView</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachBeforeOpen(oData: any, fnFunction: any, oListener?: any): QuickView;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>afterClose</code> event of this <code>sap.m.QuickView</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachAfterClose(fnFunction: any, oListener: any): QuickView;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>afterOpen</code> event of this <code>sap.m.QuickView</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachAfterOpen(fnFunction: any, oListener: any): QuickView;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>beforeClose</code> event of this <code>sap.m.QuickView</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachBeforeClose(fnFunction: any, oListener: any): QuickView;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>beforeOpen</code> event of this <code>sap.m.QuickView</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachBeforeOpen(fnFunction: any, oListener: any): QuickView;
		/**
		 * Creates a new subclass of class sap.m.QuickView with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.QuickViewBase.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|QuickViewMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.QuickViewBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.QuickViewBase
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|QuickViewBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>afterClose</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>openBy</code> of type <code>sap.ui.core.Control</code>This parameter refers to the control, which opens the QuickView.</li>
		 * <li><code>origin</code> of type <code>sap.m.Button</code>This parameter contains the control,
		 * which triggers the close of the QuickView.
		 * It is undefined when running on desktop or tablet.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireAfterClose(mArguments?: any): QuickView;
		/**
		 * Fires event <code>afterOpen</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>openBy</code> of type <code>sap.ui.core.Control</code>This parameter refers to the control, which opens the QuickView.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireAfterOpen(mArguments?: any): QuickView;
		/**
		 * Fires event <code>beforeClose</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>openBy</code> of type <code>sap.ui.core.Control</code>This parameter refers to the control, which opens the QuickView.</li>
		 * <li><code>origin</code> of type <code>sap.m.Button</code>This parameter contains the control,
		 * which triggers the close of the QuickView.
		 * It is undefined when running on desktop or tablet.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireBeforeClose(mArguments?: any): QuickView;
		/**
		 * Fires event <code>beforeOpen</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>openBy</code> of type <code>sap.ui.core.Control</code>This parameter refers to the control, which opens the QuickView.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireBeforeOpen(mArguments?: any): QuickView;
		/**
		 * Gets current value of property <code>placement</code>.
		 * 
		 * This property is reused from sap.m.Popover and only takes effect when running on desktop or tablet. Please refer the documentation of the placement property of sap.m.Popover.
		 * 
		 * Default value is <code>Right</code>.
		 * @return Value of property <code>placement</code>
		 */
		getPlacement(): PlacementType;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * The width of the QuickView. The property takes effect only when running on desktop or tablet.
		 * 
		 * Default value is <code>320px</code>.
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Opens the QuickView.
		 * @param oControl The control which opens the QuickView.
		 * @return Pointer to the control instance for chaining
		 */
		openBy(oControl: sap.ui.core.Control): QuickView;
		/**
		 * The method sets placement position of the QuickView.
		 * @param sPlacement The side from which the QuickView appears relative to the control that opens it.
		 * @return Pointer to the control instance for chaining.
		 */
		setPlacement(sPlacement: PlacementType): QuickView;
		/**
		 * The method sets the width of the QuickView.
		 * Works only on desktop or tablet.
		 * @param sWidth The new width of the QuickView.
		 * @return Pointer to the control instance for chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): QuickView;
	}

	class QuickViewBase extends sap.ui.core.Control {
		/**
		 * Constructor for a new QuickViewBase.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.QuickViewBaseMetadata);
		/**
		 * Constructor for a new QuickViewBase.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some page to the aggregation <code>pages</code>.
		 * @param oPage the page to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addPage(oPage: QuickViewPage): QuickViewBase;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>afterNavigate</code> event of this <code>sap.m.QuickViewBase</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.QuickViewBase</code> itself.
		 * 
		 * The event is fired when navigation between two pages has completed.
		 * In case of animated transitions this event is fired with some delay
		 * after the "navigate" event.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.QuickViewBase</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachAfterNavigate(oData: any, fnFunction: any, oListener?: any): QuickViewBase;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>navigate</code> event of this <code>sap.m.QuickViewBase</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.QuickViewBase</code> itself.
		 * 
		 * The event is fired when navigation between two pages has been triggered.
		 * The transition (if any) to the new page has not started yet.
		 * This event can be aborted by the application with preventDefault(),
		 * which means that there will be no navigation.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.QuickViewBase</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachNavigate(oData: any, fnFunction: any, oListener?: any): QuickViewBase;
		/**
		 * Binds aggregation <code>pages</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindPages(oBindingInfo: any): QuickViewBase;
		/**
		 * Destroys all the pages in the aggregation <code>pages</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyPages(): QuickViewBase;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>afterNavigate</code> event of this <code>sap.m.QuickViewBase</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachAfterNavigate(fnFunction: any, oListener: any): QuickViewBase;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>navigate</code> event of this <code>sap.m.QuickViewBase</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachNavigate(fnFunction: any, oListener: any): QuickViewBase;
		/**
		 * Creates a new subclass of class sap.m.QuickViewBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|QuickViewBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>afterNavigate</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>from</code> of type <code>sap.ui.core.Control</code>Determines the page, which has been displayed before navigation.</li>
		 * <li><code>fromId</code> of type <code>string</code>Determines the ID of the page, which has been displayed before navigation.</li>
		 * <li><code>to</code> of type <code>sap.ui.core.Control</code>Determines the page, which is now displayed after navigation.</li>
		 * <li><code>toId</code> of type <code>string</code>Determines the ID of the page, which is now displayed after navigation.</li>
		 * <li><code>firstTime</code> of type <code>boolean</code>Determines whether the "to" page (a control with the ID of the page, which has been navigated to) has not been displayed/navigated to before.</li>
		 * <li><code>isTo</code> of type <code>boolean</code>Determines whether this was a forward navigation.</li>
		 * <li><code>isBack</code> of type <code>boolean</code>Determines whether this was a back navigation.</li>
		 * <li><code>isBackToTop</code> of type <code>boolean</code>Determines whether this was a navigation to the root page.</li>
		 * <li><code>isBackToPage</code> of type <code>boolean</code>Determines whether this was a navigation to a specific page.</li>
		 * <li><code>direction</code> of type <code>string</code>Determines  how the navigation was triggered, possible values are
		 * "to", "back", "backToPage", and "backToTop".</li>
		 * <li><code>isTopPage</code> of type <code>boolean</code>Determines whether this is a navigation to the top page.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireAfterNavigate(mArguments?: any): QuickViewBase;
		/**
		 * Fires event <code>navigate</code> to attached listeners.
		 * 
		 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>from</code> of type <code>sap.ui.core.Control</code>The page which was displayed before the current navigation.</li>
		 * <li><code>fromId</code> of type <code>string</code>The ID of the page which was displayed before the current navigation.</li>
		 * <li><code>to</code> of type <code>sap.ui.core.Control</code>The page which will be displayed after the current navigation.</li>
		 * <li><code>toId</code> of type <code>string</code>The ID of the page which will be displayed after the current navigation.</li>
		 * <li><code>firstTime</code> of type <code>boolean</code>Determines whether the "to" page (a control with the ID of the page
		 * which is currently navigated to) has not been displayed/navigated to before.</li>
		 * <li><code>isTo</code> of type <code>boolean</code>Determines whether this is a forward navigation.</li>
		 * <li><code>isBack</code> of type <code>boolean</code>Determines whether this is a back navigation.</li>
		 * <li><code>isBackToTop</code> of type <code>boolean</code>Determines  whether this is a navigation to the root page.</li>
		 * <li><code>isBackToPage</code> of type <code>boolean</code>Determines whether this was a navigation to a specific page.</li>
		 * <li><code>direction</code> of type <code>string</code>Determines how the navigation was triggered, possible values are
		 * "to", "back", "backToPage", and "backToTop".</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Whether or not to prevent the default action
		 */
		fireNavigate(mArguments?: any): boolean;
		/**
		 * Gets content of aggregation <code>pages</code>.
		 * 
		 * Displays a page header, object icon or image, object name with short description,
		 * and object information divided in groups
		 * @return 
		 */
		getPages(): QuickViewPage[];
		/**
		 * Checks for the provided <code>sap.m.QuickViewPage</code> in the aggregation <code>pages</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oPage The page whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfPage(oPage: QuickViewPage): number;
		/**
		 * Inserts a page into the aggregation <code>pages</code>.
		 * @param oPage the page to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the page should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the page is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the page is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertPage(oPage: QuickViewPage, iIndex: number): QuickViewBase;
		/**
		 * Navigates to the previous page if there is such.
		 */
		navigateBack();
		/**
		 * Removes all the controls from the aggregation <code>pages</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllPages(): QuickViewPage[];
		/**
		 * Removes a page from the aggregation <code>pages</code>.
		 * @param vPage The page to remove or its index or id
		 * @return The removed page or <code>null</code>
		 */
		removePage(vPage: number|string|QuickViewPage): QuickViewPage;
		/**
		 * Unbinds aggregation <code>pages</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindPages(): QuickViewBase;
	}

	class QuickViewCard extends QuickViewBase {
		/**
		 * Constructor for a new QuickViewCard.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.QuickViewCardMetadata);
		/**
		 * Constructor for a new QuickViewCard.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.QuickViewCard with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.QuickViewBase.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|QuickViewCardMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.QuickViewBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.QuickViewBase
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|QuickViewBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>showVerticalScrollBar</code>.
		 * 
		 * Determines whether the browser displays the vertical scroll bar or simply cuts the content of the QuickViewCard.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>showVerticalScrollBar</code>
		 */
		getShowVerticalScrollBar(): boolean;
		/**
		 * Sets a new value for property <code>showVerticalScrollBar</code>.
		 * 
		 * Determines whether the browser displays the vertical scroll bar or simply cuts the content of the QuickViewCard.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bShowVerticalScrollBar New value for property <code>showVerticalScrollBar</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowVerticalScrollBar(bShowVerticalScrollBar: boolean): QuickViewCard;
	}

	class QuickViewGroup extends sap.ui.core.Element {
		/**
		 * Constructor for a new QuickViewGroup.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.QuickViewGroupMetadata);
		/**
		 * Constructor for a new QuickViewGroup.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some element to the aggregation <code>elements</code>.
		 * @param oElement the element to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addElement(oElement: QuickViewGroupElement): QuickViewGroup;
		/**
		 * Binds aggregation <code>elements</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindElements(oBindingInfo: any): QuickViewGroup;
		/**
		 * Destroys all the elements in the aggregation <code>elements</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyElements(): QuickViewGroup;
		/**
		 * Creates a new subclass of class sap.m.QuickViewGroup with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|QuickViewGroupMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Gets content of aggregation <code>elements</code>.
		 * 
		 * A combination of one label and another control (Link or Text) associated to this label.
		 * @return 
		 */
		getElements(): QuickViewGroupElement[];
		/**
		 * Gets current value of property <code>heading</code>.
		 * 
		 * The title of the group
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>heading</code>
		 */
		getHeading(): string;
		/**
		 * Gets current value of property <code>visible</code>.
		 * 
		 * Determines whether the group is visible on the screen.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>visible</code>
		 */
		getVisible(): boolean;
		/**
		 * Checks for the provided <code>sap.m.QuickViewGroupElement</code> in the aggregation <code>elements</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oElement The element whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfElement(oElement: QuickViewGroupElement): number;
		/**
		 * Inserts a element into the aggregation <code>elements</code>.
		 * @param oElement the element to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the element should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the element is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the element is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertElement(oElement: QuickViewGroupElement, iIndex: number): QuickViewGroup;
		/**
		 * Removes all the controls from the aggregation <code>elements</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllElements(): QuickViewGroupElement[];
		/**
		 * Removes a element from the aggregation <code>elements</code>.
		 * @param vElement The element to remove or its index or id
		 * @return The removed element or <code>null</code>
		 */
		removeElement(vElement: number|string|QuickViewGroupElement): QuickViewGroupElement;
		/**
		 * Sets a new value for property <code>heading</code>.
		 * 
		 * The title of the group
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sHeading New value for property <code>heading</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHeading(sHeading: string): QuickViewGroup;
		/**
		 * Sets a new value for property <code>visible</code>.
		 * 
		 * Determines whether the group is visible on the screen.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bVisible New value for property <code>visible</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setVisible(bVisible: boolean): QuickViewGroup;
		/**
		 * Unbinds aggregation <code>elements</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindElements(): QuickViewGroup;
	}

	class QuickViewGroupElement extends sap.ui.core.Element {
		/**
		 * Constructor for a new QuickViewGroupElement.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.QuickViewGroupElementMetadata);
		/**
		 * Constructor for a new QuickViewGroupElement.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.QuickViewGroupElement with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|QuickViewGroupElementMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>emailSubject</code>.
		 * 
		 * The subject of the email.
		 * Works only with QuickViewGroupElement of type email.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>emailSubject</code>
		 */
		getEmailSubject(): string;
		/**
		 * Gets current value of property <code>label</code>.
		 * 
		 * Specifies the text displayed below the associated label.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>label</code>
		 */
		getLabel(): string;
		/**
		 * Gets current value of property <code>pageLinkId</code>.
		 * 
		 * Specifies the ID of the QuickViewPage, which is opened from the link in the QuickViewGroupElement.
		 * Works only with QuickViewGroupElement of type pageLink.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>pageLinkId</code>
		 */
		getPageLinkId(): string;
		/**
		 * Gets current value of property <code>target</code>.
		 * 
		 * Specifies the target of the link – it works like the target property of the HTML <a> tag. Works only with QuickViewGroupElement of type link.
		 * 
		 * Default value is <code>_blank</code>.
		 * @return Value of property <code>target</code>
		 */
		getTarget(): string;
		/**
		 * Gets current value of property <code>type</code>.
		 * 
		 * Specifies the type of the displayed information – phone number, mobile number, e-mail, link, text or a link to another QuickViewPage. Default value is ‘text’.
		 * 
		 * Default value is <code>GroupElementType.text</code>.
		 * @return Value of property <code>type</code>
		 */
		getType(): QuickViewGroupElementType;
		/**
		 * Gets current value of property <code>url</code>.
		 * 
		 * Specifies the address of the QuickViewGroupElement link. Works only with QuickViewGroupElement of type link.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>url</code>
		 */
		getUrl(): string;
		/**
		 * Gets current value of property <code>value</code>.
		 * 
		 * Specifies the text of the control that associates with the label.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>value</code>
		 */
		getValue(): string;
		/**
		 * Gets current value of property <code>visible</code>.
		 * 
		 * Determines whether the element should be visible on the screen.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>visible</code>
		 */
		getVisible(): boolean;
		/**
		 * Sets a new value for property <code>emailSubject</code>.
		 * 
		 * The subject of the email.
		 * Works only with QuickViewGroupElement of type email.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sEmailSubject New value for property <code>emailSubject</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setEmailSubject(sEmailSubject: string): QuickViewGroupElement;
		/**
		 * Sets a new value for property <code>label</code>.
		 * 
		 * Specifies the text displayed below the associated label.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sLabel New value for property <code>label</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setLabel(sLabel: string): QuickViewGroupElement;
		/**
		 * Sets a new value for property <code>pageLinkId</code>.
		 * 
		 * Specifies the ID of the QuickViewPage, which is opened from the link in the QuickViewGroupElement.
		 * Works only with QuickViewGroupElement of type pageLink.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sPageLinkId New value for property <code>pageLinkId</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setPageLinkId(sPageLinkId: string): QuickViewGroupElement;
		/**
		 * Sets a new value for property <code>target</code>.
		 * 
		 * Specifies the target of the link – it works like the target property of the HTML <a> tag. Works only with QuickViewGroupElement of type link.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>_blank</code>.
		 * @param sTarget New value for property <code>target</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTarget(sTarget: string): QuickViewGroupElement;
		/**
		 * Sets a new value for property <code>type</code>.
		 * 
		 * Specifies the type of the displayed information – phone number, mobile number, e-mail, link, text or a link to another QuickViewPage. Default value is ‘text’.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>GroupElementType.text</code>.
		 * @param sType New value for property <code>type</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setType(sType: QuickViewGroupElementType): QuickViewGroupElement;
		/**
		 * Sets a new value for property <code>url</code>.
		 * 
		 * Specifies the address of the QuickViewGroupElement link. Works only with QuickViewGroupElement of type link.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sUrl New value for property <code>url</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setUrl(sUrl: string): QuickViewGroupElement;
		/**
		 * Sets a new value for property <code>value</code>.
		 * 
		 * Specifies the text of the control that associates with the label.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sValue New value for property <code>value</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setValue(sValue: string): QuickViewGroupElement;
		/**
		 * Sets a new value for property <code>visible</code>.
		 * 
		 * Determines whether the element should be visible on the screen.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bVisible New value for property <code>visible</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setVisible(bVisible: boolean): QuickViewGroupElement;
	}

	class QuickViewGroupElementType {
		/**
		 * Displays an e-mail link
		 */
		static email: string;
		/**
		 * Displayes a regular HTML link
		 */
		static link: string;
		/**
		 * Displays a phone number link for direct dialing and an icon for sending a text message
		 */
		static mobile: string;
		/**
		 * Dislpays a link for navigating to another QuickViewPage
		 */
		static pageLink: string;
		/**
		 * Displays a phone number link for direct dialing
		 */
		static phone: string;
		/**
		 * Dislpays text
		 */
		static text: string;
	}

	class QuickViewPage extends sap.ui.core.Control {
		/**
		 * Constructor for a new QuickViewPage.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.QuickViewPageMetadata);
		/**
		 * Constructor for a new QuickViewPage.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some group to the aggregation <code>groups</code>.
		 * @param oGroup the group to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addGroup(oGroup: QuickViewGroup): QuickViewPage;
		/**
		 * Binds aggregation <code>groups</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindGroups(oBindingInfo: any): QuickViewPage;
		/**
		 * Destroys all the groups in the aggregation <code>groups</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyGroups(): QuickViewPage;
		/**
		 * Creates a new subclass of class sap.m.QuickViewPage with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|QuickViewPageMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>crossAppNavCallback</code>.
		 * 
		 * Specifies the application which provides target and param configuration  for cross-application navigation from the 'page header'.
		 * @return Value of property <code>crossAppNavCallback</code>
		 */
		getCrossAppNavCallback(): any;
		/**
		 * Gets current value of property <code>description</code>.
		 * 
		 * Specifies the text displayed under the header of the content section
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>description</code>
		 */
		getDescription(): string;
		/**
		 * Gets content of aggregation <code>groups</code>.
		 * 
		 * QuickViewGroup consists of a title (optional) and an entity of group elements.
		 * @return 
		 */
		getGroups(): QuickViewGroup[];
		/**
		 * Gets current value of property <code>header</code>.
		 * 
		 * Specifies the text displayed in the header of the control.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>header</code>
		 */
		getHeader(): string;
		/**
		 * Gets current value of property <code>icon</code>.
		 * 
		 * Specifies the URL of the icon displayed under the header of the page
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>icon</code>
		 */
		getIcon(): string;
		/**
		 * Gets current value of property <code>pageId</code>.
		 * 
		 * Page id
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>pageId</code>
		 */
		getPageId(): string;
		/**
		 * Gets current value of property <code>title</code>.
		 * 
		 * Specifies the text displayed in the header of the content section of the control.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>title</code>
		 */
		getTitle(): string;
		/**
		 * Gets current value of property <code>titleUrl</code>.
		 * 
		 * Specifies the URL which opens when the title or the thumbnail is clicked.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>titleUrl</code>
		 */
		getTitleUrl(): string;
		/**
		 * Checks for the provided <code>sap.m.QuickViewGroup</code> in the aggregation <code>groups</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oGroup The group whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfGroup(oGroup: QuickViewGroup): number;
		/**
		 * Inserts a group into the aggregation <code>groups</code>.
		 * @param oGroup the group to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the group should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the group is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the group is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertGroup(oGroup: QuickViewGroup, iIndex: number): QuickViewPage;
		/**
		 * Removes all the controls from the aggregation <code>groups</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllGroups(): QuickViewGroup[];
		/**
		 * Removes a group from the aggregation <code>groups</code>.
		 * @param vGroup The group to remove or its index or id
		 * @return The removed group or <code>null</code>
		 */
		removeGroup(vGroup: number|string|QuickViewGroup): QuickViewGroup;
		/**
		 * Sets a new value for property <code>crossAppNavCallback</code>.
		 * 
		 * Specifies the application which provides target and param configuration  for cross-application navigation from the 'page header'.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param oCrossAppNavCallback New value for property <code>crossAppNavCallback</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setCrossAppNavCallback(oCrossAppNavCallback: any): QuickViewPage;
		/**
		 * Sets a new value for property <code>description</code>.
		 * 
		 * Specifies the text displayed under the header of the content section
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sDescription New value for property <code>description</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDescription(sDescription: string): QuickViewPage;
		/**
		 * Sets a new value for property <code>header</code>.
		 * 
		 * Specifies the text displayed in the header of the control.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sHeader New value for property <code>header</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHeader(sHeader: string): QuickViewPage;
		/**
		 * Sets a new value for property <code>icon</code>.
		 * 
		 * Specifies the URL of the icon displayed under the header of the page
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sIcon New value for property <code>icon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIcon(sIcon: string): QuickViewPage;
		/**
		 * Sets a new value for property <code>pageId</code>.
		 * 
		 * Page id
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sPageId New value for property <code>pageId</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setPageId(sPageId: string): QuickViewPage;
		/**
		 * Sets a new value for property <code>title</code>.
		 * 
		 * Specifies the text displayed in the header of the content section of the control.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sTitle New value for property <code>title</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTitle(sTitle: string): QuickViewPage;
		/**
		 * Sets a new value for property <code>titleUrl</code>.
		 * 
		 * Specifies the URL which opens when the title or the thumbnail is clicked.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sTitleUrl New value for property <code>titleUrl</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTitleUrl(sTitleUrl: string): QuickViewPage;
		/**
		 * Unbinds aggregation <code>groups</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindGroups(): QuickViewPage;
	}

	class RadioButton extends sap.ui.core.Control {
		/**
		 * Constructor for a new RadioButton.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.RadioButtonMetadata);
		/**
		 * Constructor for a new RadioButton.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID|sap.ui.core.Control): RadioButton;
		/**
		 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): RadioButton;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>select</code> event of this <code>sap.m.RadioButton</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.RadioButton</code> itself.
		 * 
		 * Event is triggered when the user makes a change on the radio button (selecting or unselecting it).
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.RadioButton</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachSelect(oData: any, fnFunction: any, oListener?: any): RadioButton;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>select</code> event of this <code>sap.m.RadioButton</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachSelect(fnFunction: any, oListener: any): RadioButton;
		/**
		 * Destroys all related objects to the RadioButton
		 */
		exit();
		/**
		 * Creates a new subclass of class sap.m.RadioButton with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|RadioButtonMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>select</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>selected</code> of type <code>boolean</code>Checks whether the RadioButton is active or not.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireSelect(mArguments?: any): RadioButton;
		/**
		 * Gets current value of property <code>activeHandling</code>.
		 * 
		 * This is a flag to switch on activeHandling. When it is switched off,
		 * there will not be visual changes on active state. Default value is 'true'
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>activeHandling</code>
		 */
		getActiveHandling(): boolean;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaDescribedBy</code>.
		 * @return 
		 */
		getAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
		 * @return 
		 */
		getAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Gets current value of property <code>editable</code>.
		 * 
		 * Specifies whether the user can select the radio button.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>editable</code>
		 */
		getEditable(): boolean;
		/**
		 * Gets current value of property <code>enabled</code>.
		 * 
		 * Specifies if the radio button is disabled.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>enabled</code>
		 */
		getEnabled(): boolean;
		/**
		 * Gets current value of property <code>groupName</code>.
		 * 
		 * Name of the radio button group the current radio button belongs to. You can define a new name for the group.
		 * If no new name is specified, this radio button belongs to the sapMRbDefaultGroup per default. Default behavior of a radio button in a group is that when one of the radio buttons in a group is selected, all others are unselected.
		 * 
		 * Default value is <code>sapMRbDefaultGroup</code>.
		 * @return Value of property <code>groupName</code>
		 */
		getGroupName(): string;
		/**
		 * Gets current value of property <code>selected</code>.
		 * 
		 * Specifies the select state of the radio button
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>selected</code>
		 */
		getSelected(): boolean;
		/**
		 * Gets current value of property <code>text</code>.
		 * 
		 * Specifies the text displayed next to the RadioButton
		 * @return Value of property <code>text</code>
		 */
		getText(): string;
		/**
		 * Gets current value of property <code>textAlign</code>.
		 * 
		 * Specifies the alignment of the radio button. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
		 * 
		 * Default value is <code>Begin</code>.
		 * @return Value of property <code>textAlign</code>
		 */
		getTextAlign(): sap.ui.core.TextAlign;
		/**
		 * Gets current value of property <code>textDirection</code>.
		 * 
		 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @return Value of property <code>textDirection</code>
		 */
		getTextDirection(): sap.ui.core.TextDirection;
		/**
		 * Gets current value of property <code>valueState</code>.
		 * 
		 * Enumeration sap.ui.core.ValueState provides state values Error, Success, Warning, None
		 * 
		 * Default value is <code>None</code>.
		 * @return Value of property <code>valueState</code>
		 */
		getValueState(): sap.ui.core.ValueState;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Width of the Label
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Pseudo event for pseudo 'select' event... space, enter, ... without modifiers (Ctrl, Alt or Shift)
		 * @param oEvent provides information for the event
		 */
		onsapselect(oEvent: any);
		/**
		 * Removes all the controls in the association named <code>ariaDescribedBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
		 * @return The removed ariaDescribedBy or <code>null</code>
		 */
		removeAriaDescribedBy(vAriaDescribedBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
		 * @return The removed ariaLabelledBy or <code>null</code>
		 */
		removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Sets a new value for property <code>activeHandling</code>.
		 * 
		 * This is a flag to switch on activeHandling. When it is switched off,
		 * there will not be visual changes on active state. Default value is 'true'
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bActiveHandling New value for property <code>activeHandling</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setActiveHandling(bActiveHandling: boolean): RadioButton;
		/**
		 * Method to set a RadioButton's state to active or inactive.
		 * @param bActive Sets the active state to true or false
		 */
		setActiveState(bActive: boolean);
		/**
		 * Sets a new value for property <code>editable</code>.
		 * 
		 * Specifies whether the user can select the radio button.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bEditable New value for property <code>editable</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setEditable(bEditable: boolean): RadioButton;
		/**
		 * Sets a new value for property <code>enabled</code>.
		 * 
		 * Specifies if the radio button is disabled.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bEnabled New value for property <code>enabled</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setEnabled(bEnabled: boolean): RadioButton;
		/**
		 * Sets RadioButton's groupName. Only one radioButton from the same group can be selected
		 * @param sGroupName Name of the group to which the RadioButton will belong.
		 * @return Reference to the control instance for chaining
		 */
		setGroupName(sGroupName: string): RadioButton;
		/**
		 * Sets the state of the RadioButton to selected.
		 * @param bSelected defines if the radio button is selected
		 * @return Reference to the control instance for chaining
		 */
		setSelected(bSelected: boolean): RadioButton;
		/**
		 * Sets the text for the RadioButton's label.
		 * @param sText The text to be set
		 * @return Reference to the control instance for chaining
		 */
		setText(sText: string): RadioButton;
		/**
		 * Sets a new value for property <code>textAlign</code>.
		 * 
		 * Specifies the alignment of the radio button. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Begin</code>.
		 * @param sTextAlign New value for property <code>textAlign</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTextAlign(sTextAlign: sap.ui.core.TextAlign): RadioButton;
		/**
		 * Sets the text direction for the RadioButton's label.
		 * @param sDirection Text direction to be set to RadioButton's label
		 * @return Reference to the control instance for chaining
		 */
		setTextDirection(sDirection: string): RadioButton;
		/**
		 * Sets a new value for property <code>valueState</code>.
		 * 
		 * Enumeration sap.ui.core.ValueState provides state values Error, Success, Warning, None
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>None</code>.
		 * @param sValueState New value for property <code>valueState</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setValueState(sValueState: sap.ui.core.ValueState): RadioButton;
		/**
		 * Sets the width for the RadioButton's label.
		 * @param sWidth CSS size to be set as width of the label
		 * @return Reference to the control instance for chaining
		 */
		setWidth(sWidth: string): RadioButton;
	}

	class RadioButtonGroup extends sap.ui.core.Control {
		/**
		 * Constructor for a new RadioButtonGroup.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.RadioButtonGroupMetadata);
		/**
		 * Constructor for a new RadioButtonGroup.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID|sap.ui.core.Control): RadioButtonGroup;
		/**
		 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): RadioButtonGroup;
		/**
		 * Adds a new radio button to the group.
		 * @param oButton The button which will be added to the group
		 * @return Pointer to the control instance for chaining
		 */
		addButton(oButton: RadioButton): RadioButtonGroup;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>select</code> event of this <code>sap.m.RadioButtonGroup</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.RadioButtonGroup</code> itself.
		 * 
		 * Fires when selection is changed by user interaction.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.RadioButtonGroup</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachSelect(oData: any, fnFunction: any, oListener?: any): RadioButtonGroup;
		/**
		 * Binds aggregation <code>buttons</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindButtons(oBindingInfo: any): RadioButtonGroup;
		/**
		 * Creates a new instance of RadioButtonGroup, with the same settings as the RadioButtonGroup
		 * on which the method is called.
		 * Event handlers are not cloned.
		 * @return New instance of RadioButtonGroup
		 */
		clone(): RadioButtonGroup;
		/**
		 * Clones a tree of objects starting with the object on which clone is called first (root object).
		 * 
		 * The ids within the newly created clone tree are derived from the original ids by appending
		 * the given <code>sIdSuffix</code> (if no suffix is given, one will be created; it will be
		 * unique across multiple clone calls).
		 * 
		 * The <code>oOptions</code> configuration object can have the following properties:
		 * <ul>
		 * <li>The boolean value <code>cloneChildren</code> specifies wether associations/aggregations will be cloned</li>
		 * <li>The boolean value <code>cloneBindings</code> specifies if bindings will be cloned</li>
		 * </ul>
		 * 
		 * For each cloned object the following settings are cloned based on the metadata of the object and the defined options:
		 * <ul>
		 * <li>all properties that are not bound. If cloneBinding is false even these properties will be cloned;
		 * the values are used by reference, they are not cloned</li>
		 * <li>all aggregated objects that are not bound. If cloneBinding is false even the ones that are bound will be cloned;
		 * they are all cloned recursively using the same <code>sIdSuffix</code></li>
		 * <li>all associated controls; when an association points to an object inside the cloned object tree,
		 *     then the cloned association will be modified to that it points to the clone of the target object.
		 *     When the association points to a managed object outside of the cloned object tree, then its
		 *     target won't be changed.</li>
		 * <li>all models set via setModel(); used by reference </li>
		 * <li>all property and aggregation bindings (if cloneBindings is true); the pure binding infos (path, model name) are
		 *     cloned, but all other information like template control or factory function,
		 *     data type or formatter function are copied by reference. The bindings themselves
		 *     are created anew as they are specific for the combination (object, property, model).
		 *     As a result, any later changes to a binding of the original object are not reflected
		 *     in the clone, but changes to e.g the type or template etc. are.</li>
		 * </ul>
		 * 
		 * Each clone is created by first collecting the above mentioned settings and then creating
		 * a new instance with the normal constructor function. As a result, any side effects of
		 * mutator methods (setProperty etc.) or init hooks are repeated during clone creation.
		 * There is no need to override <code>clone()</code> just to reproduce these internal settings!
		 * 
		 * Custom controls however can override <code>clone()</code> to implement additional clone steps.
		 * They usually will first call <code>clone()</code> on the super class and then modify the
		 * returned clone accordingly.
		 * 
		 * Applications <b>must never provide</b> the second parameter <code>aLocaleIds</code>.
		 * It is determined automatically for the root object (and its non-existance also serves as
		 * an indicator for the root object). Specifying it will break the implementation of <code>clone()</code>.
		 * @note Overload from base type sap.ui.base.ManagedObject
		 * @param sIdSuffix a suffix to be appended to the cloned object id(optional)
		 * @param aLocalIds an array of local IDs within the cloned hierarchy (internally used)(optional)
		 * @param oOptions configuration object(optional)
		 * @return reference to the newly created clone
		 */
		clone(sIdSuffix?: string, aLocalIds?: string[], oOptions?: any): sap.ui.base.ManagedObject;
		/**
		 * Clone delegates
		 * @note Overload from base type sap.ui.core.Element
		 * @param sIdSuffix a suffix to be appended to the cloned element id(optional)
		 * @param aLocalIds an array of local IDs within the cloned hierarchy (internally used)(optional)
		 * @return reference to the newly created clone
		 */
		clone(sIdSuffix?: string, aLocalIds?: string[]): sap.ui.base.ManagedObject;
		/**
		 * Overrides {@link sap.ui.core.Element#clone Element.clone} to clone additional
		 * internal state.
		 * 
		 * The additionally cloned information contains:
		 * <ul>
		 * <li>browser event handlers attached with {@link #attachBrowserEvent}
		 * <li>text selection behavior
		 * <li>style classes added with {@link #addStyleClass}
		 * </ul>
		 * @note Overload from base type sap.ui.core.Control
		 * @param sIdSuffix a suffix to be appended to the cloned element id(optional)
		 * @param aLocalIds an array of local IDs within the cloned hierarchy (internally used)(optional)
		 * @return reference to the newly created clone
		 */
		clone(sIdSuffix?: string, aLocalIds?: string[]): sap.ui.core.Element;
		/**
		 * Destroys all radio buttons.
		 * @return Pointer to the control instance for chaining
		 */
		destroyButtons(): RadioButtonGroup;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>select</code> event of this <code>sap.m.RadioButtonGroup</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachSelect(fnFunction: any, oListener: any): RadioButtonGroup;
		/**
		 * Creates a new subclass of class sap.m.RadioButtonGroup with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|RadioButtonGroupMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>select</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>selectedIndex</code> of type <code>int</code>Index of the selected RadioButton.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireSelect(mArguments?: any): RadioButtonGroup;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaDescribedBy</code>.
		 * @return 
		 */
		getAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
		 * @return 
		 */
		getAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Gets content of aggregation <code>buttons</code>.
		 * 
		 * Returns a list of the RadioButtons in a RadioButtonGroup
		 * @return 
		 */
		getButtons(): RadioButton[];
		/**
		 * Gets current value of property <code>columns</code>.
		 * 
		 * Specifies the maximum number of radio buttons displayed in one line.
		 * 
		 * Default value is <code>1</code>.
		 * @return Value of property <code>columns</code>
		 */
		getColumns(): number;
		/**
		 * Gets current value of property <code>editable</code>.
		 * 
		 * Specifies whether the user can change the selected value of the RadioButtonGroup.
		 * When the property is set to false, the control obtains visual styles
		 * different from its visual styles for the normal and the disabled state.
		 * Additionally, the control is no longer interactive, but can receive focus.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>editable</code>
		 */
		getEditable(): boolean;
		/**
		 * Gets current value of property <code>enabled</code>.
		 * 
		 * Switches the enabled state of the control. All Radio Buttons inside a disabled group are disabled. Default value is “true”.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>enabled</code>
		 */
		getEnabled(): boolean;
		/**
		 * Returns the selected radio button.
		 * @return The selected radio button
		 */
		getSelectedButton(): RadioButton;
		/**
		 * Gets current value of property <code>selectedIndex</code>.
		 * 
		 * Determines the index of the selected/checked RadioButton. Default is 0.
		 * If no radio button is selected, the selectedIndex property will return -1.
		 * 
		 * Default value is <code>0</code>.
		 * @return Value of property <code>selectedIndex</code>
		 */
		getSelectedIndex(): number;
		/**
		 * Gets current value of property <code>textDirection</code>.
		 * 
		 * This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @return Value of property <code>textDirection</code>
		 */
		getTextDirection(): sap.ui.core.TextDirection;
		/**
		 * Gets current value of property <code>valueState</code>.
		 * 
		 * Тhe value state to be displayed for the radio button. Possible values are: sap.ui.core.ValueState.Error,
		 * sap.ui.core.ValueState.Warning, sap.ui.core.ValueState.Success and sap.ui.core.ValueState.None.
		 * Note: Setting this attribute to sap.ui.core.ValueState.Error when the accessibility feature is enabled,
		 * sets the value of the invalid propery for the whole RadioButtonGroup to “true”.
		 * 
		 * Default value is <code>None</code>.
		 * @return Value of property <code>valueState</code>
		 */
		getValueState(): sap.ui.core.ValueState;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Specifies the width of the RadioButtonGroup.
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Checks for the provided <code>sap.m.RadioButton</code> in the aggregation <code>buttons</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oButton The button whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfButton(oButton: RadioButton): number;
		/**
		 * Adds a new radio button to the group at a specified index.
		 * @param oButton The radio button which will be added to the group
		 * @param iIndex The index, at which the radio button will be added
		 * @return Pointer to the control instance for chaining
		 */
		insertButton(oButton: RadioButton, iIndex: sap.ui.model.type.Integer): RadioButtonGroup;
		/**
		 * Removes all the controls in the association named <code>ariaDescribedBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Removes all radio buttons.
		 * @return Array of removed buttons or null
		 */
		removeAllButtons(): any[];
		/**
		 * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
		 * @return The removed ariaDescribedBy or <code>null</code>
		 */
		removeAriaDescribedBy(vAriaDescribedBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
		 * @return The removed ariaLabelledBy or <code>null</code>
		 */
		removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Removes a radio button from the group.
		 * @return The removed radio button
		 */
		removeButton(): RadioButton;
		/**
		 * Sets a new value for property <code>columns</code>.
		 * 
		 * Specifies the maximum number of radio buttons displayed in one line.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>1</code>.
		 * @param iColumns New value for property <code>columns</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setColumns(iColumns: number): RadioButtonGroup;
		/**
		 * Sets the editable property of all radio buttons in the group.
		 * Non editable radio buttons can still obtain focus.
		 * @param bEditable Defines whether the radio buttons should be interactive.
		 * @return Pointer to the control instance for chaining
		 */
		setEditable(bEditable: boolean): RadioButtonGroup;
		/**
		 * Sets the enabled property of all radio buttons in the group.
		 * @param bEnabled Defines whether the radio buttons should be interactive.
		 * @return Pointer to the control instance for chaining
		 */
		setEnabled(bEnabled: boolean): RadioButtonGroup;
		/**
		 * Sets the selected sap.m.RadioButton using sap.m.RadioButton.
		 * @param oSelectedButton The item to be selected
		 * @return Pointer to the control instance for chaining
		 */
		setSelectedButton(oSelectedButton: RadioButton): RadioButtonGroup;
		/**
		 * Sets the selected sap.m.RadioButton using index.
		 * @param iSelectedIndex The index of the radio button which has to be selected
		 * @return Pointer to the control instance for chaining
		 */
		setSelectedIndex(iSelectedIndex: sap.ui.model.type.Integer): RadioButtonGroup;
		/**
		 * Sets a new value for property <code>textDirection</code>.
		 * 
		 * This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @param sTextDirection New value for property <code>textDirection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTextDirection(sTextDirection: sap.ui.core.TextDirection): RadioButtonGroup;
		/**
		 * Sets ValueState of all radio buttons in the group.
		 * @param sValueState The value state of the radio group - none, success, warning, error.
		 * @return Pointer to the control instance for chaining
		 */
		setValueState(sValueState: sap.ui.model.type.String): RadioButtonGroup;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Specifies the width of the RadioButtonGroup.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): RadioButtonGroup;
		/**
		 * Unbinds aggregation <code>buttons</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindButtons(): RadioButtonGroup;
	}

	class RangeSlider extends Slider {
		/**
		 * Constructor for a new <code>sap.m.RangeSlider</code>.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given.(optional)
		 * @param mSettings Initial settings for the new control.(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.RangeSliderMetadata);
		/**
		 * Constructor for a new <code>sap.m.RangeSlider</code>.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given.(optional)
		 * @param mSettings Initial settings for the new control.(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.RangeSlider with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.Slider.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|RangeSliderMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.Slider with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.Slider
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|SliderMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>inputsAsTooltips</code>.
		 * 
		 * Indicates whether an Input fields should be used as tooltips for the handles.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>inputsAsTooltips</code>
		 */
		getInputsAsTooltips(): boolean;
		/**
		 * Gets current value of property <code>range</code>.
		 * 
		 * Determines the range in which the user can select values.
		 * 
		 * If the value is lower/higher than the allowed minimum/maximum,
		 * a warning message will be output to the console.
		 * 
		 * Default value is <code>[]</code>.
		 * @return Value of property <code>range</code>
		 */
		getRange(): any;
		/**
		 * Sets a new value for property <code>inputsAsTooltips</code>.
		 * 
		 * Indicates whether an Input fields should be used as tooltips for the handles.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bInputsAsTooltips New value for property <code>inputsAsTooltips</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setInputsAsTooltips(bInputsAsTooltips: boolean): RangeSlider;
		/**
		 * Sets a new value for property <code>range</code>.
		 * 
		 * Determines the range in which the user can select values.
		 * 
		 * If the value is lower/higher than the allowed minimum/maximum,
		 * a warning message will be output to the console.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>[]</code>.
		 * @param oRange New value for property <code>range</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setRange(oRange: any): RangeSlider;
	}

	class RatingIndicator extends sap.ui.core.Control {
		/**
		 * Constructor for a new RatingIndicator.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.RatingIndicatorMetadata);
		/**
		 * Constructor for a new RatingIndicator.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID|sap.ui.core.Control): RatingIndicator;
		/**
		 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): RatingIndicator;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>change</code> event of this <code>sap.m.RatingIndicator</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.RatingIndicator</code> itself.
		 * 
		 * The event is fired when the user has done a rating.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.RatingIndicator</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachChange(oData: any, fnFunction: any, oListener?: any): RatingIndicator;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>liveChange</code> event of this <code>sap.m.RatingIndicator</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.RatingIndicator</code> itself.
		 * 
		 * This event is triggered during the dragging period, each time the rating value changes.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.RatingIndicator</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachLiveChange(oData: any, fnFunction: any, oListener?: any): RatingIndicator;
		/**
		 * Binds property <code>value</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindValue(oBindingInfo: any): RatingIndicator;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>change</code> event of this <code>sap.m.RatingIndicator</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachChange(fnFunction: any, oListener: any): RatingIndicator;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>liveChange</code> event of this <code>sap.m.RatingIndicator</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachLiveChange(fnFunction: any, oListener: any): RatingIndicator;
		/**
		 * Creates a new subclass of class sap.m.RatingIndicator with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|RatingIndicatorMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>change</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>value</code> of type <code>int</code>The rated value</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireChange(mArguments?: any): RatingIndicator;
		/**
		 * Fires event <code>liveChange</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>value</code> of type <code>float</code>The current value of the rating after a live change event.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireLiveChange(mArguments?: any): RatingIndicator;
		/**
		 * 
		 */
		getAccessibilityInfo();
		/**
		 * This function (if available on the concrete control) provides
		 * the current accessibility state of the control.
		 * 
		 * Applications must not call this hook method directly, it is called by the framework.
		 * 
		 * Subclasses of Control should implement this hook to provide any necessary accessibility information:
		 * 
		 * <pre>
		 * MyControl.prototype.getAccessibilityInfo = function() {
		 *    return {
		 *      role: "textbox",      // String which represents the WAI-ARIA role which is implemented by the control.
		 *      type: "date input",   // String which represents the control type (Must be a translated text). Might correlate with
		 *                            // the role.
		 *      description: "value", // String which describes the most relevant control state (e.g. the inputs value). Must be a
		 *                            // translated text.
		 *                            // Note: The type and the enabled/editable state must not be handled here.
		 *      focusable: true,      // Boolean which describes whether the control can get the focus.
		 *      enabled: true,        // Boolean which describes whether the control is enabled. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      editable: true,       // Boolean which describes whether the control is editable. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      children: []          // Array of accessibility info objects of children of the given control (e.g. when the control is a layout).
		 *                            // Note: Children should only be provided when it is helpful to understand the accessibility context
		 *                            //       (e.g. a form control must not provide details of its internals (fields, labels, ...) but a
		 *                            //       layout should).
		 *    };
		 * };
		 * </pre>
		 * 
		 * Note: The returned object provides the accessibility state of the control at the point in time when this function is called.
		 * @note Overload from base type sap.ui.core.Control
		 * @return Current accessibility state of the control.
		 */
		getAccessibilityInfo(): any;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaDescribedBy</code>.
		 * @return 
		 */
		getAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
		 * @return 
		 */
		getAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Gets current value of property <code>enabled</code>.
		 * 
		 * Value "true" is required to let the user rate with this control. It is recommended to set this parameter to "false" for the "Small" size which is meant for indicating a value only
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>enabled</code>
		 */
		getEnabled(): boolean;
		/**
		 * Gets current value of property <code>iconHovered</code>.
		 * 
		 * The URI to the icon font icon or image that will be displayed for hovered rating symbols. A star icon will be used if the property is not set
		 * @return Value of property <code>iconHovered</code>
		 */
		getIconHovered(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>iconSelected</code>.
		 * 
		 * The URI to the icon font icon or image that will be displayed for selected rating symbols. A star icon will be used if the property is not set
		 * @return Value of property <code>iconSelected</code>
		 */
		getIconSelected(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>iconSize</code>.
		 * 
		 * The Size of the image or icon to be displayed. The default value depends on the theme. Please be sure that the size is corresponding to a full pixel value as some browsers don't support subpixel calculations. Recommended size is 1.375rem (22px) for normal, 1rem (16px) for small, and 2rem (32px) for large icons correspondingly.
		 * @return Value of property <code>iconSize</code>
		 */
		getIconSize(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>iconUnselected</code>.
		 * 
		 * The URI to the icon font icon or image that will be displayed for all unselected rating symbols. A star icon will be used if the property is not set
		 * @return Value of property <code>iconUnselected</code>
		 */
		getIconUnselected(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>maxValue</code>.
		 * 
		 * The number of displayed rating symbols
		 * 
		 * Default value is <code>5</code>.
		 * @return Value of property <code>maxValue</code>
		 */
		getMaxValue(): number;
		/**
		 * Gets current value of property <code>value</code>.
		 * 
		 * The indicated value of the rating
		 * 
		 * Default value is <code>0</code>.
		 * @return Value of property <code>value</code>
		 */
		getValue(): number;
		/**
		 * Gets current value of property <code>visualMode</code>.
		 * 
		 * Defines how float values are visualized: Full, Half (see enumeration RatingIndicatorVisualMode)
		 * 
		 * Default value is <code>Half</code>.
		 * @return Value of property <code>visualMode</code>
		 */
		getVisualMode(): RatingIndicatorVisualMode;
		/**
		 * Removes all the controls in the association named <code>ariaDescribedBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
		 * @return The removed ariaDescribedBy or <code>null</code>
		 */
		removeAriaDescribedBy(vAriaDescribedBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
		 * @return The removed ariaLabelledBy or <code>null</code>
		 */
		removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Sets a new value for property <code>enabled</code>.
		 * 
		 * Value "true" is required to let the user rate with this control. It is recommended to set this parameter to "false" for the "Small" size which is meant for indicating a value only
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bEnabled New value for property <code>enabled</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setEnabled(bEnabled: boolean): RatingIndicator;
		/**
		 * Sets a new value for property <code>iconHovered</code>.
		 * 
		 * The URI to the icon font icon or image that will be displayed for hovered rating symbols. A star icon will be used if the property is not set
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sIconHovered New value for property <code>iconHovered</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIconHovered(sIconHovered: sap.ui.core.URI): RatingIndicator;
		/**
		 * Sets a new value for property <code>iconSelected</code>.
		 * 
		 * The URI to the icon font icon or image that will be displayed for selected rating symbols. A star icon will be used if the property is not set
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sIconSelected New value for property <code>iconSelected</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIconSelected(sIconSelected: sap.ui.core.URI): RatingIndicator;
		/**
		 * Sets the icon size value. The method is automatically updating the UI components if the control has been rendered before.
		 * @param sIconSize 
		 * @return Returns <code>this</code> to facilitate method chaining.
		 */
		setIconSize(sIconSize: sap.ui.core.CSSSize): RatingIndicator;
		/**
		 * Sets a new value for property <code>iconUnselected</code>.
		 * 
		 * The URI to the icon font icon or image that will be displayed for all unselected rating symbols. A star icon will be used if the property is not set
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sIconUnselected New value for property <code>iconUnselected</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIconUnselected(sIconUnselected: sap.ui.core.URI): RatingIndicator;
		/**
		 * Sets a new value for property <code>maxValue</code>.
		 * 
		 * The number of displayed rating symbols
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>5</code>.
		 * @param iMaxValue New value for property <code>maxValue</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMaxValue(iMaxValue: number): RatingIndicator;
		/**
		 * Sets the rating value. The method is automatically checking whether the value is in the valid range of 0-{@link #getMaxValue maxValue} and if it is a valid number. Calling the setter with null or undefined will reset the value to it's default.
		 * @param fValue The rating value to be set.
		 * @return Returns <code>this</code> to facilitate method chaining.
		 */
		setValue(fValue: number): RatingIndicator;
		/**
		 * Sets a new value for property <code>visualMode</code>.
		 * 
		 * Defines how float values are visualized: Full, Half (see enumeration RatingIndicatorVisualMode)
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Half</code>.
		 * @param sVisualMode New value for property <code>visualMode</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setVisualMode(sVisualMode: RatingIndicatorVisualMode): RatingIndicator;
		/**
		 * Unbinds property <code>value</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindValue(): RatingIndicator;
	}

	class RatingIndicatorVisualMode {
		/**
		 * Values are rounded to the nearest integer value (e.g. 1.7 -> 2).
		 */
		static Full: string;
		/**
		 * Values are rounded to the nearest half value (e.g. 1.7 -> 1.5).
		 */
		static Half: string;
	}

	class ResponsivePopover extends sap.ui.core.Control {
		/**
		 * Constructor for a new ResponsivePopover.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.ResponsivePopoverMetadata);
		/**
		 * Constructor for a new ResponsivePopover.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID|sap.ui.core.Control): ResponsivePopover;
		/**
		 * Adds content to the ResponsivePopover
		 * @param oControl The control to be added to the content
		 */
		addContent(oControl: sap.ui.core.Control);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>afterClose</code> event of this <code>sap.m.ResponsivePopover</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.ResponsivePopover</code> itself.
		 * 
		 * Event is fired after popover or dialog is closed.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.ResponsivePopover</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachAfterClose(oData: any, fnFunction: any, oListener?: any): ResponsivePopover;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>afterOpen</code> event of this <code>sap.m.ResponsivePopover</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.ResponsivePopover</code> itself.
		 * 
		 * Event is fired after popover or dialog is open.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.ResponsivePopover</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachAfterOpen(oData: any, fnFunction: any, oListener?: any): ResponsivePopover;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>beforeClose</code> event of this <code>sap.m.ResponsivePopover</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.ResponsivePopover</code> itself.
		 * 
		 * Event is fired before popover or dialog is closed.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.ResponsivePopover</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachBeforeClose(oData: any, fnFunction: any, oListener?: any): ResponsivePopover;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>beforeOpen</code> event of this <code>sap.m.ResponsivePopover</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.ResponsivePopover</code> itself.
		 * 
		 * Event is fired before popover or dialog is open.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.ResponsivePopover</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachBeforeOpen(oData: any, fnFunction: any, oListener?: any): ResponsivePopover;
		/**
		 * Creates a new instance of ResponsivePopover with the same settings as the ResponsivePopover on which the method is called
		 * @return New instance of ResponsivePopover
		 */
		clone(): ResponsivePopover;
		/**
		 * Clones a tree of objects starting with the object on which clone is called first (root object).
		 * 
		 * The ids within the newly created clone tree are derived from the original ids by appending
		 * the given <code>sIdSuffix</code> (if no suffix is given, one will be created; it will be
		 * unique across multiple clone calls).
		 * 
		 * The <code>oOptions</code> configuration object can have the following properties:
		 * <ul>
		 * <li>The boolean value <code>cloneChildren</code> specifies wether associations/aggregations will be cloned</li>
		 * <li>The boolean value <code>cloneBindings</code> specifies if bindings will be cloned</li>
		 * </ul>
		 * 
		 * For each cloned object the following settings are cloned based on the metadata of the object and the defined options:
		 * <ul>
		 * <li>all properties that are not bound. If cloneBinding is false even these properties will be cloned;
		 * the values are used by reference, they are not cloned</li>
		 * <li>all aggregated objects that are not bound. If cloneBinding is false even the ones that are bound will be cloned;
		 * they are all cloned recursively using the same <code>sIdSuffix</code></li>
		 * <li>all associated controls; when an association points to an object inside the cloned object tree,
		 *     then the cloned association will be modified to that it points to the clone of the target object.
		 *     When the association points to a managed object outside of the cloned object tree, then its
		 *     target won't be changed.</li>
		 * <li>all models set via setModel(); used by reference </li>
		 * <li>all property and aggregation bindings (if cloneBindings is true); the pure binding infos (path, model name) are
		 *     cloned, but all other information like template control or factory function,
		 *     data type or formatter function are copied by reference. The bindings themselves
		 *     are created anew as they are specific for the combination (object, property, model).
		 *     As a result, any later changes to a binding of the original object are not reflected
		 *     in the clone, but changes to e.g the type or template etc. are.</li>
		 * </ul>
		 * 
		 * Each clone is created by first collecting the above mentioned settings and then creating
		 * a new instance with the normal constructor function. As a result, any side effects of
		 * mutator methods (setProperty etc.) or init hooks are repeated during clone creation.
		 * There is no need to override <code>clone()</code> just to reproduce these internal settings!
		 * 
		 * Custom controls however can override <code>clone()</code> to implement additional clone steps.
		 * They usually will first call <code>clone()</code> on the super class and then modify the
		 * returned clone accordingly.
		 * 
		 * Applications <b>must never provide</b> the second parameter <code>aLocaleIds</code>.
		 * It is determined automatically for the root object (and its non-existance also serves as
		 * an indicator for the root object). Specifying it will break the implementation of <code>clone()</code>.
		 * @note Overload from base type sap.ui.base.ManagedObject
		 * @param sIdSuffix a suffix to be appended to the cloned object id(optional)
		 * @param aLocalIds an array of local IDs within the cloned hierarchy (internally used)(optional)
		 * @param oOptions configuration object(optional)
		 * @return reference to the newly created clone
		 */
		clone(sIdSuffix?: string, aLocalIds?: string[], oOptions?: any): sap.ui.base.ManagedObject;
		/**
		 * Clone delegates
		 * @note Overload from base type sap.ui.core.Element
		 * @param sIdSuffix a suffix to be appended to the cloned element id(optional)
		 * @param aLocalIds an array of local IDs within the cloned hierarchy (internally used)(optional)
		 * @return reference to the newly created clone
		 */
		clone(sIdSuffix?: string, aLocalIds?: string[]): sap.ui.base.ManagedObject;
		/**
		 * Overrides {@link sap.ui.core.Element#clone Element.clone} to clone additional
		 * internal state.
		 * 
		 * The additionally cloned information contains:
		 * <ul>
		 * <li>browser event handlers attached with {@link #attachBrowserEvent}
		 * <li>text selection behavior
		 * <li>style classes added with {@link #addStyleClass}
		 * </ul>
		 * @note Overload from base type sap.ui.core.Control
		 * @param sIdSuffix a suffix to be appended to the cloned element id(optional)
		 * @param aLocalIds an array of local IDs within the cloned hierarchy (internally used)(optional)
		 * @return reference to the newly created clone
		 */
		clone(sIdSuffix?: string, aLocalIds?: string[]): sap.ui.core.Element;
		/**
		 * Closes the ResponsivePopover.
		 * @return 
		 */
		close(): sap.ui.core.Control;
		/**
		 * Destroys the beginButton in the aggregation <code>beginButton</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyBeginButton(): ResponsivePopover;
		/**
		 * Destroys all the content in the aggregation <code>content</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyContent(): ResponsivePopover;
		/**
		 * Destroys the customHeader in the aggregation <code>customHeader</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyCustomHeader(): ResponsivePopover;
		/**
		 * Destroys the endButton in the aggregation <code>endButton</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyEndButton(): ResponsivePopover;
		/**
		 * Destroys the subHeader in the aggregation <code>subHeader</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroySubHeader(): ResponsivePopover;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>afterClose</code> event of this <code>sap.m.ResponsivePopover</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachAfterClose(fnFunction: any, oListener: any): ResponsivePopover;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>afterOpen</code> event of this <code>sap.m.ResponsivePopover</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachAfterOpen(fnFunction: any, oListener: any): ResponsivePopover;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>beforeClose</code> event of this <code>sap.m.ResponsivePopover</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachBeforeClose(fnFunction: any, oListener: any): ResponsivePopover;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>beforeOpen</code> event of this <code>sap.m.ResponsivePopover</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachBeforeOpen(fnFunction: any, oListener: any): ResponsivePopover;
		/**
		 * Creates a new subclass of class sap.m.ResponsivePopover with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ResponsivePopoverMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>afterClose</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>openBy</code> of type <code>sap.ui.core.Control</code>This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.</li>
		 * <li><code>origin</code> of type <code>sap.m.Button</code>This parameter contains the control which triggers the close of the ResponsivePopover. This parameter is undefined when runs on desktop or tablet.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireAfterClose(mArguments?: any): ResponsivePopover;
		/**
		 * Fires event <code>afterOpen</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>openBy</code> of type <code>sap.ui.core.Control</code>This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireAfterOpen(mArguments?: any): ResponsivePopover;
		/**
		 * Fires event <code>beforeClose</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>openBy</code> of type <code>sap.ui.core.Control</code>This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.</li>
		 * <li><code>origin</code> of type <code>sap.m.Button</code>This parameter contains the control which triggers the close of the ResponsivePopover. This parameter is undefined when runs on desktop or tablet.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireBeforeClose(mArguments?: any): ResponsivePopover;
		/**
		 * Fires event <code>beforeOpen</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>openBy</code> of type <code>sap.ui.core.Control</code>This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireBeforeOpen(mArguments?: any): ResponsivePopover;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaDescribedBy</code>.
		 * @return 
		 */
		getAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Getter for beginButton aggregation
		 * @return The button that is set as a beginButton aggregation
		 */
		getBeginButton(): Button;
		/**
		 * Gets content of aggregation <code>content</code>.
		 * 
		 * Content is supported by both variants. Please see the documentation on sap.m.Popover#content and sap.m.Dialog#content
		 * @return 
		 */
		getContent(): sap.ui.core.Control[];
		/**
		 * Gets current value of property <code>contentHeight</code>.
		 * 
		 * This property is supported by both variants. Please see the documentation on sap.m.Popover#contentHeight and sap.m.Dialog#contentHeight
		 * @return Value of property <code>contentHeight</code>
		 */
		getContentHeight(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>contentWidth</code>.
		 * 
		 * This property is supported by both variants. Please see the documentation on sap.m.Popover#contentWidth and sap.m.Dialog#contentWidth
		 * @return Value of property <code>contentWidth</code>
		 */
		getContentWidth(): sap.ui.core.CSSSize;
		/**
		 * Gets content of aggregation <code>customHeader</code>.
		 * 
		 * CustomHeader is supported by both variants. Please see the documentation on sap.m.Popover#customHeader and sap.m.Dialog#customHeader
		 * @return 
		 */
		getCustomHeader(): IBar;
		/**
		 * Getter for endButton aggregation
		 * @return The button that is set as a endButton aggregation
		 */
		getEndButton(): Button;
		/**
		 * Gets current value of property <code>horizontalScrolling</code>.
		 * 
		 * This property is supported by both variants. Please see the documentation on sap.m.Popover#horizontalScrolling and sap.m.Dialog#horizontalScrolling
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>horizontalScrolling</code>
		 */
		getHorizontalScrolling(): boolean;
		/**
		 * Gets current value of property <code>icon</code>.
		 * 
		 * This property only takes effect  on phone. Please see the documentation sap.m.Dialog#icon.
		 * @return Value of property <code>icon</code>
		 */
		getIcon(): sap.ui.core.URI;
		/**
		 * ID of the element which is the current target of the association <code>initialFocus</code>, or <code>null</code>.
		 * @return 
		 */
		getInitialFocus(): sap.ui.core.ID;
		/**
		 * Gets current value of property <code>modal</code>.
		 * 
		 * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#modal.
		 * @return Value of property <code>modal</code>
		 */
		getModal(): boolean;
		/**
		 * Gets current value of property <code>offsetX</code>.
		 * 
		 * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#offsetX.
		 * @return Value of property <code>offsetX</code>
		 */
		getOffsetX(): number;
		/**
		 * Gets current value of property <code>offsetY</code>.
		 * 
		 * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#offsetY.
		 * @return Value of property <code>offsetY</code>
		 */
		getOffsetY(): number;
		/**
		 * Gets current value of property <code>placement</code>.
		 * 
		 * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#placement.
		 * 
		 * Default value is <code>Right</code>.
		 * @return Value of property <code>placement</code>
		 */
		getPlacement(): PlacementType;
		/**
		 * Gets current value of property <code>resizable</code>.
		 * 
		 * Whether resize option is enabled.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>resizable</code>
		 */
		getResizable(): boolean;
		/**
		 * Gets current value of property <code>showCloseButton</code>.
		 * 
		 * Determines if a close button should be inserted into the dialog's header dynamically to close the dialog. This property only takes effect on phone.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>showCloseButton</code>
		 */
		getShowCloseButton(): boolean;
		/**
		 * Gets current value of property <code>showHeader</code>.
		 * 
		 * This property is supported by both variants. Please see the documentation on sap.m.Popover#showHeader and sap.m.Dialog#showHeader
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>showHeader</code>
		 */
		getShowHeader(): boolean;
		/**
		 * Gets content of aggregation <code>subHeader</code>.
		 * 
		 * SubHeader is supported by both variants. Please see the documentation on sap.m.Popover#subHeader and sap.m.Dialog#subHeader
		 * @return 
		 */
		getSubHeader(): IBar;
		/**
		 * Gets current value of property <code>title</code>.
		 * 
		 * This property is supported by both variants. Please see the documentation on sap.m.Popover#title and sap.m.Dialog#title
		 * @return Value of property <code>title</code>
		 */
		getTitle(): string;
		/**
		 * Gets current value of property <code>verticalScrolling</code>.
		 * 
		 * This property is supported by both variants. Please see the documentation on sap.m.Popover#verticalScrolling and sap.m.Dialog#verticalScrolling
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>verticalScrolling</code>
		 */
		getVerticalScrolling(): boolean;
		/**
		 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oContent The content whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfContent(oContent: sap.ui.core.Control): number;
		/**
		 * Inserts a content into the aggregation <code>content</code>.
		 * @param oContent the content to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the content should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the content is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertContent(oContent: sap.ui.core.Control, iIndex: number): ResponsivePopover;
		/**
		 * Checks whether the ResponsivePopover is currently open.
		 * @return 
		 */
		isOpen(): sap.ui.core.Control;
		/**
		 * Opens the ResponsivePopover. The ResponsivePopover is positioned relatively to the control parameter on tablet or desktop and is full screen on phone. Therefore the control parameter is only used on tablet or desktop and is ignored on phone.
		 * @param oControl 
		 *         When this control is displayed on tablet or desktop, the ResponsivePopover is positioned relatively to this control.
		 * @return 
		 */
		openBy(oControl: any): sap.ui.core.Control;
		/**
		 * Removes all the controls in the association named <code>ariaDescribedBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Removes all the controls from the aggregation <code>content</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllContent(): sap.ui.core.Control[];
		/**
		 * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
		 * @return The removed ariaDescribedBy or <code>null</code>
		 */
		removeAriaDescribedBy(vAriaDescribedBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Removes a content from the aggregation <code>content</code>.
		 * @param vContent The content to remove or its index or id
		 * @return The removed content or <code>null</code>
		 */
		removeContent(vContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
		/**
		 * Setter for beginButton aggregation
		 * @param oButton The button that will be set as an aggregation
		 * @return Pointer to the control instance for chaining
		 */
		setBeginButton(oButton: Button): ResponsivePopover;
		/**
		 * Sets a new value for property <code>contentHeight</code>.
		 * 
		 * This property is supported by both variants. Please see the documentation on sap.m.Popover#contentHeight and sap.m.Dialog#contentHeight
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sContentHeight New value for property <code>contentHeight</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setContentHeight(sContentHeight: sap.ui.core.CSSSize): ResponsivePopover;
		/**
		 * Sets a new value for property <code>contentWidth</code>.
		 * 
		 * This property is supported by both variants. Please see the documentation on sap.m.Popover#contentWidth and sap.m.Dialog#contentWidth
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sContentWidth New value for property <code>contentWidth</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setContentWidth(sContentWidth: sap.ui.core.CSSSize): ResponsivePopover;
		/**
		 * Sets the aggregated <code>customHeader</code>.
		 * @param oCustomHeader The customHeader to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setCustomHeader(oCustomHeader: IBar): ResponsivePopover;
		/**
		 * Setter for endButton aggregation
		 * @param oButton The button that will be set as an aggregation
		 * @return Pointer to the control instance for chaining
		 */
		setEndButton(oButton: Button): ResponsivePopover;
		/**
		 * Sets a new value for property <code>horizontalScrolling</code>.
		 * 
		 * This property is supported by both variants. Please see the documentation on sap.m.Popover#horizontalScrolling and sap.m.Dialog#horizontalScrolling
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bHorizontalScrolling New value for property <code>horizontalScrolling</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHorizontalScrolling(bHorizontalScrolling: boolean): ResponsivePopover;
		/**
		 * Sets a new value for property <code>icon</code>.
		 * 
		 * This property only takes effect  on phone. Please see the documentation sap.m.Dialog#icon.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sIcon New value for property <code>icon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIcon(sIcon: sap.ui.core.URI): ResponsivePopover;
		/**
		 * Sets the associated <code>initialFocus</code>.
		 * @param oInitialFocus ID of an element which becomes the new target of this initialFocus association; alternatively, an element instance may be given
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setInitialFocus(oInitialFocus: sap.ui.core.ID|sap.ui.core.Control): ResponsivePopover;
		/**
		 * Sets a new value for property <code>modal</code>.
		 * 
		 * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#modal.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param bModal New value for property <code>modal</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setModal(bModal: boolean): ResponsivePopover;
		/**
		 * Sets a new value for property <code>offsetX</code>.
		 * 
		 * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#offsetX.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param iOffsetX New value for property <code>offsetX</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setOffsetX(iOffsetX: number): ResponsivePopover;
		/**
		 * Sets a new value for property <code>offsetY</code>.
		 * 
		 * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#offsetY.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param iOffsetY New value for property <code>offsetY</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setOffsetY(iOffsetY: number): ResponsivePopover;
		/**
		 * Sets a new value for property <code>placement</code>.
		 * 
		 * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#placement.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Right</code>.
		 * @param sPlacement New value for property <code>placement</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setPlacement(sPlacement: PlacementType): ResponsivePopover;
		/**
		 * Sets a new value for property <code>resizable</code>.
		 * 
		 * Whether resize option is enabled.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bResizable New value for property <code>resizable</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setResizable(bResizable: boolean): ResponsivePopover;
		/**
		 * Determines if the close button to the ResponsivePopover is shown or not. Works only when ResponsivePopover is used as a dialog
		 * @param bShowCloseButton Defines whether the close button is shown
		 * @return Pointer to the control instance for chaining
		 */
		setShowCloseButton(bShowCloseButton: boolean): ResponsivePopover;
		/**
		 * Sets a new value for property <code>showHeader</code>.
		 * 
		 * This property is supported by both variants. Please see the documentation on sap.m.Popover#showHeader and sap.m.Dialog#showHeader
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bShowHeader New value for property <code>showHeader</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowHeader(bShowHeader: boolean): ResponsivePopover;
		/**
		 * Sets the aggregated <code>subHeader</code>.
		 * @param oSubHeader The subHeader to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setSubHeader(oSubHeader: IBar): ResponsivePopover;
		/**
		 * Sets a new value for property <code>title</code>.
		 * 
		 * This property is supported by both variants. Please see the documentation on sap.m.Popover#title and sap.m.Dialog#title
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sTitle New value for property <code>title</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTitle(sTitle: string): ResponsivePopover;
		/**
		 * Sets a new value for property <code>verticalScrolling</code>.
		 * 
		 * This property is supported by both variants. Please see the documentation on sap.m.Popover#verticalScrolling and sap.m.Dialog#verticalScrolling
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bVerticalScrolling New value for property <code>verticalScrolling</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setVerticalScrolling(bVerticalScrolling: boolean): ResponsivePopover;
	}

	namespace routing {
	
		class Router extends sap.ui.core.routing.Router {
			/**
			 * Instantiates a SAPUI5 mobile Router see {@link sap.ui.core.routing.Router} for the constructor arguments
			 * The difference to the {@link sap.ui.core.routing.Router} are the properties viewLevel, transition and transitionParameters you can specify in every Route or Target created by this router.
			 * @param oRoutes may contain many Route configurations as {@link sap.ui.core.routing.Route#constructor}.<br/>
			 * Each of the routes contained in the array/object will be added to the router.<br/>
			 * 
			 * One way of defining routes is an array:
			 * <pre>
			 * [
			 *     //Will create a route called 'firstRouter' you can later use this name in navTo to navigate to this route
			 *     {
			 *         name: "firstRoute"
			 *         pattern : "usefulPattern"
			 *     },
			 *     //Will create a route called 'anotherRoute'
			 *     {
			 *         name: "anotherRoute"
			 *         pattern : "anotherPattern"
			 *     }
			 * ]
			 * </pre>
			 * 
			 * The alternative way of defining routes is an Object.<br/>
			 * If you choose this way, the name attribute is the name of the property.
			 * <pre>
			 * {
			 *     //Will create a route called 'firstRouter' you can later use this name in navTo to navigate to this route
			 *     firstRoute : {
			 *         pattern : "usefulPattern"
			 *     },
			 *     //Will create a route called 'anotherRoute'
			 *     anotherRoute : {
			 *         pattern : "anotherPattern"
			 *     }
			 * }
			 * </pre>
			 * The values that may be provided are the same as in {@link sap.ui.core.routing.Route#constructor}(optional)
			 * @param oConfig Default values for route configuration - also takes the same parameters as {@link sap.ui.core.routing.Target#constructor}.<br/>
			 * This config will be used for routes and for targets, used in the router<br/>
			 * Eg: if the config object specifies :
			 * <pre>
			 * <code>
			 * { viewType : "XML" }
			 * </code>
			 * </pre>
			 * The targets look like this:
			 * <pre>
			 * {
			 *     xmlTarget : {
			 *         ...
			 *     },
			 *     jsTarget : {
			 *         viewType : "JS"
			 *         ...
			 *     }
			 * }
			 * </pre>
			 * Then the effective config will look like this:
			 * <pre>
			 * {
			 *     xmlTarget : {
			 *         viewType : "XML"
			 *         ...
			 *     },
			 *     jsTarget : {
			 *         viewType : "JS"
			 *         ...
			 *     }
			 * }
			 * </pre>
			 * 
			 * Since the xmlTarget does not specify its viewType, XML is taken from the config object. The jsTarget is specifying it, so the viewType will be JS.<br/>(optional)
			 * @param oOwner the Component of all the views that will be created by this Router,<br/>
			 * will get forwarded to the {@link sap.ui.core.routing.Views#contructor}.<br/>
			 * If you are using the componentMetadata to define your routes you should skip this parameter.<br/>(optional)
			 * @param oTargetsConfig the target configuration, see {@link sap.m.routing.Targets#constructor} documentation (the options object).<br/>
			 * You should use Targets to create and display views. The route should only contain routing relevant properties.<br/>
			 * <b>Example:</b>
			 * <pre>
			 * <code>
			 *     new Router(
			 *     // Routes
			 *     [
			 *         {
			 *             // no view creation related properties are in the route
			 *             name: "startRoute",
			 *             //no hash
			 *             pattern: "",
			 *             // you can find this target in the targetConfig
			 *             target: "welcome"
			 *         }
			 *     ],
			 *     // Default values shared by routes and Targets
			 *     {
			 *         viewNamespace: "my.application.namespace",
			 *         viewType: "XML"
			 *     },
			 *     // You should only use this constructor when you are not using a router with a component.
			 *     // Please use the metadata of a component to define your routes and targets.
			 *     // The documentation can be found here: {@link sap.ui.core.UIComponent#.extend}.
			 *     null,
			 *     // Target config
			 *     {
			 *          //same name as in the route called 'startRoute'
			 *          welcome: {
			 *              // All properties for creating and placing a view go here or in the config
			 *              viewName: "Welcome",
			 *              controlId: "app",
			 *              controlAggregation: "pages"
			 *          }
			 *     })
			 * </code>
			 * </pre>(optional)
			 */
			constructor(oRoutes?: any|any[], oConfig?: any, oOwner?: sap.ui.core.UIComponent, oTargetsConfig?: any);
			/**
			 * Creates a new subclass of class sap.m.routing.Router with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.routing.Router.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Returns the TargetHandler instance.
			 * @return the TargetHandler instance
			 */
			getTargetHandler(): TargetHandler;
		}
	
		class TargetHandler  {
			/**
			 * Instantiates a TargetHandler, a class used for closing dialogs and showing transitions in NavContainers when targets are displayed.<br/>
			 * <b>You should not create an own instance of this class.</b> It will be created when using {@link sap.m.routing.Router} or {@link sap.m.routing.Targets}.
			 * You may use the {@link #setCloseDialogs} function to specify if dialogs should be closed on displaying other views.
			 * @param closeDialogs the default is true - will close all open dialogs before navigating, if set to true. If set to false it will just navigate without closing dialogs.
			 */
			constructor(closeDialogs: boolean);
			/**
			 * Creates a new subclass of class sap.m.routing.TargetHandler with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend Object.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets if a navigation should close dialogs
			 * @return a flag indication if dialogs will be closed
			 */
			getCloseDialogs(): boolean;
			/**
			 * Sets if a navigation should close dialogs
			 * @param bCloseDialogs close dialogs if true
			 * @return for chaining
			 */
			setCloseDialogs(bCloseDialogs: boolean): TargetHandler;
		}
	
		class Targets extends sap.ui.core.routing.Targets {
			/**
			 * Provides a convenient way for placing views into the correct containers of your application.
			 * The mobile extension of Targets also handles the triggering of page navigation when the target control is a {@link sap.m.SplitContainer}, a {@link sap.m.NavContainer} or a control which extends one of these.
			 * Other controls are also allowed, but the extra parameters viewLevel, transition and transitionParameters are ignored and it will behave like {@link sap.ui.core.routing.Targets}.
			 * When a target is displayed, dialogs will be closed. To change this use {@link #getTargetHandler} and {@link sap.m.routing.TargetHandler#setCloseDialogs}.
			 * @param oOptions 
			 */
			constructor(oOptions: any);
			/**
			 * Creates a new subclass of class sap.m.routing.Targets with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.routing.Targets.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Returns the TargetHandler instance.
			 * @return the TargetHandler instance
			 */
			getTargetHandler(): TargetHandler;
		}
	}

	class ScreenSize {
		/**
		 * 1024px wide
		 */
		static Desktop: string;
		/**
		 * 768px wide
		 */
		static Large: string;
		/**
		 * 560px wide
		 */
		static Medium: string;
		/**
		 * 240px wide
		 */
		static Phone: string;
		/**
		 * 480px wide
		 */
		static Small: string;
		/**
		 * 600px wide
		 */
		static Tablet: string;
		/**
		 * 960px wide
		 */
		static XLarge: string;
		/**
		 * 320px wide
		 */
		static XSmall: string;
		/**
		 * 1120px wide
		 */
		static XXLarge: string;
		/**
		 * 240px wide
		 */
		static XXSmall: string;
	}

	class ScrollContainer extends sap.ui.core.Control {
		/**
		 * Constructor for a new ScrollContainer.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.ScrollContainerMetadata);
		/**
		 * Constructor for a new ScrollContainer.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some content to the aggregation <code>content</code>.
		 * @param oContent the content to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addContent(oContent: sap.ui.core.Control): ScrollContainer;
		/**
		 * Destroys all the content in the aggregation <code>content</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyContent(): ScrollContainer;
		/**
		 * Creates a new subclass of class sap.m.ScrollContainer with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ScrollContainerMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets content of aggregation <code>content</code>.
		 * 
		 * The content of the ScrollContainer.
		 * @return 
		 */
		getContent(): sap.ui.core.Control[];
		/**
		 * Gets current value of property <code>focusable</code>.
		 * 
		 * Whether the scroll container can be focused.
		 * 
		 * Note that it should be set to "true" when there are no focusable elements inside or when keyboard interaction requires an additional tab stop on the container.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>focusable</code>
		 */
		getFocusable(): boolean;
		/**
		 * Gets current value of property <code>height</code>.
		 * 
		 * The height of the ScrollContainer.
		 * By default the height equals the content height. If only horizontal scrolling is used, do not set the height or make sure the height is always larger than the height of the content.
		 * 
		 * Note that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.
		 * 
		 * Default value is <code>auto</code>.
		 * @return Value of property <code>height</code>
		 */
		getHeight(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>horizontal</code>.
		 * 
		 * Whether horizontal scrolling should be possible.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>horizontal</code>
		 */
		getHorizontal(): boolean;
		/**
		 * Gets current value of property <code>vertical</code>.
		 * 
		 * Whether vertical scrolling should be possible.
		 * 
		 * Note that this is off by default because typically a Page is used as fullscreen element which can handle vertical scrolling. If this is not the case and vertical scrolling is required, this flag needs to be set to "true".
		 * Important: it is not supported to have nested controls that both enable scrolling into the same dimension.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>vertical</code>
		 */
		getVertical(): boolean;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * The width of the ScrollContainer.
		 * If not set, it consumes the complete available width, behaving like normal HTML block elements. If only vertical scrolling is enabled, make sure the content always fits or wraps.
		 * 
		 * Default value is <code>auto</code>.
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oContent The content whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfContent(oContent: sap.ui.core.Control): number;
		/**
		 * Inserts a content into the aggregation <code>content</code>.
		 * @param oContent the content to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the content should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the content is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertContent(oContent: sap.ui.core.Control, iIndex: number): ScrollContainer;
		/**
		 * Removes all the controls from the aggregation <code>content</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllContent(): sap.ui.core.Control[];
		/**
		 * Removes a content from the aggregation <code>content</code>.
		 * @param vContent The content to remove or its index or id
		 * @return The removed content or <code>null</code>
		 */
		removeContent(vContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
		/**
		 * Scrolls to the given position.
		 * When called while the control is not rendered (yet), the scrolling position is still applied, but there is no animation.
		 * @param x The horizontal pixel position to scroll to.
		 *         Scrolling to the right happens with positive values. In right-to-left mode scrolling starts at the right side and higher values scroll to the left.
		 *         If only vertical scrolling is enabled, give 0 as value.
		 * @param y The vertical pixel position to scroll to.
		 *         Scrolling down happens with positive values.
		 *         If only horizontal scrolling is enabled, give 0 as value.
		 * @param time The duration of animated scrolling.
		 *         To scroll immediately without animation, give 0 as value. 0 is also the default value, when this optional parameter is omitted.
		 * @return 
		 */
		scrollTo(x: number, y: number, time: number): ScrollContainer;
		/**
		 * Scrolls to an element(DOM or sap.ui.core.Element) within the page if the element is rendered.
		 * @param element The element to which should be scrolled.
		 * @param time The duration of animated scrolling. To scroll immediately without animation, give 0 as value or leave it default.(optional)
		 * @return <code>this</code> to facilitate method chaining.
		 */
		scrollToElement(element: any|sap.ui.core.Element, time?: number): ScrollContainer;
		/**
		 * Sets a new value for property <code>focusable</code>.
		 * 
		 * Whether the scroll container can be focused.
		 * 
		 * Note that it should be set to "true" when there are no focusable elements inside or when keyboard interaction requires an additional tab stop on the container.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bFocusable New value for property <code>focusable</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setFocusable(bFocusable: boolean): ScrollContainer;
		/**
		 * Sets a new value for property <code>height</code>.
		 * 
		 * The height of the ScrollContainer.
		 * By default the height equals the content height. If only horizontal scrolling is used, do not set the height or make sure the height is always larger than the height of the content.
		 * 
		 * Note that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>auto</code>.
		 * @param sHeight New value for property <code>height</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHeight(sHeight: sap.ui.core.CSSSize): ScrollContainer;
		/**
		 * Sets a new value for property <code>horizontal</code>.
		 * 
		 * Whether horizontal scrolling should be possible.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bHorizontal New value for property <code>horizontal</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHorizontal(bHorizontal: boolean): ScrollContainer;
		/**
		 * Sets a new value for property <code>vertical</code>.
		 * 
		 * Whether vertical scrolling should be possible.
		 * 
		 * Note that this is off by default because typically a Page is used as fullscreen element which can handle vertical scrolling. If this is not the case and vertical scrolling is required, this flag needs to be set to "true".
		 * Important: it is not supported to have nested controls that both enable scrolling into the same dimension.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bVertical New value for property <code>vertical</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setVertical(bVertical: boolean): ScrollContainer;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * The width of the ScrollContainer.
		 * If not set, it consumes the complete available width, behaving like normal HTML block elements. If only vertical scrolling is enabled, make sure the content always fits or wraps.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>auto</code>.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): ScrollContainer;
	}

	class SearchField extends sap.ui.core.Control {
		/**
		 * Constructor for a new SearchField.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.SearchFieldMetadata);
		/**
		 * Constructor for a new SearchField.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID|sap.ui.core.Control): SearchField;
		/**
		 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): SearchField;
		/**
		 * Adds some suggestionItem to the aggregation <code>suggestionItems</code>.
		 * @param oSuggestionItem the suggestionItem to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addSuggestionItem(oSuggestionItem: SuggestionItem): SearchField;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>liveChange</code> event of this <code>sap.m.SearchField</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.SearchField</code> itself.
		 * 
		 * This event is fired when the value of the search field is changed by a user - e.g. at each key press. Do not invalidate or re-render a focused search field, especially during the liveChange event.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.SearchField</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachLiveChange(oData: any, fnFunction: any, oListener?: any): SearchField;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>search</code> event of this <code>sap.m.SearchField</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.SearchField</code> itself.
		 * 
		 * Event which is fired when the user triggers a search.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.SearchField</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachSearch(oData: any, fnFunction: any, oListener?: any): SearchField;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>suggest</code> event of this <code>sap.m.SearchField</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.SearchField</code> itself.
		 * 
		 * This event is fired when the search field is initially focused or its value is changed by the user.
		 * This event means that suggestion data should be updated, in case if suggestions are used.
		 * Use the value parameter to create new suggestions for it.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.SearchField</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachSuggest(oData: any, fnFunction: any, oListener?: any): SearchField;
		/**
		 * Binds property <code>value</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindValue(oBindingInfo: any): SearchField;
		/**
		 * Destroys all the suggestionItems in the aggregation <code>suggestionItems</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroySuggestionItems(): SearchField;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>liveChange</code> event of this <code>sap.m.SearchField</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachLiveChange(fnFunction: any, oListener: any): SearchField;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>search</code> event of this <code>sap.m.SearchField</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachSearch(fnFunction: any, oListener: any): SearchField;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>suggest</code> event of this <code>sap.m.SearchField</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachSuggest(fnFunction: any, oListener: any): SearchField;
		/**
		 * Creates a new subclass of class sap.m.SearchField with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|SearchFieldMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>liveChange</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>newValue</code> of type <code>string</code>Current search string.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireLiveChange(mArguments?: any): SearchField;
		/**
		 * Fires event <code>search</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>query</code> of type <code>string</code>The search query string.</li>
		 * <li><code>suggestionItem</code> of type <code>sap.m.SuggestionItem</code>Suggestion list item in case if the user has selected an item from the suggestions list.</li>
		 * <li><code>refreshButtonPressed</code> of type <code>boolean</code>Indicates if the user pressed the refresh icon.</li>
		 * <li><code>clearButtonPressed</code> of type <code>boolean</code>Indicates if the user pressed the clear icon.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireSearch(mArguments?: any): SearchField;
		/**
		 * Fires event <code>suggest</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>suggestValue</code> of type <code>string</code>Current search string of the search field.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireSuggest(mArguments?: any): SearchField;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaDescribedBy</code>.
		 * @return 
		 */
		getAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
		 * @return 
		 */
		getAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Gets current value of property <code>enabled</code>.
		 * 
		 * Boolean property to enable the control (default is true).
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>enabled</code>
		 */
		getEnabled(): boolean;
		/**
		 * Gets current value of property <code>enableSuggestions</code>.
		 * 
		 * If true, a <code>suggest</code> event is fired when user types in the input and when the input is focused.
		 * On a phone device, a full screen dialog with suggestions is always shown even if the suggestions list is empty.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>enableSuggestions</code>
		 */
		getEnableSuggestions(): boolean;
		/**
		 * Gets current value of property <code>maxLength</code>.
		 * 
		 * Maximum number of characters. Value '0' means the feature is switched off.
		 * 
		 * Default value is <code>0</code>.
		 * @return Value of property <code>maxLength</code>
		 */
		getMaxLength(): number;
		/**
		 * Gets current value of property <code>placeholder</code>.
		 * 
		 * Text shown when no value available. Default placeholder text is the word "Search" in the current local language (if supported) or in English.
		 * @return Value of property <code>placeholder</code>
		 */
		getPlaceholder(): string;
		/**
		 * Function returns DOM element which acts as reference point for the opening suggestion menu
		 * @return the DOM element at which to open the suggestion list
		 */
		getPopupAnchorDomRef(): any;
		/**
		 * Gets current value of property <code>refreshButtonTooltip</code>.
		 * 
		 * Tooltip text of the refresh button. If it is not set, the tooltip of the SearchField (if any) is displayed. Tooltips are not displayed on touch devices.
		 * @return Value of property <code>refreshButtonTooltip</code>
		 */
		getRefreshButtonTooltip(): string;
		/**
		 * Gets current value of property <code>showRefreshButton</code>.
		 * 
		 * Set to true to display a refresh button in place of the search icon. By pressing the refresh button or F5 key on keyboard, the user can reload the results list without changing the search string.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>showRefreshButton</code>
		 */
		getShowRefreshButton(): boolean;
		/**
		 * Gets current value of property <code>showSearchButton</code>.
		 * 
		 * Set to true to show the search button with the magnifier icon.
		 * If false, both the search and refresh buttons are not displayed even if the "showRefreshButton" property is true.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>showSearchButton</code>
		 */
		getShowSearchButton(): boolean;
		/**
		 * Gets content of aggregation <code>suggestionItems</code>.
		 * 
		 * <code>SuggestionItems</code> are the items which will be shown in the suggestions list.
		 * The following properties can be used:
		 * <ul>
		 * <li><code>key</code> is not displayed and may be used as internal technical field</li>
		 * <li><code>text</code> is displayed as normal suggestion text</li>
		 * <li><code>icon</code></li>
		 * <li><code>description</code> - additional text may be used to visually display search item type or category</li>
		 * </ul>
		 * @return 
		 */
		getSuggestionItems(): SuggestionItem[];
		/**
		 * Gets current value of property <code>value</code>.
		 * 
		 * Input Value.
		 * @return Value of property <code>value</code>
		 */
		getValue(): string;
		/**
		 * Gets current value of property <code>visible</code>.
		 * 
		 * Invisible inputs are not rendered.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>visible</code>
		 */
		getVisible(): boolean;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Defines the CSS width of the input. If not set, width is 100%.
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Checks for the provided <code>sap.m.SuggestionItem</code> in the aggregation <code>suggestionItems</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oSuggestionItem The suggestionItem whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfSuggestionItem(oSuggestionItem: SuggestionItem): number;
		/**
		 * Inserts a suggestionItem into the aggregation <code>suggestionItems</code>.
		 * @param oSuggestionItem the suggestionItem to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the suggestionItem should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the suggestionItem is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the suggestionItem is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertSuggestionItem(oSuggestionItem: SuggestionItem, iIndex: number): SearchField;
		/**
		 * Removes all the controls in the association named <code>ariaDescribedBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Removes all the controls from the aggregation <code>suggestionItems</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllSuggestionItems(): SuggestionItem[];
		/**
		 * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
		 * @return The removed ariaDescribedBy or <code>null</code>
		 */
		removeAriaDescribedBy(vAriaDescribedBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
		 * @return The removed ariaLabelledBy or <code>null</code>
		 */
		removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Removes a suggestionItem from the aggregation <code>suggestionItems</code>.
		 * @param vSuggestionItem The suggestionItem to remove or its index or id
		 * @return The removed suggestionItem or <code>null</code>
		 */
		removeSuggestionItem(vSuggestionItem: number|string|SuggestionItem): SuggestionItem;
		/**
		 * Sets a new value for property <code>enabled</code>.
		 * 
		 * Boolean property to enable the control (default is true).
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bEnabled New value for property <code>enabled</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setEnabled(bEnabled: boolean): SearchField;
		/**
		 * Sets a new value for property <code>enableSuggestions</code>.
		 * 
		 * If true, a <code>suggest</code> event is fired when user types in the input and when the input is focused.
		 * On a phone device, a full screen dialog with suggestions is always shown even if the suggestions list is empty.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bEnableSuggestions New value for property <code>enableSuggestions</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setEnableSuggestions(bEnableSuggestions: boolean): SearchField;
		/**
		 * Sets a new value for property <code>maxLength</code>.
		 * 
		 * Maximum number of characters. Value '0' means the feature is switched off.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>0</code>.
		 * @param iMaxLength New value for property <code>maxLength</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMaxLength(iMaxLength: number): SearchField;
		/**
		 * Sets a new value for property <code>placeholder</code>.
		 * 
		 * Text shown when no value available. Default placeholder text is the word "Search" in the current local language (if supported) or in English.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sPlaceholder New value for property <code>placeholder</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setPlaceholder(sPlaceholder: string): SearchField;
		/**
		 * Sets a new value for property <code>refreshButtonTooltip</code>.
		 * 
		 * Tooltip text of the refresh button. If it is not set, the tooltip of the SearchField (if any) is displayed. Tooltips are not displayed on touch devices.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sRefreshButtonTooltip New value for property <code>refreshButtonTooltip</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setRefreshButtonTooltip(sRefreshButtonTooltip: string): SearchField;
		/**
		 * Sets a new value for property <code>showRefreshButton</code>.
		 * 
		 * Set to true to display a refresh button in place of the search icon. By pressing the refresh button or F5 key on keyboard, the user can reload the results list without changing the search string.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bShowRefreshButton New value for property <code>showRefreshButton</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowRefreshButton(bShowRefreshButton: boolean): SearchField;
		/**
		 * Sets a new value for property <code>showSearchButton</code>.
		 * 
		 * Set to true to show the search button with the magnifier icon.
		 * If false, both the search and refresh buttons are not displayed even if the "showRefreshButton" property is true.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bShowSearchButton New value for property <code>showSearchButton</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowSearchButton(bShowSearchButton: boolean): SearchField;
		/**
		 * Sets a new value for property <code>value</code>.
		 * 
		 * Input Value.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sValue New value for property <code>value</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setValue(sValue: string): SearchField;
		/**
		 * Sets a new value for property <code>visible</code>.
		 * 
		 * Invisible inputs are not rendered.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bVisible New value for property <code>visible</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setVisible(bVisible: boolean): SearchField;
		/**
		 * Sets a new value for property <code>visible</code>.
		 * 
		 * Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead of the real control
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @note Overload from base type sap.ui.core.Control
		 * @param bVisible New value for property <code>visible</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setVisible(bVisible: boolean): sap.ui.core.Control;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Defines the CSS width of the input. If not set, width is 100%.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): SearchField;
		/**
		 * Toggle visibility of the suggestion list.
		 * @param bShow set to <code>true</code> to display suggestions and <code>false</code> to hide them. Default value is <code>true</code>.
		 * An empty suggestion list is not shown on desktop and tablet devices.<br>
		 * 
		 * This method may be called only as a response to the <code>suggest</code> event to ensure that the suggestion list is shown
		 * at the moment when the user expects it.
		 * @return <code>this</code> to allow method chaining
		 */
		suggest(bShow: boolean|any): SearchField;
		/**
		 * Unbinds property <code>value</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindValue(): SearchField;
	}

	class SegmentedButton extends sap.ui.core.Control {
		/**
		 * Constructor for a new SegmentedButton.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.SegmentedButtonMetadata);
		/**
		 * Constructor for a new SegmentedButton.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID|sap.ui.core.Control): SegmentedButton;
		/**
		 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): SegmentedButton;
		/**
		 * Adds some item to the aggregation <code>items</code>.
		 * @param oItem the item to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addItem(oItem: SegmentedButtonItem): SegmentedButton;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>select</code> event of this <code>sap.m.SegmentedButton</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.SegmentedButton</code> itself.
		 * 
		 * Fires when the user selects a button, which returns the ID and button object.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.SegmentedButton</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachSelect(oData: any, fnFunction: any, oListener?: any): SegmentedButton;
		/**
		 * Binds aggregation <code>items</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindItems(oBindingInfo: any): SegmentedButton;
		/**
		 * Binds property <code>selectedKey</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindSelectedKey(oBindingInfo: any): SegmentedButton;
		/**
		 * Adds a Button with a text as title, an URI for an icon, enabled and textDirection.
		 * Only one is allowed.
		 * @param sText Defines the title text of the newly created Button
		 * @param sURI Icon to be displayed as graphical element within the Button.
		 *         Density related image will be loaded if image with density awareness name in format [imageName]@[densityValue].[extension] is provided.
		 * @param bEnabled Enables the control (default is true). Buttons that are disabled have other colors than enabled ones, depending on custom settings.
		 * @param sTextDirection Element's text directionality with enumerated options(optional)
		 * @return The created Button
		 */
		createButton(sText: string, sURI: sap.ui.core.URI, bEnabled: boolean, sTextDirection?: sap.ui.core.TextDirection): Button;
		/**
		 * Destroys all the items in the aggregation <code>items</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyItems(): SegmentedButton;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>select</code> event of this <code>sap.m.SegmentedButton</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachSelect(fnFunction: any, oListener: any): SegmentedButton;
		/**
		 * Creates a new subclass of class sap.m.SegmentedButton with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|SegmentedButtonMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>select</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>button</code> of type <code>sap.m.Button</code>Reference to the button, that has been selected.</li>
		 * <li><code>id</code> of type <code>string</code>ID of the button, which has been selected.</li>
		 * <li><code>key</code> of type <code>string</code>Key of the button, which has been selected. This property is only filled when the control is initiated with the items aggregation.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireSelect(mArguments?: any): SegmentedButton;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaDescribedBy</code>.
		 * @return 
		 */
		getAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
		 * @return 
		 */
		getAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Gets current value of property <code>enabled</code>.
		 * 
		 * Disables all the buttons in the SegmentedButton control. When disabled all the buttons look grey and you cannot focus or click on them.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>enabled</code>
		 */
		getEnabled(): boolean;
		/**
		 * Gets content of aggregation <code>items</code>.
		 * 
		 * Aggregation of items to be displayed. The items set in this aggregation are used as an interface for the buttons displayed by the control.
		 * The "items" and "buttons" aggregations should NOT be used simultaneously as it causes the control to work incorrectly.
		 * @return 
		 */
		getItems(): SegmentedButtonItem[];
		/**
		 * ID of the element which is the current target of the association <code>selectedButton</code>, or <code>null</code>.
		 * @return 
		 */
		getSelectedButton(): sap.ui.core.ID;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Defines the width of the SegmentedButton control. If not set, it uses the minimum required width to make all buttons inside of the same size (based on the biggest button).
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Checks for the provided <code>sap.m.SegmentedButtonItem</code> in the aggregation <code>items</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oItem The item whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfItem(oItem: SegmentedButtonItem): number;
		/**
		 * Inserts a item into the aggregation <code>items</code>.
		 * @param oItem the item to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the item should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the item is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertItem(oItem: SegmentedButtonItem, iIndex: number): SegmentedButton;
		/**
		 * Removes all the controls in the association named <code>ariaDescribedBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Removes all the controls from the aggregation <code>items</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllItems(): SegmentedButtonItem[];
		/**
		 * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
		 * @return The removed ariaDescribedBy or <code>null</code>
		 */
		removeAriaDescribedBy(vAriaDescribedBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
		 * @return The removed ariaLabelledBy or <code>null</code>
		 */
		removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Removes a item from the aggregation <code>items</code>.
		 * @param vItem The item to remove or its index or id
		 * @return The removed item or <code>null</code>
		 */
		removeItem(vItem: number|string|SegmentedButtonItem): SegmentedButtonItem;
		/**
		 * Sets a new value for property <code>enabled</code>.
		 * 
		 * Disables all the buttons in the SegmentedButton control. When disabled all the buttons look grey and you cannot focus or click on them.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bEnabled New value for property <code>enabled</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setEnabled(bEnabled: boolean): SegmentedButton;
		/**
		 * Setter for association <code>selectedButton</code>.
		 * @param vButton New value for association <code>setSelectedButton</code>
		 *    A sap.m.Button instance which becomes the new target of this <code>selectedButton</code> association.
		 *    Alternatively, the ID of a sap.m.Button instance may be given as a string.
		 *    If the value of null, undefined, or an empty string is provided the first item will be selected.
		 * @return <code>this</code> this pointer for chaining
		 */
		setSelectedButton(vButton: string|Button|any): SegmentedButton;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Defines the width of the SegmentedButton control. If not set, it uses the minimum required width to make all buttons inside of the same size (based on the biggest button).
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): SegmentedButton;
		/**
		 * Unbinds aggregation <code>items</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindItems(): SegmentedButton;
		/**
		 * Unbinds property <code>selectedKey</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindSelectedKey(): SegmentedButton;
	}

	class SegmentedButtonItem extends sap.ui.core.Item {
		/**
		 * Constructor for a new SegmentedButtonItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.SegmentedButtonItemMetadata);
		/**
		 * Constructor for a new SegmentedButtonItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this <code>sap.m.SegmentedButtonItem</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.SegmentedButtonItem</code> itself.
		 * 
		 * Fires when the user clicks on an individual button.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.SegmentedButtonItem</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachPress(oData: any, fnFunction: any, oListener?: any): SegmentedButtonItem;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this <code>sap.m.SegmentedButtonItem</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachPress(fnFunction: any, oListener: any): SegmentedButtonItem;
		/**
		 * Creates a new subclass of class sap.m.SegmentedButtonItem with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|SegmentedButtonItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Item with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Item
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>press</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		firePress(mArguments?: any): SegmentedButtonItem;
		/**
		 * Gets current value of property <code>icon</code>.
		 * 
		 * The icon, which belongs to the button.
		 * This can be an URI to an image or an icon font URI.
		 * @return Value of property <code>icon</code>
		 */
		getIcon(): string;
		/**
		 * Gets current value of property <code>visible</code>.
		 * 
		 * Whether the button should be visible on the screen. If set to false, a placeholder is rendered instead of the real button.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>visible</code>
		 */
		getVisible(): boolean;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Sets the width of the buttons.
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Sets a new value for property <code>icon</code>.
		 * 
		 * The icon, which belongs to the button.
		 * This can be an URI to an image or an icon font URI.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sIcon New value for property <code>icon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIcon(sIcon: string): SegmentedButtonItem;
		/**
		 * Sets a new value for property <code>visible</code>.
		 * 
		 * Whether the button should be visible on the screen. If set to false, a placeholder is rendered instead of the real button.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bVisible New value for property <code>visible</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setVisible(bVisible: boolean): SegmentedButtonItem;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Sets the width of the buttons.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): SegmentedButtonItem;
	}

	class Select extends sap.ui.core.Control {
		/**
		 * Constructor for a new <code>sap.m.Select</code>.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given.(optional)
		 * @param mSettings Initial settings for the new control.(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.SelectMetadata);
		/**
		 * Constructor for a new <code>sap.m.Select</code>.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given.(optional)
		 * @param mSettings Initial settings for the new control.(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): Select;
		/**
		 * Adds an item to the aggregation named <code>items</code>.
		 * @param oItem The item to be added; if empty, nothing is added.
		 * @return <code>this</code> to allow method chaining.
		 */
		addItem(oItem: sap.ui.core.Item): Select;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>change</code> event of this <code>sap.m.Select</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Select</code> itself.
		 * 
		 * This event is fired when the value in the selection field is changed in combination with one of
		 * the following actions:
		 * <ul>
		 * 	<li>The focus leaves the selection field</li>
		 * 	<li>The <i>Enter</i> key is pressed</li>
		 * 	<li>The item is pressed</li>
		 * </ul>
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Select</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachChange(oData: any, fnFunction: any, oListener?: any): Select;
		/**
		 * Binds aggregation <code>items</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindItems(oBindingInfo: any): Select;
		/**
		 * Closes the control's picker popup.
		 * @return <code>this</code> to allow method chaining.
		 */
		close(): Select;
		/**
		 * Creates a picker popup container where the selection should take place.
		 * @param sPickerType 
		 * @return 
		 */
		createPicker(sPickerType: string): Popover|Dialog;
		/**
		 * Destroys all the items in the aggregation named <code>items</code>.
		 * @return <code>this</code> to allow method chaining.
		 */
		destroyItems(): Select;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>change</code> event of this <code>sap.m.Select</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachChange(fnFunction: any, oListener: any): Select;
		/**
		 * Creates a new subclass of class sap.m.Select with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|SelectMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>change</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>selectedItem</code> of type <code>sap.ui.core.Item</code>The selected item.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireChange(mArguments?: any): Select;
		/**
		 * 
		 */
		getAccessibilityInfo();
		/**
		 * This function (if available on the concrete control) provides
		 * the current accessibility state of the control.
		 * 
		 * Applications must not call this hook method directly, it is called by the framework.
		 * 
		 * Subclasses of Control should implement this hook to provide any necessary accessibility information:
		 * 
		 * <pre>
		 * MyControl.prototype.getAccessibilityInfo = function() {
		 *    return {
		 *      role: "textbox",      // String which represents the WAI-ARIA role which is implemented by the control.
		 *      type: "date input",   // String which represents the control type (Must be a translated text). Might correlate with
		 *                            // the role.
		 *      description: "value", // String which describes the most relevant control state (e.g. the inputs value). Must be a
		 *                            // translated text.
		 *                            // Note: The type and the enabled/editable state must not be handled here.
		 *      focusable: true,      // Boolean which describes whether the control can get the focus.
		 *      enabled: true,        // Boolean which describes whether the control is enabled. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      editable: true,       // Boolean which describes whether the control is editable. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      children: []          // Array of accessibility info objects of children of the given control (e.g. when the control is a layout).
		 *                            // Note: Children should only be provided when it is helpful to understand the accessibility context
		 *                            //       (e.g. a form control must not provide details of its internals (fields, labels, ...) but a
		 *                            //       layout should).
		 *    };
		 * };
		 * </pre>
		 * 
		 * Note: The returned object provides the accessibility state of the control at the point in time when this function is called.
		 * @note Overload from base type sap.ui.core.Control
		 * @return Current accessibility state of the control.
		 */
		getAccessibilityInfo(): any;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
		 * @return 
		 */
		getAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Gets current value of property <code>autoAdjustWidth</code>.
		 * 
		 * Indicates whether the width of the input field is determined by the selected item's content.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>autoAdjustWidth</code>
		 */
		getAutoAdjustWidth(): boolean;
		/**
		 * Gets current value of property <code>enabled</code>.
		 * 
		 * Indicates whether the user can change the selection.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>enabled</code>
		 */
		getEnabled(): boolean;
		/**
		 * Gets the enabled items from the aggregation named <code>items</code>.
		 * @param aItems Items to filter.(optional)
		 * @return An array containing the enabled items.
		 */
		getEnabledItems(aItems?: sap.ui.core.Item[]): sap.ui.core.Item[];
		/**
		 * Gets the first item from the aggregation named <code>items</code>.
		 * @return The first item, or null if there are no items.
		 */
		getFirstItem(): sap.ui.core.Item;
		/**
		 * Gets current value of property <code>forceSelection</code>.
		 * 
		 * Indicates whether the selection is restricted to one of the items in the list.
		 * <b>Note:</b> We strongly recommend that you always set this property to <code>false</code> and bind
		 * the <code>selectedKey</code> property to the desired value for better interoperability with data binding.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>forceSelection</code>
		 */
		getForceSelection(): boolean;
		/**
		 * Gets current value of property <code>icon</code>.
		 * 
		 * The URI to the icon that will be displayed only when using the <code>IconOnly</code> type.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>icon</code>
		 */
		getIcon(): sap.ui.core.URI;
		/**
		 * Gets the item from the aggregation named <code>items</code> at the given 0-based index.
		 * @param iIndex Index of the item to return.
		 * @return Item at the given index, or null if none.
		 */
		getItemAt(iIndex: number): sap.ui.core.Item;
		/**
		 * Gets the item with the given key from the aggregation named <code>items</code>.
		 * 
		 * <b>Note: </b> If duplicate keys exist, the first item matching the key is returned.
		 * @param sKey An item key that specifies the item to be retrieved.
		 * @return 
		 */
		getItemByKey(sKey: string): sap.ui.core.Item;
		/**
		 * Gets aggregation <code>items</code>.
		 * 
		 * <b>Note</b>: This is the default aggregation.
		 * @return 
		 */
		getItems(): sap.ui.core.Item[];
		/**
		 * Gets the last item from the aggregation named <code>items</code>.
		 * @return The last item, or null if there are no items.
		 */
		getLastItem(): sap.ui.core.Item;
		/**
		 * Gets current value of property <code>maxWidth</code>.
		 * 
		 * Sets the maximum width of the control.
		 * 
		 * <b>Note:</b> This property is ignored if the <code>autoAdjustWidth</code> property is set to <code>true</code>.
		 * 
		 * Default value is <code>100%</code>.
		 * @return Value of property <code>maxWidth</code>
		 */
		getMaxWidth(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>name</code>.
		 * 
		 * The name to be used in the HTML code (for example, for HTML forms that send data to the server via submit).
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>name</code>
		 */
		getName(): string;
		/**
		 * Gets the selected item object from the aggregation named <code>items</code>.
		 * @return The current target of the <code>selectedItem</code> association, or null.
		 */
		getSelectedItem(): sap.ui.core.Item;
		/**
		 * Gets current value of property <code>selectedItemId</code>.
		 * 
		 * ID of the selected item.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>selectedItemId</code>
		 */
		getSelectedItemId(): string;
		/**
		 * Gets current value of property <code>selectedKey</code>.
		 * 
		 * Key of the selected item.
		 * 
		 * <b>Note:</b> If duplicate keys exist, the first item matching the key is used.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>selectedKey</code>
		 */
		getSelectedKey(): string;
		/**
		 * Gets current value of property <code>showSecondaryValues</code>.
		 * 
		 * Indicates whether the text values of the <code>additionalText</code> property of a
		 * {@link sap.ui.core.ListItem} are shown.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>showSecondaryValues</code>
		 */
		getShowSecondaryValues(): boolean;
		/**
		 * Gets current value of property <code>textAlign</code>.
		 * 
		 * Sets the horizontal alignment of the text within the input field.
		 * 
		 * Default value is <code>Initial</code>.
		 * @return Value of property <code>textAlign</code>
		 */
		getTextAlign(): sap.ui.core.TextAlign;
		/**
		 * Gets current value of property <code>textDirection</code>.
		 * 
		 * Specifies the direction of the text within the input field with enumerated options.
		 * By default, the control inherits text direction from the DOM.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @return Value of property <code>textDirection</code>
		 */
		getTextDirection(): sap.ui.core.TextDirection;
		/**
		 * Gets current value of property <code>type</code>.
		 * 
		 * Type of a select. Possible values <code>Default</code>, <code>IconOnly</code>.
		 * 
		 * Default value is <code>Default</code>.
		 * @return Value of property <code>type</code>
		 */
		getType(): SelectType;
		/**
		 * Gets current value of property <code>valueState</code>.
		 * 
		 * Visualizes the validation state of the control, e.g. <code>Error</code>, <code>Warning</code>,
		 * <code>Success</code>.
		 * 
		 * Default value is <code>None</code>.
		 * @return Value of property <code>valueState</code>
		 */
		getValueState(): sap.ui.core.ValueState;
		/**
		 * Gets current value of property <code>valueStateText</code>.
		 * 
		 * Defines the text of the value state message popup.
		 * If this is not specified, a default text is shown from the resource bundle.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>valueStateText</code>
		 */
		getValueStateText(): string;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Sets the width of the control. The default width is derived from the widest item.
		 * If the width defined is smaller than the widest item in the selection list, only the width of
		 * the selection field will be changed: the list will keep the width of its widest item.
		 * If the list is wider than the viewport, it is truncated and an ellipsis is displayed for each item.
		 * For phones, the width of the list is always the same as the viewport.
		 * 
		 * <b>Note:</b> This property is ignored if the <code>autoAdjustWidth</code> property is set to <code>true</code>.
		 * 
		 * Default value is <code>auto</code>.
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation <code>items</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oItem The item whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfItem(oItem: sap.ui.core.Item): number;
		/**
		 * Inserts an item into the aggregation named <code>items</code>.
		 * @param oItem The item to be inserted; if empty, nothing is inserted.
		 * @param iIndex The <code>0</code>-based index the item should be inserted at; for
		 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
		 *             greater than the current size of the aggregation, the item is inserted at the last position.
		 * @return <code>this</code> to allow method chaining.
		 */
		insertItem(oItem: sap.ui.core.Item, iIndex: number): Select;
		/**
		 * Indicates whether the control's picker popup is opened.
		 * @return Indicates whether the picker popup is currently open (this includes opening and closing animations).
		 */
		isOpen(): boolean;
		/**
		 * Open the control's picker popup.
		 * @return <code>this</code> to allow method chaining.
		 */
		open(): Select;
		/**
		 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Removes all the items in the aggregation named <code>items</code>.
		 * Additionally unregisters them from the hosting UIArea.
		 * @return An array of the removed items (might be empty).
		 */
		removeAllItems(): sap.ui.core.Item[];
		/**
		 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
		 * @return The removed ariaLabelledBy or <code>null</code>
		 */
		removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Removes an item from the aggregation named <code>items</code>.
		 * @param vItem The item to be removed or its index or ID.
		 * @return The removed item or null.
		 */
		removeItem(vItem: number|string|sap.ui.core.Item): sap.ui.core.Item;
		/**
		 * Sets a new value for property <code>autoAdjustWidth</code>.
		 * 
		 * Indicates whether the width of the input field is determined by the selected item's content.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bAutoAdjustWidth New value for property <code>autoAdjustWidth</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setAutoAdjustWidth(bAutoAdjustWidth: boolean): Select;
		/**
		 * Sets a new value for property <code>enabled</code>.
		 * 
		 * Indicates whether the user can change the selection.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bEnabled New value for property <code>enabled</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setEnabled(bEnabled: boolean): Select;
		/**
		 * Sets a new value for property <code>forceSelection</code>.
		 * 
		 * Indicates whether the selection is restricted to one of the items in the list.
		 * <b>Note:</b> We strongly recommend that you always set this property to <code>false</code> and bind
		 * the <code>selectedKey</code> property to the desired value for better interoperability with data binding.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bForceSelection New value for property <code>forceSelection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setForceSelection(bForceSelection: boolean): Select;
		/**
		 * Sets a new value for property <code>icon</code>.
		 * 
		 * The URI to the icon that will be displayed only when using the <code>IconOnly</code> type.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sIcon New value for property <code>icon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIcon(sIcon: sap.ui.core.URI): Select;
		/**
		 * Sets a new value for property <code>maxWidth</code>.
		 * 
		 * Sets the maximum width of the control.
		 * 
		 * <b>Note:</b> This property is ignored if the <code>autoAdjustWidth</code> property is set to <code>true</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>100%</code>.
		 * @param sMaxWidth New value for property <code>maxWidth</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMaxWidth(sMaxWidth: sap.ui.core.CSSSize): Select;
		/**
		 * Sets a new value for property <code>name</code>.
		 * 
		 * The name to be used in the HTML code (for example, for HTML forms that send data to the server via submit).
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sName New value for property <code>name</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setName(sName: string): Select;
		/**
		 * Sets the <code>selectedItem</code> association.
		 * 
		 * Default value is <code>null</code>.
		 * @param vItem New value for the <code>selectedItem</code> association.
		 * If an ID of a <code>sap.ui.core.Item</code> is given, the item with this ID becomes the <code>selectedItem</code> association.
		 * Alternatively, a <code>sap.ui.core.Item</code> instance may be given or <code>null</code>.
		 * If the value of <code>null</code> is provided, the first enabled item will be selected (if any items exist).
		 * @return <code>this</code> to allow method chaining.
		 */
		setSelectedItem(vItem: string|sap.ui.core.Item): Select;
		/**
		 * Sets the <code>selectedItemId</code> property.
		 * 
		 * Default value is an empty string <code>""</code> or <code>undefined</code>.
		 * @param vItem New value for property <code>selectedItemId</code>.
		 * If the provided <code>vItem</code> has a default value, the first enabled item will be selected (if any items exist).
		 * @return <code>this</code> to allow method chaining.
		 */
		setSelectedItemId(vItem: string|any): Select;
		/**
		 * Sets property <code>selectedKey</code>.
		 * 
		 * Default value is an empty string <code>""</code> or <code>undefined</code>.
		 * @param sKey New value for property <code>selectedKey</code>.
		 * If the <code>forceSelection</code> property is set to <code>true</code> and the provided <code>sKey</code> is
		 * an empty string <code>""</code> or <code>undefined</code>, the value of <code>sKey</code> is changed to match
		 * the <code>key</code> of the first enabled item and the first enabled item is selected (if any items exist).
		 * 
		 * In the case that an item has the default key value, it is selected instead.
		 * If duplicate keys exist, the first item matching the key is selected.
		 * @return <code>this</code> to allow method chaining.
		 */
		setSelectedKey(sKey: string): Select;
		/**
		 * Sets a new value for property <code>showSecondaryValues</code>.
		 * 
		 * Indicates whether the text values of the <code>additionalText</code> property of a
		 * {@link sap.ui.core.ListItem} are shown.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bShowSecondaryValues New value for property <code>showSecondaryValues</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowSecondaryValues(bShowSecondaryValues: boolean): Select;
		/**
		 * Sets a new value for property <code>textAlign</code>.
		 * 
		 * Sets the horizontal alignment of the text within the input field.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Initial</code>.
		 * @param sTextAlign New value for property <code>textAlign</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTextAlign(sTextAlign: sap.ui.core.TextAlign): Select;
		/**
		 * Sets a new value for property <code>textDirection</code>.
		 * 
		 * Specifies the direction of the text within the input field with enumerated options.
		 * By default, the control inherits text direction from the DOM.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @param sTextDirection New value for property <code>textDirection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTextDirection(sTextDirection: sap.ui.core.TextDirection): Select;
		/**
		 * Sets a new value for property <code>type</code>.
		 * 
		 * Type of a select. Possible values <code>Default</code>, <code>IconOnly</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Default</code>.
		 * @param sType New value for property <code>type</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setType(sType: SelectType): Select;
		/**
		 * Sets a new value for property <code>valueState</code>.
		 * 
		 * Visualizes the validation state of the control, e.g. <code>Error</code>, <code>Warning</code>,
		 * <code>Success</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>None</code>.
		 * @param sValueState New value for property <code>valueState</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setValueState(sValueState: sap.ui.core.ValueState): Select;
		/**
		 * Sets a new value for property <code>valueStateText</code>.
		 * 
		 * Defines the text of the value state message popup.
		 * If this is not specified, a default text is shown from the resource bundle.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sValueStateText New value for property <code>valueStateText</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setValueStateText(sValueStateText: string): Select;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Sets the width of the control. The default width is derived from the widest item.
		 * If the width defined is smaller than the widest item in the selection list, only the width of
		 * the selection field will be changed: the list will keep the width of its widest item.
		 * If the list is wider than the viewport, it is truncated and an ellipsis is displayed for each item.
		 * For phones, the width of the list is always the same as the viewport.
		 * 
		 * <b>Note:</b> This property is ignored if the <code>autoAdjustWidth</code> property is set to <code>true</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>auto</code>.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): Select;
		/**
		 * Unbinds aggregation <code>items</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindItems(): Select;
	}

	class SelectDialog extends sap.ui.core.Control {
		/**
		 * Constructor for a new SelectDialog.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.SelectDialogMetadata);
		/**
		 * Constructor for a new SelectDialog.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some item to the aggregation <code>items</code>.
		 * @param oItem the item to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addItem(oItem: ListItemBase): SelectDialog;
		/**
		 * Forward method to the inner dialog: addStyleClass
		 * @return this pointer for chaining
		 */
		addStyleClass(): SelectDialog;
		/**
		 * The string given as "sStyleClass" will be added to the "class" attribute of this control's root HTML element.
		 * 
		 * This method is intended to be used to mark controls as being of a special type for which
		 * special styling can be provided using CSS selectors that reference this style class name.
		 * 
		 * <pre>
		 * Example:
		 *    myButton.addStyleClass("myRedTextButton"); // add a CSS class to one button instance
		 * 
		 * ...and in CSS:
		 *    .myRedTextButton {
		 *       color: red;
		 *    }
		 * </pre>
		 * 
		 * This will add the CSS class "myRedTextButton" to the Button HTML and the CSS code above will then
		 * make the text in this particular button red.
		 * 
		 * Only characters allowed inside HTML attributes are allowed.
		 * Quotes are not allowed and this method will ignore any strings containing quotes.
		 * Strings containing spaces are interpreted as multiple custom style classes which are split by space and can be removed
		 * individually later by calling removeStyleClass.
		 * Multiple calls with the same sStyleClass will have no different effect than calling once.
		 * If sStyleClass is null, empty string or it contains quotes, the call is ignored.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sStyleClass the CSS class name to be added
		 * @return Returns <code>this</code> to allow method chaining
		 */
		addStyleClass(sStyleClass: string): sap.ui.core.Control;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>cancel</code> event of this <code>sap.m.SelectDialog</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.SelectDialog</code> itself.
		 * 
		 * This event will be fired when the cancel button is clicked
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.SelectDialog</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachCancel(oData: any, fnFunction: any, oListener?: any): SelectDialog;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>confirm</code> event of this <code>sap.m.SelectDialog</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.SelectDialog</code> itself.
		 * 
		 * This event will be fired when the dialog is confirmed by selecting an item in single selection mode or by pressing the confirmation button in multi selection mode . The items being selected are returned as event parameters.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.SelectDialog</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachConfirm(oData: any, fnFunction: any, oListener?: any): SelectDialog;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>liveChange</code> event of this <code>sap.m.SelectDialog</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.SelectDialog</code> itself.
		 * 
		 * This event will be fired when the value of the search field is changed by a user - e.g. at each key press
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.SelectDialog</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachLiveChange(oData: any, fnFunction: any, oListener?: any): SelectDialog;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>search</code> event of this <code>sap.m.SelectDialog</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.SelectDialog</code> itself.
		 * 
		 * This event will be fired when the search button has been clicked on the searchfield on the visual control
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.SelectDialog</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachSearch(oData: any, fnFunction: any, oListener?: any): SelectDialog;
		/**
		 * Forwards aggregations with the name of items to the internal list.
		 * @param sAggregationName The name for the binding
		 * @param oBindingInfo The configuration parameters for the binding
		 * @return this pointer for chaining
		 */
		bindAggregation(sAggregationName: string, oBindingInfo: any): SelectDialog;
		/**
		 * Bind an aggregation to the model.
		 * 
		 * The bound aggregation will use the given template, clone it for each item
		 * which exists in the bound list and set the appropriate binding context.
		 * This is a generic method which can be used to bind any aggregation to the
		 * model. A managed object may flag aggregations in the metamodel with
		 * bindable="bindable" to get typed bind<i>Something</i> methods for those aggregations.
		 * @note Overload from base type sap.ui.base.ManagedObject
		 * @param sName the aggregation to bind
		 * @param oBindingInfo the binding info
		 * @return reference to the instance itself
		 */
		bindAggregation(sName: string, oBindingInfo: any): sap.ui.base.ManagedObject;
		/**
		 * Destroys all the items in the aggregation <code>items</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyItems(): SelectDialog;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>cancel</code> event of this <code>sap.m.SelectDialog</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachCancel(fnFunction: any, oListener: any): SelectDialog;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>confirm</code> event of this <code>sap.m.SelectDialog</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachConfirm(fnFunction: any, oListener: any): SelectDialog;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>liveChange</code> event of this <code>sap.m.SelectDialog</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachLiveChange(fnFunction: any, oListener: any): SelectDialog;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>search</code> event of this <code>sap.m.SelectDialog</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachSearch(fnFunction: any, oListener: any): SelectDialog;
		/**
		 * Creates a new subclass of class sap.m.SelectDialog with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|SelectDialogMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>cancel</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireCancel(mArguments?: any): SelectDialog;
		/**
		 * Fires event <code>confirm</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>selectedItem</code> of type <code>sap.m.StandardListItem</code>Returns the selected list item. When no item is selected, "null" is returned. When multi-selection is enabled and multiple items are selected, only the first selected item is returned.</li>
		 * <li><code>selectedItems</code> of type <code>sap.m.StandardListItem[]</code>Returns an array containing the visible selected list items. If no items are selected, an empty array is returned.</li>
		 * <li><code>selectedContexts</code> of type <code>string</code>Returns the binding contexts of the selected items including the non-visible items.
		 * NOTE: In contrast to the parameter "selectedItems", this parameter will also include the selected but NOT visible items (e.g. due to list filtering). An empty array will be set for this parameter if no data binding is used.
		 * NOTE: When the list binding is pre-filtered and there are items in the selection that are not visible upon opening the dialog, these contexts are not loaded. Therefore, these items will not be included in the selectedContexts array unless they are displayed at least once.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireConfirm(mArguments?: any): SelectDialog;
		/**
		 * Fires event <code>liveChange</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>value</code> of type <code>string</code>The value to search for, which can change at any keypress</li>
		 * <li><code>itemsBinding</code> of type <code>any</code>The Items binding of the Select Dialog. It will only be available if the items aggregation is bound to a model.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireLiveChange(mArguments?: any): SelectDialog;
		/**
		 * Fires event <code>search</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>value</code> of type <code>string</code>The value entered in the search</li>
		 * <li><code>itemsBinding</code> of type <code>any</code>The Items binding of the Select Dialog for search purposes. It will only be available if the items aggregation is bound to a model.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireSearch(mArguments?: any): SelectDialog;
		/**
		 * Get the internal Dialog's contentHeight property {@link sap.m.Dialog}
		 * @return sHeight The content width of the internal dialog
		 */
		getContentHeight(): sap.ui.core.CSSSize;
		/**
		 * Get the internal Dialog's contentWidth property {@link sap.m.Dialog}
		 * @return sWidth The content width of the internal dialog
		 */
		getContentWidth(): sap.ui.core.CSSSize;
		/**
		 * Forward method to the inner dialog: getDomRef
		 * @return The Element's DOM Element sub DOM Element or null
		 */
		getDomRef(): any;
		/**
		 * Returns the best suitable DOM Element that represents this UI5 Element.
		 * By default the DOM Element with the same ID as this Element is returned.
		 * Subclasses should override this method if the lookup via id is not sufficient.
		 * 
		 * Note that such a DOM Element does not necessarily exist in all cases.
		 * Some elements or controls might not have a DOM representation at all (e.g.
		 * a naive FlowLayout) while others might not have one due to their current
		 * state (e.g. an initial, not yet rendered control).
		 * 
		 * If an ID suffix is given, the ID of this Element is concatenated with the suffix
		 * (separated by a single dash) and the DOM node with that compound ID will be returned.
		 * This matches the UI5 naming convention for named inner DOM nodes of a control.
		 * @note Overload from base type sap.ui.core.Element
		 * @param sSuffix ID suffix to get the DOMRef for(optional)
		 * @return The Element's DOM Element sub DOM Element or null
		 */
		getDomRef(sSuffix?: string): any;
		/**
		 * Gets current value of property <code>growingThreshold</code>.
		 * 
		 * Determines the number of items initially displayed in the list. Also defines the number of items to be requested from the model for each grow.
		 * @return Value of property <code>growingThreshold</code>
		 */
		getGrowingThreshold(): number;
		/**
		 * Gets content of aggregation <code>items</code>.
		 * 
		 * The items of the list shown in the search dialog. It is recommended to use a StandardListItem for the dialog but other combinations are also possible.
		 * @return 
		 */
		getItems(): ListItemBase[];
		/**
		 * Gets current value of property <code>multiSelect</code>.
		 * 
		 * Determines if the user can select several options from the list
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>multiSelect</code>
		 */
		getMultiSelect(): boolean;
		/**
		 * Get the internal List's no data text property
		 * @return the current no data text
		 */
		getNoDataText(): string;
		/**
		 * Gets current value of property <code>rememberSelections</code>.
		 * 
		 * This flag controls whether the dialog clears the selection after the confirm event has been fired. If the dialog needs to be opened multiple times in the same context to allow for corrections of previous user inputs, set this flag to "true".
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>rememberSelections</code>
		 */
		getRememberSelections(): boolean;
		/**
		 * Gets current value of property <code>title</code>.
		 * 
		 * Determines the title text that appears in the dialog header
		 * @return Value of property <code>title</code>
		 */
		getTitle(): string;
		/**
		 * Forward method to the inner dialog: hasStyleClass
		 * @return true if the class is set, false otherwise
		 */
		hasStyleClass(): boolean;
		/**
		 * Returns true if the given style class or all multiple style classes which are generated by splitting the given string with space are already set on the control
		 * via previous call(s) to addStyleClass().
		 * @note Overload from base type sap.ui.core.Control
		 * @param sStyleClass the style to check for
		 * @return 
		 */
		hasStyleClass(sStyleClass: string): boolean;
		/**
		 * Checks for the provided <code>sap.m.ListItemBase</code> in the aggregation <code>items</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oItem The item whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfItem(oItem: ListItemBase): number;
		/**
		 * Inserts a item into the aggregation <code>items</code>.
		 * @param oItem the item to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the item should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the item is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertItem(oItem: ListItemBase, iIndex: number): SelectDialog;
		/**
		 * Opens the internal dialog with a searchfield and a list.
		 * @param sSearchValue A value for the search can be passed to match with the filter applied to the list binding.
		 * @return 
		 */
		open(sSearchValue: string): SelectDialog;
		/**
		 * Removes all the controls from the aggregation <code>items</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllItems(): ListItemBase[];
		/**
		 * Removes a item from the aggregation <code>items</code>.
		 * @param vItem The item to remove or its index or id
		 * @return The removed item or <code>null</code>
		 */
		removeItem(vItem: number|string|ListItemBase): ListItemBase;
		/**
		 * Forward method to the inner dialog: removeStyleClass
		 * @return this pointer for chaining
		 */
		removeStyleClass(): SelectDialog;
		/**
		 * Removes the given string from the list of custom style classes that have been set previously.
		 * Regular style classes like "sapUiBtn" cannot be removed.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sStyleClass the style to be removed
		 * @return Returns <code>this</code> to allow method chaining
		 */
		removeStyleClass(sStyleClass: string): sap.ui.core.Control;
		/**
		 * Set the internal Dialog's contentHeight property {@link sap.m.Dialog}
		 * @param sHeight The new content width value for the dialog
		 * @return this pointer for chaining
		 */
		setContentHeight(sHeight: sap.ui.core.CSSSize): SelectDialog;
		/**
		 * Set the internal Dialog's contentWidth property {@link sap.m.Dialog}
		 * @param sWidth The new content width value for the dialog
		 * @return this pointer for chaining
		 */
		setContentWidth(sWidth: sap.ui.core.CSSSize): SelectDialog;
		/**
		 * Sets the growing threshold to the internal list
		 * @param iValue Value for the list's growing threshold.
		 * @return this pointer for chaining
		 */
		setGrowingThreshold(iValue: number): SelectDialog;
		/**
		 * Enable/Disable multi selection mode.
		 * @param bMulti Flag for multi selection mode
		 * @return this pointer for chaining
		 */
		setMultiSelect(bMulti: boolean): SelectDialog;
		/**
		 * Set the internal List's no data text property
		 * @param sNoDataText The no data text for the list
		 * @return this pointer for chaining
		 */
		setNoDataText(sNoDataText: string): SelectDialog;
		/**
		 * Sets a new value for property <code>rememberSelections</code>.
		 * 
		 * This flag controls whether the dialog clears the selection after the confirm event has been fired. If the dialog needs to be opened multiple times in the same context to allow for corrections of previous user inputs, set this flag to "true".
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bRememberSelections New value for property <code>rememberSelections</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setRememberSelections(bRememberSelections: boolean): SelectDialog;
		/**
		 * Set the title of the internal dialog
		 * @param sTitle The title text for the dialog
		 * @return this pointer for chaining
		 */
		setTitle(sTitle: string): SelectDialog;
		/**
		 * Forward method to the inner dialog: toggleStyleClass
		 * @return this pointer for chaining
		 */
		toggleStyleClass(): SelectDialog;
		/**
		 * The string given as "sStyleClass" will be be either added to or removed from the "class" attribute of this control's root HTML element,
		 * depending on the value of "bAdd": if bAdd is true, sStyleClass will be added.
		 * If bAdd is not given, sStyleClass will be removed if it is currently present and will be added if not present.
		 * If sStyleClass is null or empty string, the call is ignored.
		 * 
		 * See addStyleClass and removeStyleClass for further documentation.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sStyleClass the CSS class name to be added or removed
		 * @param bAdd whether sStyleClass should be added (or removed); when this parameter is not given, sStyleClass will be toggled (removed, if present, and added if not present)
		 * @return Returns <code>this</code> to allow method chaining
		 */
		toggleStyleClass(sStyleClass: string, bAdd: boolean): sap.ui.core.Control;
	}

	class SelectList extends sap.ui.core.Control {
		/**
		 * Constructor for a new <code>sap.m.SelectList</code>.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given.(optional)
		 * @param mSettings Initial settings for the new control.(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.SelectListMetadata);
		/**
		 * Constructor for a new <code>sap.m.SelectList</code>.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given.(optional)
		 * @param mSettings Initial settings for the new control.(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): SelectList;
		/**
		 * Adds some item to the aggregation <code>items</code>.
		 * @param oItem the item to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addItem(oItem: sap.ui.core.Item): SelectList;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>itemPress</code> event of this <code>sap.m.SelectList</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.SelectList</code> itself.
		 * 
		 * This event is fired when an item is pressed.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.SelectList</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachItemPress(oData: any, fnFunction: any, oListener?: any): SelectList;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>selectionChange</code> event of this <code>sap.m.SelectList</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.SelectList</code> itself.
		 * 
		 * This event is fired when the selection has changed.
		 * 
		 * <b>Note: </b> The selection can be changed by pressing an non-selected item or
		 * via keyboard and after the enter or space key is pressed.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.SelectList</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachSelectionChange(oData: any, fnFunction: any, oListener?: any): SelectList;
		/**
		 * Binds aggregation <code>items</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindItems(oBindingInfo: any): SelectList;
		/**
		 * Clear the selection.
		 */
		clearSelection();
		/**
		 * Destroys all the items in the aggregation named <code>items</code>.
		 * @return <code>this</code> to allow method chaining.
		 */
		destroyItems(): SelectList;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>itemPress</code> event of this <code>sap.m.SelectList</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachItemPress(fnFunction: any, oListener: any): SelectList;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>selectionChange</code> event of this <code>sap.m.SelectList</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachSelectionChange(fnFunction: any, oListener: any): SelectList;
		/**
		 * Creates a new subclass of class sap.m.SelectList with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|SelectListMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>itemPress</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>item</code> of type <code>sap.ui.core.Item</code>The pressed item.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireItemPress(mArguments?: any): SelectList;
		/**
		 * Fires event <code>selectionChange</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>selectedItem</code> of type <code>sap.ui.core.Item</code>The selected item.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireSelectionChange(mArguments?: any): SelectList;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
		 * @return 
		 */
		getAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Retrieves the default selected item from the aggregation named <code>items</code>.
		 * @param aItems (optional)
		 * @return 
		 */
		getDefaultSelectedItem(aItems?: sap.ui.core.Item[]): sap.ui.core.Item;
		/**
		 * Gets current value of property <code>enabled</code>.
		 * 
		 * Indicates whether the user can change the selection.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>enabled</code>
		 */
		getEnabled(): boolean;
		/**
		 * Gets the enabled items from the aggregation named <code>items</code>.
		 * @param aItems items to filter(optional)
		 * @return An array containing the enabled items.
		 */
		getEnabledItems(aItems?: sap.ui.core.Item[]): sap.ui.core.Item[];
		/**
		 * Gets the first item from the aggregation named <code>items</code>.
		 * @return The first item, or null if there are no items.
		 */
		getFirstItem(): sap.ui.core.Item;
		/**
		 * Gets the item from the aggregation named <code>items</code> at the given 0-based index.
		 * @param iIndex Index of the item to return.
		 * @return Item at the given index, or null if none.
		 */
		getItemAt(iIndex: number): sap.ui.core.Item;
		/**
		 * Gets the item with the given key from the aggregation named <code>items</code>.
		 * 
		 * <b>Note: </b> If duplicate keys exists, the first item matching the key is returned.
		 * @param sKey An item key that specifies the item to retrieve.
		 * @return 
		 */
		getItemByKey(sKey: string): sap.ui.core.Item;
		/**
		 * Gets content of aggregation <code>items</code>.
		 * 
		 * Defines the items contained within this control.
		 * @return 
		 */
		getItems(): sap.ui.core.Item[];
		/**
		 * Gets current value of property <code>keyboardNavigationMode</code>.
		 * 
		 * Defines the keyboard navigation mode.
		 * 
		 * <b>Note:</b> The <code>sap.m.SelectListKeyboardNavigationMode.None</code> enumeration value, is only
		 * intended for use in some composite controls that handles keyboard navigation by themselves.
		 * 
		 * Default value is <code>Delimited</code>.
		 * @return Value of property <code>keyboardNavigationMode</code>
		 */
		getKeyboardNavigationMode(): SelectListKeyboardNavigationMode;
		/**
		 * Gets the enabled items from the aggregation named <code>items</code>.
		 * @return The last item, or null if there are no items.
		 */
		getLastItem(): sap.ui.core.Item;
		/**
		 * Gets current value of property <code>maxWidth</code>.
		 * 
		 * Sets the maximum width of the control.
		 * 
		 * Default value is <code>100%</code>.
		 * @return Value of property <code>maxWidth</code>
		 */
		getMaxWidth(): sap.ui.core.CSSSize;
		/**
		 * Gets the selected item object from the aggregation named <code>items</code>.
		 * @return The current target of the <code>selectedItem</code> association, or null.
		 */
		getSelectedItem(): sap.ui.core.Item;
		/**
		 * Gets current value of property <code>selectedItemId</code>.
		 * 
		 * ID of the selected item.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>selectedItemId</code>
		 */
		getSelectedItemId(): string;
		/**
		 * Gets current value of property <code>selectedKey</code>.
		 * 
		 * Key of the selected item.
		 * 
		 * <b>Note: </b> If duplicate keys exist, the first item matching the key is used.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>selectedKey</code>
		 */
		getSelectedKey(): string;
		/**
		 * Gets current value of property <code>showSecondaryValues</code>.
		 * 
		 * Indicates whether the text values of the <code>additionalText</code> property of a {@link sap.ui.core.ListItem} are shown.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>showSecondaryValues</code>
		 */
		getShowSecondaryValues(): boolean;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Sets the width of the control.
		 * 
		 * Default value is <code>auto</code>.
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation <code>items</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oItem The item whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfItem(oItem: sap.ui.core.Item): number;
		/**
		 * Inserts a item into the aggregation <code>items</code>.
		 * @param oItem the item to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the item should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the item is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertItem(oItem: sap.ui.core.Item, iIndex: number): SelectList;
		/**
		 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Removes all the items in the aggregation named <code>items</code>.
		 * Additionally unregisters them from the hosting UIArea.
		 * @return An array of the removed items (might be empty).
		 */
		removeAllItems(): sap.ui.core.Item[];
		/**
		 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
		 * @return The removed ariaLabelledBy or <code>null</code>
		 */
		removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Removes an item from the aggregation named <code>items</code>.
		 * @param vItem The item to remove or its index or id.
		 * @return The removed item or null.
		 */
		removeItem(vItem: number|string|sap.ui.core.Item): sap.ui.core.Item;
		/**
		 * Sets a new value for property <code>enabled</code>.
		 * 
		 * Indicates whether the user can change the selection.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bEnabled New value for property <code>enabled</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setEnabled(bEnabled: boolean): SelectList;
		/**
		 * Sets a new value for property <code>keyboardNavigationMode</code>.
		 * 
		 * Defines the keyboard navigation mode.
		 * 
		 * <b>Note:</b> The <code>sap.m.SelectListKeyboardNavigationMode.None</code> enumeration value, is only
		 * intended for use in some composite controls that handles keyboard navigation by themselves.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Delimited</code>.
		 * @param sKeyboardNavigationMode New value for property <code>keyboardNavigationMode</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setKeyboardNavigationMode(sKeyboardNavigationMode: SelectListKeyboardNavigationMode): SelectList;
		/**
		 * Sets a new value for property <code>maxWidth</code>.
		 * 
		 * Sets the maximum width of the control.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>100%</code>.
		 * @param sMaxWidth New value for property <code>maxWidth</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMaxWidth(sMaxWidth: sap.ui.core.CSSSize): SelectList;
		/**
		 * Sets the <code>selectedItem</code> association.
		 * @param vItem New value for the <code>selectedItem</code> association.
		 * If an ID of a <code>sap.ui.core.Item</code> is given, the item with this ID becomes the <code>selectedItem</code> association.
		 * Alternatively, a <code>sap.ui.core.Item</code> instance may be given or <code>null</code> to clear the selection.
		 * @return <code>this</code> to allow method chaining.
		 */
		setSelectedItem(vItem: string|sap.ui.core.Item): SelectList;
		/**
		 * Sets property <code>selectedItemId</code>.
		 * 
		 * Default value is an empty string <code>""</code> or <code>undefined</code>.
		 * @param vItem New value for property <code>selectedItemId</code>.
		 * @return <code>this</code> to allow method chaining.
		 */
		setSelectedItemId(vItem: string|any): SelectList;
		/**
		 * Sets property <code>selectedKey</code>.
		 * 
		 * Default value is an empty string <code>""</code> or <code>undefined</code>.
		 * @param sKey New value for property <code>selectedKey</code>.
		 * @return <code>this</code> to allow method chaining.
		 */
		setSelectedKey(sKey: string): SelectList;
		/**
		 * Updates and synchronizes <code>selectedItem</code> association, <code>selectedItemId</code> and <code>selectedKey</code> properties.
		 * @param vItem 
		 */
		setSelection(vItem: string|sap.ui.core.Item);
		/**
		 * Sets a new value for property <code>showSecondaryValues</code>.
		 * 
		 * Indicates whether the text values of the <code>additionalText</code> property of a {@link sap.ui.core.ListItem} are shown.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bShowSecondaryValues New value for property <code>showSecondaryValues</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowSecondaryValues(bShowSecondaryValues: boolean): SelectList;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Sets the width of the control.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>auto</code>.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): SelectList;
		/**
		 * Unbinds aggregation <code>items</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindItems(): SelectList;
	}

	class SelectListKeyboardNavigationMode {
		/**
		 * Keyboard navigation is delimited at the last item or first item of the list.
		 */
		static Delimited: string;
		/**
		 * Keyboard navigation is disabled.
		 */
		static None: string;
	}

	class SelectType {
		/**
		 * Will show the text.
		 */
		static Default: string;
		/**
		 * Will show only the specified icon.
		 */
		static IconOnly: string;
	}

	namespace semantic {
	
		class AddAction extends SemanticButton {
			/**
			 * Constructor for a new AddAction.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Constructor for a new AddAction.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.m.semantic.AddAction with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticControl with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticControl
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticControlMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticButton with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticControl.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticButton
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticButtonMetadata, FNMetaImpl?: any): any;
		}
	
		class CancelAction extends SemanticButton {
			/**
			 * Constructor for a new CancelAction.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Constructor for a new CancelAction.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.m.semantic.CancelAction with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticControl with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticControl
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticControlMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticButton with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticControl.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticButton
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticButtonMetadata, FNMetaImpl?: any): any;
		}
	
		class DeleteAction extends SemanticButton {
			/**
			 * Constructor for a new DeleteAction.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Constructor for a new DeleteAction.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.m.semantic.DeleteAction with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticControl with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticControl
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticControlMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticButton with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticControl.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticButton
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticButtonMetadata, FNMetaImpl?: any): any;
		}
	
		class DetailPage extends ShareMenuPage {
			/**
			 * Constructor for a new DetailPage
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Constructor for a new DetailPage
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Destroys the addAction in the aggregation <code>addAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyAddAction(): DetailPage;
			/**
			 * Destroys the cancelAction in the aggregation <code>cancelAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyCancelAction(): DetailPage;
			/**
			 * Destroys the deleteAction in the aggregation <code>deleteAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyDeleteAction(): DetailPage;
			/**
			 * Destroys the discussInJamAction in the aggregation <code>discussInJamAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyDiscussInJamAction(): DetailPage;
			/**
			 * Destroys the draftIndicator in the aggregation <code>draftIndicator</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyDraftIndicator(): DetailPage;
			/**
			 * Destroys the editAction in the aggregation <code>editAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyEditAction(): DetailPage;
			/**
			 * Destroys the favoriteAction in the aggregation <code>favoriteAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyFavoriteAction(): DetailPage;
			/**
			 * Destroys the flagAction in the aggregation <code>flagAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyFlagAction(): DetailPage;
			/**
			 * Destroys the forwardAction in the aggregation <code>forwardAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyForwardAction(): DetailPage;
			/**
			 * Destroys the mainAction in the aggregation <code>mainAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyMainAction(): DetailPage;
			/**
			 * Destroys the messagesIndicator in the aggregation <code>messagesIndicator</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyMessagesIndicator(): DetailPage;
			/**
			 * Destroys the negativeAction in the aggregation <code>negativeAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyNegativeAction(): DetailPage;
			/**
			 * Destroys the openInAction in the aggregation <code>openInAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyOpenInAction(): DetailPage;
			/**
			 * Destroys the pagingAction in the aggregation <code>pagingAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyPagingAction(): DetailPage;
			/**
			 * Destroys the positiveAction in the aggregation <code>positiveAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyPositiveAction(): DetailPage;
			/**
			 * Destroys the printAction in the aggregation <code>printAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyPrintAction(): DetailPage;
			/**
			 * Destroys the saveAction in the aggregation <code>saveAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroySaveAction(): DetailPage;
			/**
			 * Destroys the saveAsTileAction in the aggregation <code>saveAsTileAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroySaveAsTileAction(): DetailPage;
			/**
			 * Destroys the sendEmailAction in the aggregation <code>sendEmailAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroySendEmailAction(): DetailPage;
			/**
			 * Destroys the sendMessageAction in the aggregation <code>sendMessageAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroySendMessageAction(): DetailPage;
			/**
			 * Destroys the shareInJamAction in the aggregation <code>shareInJamAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyShareInJamAction(): DetailPage;
			/**
			 * Creates a new subclass of class sap.m.semantic.DetailPage with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.ShareMenuPage.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @note Overload from base type sap.ui.core.Control
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticPage with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticPage
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticPageMetadata, FNMetaImpl?: any): any;
			/**
			 * Gets content of aggregation <code>addAction</code>.
			 * 
			 * Add action
			 * @return 
			 */
			getAddAction(): AddAction;
			/**
			 * Gets content of aggregation <code>cancelAction</code>.
			 * 
			 * Cancel action
			 * @return 
			 */
			getCancelAction(): CancelAction;
			/**
			 * Gets content of aggregation <code>deleteAction</code>.
			 * 
			 * Delete action
			 * @return 
			 */
			getDeleteAction(): DeleteAction;
			/**
			 * Gets content of aggregation <code>discussInJamAction</code>.
			 * 
			 * DiscussInJam action
			 * @return 
			 */
			getDiscussInJamAction(): DiscussInJamAction;
			/**
			 * Gets content of aggregation <code>draftIndicator</code>.
			 * 
			 * DraftIndicator
			 * @return 
			 */
			getDraftIndicator(): sap.m.DraftIndicator;
			/**
			 * Gets content of aggregation <code>editAction</code>.
			 * 
			 * Edit action
			 * @return 
			 */
			getEditAction(): EditAction;
			/**
			 * Gets content of aggregation <code>favoriteAction</code>.
			 * 
			 * Favorite action
			 * @return 
			 */
			getFavoriteAction(): FavoriteAction;
			/**
			 * Gets content of aggregation <code>flagAction</code>.
			 * 
			 * Flag action
			 * @return 
			 */
			getFlagAction(): FlagAction;
			/**
			 * Gets content of aggregation <code>forwardAction</code>.
			 * 
			 * Negative action
			 * @return 
			 */
			getForwardAction(): ForwardAction;
			/**
			 * Gets content of aggregation <code>mainAction</code>.
			 * 
			 * Main action
			 * @return 
			 */
			getMainAction(): MainAction;
			/**
			 * Gets content of aggregation <code>messagesIndicator</code>.
			 * 
			 * MessagesIndicator
			 * @return 
			 */
			getMessagesIndicator(): MessagesIndicator;
			/**
			 * Gets content of aggregation <code>negativeAction</code>.
			 * 
			 * Negative action
			 * @return 
			 */
			getNegativeAction(): NegativeAction;
			/**
			 * Gets content of aggregation <code>openInAction</code>.
			 * 
			 * OpenIn action
			 * @return 
			 */
			getOpenInAction(): OpenInAction;
			/**
			 * Gets content of aggregation <code>pagingAction</code>.
			 * 
			 * Paging action
			 * @return 
			 */
			getPagingAction(): sap.m.PagingButton;
			/**
			 * Gets content of aggregation <code>positiveAction</code>.
			 * 
			 * Positive action
			 * @return 
			 */
			getPositiveAction(): PositiveAction;
			/**
			 * Gets content of aggregation <code>printAction</code>.
			 * 
			 * Print action
			 * @return 
			 */
			getPrintAction(): PrintAction;
			/**
			 * Gets content of aggregation <code>saveAction</code>.
			 * 
			 * Save action
			 * @return 
			 */
			getSaveAction(): SaveAction;
			/**
			 * Gets content of aggregation <code>saveAsTileAction</code>.
			 * 
			 * SaveAsTile button
			 * @return 
			 */
			getSaveAsTileAction(): sap.m.Button;
			/**
			 * Gets content of aggregation <code>sendEmailAction</code>.
			 * 
			 * SendEmail action
			 * @return 
			 */
			getSendEmailAction(): SendEmailAction;
			/**
			 * Gets content of aggregation <code>sendMessageAction</code>.
			 * 
			 * SendMessage action
			 * @return 
			 */
			getSendMessageAction(): SendMessageAction;
			/**
			 * Gets content of aggregation <code>shareInJamAction</code>.
			 * 
			 * ShareInJam action
			 * @return 
			 */
			getShareInJamAction(): ShareInJamAction;
			/**
			 * Sets the aggregated <code>addAction</code>.
			 * @param oAddAction The addAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setAddAction(oAddAction: AddAction): DetailPage;
			/**
			 * Sets the aggregated <code>cancelAction</code>.
			 * @param oCancelAction The cancelAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setCancelAction(oCancelAction: CancelAction): DetailPage;
			/**
			 * Sets the aggregated <code>deleteAction</code>.
			 * @param oDeleteAction The deleteAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setDeleteAction(oDeleteAction: DeleteAction): DetailPage;
			/**
			 * Sets the aggregated <code>discussInJamAction</code>.
			 * @param oDiscussInJamAction The discussInJamAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setDiscussInJamAction(oDiscussInJamAction: DiscussInJamAction): DetailPage;
			/**
			 * Sets the aggregated <code>draftIndicator</code>.
			 * @param oDraftIndicator The draftIndicator to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setDraftIndicator(oDraftIndicator: sap.m.DraftIndicator): DetailPage;
			/**
			 * Sets the aggregated <code>editAction</code>.
			 * @param oEditAction The editAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setEditAction(oEditAction: EditAction): DetailPage;
			/**
			 * Sets the aggregated <code>favoriteAction</code>.
			 * @param oFavoriteAction The favoriteAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setFavoriteAction(oFavoriteAction: FavoriteAction): DetailPage;
			/**
			 * Sets the aggregated <code>flagAction</code>.
			 * @param oFlagAction The flagAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setFlagAction(oFlagAction: FlagAction): DetailPage;
			/**
			 * Sets the aggregated <code>forwardAction</code>.
			 * @param oForwardAction The forwardAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setForwardAction(oForwardAction: ForwardAction): DetailPage;
			/**
			 * Sets the aggregated <code>mainAction</code>.
			 * @param oMainAction The mainAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setMainAction(oMainAction: MainAction): DetailPage;
			/**
			 * Sets the aggregated <code>messagesIndicator</code>.
			 * @param oMessagesIndicator The messagesIndicator to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setMessagesIndicator(oMessagesIndicator: MessagesIndicator): DetailPage;
			/**
			 * Sets the aggregated <code>negativeAction</code>.
			 * @param oNegativeAction The negativeAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setNegativeAction(oNegativeAction: NegativeAction): DetailPage;
			/**
			 * Sets the aggregated <code>openInAction</code>.
			 * @param oOpenInAction The openInAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setOpenInAction(oOpenInAction: OpenInAction): DetailPage;
			/**
			 * Sets the aggregated <code>pagingAction</code>.
			 * @param oPagingAction The pagingAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setPagingAction(oPagingAction: sap.m.PagingButton): DetailPage;
			/**
			 * Sets the aggregated <code>positiveAction</code>.
			 * @param oPositiveAction The positiveAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setPositiveAction(oPositiveAction: PositiveAction): DetailPage;
			/**
			 * Sets the aggregated <code>printAction</code>.
			 * @param oPrintAction The printAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setPrintAction(oPrintAction: PrintAction): DetailPage;
			/**
			 * Sets the aggregated <code>saveAction</code>.
			 * @param oSaveAction The saveAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSaveAction(oSaveAction: SaveAction): DetailPage;
			/**
			 * Sets the aggregated <code>saveAsTileAction</code>.
			 * @param oSaveAsTileAction The saveAsTileAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSaveAsTileAction(oSaveAsTileAction: sap.m.Button): DetailPage;
			/**
			 * Sets the aggregated <code>sendEmailAction</code>.
			 * @param oSendEmailAction The sendEmailAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSendEmailAction(oSendEmailAction: SendEmailAction): DetailPage;
			/**
			 * Sets the aggregated <code>sendMessageAction</code>.
			 * @param oSendMessageAction The sendMessageAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSendMessageAction(oSendMessageAction: SendMessageAction): DetailPage;
			/**
			 * Sets the aggregated <code>shareInJamAction</code>.
			 * @param oShareInJamAction The shareInJamAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setShareInJamAction(oShareInJamAction: ShareInJamAction): DetailPage;
		}
	
		class DiscussInJamAction extends SemanticButton {
			/**
			 * Constructor for a new DiscussInJamAction.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Constructor for a new DiscussInJamAction.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.m.semantic.DiscussInJamAction with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticControl with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticControl
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticControlMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticButton with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticControl.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticButton
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticButtonMetadata, FNMetaImpl?: any): any;
		}
	
		class EditAction extends SemanticButton {
			/**
			 * Constructor for a new EditAction.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Constructor for a new EditAction.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.m.semantic.EditAction with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticControl with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticControl
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticControlMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticButton with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticControl.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticButton
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticButtonMetadata, FNMetaImpl?: any): any;
		}
	
		class FavoriteAction extends SemanticToggleButton {
			/**
			 * Constructor for a new FavoriteAction.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Constructor for a new FavoriteAction.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.m.semantic.FavoriteAction with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticToggleButton.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticControl with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticControl
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticControlMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticButton with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticControl.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticButton
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticButtonMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticToggleButton with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticToggleButton
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticToggleButtonMetadata, FNMetaImpl?: any): any;
		}
	
		class FilterAction extends SemanticButton {
			/**
			 * Constructor for a new FilterAction.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Constructor for a new FilterAction.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.m.semantic.FilterAction with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticControl with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticControl
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticControlMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticButton with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticControl.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticButton
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticButtonMetadata, FNMetaImpl?: any): any;
		}
	
		class FilterSelect extends SemanticSelect {
			/**
			 * Constructor for a new FilterSelect.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Constructor for a new FilterSelect.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.m.semantic.FilterSelect with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticSelect.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticControl with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticControl
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticControlMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticSelect with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticControl.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticSelect
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticSelectMetadata, FNMetaImpl?: any): any;
		}
	
		class FlagAction extends SemanticToggleButton {
			/**
			 * Constructor for a new FlagAction.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Constructor for a new FlagAction.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.m.semantic.FlagAction with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticToggleButton.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticControl with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticControl
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticControlMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticButton with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticControl.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticButton
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticButtonMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticToggleButton with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticToggleButton
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticToggleButtonMetadata, FNMetaImpl?: any): any;
		}
	
		class ForwardAction extends SemanticButton {
			/**
			 * Constructor for a new ForwardAction.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Constructor for a new ForwardAction.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.m.semantic.ForwardAction with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticControl with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticControl
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticControlMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticButton with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticControl.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticButton
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticButtonMetadata, FNMetaImpl?: any): any;
		}
	
		class FullscreenPage extends ShareMenuPage {
			/**
			 * Constructor for a new FullscreenPage
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Constructor for a new FullscreenPage
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Destroys the addAction in the aggregation <code>addAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyAddAction(): FullscreenPage;
			/**
			 * Destroys the cancelAction in the aggregation <code>cancelAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyCancelAction(): FullscreenPage;
			/**
			 * Destroys the deleteAction in the aggregation <code>deleteAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyDeleteAction(): FullscreenPage;
			/**
			 * Destroys the discussInJamAction in the aggregation <code>discussInJamAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyDiscussInJamAction(): FullscreenPage;
			/**
			 * Destroys the draftIndicator in the aggregation <code>draftIndicator</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyDraftIndicator(): FullscreenPage;
			/**
			 * Destroys the editAction in the aggregation <code>editAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyEditAction(): FullscreenPage;
			/**
			 * Destroys the favoriteAction in the aggregation <code>favoriteAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyFavoriteAction(): FullscreenPage;
			/**
			 * Destroys the flagAction in the aggregation <code>flagAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyFlagAction(): FullscreenPage;
			/**
			 * Destroys the forwardAction in the aggregation <code>forwardAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyForwardAction(): FullscreenPage;
			/**
			 * Destroys the mainAction in the aggregation <code>mainAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyMainAction(): FullscreenPage;
			/**
			 * Destroys the messagesIndicator in the aggregation <code>messagesIndicator</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyMessagesIndicator(): FullscreenPage;
			/**
			 * Destroys the negativeAction in the aggregation <code>negativeAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyNegativeAction(): FullscreenPage;
			/**
			 * Destroys the openInAction in the aggregation <code>openInAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyOpenInAction(): FullscreenPage;
			/**
			 * Destroys the pagingAction in the aggregation <code>pagingAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyPagingAction(): FullscreenPage;
			/**
			 * Destroys the positiveAction in the aggregation <code>positiveAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyPositiveAction(): FullscreenPage;
			/**
			 * Destroys the printAction in the aggregation <code>printAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyPrintAction(): FullscreenPage;
			/**
			 * Destroys the saveAction in the aggregation <code>saveAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroySaveAction(): FullscreenPage;
			/**
			 * Destroys the saveAsTileAction in the aggregation <code>saveAsTileAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroySaveAsTileAction(): FullscreenPage;
			/**
			 * Destroys the sendEmailAction in the aggregation <code>sendEmailAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroySendEmailAction(): FullscreenPage;
			/**
			 * Destroys the sendMessageAction in the aggregation <code>sendMessageAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroySendMessageAction(): FullscreenPage;
			/**
			 * Destroys the shareInJamAction in the aggregation <code>shareInJamAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyShareInJamAction(): FullscreenPage;
			/**
			 * Creates a new subclass of class sap.m.semantic.FullscreenPage with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.ShareMenuPage.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @note Overload from base type sap.ui.core.Control
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticPage with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticPage
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticPageMetadata, FNMetaImpl?: any): any;
			/**
			 * Gets content of aggregation <code>addAction</code>.
			 * 
			 * Add action
			 * @return 
			 */
			getAddAction(): AddAction;
			/**
			 * Gets content of aggregation <code>cancelAction</code>.
			 * 
			 * Cancel action
			 * @return 
			 */
			getCancelAction(): CancelAction;
			/**
			 * Gets content of aggregation <code>deleteAction</code>.
			 * 
			 * Delete action
			 * @return 
			 */
			getDeleteAction(): DeleteAction;
			/**
			 * Gets content of aggregation <code>discussInJamAction</code>.
			 * 
			 * DiscussInJam action
			 * @return 
			 */
			getDiscussInJamAction(): DiscussInJamAction;
			/**
			 * Gets content of aggregation <code>draftIndicator</code>.
			 * 
			 * DraftIndicator
			 * @return 
			 */
			getDraftIndicator(): sap.m.DraftIndicator;
			/**
			 * Gets content of aggregation <code>editAction</code>.
			 * 
			 * Edit action
			 * @return 
			 */
			getEditAction(): EditAction;
			/**
			 * Gets content of aggregation <code>favoriteAction</code>.
			 * 
			 * Favorite action
			 * @return 
			 */
			getFavoriteAction(): FavoriteAction;
			/**
			 * Gets content of aggregation <code>flagAction</code>.
			 * 
			 * Flag action
			 * @return 
			 */
			getFlagAction(): FlagAction;
			/**
			 * Gets content of aggregation <code>forwardAction</code>.
			 * 
			 * Negative action
			 * @return 
			 */
			getForwardAction(): ForwardAction;
			/**
			 * Gets content of aggregation <code>mainAction</code>.
			 * 
			 * Main action
			 * @return 
			 */
			getMainAction(): MainAction;
			/**
			 * Gets content of aggregation <code>messagesIndicator</code>.
			 * 
			 * MessagesIndicator
			 * @return 
			 */
			getMessagesIndicator(): MessagesIndicator;
			/**
			 * Gets content of aggregation <code>negativeAction</code>.
			 * 
			 * Negative action
			 * @return 
			 */
			getNegativeAction(): NegativeAction;
			/**
			 * Gets content of aggregation <code>openInAction</code>.
			 * 
			 * OpenIn action
			 * @return 
			 */
			getOpenInAction(): OpenInAction;
			/**
			 * Gets content of aggregation <code>pagingAction</code>.
			 * 
			 * Paging action
			 * @return 
			 */
			getPagingAction(): sap.m.PagingButton;
			/**
			 * Gets content of aggregation <code>positiveAction</code>.
			 * 
			 * Positive action
			 * @return 
			 */
			getPositiveAction(): PositiveAction;
			/**
			 * Gets content of aggregation <code>printAction</code>.
			 * 
			 * Print action
			 * @return 
			 */
			getPrintAction(): PrintAction;
			/**
			 * Gets content of aggregation <code>saveAction</code>.
			 * 
			 * Save action
			 * @return 
			 */
			getSaveAction(): SaveAction;
			/**
			 * Gets content of aggregation <code>saveAsTileAction</code>.
			 * 
			 * SaveAsTile button
			 * @return 
			 */
			getSaveAsTileAction(): sap.m.Button;
			/**
			 * Gets content of aggregation <code>sendEmailAction</code>.
			 * 
			 * SendEmail action
			 * @return 
			 */
			getSendEmailAction(): SendEmailAction;
			/**
			 * Gets content of aggregation <code>sendMessageAction</code>.
			 * 
			 * SendMessage action
			 * @return 
			 */
			getSendMessageAction(): SendMessageAction;
			/**
			 * Gets content of aggregation <code>shareInJamAction</code>.
			 * 
			 * ShareInJam action
			 * @return 
			 */
			getShareInJamAction(): ShareInJamAction;
			/**
			 * Sets the aggregated <code>addAction</code>.
			 * @param oAddAction The addAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setAddAction(oAddAction: AddAction): FullscreenPage;
			/**
			 * Sets the aggregated <code>cancelAction</code>.
			 * @param oCancelAction The cancelAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setCancelAction(oCancelAction: CancelAction): FullscreenPage;
			/**
			 * Sets the aggregated <code>deleteAction</code>.
			 * @param oDeleteAction The deleteAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setDeleteAction(oDeleteAction: DeleteAction): FullscreenPage;
			/**
			 * Sets the aggregated <code>discussInJamAction</code>.
			 * @param oDiscussInJamAction The discussInJamAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setDiscussInJamAction(oDiscussInJamAction: DiscussInJamAction): FullscreenPage;
			/**
			 * Sets the aggregated <code>draftIndicator</code>.
			 * @param oDraftIndicator The draftIndicator to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setDraftIndicator(oDraftIndicator: sap.m.DraftIndicator): FullscreenPage;
			/**
			 * Sets the aggregated <code>editAction</code>.
			 * @param oEditAction The editAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setEditAction(oEditAction: EditAction): FullscreenPage;
			/**
			 * Sets the aggregated <code>favoriteAction</code>.
			 * @param oFavoriteAction The favoriteAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setFavoriteAction(oFavoriteAction: FavoriteAction): FullscreenPage;
			/**
			 * Sets the aggregated <code>flagAction</code>.
			 * @param oFlagAction The flagAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setFlagAction(oFlagAction: FlagAction): FullscreenPage;
			/**
			 * Sets the aggregated <code>forwardAction</code>.
			 * @param oForwardAction The forwardAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setForwardAction(oForwardAction: ForwardAction): FullscreenPage;
			/**
			 * Sets the aggregated <code>mainAction</code>.
			 * @param oMainAction The mainAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setMainAction(oMainAction: MainAction): FullscreenPage;
			/**
			 * Sets the aggregated <code>messagesIndicator</code>.
			 * @param oMessagesIndicator The messagesIndicator to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setMessagesIndicator(oMessagesIndicator: MessagesIndicator): FullscreenPage;
			/**
			 * Sets the aggregated <code>negativeAction</code>.
			 * @param oNegativeAction The negativeAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setNegativeAction(oNegativeAction: NegativeAction): FullscreenPage;
			/**
			 * Sets the aggregated <code>openInAction</code>.
			 * @param oOpenInAction The openInAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setOpenInAction(oOpenInAction: OpenInAction): FullscreenPage;
			/**
			 * Sets the aggregated <code>pagingAction</code>.
			 * @param oPagingAction The pagingAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setPagingAction(oPagingAction: sap.m.PagingButton): FullscreenPage;
			/**
			 * Sets the aggregated <code>positiveAction</code>.
			 * @param oPositiveAction The positiveAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setPositiveAction(oPositiveAction: PositiveAction): FullscreenPage;
			/**
			 * Sets the aggregated <code>printAction</code>.
			 * @param oPrintAction The printAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setPrintAction(oPrintAction: PrintAction): FullscreenPage;
			/**
			 * Sets the aggregated <code>saveAction</code>.
			 * @param oSaveAction The saveAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSaveAction(oSaveAction: SaveAction): FullscreenPage;
			/**
			 * Sets the aggregated <code>saveAsTileAction</code>.
			 * @param oSaveAsTileAction The saveAsTileAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSaveAsTileAction(oSaveAsTileAction: sap.m.Button): FullscreenPage;
			/**
			 * Sets the aggregated <code>sendEmailAction</code>.
			 * @param oSendEmailAction The sendEmailAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSendEmailAction(oSendEmailAction: SendEmailAction): FullscreenPage;
			/**
			 * Sets the aggregated <code>sendMessageAction</code>.
			 * @param oSendMessageAction The sendMessageAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSendMessageAction(oSendMessageAction: SendMessageAction): FullscreenPage;
			/**
			 * Sets the aggregated <code>shareInJamAction</code>.
			 * @param oShareInJamAction The shareInJamAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setShareInJamAction(oShareInJamAction: ShareInJamAction): FullscreenPage;
		}
	
		class GroupAction extends SemanticButton {
			/**
			 * Constructor for a new GroupAction.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Constructor for a new GroupAction.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.m.semantic.GroupAction with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticControl with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticControl
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticControlMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticButton with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticControl.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticButton
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticButtonMetadata, FNMetaImpl?: any): any;
		}
	
		class GroupSelect extends SemanticSelect {
			/**
			 * Constructor for a new GroupSelect.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Constructor for a new GroupSelect.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.m.semantic.GroupSelect with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticSelect.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticControl with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticControl
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticControlMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticSelect with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticControl.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticSelect
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticSelectMetadata, FNMetaImpl?: any): any;
		}
	
		interface IFilter {
		}
	
		interface IGroup {
		}
	
		interface ISort {
		}
	
		class MainAction extends SemanticButton {
			/**
			 * Constructor for a new MainAction.
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.m.semantic.MainActionMetadata);
			/**
			 * Constructor for a new MainAction.
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.m.semantic.MainAction with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|MainActionMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain three kinds of informations:
			 * <ul>
			 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
			 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
			 * and might contain the following information
			 * <ul>
			 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
			 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
			 * facade of the class</li>
			 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
			 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
			 * </ul>
			 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
			 * </li>
			 * 
			 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
			 * If no constructor function is given, the framework creates a default implementation that delegates all
			 * its arguments to the constructor function of the base class.
			 * </li>
			 * 
			 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
			 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
			 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
			 * make sense to use primitive values here other than to declare public constants.
			 * </li>
			 * 
			 * </ul>
			 * 
			 * The prototype object of the newly created class uses the same prototype as instances of the base class
			 * (prototype chaining).
			 * 
			 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
			 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
			 * itself.
			 * 
			 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
			 * can be specified. Instances of that class will be used to represent metadata for the newly created class
			 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
			 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
			 * @note Overload from base type sap.ui.base.Object
			 * @param sClassName name of the class to be created
			 * @param oClassInfo structured object with informations about the class(optional)
			 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
			 * @return the created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticControl with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticControl
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticControlMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticButton with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticControl.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticButton
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticButtonMetadata, FNMetaImpl?: any): any;
			/**
			 * Gets current value of property <code>text</code>.
			 * 
			 * Button text
			 * @return Value of property <code>text</code>
			 */
			getText(): string;
			/**
			 * Sets a new value for property <code>text</code>.
			 * 
			 * Button text
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sText New value for property <code>text</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setText(sText: string): MainAction;
		}
	
		class MasterPage extends SemanticPage {
			/**
			 * Constructor for a new MasterPage
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Constructor for a new MasterPage
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Destroys the addAction in the aggregation <code>addAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyAddAction(): MasterPage;
			/**
			 * Destroys the cancelAction in the aggregation <code>cancelAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyCancelAction(): MasterPage;
			/**
			 * Destroys the deleteAction in the aggregation <code>deleteAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyDeleteAction(): MasterPage;
			/**
			 * Destroys the editAction in the aggregation <code>editAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyEditAction(): MasterPage;
			/**
			 * Destroys the filter in the aggregation <code>filter</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyFilter(): MasterPage;
			/**
			 * Destroys the forwardAction in the aggregation <code>forwardAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyForwardAction(): MasterPage;
			/**
			 * Destroys the group in the aggregation <code>group</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyGroup(): MasterPage;
			/**
			 * Destroys the mainAction in the aggregation <code>mainAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyMainAction(): MasterPage;
			/**
			 * Destroys the messagesIndicator in the aggregation <code>messagesIndicator</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyMessagesIndicator(): MasterPage;
			/**
			 * Destroys the multiSelectAction in the aggregation <code>multiSelectAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyMultiSelectAction(): MasterPage;
			/**
			 * Destroys the negativeAction in the aggregation <code>negativeAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyNegativeAction(): MasterPage;
			/**
			 * Destroys the positiveAction in the aggregation <code>positiveAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyPositiveAction(): MasterPage;
			/**
			 * Destroys the saveAction in the aggregation <code>saveAction</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroySaveAction(): MasterPage;
			/**
			 * Destroys the sort in the aggregation <code>sort</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroySort(): MasterPage;
			/**
			 * Creates a new subclass of class sap.m.semantic.MasterPage with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticPage.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @note Overload from base type sap.ui.core.Control
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticPage with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticPage
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticPageMetadata, FNMetaImpl?: any): any;
			/**
			 * Gets content of aggregation <code>addAction</code>.
			 * 
			 * Add action
			 * @return 
			 */
			getAddAction(): AddAction;
			/**
			 * Gets content of aggregation <code>cancelAction</code>.
			 * 
			 * Cancel action
			 * @return 
			 */
			getCancelAction(): CancelAction;
			/**
			 * Gets content of aggregation <code>deleteAction</code>.
			 * 
			 * Delete action
			 * @return 
			 */
			getDeleteAction(): DeleteAction;
			/**
			 * Gets content of aggregation <code>editAction</code>.
			 * 
			 * Edit action
			 * @return 
			 */
			getEditAction(): EditAction;
			/**
			 * Gets content of aggregation <code>filter</code>.
			 * 
			 * Filter action
			 * @return 
			 */
			getFilter(): IFilter;
			/**
			 * Gets content of aggregation <code>forwardAction</code>.
			 * 
			 * Forward action
			 * @return 
			 */
			getForwardAction(): ForwardAction;
			/**
			 * Gets content of aggregation <code>group</code>.
			 * 
			 * Group action
			 * @return 
			 */
			getGroup(): IGroup;
			/**
			 * Gets content of aggregation <code>mainAction</code>.
			 * 
			 * Main action
			 * @return 
			 */
			getMainAction(): MainAction;
			/**
			 * Gets content of aggregation <code>messagesIndicator</code>.
			 * 
			 * MessagesIndicator
			 * @return 
			 */
			getMessagesIndicator(): MessagesIndicator;
			/**
			 * Gets content of aggregation <code>multiSelectAction</code>.
			 * 
			 * MultiSelect action
			 * @return 
			 */
			getMultiSelectAction(): MultiSelectAction;
			/**
			 * Gets content of aggregation <code>negativeAction</code>.
			 * 
			 * Negative action
			 * @return 
			 */
			getNegativeAction(): NegativeAction;
			/**
			 * Gets content of aggregation <code>positiveAction</code>.
			 * 
			 * Positive action
			 * @return 
			 */
			getPositiveAction(): PositiveAction;
			/**
			 * Gets content of aggregation <code>saveAction</code>.
			 * 
			 * Save action
			 * @return 
			 */
			getSaveAction(): SaveAction;
			/**
			 * Gets content of aggregation <code>sort</code>.
			 * 
			 * Sort action
			 * @return 
			 */
			getSort(): ISort;
			/**
			 * Sets the aggregated <code>addAction</code>.
			 * @param oAddAction The addAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setAddAction(oAddAction: AddAction): MasterPage;
			/**
			 * Sets the aggregated <code>cancelAction</code>.
			 * @param oCancelAction The cancelAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setCancelAction(oCancelAction: CancelAction): MasterPage;
			/**
			 * Sets the aggregated <code>deleteAction</code>.
			 * @param oDeleteAction The deleteAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setDeleteAction(oDeleteAction: DeleteAction): MasterPage;
			/**
			 * Sets the aggregated <code>editAction</code>.
			 * @param oEditAction The editAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setEditAction(oEditAction: EditAction): MasterPage;
			/**
			 * Sets the aggregated <code>filter</code>.
			 * @param oFilter The filter to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setFilter(oFilter: IFilter): MasterPage;
			/**
			 * Sets the aggregated <code>forwardAction</code>.
			 * @param oForwardAction The forwardAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setForwardAction(oForwardAction: ForwardAction): MasterPage;
			/**
			 * Sets the aggregated <code>group</code>.
			 * @param oGroup The group to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setGroup(oGroup: IGroup): MasterPage;
			/**
			 * Sets the aggregated <code>mainAction</code>.
			 * @param oMainAction The mainAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setMainAction(oMainAction: MainAction): MasterPage;
			/**
			 * Sets the aggregated <code>messagesIndicator</code>.
			 * @param oMessagesIndicator The messagesIndicator to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setMessagesIndicator(oMessagesIndicator: MessagesIndicator): MasterPage;
			/**
			 * Sets the aggregated <code>multiSelectAction</code>.
			 * @param oMultiSelectAction The multiSelectAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setMultiSelectAction(oMultiSelectAction: MultiSelectAction): MasterPage;
			/**
			 * Sets the aggregated <code>negativeAction</code>.
			 * @param oNegativeAction The negativeAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setNegativeAction(oNegativeAction: NegativeAction): MasterPage;
			/**
			 * Sets the aggregated <code>positiveAction</code>.
			 * @param oPositiveAction The positiveAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setPositiveAction(oPositiveAction: PositiveAction): MasterPage;
			/**
			 * Sets the aggregated <code>saveAction</code>.
			 * @param oSaveAction The saveAction to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSaveAction(oSaveAction: SaveAction): MasterPage;
			/**
			 * Sets the aggregated <code>sort</code>.
			 * @param oSort The sort to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSort(oSort: ISort): MasterPage;
		}
	
		class MessagesIndicator extends SemanticButton {
			/**
			 * Constructor for a new MessagesIndicator.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Constructor for a new MessagesIndicator.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.m.semantic.MessagesIndicator with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticControl with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticControl
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticControlMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticButton with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticControl.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticButton
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticButtonMetadata, FNMetaImpl?: any): any;
		}
	
		class MultiSelectAction extends SemanticToggleButton {
			/**
			 * Constructor for a new MultiSelectAction.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Constructor for a new MultiSelectAction.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.m.semantic.MultiSelectAction with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticToggleButton.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticControl with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticControl
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticControlMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticButton with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticControl.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticButton
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticButtonMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticToggleButton with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticToggleButton
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticToggleButtonMetadata, FNMetaImpl?: any): any;
		}
	
		class NegativeAction extends SemanticButton {
			/**
			 * Constructor for a new NegativeAction.
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.m.semantic.NegativeActionMetadata);
			/**
			 * Constructor for a new NegativeAction.
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.m.semantic.NegativeAction with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|NegativeActionMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain three kinds of informations:
			 * <ul>
			 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
			 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
			 * and might contain the following information
			 * <ul>
			 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
			 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
			 * facade of the class</li>
			 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
			 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
			 * </ul>
			 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
			 * </li>
			 * 
			 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
			 * If no constructor function is given, the framework creates a default implementation that delegates all
			 * its arguments to the constructor function of the base class.
			 * </li>
			 * 
			 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
			 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
			 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
			 * make sense to use primitive values here other than to declare public constants.
			 * </li>
			 * 
			 * </ul>
			 * 
			 * The prototype object of the newly created class uses the same prototype as instances of the base class
			 * (prototype chaining).
			 * 
			 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
			 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
			 * itself.
			 * 
			 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
			 * can be specified. Instances of that class will be used to represent metadata for the newly created class
			 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
			 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
			 * @note Overload from base type sap.ui.base.Object
			 * @param sClassName name of the class to be created
			 * @param oClassInfo structured object with informations about the class(optional)
			 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
			 * @return the created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticControl with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticControl
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticControlMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticButton with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticControl.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticButton
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticButtonMetadata, FNMetaImpl?: any): any;
			/**
			 * Gets current value of property <code>text</code>.
			 * 
			 * Button text
			 * @return Value of property <code>text</code>
			 */
			getText(): string;
			/**
			 * Sets a new value for property <code>text</code>.
			 * 
			 * Button text
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sText New value for property <code>text</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setText(sText: string): NegativeAction;
		}
	
		class OpenInAction extends SemanticButton {
			/**
			 * Constructor for a new OpenInAction.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Constructor for a new OpenInAction.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.m.semantic.OpenInAction with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticControl with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticControl
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticControlMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticButton with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticControl.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticButton
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticButtonMetadata, FNMetaImpl?: any): any;
		}
	
		class PositiveAction extends SemanticButton {
			/**
			 * Constructor for a new PositiveAction.
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.m.semantic.PositiveActionMetadata);
			/**
			 * Constructor for a new PositiveAction.
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.m.semantic.PositiveAction with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|PositiveActionMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain three kinds of informations:
			 * <ul>
			 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
			 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
			 * and might contain the following information
			 * <ul>
			 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
			 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
			 * facade of the class</li>
			 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
			 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
			 * </ul>
			 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
			 * </li>
			 * 
			 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
			 * If no constructor function is given, the framework creates a default implementation that delegates all
			 * its arguments to the constructor function of the base class.
			 * </li>
			 * 
			 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
			 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
			 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
			 * make sense to use primitive values here other than to declare public constants.
			 * </li>
			 * 
			 * </ul>
			 * 
			 * The prototype object of the newly created class uses the same prototype as instances of the base class
			 * (prototype chaining).
			 * 
			 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
			 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
			 * itself.
			 * 
			 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
			 * can be specified. Instances of that class will be used to represent metadata for the newly created class
			 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
			 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
			 * @note Overload from base type sap.ui.base.Object
			 * @param sClassName name of the class to be created
			 * @param oClassInfo structured object with informations about the class(optional)
			 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
			 * @return the created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticControl with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticControl
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticControlMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticButton with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticControl.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticButton
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticButtonMetadata, FNMetaImpl?: any): any;
			/**
			 * Gets current value of property <code>text</code>.
			 * 
			 * Button text
			 * @return Value of property <code>text</code>
			 */
			getText(): string;
			/**
			 * Sets a new value for property <code>text</code>.
			 * 
			 * Button text
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sText New value for property <code>text</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setText(sText: string): PositiveAction;
		}
	
		class PrintAction extends SemanticButton {
			/**
			 * Constructor for a new PrintAction.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Constructor for a new PrintAction.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.m.semantic.PrintAction with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticControl with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticControl
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticControlMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticButton with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticControl.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticButton
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticButtonMetadata, FNMetaImpl?: any): any;
		}
	
		class SaveAction extends SemanticButton {
			/**
			 * Constructor for a new SaveAction.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Constructor for a new SaveAction.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.m.semantic.SaveAction with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticControl with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticControl
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticControlMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticButton with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticControl.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticButton
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticButtonMetadata, FNMetaImpl?: any): any;
		}
	
		class SemanticButton extends SemanticControl {
			/**
			 * Constructor for a new SemanticButton.
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.m.semantic.SemanticButtonMetadata);
			/**
			 * Constructor for a new SemanticButton.
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this <code>sap.m.semantic.SemanticButton</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.m.semantic.SemanticButton</code> itself.
			 * 
			 * See {@link sap.m.Button#press}
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.semantic.SemanticButton</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachPress(oData: any, fnFunction: any, oListener?: any): SemanticButton;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this <code>sap.m.semantic.SemanticButton</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachPress(fnFunction: any, oListener: any): SemanticButton;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticButton with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticControl.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticButtonMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain three kinds of informations:
			 * <ul>
			 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
			 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
			 * and might contain the following information
			 * <ul>
			 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
			 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
			 * facade of the class</li>
			 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
			 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
			 * </ul>
			 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
			 * </li>
			 * 
			 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
			 * If no constructor function is given, the framework creates a default implementation that delegates all
			 * its arguments to the constructor function of the base class.
			 * </li>
			 * 
			 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
			 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
			 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
			 * make sense to use primitive values here other than to declare public constants.
			 * </li>
			 * 
			 * </ul>
			 * 
			 * The prototype object of the newly created class uses the same prototype as instances of the base class
			 * (prototype chaining).
			 * 
			 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
			 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
			 * itself.
			 * 
			 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
			 * can be specified. Instances of that class will be used to represent metadata for the newly created class
			 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
			 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
			 * @note Overload from base type sap.ui.base.Object
			 * @param sClassName name of the class to be created
			 * @param oClassInfo structured object with informations about the class(optional)
			 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
			 * @return the created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticControl with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticControl
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticControlMetadata, FNMetaImpl?: any): any;
			/**
			 * Fires event <code>press</code> to attached listeners.
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			firePress(mArguments?: any): SemanticButton;
			/**
			 * Gets current value of property <code>enabled</code>.
			 * 
			 * See {@link sap.m.Button#enabled}
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>enabled</code>
			 */
			getEnabled(): boolean;
			/**
			 * Sets a new value for property <code>enabled</code>.
			 * 
			 * See {@link sap.m.Button#enabled}
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bEnabled New value for property <code>enabled</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setEnabled(bEnabled: boolean): SemanticButton;
		}
	
		class SemanticControl extends sap.ui.core.Element {
			/**
			 * Constructor for a new SemanticControl.
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.m.semantic.SemanticControlMetadata);
			/**
			 * Constructor for a new SemanticControl.
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticControl with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticControlMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain three kinds of informations:
			 * <ul>
			 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
			 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
			 * and might contain the following information
			 * <ul>
			 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
			 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
			 * facade of the class</li>
			 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
			 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
			 * </ul>
			 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
			 * </li>
			 * 
			 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
			 * If no constructor function is given, the framework creates a default implementation that delegates all
			 * its arguments to the constructor function of the base class.
			 * </li>
			 * 
			 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
			 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
			 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
			 * make sense to use primitive values here other than to declare public constants.
			 * </li>
			 * 
			 * </ul>
			 * 
			 * The prototype object of the newly created class uses the same prototype as instances of the base class
			 * (prototype chaining).
			 * 
			 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
			 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
			 * itself.
			 * 
			 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
			 * can be specified. Instances of that class will be used to represent metadata for the newly created class
			 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
			 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
			 * @note Overload from base type sap.ui.base.Object
			 * @param sClassName name of the class to be created
			 * @param oClassInfo structured object with informations about the class(optional)
			 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
			 * @return the created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets current value of property <code>visible</code>.
			 * 
			 * See {@link sap.ui.core.Control#visible}
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>visible</code>
			 */
			getVisible(): boolean;
			/**
			 * Sets a new value for property <code>visible</code>.
			 * 
			 * See {@link sap.ui.core.Control#visible}
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bVisible New value for property <code>visible</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setVisible(bVisible: boolean): SemanticControl;
		}
	
		class SemanticPage extends sap.ui.core.Control {
			/**
			 * Constructor for a new SemanticPage
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.m.semantic.SemanticPageMetadata);
			/**
			 * Constructor for a new SemanticPage
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some content to the aggregation <code>content</code>.
			 * @param oContent the content to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addContent(oContent: sap.ui.core.Control): SemanticPage;
			/**
			 * Adds some customFooterContent to the aggregation <code>customFooterContent</code>.
			 * @param oCustomFooterContent the customFooterContent to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addCustomFooterContent(oCustomFooterContent: sap.m.Button): SemanticPage;
			/**
			 * Adds some customHeaderContent to the aggregation <code>customHeaderContent</code>.
			 * @param oCustomHeaderContent the customHeaderContent to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addCustomHeaderContent(oCustomHeaderContent: sap.m.Button): SemanticPage;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>navButtonPress</code> event of this <code>sap.m.semantic.SemanticPage</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.m.semantic.SemanticPage</code> itself.
			 * 
			 * See {@link sap.m.Page#navButtonPress}
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.semantic.SemanticPage</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachNavButtonPress(oData: any, fnFunction: any, oListener?: any): SemanticPage;
			/**
			 * Destroys all the content in the aggregation <code>content</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyContent(): SemanticPage;
			/**
			 * Destroys all the customFooterContent in the aggregation <code>customFooterContent</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyCustomFooterContent(): SemanticPage;
			/**
			 * Destroys all the customHeaderContent in the aggregation <code>customHeaderContent</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyCustomHeaderContent(): SemanticPage;
			/**
			 * Destroys the landmarkInfo in the aggregation <code>landmarkInfo</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyLandmarkInfo(): SemanticPage;
			/**
			 * Destroys the subHeader in the aggregation <code>subHeader</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroySubHeader(): SemanticPage;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>navButtonPress</code> event of this <code>sap.m.semantic.SemanticPage</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachNavButtonPress(fnFunction: any, oListener: any): SemanticPage;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticPage with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticPageMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain three kinds of informations:
			 * <ul>
			 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
			 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
			 * and might contain the following information
			 * <ul>
			 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
			 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
			 * facade of the class</li>
			 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
			 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
			 * </ul>
			 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
			 * </li>
			 * 
			 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
			 * If no constructor function is given, the framework creates a default implementation that delegates all
			 * its arguments to the constructor function of the base class.
			 * </li>
			 * 
			 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
			 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
			 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
			 * make sense to use primitive values here other than to declare public constants.
			 * </li>
			 * 
			 * </ul>
			 * 
			 * The prototype object of the newly created class uses the same prototype as instances of the base class
			 * (prototype chaining).
			 * 
			 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
			 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
			 * itself.
			 * 
			 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
			 * can be specified. Instances of that class will be used to represent metadata for the newly created class
			 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
			 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
			 * @note Overload from base type sap.ui.base.Object
			 * @param sClassName name of the class to be created
			 * @param oClassInfo structured object with informations about the class(optional)
			 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
			 * @return the created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @note Overload from base type sap.ui.core.Control
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
			/**
			 * Fires event <code>navButtonPress</code> to attached listeners.
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireNavButtonPress(mArguments?: any): SemanticPage;
			/**
			 * Gets content of aggregation <code>content</code>.
			 * 
			 * See {@link sap.m.Page#content}
			 * @return 
			 */
			getContent(): sap.ui.core.Control[];
			/**
			 * Gets content of aggregation <code>customFooterContent</code>.
			 * 
			 * Custom footer buttons
			 * @return 
			 */
			getCustomFooterContent(): sap.m.Button[];
			/**
			 * Gets content of aggregation <code>customHeaderContent</code>.
			 * 
			 * Custom header buttons
			 * @return 
			 */
			getCustomHeaderContent(): sap.m.Button[];
			/**
			 * Gets current value of property <code>enableScrolling</code>.
			 * 
			 * See {@link sap.m.Page#enableScrolling}
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>enableScrolling</code>
			 */
			getEnableScrolling(): boolean;
			/**
			 * Gets current value of property <code>floatingFooter</code>.
			 * 
			 * Determines whether the floating footer behavior is enabled.
			 * If set to <code>true</code>, the content is visible when it's underneath the footer.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>floatingFooter</code>
			 */
			getFloatingFooter(): boolean;
			/**
			 * Gets content of aggregation <code>landmarkInfo</code>.
			 * 
			 * Accessible landmark settings to be applied to the containers of the <code>sap.m.Page</code> control.
			 * 
			 * If not set, no landmarks will be written.
			 * @return 
			 */
			getLandmarkInfo(): sap.m.PageAccessibleLandmarkInfo;
			/**
			 * Gets current value of property <code>showFooter</code>.
			 * 
			 * Hides or shows the page footer
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>showFooter</code>
			 */
			getShowFooter(): boolean;
			/**
			 * Gets current value of property <code>showNavButton</code>.
			 * 
			 * See {@link sap.m.Page#showNavButton}
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>showNavButton</code>
			 */
			getShowNavButton(): boolean;
			/**
			 * Gets current value of property <code>showSubHeader</code>.
			 * 
			 * See {@link sap.m.Page#showSubHeader}
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>showSubHeader</code>
			 */
			getShowSubHeader(): boolean;
			/**
			 * Gets content of aggregation <code>subHeader</code>.
			 * 
			 * See {@link sap.m.Page#subHeader}
			 * @return 
			 */
			getSubHeader(): sap.m.IBar;
			/**
			 * Gets current value of property <code>title</code>.
			 * 
			 * See {@link sap.m.Page#title}
			 * @return Value of property <code>title</code>
			 */
			getTitle(): string;
			/**
			 * Gets current value of property <code>titleLevel</code>.
			 * 
			 * See {@link sap.m.Page#titleLevel}
			 * 
			 * Default value is <code>Auto</code>.
			 * @return Value of property <code>titleLevel</code>
			 */
			getTitleLevel(): sap.ui.core.TitleLevel;
			/**
			 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oContent The content whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfContent(oContent: sap.ui.core.Control): number;
			/**
			 * Checks for the provided <code>sap.m.Button</code> in the aggregation <code>customFooterContent</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oCustomFooterContent The customFooterContent whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfCustomFooterContent(oCustomFooterContent: sap.m.Button): number;
			/**
			 * Checks for the provided <code>sap.m.Button</code> in the aggregation <code>customHeaderContent</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oCustomHeaderContent The customHeaderContent whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfCustomHeaderContent(oCustomHeaderContent: sap.m.Button): number;
			/**
			 * Inserts a content into the aggregation <code>content</code>.
			 * @param oContent the content to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the content should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the content is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertContent(oContent: sap.ui.core.Control, iIndex: number): SemanticPage;
			/**
			 * Inserts a customFooterContent into the aggregation <code>customFooterContent</code>.
			 * @param oCustomFooterContent the customFooterContent to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the customFooterContent should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the customFooterContent is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the customFooterContent is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertCustomFooterContent(oCustomFooterContent: sap.m.Button, iIndex: number): SemanticPage;
			/**
			 * Inserts a customHeaderContent into the aggregation <code>customHeaderContent</code>.
			 * @param oCustomHeaderContent the customHeaderContent to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the customHeaderContent should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the customHeaderContent is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the customHeaderContent is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertCustomHeaderContent(oCustomHeaderContent: sap.m.Button, iIndex: number): SemanticPage;
			/**
			 * Removes all the controls from the aggregation <code>content</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllContent(): sap.ui.core.Control[];
			/**
			 * Removes all the controls from the aggregation <code>customFooterContent</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllCustomFooterContent(): sap.m.Button[];
			/**
			 * Removes all the controls from the aggregation <code>customHeaderContent</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllCustomHeaderContent(): sap.m.Button[];
			/**
			 * Removes a content from the aggregation <code>content</code>.
			 * @param vContent The content to remove or its index or id
			 * @return The removed content or <code>null</code>
			 */
			removeContent(vContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
			/**
			 * Removes a customFooterContent from the aggregation <code>customFooterContent</code>.
			 * @param vCustomFooterContent The customFooterContent to remove or its index or id
			 * @return The removed customFooterContent or <code>null</code>
			 */
			removeCustomFooterContent(vCustomFooterContent: number|string|sap.m.Button): sap.m.Button;
			/**
			 * Removes a customHeaderContent from the aggregation <code>customHeaderContent</code>.
			 * @param vCustomHeaderContent The customHeaderContent to remove or its index or id
			 * @return The removed customHeaderContent or <code>null</code>
			 */
			removeCustomHeaderContent(vCustomHeaderContent: number|string|sap.m.Button): sap.m.Button;
			/**
			 * Sets a new value for property <code>enableScrolling</code>.
			 * 
			 * See {@link sap.m.Page#enableScrolling}
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bEnableScrolling New value for property <code>enableScrolling</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setEnableScrolling(bEnableScrolling: boolean): SemanticPage;
			/**
			 * Sets a new value for property <code>floatingFooter</code>.
			 * 
			 * Determines whether the floating footer behavior is enabled.
			 * If set to <code>true</code>, the content is visible when it's underneath the footer.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bFloatingFooter New value for property <code>floatingFooter</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setFloatingFooter(bFloatingFooter: boolean): SemanticPage;
			/**
			 * Sets the aggregated <code>landmarkInfo</code>.
			 * @param oLandmarkInfo The landmarkInfo to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setLandmarkInfo(oLandmarkInfo: sap.m.PageAccessibleLandmarkInfo): SemanticPage;
			/**
			 * Sets a new value for property <code>showFooter</code>.
			 * 
			 * Hides or shows the page footer
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bShowFooter New value for property <code>showFooter</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setShowFooter(bShowFooter: boolean): SemanticPage;
			/**
			 * Sets a new value for property <code>showNavButton</code>.
			 * 
			 * See {@link sap.m.Page#showNavButton}
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bShowNavButton New value for property <code>showNavButton</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setShowNavButton(bShowNavButton: boolean): SemanticPage;
			/**
			 * Sets a new value for property <code>showSubHeader</code>.
			 * 
			 * See {@link sap.m.Page#showSubHeader}
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bShowSubHeader New value for property <code>showSubHeader</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setShowSubHeader(bShowSubHeader: boolean): SemanticPage;
			/**
			 * Sets the aggregated <code>subHeader</code>.
			 * @param oSubHeader The subHeader to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSubHeader(oSubHeader: sap.m.IBar): SemanticPage;
			/**
			 * Sets a new value for property <code>title</code>.
			 * 
			 * See {@link sap.m.Page#title}
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sTitle New value for property <code>title</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setTitle(sTitle: string): SemanticPage;
			/**
			 * Sets a new value for property <code>titleLevel</code>.
			 * 
			 * See {@link sap.m.Page#titleLevel}
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>Auto</code>.
			 * @param sTitleLevel New value for property <code>titleLevel</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setTitleLevel(sTitleLevel: sap.ui.core.TitleLevel): SemanticPage;
		}
	
		class SemanticSelect extends SemanticControl {
			/**
			 * Constructor for a new SemanticSelect.
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.m.semantic.SemanticSelectMetadata);
			/**
			 * Constructor for a new SemanticSelect.
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some item to the aggregation <code>items</code>.
			 * @param oItem the item to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addItem(oItem: sap.ui.core.Item): SemanticSelect;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>change</code> event of this <code>sap.m.semantic.SemanticSelect</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.m.semantic.SemanticSelect</code> itself.
			 * 
			 * See {@link sap.m.Select#change}
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.semantic.SemanticSelect</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachChange(oData: any, fnFunction: any, oListener?: any): SemanticSelect;
			/**
			 * Binds aggregation <code>items</code> to model data.
			 * 
			 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
			 * detailed description of the possible properties of <code>oBindingInfo</code>.
			 * @param oBindingInfo The binding information
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			bindItems(oBindingInfo: any): SemanticSelect;
			/**
			 * Destroys all the items in the aggregation <code>items</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyItems(): SemanticSelect;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>change</code> event of this <code>sap.m.semantic.SemanticSelect</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachChange(fnFunction: any, oListener: any): SemanticSelect;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticSelect with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticControl.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticSelectMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain three kinds of informations:
			 * <ul>
			 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
			 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
			 * and might contain the following information
			 * <ul>
			 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
			 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
			 * facade of the class</li>
			 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
			 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
			 * </ul>
			 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
			 * </li>
			 * 
			 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
			 * If no constructor function is given, the framework creates a default implementation that delegates all
			 * its arguments to the constructor function of the base class.
			 * </li>
			 * 
			 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
			 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
			 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
			 * make sense to use primitive values here other than to declare public constants.
			 * </li>
			 * 
			 * </ul>
			 * 
			 * The prototype object of the newly created class uses the same prototype as instances of the base class
			 * (prototype chaining).
			 * 
			 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
			 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
			 * itself.
			 * 
			 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
			 * can be specified. Instances of that class will be used to represent metadata for the newly created class
			 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
			 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
			 * @note Overload from base type sap.ui.base.Object
			 * @param sClassName name of the class to be created
			 * @param oClassInfo structured object with informations about the class(optional)
			 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
			 * @return the created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticControl with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticControl
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticControlMetadata, FNMetaImpl?: any): any;
			/**
			 * Fires event <code>change</code> to attached listeners.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>selectedItem</code> of type <code>sap.ui.core.Item</code>The selected item.</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireChange(mArguments?: any): SemanticSelect;
			/**
			 * Gets current value of property <code>enabled</code>.
			 * 
			 * See {@link sap.m.Select#enabled}
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>enabled</code>
			 */
			getEnabled(): boolean;
			/**
			 * Gets content of aggregation <code>items</code>.
			 * 
			 * See {@link sap.m.Select#items}
			 * @return 
			 */
			getItems(): sap.ui.core.Item[];
			/**
			 * ID of the element which is the current target of the association <code>selectedItem</code>, or <code>null</code>.
			 * @return 
			 */
			getSelectedItem(): sap.ui.core.ID;
			/**
			 * Gets current value of property <code>selectedKey</code>.
			 * 
			 * See {@link sap.m.Select#selectedKey}
			 * 
			 * Default value is <code></code>.
			 * @return Value of property <code>selectedKey</code>
			 */
			getSelectedKey(): string;
			/**
			 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation <code>items</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oItem The item whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfItem(oItem: sap.ui.core.Item): number;
			/**
			 * Inserts a item into the aggregation <code>items</code>.
			 * @param oItem the item to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the item should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the item is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertItem(oItem: sap.ui.core.Item, iIndex: number): SemanticSelect;
			/**
			 * Removes all the controls from the aggregation <code>items</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllItems(): sap.ui.core.Item[];
			/**
			 * Removes a item from the aggregation <code>items</code>.
			 * @param vItem The item to remove or its index or id
			 * @return The removed item or <code>null</code>
			 */
			removeItem(vItem: number|string|sap.ui.core.Item): sap.ui.core.Item;
			/**
			 * Sets a new value for property <code>enabled</code>.
			 * 
			 * See {@link sap.m.Select#enabled}
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bEnabled New value for property <code>enabled</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setEnabled(bEnabled: boolean): SemanticSelect;
			/**
			 * Sets the associated <code>selectedItem</code>.
			 * @param oSelectedItem ID of an element which becomes the new target of this selectedItem association; alternatively, an element instance may be given
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSelectedItem(oSelectedItem: sap.ui.core.ID|sap.ui.core.Item): SemanticSelect;
			/**
			 * Sets a new value for property <code>selectedKey</code>.
			 * 
			 * See {@link sap.m.Select#selectedKey}
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code></code>.
			 * @param sSelectedKey New value for property <code>selectedKey</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSelectedKey(sSelectedKey: string): SemanticSelect;
			/**
			 * Unbinds aggregation <code>items</code> from model data.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			unbindItems(): SemanticSelect;
		}
	
		class SemanticToggleButton extends SemanticButton {
			/**
			 * Constructor for a new SemanticToggleButton.
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.m.semantic.SemanticToggleButtonMetadata);
			/**
			 * Constructor for a new SemanticToggleButton.
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticToggleButton with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticToggleButtonMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain three kinds of informations:
			 * <ul>
			 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
			 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
			 * and might contain the following information
			 * <ul>
			 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
			 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
			 * facade of the class</li>
			 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
			 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
			 * </ul>
			 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
			 * </li>
			 * 
			 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
			 * If no constructor function is given, the framework creates a default implementation that delegates all
			 * its arguments to the constructor function of the base class.
			 * </li>
			 * 
			 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
			 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
			 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
			 * make sense to use primitive values here other than to declare public constants.
			 * </li>
			 * 
			 * </ul>
			 * 
			 * The prototype object of the newly created class uses the same prototype as instances of the base class
			 * (prototype chaining).
			 * 
			 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
			 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
			 * itself.
			 * 
			 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
			 * can be specified. Instances of that class will be used to represent metadata for the newly created class
			 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
			 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
			 * @note Overload from base type sap.ui.base.Object
			 * @param sClassName name of the class to be created
			 * @param oClassInfo structured object with informations about the class(optional)
			 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
			 * @return the created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticControl with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticControl
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticControlMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticButton with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticControl.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticButton
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticButtonMetadata, FNMetaImpl?: any): any;
			/**
			 * Gets current value of property <code>pressed</code>.
			 * 
			 * The property is “true” when the control is toggled. The default state of this property is "false".
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>pressed</code>
			 */
			getPressed(): boolean;
			/**
			 * Sets a new value for property <code>pressed</code>.
			 * 
			 * The property is “true” when the control is toggled. The default state of this property is "false".
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bPressed New value for property <code>pressed</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setPressed(bPressed: boolean): SemanticToggleButton;
		}
	
		class SendEmailAction extends SemanticButton {
			/**
			 * Constructor for a new SendEmailAction.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Constructor for a new SendEmailAction.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.m.semantic.SendEmailAction with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticControl with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticControl
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticControlMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticButton with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticControl.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticButton
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticButtonMetadata, FNMetaImpl?: any): any;
		}
	
		class SendMessageAction extends SemanticButton {
			/**
			 * Constructor for a new SendMessageAction.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Constructor for a new SendMessageAction.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.m.semantic.SendMessageAction with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticControl with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticControl
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticControlMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticButton with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticControl.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticButton
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticButtonMetadata, FNMetaImpl?: any): any;
		}
	
		class ShareInJamAction extends SemanticButton {
			/**
			 * Constructor for a new ShareInJamAction.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Constructor for a new ShareInJamAction.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.m.semantic.ShareInJamAction with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticControl with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticControl
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticControlMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticButton with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticControl.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticButton
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticButtonMetadata, FNMetaImpl?: any): any;
		}
	
		class ShareMenuPage extends SemanticPage {
			/**
			 * Constructor for a new ShareMenuPage
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Constructor for a new ShareMenuPage
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some customShareMenuContent to the aggregation <code>customShareMenuContent</code>.
			 * @param oCustomShareMenuContent the customShareMenuContent to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addCustomShareMenuContent(oCustomShareMenuContent: sap.m.Button): ShareMenuPage;
			/**
			 * Destroys all the customShareMenuContent in the aggregation <code>customShareMenuContent</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyCustomShareMenuContent(): ShareMenuPage;
			/**
			 * Creates a new subclass of class sap.m.semantic.ShareMenuPage with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticPage.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @note Overload from base type sap.ui.core.Control
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticPage with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticPage
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticPageMetadata, FNMetaImpl?: any): any;
			/**
			 * Gets content of aggregation <code>customShareMenuContent</code>.
			 * 
			 * Custom share menu buttons
			 * @return 
			 */
			getCustomShareMenuContent(): sap.m.Button[];
			/**
			 * Checks for the provided <code>sap.m.Button</code> in the aggregation <code>customShareMenuContent</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oCustomShareMenuContent The customShareMenuContent whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfCustomShareMenuContent(oCustomShareMenuContent: sap.m.Button): number;
			/**
			 * Inserts a customShareMenuContent into the aggregation <code>customShareMenuContent</code>.
			 * @param oCustomShareMenuContent the customShareMenuContent to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the customShareMenuContent should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the customShareMenuContent is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the customShareMenuContent is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertCustomShareMenuContent(oCustomShareMenuContent: sap.m.Button, iIndex: number): ShareMenuPage;
			/**
			 * Removes all the controls from the aggregation <code>customShareMenuContent</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllCustomShareMenuContent(): sap.m.Button[];
			/**
			 * Removes a customShareMenuContent from the aggregation <code>customShareMenuContent</code>.
			 * @param vCustomShareMenuContent The customShareMenuContent to remove or its index or id
			 * @return The removed customShareMenuContent or <code>null</code>
			 */
			removeCustomShareMenuContent(vCustomShareMenuContent: number|string|sap.m.Button): sap.m.Button;
		}
	
		class SortAction extends SemanticButton {
			/**
			 * Constructor for a new SortAction.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Constructor for a new SortAction.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.m.semantic.SortAction with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticButton.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticControl with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticControl
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticControlMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticButton with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticControl.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticButton
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticButtonMetadata, FNMetaImpl?: any): any;
		}
	
		class SortSelect extends SemanticSelect {
			/**
			 * Constructor for a new SortSelect.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Constructor for a new SortSelect.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Custom initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.m.semantic.SortSelect with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticSelect.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticControl with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticControl
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticControlMetadata, FNMetaImpl?: any): any;
			/**
			 * Creates a new subclass of class sap.m.semantic.SemanticSelect with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.semantic.SemanticControl.extend}.
			 * @note Overload from base type sap.m.semantic.SemanticSelect
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any|SemanticSelectMetadata, FNMetaImpl?: any): any;
		}
	
		interface MainActionMetadata extends sap.m.semantic.SemanticButtonMetadata {
			/**
			 * Button text
			 */
			text?: string;
		}
	
		interface NegativeActionMetadata extends sap.m.semantic.SemanticButtonMetadata {
			/**
			 * Button text
			 */
			text?: string;
		}
	
		interface PositiveActionMetadata extends sap.m.semantic.SemanticButtonMetadata {
			/**
			 * Button text
			 */
			text?: string;
		}
	
		interface SemanticButtonMetadata extends sap.m.semantic.SemanticControlMetadata {
			/**
			 * See {@link sap.m.Button#enabled}
			 * @default true
			 */
			enabled?: boolean;
			/**
			 * See {@link sap.m.Button#press}
			 */
			press?: () => void;
		}
	
		interface SemanticControlMetadata {
			/**
			 * See {@link sap.ui.core.Control#visible}
			 * @default true
			 */
			visible?: boolean;
		}
	
		interface SemanticPageMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * See {@link sap.m.Page#title}
			 */
			title?: string;
			/**
			 * See {@link sap.m.Page#titleLevel}
			 * @default Auto
			 */
			titleLevel?: sap.ui.core.TitleLevel;
			/**
			 * See {@link sap.m.Page#showNavButton}
			 * @default false
			 */
			showNavButton?: boolean;
			/**
			 * See {@link sap.m.Page#showSubHeader}
			 * @default true
			 */
			showSubHeader?: boolean;
			/**
			 * See {@link sap.m.Page#enableScrolling}
			 * @default true
			 */
			enableScrolling?: boolean;
			/**
			 * Hides or shows the page footer
			 * @default true
			 */
			showFooter?: boolean;
			/**
			 * Determines whether the floating footer behavior is enabled.
			 * If set to <code>true</code>, the content is visible when it's underneath the footer.
			 * @default false
			 */
			floatingFooter?: boolean;
			/**
			 * See {@link sap.m.Page#navButtonPress}
			 */
			navButtonPress?: () => void;
		}
	
		interface SemanticSelectMetadata extends sap.m.semantic.SemanticControlMetadata {
			/**
			 * See {@link sap.m.Select#enabled}
			 * @default true
			 */
			enabled?: boolean;
			/**
			 * See {@link sap.m.Select#selectedKey}
			 * @default 
			 */
			selectedKey?: string;
			/**
			 * See {@link sap.m.Select#change}
			 * @param selectedItem The selected item.
			 */
			change?: (selectedItem: sap.ui.core.Item) => void;
		}
	
		interface SemanticToggleButtonMetadata extends sap.m.semantic.SemanticButtonMetadata {
			/**
			 * The property is “true” when the control is toggled. The default state of this property is "false".
			 * @default false
			 */
			pressed?: boolean;
		}
	}

	class Shell extends sap.ui.core.Control {
		/**
		 * Constructor for a new Shell.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.ShellMetadata);
		/**
		 * Constructor for a new Shell.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>logout</code> event of this <code>sap.m.Shell</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Shell</code> itself.
		 * 
		 * Fires when the user presses the logout button/link.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Shell</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachLogout(oData: any, fnFunction: any, oListener?: any): Shell;
		/**
		 * Destroys the app in the aggregation <code>app</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyApp(): Shell;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>logout</code> event of this <code>sap.m.Shell</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachLogout(fnFunction: any, oListener: any): Shell;
		/**
		 * Creates a new subclass of class sap.m.Shell with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ShellMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>logout</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireLogout(mArguments?: any): Shell;
		/**
		 * Gets content of aggregation <code>app</code>.
		 * 
		 * A Shell contains an App or a SplitApp (they may be wrapped in a View). Other control types are not allowed.
		 * @return 
		 */
		getApp(): sap.ui.core.Control;
		/**
		 * Gets current value of property <code>appWidthLimited</code>.
		 * 
		 * Determines whether the width of the content (the aggregated App) should be limited or extended to the full screen width.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>appWidthLimited</code>
		 */
		getAppWidthLimited(): boolean;
		/**
		 * Gets current value of property <code>backgroundColor</code>.
		 * 
		 * Defines the background color of the Shell. If set, this color will override the default background defined by the theme. This should only be set when really required.
		 * Any configured background image will be placed above this colored background.
		 * Use the backgroundRepeat property to define whether this image should be stretched to cover the complete Shell or whether it should be tiled.
		 * @return Value of property <code>backgroundColor</code>
		 */
		getBackgroundColor(): sap.ui.core.CSSColor;
		/**
		 * Gets current value of property <code>backgroundImage</code>.
		 * 
		 * Defines the background image of the Shell. If set, this image will override the default background defined by the theme. This should only be set when really required.
		 * This background image will be placed above any color set for the background.
		 * Use the backgroundRepeat property to define whether this image should be stretched to cover the complete Shell or whether it should be tiled.
		 * @return Value of property <code>backgroundImage</code>
		 */
		getBackgroundImage(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>backgroundOpacity</code>.
		 * 
		 * Defines the opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 (fully opaque).
		 * This can be used to improve readability of the Shell content by making the background image partly transparent.
		 * 
		 * Default value is <code>1</code>.
		 * @return Value of property <code>backgroundOpacity</code>
		 */
		getBackgroundOpacity(): number;
		/**
		 * Gets current value of property <code>backgroundRepeat</code>.
		 * 
		 * Determines whether the background image (if configured) should be proportionally stretched to cover the whole Shell (false, default) or whether it should be tiled (true).
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>backgroundRepeat</code>
		 */
		getBackgroundRepeat(): boolean;
		/**
		 * Gets current value of property <code>headerRightText</code>.
		 * 
		 * Defines texts, such as the name of the logged-in user, which should be displayed on the right side of the header (if there is enough space to display the header at all - this only happens on very tall screens (1568px height), otherwise, it is always hidden).
		 * @return Value of property <code>headerRightText</code>
		 */
		getHeaderRightText(): string;
		/**
		 * Gets current value of property <code>homeIcon</code>.
		 * 
		 * Sets the icon used for the mobile device home screen and the icon to be used for bookmarks by desktop browsers.
		 * 
		 * This property should be only set once, and as early as possible. Subsequent calls replace the previous icon settings and may lead to different behavior depending on the browser.
		 * 
		 * Different image sizes for device home screen need to be given as PNG images, an ICO file needs to be given as desktop browser bookmark icon (other file formats may not work in all browsers).
		 * The <code>precomposed</code> flag defines whether there is already a glow effect contained in the home screen images (or whether iOS should add such an effect). The given structure could look like this:
		 * {
		 * 'phone':'phone-icon_57x57.png',
		 * 'phone@2':'phone-retina_114x114.png',
		 * 'tablet':'tablet-icon_72x72.png',
		 * 'tablet@2':'tablet-retina_144x144.png',
		 * 'precomposed':true,
		 * 'favicon':'favicon.ico'
		 * }
		 * 
		 * See jQuery.sap.setIcons() for full documentation.
		 * @return Value of property <code>homeIcon</code>
		 */
		getHomeIcon(): any;
		/**
		 * Gets current value of property <code>logo</code>.
		 * 
		 * Defines the logo to be displayed next to the App when the screen is sufficiently large.
		 * @return Value of property <code>logo</code>
		 */
		getLogo(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>showLogout</code>.
		 * 
		 * Determines whether the Logout button should be displayed. Currently, this only happens on very tall screens (1568px height), otherwise, it is always hidden.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>showLogout</code>
		 */
		getShowLogout(): boolean;
		/**
		 * Gets current value of property <code>title</code>.
		 * 
		 * Defines the application title, which may or may not be displayed outside the actual application, depending on the available screen size.
		 * @return Value of property <code>title</code>
		 */
		getTitle(): string;
		/**
		 * Sets the aggregated <code>app</code>.
		 * @param oApp The app to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setApp(oApp: sap.ui.core.Control): Shell;
		/**
		 * Sets a new value for property <code>appWidthLimited</code>.
		 * 
		 * Determines whether the width of the content (the aggregated App) should be limited or extended to the full screen width.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bAppWidthLimited New value for property <code>appWidthLimited</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setAppWidthLimited(bAppWidthLimited: boolean): Shell;
		/**
		 * Sets a new value for property <code>backgroundColor</code>.
		 * 
		 * Defines the background color of the Shell. If set, this color will override the default background defined by the theme. This should only be set when really required.
		 * Any configured background image will be placed above this colored background.
		 * Use the backgroundRepeat property to define whether this image should be stretched to cover the complete Shell or whether it should be tiled.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sBackgroundColor New value for property <code>backgroundColor</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setBackgroundColor(sBackgroundColor: sap.ui.core.CSSColor): Shell;
		/**
		 * Sets a new value for property <code>backgroundImage</code>.
		 * 
		 * Defines the background image of the Shell. If set, this image will override the default background defined by the theme. This should only be set when really required.
		 * This background image will be placed above any color set for the background.
		 * Use the backgroundRepeat property to define whether this image should be stretched to cover the complete Shell or whether it should be tiled.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sBackgroundImage New value for property <code>backgroundImage</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setBackgroundImage(sBackgroundImage: sap.ui.core.URI): Shell;
		/**
		 * Sets a new value for property <code>backgroundOpacity</code>.
		 * 
		 * Defines the opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 (fully opaque).
		 * This can be used to improve readability of the Shell content by making the background image partly transparent.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>1</code>.
		 * @param fBackgroundOpacity New value for property <code>backgroundOpacity</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setBackgroundOpacity(fBackgroundOpacity: number): Shell;
		/**
		 * Sets a new value for property <code>backgroundRepeat</code>.
		 * 
		 * Determines whether the background image (if configured) should be proportionally stretched to cover the whole Shell (false, default) or whether it should be tiled (true).
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bBackgroundRepeat New value for property <code>backgroundRepeat</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setBackgroundRepeat(bBackgroundRepeat: boolean): Shell;
		/**
		 * Sets a new value for property <code>headerRightText</code>.
		 * 
		 * Defines texts, such as the name of the logged-in user, which should be displayed on the right side of the header (if there is enough space to display the header at all - this only happens on very tall screens (1568px height), otherwise, it is always hidden).
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sHeaderRightText New value for property <code>headerRightText</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHeaderRightText(sHeaderRightText: string): Shell;
		/**
		 * Sets a new value for property <code>homeIcon</code>.
		 * 
		 * Sets the icon used for the mobile device home screen and the icon to be used for bookmarks by desktop browsers.
		 * 
		 * This property should be only set once, and as early as possible. Subsequent calls replace the previous icon settings and may lead to different behavior depending on the browser.
		 * 
		 * Different image sizes for device home screen need to be given as PNG images, an ICO file needs to be given as desktop browser bookmark icon (other file formats may not work in all browsers).
		 * The <code>precomposed</code> flag defines whether there is already a glow effect contained in the home screen images (or whether iOS should add such an effect). The given structure could look like this:
		 * {
		 * 'phone':'phone-icon_57x57.png',
		 * 'phone@2':'phone-retina_114x114.png',
		 * 'tablet':'tablet-icon_72x72.png',
		 * 'tablet@2':'tablet-retina_144x144.png',
		 * 'precomposed':true,
		 * 'favicon':'favicon.ico'
		 * }
		 * 
		 * See jQuery.sap.setIcons() for full documentation.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param oHomeIcon New value for property <code>homeIcon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHomeIcon(oHomeIcon: any): Shell;
		/**
		 * Sets a new value for property <code>logo</code>.
		 * 
		 * Defines the logo to be displayed next to the App when the screen is sufficiently large.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sLogo New value for property <code>logo</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setLogo(sLogo: sap.ui.core.URI): Shell;
		/**
		 * Sets a new value for property <code>showLogout</code>.
		 * 
		 * Determines whether the Logout button should be displayed. Currently, this only happens on very tall screens (1568px height), otherwise, it is always hidden.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bShowLogout New value for property <code>showLogout</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowLogout(bShowLogout: boolean): Shell;
		/**
		 * Sets a new value for property <code>title</code>.
		 * 
		 * Defines the application title, which may or may not be displayed outside the actual application, depending on the available screen size.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sTitle New value for property <code>title</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTitle(sTitle: string): Shell;
	}

	class Size {
		/**
		 * The size of the tile depends on the device it is running on. It is medium size for desktop and tablet and small size for phone.
		 */
		static Auto: string;
		/**
		 * Large size.
		 */
		static L: string;
		/**
		 * Medium size.
		 */
		static M: string;
		/**
		 * Small size.
		 */
		static S: string;
		/**
		 * Extra small size.
		 */
		static XS: string;
	}

	class Slider extends sap.ui.core.Control {
		/**
		 * Constructor for a new <code>sap.m.Slider</code>.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given.(optional)
		 * @param mSettings Initial settings for the new control.(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.SliderMetadata);
		/**
		 * Constructor for a new <code>sap.m.Slider</code>.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given.(optional)
		 * @param mSettings Initial settings for the new control.(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): Slider;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>change</code> event of this <code>sap.m.Slider</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Slider</code> itself.
		 * 
		 * This event is triggered after the end user finishes interacting, if there is any change.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Slider</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachChange(oData: any, fnFunction: any, oListener?: any): Slider;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>liveChange</code> event of this <code>sap.m.Slider</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Slider</code> itself.
		 * 
		 * This event is triggered during the dragging period, each time the slider value changes.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Slider</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachLiveChange(oData: any, fnFunction: any, oListener?: any): Slider;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>change</code> event of this <code>sap.m.Slider</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachChange(fnFunction: any, oListener: any): Slider;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>liveChange</code> event of this <code>sap.m.Slider</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachLiveChange(fnFunction: any, oListener: any): Slider;
		/**
		 * Creates a new subclass of class sap.m.Slider with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|SliderMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>change</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>value</code> of type <code>float</code>The current value of the slider after a change.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireChange(mArguments?: any): Slider;
		/**
		 * Fires event <code>liveChange</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>value</code> of type <code>float</code>The current value of the slider after a live change.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireLiveChange(mArguments?: any): Slider;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
		 * @return 
		 */
		getAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Gets current value of property <code>enabled</code>.
		 * 
		 * Indicates whether the user can change the value.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>enabled</code>
		 */
		getEnabled(): boolean;
		/**
		 * Gets current value of property <code>max</code>.
		 * 
		 * The maximum value.
		 * 
		 * Default value is <code>100</code>.
		 * @return Value of property <code>max</code>
		 */
		getMax(): number;
		/**
		 * Gets current value of property <code>min</code>.
		 * 
		 * The minimum value.
		 * 
		 * Default value is <code>0</code>.
		 * @return Value of property <code>min</code>
		 */
		getMin(): number;
		/**
		 * Gets current value of property <code>name</code>.
		 * 
		 * The name property to be used in the HTML code for the slider (e.g. for HTML forms that send data to the server via submit).
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>name</code>
		 */
		getName(): string;
		/**
		 * Gets current value of property <code>progress</code>.
		 * 
		 * Indicate whether a progress bar indicator is shown.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>progress</code>
		 */
		getProgress(): boolean;
		/**
		 * Gets current value of property <code>showHandleTooltip</code>.
		 * 
		 * Indicate whether the handle tooltip is shown.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>showHandleTooltip</code>
		 */
		getShowHandleTooltip(): boolean;
		/**
		 * Gets current value of property <code>step</code>.
		 * 
		 * Define the amount of units to change the slider when adjusting by drag and drop.
		 * 
		 * Defines the size of the slider's selection intervals. (e.g. min = 0, max = 10, step = 5 would result in possible selection of the values 0, 5, 10).
		 * 
		 * The step must be positive, if a negative number is provided, the default value will be used instead.
		 * If the width of the slider converted to pixels is less than the range (max – min), the value will be rounded to multiples of the step size.
		 * 
		 * Default value is <code>1</code>.
		 * @return Value of property <code>step</code>
		 */
		getStep(): number;
		/**
		 * Gets current value of property <code>value</code>.
		 * 
		 * Define the value.
		 * 
		 * If the value is lower/higher than the allowed minimum/maximum, the value of the properties <code>min<code>/<code>max</code> are used instead.
		 * 
		 * Default value is <code>0</code>.
		 * @return Value of property <code>value</code>
		 */
		getValue(): number;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Defines the width of the control.
		 * 
		 * Default value is <code>100%</code>.
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
		 * @return The removed ariaLabelledBy or <code>null</code>
		 */
		removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Sets a new value for property <code>enabled</code>.
		 * 
		 * Indicates whether the user can change the value.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bEnabled New value for property <code>enabled</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setEnabled(bEnabled: boolean): Slider;
		/**
		 * Sets a new value for property <code>max</code>.
		 * 
		 * The maximum value.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>100</code>.
		 * @param fMax New value for property <code>max</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMax(fMax: number): Slider;
		/**
		 * Sets a new value for property <code>min</code>.
		 * 
		 * The minimum value.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>0</code>.
		 * @param fMin New value for property <code>min</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMin(fMin: number): Slider;
		/**
		 * Sets a new value for property <code>name</code>.
		 * 
		 * The name property to be used in the HTML code for the slider (e.g. for HTML forms that send data to the server via submit).
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sName New value for property <code>name</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setName(sName: string): Slider;
		/**
		 * Sets a new value for property <code>progress</code>.
		 * 
		 * Indicate whether a progress bar indicator is shown.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bProgress New value for property <code>progress</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setProgress(bProgress: boolean): Slider;
		/**
		 * Sets a new value for property <code>showHandleTooltip</code>.
		 * 
		 * Indicate whether the handle tooltip is shown.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bShowHandleTooltip New value for property <code>showHandleTooltip</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowHandleTooltip(bShowHandleTooltip: boolean): Slider;
		/**
		 * Sets a new value for property <code>step</code>.
		 * 
		 * Define the amount of units to change the slider when adjusting by drag and drop.
		 * 
		 * Defines the size of the slider's selection intervals. (e.g. min = 0, max = 10, step = 5 would result in possible selection of the values 0, 5, 10).
		 * 
		 * The step must be positive, if a negative number is provided, the default value will be used instead.
		 * If the width of the slider converted to pixels is less than the range (max – min), the value will be rounded to multiples of the step size.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>1</code>.
		 * @param fStep New value for property <code>step</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setStep(fStep: number): Slider;
		/**
		 * Sets the property <code>value</code>.
		 * 
		 * Default value is <code>0</code>.
		 * @param fNewValue new value for property <code>value</code>.
		 * @return <code>this</code> to allow method chaining.
		 */
		setValue(fNewValue: number): Slider;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Defines the width of the control.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>100%</code>.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): Slider;
		/**
		 * Decrements the value by multiplying the step the <code>step</code> with the given parameter.
		 * @param iStep The number of steps the slider goes down.(optional)
		 * @return <code>this</code> to allow method chaining.
		 */
		stepDown(iStep?: number): Slider;
		/**
		 * Increments the value by multiplying the <code>step</code> with the given parameter.
		 * @param iStep The number of steps the slider goes up.(optional)
		 * @return <code>this</code> to allow method chaining.
		 */
		stepUp(iStep?: number): Slider;
	}

	class SlideTile extends sap.ui.core.Control {
		/**
		 * Constructor for a new sap.m.SlideTile control.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.SlideTileMetadata);
		/**
		 * Constructor for a new sap.m.SlideTile control.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some tile to the aggregation <code>tiles</code>.
		 * @param oTile the tile to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addTile(oTile: GenericTile): SlideTile;
		/**
		 * Destroys all the tiles in the aggregation <code>tiles</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyTiles(): SlideTile;
		/**
		 * Creates a new subclass of class sap.m.SlideTile with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|SlideTileMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>displayTime</code>.
		 * 
		 * The time of the slide display in milliseconds.
		 * 
		 * Default value is <code>5000</code>.
		 * @return Value of property <code>displayTime</code>
		 */
		getDisplayTime(): number;
		/**
		 * Gets content of aggregation <code>tiles</code>.
		 * 
		 * The set of Generic Tiles to be shown in the control.
		 * @return 
		 */
		getTiles(): GenericTile[];
		/**
		 * Gets current value of property <code>transitionTime</code>.
		 * 
		 * The time of the slide changing in milliseconds.
		 * 
		 * Default value is <code>500</code>.
		 * @return Value of property <code>transitionTime</code>
		 */
		getTransitionTime(): number;
		/**
		 * Checks for the provided <code>sap.m.GenericTile</code> in the aggregation <code>tiles</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oTile The tile whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfTile(oTile: GenericTile): number;
		/**
		 * Inserts a tile into the aggregation <code>tiles</code>.
		 * @param oTile the tile to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the tile should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the tile is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the tile is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertTile(oTile: GenericTile, iIndex: number): SlideTile;
		/**
		 * Removes all the controls from the aggregation <code>tiles</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllTiles(): GenericTile[];
		/**
		 * Removes a tile from the aggregation <code>tiles</code>.
		 * @param vTile The tile to remove or its index or id
		 * @return The removed tile or <code>null</code>
		 */
		removeTile(vTile: number|string|GenericTile): GenericTile;
		/**
		 * Sets a new value for property <code>displayTime</code>.
		 * 
		 * The time of the slide display in milliseconds.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>5000</code>.
		 * @param iDisplayTime New value for property <code>displayTime</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDisplayTime(iDisplayTime: number): SlideTile;
		/**
		 * Sets a new value for property <code>transitionTime</code>.
		 * 
		 * The time of the slide changing in milliseconds.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>500</code>.
		 * @param iTransitionTime New value for property <code>transitionTime</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTransitionTime(iTransitionTime: number): SlideTile;
	}

	class SplitApp extends SplitContainer {
		/**
		 * Constructor for a new SplitApp.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.SplitAppMetadata);
		/**
		 * Constructor for a new SplitApp.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Fires the orientationChange event after SplitApp has reacted to the browser orientationChange event.
		 */
		_onOrientationChange();
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>orientationChange</code> event of this <code>sap.m.SplitApp</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.SplitApp</code> itself.
		 * 
		 * Fires when orientation (portrait/landscape) is changed.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.SplitApp</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachOrientationChange(oData: any, fnFunction: any, oListener?: any): SplitApp;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>orientationChange</code> event of this <code>sap.m.SplitApp</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachOrientationChange(fnFunction: any, oListener: any): SplitApp;
		/**
		 * Creates a new subclass of class sap.m.SplitApp with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.SplitContainer.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|SplitAppMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.SplitContainer with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.SplitContainer
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|SplitContainerMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>orientationChange</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>landscape</code> of type <code>boolean</code>Returns true if the device is in landscape mode.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireOrientationChange(mArguments?: any): SplitApp;
		/**
		 * Gets current value of property <code>homeIcon</code>.
		 * 
		 * Represents the icon to be displayed on the home screen of iOS devices after the user does "add to home screen".
		 * Note that only the first attempt to set the homeIcon is executed, subsequent settings are ignored.
		 * The icon must be in PNG format. The property can either store the URL of one single icon or an object holding icon URLs for the different required sizes.
		 * Note that if single icon is used for all devices, when scaled, its quality can regress.
		 * A desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires an object to be given and the "icon" property of this object then defines the desktop bookmark icon.
		 * For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all browsers. ICO is also preferred for this desktop icon setting as the file can contain different images for different resolutions.
		 * 
		 * One example is:
		 * 
		 * app.setHomeIcon({
		 * 'phone':'phone-icon.png',
		 * 'phone@2':'phone-retina.png',
		 * 'tablet':'tablet-icon.png',
		 * 'tablet@2':'tablet-retina.png',
		 * 'icon':'desktop.ico'
		 * });
		 * 
		 * The image size is 57/114 px for the phone and 72/144 px for the tablet.
		 * If an object is given but one of the sizes is not given, the largest given icon will be used for this size.
		 * 
		 * On Android, these icons may or may not be used by the device. Chances can be improved by adding glare effect, rounded corners, setting the file name to end with "-precomposed.png", and setting the homeIconPrecomposed property to true.
		 * @return Value of property <code>homeIcon</code>
		 */
		getHomeIcon(): any;
		/**
		 * Sets a new value for property <code>homeIcon</code>.
		 * 
		 * Represents the icon to be displayed on the home screen of iOS devices after the user does "add to home screen".
		 * Note that only the first attempt to set the homeIcon is executed, subsequent settings are ignored.
		 * The icon must be in PNG format. The property can either store the URL of one single icon or an object holding icon URLs for the different required sizes.
		 * Note that if single icon is used for all devices, when scaled, its quality can regress.
		 * A desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires an object to be given and the "icon" property of this object then defines the desktop bookmark icon.
		 * For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all browsers. ICO is also preferred for this desktop icon setting as the file can contain different images for different resolutions.
		 * 
		 * One example is:
		 * 
		 * app.setHomeIcon({
		 * 'phone':'phone-icon.png',
		 * 'phone@2':'phone-retina.png',
		 * 'tablet':'tablet-icon.png',
		 * 'tablet@2':'tablet-retina.png',
		 * 'icon':'desktop.ico'
		 * });
		 * 
		 * The image size is 57/114 px for the phone and 72/144 px for the tablet.
		 * If an object is given but one of the sizes is not given, the largest given icon will be used for this size.
		 * 
		 * On Android, these icons may or may not be used by the device. Chances can be improved by adding glare effect, rounded corners, setting the file name to end with "-precomposed.png", and setting the homeIconPrecomposed property to true.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param oHomeIcon New value for property <code>homeIcon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHomeIcon(oHomeIcon: any): SplitApp;
	}

	class SplitAppMode {
		/**
		 * Master area is hidden initially both in portrait and landscape. Master area can be opened by clicking on the top left corner button or swiping right. Swipe is only enabled on mobile devices. Master will keep the open state when changing the orientation of the device.
		 */
		static HideMode: string;
		/**
		 * Master will be shown inside a Popover when in portrait mode
		 */
		static PopoverMode: string;
		/**
		 * Master will automatically be hidden in portrait mode.
		 */
		static ShowHideMode: string;
		/**
		 * Master will always be shown but in a compressed version when in portrait mode.
		 */
		static StretchCompressMode: string;
	}

	class SplitContainer extends sap.ui.core.Control {
		/**
		 * Constructor for a new SplitContainer.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.SplitContainerMetadata);
		/**
		 * Constructor for a new SplitContainer.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some detailPage to the aggregation <code>detailPages</code>.
		 * @param oDetailPage the detailPage to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addDetailPage(oDetailPage: sap.ui.core.Control): SplitContainer;
		/**
		 * Adds some masterPage to the aggregation <code>masterPages</code>.
		 * @param oMasterPage the masterPage to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addMasterPage(oMasterPage: sap.ui.core.Control): SplitContainer;
		/**
		 * Adds a content entity either to master area or detail area depending on the master parameter.
		 * 
		 * The method is provided mainly for providing API consistency between sap.m.SplitContainer and sap.m.App. So that the same code line can be reused.
		 * @param oPage The content entities between which this SplitContainer navigates in either master area or detail area depending on the master parameter. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.
		 * @param bMaster States if the page should be added to the master area. If it's set to false, the page is added to detail area.
		 * @return 
		 */
		addPage(oPage: sap.ui.core.Control, bMaster: boolean): SplitContainer;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>afterDetailNavigate</code> event of this <code>sap.m.SplitContainer</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.SplitContainer</code> itself.
		 * 
		 * Fires when navigation between two pages in detail area has completed.
		 * NOTE: In case of animated transitions this event is fired with some delay after the "navigate" event.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachAfterDetailNavigate(oData: any, fnFunction: any, oListener?: any): SplitContainer;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>afterMasterClose</code> event of this <code>sap.m.SplitContainer</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.SplitContainer</code> itself.
		 * 
		 * Fires when the master area is fully closed after the animation (if any).
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachAfterMasterClose(oData: any, fnFunction: any, oListener?: any): SplitContainer;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>afterMasterNavigate</code> event of this <code>sap.m.SplitContainer</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.SplitContainer</code> itself.
		 * 
		 * Fires when navigation between two pages in master area has completed.
		 * NOTE: In case of animated transitions this event is fired with some delay after the navigate event.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachAfterMasterNavigate(oData: any, fnFunction: any, oListener?: any): SplitContainer;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>afterMasterOpen</code> event of this <code>sap.m.SplitContainer</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.SplitContainer</code> itself.
		 * 
		 * Fires when the master area is fully opened after animation if any.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachAfterMasterOpen(oData: any, fnFunction: any, oListener?: any): SplitContainer;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>beforeMasterClose</code> event of this <code>sap.m.SplitContainer</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.SplitContainer</code> itself.
		 * 
		 * Fires before the master area is closed.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachBeforeMasterClose(oData: any, fnFunction: any, oListener?: any): SplitContainer;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>beforeMasterOpen</code> event of this <code>sap.m.SplitContainer</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.SplitContainer</code> itself.
		 * 
		 * Fires before the master area is opened.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachBeforeMasterOpen(oData: any, fnFunction: any, oListener?: any): SplitContainer;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>detailNavigate</code> event of this <code>sap.m.SplitContainer</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.SplitContainer</code> itself.
		 * 
		 * Fires when navigation between two pages in detail area has been triggered.
		 * The transition (if any) to the new page has not started yet.
		 * NOTE: This event can be aborted by the application with preventDefault(), which means that there will be no navigation.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachDetailNavigate(oData: any, fnFunction: any, oListener?: any): SplitContainer;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>masterButton</code> event of this <code>sap.m.SplitContainer</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.SplitContainer</code> itself.
		 * 
		 * Fires when a Master Button needs to be shown or hidden. This is necessary for custom headers when the SplitContainer control does not handle the placement of the master button automatically.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachMasterButton(oData: any, fnFunction: any, oListener?: any): SplitContainer;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>masterNavigate</code> event of this <code>sap.m.SplitContainer</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.SplitContainer</code> itself.
		 * 
		 * Fires when navigation between two pages in master area has been triggered. The transition (if any) to the new page has not started yet.
		 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.SplitContainer</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachMasterNavigate(oData: any, fnFunction: any, oListener?: any): SplitContainer;
		/**
		 * Navigates back to the previous detail page found in the history.
		 * @param oBackData This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as backData property. (The original data from the to() navigation will still be available as data property.)
		 * 
		 *         In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
		 *         For back navigation this can be used, for example, when returning from a detail page to transfer any settings done there.
		 * 
		 *         When the transitionParameters object is used, this data object must also be given (either as object or as null) in order to have a proper parameter order.
		 * @param oTransitionParameter This optional object can give additional information to the transition function, like the DOM element, which triggered the transition or the desired transition duration.
		 *         The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
		 * 
		 *         In order to use the transitionParameters property, the data property must be used (at least "null" must be given) for a proper parameter order.
		 * 
		 *         NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
		 * @return 
		 */
		backDetail(oBackData: any, oTransitionParameter: any): SplitContainer;
		/**
		 * Navigates back to the previous master page which is found in the history.
		 * @param oBackData This optional object can carry any payload data which should be made available to the target page of the back navigation.
		 *         The event on the target page will contain this data object as backData property (the original data from the to() navigation will still be available as data property).
		 * 
		 *         In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
		 *         For back navigation this can be used, for example, when returning from a detail page to transfer any settings done there.
		 * 
		 *         When the transitionParameters object is used, this data object must also be given (either as object or as null) in order to have a proper parameter order.
		 * @param oTransitionParameter This optional object can give additional information to the transition function, like the DOM element, which triggered the transition or the desired transition duration.
		 *         The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
		 * 
		 *         In order to use the transitionParameters property, the data property must be used (at least "null" must be given) for a proper parameter order.
		 * 
		 *         NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
		 * @return 
		 */
		backMaster(oBackData: any, oTransitionParameter: any): SplitContainer;
		/**
		 * Navigates back to the nearest previous page in the SplitContainer history with the given ID (if there is no such page among the previous pages, nothing happens).
		 * The transition effect, which had been used to get to the current page is inverted and used for this navigation.
		 * 
		 * Calling this navigation method, first triggers the (cancelable) navigate event on the SplitContainer,
		 * then the beforeHide pseudo event on the source page, beforeFirstShow (if applicable),
		 * and beforeShow on the target page. Later, after the transition has completed,
		 * the afterShow pseudo event is triggered on the target page and afterHide - on the page, which has been left.
		 * The given backData object is available in the beforeFirstShow, beforeShow, and afterShow event objects as data
		 * property. The original "data" object from the "to" navigation is also available in these event objects.
		 * @param sPageId The screen to which is being navigated to. The ID or the control itself can be given.
		 * @param oBackData This optional object can carry any payload data which should be made available to the target page of the back navigation.
		 *         The event on the target page will contain this data object as backData property. (the original data from the to() navigation will still be available as data property).
		 * 
		 *         In scenarios, where the entity triggering the navigation can't or shouldn't directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
		 *         For back navigation this can be used, for example, when returning from a detail page to transfer any settings done there.
		 * 
		 *         When the transitionParameters object is used, this data object must also be given (either as object or as null) in order to have a proper parameter order.
		 * @param oTransitionParameters This optional object can give additional information to the transition function, like the DOM element, which triggered the transition or the desired transition duration.
		 *         The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
		 * 
		 *         In order to use the transitionParameters property, the data property must be used (at least "null" must be given) for a proper parameter order.
		 * 
		 *         NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
		 * @return 
		 */
		backToPage(sPageId: string, oBackData: any, oTransitionParameters: any): SplitContainer;
		/**
		 * Navigates back to the initial/top level of Detail (this is the element aggregated as initialPage, or the first added element).
		 * NOTE: If already on the initial page, nothing happens.
		 * The transition effect which had been used to get to the current page is inverted and used for this navigation.
		 * @param oBackData This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as backData property (the original data from the to() navigation will still be available as data property).
		 * 
		 *         In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
		 *         For back navigation this can be used, for example, when returning from a detail page to transfer any settings done there.
		 * 
		 *         When the transitionParameters object is used, this data object must also be given (either as object or as null) in order to have a proper parameter order.
		 * @param oTransitionParameter This optional object can give additional information to the transition function, like the DOM element, which triggered the transition or the desired transition duration.
		 *         The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
		 * 
		 *         In order to use the transitionParameters property, the data property must be used (at least "null" must be given) for a proper parameter order.
		 * 
		 *         NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
		 * @return 
		 */
		backToTopDetail(oBackData: any, oTransitionParameter: any): sap.ui.core.Control;
		/**
		 * Navigates back to the initial/top level of Master (this is the element aggregated as "initialPage", or the first added element).
		 * NOTE: If already on the initial page, nothing happens.
		 * The transition effect which had been used to get to the current page is inverted and used for this navigation.
		 * @param oBackData This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as "backData" property. (The original data from the "to()" navigation will still be available as "data" property.)
		 * 
		 *         In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
		 *         For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.
		 * 
		 *         When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
		 * @param oTransitionParameter This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
		 *         The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
		 * 
		 *         In order to use the transitionParameters property, the data property must be used (at least "null" must be given) for a proper parameter order.
		 * 
		 *         NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
		 * @return 
		 */
		backToTopMaster(oBackData: any, oTransitionParameter: any): sap.ui.core.Control;
		/**
		 * Destroys all the detailPages in the aggregation <code>detailPages</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyDetailPages(): SplitContainer;
		/**
		 * Destroys all the masterPages in the aggregation <code>masterPages</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyMasterPages(): SplitContainer;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>afterDetailNavigate</code> event of this <code>sap.m.SplitContainer</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachAfterDetailNavigate(fnFunction: any, oListener: any): SplitContainer;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>afterMasterClose</code> event of this <code>sap.m.SplitContainer</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachAfterMasterClose(fnFunction: any, oListener: any): SplitContainer;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>afterMasterNavigate</code> event of this <code>sap.m.SplitContainer</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachAfterMasterNavigate(fnFunction: any, oListener: any): SplitContainer;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>afterMasterOpen</code> event of this <code>sap.m.SplitContainer</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachAfterMasterOpen(fnFunction: any, oListener: any): SplitContainer;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>beforeMasterClose</code> event of this <code>sap.m.SplitContainer</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachBeforeMasterClose(fnFunction: any, oListener: any): SplitContainer;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>beforeMasterOpen</code> event of this <code>sap.m.SplitContainer</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachBeforeMasterOpen(fnFunction: any, oListener: any): SplitContainer;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>detailNavigate</code> event of this <code>sap.m.SplitContainer</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachDetailNavigate(fnFunction: any, oListener: any): SplitContainer;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>masterButton</code> event of this <code>sap.m.SplitContainer</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachMasterButton(fnFunction: any, oListener: any): SplitContainer;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>masterNavigate</code> event of this <code>sap.m.SplitContainer</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachMasterNavigate(fnFunction: any, oListener: any): SplitContainer;
		/**
		 * Creates a new subclass of class sap.m.SplitContainer with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|SplitContainerMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>afterDetailNavigate</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>from</code> of type <code>sap.ui.core.Control</code>The page, which had been displayed before navigation.</li>
		 * <li><code>fromId</code> of type <code>string</code>The ID of the page, which had been displayed before navigation.</li>
		 * <li><code>to</code> of type <code>sap.ui.core.Control</code>The page, which is now displayed after navigation.</li>
		 * <li><code>toId</code> of type <code>string</code>The ID of the page, which is now displayed after navigation.</li>
		 * <li><code>firstTime</code> of type <code>boolean</code>Determines whether the "to" page (more precisely: a control with the ID of the page,
		 * which has been navigated to) has not been displayed/navigated to before.</li>
		 * <li><code>isTo</code> of type <code>boolean</code>Determines whether was a forward navigation, triggered by to().</li>
		 * <li><code>isBack</code> of type <code>boolean</code>Determines whether this was a back navigation, triggered by back().</li>
		 * <li><code>isBackToTop</code> of type <code>boolean</code>Determines whether this was a navigation to the root page, triggered by backToTop().</li>
		 * <li><code>isBackToPage</code> of type <code>boolean</code>Determines whether this was a navigation to a specific page, triggered by backToPage().</li>
		 * <li><code>direction</code> of type <code>string</code>Determines how the navigation was triggered, possible values are "to", "back", "backToPage", and "backToTop".</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireAfterDetailNavigate(mArguments?: any): SplitContainer;
		/**
		 * Fires event <code>afterMasterClose</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireAfterMasterClose(mArguments?: any): SplitContainer;
		/**
		 * Fires event <code>afterMasterNavigate</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>from</code> of type <code>sap.ui.core.Control</code>The page, which had been displayed before navigation.</li>
		 * <li><code>fromId</code> of type <code>string</code>The ID of the page, which had been displayed before navigation.</li>
		 * <li><code>to</code> of type <code>sap.ui.core.Control</code>The page, which is now displayed after navigation.</li>
		 * <li><code>toId</code> of type <code>string</code>The ID of the page, which is now displayed after navigation.</li>
		 * <li><code>firstTime</code> of type <code>boolean</code>Whether the "to" page (more precisely: a control with the ID of the page, which has been navigated to)
		 * has not been displayed/navigated to before.</li>
		 * <li><code>isTo</code> of type <code>boolean</code>Determines whether was a forward navigation, triggered by to().</li>
		 * <li><code>isBack</code> of type <code>boolean</code>Determines whether this was a back navigation, triggered by back().</li>
		 * <li><code>isBackToTop</code> of type <code>boolean</code>Determines whether this was a navigation to the root page, triggered by backToTop().</li>
		 * <li><code>isBackToPage</code> of type <code>boolean</code>Determines whether this was a navigation to a specific page, triggered by backToPage().</li>
		 * <li><code>direction</code> of type <code>string</code>Determines how the navigation was triggered, possible values are "to", "back", "backToPage", and "backToTop".</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireAfterMasterNavigate(mArguments?: any): SplitContainer;
		/**
		 * Fires event <code>afterMasterOpen</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireAfterMasterOpen(mArguments?: any): SplitContainer;
		/**
		 * Fires event <code>beforeMasterClose</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireBeforeMasterClose(mArguments?: any): SplitContainer;
		/**
		 * Fires event <code>beforeMasterOpen</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireBeforeMasterOpen(mArguments?: any): SplitContainer;
		/**
		 * Fires event <code>detailNavigate</code> to attached listeners.
		 * 
		 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>from</code> of type <code>sap.ui.core.Control</code>The page, which was displayed before the current navigation.</li>
		 * <li><code>fromId</code> of type <code>string</code>The ID of the page, which was displayed before the current navigation.</li>
		 * <li><code>to</code> of type <code>sap.ui.core.Control</code>The page, which will be displayed after the current navigation.</li>
		 * <li><code>toId</code> of type <code>string</code>The ID of the page, which will be displayed after the current navigation.</li>
		 * <li><code>firstTime</code> of type <code>boolean</code>Determines whether the "to" page (more precisely: a control with the ID of the page,
		 * which is currently navigated to) has not been displayed/navigated to before.</li>
		 * <li><code>isTo</code> of type <code>boolean</code>Determines whether this is a forward navigation, triggered by to().</li>
		 * <li><code>isBack</code> of type <code>boolean</code>Determines whether this is a back navigation, triggered by back().</li>
		 * <li><code>isBackToTop</code> of type <code>boolean</code>Determines whether this is a navigation to the root page, triggered by backToTop().</li>
		 * <li><code>isBackToPage</code> of type <code>boolean</code>Determines whether this was a navigation to a specific page, triggered by backToPage().</li>
		 * <li><code>direction</code> of type <code>string</code>Determines how the navigation was triggered, possible values are "to", "back", "backToPage", and "backToTop".</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Whether or not to prevent the default action
		 */
		fireDetailNavigate(mArguments?: any): boolean;
		/**
		 * Fires event <code>masterButton</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireMasterButton(mArguments?: any): SplitContainer;
		/**
		 * Fires event <code>masterNavigate</code> to attached listeners.
		 * 
		 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>from</code> of type <code>sap.ui.core.Control</code>The page, which was displayed before the current navigation.</li>
		 * <li><code>fromId</code> of type <code>string</code>The ID of the page, which was displayed before the current navigation.</li>
		 * <li><code>to</code> of type <code>sap.ui.core.Control</code>The page, which will be displayed after the current navigation.</li>
		 * <li><code>toId</code> of type <code>string</code>The ID of the page, which will be displayed after the current navigation.</li>
		 * <li><code>firstTime</code> of type <code>boolean</code>Determines whether the "to" page (more precisely: a control with the ID of the page,
		 * which is currently being navigated to) has not been displayed/navigated to before.</li>
		 * <li><code>isTo</code> of type <code>boolean</code>Determines whether this is a forward navigation, triggered by to().</li>
		 * <li><code>isBack</code> of type <code>boolean</code>Determines whether this is a back navigation, triggered by back().</li>
		 * <li><code>isBackToTop</code> of type <code>boolean</code>Determines whether this is a navigation to the root page, triggered by backToTop().</li>
		 * <li><code>isBackToPage</code> of type <code>boolean</code>Determines whether this was a navigation to a specific page, triggered by backToPage().</li>
		 * <li><code>direction</code> of type <code>string</code>Determines how the navigation was triggered, possible values are "to", "back", "backToPage", and "backToTop".</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Whether or not to prevent the default action
		 */
		fireMasterNavigate(mArguments?: any): boolean;
		/**
		 * Gets current value of property <code>backgroundColor</code>.
		 * 
		 * Determines the background color of the SplitContainer. If set, this color overrides the default one,
		 * which is defined by the theme (should only be used when really required).
		 * Any configured background image will be placed above this colored background,
		 * but any theme adaptation in the Theme Designer will override this setting.
		 * Use the backgroundRepeat property to define whether this image should be stretched
		 * to cover the complete SplitContainer or whether it should be tiled.
		 * @return Value of property <code>backgroundColor</code>
		 */
		getBackgroundColor(): string;
		/**
		 * Gets current value of property <code>backgroundImage</code>.
		 * 
		 * Sets the background image of the SplitContainer. When set, this image overrides
		 * the default background defined by the theme (should only be used when really required).
		 * This background image will be placed above any color set for the background,
		 * but any theme adaptation in the Theme Designer will override this image setting.
		 * Use the backgroundRepeat property to define whether this image should be stretched
		 * to cover the complete SplitContainer or whether it should be tiled.
		 * @return Value of property <code>backgroundImage</code>
		 */
		getBackgroundImage(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>backgroundOpacity</code>.
		 * 
		 * Defines the opacity of the background image - between 0 (fully transparent) and 1 (fully opaque).
		 * This can be used to improve the content visibility by making the background image partly transparent.
		 * 
		 * Default value is <code>1</code>.
		 * @return Value of property <code>backgroundOpacity</code>
		 */
		getBackgroundOpacity(): number;
		/**
		 * Gets current value of property <code>backgroundRepeat</code>.
		 * 
		 * Defines whether the background image (if configured) is proportionally stretched
		 * to cover the whole SplitContainer (false) or whether it should be tiled (true).
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>backgroundRepeat</code>
		 */
		getBackgroundRepeat(): boolean;
		/**
		 * Returns the current displayed detail page.
		 * @return 
		 */
		getCurrentDetailPage(): sap.ui.core.Control;
		/**
		 * Returns the current displayed master page.
		 * @return 
		 */
		getCurrentMasterPage(): sap.ui.core.Control;
		/**
		 * Returns the currently displayed page either in master area or in detail area.
		 * When the parameter is set to true, the current page in master area is returned, otherwise, the current page in detail area is returned.
		 * 
		 * This method is provided mainly for API consistency between sap.m.SplitContainer and sap.m.App, so that the same code line can be reused.
		 * @param bMaster States if this function returns the current page in master area. If it's set to false, the current page in detail area will be returned.
		 * @return 
		 */
		getCurrentPage(bMaster: boolean): sap.ui.core.Control;
		/**
		 * Gets current value of property <code>defaultTransitionNameDetail</code>.
		 * 
		 * Determines the type of the transition/animation to apply when to() is called without defining the
		 * transition to use. The default is "slide", other options are "fade", "show", and the names of any registered custom transitions.
		 * 
		 * Default value is <code>slide</code>.
		 * @return Value of property <code>defaultTransitionNameDetail</code>
		 */
		getDefaultTransitionNameDetail(): string;
		/**
		 * Gets current value of property <code>defaultTransitionNameMaster</code>.
		 * 
		 * Determines the type of the transition/animation to apply when to() is called, without defining the
		 * transition to use. The default is "slide", other options are "fade", "show", and the names of any registered custom transitions.
		 * 
		 * Default value is <code>slide</code>.
		 * @return Value of property <code>defaultTransitionNameMaster</code>
		 */
		getDefaultTransitionNameMaster(): string;
		/**
		 * Returns the page with the given ID in detail area. If there's no page that has the given ID, null is returned.
		 * @param sId The ID of the page that needs to be fetched.
		 * @return 
		 */
		getDetailPage(sId: string): sap.ui.core.Control;
		/**
		 * Gets content of aggregation <code>detailPages</code>.
		 * 
		 * Determines the content entities, between which the SplitContainer navigates in detail area.
		 * These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.
		 * These aggregated controls receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow},
		 * they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}.
		 * @return 
		 */
		getDetailPages(): sap.ui.core.Control[];
		/**
		 * ID of the element which is the current target of the association <code>initialDetail</code>, or <code>null</code>.
		 * @return 
		 */
		getInitialDetail(): sap.ui.core.ID;
		/**
		 * ID of the element which is the current target of the association <code>initialMaster</code>, or <code>null</code>.
		 * @return 
		 */
		getInitialMaster(): sap.ui.core.ID;
		/**
		 * Gets current value of property <code>masterButtonText</code>.
		 * 
		 * Determines the text displayed in master button, which has a default value "Navigation".
		 * This text is only displayed in iOS platform and the icon from the current page in detail area is
		 * displayed in the master button for the other platforms.
		 * The master button is shown/hidden depending on the orientation of the device and whether
		 * the master area is opened or not. SplitContainer manages the show/hide of the master button by itself
		 * only when the pages added to the detail area are sap.m.Page with built-in header or sap.m.Page
		 * with built-in header, which is wrapped by one or several sap.ui.core.mvc.View.
		 * Otherwise, the show/hide of master button needs to be managed by the application.
		 * @return Value of property <code>masterButtonText</code>
		 */
		getMasterButtonText(): string;
		/**
		 * Returns the page with the given ID in master area (if there's no page that has the given ID, null is returned).
		 * @param sId The ID of the page that needs to be fetched
		 * @return 
		 */
		getMasterPage(sId: string): sap.ui.core.Control;
		/**
		 * Gets content of aggregation <code>masterPages</code>.
		 * 
		 * Determines the content entities, between which the SplitContainer navigates in master area.
		 * These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.
		 * These aggregated controls receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow},
		 * they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}.
		 * @return 
		 */
		getMasterPages(): sap.ui.core.Control[];
		/**
		 * Gets current value of property <code>mode</code>.
		 * 
		 * Defines whether the master page will always be displayed (in portrait and landscape mode - StretchCompressMode),
		 * or if it should be hidden when in portrait mode (ShowHideMode). Default is ShowHideMode.
		 * Other possible values are Hide (Master is always hidden) and Popover (master is displayed in popover).
		 * 
		 * Default value is <code>ShowHideMode</code>.
		 * @return Value of property <code>mode</code>
		 */
		getMode(): SplitAppMode;
		/**
		 * Returns the page with the given ID from either master area, or detail area depending on the master parameter (if there's no page that has the given ID, null is returned).
		 * @param sId The ID of the page that needs to be fetched
		 * @param bMaster If the page with given ID should be fetched from the master area. If it's set to false, the page will be fetched from detail area.
		 * @return 
		 */
		getPage(sId: string, bMaster: boolean): sap.ui.core.Control;
		/**
		 * Returns the previous page (the page, from which the user drilled down to the current page with to()).
		 * Note: this is not the page, which the user has seen before, but the page which is the target of the next back() navigation.
		 * If there is no previous page, "undefined" is returned.
		 * @param bMaster States if this function returns the previous page in master area. If it's set to false, the previous page in detail area will be returned.
		 * @return 
		 */
		getPreviousPage(bMaster: boolean): sap.ui.core.Control;
		/**
		 * Used to hide the master page when in ShowHideMode and the device is in portrait mode.
		 * @return 
		 */
		hideMaster(): SplitContainer;
		/**
		 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>detailPages</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oDetailPage The detailPage whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfDetailPage(oDetailPage: sap.ui.core.Control): number;
		/**
		 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>masterPages</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oMasterPage The masterPage whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfMasterPage(oMasterPage: sap.ui.core.Control): number;
		/**
		 * Inserts a detailPage into the aggregation <code>detailPages</code>.
		 * @param oDetailPage the detailPage to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the detailPage should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the detailPage is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the detailPage is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertDetailPage(oDetailPage: sap.ui.core.Control, iIndex: number): SplitContainer;
		/**
		 * Inserts a masterPage into the aggregation <code>masterPages</code>.
		 * @param oMasterPage the masterPage to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the masterPage should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the masterPage is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the masterPage is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertMasterPage(oMasterPage: sap.ui.core.Control, iIndex: number): SplitContainer;
		/**
		 * Inserts the page/control with the specified ID into the navigation history stack of the NavContainer.
		 * 
		 * This can be used for deep-linking when the user directly reached a drilldown detail page using a bookmark and then wants to navigate up in the drilldown hierarchy.
		 * Normally, such a back navigation would not be possible as there is no previous page in the SplitContainer's history stack.
		 * @param sPageId The ID of the control/page/screen, which is inserted into the history stack. The respective control must be aggregated by the SplitContainer, otherwise this will cause an error.
		 * @param sTransitionName The type of the transition/animation, which would have been used to navigate from the (inserted) previous page to the current page. When navigating back, the inverse animation will be applied.
		 *         This parameter can be omitted; then the default value is "slide" (horizontal movement from the right).
		 * @param oData This optional object can carry any payload data which would have been given to the inserted previous page if the user would have done a normal forward navigation to it.
		 * @return 
		 */
		insertPreviousPage(sPageId: string, sTransitionName: string, oData: any): SplitContainer;
		/**
		 * 
		 * Returns whether master area is currently displayed on the screen.
		 * In desktop browser or tablet, this method returns true when master area is displayed on the screen, regardless if in portrait or landscape mode.
		 * On mobile phone devices, this method returns true when the currently displayed page is from the pages, which are added to the master area, otherwise, it returns false.
		 * @return 
		 */
		isMasterShown(): boolean;
		/**
		 * Removes all the controls from the aggregation <code>detailPages</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllDetailPages(): sap.ui.core.Control[];
		/**
		 * Removes all the controls from the aggregation <code>masterPages</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllMasterPages(): sap.ui.core.Control[];
		/**
		 * Removes a detailPage from the aggregation <code>detailPages</code>.
		 * @param vDetailPage The detailPage to remove or its index or id
		 * @return The removed detailPage or <code>null</code>
		 */
		removeDetailPage(vDetailPage: number|string|sap.ui.core.Control): sap.ui.core.Control;
		/**
		 * Removes a masterPage from the aggregation <code>masterPages</code>.
		 * @param vMasterPage The masterPage to remove or its index or id
		 * @return The removed masterPage or <code>null</code>
		 */
		removeMasterPage(vMasterPage: number|string|sap.ui.core.Control): sap.ui.core.Control;
		/**
		 * Sets a new value for property <code>backgroundColor</code>.
		 * 
		 * Determines the background color of the SplitContainer. If set, this color overrides the default one,
		 * which is defined by the theme (should only be used when really required).
		 * Any configured background image will be placed above this colored background,
		 * but any theme adaptation in the Theme Designer will override this setting.
		 * Use the backgroundRepeat property to define whether this image should be stretched
		 * to cover the complete SplitContainer or whether it should be tiled.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sBackgroundColor New value for property <code>backgroundColor</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setBackgroundColor(sBackgroundColor: string): SplitContainer;
		/**
		 * Sets a new value for property <code>backgroundImage</code>.
		 * 
		 * Sets the background image of the SplitContainer. When set, this image overrides
		 * the default background defined by the theme (should only be used when really required).
		 * This background image will be placed above any color set for the background,
		 * but any theme adaptation in the Theme Designer will override this image setting.
		 * Use the backgroundRepeat property to define whether this image should be stretched
		 * to cover the complete SplitContainer or whether it should be tiled.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sBackgroundImage New value for property <code>backgroundImage</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setBackgroundImage(sBackgroundImage: sap.ui.core.URI): SplitContainer;
		/**
		 * Sets a new value for property <code>backgroundOpacity</code>.
		 * 
		 * Defines the opacity of the background image - between 0 (fully transparent) and 1 (fully opaque).
		 * This can be used to improve the content visibility by making the background image partly transparent.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>1</code>.
		 * @param fBackgroundOpacity New value for property <code>backgroundOpacity</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setBackgroundOpacity(fBackgroundOpacity: number): SplitContainer;
		/**
		 * Sets a new value for property <code>backgroundRepeat</code>.
		 * 
		 * Defines whether the background image (if configured) is proportionally stretched
		 * to cover the whole SplitContainer (false) or whether it should be tiled (true).
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bBackgroundRepeat New value for property <code>backgroundRepeat</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setBackgroundRepeat(bBackgroundRepeat: boolean): SplitContainer;
		/**
		 * Sets a new value for property <code>defaultTransitionNameDetail</code>.
		 * 
		 * Determines the type of the transition/animation to apply when to() is called without defining the
		 * transition to use. The default is "slide", other options are "fade", "show", and the names of any registered custom transitions.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>slide</code>.
		 * @param sDefaultTransitionNameDetail New value for property <code>defaultTransitionNameDetail</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDefaultTransitionNameDetail(sDefaultTransitionNameDetail: string): SplitContainer;
		/**
		 * Sets a new value for property <code>defaultTransitionNameMaster</code>.
		 * 
		 * Determines the type of the transition/animation to apply when to() is called, without defining the
		 * transition to use. The default is "slide", other options are "fade", "show", and the names of any registered custom transitions.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>slide</code>.
		 * @param sDefaultTransitionNameMaster New value for property <code>defaultTransitionNameMaster</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDefaultTransitionNameMaster(sDefaultTransitionNameMaster: string): SplitContainer;
		/**
		 * Sets the associated <code>initialDetail</code>.
		 * @param oInitialDetail ID of an element which becomes the new target of this initialDetail association; alternatively, an element instance may be given
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setInitialDetail(oInitialDetail: sap.ui.core.ID|sap.ui.core.Control): SplitContainer;
		/**
		 * Sets the associated <code>initialMaster</code>.
		 * @param oInitialMaster ID of an element which becomes the new target of this initialMaster association; alternatively, an element instance may be given
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setInitialMaster(oInitialMaster: sap.ui.core.ID|sap.ui.core.Control): SplitContainer;
		/**
		 * Sets a new value for property <code>masterButtonText</code>.
		 * 
		 * Determines the text displayed in master button, which has a default value "Navigation".
		 * This text is only displayed in iOS platform and the icon from the current page in detail area is
		 * displayed in the master button for the other platforms.
		 * The master button is shown/hidden depending on the orientation of the device and whether
		 * the master area is opened or not. SplitContainer manages the show/hide of the master button by itself
		 * only when the pages added to the detail area are sap.m.Page with built-in header or sap.m.Page
		 * with built-in header, which is wrapped by one or several sap.ui.core.mvc.View.
		 * Otherwise, the show/hide of master button needs to be managed by the application.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sMasterButtonText New value for property <code>masterButtonText</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMasterButtonText(sMasterButtonText: string): SplitContainer;
		/**
		 * Sets a new value for property <code>mode</code>.
		 * 
		 * Defines whether the master page will always be displayed (in portrait and landscape mode - StretchCompressMode),
		 * or if it should be hidden when in portrait mode (ShowHideMode). Default is ShowHideMode.
		 * Other possible values are Hide (Master is always hidden) and Popover (master is displayed in popover).
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>ShowHideMode</code>.
		 * @param sMode New value for property <code>mode</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMode(sMode: SplitAppMode): SplitContainer;
		/**
		 * Used to make the master page visible when in ShowHideMode and the device is in portrait mode.
		 * @return 
		 */
		showMaster(): SplitContainer;
		/**
		 * Navigates to the given page inside the SplitContainer.
		 * The navigation is done inside the master area if the page has been added,
		 * otherwise, it tries to do the page navigation in the detail area.
		 * @param sPageId The screen to which we are navigating to. The ID or the control itself can be given.
		 * @param sTransitionName The type of the transition/animation to apply. This parameter can be omitted; then the default value is "slide" (horizontal movement from the right).
		 *         Other options are: "fade", "flip", and "show" and the names of any registered custom transitions.
		 * 
		 *         None of the standard transitions is currently making use of any given transition parameters.
		 * @param oData This optional object can carry any payload data which should be made available to the target page. The beforeShow event on the target page will contain this data object as data property.
		 * 
		 *         Use case: in scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
		 * 
		 *         When the transitionParameters object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
		 * @param oTransitionParameters This optional object can contain additional information for the transition function, like the DOM element which triggered the transition or the desired transition duration.
		 * 
		 *         For a proper parameter order, the "data" parameter must be given when the transitionParameters parameter is used (it can be given as "null").
		 * 
		 *         NOTE: It depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
		 *         The "show", "slide" and "fade" transitions do not use any parameter.
		 * @return 
		 */
		to(sPageId: string, sTransitionName: string, oData: any, oTransitionParameters: any): SplitContainer;
		/**
		 * Navigates to a given detail page.
		 * @param sPageId 
		 * @param sTransitionName The type of the transition/animation to apply. This parameter can be omitted; then the default is "slide" (horizontal movement from the right).
		 *         Other options are: "fade", "flip", and "show" and the names of any registered custom transitions.
		 * 
		 *         None of the standard transitions is currently making use of any given transition parameters.
		 * @param oData This optional object can carry any payload data which should be made available to the target page. The beforeShow event on the target page will contain this data object as data property.
		 * 
		 *         Use case: in scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
		 * 
		 *         When the transitionParameters object is used, this data object must also be given (either as object or as null) in order to have a proper parameter order.
		 * @param oTransitionParameter This optional object can contain additional information for the transition function, like the DOM element, which triggered the transition or the desired transition duration.
		 * 
		 *         For a proper parameter order, the data parameter must be given when the transitionParameters parameter is used (it can be given as "null").
		 * 
		 *         NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
		 *         The "show", "slide" and "fade" transitions do not use any parameter.
		 * @return 
		 */
		toDetail(sPageId: string, sTransitionName: string, oData: any, oTransitionParameter: any): SplitContainer;
		/**
		 * Navigates to a given master page.
		 * @param sPageId The screen to which drilldown should happen. The ID or the control itself can be given.
		 * @param sTransitionName The type of the transition/animation to apply. This parameter can be omitted; then the default value is "slide" (horizontal movement from the right).
		 *         Other options are: "fade", "flip", and "show" and the names of any registered custom transitions.
		 * 
		 *         None of the standard transitions is currently making use of any given transition parameters.
		 * @param oData Since version 1.7.1. This optional object can carry any payload data which should be made available to the target page. The beforeShow event on the target page will contain this data object as data property.
		 * 
		 *         Use case: in scenarios where the entity triggering the navigation can't or shouldn't directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
		 * 
		 *         When the transitionParameters object is used, this data object must also be given (either as object or as null) in order to have a proper parameter order.
		 * @param oTransitionParameters Since version 1.7.1. This optional object can contain additional information for the transition function, like the DOM element, which triggered the transition or the desired transition duration.
		 * 
		 *         For a proper parameter order, the data parameter must be given when the transitionParameters parameter is used (it can be given as "null").
		 * 
		 *         NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
		 *         The "show", "slide" and "fade" transitions do not use any parameter.
		 * @return 
		 */
		toMaster(sPageId: string, sTransitionName: string, oData: any, oTransitionParameters: any): SplitContainer;
	}

	class StandardListItem extends ListItemBase {
		/**
		 * Constructor for a new StandardListItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId Id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.StandardListItemMetadata);
		/**
		 * Constructor for a new StandardListItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId Id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.StandardListItem with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListItemBase.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|StandardListItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.ListItemBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.ListItemBase
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ListItemBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>activeIcon</code>.
		 * 
		 * Defines the icon that is shown while the list item is pressed.
		 * @return Value of property <code>activeIcon</code>
		 */
		getActiveIcon(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>adaptTitleSize</code>.
		 * 
		 * By default, the title size adapts to the available space and gets bigger if the description is empty. If you have list items with and without descriptions, this results in titles with different sizes. In this case, it can be better to switch the size adaption off by setting this property to <code>false</code>.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>adaptTitleSize</code>
		 */
		getAdaptTitleSize(): boolean;
		/**
		 * Gets current value of property <code>description</code>.
		 * 
		 * Defines the additional information for the title.
		 * <b>Note:</b> This is only visible when the <code>title</code> property is not empty.
		 * @return Value of property <code>description</code>
		 */
		getDescription(): string;
		/**
		 * Gets current value of property <code>icon</code>.
		 * 
		 * Defines the list item icon.
		 * @return Value of property <code>icon</code>
		 */
		getIcon(): sap.ui.core.URI;
		/**
		 * Gets current value of property <code>iconDensityAware</code>.
		 * 
		 * By default, one or more requests are sent to get the density perfect version of the icon if the given version of the icon doesn't exist on the server.
		 * <b>Note:<b> If bandwidth is a key factor for the application, set this value to <code>false</code>.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>iconDensityAware</code>
		 */
		getIconDensityAware(): boolean;
		/**
		 * Gets current value of property <code>iconInset</code>.
		 * 
		 * Defines the indentation of the icon. If set to <code>false</code>, the icon will not be shown as embedded. Instead it will take the full height of the list item.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>iconInset</code>
		 */
		getIconInset(): boolean;
		/**
		 * Gets current value of property <code>info</code>.
		 * 
		 * Defines an additional information text.
		 * @return Value of property <code>info</code>
		 */
		getInfo(): string;
		/**
		 * Gets current value of property <code>infoState</code>.
		 * 
		 * Defines the state of the information text, e.g. <code>Error</code>, <code>Warning</code>, <code>Success</code>.
		 * 
		 * Default value is <code>None</code>.
		 * @return Value of property <code>infoState</code>
		 */
		getInfoState(): sap.ui.core.ValueState;
		/**
		 * Gets current value of property <code>infoTextDirection</code>.
		 * 
		 * Defines the <code>info</code> directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @return Value of property <code>infoTextDirection</code>
		 */
		getInfoTextDirection(): sap.ui.core.TextDirection;
		/**
		 * Gets current value of property <code>title</code>.
		 * 
		 * Defines the title of the list item.
		 * @return Value of property <code>title</code>
		 */
		getTitle(): string;
		/**
		 * Gets current value of property <code>titleTextDirection</code>.
		 * 
		 * Defines the <code>title</code> text directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @return Value of property <code>titleTextDirection</code>
		 */
		getTitleTextDirection(): sap.ui.core.TextDirection;
		/**
		 * Sets a new value for property <code>activeIcon</code>.
		 * 
		 * Defines the icon that is shown while the list item is pressed.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sActiveIcon New value for property <code>activeIcon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setActiveIcon(sActiveIcon: sap.ui.core.URI): StandardListItem;
		/**
		 * Sets a new value for property <code>adaptTitleSize</code>.
		 * 
		 * By default, the title size adapts to the available space and gets bigger if the description is empty. If you have list items with and without descriptions, this results in titles with different sizes. In this case, it can be better to switch the size adaption off by setting this property to <code>false</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bAdaptTitleSize New value for property <code>adaptTitleSize</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setAdaptTitleSize(bAdaptTitleSize: boolean): StandardListItem;
		/**
		 * Sets a new value for property <code>description</code>.
		 * 
		 * Defines the additional information for the title.
		 * <b>Note:</b> This is only visible when the <code>title</code> property is not empty.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sDescription New value for property <code>description</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDescription(sDescription: string): StandardListItem;
		/**
		 * Sets a new value for property <code>icon</code>.
		 * 
		 * Defines the list item icon.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sIcon New value for property <code>icon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIcon(sIcon: sap.ui.core.URI): StandardListItem;
		/**
		 * Sets a new value for property <code>iconDensityAware</code>.
		 * 
		 * By default, one or more requests are sent to get the density perfect version of the icon if the given version of the icon doesn't exist on the server.
		 * <b>Note:<b> If bandwidth is a key factor for the application, set this value to <code>false</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bIconDensityAware New value for property <code>iconDensityAware</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIconDensityAware(bIconDensityAware: boolean): StandardListItem;
		/**
		 * Sets a new value for property <code>iconInset</code>.
		 * 
		 * Defines the indentation of the icon. If set to <code>false</code>, the icon will not be shown as embedded. Instead it will take the full height of the list item.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bIconInset New value for property <code>iconInset</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIconInset(bIconInset: boolean): StandardListItem;
		/**
		 * Sets a new value for property <code>info</code>.
		 * 
		 * Defines an additional information text.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sInfo New value for property <code>info</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setInfo(sInfo: string): StandardListItem;
		/**
		 * Sets a new value for property <code>infoState</code>.
		 * 
		 * Defines the state of the information text, e.g. <code>Error</code>, <code>Warning</code>, <code>Success</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>None</code>.
		 * @param sInfoState New value for property <code>infoState</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setInfoState(sInfoState: sap.ui.core.ValueState): StandardListItem;
		/**
		 * Sets a new value for property <code>infoTextDirection</code>.
		 * 
		 * Defines the <code>info</code> directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @param sInfoTextDirection New value for property <code>infoTextDirection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setInfoTextDirection(sInfoTextDirection: sap.ui.core.TextDirection): StandardListItem;
		/**
		 * Sets a new value for property <code>title</code>.
		 * 
		 * Defines the title of the list item.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sTitle New value for property <code>title</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTitle(sTitle: string): StandardListItem;
		/**
		 * Sets a new value for property <code>titleTextDirection</code>.
		 * 
		 * Defines the <code>title</code> text directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @param sTitleTextDirection New value for property <code>titleTextDirection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTitleTextDirection(sTitleTextDirection: sap.ui.core.TextDirection): StandardListItem;
	}

	class StandardTile extends Tile {
		/**
		 * Constructor for a new StandardTile.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.StandardTileMetadata);
		/**
		 * Constructor for a new StandardTile.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID|sap.ui.core.Control): StandardTile;
		/**
		 * Creates a new subclass of class sap.m.StandardTile with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.Tile.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|StandardTileMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.Tile with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.Tile
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|TileMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>activeIcon</code>.
		 * 
		 * Defines the active icon of the StandardTile.
		 * @return Value of property <code>activeIcon</code>
		 */
		getActiveIcon(): sap.ui.core.URI;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaDescribedBy</code>.
		 * @return 
		 */
		getAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Gets the icon of the StandardTile control.
		 */
		getIcon();
		/**
		 * Gets current value of property <code>iconDensityAware</code>.
		 * 
		 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
		 * 
		 * If bandwidth is key for the application, set this value to false.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>iconDensityAware</code>
		 */
		getIconDensityAware(): boolean;
		/**
		 * Gets current value of property <code>info</code>.
		 * 
		 * Defines the description of the StandardTile.
		 * @return Value of property <code>info</code>
		 */
		getInfo(): string;
		/**
		 * Gets current value of property <code>infoState</code>.
		 * 
		 * Defines the color of the info text. Possible values are Error, Warning, Success and so on.
		 * 
		 * Default value is <code>None</code>.
		 * @return Value of property <code>infoState</code>
		 */
		getInfoState(): sap.ui.core.ValueState;
		/**
		 * Gets current value of property <code>number</code>.
		 * 
		 * Defines the number field of the StandardTile.
		 * @return Value of property <code>number</code>
		 */
		getNumber(): string;
		/**
		 * Gets current value of property <code>numberUnit</code>.
		 * 
		 * Defines the number units qualifier of the StandardTile.
		 * @return Value of property <code>numberUnit</code>
		 */
		getNumberUnit(): string;
		/**
		 * Gets current value of property <code>title</code>.
		 * 
		 * Defines the title of the StandardTile.
		 * @return Value of property <code>title</code>
		 */
		getTitle(): string;
		/**
		 * Gets current value of property <code>type</code>.
		 * 
		 * Defines the type of the StandardTile.
		 * 
		 * Default value is <code>None</code>.
		 * @return Value of property <code>type</code>
		 */
		getType(): StandardTileType;
		/**
		 * Removes all the controls in the association named <code>ariaDescribedBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
		 * @return The removed ariaDescribedBy or <code>null</code>
		 */
		removeAriaDescribedBy(vAriaDescribedBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Sets a new value for property <code>activeIcon</code>.
		 * 
		 * Defines the active icon of the StandardTile.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sActiveIcon New value for property <code>activeIcon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setActiveIcon(sActiveIcon: sap.ui.core.URI): StandardTile;
		/**
		 * Sets a new value for property <code>icon</code>.
		 * 
		 * Defines the icon of the StandardTile.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sIcon New value for property <code>icon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIcon(sIcon: sap.ui.core.URI): StandardTile;
		/**
		 * Sets a new value for property <code>iconDensityAware</code>.
		 * 
		 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
		 * 
		 * If bandwidth is key for the application, set this value to false.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bIconDensityAware New value for property <code>iconDensityAware</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIconDensityAware(bIconDensityAware: boolean): StandardTile;
		/**
		 * Sets a new value for property <code>info</code>.
		 * 
		 * Defines the description of the StandardTile.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sInfo New value for property <code>info</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setInfo(sInfo: string): StandardTile;
		/**
		 * Sets a new value for property <code>infoState</code>.
		 * 
		 * Defines the color of the info text. Possible values are Error, Warning, Success and so on.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>None</code>.
		 * @param sInfoState New value for property <code>infoState</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setInfoState(sInfoState: sap.ui.core.ValueState): StandardTile;
		/**
		 * Sets a new value for property <code>number</code>.
		 * 
		 * Defines the number field of the StandardTile.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sNumber New value for property <code>number</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setNumber(sNumber: string): StandardTile;
		/**
		 * Sets a new value for property <code>numberUnit</code>.
		 * 
		 * Defines the number units qualifier of the StandardTile.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sNumberUnit New value for property <code>numberUnit</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setNumberUnit(sNumberUnit: string): StandardTile;
		/**
		 * Sets a new value for property <code>title</code>.
		 * 
		 * Defines the title of the StandardTile.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sTitle New value for property <code>title</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTitle(sTitle: string): StandardTile;
		/**
		 * Sets a new value for property <code>type</code>.
		 * 
		 * Defines the type of the StandardTile.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>None</code>.
		 * @param sType New value for property <code>type</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setType(sType: StandardTileType): StandardTile;
	}

	class StandardTileType {
		/**
		 * Tile representing that something needs to be created
		 */
		static Create: string;
		/**
		 * Monitor tile
		 */
		static Monitor: string;
		/**
		 * Default type
		 */
		static None: string;
	}

	class StepInput extends sap.ui.core.Control {
		/**
		 * Constructor for a new StepInput.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.StepInputMetadata);
		/**
		 * Constructor for a new StepInput.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID|sap.ui.core.Control): StepInput;
		/**
		 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): StepInput;
		/**
		 * Creates a new subclass of class sap.m.StepInput with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|StepInputMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaDescribedBy</code>.
		 * @return 
		 */
		getAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
		 * @return 
		 */
		getAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Gets current value of property <code>editable</code>.
		 * 
		 * Defines whether the control can be modified by the user or not.
		 * <b>Note:</b> A user can tab to the non-editable control, highlight it, and copy the text from it.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>editable</code>
		 */
		getEditable(): boolean;
		/**
		 * Gets current value of property <code>enabled</code>.
		 * 
		 * Indicates whether the user can interact with the control or not.
		 * <b>Note:</b> Disabled controls cannot be focused and they are out of the tab-chain.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>enabled</code>
		 */
		getEnabled(): boolean;
		/**
		 * Gets current value of property <code>largerStep</code>.
		 * 
		 * TIncreases/decreases the value with a larger value than the set step only when using the PageUp/PageDown keys.
		 * Default value is 2 times larger than the set step.
		 * 
		 * Default value is <code>2</code>.
		 * @return Value of property <code>largerStep</code>
		 */
		getLargerStep(): number;
		/**
		 * Gets current value of property <code>max</code>.
		 * 
		 * Sets the maximum possible value of the defined range.
		 * @return Value of property <code>max</code>
		 */
		getMax(): number;
		/**
		 * Gets current value of property <code>min</code>.
		 * 
		 * Sets the minimum possible value of the defined range.
		 * @return Value of property <code>min</code>
		 */
		getMin(): number;
		/**
		 * Gets current value of property <code>step</code>.
		 * 
		 * Increases/decreases the value of the input.
		 * 
		 * Default value is <code>1</code>.
		 * @return Value of property <code>step</code>
		 */
		getStep(): number;
		/**
		 * Gets current value of property <code>value</code>.
		 * 
		 * Determines the value of the <code>StepInput</code> and can be set initially from the app developer.
		 * 
		 * Default value is <code>0</code>.
		 * @return Value of property <code>value</code>
		 */
		getValue(): number;
		/**
		 * Gets current value of property <code>valueState</code>.
		 * 
		 * Accepts the core enumeration ValueState.type that supports <code>None</code>, <code>Error</code>, <code>Warning</code> and <code>Success</code>.
		 * 
		 * Default value is <code>None</code>.
		 * @return Value of property <code>valueState</code>
		 */
		getValueState(): sap.ui.core.ValueState;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Defines the width of the control.
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Removes all the controls in the association named <code>ariaDescribedBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
		 * @return The removed ariaDescribedBy or <code>null</code>
		 */
		removeAriaDescribedBy(vAriaDescribedBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
		 * @return The removed ariaLabelledBy or <code>null</code>
		 */
		removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Sets a new value for property <code>enabled</code>.
		 * 
		 * Indicates whether the user can interact with the control or not.
		 * <b>Note:</b> Disabled controls cannot be focused and they are out of the tab-chain.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bEnabled New value for property <code>enabled</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setEnabled(bEnabled: boolean): StepInput;
		/**
		 * Sets a new value for property <code>largerStep</code>.
		 * 
		 * TIncreases/decreases the value with a larger value than the set step only when using the PageUp/PageDown keys.
		 * Default value is 2 times larger than the set step.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>2</code>.
		 * @param sLargerStep New value for property <code>largerStep</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setLargerStep(sLargerStep: number): StepInput;
		/**
		 * Sets a new value for property <code>step</code>.
		 * 
		 * Increases/decreases the value of the input.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>1</code>.
		 * @param sStep New value for property <code>step</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setStep(sStep: number): StepInput;
		/**
		 * Sets a new value for property <code>value</code>.
		 * 
		 * Determines the value of the <code>StepInput</code> and can be set initially from the app developer.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>0</code>.
		 * @param sValue New value for property <code>value</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setValue(sValue: number): StepInput;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Defines the width of the control.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): StepInput;
	}

	class SuggestionItem extends sap.ui.core.Control {
		/**
		 * Constructor for a new SuggestionItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.SuggestionItemMetadata);
		/**
		 * Constructor for a new SuggestionItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.SuggestionItem with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|SuggestionItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>description</code>.
		 * 
		 * Additional text of type string, optionally to be displayed along with this item.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>description</code>
		 */
		getDescription(): string;
		/**
		 * Gets current value of property <code>icon</code>.
		 * 
		 * The icon belonging to this list item instance.
		 * This can be an URI to an image or an icon font URI.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>icon</code>
		 */
		getIcon(): string;
		/**
		 * Return suggestion text. By default, it is the value of the <code>text</code> property.
		 * 
		 * Subclasses may override this function.
		 * @return suggestion text.
		 */
		getSuggestionText(): string;
		/**
		 * Produces the HTML of the suggestion item and writes it to render-output-buffer.
		 * 
		 * Subclasses may override this function.
		 * @param oRenderManager The <code>RenderManager</code>
		 * @param oItem The item which should be rendered
		 * @param sSearch The search text that should be emphasized
		 * @param bSelected The item is selected
		 */
		render(oRenderManager: sap.ui.core.RenderManager, oItem: SuggestionItem, sSearch: string, bSelected: boolean);
		/**
		 * Sets a new value for property <code>description</code>.
		 * 
		 * Additional text of type string, optionally to be displayed along with this item.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sDescription New value for property <code>description</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDescription(sDescription: string): SuggestionItem;
		/**
		 * Sets a new value for property <code>icon</code>.
		 * 
		 * The icon belonging to this list item instance.
		 * This can be an URI to an image or an icon font URI.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sIcon New value for property <code>icon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIcon(sIcon: string): SuggestionItem;
	}

	class SwipeDirection {
		/**
		 * Both directions (left to right or right to left)
		 */
		static Both: string;
		/**
		 * Swipe from left to right
		 */
		static LeftToRight: string;
		/**
		 * Swipe from right to left.
		 */
		static RightToLeft: string;
	}

	class Switch extends sap.ui.core.Control {
		/**
		 * Constructor for a new Switch.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.SwitchMetadata);
		/**
		 * Constructor for a new Switch.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): Switch;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>change</code> event of this <code>sap.m.Switch</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Switch</code> itself.
		 * 
		 * Triggered when a switch changes the state.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Switch</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachChange(oData: any, fnFunction: any, oListener?: any): Switch;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>change</code> event of this <code>sap.m.Switch</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachChange(fnFunction: any, oListener: any): Switch;
		/**
		 * Creates a new subclass of class sap.m.Switch with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|SwitchMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>change</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>state</code> of type <code>boolean</code>The new state of the switch.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireChange(mArguments?: any): Switch;
		/**
		 * 
		 */
		getAccessibilityInfo();
		/**
		 * This function (if available on the concrete control) provides
		 * the current accessibility state of the control.
		 * 
		 * Applications must not call this hook method directly, it is called by the framework.
		 * 
		 * Subclasses of Control should implement this hook to provide any necessary accessibility information:
		 * 
		 * <pre>
		 * MyControl.prototype.getAccessibilityInfo = function() {
		 *    return {
		 *      role: "textbox",      // String which represents the WAI-ARIA role which is implemented by the control.
		 *      type: "date input",   // String which represents the control type (Must be a translated text). Might correlate with
		 *                            // the role.
		 *      description: "value", // String which describes the most relevant control state (e.g. the inputs value). Must be a
		 *                            // translated text.
		 *                            // Note: The type and the enabled/editable state must not be handled here.
		 *      focusable: true,      // Boolean which describes whether the control can get the focus.
		 *      enabled: true,        // Boolean which describes whether the control is enabled. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      editable: true,       // Boolean which describes whether the control is editable. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      children: []          // Array of accessibility info objects of children of the given control (e.g. when the control is a layout).
		 *                            // Note: Children should only be provided when it is helpful to understand the accessibility context
		 *                            //       (e.g. a form control must not provide details of its internals (fields, labels, ...) but a
		 *                            //       layout should).
		 *    };
		 * };
		 * </pre>
		 * 
		 * Note: The returned object provides the accessibility state of the control at the point in time when this function is called.
		 * @note Overload from base type sap.ui.core.Control
		 * @return Current accessibility state of the control.
		 */
		getAccessibilityInfo(): any;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
		 * @return 
		 */
		getAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Gets current value of property <code>customTextOff</code>.
		 * 
		 * Custom text for the "OFF" state.
		 * 
		 * "OFF" translated to the current language is the default value.
		 * Beware that the given text will be cut off after three characters.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>customTextOff</code>
		 */
		getCustomTextOff(): string;
		/**
		 * Gets current value of property <code>customTextOn</code>.
		 * 
		 * Custom text for the "ON" state.
		 * 
		 * "ON" translated to the current language is the default value.
		 * Beware that the given text will be cut off after three characters.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>customTextOn</code>
		 */
		getCustomTextOn(): string;
		/**
		 * Gets current value of property <code>enabled</code>.
		 * 
		 * Whether the switch is enabled.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>enabled</code>
		 */
		getEnabled(): boolean;
		/**
		 * Gets current value of property <code>name</code>.
		 * 
		 * The name to be used in the HTML code for the switch (e.g. for HTML forms that send data to the server via submit).
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>name</code>
		 */
		getName(): string;
		/**
		 * Gets current value of property <code>state</code>.
		 * 
		 * A boolean value indicating whether the switch is on or off.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>state</code>
		 */
		getState(): boolean;
		/**
		 * Gets current value of property <code>type</code>.
		 * 
		 * Type of a Switch. Possibles values "Default", "AcceptReject".
		 * 
		 * Default value is <code>Default</code>.
		 * @return Value of property <code>type</code>
		 */
		getType(): SwitchType;
		/**
		 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
		 * @return The removed ariaLabelledBy or <code>null</code>
		 */
		removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Sets a new value for property <code>customTextOff</code>.
		 * 
		 * Custom text for the "OFF" state.
		 * 
		 * "OFF" translated to the current language is the default value.
		 * Beware that the given text will be cut off after three characters.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sCustomTextOff New value for property <code>customTextOff</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setCustomTextOff(sCustomTextOff: string): Switch;
		/**
		 * Sets a new value for property <code>customTextOn</code>.
		 * 
		 * Custom text for the "ON" state.
		 * 
		 * "ON" translated to the current language is the default value.
		 * Beware that the given text will be cut off after three characters.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sCustomTextOn New value for property <code>customTextOn</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setCustomTextOn(sCustomTextOn: string): Switch;
		/**
		 * Sets a new value for property <code>enabled</code>.
		 * 
		 * Whether the switch is enabled.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bEnabled New value for property <code>enabled</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setEnabled(bEnabled: boolean): Switch;
		/**
		 * Sets a new value for property <code>name</code>.
		 * 
		 * The name to be used in the HTML code for the switch (e.g. for HTML forms that send data to the server via submit).
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sName New value for property <code>name</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setName(sName: string): Switch;
		/**
		 * Change the switch state between on and off.
		 * @param bState 
		 * @return <code>this</code> to allow method chaining.
		 */
		setState(bState: boolean): Switch;
		/**
		 * Sets a new value for property <code>type</code>.
		 * 
		 * Type of a Switch. Possibles values "Default", "AcceptReject".
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Default</code>.
		 * @param sType New value for property <code>type</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setType(sType: SwitchType): Switch;
	}

	class SwitchType {
		/**
		 * Switch with accept and reject icons
		 */
		static AcceptReject: string;
		/**
		 * Will show "ON" and "OFF" translated to the current language or the custom text if provided
		 */
		static Default: string;
	}

	class TabContainer extends sap.ui.core.Control {
		/**
		 * Constructor for a new <code>TabContainer</code>.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.TabContainerMetadata);
		/**
		 * Constructor for a new <code>TabContainer</code>.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Finds the <code>sap.m.TabStripItem</code> corresponding to a given <code>sap.m.TabContainerItem</code>.
		 * @param vItem object or ID of the <code>TabContainerItem</code>
		 * @return <code>TabStripItem</code> corresponding to a given <code>sap.m.TabContainerItem</code> (if any)
		 */
		_toTabStripItem(vItem: TabContainerItem|string): any;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>addNewButtonPress</code> event of this <code>sap.m.TabContainer</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.TabContainer</code> itself.
		 * 
		 * Fired when <code>Add New Tab</code> button is pressed.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.TabContainer</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachAddNewButtonPress(oData: any, fnFunction: any, oListener?: any): TabContainer;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>itemClose</code> event of this <code>sap.m.TabContainer</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.TabContainer</code> itself.
		 * 
		 * Fired when an item is closed.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.TabContainer</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachItemClose(oData: any, fnFunction: any, oListener?: any): TabContainer;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>itemSelect</code> event of this <code>sap.m.TabContainer</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.TabContainer</code> itself.
		 * 
		 * Fired when an item is pressed.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.TabContainer</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachItemSelect(oData: any, fnFunction: any, oListener?: any): TabContainer;
		/**
		 * Binds aggregation <code>items</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindItems(oBindingInfo: any): TabContainer;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>addNewButtonPress</code> event of this <code>sap.m.TabContainer</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachAddNewButtonPress(fnFunction: any, oListener: any): TabContainer;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>itemClose</code> event of this <code>sap.m.TabContainer</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachItemClose(fnFunction: any, oListener: any): TabContainer;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>itemSelect</code> event of this <code>sap.m.TabContainer</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachItemSelect(fnFunction: any, oListener: any): TabContainer;
		/**
		 * Creates a new subclass of class sap.m.TabContainer with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|TabContainerMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>addNewButtonPress</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireAddNewButtonPress(mArguments?: any): TabContainer;
		/**
		 * Fires event <code>itemClose</code> to attached listeners.
		 * 
		 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>item</code> of type <code>sap.m.TabContainerItem</code>The item to be closed.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Whether or not to prevent the default action
		 */
		fireItemClose(mArguments?: any): boolean;
		/**
		 * Fires event <code>itemSelect</code> to attached listeners.
		 * 
		 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>item</code> of type <code>sap.m.TabContainerItem</code>The selected item.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Whether or not to prevent the default action
		 */
		fireItemSelect(mArguments?: any): boolean;
		/**
		 * Gets content of aggregation <code>items</code>.
		 * 
		 * The items displayed in the <code>TabContainer</code>.
		 * @return 
		 */
		getItems(): TabContainerItem[];
		/**
		 * ID of the element which is the current target of the association <code>selectedItem</code>, or <code>null</code>.
		 * @return 
		 */
		getSelectedItem(): sap.ui.core.ID;
		/**
		 * Gets current value of property <code>showAddNewButton</code>.
		 * 
		 * Defines whether an <code>Add New Tab</code> button is displayed in the TabStrip.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>showAddNewButton</code>
		 */
		getShowAddNewButton(): boolean;
		/**
		 * Checks for the provided <code>sap.m.TabContainerItem</code> in the aggregation <code>items</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oItem The item whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfItem(oItem: TabContainerItem): number;
		/**
		 * Removes an item from the aggregation named <code>items</code>.
		 * @param vItem The item to remove or its index or ID
		 * @return The removed item or null
		 */
		removeItem(vItem: number|string|TabContainerItem): TabContainerItem;
		/**
		 * Unbinds aggregation <code>items</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindItems(): TabContainer;
	}

	class TabContainerItem extends sap.ui.core.Element {
		/**
		 * Constructor for a new <code>TabContainerItem</code>.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.TabContainerItemMetadata);
		/**
		 * Constructor for a new <code>TabContainerItem</code>.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some content to the aggregation <code>content</code>.
		 * @param oContent the content to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addContent(oContent: sap.ui.core.Control): TabContainerItem;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>itemPropertyChanged</code> event of this <code>sap.m.TabContainerItem</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.TabContainerItem</code> itself.
		 * 
		 * Sends information that some of the properties have changed.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.TabContainerItem</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachItemPropertyChanged(oData: any, fnFunction: any, oListener?: any): TabContainerItem;
		/**
		 * Destroys all the content in the aggregation <code>content</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyContent(): TabContainerItem;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>itemPropertyChanged</code> event of this <code>sap.m.TabContainerItem</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachItemPropertyChanged(fnFunction: any, oListener: any): TabContainerItem;
		/**
		 * Creates a new subclass of class sap.m.TabContainerItem with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|TabContainerItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>itemPropertyChanged</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>itemChanged</code> of type <code>sap.m.TabContainerItem</code>The item changed.</li>
		 * <li><code>propertyKey</code> of type <code>string</code>The key of the property.</li>
		 * <li><code>propertyValue</code> of type <code>mixed</code>The value of the property.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireItemPropertyChanged(mArguments?: any): TabContainerItem;
		/**
		 * Gets content of aggregation <code>content</code>.
		 * 
		 * The content displayed for this item.
		 * @return 
		 */
		getContent(): sap.ui.core.Control[];
		/**
		 * Gets current value of property <code>key</code>.
		 * 
		 * Determines the name of the item. Can be used as input for subsequent actions.
		 * @return Value of property <code>key</code>
		 */
		getKey(): string;
		/**
		 * Gets current value of property <code>modified</code>.
		 * 
		 * Shows if a control is edited (default is false). Items that are marked as modified have a * symbol to indicate that they haven't been saved.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>modified</code>
		 */
		getModified(): boolean;
		/**
		 * Gets current value of property <code>name</code>.
		 * 
		 * Determines the text to be displayed for the item.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>name</code>
		 */
		getName(): string;
		/**
		 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oContent The content whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfContent(oContent: sap.ui.core.Control): number;
		/**
		 * Inserts a content into the aggregation <code>content</code>.
		 * @param oContent the content to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the content should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the content is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertContent(oContent: sap.ui.core.Control, iIndex: number): TabContainerItem;
		/**
		 * Removes all the controls from the aggregation <code>content</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllContent(): sap.ui.core.Control[];
		/**
		 * Removes a content from the aggregation <code>content</code>.
		 * @param vContent The content to remove or its index or id
		 * @return The removed content or <code>null</code>
		 */
		removeContent(vContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
		/**
		 * Sets a new value for property <code>key</code>.
		 * 
		 * Determines the name of the item. Can be used as input for subsequent actions.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sKey New value for property <code>key</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setKey(sKey: string): TabContainerItem;
		/**
		 * Sets a new value for property <code>modified</code>.
		 * 
		 * Shows if a control is edited (default is false). Items that are marked as modified have a * symbol to indicate that they haven't been saved.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bModified New value for property <code>modified</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setModified(bModified: boolean): TabContainerItem;
		/**
		 * Sets a new value for property <code>name</code>.
		 * 
		 * Determines the text to be displayed for the item.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sName New value for property <code>name</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setName(sName: string): TabContainerItem;
		/**
		 * Overwrites the method in order to suppress invalidation for some properties.
		 * @param sName Property name to be set
		 * @param vValue Property value to be set
		 * @param bSuppressInvalidation Whether invalidation to be suppressed
		 * @return This instance for chaining
		 */
		setProperty(sName: string, vValue: boolean|string|any, bSuppressInvalidation: boolean): TabContainerItem;
		/**
		 * Sets the given value for the given property after validating and normalizing it,
		 * marks this object as changed.
		 * 
		 * If the value is not valid with regard to the declared data type of the property,
		 * an Error is thrown. In case <code>null</code> or <code>undefined</code> is passed,
		 * the default value for this property is used (see {@link #validateProperty}. If the validated and normalized
		 * <code>oValue</code> equals the current value of the property, the internal state of
		 * this object is not changed. If the value changes, it is stored internally and
		 * the {@link #invalidate} method is called on this object. In the case of TwoWay
		 * databinding, the bound model is informed about the property change.
		 * 
		 * Note that ManagedObject only implements a single level of change tracking: if a first
		 * call to setProperty recognizes a change, 'invalidate' is called. If another call to
		 * setProperty reverts that change, invalidate() will be called again, the new status
		 * is not recognized as being 'clean' again.
		 * 
		 * <b>Note:</b> This method is a low level API as described in <a href="#lowlevelapi">the class documentation</a>.
		 * Applications or frameworks must not use this method to generically set a property.
		 * Use the concrete method set<i>XYZ</i> for property 'XYZ' or the generic {@link #applySettings} instead.
		 * @note Overload from base type sap.ui.base.ManagedObject
		 * @param sPropertyName name of the property to set
		 * @param oValue value to set the property to
		 * @param bSuppressInvalidate if true, the managed object is not marked as changed(optional)
		 * @return Returns <code>this</code> to allow method chaining
		 */
		setProperty(sPropertyName: string, oValue: any, bSuppressInvalidate?: boolean): sap.ui.base.ManagedObject;
	}

	class Table extends ListBase {
		/**
		 * Constructor for a new Table.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId Id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.TableMetadata);
		/**
		 * Constructor for a new Table.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId Id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some column to the aggregation <code>columns</code>.
		 * @param oColumn the column to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addColumn(oColumn: Column): Table;
		/**
		 * Destroys all the columns in the aggregation <code>columns</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyColumns(): Table;
		/**
		 * Creates a new subclass of class sap.m.Table with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ListBase.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|TableMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.ListBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.ListBase
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ListBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>backgroundDesign</code>.
		 * 
		 * Sets the background style of the table. Depending on the theme, you can change the state of the background from <code>Solid</code> to <code>Translucent</code> or to <code>Transparent</code>.
		 * 
		 * Default value is <code>Translucent</code>.
		 * @return Value of property <code>backgroundDesign</code>
		 */
		getBackgroundDesign(): BackgroundDesign;
		/**
		 * Getter for aggregation columns.
		 * @param bSort set true to get the columns in an order that respects personalization settings(optional)
		 * @return columns of the Table
		 */
		getColumns(bSort?: boolean): Column[];
		/**
		 * Gets current value of property <code>fixedLayout</code>.
		 * 
		 * Defines the algorithm to be used to layout the table cells, rows, and columns.
		 * By default, a table is rendered with fixed layout algorithm. This means the horizontal layout only depends on the table's width and the width of the columns, not the contents of the cells. Cells in subsequent rows do not affect column widths. This allows a browser to layout the table faster than the auto table layout since the browser can begin to display the table once the first row has been analyzed.
		 * 
		 * When this property is set to <code>false</code>, <code>sap.m.Table</code> is rendered with auto layout algorithm. This means, the width of the table and its cells depends on the contents of the cells. The column width is set by the widest unbreakable content inside the cells. This can make the rendering slow, since the browser needs to read through all the content in the table before determining the final layout.
		 * <b>Note:</b> Since <code>sap.m.Table</code> does not have its own scrollbars, setting <code>fixedLayout</code> to false can force the table to overflow, which may cause visual problems. It is suggested to use this property when a table has a few columns in wide screens or within the horizontal scroll container (e.g <code>sap.m.Dialog</code>) to handle overflow.
		 * In auto layout mode the <code>width</code> property of <code>sap.m.Column</code> is taken into account as a minimum width.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>fixedLayout</code>
		 */
		getFixedLayout(): boolean;
		/**
		 * Gets current value of property <code>showOverlay</code>.
		 * 
		 * Setting this property to <code>true</code> will show an overlay on top of the table content and prevents the user interaction with it.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>showOverlay</code>
		 */
		getShowOverlay(): boolean;
		/**
		 * Checks for the provided <code>sap.m.Column</code> in the aggregation <code>columns</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oColumn The column whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfColumn(oColumn: Column): number;
		/**
		 * Inserts a column into the aggregation <code>columns</code>.
		 * @param oColumn the column to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the column should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the column is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the column is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertColumn(oColumn: Column, iIndex: number): Table;
		/**
		 * Removes all the controls from the aggregation <code>columns</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllColumns(): Column[];
		/**
		 * Removes a column from the aggregation <code>columns</code>.
		 * @param vColumn The column to remove or its index or id
		 * @return The removed column or <code>null</code>
		 */
		removeColumn(vColumn: number|string|Column): Column;
		/**
		 * Sets a new value for property <code>backgroundDesign</code>.
		 * 
		 * Sets the background style of the table. Depending on the theme, you can change the state of the background from <code>Solid</code> to <code>Translucent</code> or to <code>Transparent</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Translucent</code>.
		 * @param sBackgroundDesign New value for property <code>backgroundDesign</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setBackgroundDesign(sBackgroundDesign: BackgroundDesign): Table;
		/**
		 * Sets a new value for property <code>fixedLayout</code>.
		 * 
		 * Defines the algorithm to be used to layout the table cells, rows, and columns.
		 * By default, a table is rendered with fixed layout algorithm. This means the horizontal layout only depends on the table's width and the width of the columns, not the contents of the cells. Cells in subsequent rows do not affect column widths. This allows a browser to layout the table faster than the auto table layout since the browser can begin to display the table once the first row has been analyzed.
		 * 
		 * When this property is set to <code>false</code>, <code>sap.m.Table</code> is rendered with auto layout algorithm. This means, the width of the table and its cells depends on the contents of the cells. The column width is set by the widest unbreakable content inside the cells. This can make the rendering slow, since the browser needs to read through all the content in the table before determining the final layout.
		 * <b>Note:</b> Since <code>sap.m.Table</code> does not have its own scrollbars, setting <code>fixedLayout</code> to false can force the table to overflow, which may cause visual problems. It is suggested to use this property when a table has a few columns in wide screens or within the horizontal scroll container (e.g <code>sap.m.Dialog</code>) to handle overflow.
		 * In auto layout mode the <code>width</code> property of <code>sap.m.Column</code> is taken into account as a minimum width.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bFixedLayout New value for property <code>fixedLayout</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setFixedLayout(bFixedLayout: boolean): Table;
		/**
		 * Sets a new value for property <code>showOverlay</code>.
		 * 
		 * Setting this property to <code>true</code> will show an overlay on top of the table content and prevents the user interaction with it.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bShowOverlay New value for property <code>showOverlay</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowOverlay(bShowOverlay: boolean): Table;
	}

	class TablePersoController extends sap.ui.base.ManagedObject {
		/**
		 * The TablePersoController can be used to connect a table that you want to provide
		 * a personalization dialog for, with a persistence service such as one provided by
		 * the unified shell.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId optional id for the new control; generated automatically if
		 * 			no non-empty id is given Note: this can be omitted, no matter
		 * 			whether <code>mSettings</code> will be given or not!(optional)
		 * @param mSettings optional map/JSON-object with initial settings for the
		 * 			new component instance(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.TablePersoControllerMetadata);
		/**
		 * The TablePersoController can be used to connect a table that you want to provide
		 * a personalization dialog for, with a persistence service such as one provided by
		 * the unified shell.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId optional id for the new control; generated automatically if
		 * 			no non-empty id is given Note: this can be omitted, no matter
		 * 			whether <code>mSettings</code> will be given or not!(optional)
		 * @param mSettings optional map/JSON-object with initial settings for the
		 * 			new component instance(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Activates the controller, i.e. tries to retrieve existing persisted
		 * personalizations, creates a TablePersoDialog for the associated
		 * table and attaches a close handler to apply the personalizations to
		 * the table and persist them.
		 * 
		 * This method should be called when the table to be personalized knows
		 * its columns. Usually, this is when that table's view has set its model,
		 * which is typically done in the corresponding controller's init method.
		 * For example
		 * <pre><code>
		 *  onInit: function () {
		 * 
		 * 		// set explored app's demo model on this sample
		 * 		var oModel = new JSONModel(jQuery.sap.getModulePath("sap.ui.demo.mock", "/products.json"));
		 * 		var oGroupingModel = new JSONModel({ hasGrouping: false});
		 * 		this.getView().setModel(oModel);
		 * 		this.getView().setModel(oGroupingModel, 'Grouping');
		 * 
		 * 		// init and activate controller
		 * 		this._oTPC = new TablePersoController({
		 * 			table: this.getView().byId("productsTable"),
		 * 			//specify the first part of persistence ids e.g. 'demoApp-productsTable-dimensionsCol'
		 * 			componentName: "demoApp",
		 * 			persoService: DemoPersoService,
		 * 		}).activate();
		 * 	}
		 * </code></pre>
		 * @return the TablePersoController instance.
		 */
		activate(): any;
		/**
		 * Adds some table into the association <code>tables</code>.
		 * @param vTable the tables to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addTable(vTable: sap.ui.core.ID|Table): TablePersoController;
		/**
		 * Applies the personalizations by getting the existing personalizations
		 * and adjusting to the table.
		 * @param oTable the table to be personalized.
		 */
		applyPersonalizations(oTable: Table);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>personalizationsDone</code> event of this <code>sap.m.TablePersoController</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.TablePersoController</code> itself.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.TablePersoController</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachPersonalizationsDone(oData: any, fnFunction: any, oListener?: any): TablePersoController;
		/**
		 * Destroys the persoService in the aggregation <code>persoService</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyPersoService(): TablePersoController;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>personalizationsDone</code> event of this <code>sap.m.TablePersoController</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachPersonalizationsDone(fnFunction: any, oListener: any): TablePersoController;
		/**
		 * Do some clean up: remove event delegates, etc
		 */
		exit();
		/**
		 * Creates a new subclass of class sap.m.TablePersoController with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|TablePersoControllerMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>personalizationsDone</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		firePersonalizationsDone(mArguments?: any): TablePersoController;
		/**
		 * Gets current value of property <code>componentName</code>.
		 * 
		 * Available options for the text direction are LTR and RTL. By default the control inherits the text direction from its parent control.
		 * @return Value of property <code>componentName</code>
		 */
		getComponentName(): string;
		/**
		 * Gets current value of property <code>contentHeight</code>.
		 * 
		 * Default value is <code>20rem</code>.
		 * @return Value of property <code>contentHeight</code>
		 */
		getContentHeight(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>contentWidth</code>.
		 * @return Value of property <code>contentWidth</code>
		 */
		getContentWidth(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>hasGrouping</code>.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>hasGrouping</code>
		 */
		getHasGrouping(): boolean;
		/**
		 * Gets content of aggregation <code>persoService</code>.
		 * @return 
		 */
		getPersoService(): any;
		/**
		 * Gets current value of property <code>showResetAll</code>.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>showResetAll</code>
		 */
		getShowResetAll(): boolean;
		/**
		 * Gets current value of property <code>showSelectAll</code>.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>showSelectAll</code>
		 */
		getShowSelectAll(): boolean;
		/**
		 * ID of the element which is the current target of the association <code>table</code>, or <code>null</code>.
		 * @return 
		 */
		getTable(): sap.ui.core.ID;
		/**
		 * Returns a  _tablePersoDialog instance if available. It can be NULL if
		 * the controller has not been activated yet.
		 * 
		 * This function makes a private aggregate publicly accessable. This is
		 * necessary for downward compatibility reasons: in the first versions
		 * of the tablePersoProvider developers still worked with the TablePersoDialog
		 * directly, which is now not necessary any longer.
		 * @return the TablePersoDialog instance.
		 */
		getTablePersoDialog(): any;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>tables</code>.
		 * @return 
		 */
		getTables(): sap.ui.core.ID[];
		/**
		 * Initializes the TablePersoController instance after creation.
		 */
		init();
		/**
		 * Opens the TablePersoDialog, stores the personalized settings on close,
		 * modifies the table columns, and sends them to the persistence service
		 */
		openDialog();
		/**
		 * Refresh the personalizations: reloads the personalization information from the table perso
		 * provider, applies it to the controller's table and updates the controller's table perso dialog.
		 * 
		 * Use case for a 'refresh' call would be that the table which si personalized changed its columns
		 * during runtime, after personalization has been activated.
		 */
		refresh();
		/**
		 * Removes all the controls in the association named <code>tables</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllTables(): sap.ui.core.ID[];
		/**
		 * Removes an table from the association named <code>tables</code>.
		 * @param vTable The table to be removed or its index or ID
		 * @return The removed table or <code>null</code>
		 */
		removeTable(vTable: number|sap.ui.core.ID|Table): sap.ui.core.ID;
		/**
		 * Persist the personalizations
		 */
		savePersonalizations();
		/**
		 * Using this method, the first part of tablePerso persistence ids can be
		 * provided, in case the table's app does not provide that part itself.
		 * 
		 * If a component name is set using this method, it will be used, regardless of
		 * whether the table's app has a different component name or not.
		 * @param sCompName the new component name.
		 * @return the TablePersoController instance.
		 */
		setComponentName(sCompName: string): any;
		/**
		 * Reflector for the controller's 'contentHeight' property.
		 * @param sHeight the new height of the TablePersoDialog.
		 * @return the TablePersoController instance.
		 */
		setContentHeight(sHeight: sap.ui.core.CSSSize): any;
		/**
		 * Reflector for the controller's 'contentWidth' property.
		 * @param sWidth the new width of the tablePersoDialog
		 * @return the TablePersoController instance.
		 */
		setContentWidth(sWidth: sap.ui.core.CSSSize): any;
		/**
		 * Reflector for the controller's 'hasGrouping' property.
		 * @param bHasGrouping is the tablePersoDialog displayed in grouping mode or not.
		 * @return the TablePersoController instance.
		 */
		setHasGrouping(bHasGrouping: boolean): any;
		/**
		 * Sets the aggregated <code>persoService</code>.
		 * @param oPersoService The persoService to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setPersoService(oPersoService: any): TablePersoController;
		/**
		 * Reflector for the controller's 'showResetAll' property.
		 * @param bShowResetAll is the tablePersoDialog's 'UndoPersonalization' button displayed or not.
		 * @return the TablePersoController instance.
		 */
		setShowResetAll(bShowResetAll: boolean): any;
		/**
		 * Reflector for the controller's 'showSelectAll' property.
		 * @param bShowSelectAll is the tablePersoDialog's 'Display All' checkbox displayed or not.
		 * @return the TablePersoController instance.
		 */
		setShowSelectAll(bShowSelectAll: boolean): any;
		/**
		 * Sets the associated <code>table</code>.
		 * @param oTable ID of an element which becomes the new target of this table association; alternatively, an element instance may be given
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTable(oTable: sap.ui.core.ID|Table): TablePersoController;
	}

	class TablePersoDialog extends sap.ui.base.ManagedObject {
		/**
		 * The TablePersoDialog can be used to display and allow modification of personalization settings relating to a Table. It displays the columns of the table that it refers to by using
		 * <ul><li>The result of calling sap.m.TablePersoProvider's 'getCaption' callback if it is implemented and delivers a non-null value for a column</li>
		 * <li>the column header control's 'text' property if no caption property is available</li>
		 * <li>the column header control's 'title' property if neither 'text' nor 'caption' property are available</li>
		 * <li>the column id is displayed as last fallback, if none of the above is at hand. In that case, a warning is logged. </li></ul>
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId optional id for the new control; generated automatically if
		 * 			no non-empty id is given Note: this can be omitted, no matter
		 * 			whether <code>mSettings</code> will be given or not!(optional)
		 * @param mSettings optional map/JSON-object with initial settings for the
		 * 			new component instance(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.TablePersoDialogMetadata);
		/**
		 * The TablePersoDialog can be used to display and allow modification of personalization settings relating to a Table. It displays the columns of the table that it refers to by using
		 * <ul><li>The result of calling sap.m.TablePersoProvider's 'getCaption' callback if it is implemented and delivers a non-null value for a column</li>
		 * <li>the column header control's 'text' property if no caption property is available</li>
		 * <li>the column header control's 'title' property if neither 'text' nor 'caption' property are available</li>
		 * <li>the column id is displayed as last fallback, if none of the above is at hand. In that case, a warning is logged. </li></ul>
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId optional id for the new control; generated automatically if
		 * 			no non-empty id is given Note: this can be omitted, no matter
		 * 			whether <code>mSettings</code> will be given or not!(optional)
		 * @param mSettings optional map/JSON-object with initial settings for the
		 * 			new component instance(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>cancel</code> event of this <code>sap.m.TablePersoDialog</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.TablePersoDialog</code> itself.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.TablePersoDialog</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachCancel(oData: any, fnFunction: any, oListener?: any): TablePersoDialog;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>confirm</code> event of this <code>sap.m.TablePersoDialog</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.TablePersoDialog</code> itself.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.TablePersoDialog</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachConfirm(oData: any, fnFunction: any, oListener?: any): TablePersoDialog;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>cancel</code> event of this <code>sap.m.TablePersoDialog</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachCancel(fnFunction: any, oListener: any): TablePersoDialog;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>confirm</code> event of this <code>sap.m.TablePersoDialog</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachConfirm(fnFunction: any, oListener: any): TablePersoDialog;
		/**
		 * Creates a new subclass of class sap.m.TablePersoDialog with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|TablePersoDialogMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>cancel</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireCancel(mArguments?: any): TablePersoDialog;
		/**
		 * Fires event <code>confirm</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireConfirm(mArguments?: any): TablePersoDialog;
		/**
		 * Gets current value of property <code>columnInfoCallback</code>.
		 * @return Value of property <code>columnInfoCallback</code>
		 */
		getColumnInfoCallback(): any;
		/**
		 * Gets current value of property <code>contentHeight</code>.
		 * @return Value of property <code>contentHeight</code>
		 */
		getContentHeight(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>contentWidth</code>.
		 * @return Value of property <code>contentWidth</code>
		 */
		getContentWidth(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>hasGrouping</code>.
		 * @return Value of property <code>hasGrouping</code>
		 */
		getHasGrouping(): boolean;
		/**
		 * Gets current value of property <code>initialColumnState</code>.
		 * @return Value of property <code>initialColumnState</code>
		 */
		getInitialColumnState(): any;
		/**
		 * ID of the element which is the current target of the association <code>persoDialogFor</code>, or <code>null</code>.
		 * @return 
		 */
		getPersoDialogFor(): sap.ui.core.ID;
		/**
		 * Gets current value of property <code>persoMap</code>.
		 * @return Value of property <code>persoMap</code>
		 */
		getPersoMap(): any;
		/**
		 * Gets current value of property <code>showResetAll</code>.
		 * @return Value of property <code>showResetAll</code>
		 */
		getShowResetAll(): boolean;
		/**
		 * Gets current value of property <code>showSelectAll</code>.
		 * @return Value of property <code>showSelectAll</code>
		 */
		getShowSelectAll(): boolean;
		/**
		 * Initializes the TablePersoDialog instance after creation.
		 */
		init();
		/**
		 * Sets the content of the dialog, being list items representing
		 * the associated table's column settings, and opens the dialog
		 */
		open();
		/**
		 * Returns the personalizations made. Currently supports
		 * a 'columns' property which holds an array of settings,
		 * one element per column in the associated table. The element
		 * contains column-specific information as follows: id: column id;
		 * order: new order; text: the column's header text that was displayed
		 * in the dialog; visible: visibility (true or false).
		 * @return the personalization data
		 */
		retrievePersonalizations(): any;
		/**
		 * Sets a new value for property <code>columnInfoCallback</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param oColumnInfoCallback New value for property <code>columnInfoCallback</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setColumnInfoCallback(oColumnInfoCallback: any): TablePersoDialog;
		/**
		 * Sets a new value for property <code>contentHeight</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sContentHeight New value for property <code>contentHeight</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setContentHeight(sContentHeight: sap.ui.core.CSSSize): TablePersoDialog;
		/**
		 * Sets a new value for property <code>contentWidth</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sContentWidth New value for property <code>contentWidth</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setContentWidth(sContentWidth: sap.ui.core.CSSSize): TablePersoDialog;
		/**
		 * Setter to turn on/ switch off TablePersoDialog's grouping mode.
		 * @param bHasGrouping groping mode on or off.
		 * @return the TablePersoDialog instance.
		 */
		setHasGrouping(bHasGrouping: boolean): any;
		/**
		 * Sets a new value for property <code>initialColumnState</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param oInitialColumnState New value for property <code>initialColumnState</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setInitialColumnState(oInitialColumnState: any): TablePersoDialog;
		/**
		 * Sets the associated <code>persoDialogFor</code>.
		 * @param oPersoDialogFor ID of an element which becomes the new target of this persoDialogFor association; alternatively, an element instance may be given
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setPersoDialogFor(oPersoDialogFor: sap.ui.core.ID|Table): TablePersoDialog;
		/**
		 * Sets a new value for property <code>persoMap</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param oPersoMap New value for property <code>persoMap</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setPersoMap(oPersoMap: any): TablePersoDialog;
		/**
		 * Setter to show/hide TablePersoDialog's 'Undo Personalization' button.
		 * @param bShowResetAll 'undo Personalization' button visible or not.
		 * @return the TablePersoDialog instance.
		 */
		setShowResetAll(bShowResetAll: boolean): any;
		/**
		 * Setter to show/hide TablePersoDialog's 'selectAll' checkbox.
		 * @param bShowSelectAll selectAll checkbox visible or not.
		 * @return the TablePersoDialog instance.
		 */
		setShowSelectAll(bShowSelectAll: boolean): any;
	}

	class TablePersoProvider extends sap.ui.base.ManagedObject {
		/**
		 * This is an abstract TablePersoProvider, describing the interface for a real
		 * TablePersoProvider.
		 */
		constructor();
		/**
		 * Removes the personalization bundle
		 * This must return a jQuery promise (see http://api.jquery.com/promise/)
		 */
		delPersData();
		/**
		 * Creates a new subclass of class sap.m.TablePersoProvider with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Callback function which can be used to determine the title of a given column
		 * within the TablePersoDialog. As a default, the column header controls are
		 * asked for their 'text' or 'title' property. This works in most cases, for example
		 * if the header control is a sap.m.Label (has 'text' property) or a sap.m.ObjectListItem
		 * (has 'title' property).
		 * 
		 * If the header control used in a column has neither 'text' nor 'title' property, or if you would like to
		 * display a modified column name for a certain column, this callback function can be used.
		 * 
		 * If the callback delivers null for a column (which is the default implementation), the default
		 * texts described above are displayed for that column in the TablePersoDialog.
		 * 
		 * In case neither the callback delivers null and neither 'text' nor ' title' property are at hand,
		 * the TablePersoDialog will display the column id and a warning message is logged.
		 * @param oColumn column whose caption shall be determined
		 */
		getCaption(oColumn: Column);
		/**
		 * Callback function which can be used to determine the group of a given column
		 * within the TablePersoDialog. As a default, the columns are not assigned to a group.
		 * 
		 * This information is used to group the columns within the TablePersoDialog if the TablePersoController's
		 * 'group' flag is set, otherwise, the groups are ignored.
		 * @param oColumn column whose group shall be determined
		 */
		getGroup(oColumn: Column);
		/**
		 * Retrieves the personalization bundle.
		 * This must return a jQuery promise (see http://api.jquery.com/promise/)
		 */
		getPersData();
		/**
		 * Initializes the TablePersoProvider instance after creation.
		 */
		init();
		/**
		 * Resets user’s personalization for a given table so that ‘getPersData’ will
		 * deliver its initial state. If no table is specified, all personalizations
		 * of the currently logged on user are reset.
		 * 
		 * This must return a jQuery promise (see http://api.jquery.com/promise/)
		 */
		resetPersData();
		/**
		 * Stores the personalization bundle, overwriting any
		 * previous bundle completely
		 * This must return a jQuery promise (see http://api.jquery.com/promise/)
		 * @param oBundle 
		 */
		setPersData(oBundle: any);
	}

	class TableSelectDialog extends sap.ui.core.Control {
		/**
		 * Constructor for a new TableSelectDialog.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.TableSelectDialogMetadata);
		/**
		 * Constructor for a new TableSelectDialog.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Sets the binding context for the internal table AND the current control so that both controls can be used with the context.
		 */
		_setBindingContext: any;
		/**
		 * Sets the model for the internal table and the current control, so that both controls can be used with data binding.
		 */
		_setModel: any;
		/**
		 * Adds some column to the aggregation <code>columns</code>.
		 * @param oColumn the column to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addColumn(oColumn: Column): TableSelectDialog;
		/**
		 * Adds some item to the aggregation <code>items</code>.
		 * @param oItem the item to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addItem(oItem: ColumnListItem): TableSelectDialog;
		/**
		 * Transfers method to the inner dialog: addStyleClass
		 * @return this pointer for chaining
		 */
		addStyleClass(): TableSelectDialog;
		/**
		 * The string given as "sStyleClass" will be added to the "class" attribute of this control's root HTML element.
		 * 
		 * This method is intended to be used to mark controls as being of a special type for which
		 * special styling can be provided using CSS selectors that reference this style class name.
		 * 
		 * <pre>
		 * Example:
		 *    myButton.addStyleClass("myRedTextButton"); // add a CSS class to one button instance
		 * 
		 * ...and in CSS:
		 *    .myRedTextButton {
		 *       color: red;
		 *    }
		 * </pre>
		 * 
		 * This will add the CSS class "myRedTextButton" to the Button HTML and the CSS code above will then
		 * make the text in this particular button red.
		 * 
		 * Only characters allowed inside HTML attributes are allowed.
		 * Quotes are not allowed and this method will ignore any strings containing quotes.
		 * Strings containing spaces are interpreted as multiple custom style classes which are split by space and can be removed
		 * individually later by calling removeStyleClass.
		 * Multiple calls with the same sStyleClass will have no different effect than calling once.
		 * If sStyleClass is null, empty string or it contains quotes, the call is ignored.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sStyleClass the CSS class name to be added
		 * @return Returns <code>this</code> to allow method chaining
		 */
		addStyleClass(sStyleClass: string): sap.ui.core.Control;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>cancel</code> event of this <code>sap.m.TableSelectDialog</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.TableSelectDialog</code> itself.
		 * 
		 * Fires when the Cancel button is clicked.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.TableSelectDialog</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachCancel(oData: any, fnFunction: any, oListener?: any): TableSelectDialog;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>confirm</code> event of this <code>sap.m.TableSelectDialog</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.TableSelectDialog</code> itself.
		 * 
		 * Fires when the dialog is confirmed by selecting an item in single-selection mode or by pressing the confirmation button in multi-selection mode. The items being selected are returned as event parameters.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.TableSelectDialog</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachConfirm(oData: any, fnFunction: any, oListener?: any): TableSelectDialog;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>liveChange</code> event of this <code>sap.m.TableSelectDialog</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.TableSelectDialog</code> itself.
		 * 
		 * Fires when the value of the search field is changed by a user (for example at each key press).
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.TableSelectDialog</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachLiveChange(oData: any, fnFunction: any, oListener?: any): TableSelectDialog;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>search</code> event of this <code>sap.m.TableSelectDialog</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.TableSelectDialog</code> itself.
		 * 
		 * Fires when the search button has been clicked on dialog.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.TableSelectDialog</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachSearch(oData: any, fnFunction: any, oListener?: any): TableSelectDialog;
		/**
		 * Forwards aggregations with the name of items or columns to the internal table.
		 * @param sAggregationName The name for the binding
		 * @param oBindingInfo The configuration parameters for the binding
		 * @return this pointer for chaining
		 */
		bindAggregation(sAggregationName: string, oBindingInfo: any): TableSelectDialog;
		/**
		 * Bind an aggregation to the model.
		 * 
		 * The bound aggregation will use the given template, clone it for each item
		 * which exists in the bound list and set the appropriate binding context.
		 * This is a generic method which can be used to bind any aggregation to the
		 * model. A managed object may flag aggregations in the metamodel with
		 * bindable="bindable" to get typed bind<i>Something</i> methods for those aggregations.
		 * @note Overload from base type sap.ui.base.ManagedObject
		 * @param sName the aggregation to bind
		 * @param oBindingInfo the binding info
		 * @return reference to the instance itself
		 */
		bindAggregation(sName: string, oBindingInfo: any): sap.ui.base.ManagedObject;
		/**
		 * Binds aggregation <code>columns</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindColumns(oBindingInfo: any): TableSelectDialog;
		/**
		 * Binds aggregation <code>items</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindItems(oBindingInfo: any): TableSelectDialog;
		/**
		 * Destroys all the columns in the aggregation <code>columns</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyColumns(): TableSelectDialog;
		/**
		 * Destroys all the items in the aggregation <code>items</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyItems(): TableSelectDialog;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>cancel</code> event of this <code>sap.m.TableSelectDialog</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachCancel(fnFunction: any, oListener: any): TableSelectDialog;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>confirm</code> event of this <code>sap.m.TableSelectDialog</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachConfirm(fnFunction: any, oListener: any): TableSelectDialog;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>liveChange</code> event of this <code>sap.m.TableSelectDialog</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachLiveChange(fnFunction: any, oListener: any): TableSelectDialog;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>search</code> event of this <code>sap.m.TableSelectDialog</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachSearch(fnFunction: any, oListener: any): TableSelectDialog;
		/**
		 * Creates a new subclass of class sap.m.TableSelectDialog with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|TableSelectDialogMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>cancel</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireCancel(mArguments?: any): TableSelectDialog;
		/**
		 * Fires event <code>confirm</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>selectedItem</code> of type <code>sap.m.StandardListItem</code>Returns the selected list item. When no item is selected, "null" is returned. When multi-selection is enabled and multiple items are selected, only the first selected item is returned.</li>
		 * <li><code>selectedItems</code> of type <code>sap.m.StandardListItem[]</code>Returns an array containing the visible selected list items. If no items are selected, an empty array is returned.</li>
		 * <li><code>selectedContexts</code> of type <code>string</code>Returns the binding contexts of the selected items including the non-visible items.
		 * Note: In contrast to the parameter "selectedItems", this parameter includes the selected but NOT visible items (due to list filtering). An empty array is set for this parameter if no Databinding is used.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireConfirm(mArguments?: any): TableSelectDialog;
		/**
		 * Fires event <code>liveChange</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>value</code> of type <code>string</code>Specifies the value entered in the search field.</li>
		 * <li><code>itemsBinding</code> of type <code>any</code>The Items binding of the Table Select Dialog.
		 * Only available if the items aggregation is bound to a model.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireLiveChange(mArguments?: any): TableSelectDialog;
		/**
		 * Fires event <code>search</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>value</code> of type <code>string</code>Specifies the value entered in the search field.</li>
		 * <li><code>itemsBinding</code> of type <code>any</code>Determines the Items binding of the Table Select Dialog. Only available if the items aggregation is bound to a model.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireSearch(mArguments?: any): TableSelectDialog;
		/**
		 * Gets content of aggregation <code>columns</code>.
		 * 
		 * The columns bindings.
		 * @return 
		 */
		getColumns(): Column[];
		/**
		 * Retrieves content height of the select dialog {@link sap.m.Dialog}
		 * @return sHeight the content height of the internal dialog
		 */
		getContentHeight(): sap.ui.core.CSSSize;
		/**
		 * Retrieves content width of the select dialog {@link sap.m.Dialog}
		 * @return sWidth the content width of the internal dialog
		 */
		getContentWidth(): sap.ui.core.CSSSize;
		/**
		 * Transfers method to the inner dialog: getDomRef
		 * @return The Element's DOM Element sub DOM Element or null
		 */
		getDomRef(): any;
		/**
		 * Returns the best suitable DOM Element that represents this UI5 Element.
		 * By default the DOM Element with the same ID as this Element is returned.
		 * Subclasses should override this method if the lookup via id is not sufficient.
		 * 
		 * Note that such a DOM Element does not necessarily exist in all cases.
		 * Some elements or controls might not have a DOM representation at all (e.g.
		 * a naive FlowLayout) while others might not have one due to their current
		 * state (e.g. an initial, not yet rendered control).
		 * 
		 * If an ID suffix is given, the ID of this Element is concatenated with the suffix
		 * (separated by a single dash) and the DOM node with that compound ID will be returned.
		 * This matches the UI5 naming convention for named inner DOM nodes of a control.
		 * @note Overload from base type sap.ui.core.Element
		 * @param sSuffix ID suffix to get the DOMRef for(optional)
		 * @return The Element's DOM Element sub DOM Element or null
		 */
		getDomRef(sSuffix?: string): any;
		/**
		 * Gets current value of property <code>growingThreshold</code>.
		 * 
		 * Determines the number of items initially displayed in the table.
		 * @return Value of property <code>growingThreshold</code>
		 */
		getGrowingThreshold(): number;
		/**
		 * Gets content of aggregation <code>items</code>.
		 * 
		 * The items of the table.
		 * @return 
		 */
		getItems(): ColumnListItem[];
		/**
		 * Gets current value of property <code>multiSelect</code>.
		 * 
		 * Enables the user to select several options from the table.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>multiSelect</code>
		 */
		getMultiSelect(): boolean;
		/**
		 * Retrieves the internal List's no data text property
		 * @return the current no data text
		 */
		getNoDataText(): string;
		/**
		 * Gets current value of property <code>rememberSelections</code>.
		 * 
		 * Controls whether the dialog clears the selection or not. When the dialog is opened multiple times in the same context to allow for corrections of previous user inputs, set this flag to "true". When the dialog should reset the selection to allow for a new selection each time set it to "false"
		 * Note: This property must be set before the Dialog is opened to have an effect.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>rememberSelections</code>
		 */
		getRememberSelections(): boolean;
		/**
		 * Gets current value of property <code>title</code>.
		 * 
		 * Specifies the title text in the dialog header.
		 * @return Value of property <code>title</code>
		 */
		getTitle(): string;
		/**
		 * Transfers method to the inner dialog: hasStyleClass
		 * @return true if the class is set, false otherwise
		 */
		hasStyleClass(): boolean;
		/**
		 * Returns true if the given style class or all multiple style classes which are generated by splitting the given string with space are already set on the control
		 * via previous call(s) to addStyleClass().
		 * @note Overload from base type sap.ui.core.Control
		 * @param sStyleClass the style to check for
		 * @return 
		 */
		hasStyleClass(sStyleClass: string): boolean;
		/**
		 * Checks for the provided <code>sap.m.Column</code> in the aggregation <code>columns</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oColumn The column whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfColumn(oColumn: Column): number;
		/**
		 * Checks for the provided <code>sap.m.ColumnListItem</code> in the aggregation <code>items</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oItem The item whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfItem(oItem: ColumnListItem): number;
		/**
		 * Inserts a column into the aggregation <code>columns</code>.
		 * @param oColumn the column to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the column should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the column is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the column is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertColumn(oColumn: Column, iIndex: number): TableSelectDialog;
		/**
		 * Inserts a item into the aggregation <code>items</code>.
		 * @param oItem the item to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the item should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the item is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertItem(oItem: ColumnListItem, iIndex: number): TableSelectDialog;
		/**
		 * Invalidates the dialog instead of this control, as there is no renderer.
		 * @return this pointer for chaining
		 */
		invalidate(): TableSelectDialog;
		/**
		 * This triggers rerendering of itself and its children.<br/> As <code>sap.ui.base.ManagedObject</code> "bubbles up" the
		 * invalidate, changes to child-<code>Elements</code> will also result in rerendering of the whole sub tree.
		 * @note Overload from base type sap.ui.base.ManagedObject
		 */
		invalidate();
		/**
		 * Triggers rerendering of this element and its children.
		 * 
		 * As <code>sap.ui.core.Element</code> "bubbles up" the invalidate, changes to children
		 * potentially result in rerendering of the whole sub tree.
		 * @note Overload from base type sap.ui.core.Control
		 * @param oOrigin 
		 */
		invalidate(oOrigin: any);
		/**
		 * Shows the busy state and is called after the renderer is finished.
		 * @return this pointer for chaining
		 */
		onAfterRendering(): TableSelectDialog;
		/**
		 * Function is called when the rendering of the control is completed.
		 * 
		 * Applications must not call this hook method directly, it is called by the framework.
		 * 
		 * Subclasses of Control should override this hook to implement any necessary actions after the rendering.
		 * @note Overload from base type sap.ui.core.Control
		 */
		onAfterRendering();
		/**
		 * Opens the internal dialog with a searchfield and a table.
		 * @param sSearchValue Value for the search. The table will be automatically trigger the search event if this parameter is set.
		 * @return <code>this</code> to allow method chaining
		 */
		open(sSearchValue: string): TableSelectDialog;
		/**
		 * Removes all the controls from the aggregation <code>columns</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllColumns(): Column[];
		/**
		 * Removes all the controls from the aggregation <code>items</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllItems(): ColumnListItem[];
		/**
		 * Removes a column from the aggregation <code>columns</code>.
		 * @param vColumn The column to remove or its index or id
		 * @return The removed column or <code>null</code>
		 */
		removeColumn(vColumn: number|string|Column): Column;
		/**
		 * Removes a item from the aggregation <code>items</code>.
		 * @param vItem The item to remove or its index or id
		 * @return The removed item or <code>null</code>
		 */
		removeItem(vItem: number|string|ColumnListItem): ColumnListItem;
		/**
		 * Transfers method to the inner dialog: removeStyleClass
		 * @return this pointer for chaining
		 */
		removeStyleClass(): TableSelectDialog;
		/**
		 * Removes the given string from the list of custom style classes that have been set previously.
		 * Regular style classes like "sapUiBtn" cannot be removed.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sStyleClass the style to be removed
		 * @return Returns <code>this</code> to allow method chaining
		 */
		removeStyleClass(sStyleClass: string): sap.ui.core.Control;
		/**
		 * Sets the busyIndicatorDelay value to the internal table
		 * @param iValue Value for the busyIndicatorDelay.
		 * @return this pointer for chaining
		 */
		setBusyIndicatorDelay(iValue: number): TableSelectDialog;
		/**
		 * Define the delay, after which the busy indicator will show up
		 * @note Overload from base type sap.ui.core.Control
		 * @param iDelay The delay in ms
		 * @return <code>this</code> to allow method chaining
		 */
		setBusyIndicatorDelay(iDelay: number): sap.ui.core.Control;
		/**
		 * Sets content height of the select dialog {@link sap.m.Dialog}
		 * @param sHeight the new content height value for the dialog
		 * @return this pointer for chaining
		 */
		setContentHeight(sHeight: sap.ui.core.CSSSize): TableSelectDialog;
		/**
		 * Sets content width of the select dialog {@link sap.m.Dialog}
		 * @param sWidth the new content width value for the dialog
		 * @return this pointer for chaining
		 */
		setContentWidth(sWidth: sap.ui.core.CSSSize): TableSelectDialog;
		/**
		 * Sets the growing threshold to the internal table
		 * @param iValue Value for the table's growing threshold.
		 * @return this pointer for chaining
		 */
		setGrowingThreshold(iValue: number): TableSelectDialog;
		/**
		 * Enables/Disables multi selection mode.
		 * @param bMulti flag for multi selection mode
		 * @return this pointer for chaining
		 */
		setMultiSelect(bMulti: boolean): TableSelectDialog;
		/**
		 * Sets the no data text of the internal table
		 * @param sNoDataText the no data text for the table
		 */
		setNoDataText(sNoDataText: string);
		/**
		 * Sets a new value for property <code>rememberSelections</code>.
		 * 
		 * Controls whether the dialog clears the selection or not. When the dialog is opened multiple times in the same context to allow for corrections of previous user inputs, set this flag to "true". When the dialog should reset the selection to allow for a new selection each time set it to "false"
		 * Note: This property must be set before the Dialog is opened to have an effect.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bRememberSelections New value for property <code>rememberSelections</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setRememberSelections(bRememberSelections: boolean): TableSelectDialog;
		/**
		 * Sets the title of the internal dialog
		 * @param sTitle the title text for the dialog
		 * @return this pointer for chaining
		 */
		setTitle(sTitle: string): TableSelectDialog;
		/**
		 * Transfers method to the inner dialog: toggleStyleClass
		 * @return this pointer for chaining
		 */
		toggleStyleClass(): TableSelectDialog;
		/**
		 * The string given as "sStyleClass" will be be either added to or removed from the "class" attribute of this control's root HTML element,
		 * depending on the value of "bAdd": if bAdd is true, sStyleClass will be added.
		 * If bAdd is not given, sStyleClass will be removed if it is currently present and will be added if not present.
		 * If sStyleClass is null or empty string, the call is ignored.
		 * 
		 * See addStyleClass and removeStyleClass for further documentation.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sStyleClass the CSS class name to be added or removed
		 * @param bAdd whether sStyleClass should be added (or removed); when this parameter is not given, sStyleClass will be toggled (removed, if present, and added if not present)
		 * @return Returns <code>this</code> to allow method chaining
		 */
		toggleStyleClass(sStyleClass: string, bAdd: boolean): sap.ui.core.Control;
		/**
		 * Unbinds aggregation <code>columns</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindColumns(): TableSelectDialog;
		/**
		 * Unbinds aggregation <code>items</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindItems(): TableSelectDialog;
	}

	class TabStripSelectList extends SelectList {
		/**
		 * Constructor for a new <code>TabStripSelectList</code>.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Constructor for a new <code>TabStripSelectList</code>.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.TabStripSelectList with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.SelectList.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.SelectList with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.SelectList
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|SelectListMetadata, FNMetaImpl?: any): any;
		/**
		 * Initializes the control.
		 */
		init();
	}

	class Text extends sap.ui.core.Control {
		/**
		 * Constructor for a new Text.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.TextMetadata);
		/**
		 * Constructor for a new Text.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Determines per instance whether line height should be cached or not.
		 * 
		 * Default value is true.
		 */
		cacheLineHeight: boolean;
		/**
		 * Ellipsis(…) text to indicate more text when clampText function is used.
		 * 
		 * Can be overwritten with 3dots(...) if fonts do not support this UTF-8 character.
		 */
		ellipsis: string;
		/**
		 * Defines whether browser supports native line clamp or not
		 */
		hasNativeLineClamp: any;
		/**
		 * Default line height value as a number when line-height is normal.
		 * 
		 * This value is required during max-height calculation for the browsers that do not support line-clamping.
		 * It is better to define line-height in CSS instead of "normal" to get consistent maxLines results since normal line-height
		 * not only varies from browser to browser but they also vary from one font face to another and can also vary within a given face.
		 * 
		 * Default value is 1.2
		 */
		normalLineHeight: number;
		/**
		 * Binds property <code>text</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindProperty ManagedObject.bindProperty} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindText(oBindingInfo: any): Text;
		/**
		 * Decides whether the control can use native line clamp feature or not.
		 * 
		 * In RTL mode native line clamp feature is not supported.
		 * @return 
		 */
		canUseNativeLineClamp(): boolean;
		/**
		 * Sets the max-height to support maxLines property.
		 * @param oDomRef DOM reference of the text container.(optional)
		 * @return calculated max height value
		 */
		clampHeight(oDomRef?: any): number;
		/**
		 * Clamps the wrapping text according to max lines and returns the found ellipsis position.
		 * 
		 * Parameters can be used for better performance.
		 * @param oDomRef DOM reference of the text container.(optional)
		 * @param iStartPos Start point of the ellipsis search.(optional)
		 * @param iEndPos End point of the ellipsis search.(optional)
		 * @return Returns found ellipsis position or undefined
		 */
		clampText(oDomRef?: any, iStartPos?: number, iEndPos?: number): number|any;
		/**
		 * Creates a new subclass of class sap.m.Text with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|TextMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * 
		 */
		getAccessibilityInfo();
		/**
		 * This function (if available on the concrete control) provides
		 * the current accessibility state of the control.
		 * 
		 * Applications must not call this hook method directly, it is called by the framework.
		 * 
		 * Subclasses of Control should implement this hook to provide any necessary accessibility information:
		 * 
		 * <pre>
		 * MyControl.prototype.getAccessibilityInfo = function() {
		 *    return {
		 *      role: "textbox",      // String which represents the WAI-ARIA role which is implemented by the control.
		 *      type: "date input",   // String which represents the control type (Must be a translated text). Might correlate with
		 *                            // the role.
		 *      description: "value", // String which describes the most relevant control state (e.g. the inputs value). Must be a
		 *                            // translated text.
		 *                            // Note: The type and the enabled/editable state must not be handled here.
		 *      focusable: true,      // Boolean which describes whether the control can get the focus.
		 *      enabled: true,        // Boolean which describes whether the control is enabled. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      editable: true,       // Boolean which describes whether the control is editable. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      children: []          // Array of accessibility info objects of children of the given control (e.g. when the control is a layout).
		 *                            // Note: Children should only be provided when it is helpful to understand the accessibility context
		 *                            //       (e.g. a form control must not provide details of its internals (fields, labels, ...) but a
		 *                            //       layout should).
		 *    };
		 * };
		 * </pre>
		 * 
		 * Note: The returned object provides the accessibility state of the control at the point in time when this function is called.
		 * @note Overload from base type sap.ui.core.Control
		 * @return Current accessibility state of the control.
		 */
		getAccessibilityInfo(): any;
		/**
		 * Returns the max height according to max lines and line height calculation.
		 * 
		 * This is not calculated max-height!
		 * @param oDomRef DOM reference of the text container.(optional)
		 * @return 
		 */
		getClampHeight(oDomRef?: any): number;
		/**
		 * Caches and returns the computed line height of the text.
		 * @param oDomRef DOM reference of the text container.(optional)
		 * @return returns calculated line-height
		 */
		getLineHeight(oDomRef?: any): number;
		/**
		 * Gets current value of property <code>maxLines</code>.
		 * 
		 * Limits the number of lines for wrapping texts.
		 * 
		 * Note: The multi-line overflow indicator depends on the browser line clamping support. For such browsers, this will be shown as ellipsis, for the other browsers the overflow will just be hidden.
		 * @return Value of property <code>maxLines</code>
		 */
		getMaxLines(): number;
		/**
		 * Gets current value of property <code>text</code>.
		 * 
		 * Determines the text to be displayed.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>text</code>
		 */
		getText(): string;
		/**
		 * Gets current value of property <code>textAlign</code>.
		 * 
		 * Sets the horizontal alignment of the text.
		 * 
		 * Default value is <code>Begin</code>.
		 * @return Value of property <code>textAlign</code>
		 */
		getTextAlign(): sap.ui.core.TextAlign;
		/**
		 * Gets current value of property <code>textDirection</code>.
		 * 
		 * Available options for the text direction are LTR and RTL. By default the control inherits the text direction from its parent control.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @return Value of property <code>textDirection</code>
		 */
		getTextDirection(): sap.ui.core.TextDirection;
		/**
		 * Returns the text node container's DOM reference.
		 * 
		 * This can be different from getDomRef when inner wrapper is needed.
		 * @return 
		 */
		getTextDomRef(): any;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Sets the width of the Text control. By default, the Text control uses the full width available. Set this property to restrict the width to a custom value.
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>wrapping</code>.
		 * 
		 * Enables text wrapping.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>wrapping</code>
		 */
		getWrapping(): boolean;
		/**
		 * Determines whether max lines should be rendered or not.
		 * @return 
		 */
		hasMaxLines(): any;
		/**
		 * Sets a new value for property <code>maxLines</code>.
		 * 
		 * Limits the number of lines for wrapping texts.
		 * 
		 * Note: The multi-line overflow indicator depends on the browser line clamping support. For such browsers, this will be shown as ellipsis, for the other browsers the overflow will just be hidden.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param iMaxLines New value for property <code>maxLines</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMaxLines(iMaxLines: number): Text;
		/**
		 * To prevent from the layout thrashing of the textContent call, this method
		 * first tries to set the nodeValue of the first child if it exists.
		 * @param oDomRef DOM reference of the text node container.
		 * @param sNodeValue new Node value.(optional)
		 */
		setNodeValue(oDomRef: any, sNodeValue?: string);
		/**
		 * Sets a new value for property <code>text</code>.
		 * 
		 * Determines the text to be displayed.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sText New value for property <code>text</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setText(sText: string): Text;
		/**
		 * Sets a new value for property <code>textAlign</code>.
		 * 
		 * Sets the horizontal alignment of the text.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Begin</code>.
		 * @param sTextAlign New value for property <code>textAlign</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTextAlign(sTextAlign: sap.ui.core.TextAlign): Text;
		/**
		 * Sets a new value for property <code>textDirection</code>.
		 * 
		 * Available options for the text direction are LTR and RTL. By default the control inherits the text direction from its parent control.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @param sTextDirection New value for property <code>textDirection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTextDirection(sTextDirection: sap.ui.core.TextDirection): Text;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Sets the width of the Text control. By default, the Text control uses the full width available. Set this property to restrict the width to a custom value.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): Text;
		/**
		 * Sets a new value for property <code>wrapping</code>.
		 * 
		 * Enables text wrapping.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bWrapping New value for property <code>wrapping</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWrapping(bWrapping: boolean): Text;
		/**
		 * Unbinds property <code>text</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindText(): Text;
	}

	class TextArea extends InputBase {
		/**
		 * Constructor for a new TextArea.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.TextAreaMetadata);
		/**
		 * Constructor for a new TextArea.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>liveChange</code> event of this <code>sap.m.TextArea</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.TextArea</code> itself.
		 * 
		 * Is fired whenever the user has modified the text shown on the text area.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.TextArea</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachLiveChange(oData: any, fnFunction: any, oListener?: any): TextArea;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>liveChange</code> event of this <code>sap.m.TextArea</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachLiveChange(fnFunction: any, oListener: any): TextArea;
		/**
		 * Creates a new subclass of class sap.m.TextArea with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.InputBase.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|TextAreaMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.InputBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.InputBase
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|InputBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>liveChange</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>value</code> of type <code>string</code>The new <code>value</code> of the control.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireLiveChange(mArguments?: any): TextArea;
		/**
		 * Gets current value of property <code>cols</code>.
		 * 
		 * Defines the visible width of the control, in average character widths.
		 * <b>Note:</b> The <code>width</code> property wins over the <code>cols</code> property, if both are set.
		 * 
		 * Default value is <code>20</code>.
		 * @return Value of property <code>cols</code>
		 */
		getCols(): number;
		/**
		 * Gets current value of property <code>growing</code>.
		 * 
		 * Indicates the ability of the control to automatically grow and shrink dynamically with its content.
		 * <b>Note:</b> The <code>height</code> property is ignored, if this property set to <code>true</code>.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>growing</code>
		 */
		getGrowing(): boolean;
		/**
		 * Gets current value of property <code>growingMaxLines</code>.
		 * 
		 * Defines the maximum number of lines that the control can grow.
		 * 
		 * Default value is <code>0</code>.
		 * @return Value of property <code>growingMaxLines</code>
		 */
		getGrowingMaxLines(): number;
		/**
		 * Gets current value of property <code>height</code>.
		 * 
		 * Defines the height of the control.
		 * @return Value of property <code>height</code>
		 */
		getHeight(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>maxLength</code>.
		 * 
		 * Defines the maximum number of characters that the <code>value</code> can be.
		 * 
		 * Default value is <code>0</code>.
		 * @return Value of property <code>maxLength</code>
		 */
		getMaxLength(): number;
		/**
		 * Gets current value of property <code>rows</code>.
		 * 
		 * Defines the number of visible text lines for the control.
		 * <b>Note:</b> The <code>height</code> property wins over the <code>rows</code> property, if both are set.
		 * 
		 * Default value is <code>2</code>.
		 * @return Value of property <code>rows</code>
		 */
		getRows(): number;
		/**
		 * Getter for property <code>value</code>.
		 * Defines the value of the control's input field.
		 * 
		 * Default value is <code>undefined</code>
		 * @return the value of property <code>value</code>
		 */
		getValue(): string;
		/**
		 * Gets current value of property <code>valueLiveUpdate</code>.
		 * 
		 * Indicates when the <code>value</code> property gets updated with the user changes. Setting it to <code>true</code> updates the <code>value</code> property whenever the user has modified the text shown on the text area.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>valueLiveUpdate</code>
		 */
		getValueLiveUpdate(): boolean;
		/**
		 * Gets current value of property <code>wrapping</code>.
		 * 
		 * Indicates how the control wraps the text, e.g. <code>Soft</code>, <code>Hard</code>, <code>Off</code>.
		 * 
		 * Default value is <code>None</code>.
		 * @return Value of property <code>wrapping</code>
		 */
		getWrapping(): sap.ui.core.Wrapping;
		/**
		 * Sets a new value for property <code>cols</code>.
		 * 
		 * Defines the visible width of the control, in average character widths.
		 * <b>Note:</b> The <code>width</code> property wins over the <code>cols</code> property, if both are set.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>20</code>.
		 * @param iCols New value for property <code>cols</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setCols(iCols: number): TextArea;
		/**
		 * Sets a new value for property <code>growing</code>.
		 * 
		 * Indicates the ability of the control to automatically grow and shrink dynamically with its content.
		 * <b>Note:</b> The <code>height</code> property is ignored, if this property set to <code>true</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bGrowing New value for property <code>growing</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setGrowing(bGrowing: boolean): TextArea;
		/**
		 * Sets a new value for property <code>growingMaxLines</code>.
		 * 
		 * Defines the maximum number of lines that the control can grow.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>0</code>.
		 * @param iGrowingMaxLines New value for property <code>growingMaxLines</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setGrowingMaxLines(iGrowingMaxLines: number): TextArea;
		/**
		 * Sets a new value for property <code>height</code>.
		 * 
		 * Defines the height of the control.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sHeight New value for property <code>height</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHeight(sHeight: sap.ui.core.CSSSize): TextArea;
		/**
		 * Sets a new value for property <code>maxLength</code>.
		 * 
		 * Defines the maximum number of characters that the <code>value</code> can be.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>0</code>.
		 * @param iMaxLength New value for property <code>maxLength</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMaxLength(iMaxLength: number): TextArea;
		/**
		 * Sets a new value for property <code>rows</code>.
		 * 
		 * Defines the number of visible text lines for the control.
		 * <b>Note:</b> The <code>height</code> property wins over the <code>rows</code> property, if both are set.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>2</code>.
		 * @param iRows New value for property <code>rows</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setRows(iRows: number): TextArea;
		/**
		 * Sets a new value for property <code>valueLiveUpdate</code>.
		 * 
		 * Indicates when the <code>value</code> property gets updated with the user changes. Setting it to <code>true</code> updates the <code>value</code> property whenever the user has modified the text shown on the text area.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bValueLiveUpdate New value for property <code>valueLiveUpdate</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setValueLiveUpdate(bValueLiveUpdate: boolean): TextArea;
		/**
		 * Sets a new value for property <code>wrapping</code>.
		 * 
		 * Indicates how the control wraps the text, e.g. <code>Soft</code>, <code>Hard</code>, <code>Off</code>.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>None</code>.
		 * @param sWrapping New value for property <code>wrapping</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWrapping(sWrapping: sap.ui.core.Wrapping): TextArea;
	}

	class ThreeColumnLayoutType {
		/**
		 * Emphasized last column (endColumn) - column layout 25/25/50
		 */
		static EndColumnEmphasized: string;
		/**
		 * Emphasized middle column (midColumn) - column layout 25/50/25
		 */
		static MidColumnEmphasized: string;
	}

	class Tile extends sap.ui.core.Control {
		/**
		 * Constructor for a new Tile.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.TileMetadata);
		/**
		 * Constructor for a new Tile.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this <code>sap.m.Tile</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Tile</code> itself.
		 * 
		 * Tap event is raised if the user taps or clicks the control.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Tile</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachPress(oData: any, fnFunction: any, oListener?: any): Tile;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this <code>sap.m.Tile</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachPress(fnFunction: any, oListener: any): Tile;
		/**
		 * Creates a new subclass of class sap.m.Tile with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|TileMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>press</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		firePress(mArguments?: any): Tile;
		/**
		 * Gets current value of property <code>removable</code>.
		 * 
		 * Determines whether the tile is movable within the surrounding tile container. The remove event is fired by the tile container.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>removable</code>
		 */
		getRemovable(): boolean;
		/**
		 * Sets a new value for property <code>removable</code>.
		 * 
		 * Determines whether the tile is movable within the surrounding tile container. The remove event is fired by the tile container.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bRemovable New value for property <code>removable</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setRemovable(bRemovable: boolean): Tile;
	}

	class TileContainer extends sap.ui.core.Control {
		/**
		 * Constructor for a new TileContainer.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.TileContainerMetadata);
		/**
		 * Constructor for a new TileContainer.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds a Tile to the end of the tiles collection.
		 * @param oTile The tile to add
		 * @return this pointer for chaining
		 */
		addTile(oTile: Tile): TileContainer;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>tileAdd</code> event of this <code>sap.m.TileContainer</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.TileContainer</code> itself.
		 * 
		 * Fires when a Tile is added.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.TileContainer</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachTileAdd(oData: any, fnFunction: any, oListener?: any): TileContainer;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>tileDelete</code> event of this <code>sap.m.TileContainer</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.TileContainer</code> itself.
		 * 
		 * Fires if a Tile is deleted in Edit mode.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.TileContainer</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachTileDelete(oData: any, fnFunction: any, oListener?: any): TileContainer;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>tileMove</code> event of this <code>sap.m.TileContainer</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.TileContainer</code> itself.
		 * 
		 * Fires if a Tile is moved.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.TileContainer</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachTileMove(oData: any, fnFunction: any, oListener?: any): TileContainer;
		/**
		 * Deletes a Tile.
		 * @param oTile The tile to move
		 * @return this pointer for chaining
		 */
		deleteTile(oTile: Tile): TileContainer;
		/**
		 * Destroys all the tiles in the aggregation <code>tiles</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyTiles(): TileContainer;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>tileAdd</code> event of this <code>sap.m.TileContainer</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachTileAdd(fnFunction: any, oListener: any): TileContainer;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>tileDelete</code> event of this <code>sap.m.TileContainer</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachTileDelete(fnFunction: any, oListener: any): TileContainer;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>tileMove</code> event of this <code>sap.m.TileContainer</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachTileMove(fnFunction: any, oListener: any): TileContainer;
		/**
		 * Creates a new subclass of class sap.m.TileContainer with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|TileContainerMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>tileAdd</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireTileAdd(mArguments?: any): TileContainer;
		/**
		 * Fires event <code>tileDelete</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>tile</code> of type <code>sap.m.Tile</code>The deleted Tile.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireTileDelete(mArguments?: any): TileContainer;
		/**
		 * Fires event <code>tileMove</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>tile</code> of type <code>sap.m.Tile</code>The Tile that has been moved.</li>
		 * <li><code>newIndex</code> of type <code>int</code>The new index of the Tile in the tiles aggregation.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireTileMove(mArguments?: any): TileContainer;
		/**
		 * Gets current value of property <code>allowAdd</code>.
		 * 
		 * Determines whether the user is allowed to add Tiles in Edit mode (editable = true).
		 * @return Value of property <code>allowAdd</code>
		 */
		getAllowAdd(): boolean;
		/**
		 * Gets current value of property <code>editable</code>.
		 * 
		 * Determines whether the TileContainer is editable so you can move, delete or add tiles.
		 * @return Value of property <code>editable</code>
		 */
		getEditable(): boolean;
		/**
		 * Gets current value of property <code>height</code>.
		 * 
		 * Defines the height of the TileContainer in px.
		 * 
		 * Default value is <code>100%</code>.
		 * @return Value of property <code>height</code>
		 */
		getHeight(): sap.ui.core.CSSSize;
		/**
		 * Returns the index of the first Tile visible in the current page.
		 * @return The index of the first Tile that is visible in the current page
		 */
		getPageFirstTileIndex(): number;
		/**
		 * Gets content of aggregation <code>tiles</code>.
		 * 
		 * The Tiles to be displayed by the TileContainer.
		 * @return 
		 */
		getTiles(): Tile[];
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Defines the width of the TileContainer in px.
		 * 
		 * Default value is <code>100%</code>.
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Checks for the provided <code>sap.m.Tile</code> in the aggregation <code>tiles</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oTile The tile whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfTile(oTile: Tile): number;
		/**
		 * Inserts a Tile to the given index.
		 * @param oTile The Tile to insert
		 * @param iIndex The new Tile position in the tiles aggregation
		 * @return this pointer for chaining
		 */
		insertTile(oTile: Tile, iIndex: number): TileContainer;
		/**
		 * Moves a given Tile to the given index.
		 * @param vTile The tile to move
		 * @param iNewIndex The new Tile position in the tiles aggregation
		 * @return this pointer for chaining
		 */
		moveTile(vTile: Tile, iNewIndex: number): TileContainer;
		/**
		 * Removes all the controls from the aggregation <code>tiles</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllTiles(): Tile[];
		/**
		 * Removes a tile from the aggregation <code>tiles</code>.
		 * @param vTile The tile to remove or its index or id
		 * @return The removed tile or <code>null</code>
		 */
		removeTile(vTile: number|string|Tile): Tile;
		/**
		 * Scrolls to the page where the given Tile or tile index is included.
		 * Optionally this can be done animated or not. With IE9 the scroll is never animated.
		 * @param vTile The Tile or tile index to be scrolled into view
		 * @param bAnimated Whether the scroll should be animated
		 */
		scrollIntoView(vTile: Tile|number, bAnimated: boolean);
		/**
		 * Scrolls one page to the left.
		 */
		scrollLeft();
		/**
		 * Scrolls one page to the right.
		 */
		scrollRight();
		/**
		 * Sets a new value for property <code>allowAdd</code>.
		 * 
		 * Determines whether the user is allowed to add Tiles in Edit mode (editable = true).
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param bAllowAdd New value for property <code>allowAdd</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setAllowAdd(bAllowAdd: boolean): TileContainer;
		/**
		 * Sets the editable property to the TileContainer, allowing to move icons.
		 * This is currently also set with a long tap.
		 * @param bValue Whether the container is in edit mode or not
		 * @return this pointer for chaining
		 */
		setEditable(bValue: boolean): TileContainer;
		/**
		 * Sets a new value for property <code>height</code>.
		 * 
		 * Defines the height of the TileContainer in px.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>100%</code>.
		 * @param sHeight New value for property <code>height</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHeight(sHeight: sap.ui.core.CSSSize): TileContainer;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Defines the width of the TileContainer in px.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>100%</code>.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): TileContainer;
	}

	class TileContent extends sap.ui.core.Control {
		/**
		 * Constructor for a new sap.m.TileContent control.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.TileContentMetadata);
		/**
		 * Constructor for a new sap.m.TileContent control.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Destroys the content in the aggregation <code>content</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyContent(): TileContent;
		/**
		 * Creates a new subclass of class sap.m.TileContent with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|TileContentMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets content of aggregation <code>content</code>.
		 * 
		 * The switchable view that depends on the tile type.
		 * @return 
		 */
		getContent(): sap.ui.core.Control;
		/**
		 * Gets current value of property <code>disabled</code>.
		 * 
		 * Disables control if true.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>disabled</code>
		 */
		getDisabled(): boolean;
		/**
		 * Gets current value of property <code>footer</code>.
		 * 
		 * The footer text of the tile.
		 * @return Value of property <code>footer</code>
		 */
		getFooter(): string;
		/**
		 * Gets current value of property <code>frameType</code>.
		 * 
		 * The frame type: 1x1 or 2x1.
		 * 
		 * Default value is <code>Auto</code>.
		 * @return Value of property <code>frameType</code>
		 */
		getFrameType(): FrameType;
		/**
		 * Gets current value of property <code>unit</code>.
		 * 
		 * The percent sign, the currency symbol, or the unit of measure.
		 * @return Value of property <code>unit</code>
		 */
		getUnit(): string;
		/**
		 * Sets the aggregated <code>content</code>.
		 * @param oContent The content to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setContent(oContent: sap.ui.core.Control): TileContent;
		/**
		 * Sets a new value for property <code>disabled</code>.
		 * 
		 * Disables control if true.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bDisabled New value for property <code>disabled</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDisabled(bDisabled: boolean): TileContent;
		/**
		 * Sets a new value for property <code>footer</code>.
		 * 
		 * The footer text of the tile.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sFooter New value for property <code>footer</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setFooter(sFooter: string): TileContent;
		/**
		 * Sets a new value for property <code>frameType</code>.
		 * 
		 * The frame type: 1x1 or 2x1.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Auto</code>.
		 * @param sFrameType New value for property <code>frameType</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setFrameType(sFrameType: FrameType): TileContent;
		/**
		 * Setter for protected property to enable or disable footer rendering. This function does not invalidate the control.
		 * @param value is used to if the footer is rendered or not
		 * @return this to allow method chaining
		 */
		setRenderFooter(value: boolean): TileContent;
		/**
		 * Sets a new value for property <code>unit</code>.
		 * 
		 * The percent sign, the currency symbol, or the unit of measure.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sUnit New value for property <code>unit</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setUnit(sUnit: string): TileContent;
	}

	class TimePicker extends MaskInput {
		/**
		 * Constructor for a new TimePicker.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.TimePickerMetadata);
		/**
		 * Constructor for a new TimePicker.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.TimePicker with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.MaskInput.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|TimePickerMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.InputBase with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.InputBase
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|InputBaseMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.MaskInput with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.InputBase.extend}.
		 * @note Overload from base type sap.m.MaskInput
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|MaskInputMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires change event to attached listeners.
		 * 
		 * Expects following event parameters:
		 * <ul>
		 * <li>value parameter of type <code>string</code> - the new value of the input</li>
		 * <li>valid parameter of type <code>boolean</code> - indicator for a valid time</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return <code>this</code> to allow method chaining
		 */
		fireChange(mArguments?: any): TimePicker;
		/**
		 * Fires event <code>change</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>value</code> of type <code>string</code>The new <code>value</code> of the <code>control</code>.</li>
		 * </ul>
		 * @note Overload from base type sap.m.InputBase
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireChange(mArguments?: any): InputBase;
		/**
		 * Fires the change event for the listeners
		 * @param sValue value of the input.
		 * @param oParams extra event parameters.(optional)
		 */
		fireChangeEvent(sValue: string, oParams?: any);
		/**
		 * 
		 */
		getAccessibilityInfo();
		/**
		 * This function (if available on the concrete control) provides
		 * the current accessibility state of the control.
		 * 
		 * Applications must not call this hook method directly, it is called by the framework.
		 * 
		 * Subclasses of Control should implement this hook to provide any necessary accessibility information:
		 * 
		 * <pre>
		 * MyControl.prototype.getAccessibilityInfo = function() {
		 *    return {
		 *      role: "textbox",      // String which represents the WAI-ARIA role which is implemented by the control.
		 *      type: "date input",   // String which represents the control type (Must be a translated text). Might correlate with
		 *                            // the role.
		 *      description: "value", // String which describes the most relevant control state (e.g. the inputs value). Must be a
		 *                            // translated text.
		 *                            // Note: The type and the enabled/editable state must not be handled here.
		 *      focusable: true,      // Boolean which describes whether the control can get the focus.
		 *      enabled: true,        // Boolean which describes whether the control is enabled. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      editable: true,       // Boolean which describes whether the control is editable. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      children: []          // Array of accessibility info objects of children of the given control (e.g. when the control is a layout).
		 *                            // Note: Children should only be provided when it is helpful to understand the accessibility context
		 *                            //       (e.g. a form control must not provide details of its internals (fields, labels, ...) but a
		 *                            //       layout should).
		 *    };
		 * };
		 * </pre>
		 * 
		 * Note: The returned object provides the accessibility state of the control at the point in time when this function is called.
		 * @note Overload from base type sap.ui.core.Control
		 * @return Current accessibility state of the control.
		 */
		getAccessibilityInfo(): any;
		/**
		 * Gets current value of property <code>dateValue</code>.
		 * 
		 * Holds a reference to a JavaScript Date Object. The <code>value</code> (string)
		 * property will be set according to it. Alternatively, if the <code>value</code>
		 * and <code>valueFormat</code> pair properties are supplied instead,
		 * the <code>dateValue</code> will be instantiated аccording to the parsed
		 * <code>value</code>.
		 * @return Value of property <code>dateValue</code>
		 */
		getDateValue(): any;
		/**
		 * Gets current value of property <code>displayFormat</code>.
		 * 
		 * Determines the format, displayed in the input field and the picker sliders.
		 * 
		 * The default value is the browser's medium time format locale setting
		 * {@link sap.ui.core.LocaleData#getTimePattern}.
		 * If data binding with type {@link sap.ui.model.type.Time} is used for the
		 * <code>value</code> property, the <code>displayFormat</code> property
		 * is ignored as the information is provided from the binding itself.
		 * @return Value of property <code>displayFormat</code>
		 */
		getDisplayFormat(): string;
		/**
		 * Gets current value of property <code>localeId</code>.
		 * 
		 * Defines the locale used to parse string values representing time.
		 * 
		 * Determines the locale, used to interpret the string, supplied by the
		 * <code>value</code> property.
		 * Example: AM in the string "09:04 AM" is locale (language) dependent.
		 * The format comes from the browser language settings if not set explicitly.
		 * Used in combination with 12 hour <code>valueFormat</code> containing 'a', which
		 * stands for day period string.
		 * Default value is taken from browser's locale setting.
		 * @return Value of property <code>localeId</code>
		 */
		getLocaleId(): string;
		/**
		 * Gets current value of property <code>minutesStep</code>.
		 * 
		 * Sets the minutes slider step.
		 * The minutes slider is populated only by multiples of the step.
		 * 
		 * Default value is <code>1</code>.
		 * @return Value of property <code>minutesStep</code>
		 */
		getMinutesStep(): number;
		/**
		 * Gets current value of property <code>secondsStep</code>.
		 * 
		 * Sets the seconds slider step.
		 * The seconds slider is populated only by multiples of the step.
		 * 
		 * Default value is <code>1</code>.
		 * @return Value of property <code>secondsStep</code>
		 */
		getSecondsStep(): number;
		/**
		 * Gets current value of property <code>title</code>.
		 * 
		 * Displays the text of the general picker label and is read by screen readers.
		 * It is visible only on phone.
		 * @return Value of property <code>title</code>
		 */
		getTitle(): string;
		/**
		 * Gets current value of property <code>valueFormat</code>.
		 * 
		 * Determines the format of the value property.
		 * 
		 * The default value is the browser's medium time format locale setting
		 * {@link sap.ui.core.LocaleData#getTimePattern}.
		 * If data binding with type {@link sap.ui.model.type.Time} is used for the
		 * <code>value</code> property, the <code>valueFormat</code> property
		 * is ignored as the information is provided from the binding itself.
		 * @return Value of property <code>valueFormat</code>
		 */
		getValueFormat(): string;
		/**
		 * Initializes the control.
		 */
		init();
		/**
		 * Called after the picker closes.
		 */
		onAfterClose();
		/**
		 * Called after the picker appears.
		 */
		onAfterOpen();
		/**
		 * Called before the picker appears.
		 */
		onBeforeOpen();
		/**
		 * Sets the <code>dateValue</code> JavaScript date object.
		 * 
		 * Recommended usage is when <code>value</code> is not set, as they are mutually exclusive.
		 * @param oDate New date object
		 * @return this instance, used for chaining
		 */
		setDateValue(oDate: any): TimePicker|any;
		/**
		 * Sets the <code>displayFormat</code>.
		 * @param sDisplayFormat The format of the string inside the input
		 * @return this instance, used for chaining
		 */
		setDisplayFormat(sDisplayFormat: string): TimePicker;
		/**
		 * Sets the locale of the control.
		 * 
		 * Used for parsing and formatting the time values in languages different than English.
		 * Necessary for translation and auto-complete of the day periods, such as AM and PM.
		 * @param sLocaleId A locale identifier like 'en_US'
		 * @return this instance, used for chaining
		 */
		setLocaleId(sLocaleId: string): TimePicker;
		/**
		 * Sets the minutes slider step.
		 * @param iStep The step used to generate values for the minutes slider
		 * @return this
		 */
		setMinutesStep(iStep: any): any;
		/**
		 * Sets the seconds slider step.
		 * @param iStep The step used to generate values for the seconds slider
		 * @return this
		 */
		setSecondsStep(iStep: any): any;
		/**
		 * Sets the <code>valueFormat</code> property.
		 * @param sValueFormat The format of strings that are set as value to the control
		 * @return this instance, used for chaining
		 */
		setValueFormat(sValueFormat: string): TimePicker;
	}

	class Title extends sap.ui.core.Control {
		/**
		 * Constructor for a new Title control.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId Id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.TitleMetadata);
		/**
		 * Constructor for a new Title control.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId Id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.Title with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|TitleMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * 
		 */
		getAccessibilityInfo();
		/**
		 * This function (if available on the concrete control) provides
		 * the current accessibility state of the control.
		 * 
		 * Applications must not call this hook method directly, it is called by the framework.
		 * 
		 * Subclasses of Control should implement this hook to provide any necessary accessibility information:
		 * 
		 * <pre>
		 * MyControl.prototype.getAccessibilityInfo = function() {
		 *    return {
		 *      role: "textbox",      // String which represents the WAI-ARIA role which is implemented by the control.
		 *      type: "date input",   // String which represents the control type (Must be a translated text). Might correlate with
		 *                            // the role.
		 *      description: "value", // String which describes the most relevant control state (e.g. the inputs value). Must be a
		 *                            // translated text.
		 *                            // Note: The type and the enabled/editable state must not be handled here.
		 *      focusable: true,      // Boolean which describes whether the control can get the focus.
		 *      enabled: true,        // Boolean which describes whether the control is enabled. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      editable: true,       // Boolean which describes whether the control is editable. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      children: []          // Array of accessibility info objects of children of the given control (e.g. when the control is a layout).
		 *                            // Note: Children should only be provided when it is helpful to understand the accessibility context
		 *                            //       (e.g. a form control must not provide details of its internals (fields, labels, ...) but a
		 *                            //       layout should).
		 *    };
		 * };
		 * </pre>
		 * 
		 * Note: The returned object provides the accessibility state of the control at the point in time when this function is called.
		 * @note Overload from base type sap.ui.core.Control
		 * @return Current accessibility state of the control.
		 */
		getAccessibilityInfo(): any;
		/**
		 * Gets current value of property <code>level</code>.
		 * 
		 * Defines the semantic level of the title.
		 * This information is e.g. used by assistive technologies like screenreaders to create a hierarchical site map for faster navigation.
		 * Depending on this setting either a HTML h1-h6 element is used or when using level <code>Auto</code> no explicit level information is written (HTML5 header element).
		 * 
		 * Default value is <code>Auto</code>.
		 * @return Value of property <code>level</code>
		 */
		getLevel(): sap.ui.core.TitleLevel;
		/**
		 * Gets current value of property <code>text</code>.
		 * 
		 * Defines the text which should be displayed as a title.
		 * @return Value of property <code>text</code>
		 */
		getText(): string;
		/**
		 * Gets current value of property <code>textAlign</code>.
		 * 
		 * Defines the alignment of the text within the title. <b>Note:</b> This property only has an effect if the overall width of the title control is
		 * larger than the displayed text.
		 * 
		 * Default value is <code>Initial</code>.
		 * @return Value of property <code>textAlign</code>
		 */
		getTextAlign(): sap.ui.core.TextAlign;
		/**
		 * ID of the element which is the current target of the association <code>title</code>, or <code>null</code>.
		 * @return 
		 */
		getTitle(): sap.ui.core.ID;
		/**
		 * Gets current value of property <code>titleStyle</code>.
		 * 
		 * Defines the style of the title.
		 * When using the <code>Auto</code> styling, the appearance of the title depends on the current position of the title and the defined level.
		 * This automatism can be overridden by setting a different style explicitly.
		 * The actual appearance of the title and the different styles always depends on the theme being used.
		 * 
		 * Default value is <code>Auto</code>.
		 * @return Value of property <code>titleStyle</code>
		 */
		getTitleStyle(): sap.ui.core.TitleLevel;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Defines the width of the title.
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Sets a new value for property <code>level</code>.
		 * 
		 * Defines the semantic level of the title.
		 * This information is e.g. used by assistive technologies like screenreaders to create a hierarchical site map for faster navigation.
		 * Depending on this setting either a HTML h1-h6 element is used or when using level <code>Auto</code> no explicit level information is written (HTML5 header element).
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Auto</code>.
		 * @param sLevel New value for property <code>level</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setLevel(sLevel: sap.ui.core.TitleLevel): Title;
		/**
		 * Sets a new value for property <code>text</code>.
		 * 
		 * Defines the text which should be displayed as a title.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sText New value for property <code>text</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setText(sText: string): Title;
		/**
		 * Sets a new value for property <code>textAlign</code>.
		 * 
		 * Defines the alignment of the text within the title. <b>Note:</b> This property only has an effect if the overall width of the title control is
		 * larger than the displayed text.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Initial</code>.
		 * @param sTextAlign New value for property <code>textAlign</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTextAlign(sTextAlign: sap.ui.core.TextAlign): Title;
		/**
		 * Sets the associated <code>title</code>.
		 * @param oTitle ID of an element which becomes the new target of this title association; alternatively, an element instance may be given
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTitle(oTitle: sap.ui.core.ID|sap.ui.core.Title): Title;
		/**
		 * Sets a new value for property <code>titleStyle</code>.
		 * 
		 * Defines the style of the title.
		 * When using the <code>Auto</code> styling, the appearance of the title depends on the current position of the title and the defined level.
		 * This automatism can be overridden by setting a different style explicitly.
		 * The actual appearance of the title and the different styles always depends on the theme being used.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Auto</code>.
		 * @param sTitleStyle New value for property <code>titleStyle</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTitleStyle(sTitleStyle: sap.ui.core.TitleLevel): Title;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Defines the width of the title.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): Title;
	}

	class ToggleButton extends Button {
		/**
		 * Constructor for a new ToggleButton.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.ToggleButtonMetadata);
		/**
		 * Constructor for a new ToggleButton.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.ToggleButton with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.Button.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ToggleButtonMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.Button with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.Button
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ButtonMetadata, FNMetaImpl?: any): any;
		/**
		 * 
		 */
		getAccessibilityInfo();
		/**
		 * This function (if available on the concrete control) provides
		 * the current accessibility state of the control.
		 * 
		 * Applications must not call this hook method directly, it is called by the framework.
		 * 
		 * Subclasses of Control should implement this hook to provide any necessary accessibility information:
		 * 
		 * <pre>
		 * MyControl.prototype.getAccessibilityInfo = function() {
		 *    return {
		 *      role: "textbox",      // String which represents the WAI-ARIA role which is implemented by the control.
		 *      type: "date input",   // String which represents the control type (Must be a translated text). Might correlate with
		 *                            // the role.
		 *      description: "value", // String which describes the most relevant control state (e.g. the inputs value). Must be a
		 *                            // translated text.
		 *                            // Note: The type and the enabled/editable state must not be handled here.
		 *      focusable: true,      // Boolean which describes whether the control can get the focus.
		 *      enabled: true,        // Boolean which describes whether the control is enabled. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      editable: true,       // Boolean which describes whether the control is editable. If not relevant it must not be set or
		 *                            // <code>null</code> can be provided.
		 *      children: []          // Array of accessibility info objects of children of the given control (e.g. when the control is a layout).
		 *                            // Note: Children should only be provided when it is helpful to understand the accessibility context
		 *                            //       (e.g. a form control must not provide details of its internals (fields, labels, ...) but a
		 *                            //       layout should).
		 *    };
		 * };
		 * </pre>
		 * 
		 * Note: The returned object provides the accessibility state of the control at the point in time when this function is called.
		 * @note Overload from base type sap.ui.core.Control
		 * @return Current accessibility state of the control.
		 */
		getAccessibilityInfo(): any;
		/**
		 * Gets current value of property <code>pressed</code>.
		 * 
		 * The property is “true” when the control is toggled. The default state of this property is "false".
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>pressed</code>
		 */
		getPressed(): boolean;
		/**
		 * Sets a new value for property <code>pressed</code>.
		 * 
		 * The property is “true” when the control is toggled. The default state of this property is "false".
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bPressed New value for property <code>pressed</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setPressed(bPressed: boolean): ToggleButton;
	}

	class Token extends sap.ui.core.Control {
		/**
		 * Constructor for a new Token.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given.(optional)
		 * @param mSettings Initial settings for the new control.(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.TokenMetadata);
		/**
		 * Constructor for a new Token.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given.(optional)
		 * @param mSettings Initial settings for the new control.(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID|sap.ui.core.Control): Token;
		/**
		 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): Token;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>delete</code> event of this <code>sap.m.Token</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Token</code> itself.
		 * 
		 * This event is fired if the user clicks the token's delete icon.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Token</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachDelete(oData: any, fnFunction: any, oListener?: any): Token;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this <code>sap.m.Token</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Token</code> itself.
		 * 
		 * This event is fired when the user clicks on the token.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Token</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachPress(oData: any, fnFunction: any, oListener?: any): Token;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>select</code> event of this <code>sap.m.Token</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Token</code> itself.
		 * 
		 * This event is fired when the token gets selected.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Token</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachSelect(oData: any, fnFunction: any, oListener?: any): Token;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>delete</code> event of this <code>sap.m.Token</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachDelete(fnFunction: any, oListener: any): Token;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this <code>sap.m.Token</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachPress(fnFunction: any, oListener: any): Token;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>select</code> event of this <code>sap.m.Token</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachSelect(fnFunction: any, oListener: any): Token;
		/**
		 * Creates a new subclass of class sap.m.Token with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|TokenMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>delete</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireDelete(mArguments?: any): Token;
		/**
		 * Fires event <code>press</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		firePress(mArguments?: any): Token;
		/**
		 * Fires event <code>select</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireSelect(mArguments?: any): Token;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaDescribedBy</code>.
		 * @return 
		 */
		getAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
		 * @return 
		 */
		getAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Gets current value of property <code>editable</code>.
		 * 
		 * Indicates the editable status of the token. If it is set to <code>true</code>, token displays a delete icon.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>editable</code>
		 */
		getEditable(): boolean;
		/**
		 * Gets current value of property <code>key</code>.
		 * 
		 * Key of the token.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>key</code>
		 */
		getKey(): string;
		/**
		 * Gets current value of property <code>selected</code>.
		 * 
		 * Indicates the current selection status of the token.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>selected</code>
		 */
		getSelected(): boolean;
		/**
		 * Gets current value of property <code>text</code>.
		 * 
		 * Displayed text of the token.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>text</code>
		 */
		getText(): string;
		/**
		 * Gets current value of property <code>textDirection</code>.
		 * 
		 * This property specifies the text directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @return Value of property <code>textDirection</code>
		 */
		getTextDirection(): sap.ui.core.TextDirection;
		/**
		 * Removes all the controls in the association named <code>ariaDescribedBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
		 * @return The removed ariaDescribedBy or <code>null</code>
		 */
		removeAriaDescribedBy(vAriaDescribedBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
		 * @return The removed ariaLabelledBy or <code>null</code>
		 */
		removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Sets a new value for property <code>editable</code>.
		 * 
		 * Indicates the editable status of the token. If it is set to <code>true</code>, token displays a delete icon.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bEditable New value for property <code>editable</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setEditable(bEditable: boolean): Token;
		/**
		 * Sets a new value for property <code>key</code>.
		 * 
		 * Key of the token.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sKey New value for property <code>key</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setKey(sKey: string): Token;
		/**
		 * Sets a new value for property <code>text</code>.
		 * 
		 * Displayed text of the token.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sText New value for property <code>text</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setText(sText: string): Token;
		/**
		 * Sets a new value for property <code>textDirection</code>.
		 * 
		 * This property specifies the text directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Inherit</code>.
		 * @param sTextDirection New value for property <code>textDirection</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTextDirection(sTextDirection: sap.ui.core.TextDirection): Token;
	}

	class Tokenizer extends sap.ui.core.Control {
		/**
		 * Constructor for a new Tokenizer.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.TokenizerMetadata);
		/**
		 * Constructor for a new Tokenizer.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID|sap.ui.core.Control): Tokenizer;
		/**
		 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): Tokenizer;
		/**
		 * Adds some token to the aggregation <code>tokens</code>.
		 * @param oToken the token to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addToken(oToken: Token): Tokenizer;
		/**
		 * Function validates the given text and adds a new token if validation was successful
		 * @param oParameters parameter bag containing following fields: {sap.m.String} text - the source text {sap.m.Token}
		 *          [optional] token - a suggested token {object} [optional] suggestionObject - any object used to find the
		 *          suggested token {function} [optional] validationCallback - callback which gets called after validation has
		 *          finished
		 */
		addValidateToken(oParameters: any);
		/**
		 * Function adds an validation callback called before any new token gets added to the tokens aggregation
		 * @param fValidator 
		 */
		addValidator(fValidator: any);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>tokenChange</code> event of this <code>sap.m.Tokenizer</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Tokenizer</code> itself.
		 * 
		 * fired when the tokens aggregation changed (add / remove token)
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Tokenizer</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachTokenChange(oData: any, fnFunction: any, oListener?: any): Tokenizer;
		/**
		 * Destroys all the tokens in the aggregation <code>tokens</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyTokens(): Tokenizer;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>tokenChange</code> event of this <code>sap.m.Tokenizer</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachTokenChange(fnFunction: any, oListener: any): Tokenizer;
		/**
		 * Creates a new subclass of class sap.m.Tokenizer with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|TokenizerMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>tokenChange</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>type</code> of type <code>string</code>type of tokenChange event.
		 * There are four TokenChange types: "added", "removed", "removedAll", "tokensChanged".
		 * Use Tokenizer.TokenChangeType.Added for "added",	Tokenizer.TokenChangeType.Removed for "removed", Tokenizer.TokenChangeType.RemovedAll for "removedAll" and Tokenizer.TokenChangeType.TokensChanged for "tokensChanged".</li>
		 * <li><code>token</code> of type <code>sap.m.Token</code>the added token or removed token.
		 * This parameter is used when tokenChange type is "added" or "removed".</li>
		 * <li><code>tokens</code> of type <code>sap.m.Token[]</code>the array of removed tokens.
		 * This parameter is used when tokenChange type is "removedAll".</li>
		 * <li><code>addedTokens</code> of type <code>sap.m.Token[]</code>the array of tokens that are added.
		 * This parameter is used when tokenChange type is "tokenChanged".</li>
		 * <li><code>removedTokens</code> of type <code>sap.m.Token[]</code>the array of tokens that are removed.
		 * This parameter is used when tokenChange type is "tokenChanged".</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireTokenChange(mArguments?: any): Tokenizer;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaDescribedBy</code>.
		 * @return 
		 */
		getAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
		 * @return 
		 */
		getAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Gets current value of property <code>editable</code>.
		 * 
		 * true if tokens shall be editable otherwise false
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>editable</code>
		 */
		getEditable(): boolean;
		/**
		 * Function returns the internally used scroll delegate
		 * @return 
		 */
		getScrollDelegate(): sap.ui.core.delegate.ScrollEnablement;
		/**
		 * Function returns the tokens' width
		 * @return the complete tokens' width
		 */
		getScrollWidth();
		/**
		 * Function returns all currently selected tokens
		 * @return - array of selected tokens or empty array
		 */
		getSelectedTokens(): Token[];
		/**
		 * Gets content of aggregation <code>tokens</code>.
		 * 
		 * the currently displayed tokens
		 * @return 
		 */
		getTokens(): Token[];
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Defines the width of the Tokenizer.
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Checks for the provided <code>sap.m.Token</code> in the aggregation <code>tokens</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oToken The token whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfToken(oToken: Token): number;
		/**
		 * Inserts a token into the aggregation <code>tokens</code>.
		 * @param oToken the token to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the token should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the token is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the token is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertToken(oToken: Token, iIndex: number): Tokenizer;
		/**
		 * Removes all the controls in the association named <code>ariaDescribedBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaDescribedBy(): sap.ui.core.ID[];
		/**
		 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Removes all the controls from the aggregation <code>tokens</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllTokens(): Token[];
		/**
		 * Function removes all validation callbacks
		 */
		removeAllValidators();
		/**
		 * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
		 * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
		 * @return The removed ariaDescribedBy or <code>null</code>
		 */
		removeAriaDescribedBy(vAriaDescribedBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
		 * @return The removed ariaLabelledBy or <code>null</code>
		 */
		removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Function removes all selected tokens
		 * @return - this for chaining
		 */
		removeSelectedTokens(): Tokenizer;
		/**
		 * Removes a token from the aggregation <code>tokens</code>.
		 * @param vToken The token to remove or its index or id
		 * @return The removed token or <code>null</code>
		 */
		removeToken(vToken: number|string|Token): Token;
		/**
		 * Function removes an validation callback
		 * @param fValidator 
		 */
		removeValidator(fValidator: any);
		/**
		 * Function scrolls the tokens to the end
		 * @param bInitialize indicates if we should reset the 'scroll-to-end-pending' flag; if true we would reset this flag
		 */
		scrollToEnd(bInitialize: boolean);
		/**
		 * Function scrolls the tokens to the start
		 */
		scrollToStart();
		/**
		 * Function selects all tokens
		 * @param optional bSelect - true for selecting, false for deselecting(optional)
		 * @return - this for chaining
		 */
		selectAllTokens(optional?: boolean): Tokenizer;
		/**
		 * Sets a new value for property <code>editable</code>.
		 * 
		 * true if tokens shall be editable otherwise false
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bEditable New value for property <code>editable</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setEditable(bEditable: boolean): Tokenizer;
		/**
		 * Function sets the tokenizer's width in pixels
		 * @param nWidth the new width in pixels
		 */
		setPixelWidth(nWidth: number);
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Defines the width of the Tokenizer.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): Tokenizer;
	}

	class Toolbar extends sap.ui.core.Control {
		/**
		 * Constructor for a new Toolbar.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.ToolbarMetadata);
		/**
		 * Constructor for a new Toolbar.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no id is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Sets classes and tag according to the context in the page. Possible contexts are header, footer, subheader
		 */
		applyTagAndContextClassFor: any;
		/**
		 * Gets the HTML tag of the root domref
		 */
		getHTMLTag: any;
		/**
		 * Returns if the bar is sensitive to the container context. Implementation of the IBar interface
		 */
		isContextSensitive: any;
		/**
		 * Sets the HTML tag of the root domref
		 */
		setHTMLTag: any;
		/**
		 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): Toolbar;
		/**
		 * Adds some content to the aggregation <code>content</code>.
		 * @param oContent the content to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addContent(oContent: sap.ui.core.Control): Toolbar;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this <code>sap.m.Toolbar</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Toolbar</code> itself.
		 * 
		 * Fired when the user clicks on the toolbar, if the Active property is set to "true".
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Toolbar</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachPress(oData: any, fnFunction: any, oListener?: any): Toolbar;
		/**
		 * Destroys all the content in the aggregation <code>content</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyContent(): Toolbar;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this <code>sap.m.Toolbar</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachPress(fnFunction: any, oListener: any): Toolbar;
		/**
		 * Creates a new subclass of class sap.m.Toolbar with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ToolbarMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>press</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>srcControl</code> of type <code>sap.ui.core.Control</code>The toolbar item that was pressed</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		firePress(mArguments?: any): Toolbar;
		/**
		 * Gets current value of property <code>active</code>.
		 * 
		 * Indicates that the whole toolbar is clickable. The Press event is fired only if Active is set to true.
		 * Note: This property should be used when there are no interactive controls inside the toolbar and the toolbar itself is meant to be interactive.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>active</code>
		 */
		getActive(): boolean;
		/**
		 * Returns the currently applied design property of the Toolbar.
		 * @return 
		 */
		getActiveDesign(): ToolbarDesign;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
		 * @return 
		 */
		getAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Gets content of aggregation <code>content</code>.
		 * 
		 * The content of the toolbar.
		 * @return 
		 */
		getContent(): sap.ui.core.Control[];
		/**
		 * Gets current value of property <code>design</code>.
		 * 
		 * Defines the toolbar design.
		 * Note: Design settings are theme-dependent. They also determine the default height of the toolbar.
		 * 
		 * Default value is <code>Auto</code>.
		 * @return Value of property <code>design</code>
		 */
		getDesign(): ToolbarDesign;
		/**
		 * Gets current value of property <code>enabled</code>.
		 * 
		 * Sets the enabled property of all controls defined in the content aggregation.
		 * Note: This property does not apply to the toolbar itself, but rather to its items.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>enabled</code>
		 */
		getEnabled(): boolean;
		/**
		 * Gets current value of property <code>height</code>.
		 * 
		 * Defines the height of the control.
		 * Note: By default, the Height property depends on the used theme and the Design property.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>height</code>
		 */
		getHeight(): sap.ui.core.CSSSize;
		/**
		 * Returns the first sap.m.Title control id inside the toolbar for the accessibility
		 * @return 
		 */
		getTitleId(): string;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Defines the width of the control.
		 * By default, Toolbar is a block element. If the the width is not explicitly set, the control will assume its natural size.
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oContent The content whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfContent(oContent: sap.ui.core.Control): number;
		/**
		 * Inserts a content into the aggregation <code>content</code>.
		 * @param oContent the content to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the content should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the content is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertContent(oContent: sap.ui.core.Control, iIndex: number): Toolbar;
		/**
		 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAriaLabelledBy(): sap.ui.core.ID[];
		/**
		 * Removes all the controls from the aggregation <code>content</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllContent(): sap.ui.core.Control[];
		/**
		 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
		 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
		 * @return The removed ariaLabelledBy or <code>null</code>
		 */
		removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
		/**
		 * Removes a content from the aggregation <code>content</code>.
		 * @param vContent The content to remove or its index or id
		 * @return The removed content or <code>null</code>
		 */
		removeContent(vContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
		/**
		 * Sets a new value for property <code>active</code>.
		 * 
		 * Indicates that the whole toolbar is clickable. The Press event is fired only if Active is set to true.
		 * Note: This property should be used when there are no interactive controls inside the toolbar and the toolbar itself is meant to be interactive.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bActive New value for property <code>active</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setActive(bActive: boolean): Toolbar;
		/**
		 * Sets a new value for property <code>design</code>.
		 * 
		 * Defines the toolbar design.
		 * Note: Design settings are theme-dependent. They also determine the default height of the toolbar.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>Auto</code>.
		 * @param sDesign New value for property <code>design</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDesign(sDesign: ToolbarDesign): Toolbar;
		/**
		 * Sets a new value for property <code>enabled</code>.
		 * 
		 * Sets the enabled property of all controls defined in the content aggregation.
		 * Note: This property does not apply to the toolbar itself, but rather to its items.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bEnabled New value for property <code>enabled</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setEnabled(bEnabled: boolean): Toolbar;
		/**
		 * Sets a new value for property <code>height</code>.
		 * 
		 * Defines the height of the control.
		 * Note: By default, the Height property depends on the used theme and the Design property.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sHeight New value for property <code>height</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHeight(sHeight: sap.ui.core.CSSSize): Toolbar;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Defines the width of the control.
		 * By default, Toolbar is a block element. If the the width is not explicitly set, the control will assume its natural size.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): Toolbar;
	}

	class ToolbarDesign {
		/**
		 * The toolbar can be inserted into other controls and if the design is "Auto" then it inherits the design from parent control.
		 */
		static Auto: string;
		/**
		 * The toolbar appears smaller than the regular size to show information(e.g: text, icon).
		 */
		static Info: string;
		/**
		 * The toolbar has a solid background. Its content will be rendered in a standard way.
		 */
		static Solid: string;
		/**
		 * The toolbar and its content will be displayed transparent.
		 */
		static Transparent: string;
	}

	class ToolbarLayoutData extends sap.ui.core.LayoutData {
		/**
		 * Constructor for a new ToolbarLayoutData.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.ToolbarLayoutDataMetadata);
		/**
		 * Constructor for a new ToolbarLayoutData.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.ToolbarLayoutData with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ToolbarLayoutDataMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>maxWidth</code>.
		 * 
		 * Sets the maximum width of the toolbar item.
		 * @return Value of property <code>maxWidth</code>
		 */
		getMaxWidth(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>minWidth</code>.
		 * 
		 * Sets the minimum width of the toolbar item.
		 * @return Value of property <code>minWidth</code>
		 */
		getMinWidth(): sap.ui.core.CSSSize;
		/**
		 * Gets current value of property <code>shrinkable</code>.
		 * 
		 * Determines whether the control, when in a toolbar, is shrinkable or not. For controls with fixed width (100px, 5rem, etc...) this property is ignored.
		 * 
		 * Note: Nested layout controls should not be shrinkable.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>shrinkable</code>
		 */
		getShrinkable(): boolean;
		/**
		 * Sets a new value for property <code>maxWidth</code>.
		 * 
		 * Sets the maximum width of the toolbar item.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sMaxWidth New value for property <code>maxWidth</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMaxWidth(sMaxWidth: sap.ui.core.CSSSize): ToolbarLayoutData;
		/**
		 * Sets a new value for property <code>minWidth</code>.
		 * 
		 * Sets the minimum width of the toolbar item.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sMinWidth New value for property <code>minWidth</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMinWidth(sMinWidth: sap.ui.core.CSSSize): ToolbarLayoutData;
		/**
		 * Sets a new value for property <code>shrinkable</code>.
		 * 
		 * Determines whether the control, when in a toolbar, is shrinkable or not. For controls with fixed width (100px, 5rem, etc...) this property is ignored.
		 * 
		 * Note: Nested layout controls should not be shrinkable.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bShrinkable New value for property <code>shrinkable</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShrinkable(bShrinkable: boolean): ToolbarLayoutData;
	}

	class ToolbarSeparator extends sap.ui.core.Control {
		/**
		 * Constructor for a new ToolbarSeparator.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Constructor for a new ToolbarSeparator.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.ToolbarSeparator with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
	}

	class ToolbarSpacer extends sap.ui.core.Control {
		/**
		 * Constructor for a new ToolbarSpacer.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.ToolbarSpacerMetadata);
		/**
		 * Constructor for a new ToolbarSpacer.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Flexible Spacer Class Name
		 */
		flexClass: any;
		/**
		 * Creates a new subclass of class sap.m.ToolbarSpacer with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ToolbarSpacerMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Defines the width of the horizontal space.
		 * Note: Empty("") value makes the space flexible which means it covers the remaining space between toolbar items.
		 * This feature can be used to push next item to the edge of the toolbar.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Defines the width of the horizontal space.
		 * Note: Empty("") value makes the space flexible which means it covers the remaining space between toolbar items.
		 * This feature can be used to push next item to the edge of the toolbar.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): ToolbarSpacer;
	}

	class UploadCollection extends sap.ui.core.Control {
		/**
		 * Constructor for a new UploadCollection.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.UploadCollectionMetadata);
		/**
		 * Constructor for a new UploadCollection.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some headerParameter to the aggregation <code>headerParameters</code>.
		 * @param oHeaderParameter the headerParameter to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addHeaderParameter(oHeaderParameter: UploadCollectionParameter): UploadCollection;
		/**
		 * Adds some item to the aggregation <code>items</code>.
		 * @param oItem the item to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addItem(oItem: UploadCollectionItem): UploadCollection;
		/**
		 * Adds some parameter to the aggregation <code>parameters</code>.
		 * @param oParameter the parameter to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addParameter(oParameter: UploadCollectionParameter): UploadCollection;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>beforeUploadStarts</code> event of this <code>sap.m.UploadCollection</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.UploadCollection</code> itself.
		 * 
		 * The event is triggered before the actual upload starts. An event is fired per file. All the necessary header parameters should be set here.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachBeforeUploadStarts(oData: any, fnFunction: any, oListener?: any): UploadCollection;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>change</code> event of this <code>sap.m.UploadCollection</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.UploadCollection</code> itself.
		 * 
		 * The event is triggered when files are selected in the FileUploader dialog. Applications can set parameters and headerParameters which will be dispatched to the embedded FileUploader control.
		 * Limitation: parameters and headerParameters are not supported by Internet Explorer 9.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachChange(oData: any, fnFunction: any, oListener?: any): UploadCollection;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>fileDeleted</code> event of this <code>sap.m.UploadCollection</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.UploadCollection</code> itself.
		 * 
		 * The event is triggered when an uploaded attachment is selected and the Delete button is pressed.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachFileDeleted(oData: any, fnFunction: any, oListener?: any): UploadCollection;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>filenameLengthExceed</code> event of this <code>sap.m.UploadCollection</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.UploadCollection</code> itself.
		 * 
		 * The event is triggered when the name of a chosen file is longer than the value specified with the maximumFilenameLength property (only if provided by the application).
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachFilenameLengthExceed(oData: any, fnFunction: any, oListener?: any): UploadCollection;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>fileRenamed</code> event of this <code>sap.m.UploadCollection</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.UploadCollection</code> itself.
		 * 
		 * The event is triggered when the file name is changed.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachFileRenamed(oData: any, fnFunction: any, oListener?: any): UploadCollection;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>fileSizeExceed</code> event of this <code>sap.m.UploadCollection</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.UploadCollection</code> itself.
		 * 
		 * The event is triggered when the file size of an uploaded file is exceeded (only if the maxFileSize property was provided by the application).
		 * This event is not supported by Internet Explorer 9.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachFileSizeExceed(oData: any, fnFunction: any, oListener?: any): UploadCollection;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>selectionChange</code> event of this <code>sap.m.UploadCollection</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.UploadCollection</code> itself.
		 * 
		 * Fires when selection is changed via user interaction inside the control.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachSelectionChange(oData: any, fnFunction: any, oListener?: any): UploadCollection;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>typeMissmatch</code> event of this <code>sap.m.UploadCollection</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.UploadCollection</code> itself.
		 * 
		 * The event is triggered when the file type or the MIME type don't match the permitted types (only if the fileType property or the mimeType property are provided by the application).
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachTypeMissmatch(oData: any, fnFunction: any, oListener?: any): UploadCollection;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>uploadComplete</code> event of this <code>sap.m.UploadCollection</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.UploadCollection</code> itself.
		 * 
		 * The event is triggered as soon as the upload request is completed.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachUploadComplete(oData: any, fnFunction: any, oListener?: any): UploadCollection;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>uploadTerminated</code> event of this <code>sap.m.UploadCollection</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.UploadCollection</code> itself.
		 * 
		 * The event is triggered as soon as the upload request was terminated by the user.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.UploadCollection</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachUploadTerminated(oData: any, fnFunction: any, oListener?: any): UploadCollection;
		/**
		 * Binds aggregation <code>items</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindItems(oBindingInfo: any): UploadCollection;
		/**
		 * Destroys all the headerParameters in the aggregation <code>headerParameters</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyHeaderParameters(): UploadCollection;
		/**
		 * Destroys all the items in the aggregation <code>items</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyItems(): UploadCollection;
		/**
		 * Destroys all the parameters in the aggregation <code>parameters</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyParameters(): UploadCollection;
		/**
		 * Destroys the toolbar in the aggregation <code>toolbar</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyToolbar(): UploadCollection;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>beforeUploadStarts</code> event of this <code>sap.m.UploadCollection</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachBeforeUploadStarts(fnFunction: any, oListener: any): UploadCollection;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>change</code> event of this <code>sap.m.UploadCollection</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachChange(fnFunction: any, oListener: any): UploadCollection;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>fileDeleted</code> event of this <code>sap.m.UploadCollection</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachFileDeleted(fnFunction: any, oListener: any): UploadCollection;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>filenameLengthExceed</code> event of this <code>sap.m.UploadCollection</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachFilenameLengthExceed(fnFunction: any, oListener: any): UploadCollection;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>fileRenamed</code> event of this <code>sap.m.UploadCollection</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachFileRenamed(fnFunction: any, oListener: any): UploadCollection;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>fileSizeExceed</code> event of this <code>sap.m.UploadCollection</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachFileSizeExceed(fnFunction: any, oListener: any): UploadCollection;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>selectionChange</code> event of this <code>sap.m.UploadCollection</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachSelectionChange(fnFunction: any, oListener: any): UploadCollection;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>typeMissmatch</code> event of this <code>sap.m.UploadCollection</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachTypeMissmatch(fnFunction: any, oListener: any): UploadCollection;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>uploadComplete</code> event of this <code>sap.m.UploadCollection</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachUploadComplete(fnFunction: any, oListener: any): UploadCollection;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>uploadTerminated</code> event of this <code>sap.m.UploadCollection</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachUploadTerminated(fnFunction: any, oListener: any): UploadCollection;
		/**
		 * Downloads the given item.
		 * This function delegates to {sap.m.UploadCollectionItem.download}.
		 * @param uploadCollectionItem The item to download. This parameter is mandatory.
		 * @param askForLocation Decides whether to ask for a location to download or not.
		 * @return True if the download has started successfully. False if the download couldn't be started.
		 */
		downloadItem(uploadCollectionItem: UploadCollectionItem, askForLocation: boolean): boolean;
		/**
		 * Creates a new subclass of class sap.m.UploadCollection with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|UploadCollectionMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>beforeUploadStarts</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>fileName</code> of type <code>string</code>Specifies the name of the file to be uploaded.</li>
		 * <li><code>addHeaderParameter</code> of type <code>function</code>Adds a header parameter to the file that will be uploaded.</li>
		 * <li><code>getHeaderParameter</code> of type <code>function</code>Returns the corresponding header parameter (type sap.m.UploadCollectionParameter) if available.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireBeforeUploadStarts(mArguments?: any): UploadCollection;
		/**
		 * Fires event <code>change</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>documentId</code> of type <code>string</code>An unique Id of the attached document.
		 * This parameter is deprecated since version 1.28.0, use parameter files instead.</li>
		 * <li><code>files</code> of type <code>object[]</code>A FileList of individually selected files from the underlying system. See www.w3.org for the FileList Interface definition.
		 * Limitation: Internet Explorer 9 supports only single file with property file.name.
		 * Since version 1.28.0.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireChange(mArguments?: any): UploadCollection;
		/**
		 * Fires event <code>fileDeleted</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>documentId</code> of type <code>string</code>An unique Id of the attached document.
		 * This parameter is deprecated since version 1.28.0, use parameter item instead.</li>
		 * <li><code>item</code> of type <code>sap.m.UploadCollectionItem</code>An item to be deleted from the collection.
		 * Since version 1.28.0.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireFileDeleted(mArguments?: any): UploadCollection;
		/**
		 * Fires event <code>filenameLengthExceed</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>documentId</code> of type <code>string</code>An unique Id of the attached document.
		 * This parameter is deprecated since version 1.28.0, use parameter files instead.</li>
		 * <li><code>files</code> of type <code>object[]</code>A FileList of individually selected files from the underlying system.
		 * Limitation: Internet Explorer 9 supports only single file with property file.name.
		 * Since version 1.28.0.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireFilenameLengthExceed(mArguments?: any): UploadCollection;
		/**
		 * Fires event <code>fileRenamed</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>documentId</code> of type <code>string</code>An unique Id of the attached document.
		 * This parameter is deprecated since version 1.28.0, use parameter item instead.</li>
		 * <li><code>fileName</code> of type <code>string</code>The new file name.
		 * This parameter is deprecated since version 1.28.0, use parameter item instead.</li>
		 * <li><code>item</code> of type <code>sap.m.UploadCollectionItem</code>The renamed UI element as a UploadCollectionItem.
		 * Since version 1.28.0.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireFileRenamed(mArguments?: any): UploadCollection;
		/**
		 * Fires event <code>fileSizeExceed</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>documentId</code> of type <code>string</code>An unique Id of the attached document.
		 * This parameter is deprecated since version 1.28.0, use parameter files instead.</li>
		 * <li><code>fileSize</code> of type <code>string</code>The size in MB of a file to be uploaded.
		 * This parameter is deprecated since version 1.28.0, use parameter files instead.</li>
		 * <li><code>files</code> of type <code>object[]</code>A FileList of individually selected files from the underlying system.
		 * Limitation: Internet Explorer 9 supports only single file with property file.name.
		 * Since version 1.28.0.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireFileSizeExceed(mArguments?: any): UploadCollection;
		/**
		 * Fires event <code>selectionChange</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>selectedItem</code> of type <code>sap.m.UploadCollectionItem</code>The item whose selection has changed. In <code>MultiSelect</code> mode, only the selected item upmost is returned. This parameter can be used for single-selection modes.</li>
		 * <li><code>selectedItems</code> of type <code>sap.m.UploadCollectionItem[]</code>Array of items whose selection has changed. This parameter can be used for <code>MultiSelect</code> mode.</li>
		 * <li><code>selected</code> of type <code>boolean</code>Indicates whether the <code>listItem</code> parameter is selected or not.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireSelectionChange(mArguments?: any): UploadCollection;
		/**
		 * Fires event <code>typeMissmatch</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>documentId</code> of type <code>string</code>An unique Id of the attached document.
		 * This parameter is deprecated since version 1.28.0, use parameter files instead.</li>
		 * <li><code>fileType</code> of type <code>string</code>File type.
		 * This parameter is deprecated since version 1.28.0, use parameter files instead.</li>
		 * <li><code>mimeType</code> of type <code>string</code>MIME type.
		 * This parameter is deprecated since version 1.28.0, use parameter files instead.</li>
		 * <li><code>files</code> of type <code>object[]</code>A FileList of individually selected files from the underlying system.
		 * Limitation: Internet Explorer 9 supports only single file.
		 * Since version 1.28.0.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireTypeMissmatch(mArguments?: any): UploadCollection;
		/**
		 * Fires event <code>uploadComplete</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>readyStateXHR</code> of type <code>string</code>Ready state XHR. This parameter is deprecated since version 1.28.0., use parameter files instead.</li>
		 * <li><code>response</code> of type <code>string</code>Response of the completed upload request. This parameter is deprecated since version 1.28.0., use parameter files instead.</li>
		 * <li><code>status</code> of type <code>string</code>Status Code of the completed upload event. This parameter is deprecated since version 1.28.0., use parameter files instead.</li>
		 * <li><code>files</code> of type <code>object[]</code>A list of uploaded files. Each entry contains the following members.
		 * fileName	: The name of a file to be uploaded.
		 * response	: Response message which comes from the server. On the server side, this response has to be put within the 'body' tags of the response document of the iFrame. It can consist of a return code and an optional message. This does not work in cross-domain scenarios.
		 * responseRaw : HTTP-Response which comes from the server. This property is not supported by Internet Explorer Versions lower than 9.
		 * status	: Status of the XHR request. This property is not supported by Internet Explorer 9 and lower.
		 * headers : HTTP-Response-Headers which come from the server. Provided as a JSON-map, i.e. each header-field is reflected by a property in the header-object, with the property value reflecting the header-field's content. This property is not supported by Internet Explorer 9 and lower.
		 * Since version 1.28.0.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireUploadComplete(mArguments?: any): UploadCollection;
		/**
		 * Fires event <code>uploadTerminated</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>fileName</code> of type <code>string</code>Specifies the name of the file of which the upload is to be terminated.</li>
		 * <li><code>getHeaderParameter</code> of type <code>function</code>This callback function returns the corresponding header parameter (type sap.m.UploadCollectionParameter) if available.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireUploadTerminated(mArguments?: any): UploadCollection;
		/**
		 * Gets current value of property <code>fileType</code>.
		 * 
		 * Defines the allowed file types for the upload.
		 * The chosen files will be checked against an array of file types.
		 * If at least one file does not fit the file type requirements, the upload is prevented.  Example: ["jpg", "png", "bmp"].
		 * @return Value of property <code>fileType</code>
		 */
		getFileType(): string[];
		/**
		 * Gets content of aggregation <code>headerParameters</code>.
		 * 
		 * Specifies the header parameters for the FileUploader that are submitted only with XHR requests.
		 * Header parameters are not supported by Internet Explorer 8 and 9.
		 * @return 
		 */
		getHeaderParameters(): UploadCollectionParameter[];
		/**
		 * Gets current value of property <code>instantUpload</code>.
		 * 
		 * If false, no upload is triggered when a file is selected. In addition, if a file was selected, a new FileUploader instance is created to ensure that multiple files from multiple folders can be chosen.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>instantUpload</code>
		 */
		getInstantUpload(): boolean;
		/**
		 * Gets content of aggregation <code>items</code>.
		 * 
		 * Uploaded items.
		 * @return 
		 */
		getItems(): UploadCollectionItem[];
		/**
		 * Gets current value of property <code>maximumFilenameLength</code>.
		 * 
		 * Specifies the maximum length of a file name.
		 * If the maximum file name length is exceeded, the corresponding event 'filenameLengthExceed' is triggered.
		 * @return Value of property <code>maximumFilenameLength</code>
		 */
		getMaximumFilenameLength(): number;
		/**
		 * Gets current value of property <code>maximumFileSize</code>.
		 * 
		 * Specifies a file size limit in megabytes that prevents the upload if at least one file exceeds the limit.
		 * This property is not supported by Internet Explorer 8 and 9.
		 * @return Value of property <code>maximumFileSize</code>
		 */
		getMaximumFileSize(): number;
		/**
		 * Gets current value of property <code>mimeType</code>.
		 * 
		 * Defines the allowed MIME types of files to be uploaded.
		 * The chosen files will be checked against an array of MIME types.
		 * If at least one file does not fit the MIME type requirements, the upload is prevented.
		 * This property is not supported by Internet Explorer 8 and 9. Example: mimeType ["image/png", "image/jpeg"].
		 * @return Value of property <code>mimeType</code>
		 */
		getMimeType(): string[];
		/**
		 * Gets current value of property <code>mode</code>.
		 * 
		 * Defines the selection mode of the control (e.g. None, SingleSelect, MultiSelect, SingleSelectLeft, SingleSelectMaster).
		 * Since the UploadCollection reacts like a list for attachments, the API is close to the ListBase Interface.
		 * sap.m.ListMode.Delete mode is not supported and will be automatically set to sap.m.ListMode.None.
		 * In addition, if instant upload is set to false the mode sap.m.ListMode.MultiSelect is not supported and will be automatically set to sap.m.ListMode.None.
		 * 
		 * Default value is <code>None</code>.
		 * @return Value of property <code>mode</code>
		 */
		getMode(): ListMode;
		/**
		 * Gets current value of property <code>multiple</code>.
		 * 
		 * Lets the user select multiple files from the same folder and then upload them.
		 * Internet Explorer 8 and 9 do not support this property.
		 * Please note that the various operating systems for mobile devices can react differently to the property so that fewer upload functions may be available in some cases.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>multiple</code>
		 */
		getMultiple(): boolean;
		/**
		 * Gets current value of property <code>noDataText</code>.
		 * 
		 * Allows you to set your own text for the 'No data' label.
		 * @return Value of property <code>noDataText</code>
		 */
		getNoDataText(): string;
		/**
		 * Gets current value of property <code>numberOfAttachmentsText</code>.
		 * 
		 * Sets the title text in the toolbar of the list of attachments.
		 * To show as well the number of attachments in brackets like the default text does. The number of attachments could be retrieved via "getItems().length".
		 * If a new title is set, the default is deactivated.
		 * The default value is set to language-dependent "Attachments (n)".
		 * @return Value of property <code>numberOfAttachmentsText</code>
		 */
		getNumberOfAttachmentsText(): string;
		/**
		 * Gets content of aggregation <code>parameters</code>.
		 * 
		 * Specifies the parameters for the FileUploader that are rendered as a hidden input field.
		 * @return 
		 */
		getParameters(): UploadCollectionParameter[];
		/**
		 * Gets current value of property <code>sameFilenameAllowed</code>.
		 * 
		 * Allows the user to use the same name for a file when editing the file name. 'Same name' refers to an already existing file name in the list.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>sameFilenameAllowed</code>
		 */
		getSameFilenameAllowed(): boolean;
		/**
		 * Returns selected UploadCollectionItem.
		 * @return selected item
		 */
		getSelectedItem(): UploadCollectionItem;
		/**
		 * Returns an array containing the selected UploadCollectionItems.
		 * @return array with selected items
		 */
		getSelectedItems(): UploadCollectionItem[];
		/**
		 * Gets current value of property <code>showSeparators</code>.
		 * 
		 * Defines whether separators are shown between list items.
		 * 
		 * Default value is <code>All</code>.
		 * @return Value of property <code>showSeparators</code>
		 */
		getShowSeparators(): ListSeparators;
		/**
		 * Gets content of aggregation <code>toolbar</code>.
		 * 
		 * Specifies the toolbar.
		 * @return 
		 */
		getToolbar(): OverflowToolbar;
		/**
		 * Gets current value of property <code>uploadEnabled</code>.
		 * 
		 * Enables the upload of a file.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>uploadEnabled</code>
		 */
		getUploadEnabled(): boolean;
		/**
		 * Gets current value of property <code>uploadUrl</code>.
		 * 
		 * Specifies the URL where the uploaded files have to be stored.
		 * 
		 * Default value is <code>../../../upload</code>.
		 * @return Value of property <code>uploadUrl</code>
		 */
		getUploadUrl(): string;
		/**
		 * Checks for the provided <code>sap.m.UploadCollectionParameter</code> in the aggregation <code>headerParameters</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oHeaderParameter The headerParameter whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfHeaderParameter(oHeaderParameter: UploadCollectionParameter): number;
		/**
		 * Checks for the provided <code>sap.m.UploadCollectionItem</code> in the aggregation <code>items</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oItem The item whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfItem(oItem: UploadCollectionItem): number;
		/**
		 * Checks for the provided <code>sap.m.UploadCollectionParameter</code> in the aggregation <code>parameters</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oParameter The parameter whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfParameter(oParameter: UploadCollectionParameter): number;
		/**
		 * Inserts a headerParameter into the aggregation <code>headerParameters</code>.
		 * @param oHeaderParameter the headerParameter to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the headerParameter should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the headerParameter is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the headerParameter is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertHeaderParameter(oHeaderParameter: UploadCollectionParameter, iIndex: number): UploadCollection;
		/**
		 * Inserts a item into the aggregation <code>items</code>.
		 * @param oItem the item to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the item should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the item is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertItem(oItem: UploadCollectionItem, iIndex: number): UploadCollection;
		/**
		 * Inserts a parameter into the aggregation <code>parameters</code>.
		 * @param oParameter the parameter to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the parameter should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the parameter is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the parameter is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertParameter(oParameter: UploadCollectionParameter, iIndex: number): UploadCollection;
		/**
		 * Opens the FileUploader dialog. When an UploadCollectionItem is provided, this method can be used to update a file with a new version.
		 * In this case, the upload progress can be sequenced using the events: beforeUploadStarts, uploadComplete and uploadTerminated. For this use,
		 * multiple properties from the UploadCollection have to be set to false. If no UploadCollectionItem is provided, only the dialog opens
		 * and no further configuration of the UploadCollection is needed.
		 * @param item The item to update with a new version. This parameter is mandatory.
		 * @return To ensure method chaining, return the UploadCollection.
		 */
		openFileDialog(item: UploadCollectionItem): UploadCollection;
		/**
		 * Removes all the controls from the aggregation <code>headerParameters</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllHeaderParameters(): UploadCollectionParameter[];
		/**
		 * Removes all the controls from the aggregation <code>items</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllItems(): UploadCollectionItem[];
		/**
		 * Removes all the controls from the aggregation <code>parameters</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllParameters(): UploadCollectionParameter[];
		/**
		 * Removes a headerParameter from the aggregation <code>headerParameters</code>.
		 * @param vHeaderParameter The headerParameter to remove or its index or id
		 * @return The removed headerParameter or <code>null</code>
		 */
		removeHeaderParameter(vHeaderParameter: number|string|UploadCollectionParameter): UploadCollectionParameter;
		/**
		 * Removes a item from the aggregation <code>items</code>.
		 * @param vItem The item to remove or its index or id
		 * @return The removed item or <code>null</code>
		 */
		removeItem(vItem: number|string|UploadCollectionItem): UploadCollectionItem;
		/**
		 * Removes a parameter from the aggregation <code>parameters</code>.
		 * @param vParameter The parameter to remove or its index or id
		 * @return The removed parameter or <code>null</code>
		 */
		removeParameter(vParameter: number|string|UploadCollectionParameter): UploadCollectionParameter;
		/**
		 * Select all items in "MultiSelection" mode.
		 * @return The current UploadCollection
		 */
		selectAll(): UploadCollection;
		/**
		 * Sets a new value for property <code>fileType</code>.
		 * 
		 * Defines the allowed file types for the upload.
		 * The chosen files will be checked against an array of file types.
		 * If at least one file does not fit the file type requirements, the upload is prevented.  Example: ["jpg", "png", "bmp"].
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sFileType New value for property <code>fileType</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setFileType(sFileType: string[]): UploadCollection;
		/**
		 * Sets a new value for property <code>instantUpload</code>.
		 * 
		 * If false, no upload is triggered when a file is selected. In addition, if a file was selected, a new FileUploader instance is created to ensure that multiple files from multiple folders can be chosen.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bInstantUpload New value for property <code>instantUpload</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setInstantUpload(bInstantUpload: boolean): UploadCollection;
		/**
		 * Sets a new value for property <code>maximumFilenameLength</code>.
		 * 
		 * Specifies the maximum length of a file name.
		 * If the maximum file name length is exceeded, the corresponding event 'filenameLengthExceed' is triggered.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param iMaximumFilenameLength New value for property <code>maximumFilenameLength</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMaximumFilenameLength(iMaximumFilenameLength: number): UploadCollection;
		/**
		 * Sets a new value for property <code>maximumFileSize</code>.
		 * 
		 * Specifies a file size limit in megabytes that prevents the upload if at least one file exceeds the limit.
		 * This property is not supported by Internet Explorer 8 and 9.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param fMaximumFileSize New value for property <code>maximumFileSize</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMaximumFileSize(fMaximumFileSize: number): UploadCollection;
		/**
		 * Sets a new value for property <code>mimeType</code>.
		 * 
		 * Defines the allowed MIME types of files to be uploaded.
		 * The chosen files will be checked against an array of MIME types.
		 * If at least one file does not fit the MIME type requirements, the upload is prevented.
		 * This property is not supported by Internet Explorer 8 and 9. Example: mimeType ["image/png", "image/jpeg"].
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sMimeType New value for property <code>mimeType</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMimeType(sMimeType: string[]): UploadCollection;
		/**
		 * Sets a new value for property <code>mode</code>.
		 * 
		 * Defines the selection mode of the control (e.g. None, SingleSelect, MultiSelect, SingleSelectLeft, SingleSelectMaster).
		 * Since the UploadCollection reacts like a list for attachments, the API is close to the ListBase Interface.
		 * sap.m.ListMode.Delete mode is not supported and will be automatically set to sap.m.ListMode.None.
		 * In addition, if instant upload is set to false the mode sap.m.ListMode.MultiSelect is not supported and will be automatically set to sap.m.ListMode.None.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>None</code>.
		 * @param sMode New value for property <code>mode</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMode(sMode: ListMode): UploadCollection;
		/**
		 * Sets a new value for property <code>multiple</code>.
		 * 
		 * Lets the user select multiple files from the same folder and then upload them.
		 * Internet Explorer 8 and 9 do not support this property.
		 * Please note that the various operating systems for mobile devices can react differently to the property so that fewer upload functions may be available in some cases.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bMultiple New value for property <code>multiple</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMultiple(bMultiple: boolean): UploadCollection;
		/**
		 * Sets a new value for property <code>noDataText</code>.
		 * 
		 * Allows you to set your own text for the 'No data' label.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sNoDataText New value for property <code>noDataText</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setNoDataText(sNoDataText: string): UploadCollection;
		/**
		 * Sets a new value for property <code>numberOfAttachmentsText</code>.
		 * 
		 * Sets the title text in the toolbar of the list of attachments.
		 * To show as well the number of attachments in brackets like the default text does. The number of attachments could be retrieved via "getItems().length".
		 * If a new title is set, the default is deactivated.
		 * The default value is set to language-dependent "Attachments (n)".
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sNumberOfAttachmentsText New value for property <code>numberOfAttachmentsText</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setNumberOfAttachmentsText(sNumberOfAttachmentsText: string): UploadCollection;
		/**
		 * Sets a new value for property <code>sameFilenameAllowed</code>.
		 * 
		 * Allows the user to use the same name for a file when editing the file name. 'Same name' refers to an already existing file name in the list.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bSameFilenameAllowed New value for property <code>sameFilenameAllowed</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setSameFilenameAllowed(bSameFilenameAllowed: boolean): UploadCollection;
		/**
		 * Selects or deselects the given list item.
		 * @param uploadCollectionItem The item whose selection to be changed. This parameter is mandatory.
		 * @param select Sets selected status of the item. Default value is true.
		 * @return The current UploadCollection
		 */
		setSelectedItem(uploadCollectionItem: UploadCollectionItem, select: boolean): UploadCollection;
		/**
		 * Sets a UploadCollectionItem to be selected by id. In single mode, the method removes the previous selection.
		 * @param id The id of the item whose selection to be changed.
		 * @param select Sets selected status of the item. Default value is true.
		 * @return The current UploadCollection
		 */
		setSelectedItemById(id: string, select: boolean): UploadCollection;
		/**
		 * Sets a new value for property <code>showSeparators</code>.
		 * 
		 * Defines whether separators are shown between list items.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>All</code>.
		 * @param sShowSeparators New value for property <code>showSeparators</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setShowSeparators(sShowSeparators: ListSeparators): UploadCollection;
		/**
		 * Sets the aggregated <code>toolbar</code>.
		 * @param oToolbar The toolbar to set
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setToolbar(oToolbar: OverflowToolbar): UploadCollection;
		/**
		 * Sets a new value for property <code>uploadEnabled</code>.
		 * 
		 * Enables the upload of a file.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bUploadEnabled New value for property <code>uploadEnabled</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setUploadEnabled(bUploadEnabled: boolean): UploadCollection;
		/**
		 * Sets a new value for property <code>uploadUrl</code>.
		 * 
		 * Specifies the URL where the uploaded files have to be stored.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>../../../upload</code>.
		 * @param sUploadUrl New value for property <code>uploadUrl</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setUploadUrl(sUploadUrl: string): UploadCollection;
		/**
		 * Unbinds aggregation <code>items</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindItems(): UploadCollection;
		/**
		 * Starts the upload for all selected files.
		 */
		upload();
	}

	class UploadCollectionItem extends sap.ui.core.Element {
		/**
		 * Constructor for a new UploadCollectionItem
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, will be generated automatically if no ID is provided.(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.UploadCollectionItemMetadata);
		/**
		 * Constructor for a new UploadCollectionItem
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, will be generated automatically if no ID is provided.(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some attribute to the aggregation <code>attributes</code>.
		 * @param oAttribute the attribute to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addAttribute(oAttribute: ObjectAttribute): UploadCollectionItem;
		/**
		 * Adds some marker to the aggregation <code>markers</code>.
		 * @param oMarker the marker to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addMarker(oMarker: ObjectMarker): UploadCollectionItem;
		/**
		 * Adds some status to the aggregation <code>statuses</code>.
		 * @param oStatus the status to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addStatus(oStatus: ObjectStatus): UploadCollectionItem;
		/**
		 * Binds aggregation <code>attributes</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindAttributes(oBindingInfo: any): UploadCollectionItem;
		/**
		 * Binds aggregation <code>markers</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindMarkers(oBindingInfo: any): UploadCollectionItem;
		/**
		 * Binds aggregation <code>statuses</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindStatuses(oBindingInfo: any): UploadCollectionItem;
		/**
		 * Destroys all the attributes in the aggregation <code>attributes</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyAttributes(): UploadCollectionItem;
		/**
		 * Destroys all the markers in the aggregation <code>markers</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyMarkers(): UploadCollectionItem;
		/**
		 * Destroys all the statuses in the aggregation <code>statuses</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyStatuses(): UploadCollectionItem;
		/**
		 * Downloads the item.
		 * The sap.ui.core.util.File method is used here. For further details on this method, see {sap.ui.core.util.File.save}.
		 * @param askForLocation Decides whether to ask for a location to download or not.
		 */
		download(askForLocation: boolean);
		/**
		 * Creates a new subclass of class sap.m.UploadCollectionItem with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|UploadCollectionItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>ariaLabelForPicture</code>.
		 * 
		 * Aria label for the icon (or for the image).
		 * @return Value of property <code>ariaLabelForPicture</code>
		 */
		getAriaLabelForPicture(): string;
		/**
		 * Gets content of aggregation <code>attributes</code>.
		 * 
		 * Attributes of an uploaded item, for example, 'Uploaded By', 'Uploaded On', 'File Size'
		 * attributes are displayed after an item has been uploaded.
		 * Additionally, the Active property of sap.m.ObjectAttribute is supported.<br>
		 * Note that if one of the deprecated properties contributor, fileSize or UploadedDate is filled in addition to this attribute, two attributes with the same title
		 * are displayed as these properties get displayed as an attribute.
		 * Example: An application passes the property ‘contributor’ with the value ‘A’ and the aggregation attributes ‘contributor’: ‘B’. As a result, the attributes
		 * ‘contributor’:’A’ and ‘contributor’:’B’ are displayed. To make sure the title does not appear twice, check if one of the properties is filled.
		 * @return 
		 */
		getAttributes(): ObjectAttribute[];
		/**
		 * Gets current value of property <code>documentId</code>.
		 * 
		 * Specifies a unique identifier of the file (created by the application).
		 * @return Value of property <code>documentId</code>
		 */
		getDocumentId(): string;
		/**
		 * Gets current value of property <code>enableDelete</code>.
		 * 
		 * Enables/Disables the Edit button.
		 * If the value is true, the Edit button is enabled and the edit function can be used.
		 * If the value is false, the edit function is not available.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>enableDelete</code>
		 */
		getEnableDelete(): boolean;
		/**
		 * Gets current value of property <code>enableEdit</code>.
		 * 
		 * Enables/Disables the Edit button.
		 * If the value is true, the Edit button is enabled and the edit function can be used.
		 * If the value is false, the edit function is not available.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>enableEdit</code>
		 */
		getEnableEdit(): boolean;
		/**
		 * Gets current value of property <code>fileName</code>.
		 * 
		 * Specifies the name of the uploaded file.
		 * @return Value of property <code>fileName</code>
		 */
		getFileName(): string;
		/**
		 * ID of the element which is the current target of the association <code>fileUploader</code>, or <code>null</code>.
		 * @return 
		 */
		getFileUploader(): sap.ui.core.ID;
		/**
		 * Gets content of aggregation <code>markers</code>.
		 * 
		 * Markers of an uploaded item
		 * Markers will be displayed after an item has been uploaded
		 * But not in Edit mode
		 * @return 
		 */
		getMarkers(): ObjectMarker[];
		/**
		 * Gets current value of property <code>mimeType</code>.
		 * 
		 * Specifies the MIME type of the file.
		 * @return Value of property <code>mimeType</code>
		 */
		getMimeType(): string;
		/**
		 * Gets current value of property <code>selected</code>.
		 * 
		 * Defines the selected state of the UploadCollectionItem.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>selected</code>
		 */
		getSelected(): boolean;
		/**
		 * Gets content of aggregation <code>statuses</code>.
		 * 
		 * Statuses of an uploaded item
		 * Statuses will be displayed after an item has been uploaded
		 * @return 
		 */
		getStatuses(): ObjectStatus[];
		/**
		 * Gets current value of property <code>thumbnailUrl</code>.
		 * 
		 * Specifies the URL where the thumbnail of the file is located.
		 * @return Value of property <code>thumbnailUrl</code>
		 */
		getThumbnailUrl(): string;
		/**
		 * Gets current value of property <code>url</code>.
		 * 
		 * Specifies the URL where the file is located.
		 * If the application doesn't provide a value for this property, the icon and the file name of the UploadCollectionItem are not clickable.
		 * @return Value of property <code>url</code>
		 */
		getUrl(): string;
		/**
		 * Gets current value of property <code>visibleDelete</code>.
		 * 
		 * Show/Hide the Delete button.
		 * If the value is true, the Delete button is visible.
		 * If the value is false, the Delete button is not visible.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>visibleDelete</code>
		 */
		getVisibleDelete(): boolean;
		/**
		 * Gets current value of property <code>visibleEdit</code>.
		 * 
		 * Show/Hide the Edit button.
		 * If the value is true, the Edit button is visible.
		 * If the value is false, the Edit button is not visible.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>visibleEdit</code>
		 */
		getVisibleEdit(): boolean;
		/**
		 * Checks for the provided <code>sap.m.ObjectAttribute</code> in the aggregation <code>attributes</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oAttribute The attribute whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfAttribute(oAttribute: ObjectAttribute): number;
		/**
		 * Checks for the provided <code>sap.m.ObjectMarker</code> in the aggregation <code>markers</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oMarker The marker whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfMarker(oMarker: ObjectMarker): number;
		/**
		 * Checks for the provided <code>sap.m.ObjectStatus</code> in the aggregation <code>statuses</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oStatus The status whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfStatus(oStatus: ObjectStatus): number;
		/**
		 * Inserts a attribute into the aggregation <code>attributes</code>.
		 * @param oAttribute the attribute to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the attribute should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the attribute is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertAttribute(oAttribute: ObjectAttribute, iIndex: number): UploadCollectionItem;
		/**
		 * Inserts a marker into the aggregation <code>markers</code>.
		 * @param oMarker the marker to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the marker should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the marker is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the marker is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertMarker(oMarker: ObjectMarker, iIndex: number): UploadCollectionItem;
		/**
		 * Inserts a status into the aggregation <code>statuses</code>.
		 * @param oStatus the status to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the status should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the status is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the status is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertStatus(oStatus: ObjectStatus, iIndex: number): UploadCollectionItem;
		/**
		 * Removes all the controls from the aggregation <code>attributes</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllAttributes(): ObjectAttribute[];
		/**
		 * Removes all the controls from the aggregation <code>markers</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllMarkers(): ObjectMarker[];
		/**
		 * Removes all the controls from the aggregation <code>statuses</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllStatuses(): ObjectStatus[];
		/**
		 * Removes a attribute from the aggregation <code>attributes</code>.
		 * @param vAttribute The attribute to remove or its index or id
		 * @return The removed attribute or <code>null</code>
		 */
		removeAttribute(vAttribute: number|string|ObjectAttribute): ObjectAttribute;
		/**
		 * Removes a marker from the aggregation <code>markers</code>.
		 * @param vMarker The marker to remove or its index or id
		 * @return The removed marker or <code>null</code>
		 */
		removeMarker(vMarker: number|string|ObjectMarker): ObjectMarker;
		/**
		 * Removes a status from the aggregation <code>statuses</code>.
		 * @param vStatus The status to remove or its index or id
		 * @return The removed status or <code>null</code>
		 */
		removeStatus(vStatus: number|string|ObjectStatus): ObjectStatus;
		/**
		 * Sets a new value for property <code>ariaLabelForPicture</code>.
		 * 
		 * Aria label for the icon (or for the image).
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sAriaLabelForPicture New value for property <code>ariaLabelForPicture</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setAriaLabelForPicture(sAriaLabelForPicture: string): UploadCollectionItem;
		/**
		 * Sets a new value for property <code>documentId</code>.
		 * 
		 * Specifies a unique identifier of the file (created by the application).
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sDocumentId New value for property <code>documentId</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setDocumentId(sDocumentId: string): UploadCollectionItem;
		/**
		 * Sets a new value for property <code>enableDelete</code>.
		 * 
		 * Enables/Disables the Edit button.
		 * If the value is true, the Edit button is enabled and the edit function can be used.
		 * If the value is false, the edit function is not available.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bEnableDelete New value for property <code>enableDelete</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setEnableDelete(bEnableDelete: boolean): UploadCollectionItem;
		/**
		 * Sets a new value for property <code>enableEdit</code>.
		 * 
		 * Enables/Disables the Edit button.
		 * If the value is true, the Edit button is enabled and the edit function can be used.
		 * If the value is false, the edit function is not available.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bEnableEdit New value for property <code>enableEdit</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setEnableEdit(bEnableEdit: boolean): UploadCollectionItem;
		/**
		 * Sets a new value for property <code>fileName</code>.
		 * 
		 * Specifies the name of the uploaded file.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sFileName New value for property <code>fileName</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setFileName(sFileName: string): UploadCollectionItem;
		/**
		 * Sets the associated <code>fileUploader</code>.
		 * @param oFileUploader ID of an element which becomes the new target of this fileUploader association; alternatively, an element instance may be given
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setFileUploader(oFileUploader: sap.ui.core.ID|sap.ui.unified.FileUploader): UploadCollectionItem;
		/**
		 * Sets a new value for property <code>mimeType</code>.
		 * 
		 * Specifies the MIME type of the file.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sMimeType New value for property <code>mimeType</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMimeType(sMimeType: string): UploadCollectionItem;
		/**
		 * Setter of the selected property.
		 * @param selected value to set on Selected property
		 * @return The current UploadCollectionItem
		 */
		setSelected(selected: boolean): UploadCollectionItem;
		/**
		 * Sets a new value for property <code>thumbnailUrl</code>.
		 * 
		 * Specifies the URL where the thumbnail of the file is located.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sThumbnailUrl New value for property <code>thumbnailUrl</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setThumbnailUrl(sThumbnailUrl: string): UploadCollectionItem;
		/**
		 * Sets a new value for property <code>url</code>.
		 * 
		 * Specifies the URL where the file is located.
		 * If the application doesn't provide a value for this property, the icon and the file name of the UploadCollectionItem are not clickable.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sUrl New value for property <code>url</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setUrl(sUrl: string): UploadCollectionItem;
		/**
		 * Sets a new value for property <code>visibleDelete</code>.
		 * 
		 * Show/Hide the Delete button.
		 * If the value is true, the Delete button is visible.
		 * If the value is false, the Delete button is not visible.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bVisibleDelete New value for property <code>visibleDelete</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setVisibleDelete(bVisibleDelete: boolean): UploadCollectionItem;
		/**
		 * Sets a new value for property <code>visibleEdit</code>.
		 * 
		 * Show/Hide the Edit button.
		 * If the value is true, the Edit button is visible.
		 * If the value is false, the Edit button is not visible.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bVisibleEdit New value for property <code>visibleEdit</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setVisibleEdit(bVisibleEdit: boolean): UploadCollectionItem;
		/**
		 * Unbinds aggregation <code>attributes</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindAttributes(): UploadCollectionItem;
		/**
		 * Unbinds aggregation <code>markers</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindMarkers(): UploadCollectionItem;
		/**
		 * Unbinds aggregation <code>statuses</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindStatuses(): UploadCollectionItem;
	}

	class UploadCollectionParameter extends sap.ui.core.Element {
		/**
		 * Constructor for a new UploadCollectionParameter.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.UploadCollectionParameterMetadata);
		/**
		 * Constructor for a new UploadCollectionParameter.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.UploadCollectionParameter with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|UploadCollectionParameterMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Gets current value of property <code>name</code>.
		 * 
		 * Specifies the name of the parameter.
		 * @return Value of property <code>name</code>
		 */
		getName(): string;
		/**
		 * Gets current value of property <code>value</code>.
		 * 
		 * Specifies the value of the parameter.
		 * @return Value of property <code>value</code>
		 */
		getValue(): string;
		/**
		 * Sets a new value for property <code>name</code>.
		 * 
		 * Specifies the name of the parameter.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sName New value for property <code>name</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setName(sName: string): UploadCollectionParameter;
		/**
		 * Sets a new value for property <code>value</code>.
		 * 
		 * Specifies the value of the parameter.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * @param sValue New value for property <code>value</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setValue(sValue: string): UploadCollectionParameter;
	}

	class UploadCollectionToolbarPlaceholder extends sap.ui.core.Control {
		/**
		 * Constructor for a new UploadCollectionToolbarPlaceholder.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Constructor for a new UploadCollectionToolbarPlaceholder.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.UploadCollectionToolbarPlaceholder with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
	}

	class ValueColor {
		/**
		 * Critical value color.
		 */
		static Critical: string;
		/**
		 * Error value color.
		 */
		static Error: string;
		/**
		 * Good value color.
		 */
		static Good: string;
		/**
		 * Neutral value color.
		 */
		static Neutral: string;
	}

	class VBox extends FlexBox {
		/**
		 * Constructor for a new VBox.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Constructor for a new VBox.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a new subclass of class sap.m.VBox with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.FlexBox.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.FlexBox with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @note Overload from base type sap.m.FlexBox
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|FlexBoxMetadata, FNMetaImpl?: any): any;
	}

	class VerticalPlacementType {
		/**
		 * Popover will be placed at the bottom of the reference control.
		 */
		static Bottom: string;
		/**
		 * Popover will be placed at the top of the reference control.
		 */
		static Top: string;
		/**
		 * Popover will be placed at the top or bottom of the reference control.
		 */
		static Vertical: string;
	}

	class ViewSettingsCustomItem extends ViewSettingsItem {
		/**
		 * Constructor for a new ViewSettingsCustomItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.ViewSettingsCustomItemMetadata);
		/**
		 * Constructor for a new ViewSettingsCustomItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Creates a clone of the ViewSettingsCustomItem instance.
		 * @param sIdSuffix a suffix to be appended to the cloned object id(optional)
		 * @param aLocalIds an array of local IDs within the cloned hierarchy (internally used)(optional)
		 * @param oOptions configuration object(optional)
		 * @return reference to the newly created clone
		 */
		clone(sIdSuffix?: string, aLocalIds?: string[], oOptions?: any): sap.ui.base.ManagedObject;
		/**
		 * Clone delegates
		 * @note Overload from base type sap.ui.core.Element
		 * @param sIdSuffix a suffix to be appended to the cloned element id(optional)
		 * @param aLocalIds an array of local IDs within the cloned hierarchy (internally used)(optional)
		 * @return reference to the newly created clone
		 */
		clone(sIdSuffix?: string, aLocalIds?: string[]): sap.ui.base.ManagedObject;
		/**
		 * Destroys the customControl in the aggregation <code>customControl</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyCustomControl(): ViewSettingsCustomItem;
		/**
		 * Creates a new subclass of class sap.m.ViewSettingsCustomItem with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ViewSettingsItem.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ViewSettingsCustomItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Item with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Item
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.ViewSettingsItem with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
		 * @note Overload from base type sap.m.ViewSettingsItem
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ViewSettingsItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Internally the control is handled as a managed object instead of an aggregation
		 * because this control is sometimes aggregated in other controls like a popover or a dialog.
		 * @return oControl a control used for filtering purposes
		 */
		getCustomControl(): sap.ui.core.Control;
		/**
		 * Gets current value of property <code>filterCount</code>.
		 * 
		 * The number of currently active filters for this custom filter item. It will be displayed in the filter list of the ViewSettingsDialog to represent the filter state of the custom control.
		 * 
		 * Default value is <code>0</code>.
		 * @return Value of property <code>filterCount</code>
		 */
		getFilterCount(): number;
		/**
		 * Internally the control is handled as a managed object instead of an aggregation
		 * as this control is sometimes aggregated in other controls like a popover or a dialog.
		 * @param oControl A control used for filtering purposes
		 * @return this pointer for chaining
		 */
		setCustomControl(oControl: sap.ui.core.Control): ViewSettingsCustomItem;
		/**
		 * Sets the filterCount without invalidating the control as it is never rendered directly.
		 * @param iValue The new value for property filterCount
		 * @return this pointer for chaining
		 */
		setFilterCount(iValue: number): ViewSettingsItem;
	}

	class ViewSettingsCustomTab extends sap.ui.core.Item {
		/**
		 * Constructor for a new ViewSettingsCustomTab.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.ViewSettingsCustomTabMetadata);
		/**
		 * Constructor for a new ViewSettingsCustomTab.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some content to the aggregation <code>content</code>.
		 * @param oContent the content to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addContent(oContent: sap.ui.core.Control): ViewSettingsCustomTab;
		/**
		 * Destroys all the content in the aggregation <code>content</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyContent(): ViewSettingsCustomTab;
		/**
		 * Creates a new subclass of class sap.m.ViewSettingsCustomTab with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ViewSettingsCustomTabMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Item with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Item
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Gets content of aggregation <code>content</code>.
		 * 
		 * The content of this Custom tab
		 * @return 
		 */
		getContent(): sap.ui.core.Control[];
		/**
		 * Gets current value of property <code>icon</code>.
		 * 
		 * Custom tab button icon
		 * 
		 * Default value is <code>sap-icon://competitor</code>.
		 * @return Value of property <code>icon</code>
		 */
		getIcon(): sap.ui.core.URI;
		/**
		 * Gets or creates the sap.m.Button instance for the custom tab.
		 * @param oOptions 
		 * @return 
		 */
		getTabButton(oOptions: any): Button;
		/**
		 * Gets current value of property <code>title</code>.
		 * 
		 * Custom tab title
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>title</code>
		 */
		getTitle(): string;
		/**
		 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oContent The content whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfContent(oContent: sap.ui.core.Control): number;
		/**
		 * Inserts a content into the aggregation <code>content</code>.
		 * @param oContent the content to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the content should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the content is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertContent(oContent: sap.ui.core.Control, iIndex: number): ViewSettingsCustomTab;
		/**
		 * Removes all the controls from the aggregation <code>content</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllContent(): sap.ui.core.Control[];
		/**
		 * Removes a content from the aggregation <code>content</code>.
		 * @param vContent The content to remove or its index or id
		 * @return The removed content or <code>null</code>
		 */
		removeContent(vContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
		/**
		 * Sets a new value for property <code>icon</code>.
		 * 
		 * Custom tab button icon
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>sap-icon://competitor</code>.
		 * @param sIcon New value for property <code>icon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIcon(sIcon: sap.ui.core.URI): ViewSettingsCustomTab;
		/**
		 * Sets a new value for property <code>title</code>.
		 * 
		 * Custom tab title
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sTitle New value for property <code>title</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTitle(sTitle: string): ViewSettingsCustomTab;
	}

	class ViewSettingsDialog extends sap.ui.core.Control {
		/**
		 * Constructor for a new ViewSettingsDialog.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.ViewSettingsDialogMetadata);
		/**
		 * Constructor for a new ViewSettingsDialog.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Overwrites the aggregation setter in order to have ID validation logic as some strings
		 * are reserved for the predefined tabs.
		 * @param oCustomTab The custom tab to be added
		 * @return this pointer for chaining
		 */
		addCustomTab(oCustomTab: any): ViewSettingsDialog;
		/**
		 * Adds some filterItem to the aggregation <code>filterItems</code>.
		 * @param oFilterItem the filterItem to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addFilterItem(oFilterItem: ViewSettingsItem): ViewSettingsDialog;
		/**
		 * Adds a group item and sets the association to reflect the selected state.
		 * @param oItem The item to be added to the group items
		 * @return this pointer for chaining
		 */
		addGroupItem(oItem: ViewSettingsItem): ViewSettingsDialog;
		/**
		 * Adds a preset filter item and sets the association to reflect the selected state.
		 * @param oItem The selected item or a string with the key
		 * @return this pointer for chaining
		 */
		addPresetFilterItem(oItem: ViewSettingsItem): ViewSettingsDialog;
		/**
		 * Adds a sort item and sets the association to reflect the selected state.
		 * @param oItem The item to be added to the aggregation
		 * @return this pointer for chaining
		 */
		addSortItem(oItem: ViewSettingsItem): ViewSettingsDialog;
		/**
		 * Forward method to the inner dialog method: addStyleClass.
		 * @return this pointer for chaining
		 */
		addStyleClass(): ViewSettingsDialog;
		/**
		 * The string given as "sStyleClass" will be added to the "class" attribute of this control's root HTML element.
		 * 
		 * This method is intended to be used to mark controls as being of a special type for which
		 * special styling can be provided using CSS selectors that reference this style class name.
		 * 
		 * <pre>
		 * Example:
		 *    myButton.addStyleClass("myRedTextButton"); // add a CSS class to one button instance
		 * 
		 * ...and in CSS:
		 *    .myRedTextButton {
		 *       color: red;
		 *    }
		 * </pre>
		 * 
		 * This will add the CSS class "myRedTextButton" to the Button HTML and the CSS code above will then
		 * make the text in this particular button red.
		 * 
		 * Only characters allowed inside HTML attributes are allowed.
		 * Quotes are not allowed and this method will ignore any strings containing quotes.
		 * Strings containing spaces are interpreted as multiple custom style classes which are split by space and can be removed
		 * individually later by calling removeStyleClass.
		 * Multiple calls with the same sStyleClass will have no different effect than calling once.
		 * If sStyleClass is null, empty string or it contains quotes, the call is ignored.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sStyleClass the CSS class name to be added
		 * @return Returns <code>this</code> to allow method chaining
		 */
		addStyleClass(sStyleClass: string): sap.ui.core.Control;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>cancel</code> event of this <code>sap.m.ViewSettingsDialog</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.ViewSettingsDialog</code> itself.
		 * 
		 * Called when the Cancel button is pressed. It can be used to set the state of custom filter controls.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.ViewSettingsDialog</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachCancel(oData: any, fnFunction: any, oListener?: any): ViewSettingsDialog;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>confirm</code> event of this <code>sap.m.ViewSettingsDialog</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.ViewSettingsDialog</code> itself.
		 * 
		 * Indicates that the user has pressed the OK button and the selected sort, group, and filter settings should be applied to the data on this page.
		 * </br></br><b>Note:</b> Custom tabs are not converted to event parameters automatically. For custom tabs, you have to read the state of your controls inside the callback of this event.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.ViewSettingsDialog</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachConfirm(oData: any, fnFunction: any, oListener?: any): ViewSettingsDialog;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>filterDetailPageOpened</code> event of this <code>sap.m.ViewSettingsDialog</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.ViewSettingsDialog</code> itself.
		 * 
		 * Fired when the filter detail page is opened.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.ViewSettingsDialog</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachFilterDetailPageOpened(oData: any, fnFunction: any, oListener?: any): ViewSettingsDialog;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>resetFilters</code> event of this <code>sap.m.ViewSettingsDialog</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.ViewSettingsDialog</code> itself.
		 * 
		 * Called when the reset filters button is pressed. It can be used to clear the state of custom filter controls.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.ViewSettingsDialog</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachResetFilters(oData: any, fnFunction: any, oListener?: any): ViewSettingsDialog;
		/**
		 * Binds aggregation <code>customTabs</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindCustomTabs(oBindingInfo: any): ViewSettingsDialog;
		/**
		 * Binds aggregation <code>filterItems</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindFilterItems(oBindingInfo: any): ViewSettingsDialog;
		/**
		 * Binds aggregation <code>groupItems</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindGroupItems(oBindingInfo: any): ViewSettingsDialog;
		/**
		 * Binds aggregation <code>presetFilterItems</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindPresetFilterItems(oBindingInfo: any): ViewSettingsDialog;
		/**
		 * Binds aggregation <code>sortItems</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindSortItems(oBindingInfo: any): ViewSettingsDialog;
		/**
		 * Destroys all the customTabs in the aggregation <code>customTabs</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyCustomTabs(): ViewSettingsDialog;
		/**
		 * Destroys all the filterItems in the aggregation <code>filterItems</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyFilterItems(): ViewSettingsDialog;
		/**
		 * Destroys all the groupItems in the aggregation <code>groupItems</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyGroupItems(): ViewSettingsDialog;
		/**
		 * Destroys all the presetFilterItems in the aggregation <code>presetFilterItems</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyPresetFilterItems(): ViewSettingsDialog;
		/**
		 * Destroys all the sortItems in the aggregation <code>sortItems</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroySortItems(): ViewSettingsDialog;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>cancel</code> event of this <code>sap.m.ViewSettingsDialog</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachCancel(fnFunction: any, oListener: any): ViewSettingsDialog;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>confirm</code> event of this <code>sap.m.ViewSettingsDialog</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachConfirm(fnFunction: any, oListener: any): ViewSettingsDialog;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>filterDetailPageOpened</code> event of this <code>sap.m.ViewSettingsDialog</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachFilterDetailPageOpened(fnFunction: any, oListener: any): ViewSettingsDialog;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>resetFilters</code> event of this <code>sap.m.ViewSettingsDialog</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachResetFilters(fnFunction: any, oListener: any): ViewSettingsDialog;
		/**
		 * Creates a new subclass of class sap.m.ViewSettingsDialog with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ViewSettingsDialogMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>cancel</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireCancel(mArguments?: any): ViewSettingsDialog;
		/**
		 * Fires event <code>confirm</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>sortItem</code> of type <code>sap.m.ViewSettingsItem</code>The selected sort item.</li>
		 * <li><code>sortDescending</code> of type <code>boolean</code>The selected sort order (true = descending, false = ascending).</li>
		 * <li><code>groupItem</code> of type <code>sap.m.ViewSettingsItem</code>The selected group item.</li>
		 * <li><code>groupDescending</code> of type <code>boolean</code>The selected group order (true = descending, false = ascending).</li>
		 * <li><code>presetFilterItem</code> of type <code>sap.m.ViewSettingsItem</code>The selected preset filter item.</li>
		 * <li><code>filterItems</code> of type <code>sap.m.ViewSettingsItem[]</code>The selected filters in an array of ViewSettingsItem.</li>
		 * <li><code>filterKeys</code> of type <code>object</code>The selected filter items in an object notation format: { key: boolean }. If a custom control filter was displayed (for example, the user clicked on the filter item), the value for its key is set to true to indicate that there has been an interaction with the control.</li>
		 * <li><code>filterString</code> of type <code>string</code>The selected filter items in a string format to display in the control's header bar in format "Filtered by: key (subkey1, subkey2, subkey3)".</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireConfirm(mArguments?: any): ViewSettingsDialog;
		/**
		 * Fires event <code>filterDetailPageOpened</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>parentFilterItem</code> of type <code>sap.m.ViewSettingsFilterItem</code>The filter item for which the details are opened.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireFilterDetailPageOpened(mArguments?: any): ViewSettingsDialog;
		/**
		 * Fires event <code>resetFilters</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireResetFilters(mArguments?: any): ViewSettingsDialog;
		/**
		 * Gets content of aggregation <code>customTabs</code>.
		 * 
		 * The list of all the custom tabs.
		 * @return 
		 */
		getCustomTabs(): ViewSettingsCustomTab[];
		/**
		 * Forward method to the inner dialog method: getDomRef.
		 * @return The Element's DOM Element sub DOM Element or null
		 */
		getDomRef(): any;
		/**
		 * Returns the best suitable DOM Element that represents this UI5 Element.
		 * By default the DOM Element with the same ID as this Element is returned.
		 * Subclasses should override this method if the lookup via id is not sufficient.
		 * 
		 * Note that such a DOM Element does not necessarily exist in all cases.
		 * Some elements or controls might not have a DOM representation at all (e.g.
		 * a naive FlowLayout) while others might not have one due to their current
		 * state (e.g. an initial, not yet rendered control).
		 * 
		 * If an ID suffix is given, the ID of this Element is concatenated with the suffix
		 * (separated by a single dash) and the DOM node with that compound ID will be returned.
		 * This matches the UI5 naming convention for named inner DOM nodes of a control.
		 * @note Overload from base type sap.ui.core.Element
		 * @param sSuffix ID suffix to get the DOMRef for(optional)
		 * @return The Element's DOM Element sub DOM Element or null
		 */
		getDomRef(sSuffix?: string): any;
		/**
		 * Gets content of aggregation <code>filterItems</code>.
		 * 
		 * The list of items with key and value that can be filtered on (for example, a list of columns for a table). A filterItem is associated with one or more detail filters.
		 * @return 
		 */
		getFilterItems(): ViewSettingsItem[];
		/**
		 * Gets current value of property <code>groupDescending</code>.
		 * 
		 * Determines whether the group order is descending or ascending (default).
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>groupDescending</code>
		 */
		getGroupDescending(): boolean;
		/**
		 * Gets content of aggregation <code>groupItems</code>.
		 * 
		 * The list of items with key and value that can be grouped on (for example, a list of columns for a table).
		 * @return 
		 */
		getGroupItems(): ViewSettingsItem[];
		/**
		 * Gets content of aggregation <code>presetFilterItems</code>.
		 * 
		 * The list of preset filter items that allows the selection of more complex or custom filters. These entries are displayed at the top of the filter tab.
		 * @return 
		 */
		getPresetFilterItems(): ViewSettingsItem[];
		/**
		 * Returns the selected filters as an array of ViewSettingsItems.
		 * 
		 * It can be used to create matching sorters and filters to apply the selected settings to the data.
		 * @return An array of selected filter items
		 */
		getSelectedFilterItems(): ViewSettingsItem[];
		/**
		 * Gets the selected filter object in format {key: boolean}.
		 * 
		 * It can be used to create matching sorters and filters to apply the selected settings to the data.
		 * @return An object with item and subitem keys
		 */
		getSelectedFilterKeys(): any;
		/**
		 * Gets the filter string in format: "filter name (subfilter1 name, subfilter2
		 * name, ...), ...".
		 * For custom and preset filters it will only add the filter name to the resulting string.
		 * @return The selected filter string
		 */
		getSelectedFilterString(): string;
		/**
		 * ID of the element which is the current target of the association <code>selectedGroupItem</code>, or <code>null</code>.
		 * @return 
		 */
		getSelectedGroupItem(): sap.ui.core.ID;
		/**
		 * ID of the element which is the current target of the association <code>selectedPresetFilterItem</code>, or <code>null</code>.
		 * @return 
		 */
		getSelectedPresetFilterItem(): sap.ui.core.ID;
		/**
		 * ID of the element which is the current target of the association <code>selectedSortItem</code>, or <code>null</code>.
		 * @return 
		 */
		getSelectedSortItem(): sap.ui.core.ID;
		/**
		 * Gets current value of property <code>sortDescending</code>.
		 * 
		 * Determines whether the sort order is descending or ascending (default).
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>sortDescending</code>
		 */
		getSortDescending(): boolean;
		/**
		 * Gets content of aggregation <code>sortItems</code>.
		 * 
		 * The list of items with key and value that can be sorted over (for example, a list of columns for a table).
		 * @return 
		 */
		getSortItems(): ViewSettingsItem[];
		/**
		 * Gets current value of property <code>title</code>.
		 * 
		 * Defines the title of the dialog. If not set and there is only one active tab, the dialog uses the default "View" or "Sort", "Group", "Filter" respectively.
		 * @return Value of property <code>title</code>
		 */
		getTitle(): string;
		/**
		 * Forward method to the inner dialog method: hasStyleClass.
		 * @return true if the class is set, false otherwise
		 */
		hasStyleClass(): boolean;
		/**
		 * Returns true if the given style class or all multiple style classes which are generated by splitting the given string with space are already set on the control
		 * via previous call(s) to addStyleClass().
		 * @note Overload from base type sap.ui.core.Control
		 * @param sStyleClass the style to check for
		 * @return 
		 */
		hasStyleClass(sStyleClass: string): boolean;
		/**
		 * Checks for the provided <code>sap.m.ViewSettingsCustomTab</code> in the aggregation <code>customTabs</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oCustomTab The customTab whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfCustomTab(oCustomTab: ViewSettingsCustomTab): number;
		/**
		 * Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation <code>filterItems</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oFilterItem The filterItem whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfFilterItem(oFilterItem: ViewSettingsItem): number;
		/**
		 * Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation <code>groupItems</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oGroupItem The groupItem whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfGroupItem(oGroupItem: ViewSettingsItem): number;
		/**
		 * Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation <code>presetFilterItems</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oPresetFilterItem The presetFilterItem whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfPresetFilterItem(oPresetFilterItem: ViewSettingsItem): number;
		/**
		 * Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation <code>sortItems</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oSortItem The sortItem whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfSortItem(oSortItem: ViewSettingsItem): number;
		/**
		 * Inserts a customTab into the aggregation <code>customTabs</code>.
		 * @param oCustomTab the customTab to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the customTab should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the customTab is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the customTab is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertCustomTab(oCustomTab: ViewSettingsCustomTab, iIndex: number): ViewSettingsDialog;
		/**
		 * Inserts a filterItem into the aggregation <code>filterItems</code>.
		 * @param oFilterItem the filterItem to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the filterItem should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the filterItem is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the filterItem is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertFilterItem(oFilterItem: ViewSettingsItem, iIndex: number): ViewSettingsDialog;
		/**
		 * Inserts a groupItem into the aggregation <code>groupItems</code>.
		 * @param oGroupItem the groupItem to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the groupItem should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the groupItem is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the groupItem is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertGroupItem(oGroupItem: ViewSettingsItem, iIndex: number): ViewSettingsDialog;
		/**
		 * Inserts a presetFilterItem into the aggregation <code>presetFilterItems</code>.
		 * @param oPresetFilterItem the presetFilterItem to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the presetFilterItem should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the presetFilterItem is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the presetFilterItem is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertPresetFilterItem(oPresetFilterItem: ViewSettingsItem, iIndex: number): ViewSettingsDialog;
		/**
		 * Inserts a sortItem into the aggregation <code>sortItems</code>.
		 * @param oSortItem the sortItem to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the sortItem should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the sortItem is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the sortItem is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertSortItem(oSortItem: ViewSettingsItem, iIndex: number): ViewSettingsDialog;
		/**
		 * Invalidates the control (suppressed as there is no renderer).
		 */
		invalidate();
		/**
		 * Triggers rerendering of this element and its children.
		 * 
		 * As <code>sap.ui.core.Element</code> "bubbles up" the invalidate, changes to children
		 * potentially result in rerendering of the whole sub tree.
		 * @note Overload from base type sap.ui.core.Control
		 * @param oOrigin 
		 */
		invalidate(oOrigin: any);
		/**
		 * Opens the ViewSettingsDialog relative to the parent control.
		 * @param sPageId The ID of the initial page to be opened in the dialog.
		 * 	The available values are "sort", "group", "filter" or IDs of custom tabs.(optional)
		 * @return this pointer for chaining
		 */
		open(sPageId?: string): ViewSettingsDialog;
		/**
		 * Removes all the controls from the aggregation <code>customTabs</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllCustomTabs(): ViewSettingsCustomTab[];
		/**
		 * Removes all filter Items and resets the remembered page if it was a filter detail page and all of its filter items are being removed.
		 * @return this pointer for chaining
		 */
		removeAllFilterItems(): ViewSettingsDialog;
		/**
		 * Removes all the controls from the aggregation <code>groupItems</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllGroupItems(): ViewSettingsItem[];
		/**
		 * Removes all the controls from the aggregation <code>presetFilterItems</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllPresetFilterItems(): ViewSettingsItem[];
		/**
		 * Removes all the controls from the aggregation <code>sortItems</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllSortItems(): ViewSettingsItem[];
		/**
		 * Removes a customTab from the aggregation <code>customTabs</code>.
		 * @param vCustomTab The customTab to remove or its index or id
		 * @return The removed customTab or <code>null</code>
		 */
		removeCustomTab(vCustomTab: number|string|ViewSettingsCustomTab): ViewSettingsCustomTab;
		/**
		 * Removes a filter Item and resets the remembered page if it was the filter detail page of the removed filter.
		 * @param vFilterItem The filter item's index, or the item itself, or its id
		 * @return this pointer for chaining
		 */
		removeFilterItem(vFilterItem: number|ViewSettingsFilterItem|string): ViewSettingsDialog;
		/**
		 * Removes a groupItem from the aggregation <code>groupItems</code>.
		 * @param vGroupItem The groupItem to remove or its index or id
		 * @return The removed groupItem or <code>null</code>
		 */
		removeGroupItem(vGroupItem: number|string|ViewSettingsItem): ViewSettingsItem;
		/**
		 * Removes a presetFilterItem from the aggregation <code>presetFilterItems</code>.
		 * @param vPresetFilterItem The presetFilterItem to remove or its index or id
		 * @return The removed presetFilterItem or <code>null</code>
		 */
		removePresetFilterItem(vPresetFilterItem: number|string|ViewSettingsItem): ViewSettingsItem;
		/**
		 * Removes a sortItem from the aggregation <code>sortItems</code>.
		 * @param vSortItem The sortItem to remove or its index or id
		 * @return The removed sortItem or <code>null</code>
		 */
		removeSortItem(vSortItem: number|string|ViewSettingsItem): ViewSettingsItem;
		/**
		 * Forward method to the inner dialog method: removeStyleClass.
		 * @return this pointer for chaining
		 */
		removeStyleClass(): ViewSettingsDialog;
		/**
		 * Removes the given string from the list of custom style classes that have been set previously.
		 * Regular style classes like "sapUiBtn" cannot be removed.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sStyleClass the style to be removed
		 * @return Returns <code>this</code> to allow method chaining
		 */
		removeStyleClass(sStyleClass: string): sap.ui.core.Control;
		/**
		 * Forward the busy state setting to the internal dialog instance.
		 * Needed because of the not-bullet proof implementation of setBusy in sap.ui.core.Control
		 * @param bBusy The busy state flag
		 * @return this Instance for chaining
		 */
		setBusy(bBusy: boolean): ViewSettingsDialog;
		/**
		 * Set the controls busy state.
		 * @note Overload from base type sap.ui.core.Control
		 * @param bBusy The new busy state to be set
		 * @return <code>this</code> to allow method chaining
		 */
		setBusy(bBusy: boolean): sap.ui.core.Control;
		/**
		 * Sets a new value for property <code>groupDescending</code>.
		 * 
		 * Determines whether the group order is descending or ascending (default).
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bGroupDescending New value for property <code>groupDescending</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setGroupDescending(bGroupDescending: boolean): ViewSettingsDialog;
		/**
		 * Sets the selected filter object in format {key: boolean}.
		 * @param oSelectedFilterKeys A configuration object with filter item and sub item keys in the format: { key: boolean }.
		 *         Setting boolean to true will set the filter to true, false or omitting an entry will set the filter to false.
		 *         It can be used to set the dialog state based on presets.
		 * @return this pointer for chaining
		 */
		setSelectedFilterKeys(oSelectedFilterKeys: any): ViewSettingsDialog;
		/**
		 * Sets the selected group item (either by key or by item).
		 * @param vItemOrKey The selected item or the item's key string
		 * @return this pointer for chaining
		 */
		setSelectedGroupItem(vItemOrKey: ViewSettingsItem|string): ViewSettingsDialog;
		/**
		 * Sets the selected preset filter item.
		 * @param vItemOrKey The selected item or the item's key string
		 * @return this pointer for chaining
		 */
		setSelectedPresetFilterItem(vItemOrKey: ViewSettingsItem|string): ViewSettingsDialog;
		/**
		 * Sets the selected sort item (either by key or by item).
		 * @param vItemOrKey The selected item or the item's key string
		 * @return this pointer for chaining
		 */
		setSelectedSortItem(vItemOrKey: ViewSettingsItem|string): ViewSettingsDialog;
		/**
		 * Sets a new value for property <code>sortDescending</code>.
		 * 
		 * Determines whether the sort order is descending or ascending (default).
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bSortDescending New value for property <code>sortDescending</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setSortDescending(bSortDescending: boolean): ViewSettingsDialog;
		/**
		 * Sets the title of the internal dialog.
		 * @param sTitle The title text for the dialog
		 * @return this pointer for chaining
		 */
		setTitle(sTitle: string): ViewSettingsDialog;
		/**
		 * Forward method to the inner dialog method: toggleStyleClass.
		 * @return this pointer for chaining
		 */
		toggleStyleClass(): ViewSettingsDialog;
		/**
		 * The string given as "sStyleClass" will be be either added to or removed from the "class" attribute of this control's root HTML element,
		 * depending on the value of "bAdd": if bAdd is true, sStyleClass will be added.
		 * If bAdd is not given, sStyleClass will be removed if it is currently present and will be added if not present.
		 * If sStyleClass is null or empty string, the call is ignored.
		 * 
		 * See addStyleClass and removeStyleClass for further documentation.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sStyleClass the CSS class name to be added or removed
		 * @param bAdd whether sStyleClass should be added (or removed); when this parameter is not given, sStyleClass will be toggled (removed, if present, and added if not present)
		 * @return Returns <code>this</code> to allow method chaining
		 */
		toggleStyleClass(sStyleClass: string, bAdd: boolean): sap.ui.core.Control;
		/**
		 * Unbinds aggregation <code>customTabs</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindCustomTabs(): ViewSettingsDialog;
		/**
		 * Unbinds aggregation <code>filterItems</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindFilterItems(): ViewSettingsDialog;
		/**
		 * Unbinds aggregation <code>groupItems</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindGroupItems(): ViewSettingsDialog;
		/**
		 * Unbinds aggregation <code>presetFilterItems</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindPresetFilterItems(): ViewSettingsDialog;
		/**
		 * Unbinds aggregation <code>sortItems</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindSortItems(): ViewSettingsDialog;
	}

	class ViewSettingsFilterItem extends ViewSettingsItem {
		/**
		 * Constructor for a new ViewSettingsFilterItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.ViewSettingsFilterItemMetadata);
		/**
		 * Constructor for a new ViewSettingsFilterItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some item to the aggregation <code>items</code>.
		 * @param oItem the item to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addItem(oItem: ViewSettingsItem): ViewSettingsFilterItem;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>filterDetailItemsAggregationChange</code> event of this <code>sap.m.ViewSettingsFilterItem</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.ViewSettingsFilterItem</code> itself.
		 * 
		 * Let the outside world know that the filter detail aggregation was changed.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.ViewSettingsFilterItem</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachFilterDetailItemsAggregationChange(oData: any, fnFunction: any, oListener?: any): ViewSettingsFilterItem;
		/**
		 * Binds aggregation <code>items</code> to model data.
		 * 
		 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
		 * detailed description of the possible properties of <code>oBindingInfo</code>.
		 * @param oBindingInfo The binding information
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		bindItems(oBindingInfo: any): ViewSettingsFilterItem;
		/**
		 * Destroys all the items in the aggregation <code>items</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyItems(): ViewSettingsFilterItem;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>filterDetailItemsAggregationChange</code> event of this <code>sap.m.ViewSettingsFilterItem</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachFilterDetailItemsAggregationChange(fnFunction: any, oListener: any): ViewSettingsFilterItem;
		/**
		 * Creates a new subclass of class sap.m.ViewSettingsFilterItem with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.m.ViewSettingsItem.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ViewSettingsFilterItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Item with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Item
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.m.ViewSettingsItem with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
		 * @note Overload from base type sap.m.ViewSettingsItem
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ViewSettingsItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>filterDetailItemsAggregationChange</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireFilterDetailItemsAggregationChange(mArguments?: any): ViewSettingsFilterItem;
		/**
		 * Gets content of aggregation <code>items</code>.
		 * 
		 * Items that are logically grouped under this filter item. They are used to display filter details in the ViewSettingsDialog.
		 * @return 
		 */
		getItems(): ViewSettingsItem[];
		/**
		 * Gets current value of property <code>multiSelect</code>.
		 * 
		 * If set to (true), multi selection will be allowed for the items aggregation.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>multiSelect</code>
		 */
		getMultiSelect(): boolean;
		/**
		 * Checks for the provided <code>sap.m.ViewSettingsItem</code> in the aggregation <code>items</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oItem The item whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfItem(oItem: ViewSettingsItem): number;
		/**
		 * Inserts a item into the aggregation <code>items</code>.
		 * @param oItem the item to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the item should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the item is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertItem(oItem: ViewSettingsItem, iIndex: number): ViewSettingsFilterItem;
		/**
		 * Removes all the controls from the aggregation <code>items</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllItems(): ViewSettingsItem[];
		/**
		 * Removes a item from the aggregation <code>items</code>.
		 * @param vItem The item to remove or its index or id
		 * @return The removed item or <code>null</code>
		 */
		removeItem(vItem: number|string|ViewSettingsItem): ViewSettingsItem;
		/**
		 * Sets a new value for property <code>multiSelect</code>.
		 * 
		 * If set to (true), multi selection will be allowed for the items aggregation.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bMultiSelect New value for property <code>multiSelect</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setMultiSelect(bMultiSelect: boolean): ViewSettingsFilterItem;
		/**
		 * Unbinds aggregation <code>items</code> from model data.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		unbindItems(): ViewSettingsFilterItem;
	}

	class ViewSettingsItem extends sap.ui.core.Item {
		/**
		 * Constructor for a new ViewSettingsItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.ViewSettingsItemMetadata);
		/**
		 * Constructor for a new ViewSettingsItem.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId id for the new control, generated automatically if no id is given(optional)
		 * @param mSettings initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>itemPropertyChanged</code> event of this <code>sap.m.ViewSettingsItem</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.ViewSettingsItem</code> itself.
		 * 
		 * Let the outside world know that some of its properties has changed.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.ViewSettingsItem</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachItemPropertyChanged(oData: any, fnFunction: any, oListener?: any): ViewSettingsItem;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>itemPropertyChanged</code> event of this <code>sap.m.ViewSettingsItem</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachItemPropertyChanged(fnFunction: any, oListener: any): ViewSettingsItem;
		/**
		 * Creates a new subclass of class sap.m.ViewSettingsItem with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|ViewSettingsItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Item with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Item
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ItemMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>itemPropertyChanged</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>changedItem</code> of type <code>sap.m.ViewSettingsItem</code>Instance of the item that changed.</li>
		 * <li><code>propertyKey</code> of type <code>string</code>Key of the changed property.</li>
		 * <li><code>propertyValue</code> of type <code>mixed</code>Value of the changed property.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireItemPropertyChanged(mArguments?: any): ViewSettingsItem;
		/**
		 * Gets current value of property <code>selected</code>.
		 * 
		 * Selected state of the item. If set to "true", the item will be displayed as selected in the view settings dialog.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>selected</code>
		 */
		getSelected(): boolean;
		/**
		 * Sets a new value for property <code>selected</code>.
		 * 
		 * Selected state of the item. If set to "true", the item will be displayed as selected in the view settings dialog.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bSelected New value for property <code>selected</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setSelected(bSelected: boolean): ViewSettingsItem;
	}

	class Wizard extends sap.ui.core.Control {
		/**
		 * Constructor for a new Wizard.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.WizardMetadata);
		/**
		 * Constructor for a new Wizard.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds a new step to the Wizard.
		 * @param wizardStep New WizardStep to add to the Wizard
		 * @return Pointer to the control instance for chaining
		 */
		addStep(wizardStep: WizardStep): Wizard;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>complete</code> event of this <code>sap.m.Wizard</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Wizard</code> itself.
		 * 
		 * The complete event is fired when the user clicks the finish button of the Wizard.
		 * The finish button is only available on the last step of the Wizard.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Wizard</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachComplete(oData: any, fnFunction: any, oListener?: any): Wizard;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>stepActivate</code> event of this <code>sap.m.Wizard</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.Wizard</code> itself.
		 * 
		 * The StepActivated event is fired every time a new step is activated.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.Wizard</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachStepActivate(oData: any, fnFunction: any, oListener?: any): Wizard;
		/**
		 * Destroys all aggregated steps in the Wizard.
		 * @return Pointer to the control instance for chaining.
		 */
		destroySteps(): Wizard;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>complete</code> event of this <code>sap.m.Wizard</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachComplete(fnFunction: any, oListener: any): Wizard;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>stepActivate</code> event of this <code>sap.m.Wizard</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachStepActivate(fnFunction: any, oListener: any): Wizard;
		/**
		 * Discards all progress done from the given step(incl.) to the end of the wizard.
		 * The verified state of the steps is returned to the initial provided.
		 * @param step The step after which the progress is discarded.
		 * @return Pointer to the control instance for chaining.
		 */
		discardProgress(step: WizardStep): Wizard;
		/**
		 * Creates a new subclass of class sap.m.Wizard with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|WizardMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>complete</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireComplete(mArguments?: any): Wizard;
		/**
		 * Fires event <code>stepActivate</code> to attached listeners.
		 * 
		 * Expects the following event parameters:
		 * <ul>
		 * <li><code>index</code> of type <code>int</code>The index of the activated step as a parameter. One-based.</li>
		 * </ul>
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireStepActivate(mArguments?: any): Wizard;
		/**
		 * Gets current value of property <code>enableBranching</code>.
		 * 
		 * Enables the branching functionality of the Wizard.
		 * Branching gives the developer the ability to define multiple routes a user
		 * is able to take based on the input in the current step.
		 * It is up to the developer to programatically check for what is the input in the
		 * current step and set a concrete next step amongs the available subsequent steps.
		 * Note: If this property is set to false, <code>next</code> and <code>subSequentSteps</code>
		 * associations of the WizardStep control are ignored.
		 * 
		 * Default value is <code>false</code>.
		 * @return Value of property <code>enableBranching</code>
		 */
		getEnableBranching(): boolean;
		/**
		 * Returns the finish button text which will be rendered.
		 * @return The text which will be rendered in the finish button.
		 */
		getFinishButtonText(): string;
		/**
		 * Gets current value of property <code>height</code>.
		 * 
		 * Determines the height of the Wizard.
		 * 
		 * Default value is <code>100%</code>.
		 * @return Value of property <code>height</code>
		 */
		getHeight(): sap.ui.core.CSSSize;
		/**
		 * Returns the number of the last activated step in the Wizard.
		 * @return The last activated step.
		 */
		getProgress(): number;
		/**
		 * Returns the last activated step in the Wizard.
		 * @return Pointer to the control instance for chaining.
		 */
		getProgressStep(): WizardStep;
		/**
		 * Gets current value of property <code>showNextButton</code>.
		 * 
		 * Controls the visibility of the next button. The developers can choose to control the flow of the
		 * steps either through the API (with <code>nextStep</code> and <code>previousStep</code> methods) or let the user click
		 * the next button, and control it with <code>validateStep</code> or <code>invalidateStep</code> methods.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>showNextButton</code>
		 */
		getShowNextButton(): boolean;
		/**
		 * Gets content of aggregation <code>steps</code>.
		 * 
		 * The wizard steps to be included in the content of the control.
		 * @return 
		 */
		getSteps(): WizardStep[];
		/**
		 * Gets current value of property <code>width</code>.
		 * 
		 * Determines the width of the Wizard.
		 * 
		 * Default value is <code>auto</code>.
		 * @return Value of property <code>width</code>
		 */
		getWidth(): sap.ui.core.CSSSize;
		/**
		 * Goes to the given step.
		 * @param step The step to go to.
		 * @param focusFirstStepElement Defines whether the focus should be changed to the first element.
		 * @return Pointer to the control instance for chaining.
		 */
		goToStep(step: WizardStep, focusFirstStepElement: boolean): Wizard;
		/**
		 * Checks for the provided <code>sap.m.WizardStep</code> in the aggregation <code>steps</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oStep The step whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfStep(oStep: WizardStep): number;
		/**
		 * Dynamic step insertion is not yet supported.
		 */
		insertStep();
		/**
		 * Invalidates the given step.
		 * @param step The step to be invalidated.
		 * @return Pointer to the control instance for chaining.
		 */
		invalidateStep(step: WizardStep): Wizard;
		/**
		 * Validates the current step, and moves one step further.
		 * @return Pointer to the control instance for chaining.
		 */
		nextStep(): Wizard;
		/**
		 * Discards the current step and goes one step back.
		 * @return Pointer to the control instance for chaining.
		 */
		previousStep(): Wizard;
		/**
		 * Removes all steps from the Wizard.
		 * @return Pointer to the Steps that were removed.
		 */
		removeAllSteps(): sap.ui.core.Control;
		/**
		 * Dynamic step removal is not yet supported.
		 */
		removeStep();
		/**
		 * Sets a new value for property <code>enableBranching</code>.
		 * 
		 * Enables the branching functionality of the Wizard.
		 * Branching gives the developer the ability to define multiple routes a user
		 * is able to take based on the input in the current step.
		 * It is up to the developer to programatically check for what is the input in the
		 * current step and set a concrete next step amongs the available subsequent steps.
		 * Note: If this property is set to false, <code>next</code> and <code>subSequentSteps</code>
		 * associations of the WizardStep control are ignored.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>false</code>.
		 * @param bEnableBranching New value for property <code>enableBranching</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setEnableBranching(bEnableBranching: boolean): Wizard;
		/**
		 * Sets the text for the finish button. By default it is "Review".
		 * @param value The text of the finish button.
		 * @return Reference to the control instance for chaining.
		 */
		setFinishButtonText(value: string): Wizard;
		/**
		 * Sets a new value for property <code>height</code>.
		 * 
		 * Determines the height of the Wizard.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>100%</code>.
		 * @param sHeight New value for property <code>height</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setHeight(sHeight: sap.ui.core.CSSSize): Wizard;
		/**
		 * Sets the visiblity of the next button.
		 * @param value True to show the button or false to hide it.
		 * @return Reference to the control instance for chaining.
		 */
		setShowNextButton(value: boolean): Wizard;
		/**
		 * Sets a new value for property <code>width</code>.
		 * 
		 * Determines the width of the Wizard.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>auto</code>.
		 * @param sWidth New value for property <code>width</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setWidth(sWidth: sap.ui.core.CSSSize): Wizard;
		/**
		 * Validates the given step.
		 * @param step The step to be validated.
		 * @return Pointer to the control instance for chaining.
		 */
		validateStep(step: WizardStep): Wizard;
	}

	class WizardStep extends sap.ui.core.Control {
		/**
		 * Constructor for a new WizardStep.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: sap.m.WizardStepMetadata);
		/**
		 * Constructor for a new WizardStep.
		 * 
		 * 
		 * Accepts an object literal <code>mSettings</code> that defines initial
		 * property values, aggregated and associated objects as well as event handlers.
		 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
		 * @note Any overloads to support not documented metadata
		 * @param sId ID for the new control, generated automatically if no ID is given(optional)
		 * @param mSettings Initial settings for the new control(optional)
		 */
		constructor(sId?: string, mSettings?: any);
		/**
		 * Adds some content to the aggregation <code>content</code>.
		 * @param oContent the content to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addContent(oContent: sap.ui.core.Control): WizardStep;
		/**
		 * Adds some subsequentStep into the association <code>subsequentSteps</code>.
		 * @param vSubsequentStep the subsequentSteps to add; if empty, nothing is inserted
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		addSubsequentStep(vSubsequentStep: sap.ui.core.ID|WizardStep): WizardStep;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>activate</code> event of this <code>sap.m.WizardStep</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.WizardStep</code> itself.
		 * 
		 * This event is fired on next step activation from the Wizard.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.WizardStep</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachActivate(oData: any, fnFunction: any, oListener?: any): WizardStep;
		/**
		 * Attaches event handler <code>fnFunction</code> to the <code>complete</code> event of this <code>sap.m.WizardStep</code>.
		 * 
		 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
		 * otherwise it will be bound to this <code>sap.m.WizardStep</code> itself.
		 * 
		 * This event is fired after the user presses the Next button in the Wizard,
		 * or on <code>nextStep</code> method call from the app developer.
		 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
		 * @param fnFunction The function to be called when the event occurs
		 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.m.WizardStep</code> itself(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		attachComplete(oData: any, fnFunction: any, oListener?: any): WizardStep;
		/**
		 * Destroys all the content in the aggregation <code>content</code>.
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		destroyContent(): WizardStep;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>activate</code> event of this <code>sap.m.WizardStep</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachActivate(fnFunction: any, oListener: any): WizardStep;
		/**
		 * Detaches event handler <code>fnFunction</code> from the <code>complete</code> event of this <code>sap.m.WizardStep</code>.
		 * 
		 * The passed function and listener object must match the ones used for event registration.
		 * @param fnFunction The function to be called, when the event occurs
		 * @param oListener Context object on which the given function had to be called
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		detachComplete(fnFunction: any, oListener: any): WizardStep;
		/**
		 * Creates a new subclass of class sap.m.WizardStep with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|WizardStepMetadata, FNMetaImpl?: any): any;
		/**
		 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain three kinds of informations:
		 * <ul>
		 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
		 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
		 * and might contain the following information
		 * <ul>
		 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
		 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
		 * facade of the class</li>
		 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
		 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
		 * </ul>
		 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
		 * </li>
		 * 
		 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
		 * If no constructor function is given, the framework creates a default implementation that delegates all
		 * its arguments to the constructor function of the base class.
		 * </li>
		 * 
		 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
		 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
		 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
		 * make sense to use primitive values here other than to declare public constants.
		 * </li>
		 * 
		 * </ul>
		 * 
		 * The prototype object of the newly created class uses the same prototype as instances of the base class
		 * (prototype chaining).
		 * 
		 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
		 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
		 * itself.
		 * 
		 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
		 * can be specified. Instances of that class will be used to represent metadata for the newly created class
		 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
		 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
		 * @note Overload from base type sap.ui.base.Object
		 * @param sClassName name of the class to be created
		 * @param oClassInfo structured object with informations about the class(optional)
		 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
		 * @return the created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		/**
		 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
		 * and enriches it with the information contained in <code>oClassInfo</code>.
		 * 
		 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
		 * @note Overload from base type sap.ui.core.Control
		 * @param sClassName Name of the class being created
		 * @param oClassInfo Object literal with information about the class(optional)
		 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
		 * @return Created class / constructor function
		 */
		extend(sClassName: string, oClassInfo?: any|sap.ui.core.ControlMetadata, FNMetaImpl?: any): any;
		/**
		 * Fires event <code>activate</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireActivate(mArguments?: any): WizardStep;
		/**
		 * Fires event <code>complete</code> to attached listeners.
		 * @param mArguments The arguments to pass along with the event(optional)
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		fireComplete(mArguments?: any): WizardStep;
		/**
		 * Gets content of aggregation <code>content</code>.
		 * 
		 * The content of the Wizard Step.
		 * @return 
		 */
		getContent(): sap.ui.core.Control[];
		/**
		 * Gets current value of property <code>icon</code>.
		 * 
		 * Determines the icon that is displayed for this step.
		 * The icon is visualized in the progress navigation part of the Wizard control.
		 * <b>Note:</b> In order for the icon to be displayed, each step in the Wizard should have
		 * this property defined, otherwise the default numbering will be displayed.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>icon</code>
		 */
		getIcon(): sap.ui.core.URI;
		/**
		 * ID of the element which is the current target of the association <code>nextStep</code>, or <code>null</code>.
		 * @return 
		 */
		getNextStep(): sap.ui.core.ID;
		/**
		 * Returns array of IDs of the elements which are the current targets of the association <code>subsequentSteps</code>.
		 * @return 
		 */
		getSubsequentSteps(): sap.ui.core.ID[];
		/**
		 * Gets current value of property <code>title</code>.
		 * 
		 * Determines the title of the step.
		 * The title is visualized in the Wizard control.
		 * 
		 * Default value is <code></code>.
		 * @return Value of property <code>title</code>
		 */
		getTitle(): string;
		/**
		 * Gets current value of property <code>validated</code>.
		 * 
		 * Indicates whether or not the step is validated.
		 * When a step is validated a Next button is visualized in the Wizard control.
		 * 
		 * Default value is <code>true</code>.
		 * @return Value of property <code>validated</code>
		 */
		getValidated(): boolean;
		/**
		 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.
		 * and returns its index if found or -1 otherwise.
		 * @param oContent The content whose index is looked for
		 * @return The index of the provided control in the aggregation if found, or -1 otherwise
		 */
		indexOfContent(oContent: sap.ui.core.Control): number;
		/**
		 * Inserts a content into the aggregation <code>content</code>.
		 * @param oContent the content to insert; if empty, nothing is inserted
		 * @param iIndex the <code>0</code>-based index the content should be inserted at; for
		 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
		 *              greater than the current size of the aggregation, the content is inserted at
		 *              the last position
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		insertContent(oContent: sap.ui.core.Control, iIndex: number): WizardStep;
		/**
		 * Removes all the controls from the aggregation <code>content</code>.
		 * 
		 * Additionally, it unregisters them from the hosting UIArea.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllContent(): sap.ui.core.Control[];
		/**
		 * Removes all the controls in the association named <code>subsequentSteps</code>.
		 * @return An array of the removed elements (might be empty)
		 */
		removeAllSubsequentSteps(): sap.ui.core.ID[];
		/**
		 * Removes a content from the aggregation <code>content</code>.
		 * @param vContent The content to remove or its index or id
		 * @return The removed content or <code>null</code>
		 */
		removeContent(vContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
		/**
		 * Removes an subsequentStep from the association named <code>subsequentSteps</code>.
		 * @param vSubsequentStep The subsequentStep to be removed or its index or ID
		 * @return The removed subsequentStep or <code>null</code>
		 */
		removeSubsequentStep(vSubsequentStep: number|sap.ui.core.ID|WizardStep): sap.ui.core.ID;
		/**
		 * Sets a new value for property <code>icon</code>.
		 * 
		 * Determines the icon that is displayed for this step.
		 * The icon is visualized in the progress navigation part of the Wizard control.
		 * <b>Note:</b> In order for the icon to be displayed, each step in the Wizard should have
		 * this property defined, otherwise the default numbering will be displayed.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sIcon New value for property <code>icon</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setIcon(sIcon: sap.ui.core.URI): WizardStep;
		/**
		 * Sets the associated <code>nextStep</code>.
		 * @param oNextStep ID of an element which becomes the new target of this nextStep association; alternatively, an element instance may be given
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setNextStep(oNextStep: sap.ui.core.ID|WizardStep): WizardStep;
		/**
		 * Sets a new value for property <code>title</code>.
		 * 
		 * Determines the title of the step.
		 * The title is visualized in the Wizard control.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code></code>.
		 * @param sTitle New value for property <code>title</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setTitle(sTitle: string): WizardStep;
		/**
		 * Sets a new value for property <code>validated</code>.
		 * 
		 * Indicates whether or not the step is validated.
		 * When a step is validated a Next button is visualized in the Wizard control.
		 * 
		 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
		 * 
		 * Default value is <code>true</code>.
		 * @param bValidated New value for property <code>validated</code>
		 * @return Reference to <code>this</code> in order to allow method chaining
		 */
		setValidated(bValidated: boolean): WizardStep;
	}

	interface ActionListItemMetadata extends sap.m.ListItemBaseMetadata {
		/**
		 * Defines the text that appears in the control.
		 */
		text?: string;
	}

	interface ActionSheetMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * The ActionSheet behaves as a sap.m.Popover in iPad and this property is the information about on which side will the popover be placed at. Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right, sap.m.PlacementType.Top, sap.m.PlacementType.Bottom, sap.m.PlacementType.Horizontal, sap.m.PlacementType.HorizontalPreferedLeft, sap.m.PlacementType.HorizontalPreferedRight, sap.m.PlacementType.Vertical, sap.m.PlacementType.VerticalPreferedTop, sap.m.PlacementType.VerticalPreferedBottom. The default value is sap.m.PlacementType.Bottom.
		 * @default Bottom
		 */
		placement?: sap.m.PlacementType;
		/**
		 * If this is set to true, there will be a cancel button shown below the action buttons. There won't be any cancel button shown in iPad regardless of this property. The default value is set to true.
		 * @default true
		 */
		showCancelButton?: boolean;
		/**
		 * This is the text displayed in the cancelButton. Default value is "Cancel", and it's translated according to the current locale setting. This property will be ignored when running either in iPad or showCancelButton is set to false.
		 */
		cancelButtonText?: string;
		/**
		 * Title will be shown in the header area in iPhone and every Android devices. This property will be ignored in tablets and desktop browser.
		 */
		title?: string;
		/**
		 * This event will be fired before the ActionSheet is opened.
		 */
		beforeOpen?: () => void;
		/**
		 * This event will be fired after the ActionSheet is opened.
		 */
		afterOpen?: () => void;
		/**
		 * This event will be fired before the ActionSheet is closed.
		 */
		beforeClose?: () => void;
		/**
		 * This event will be fired after the ActionSheet is closed.
		 */
		afterClose?: () => void;
		/**
		 * This event is fired when the cancelButton is clicked. For iPad, this event is also fired when showCancelButton is set to true, and Popover is closed by clicking outside.
		 */
		cancelButtonPress?: () => void;
	}

	interface AppMetadata extends sap.m.NavContainerMetadata {
		/**
		 * The icon to be displayed on the home screen of iOS devices after the user does "add to home screen".
		 * 
		 * Note that only the first attempt to set the homeIcon will be executed, subsequent settings are ignored.
		 * 
		 * This icon must be in PNG format. The property can either hold the URL of one single icon which is used for all devices (and possibly scaled, which looks not perfect), or an object holding icon URLs for the different required sizes.
		 * 
		 * A desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires an object to be given and the "icon" property of this object then defines the desktop bookmark icon. For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all browsers. ICO is also preferred for this desktop icon setting because the file can contain different images for different resolutions.
		 * 
		 * One example is:
		 * 
		 * app.setHomeIcon({
		 * 'phone':'phone-icon.png',
		 * 'phone@2':'phone-retina.png',
		 * 'tablet':'tablet-icon.png',
		 * 'tablet@2':'tablet-retina.png',
		 * 'icon':'desktop.ico'
		 * });
		 * 
		 * The respective image sizes are 57/114 px for the phone and 72/144 px for the tablet.
		 * If an object is given but one of the sizes is not given, the largest given icon will be used for this size.
		 * 
		 * On Android these icons may or may not be used by the device. Apparently chances can be improved by adding glare effect and rounded corners, setting the file name so it ends with "-precomposed.png" and setting the "homeIconPrecomposed" property to "true".
		 */
		homeIcon?: any;
		/**
		 * Background color of the App. If set, this color will override the default background defined by the theme. So this should only be set when really required.
		 * Any configured background image will be placed above this colored background. But any theme adaptation in the Theme Designer will override this setting.
		 * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete App or whether it should be tiled.
		 */
		backgroundColor?: string;
		/**
		 * Background image of the App. If set, this image will override the default background defined by the theme. So this should only be set when really required.
		 * This background image will be placed above any color set for the background. But any theme adaptation in the Theme Designer will override this image setting.
		 * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete App or whether it should be tiled.
		 */
		backgroundImage?: sap.ui.core.URI;
		/**
		 * Whether the background image (if configured) should be proportionally stretched to cover the whole App (false) or whether it should be tiled (true).
		 * @default false
		 */
		backgroundRepeat?: boolean;
		/**
		 * Opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 fully opaque).
		 * This can be used to make the application content better readable by making the background image partly transparent.
		 * @default 1
		 */
		backgroundOpacity?: number;
	}

	interface BarMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Determines the design of the bar. If set to auto, it becomes dependent on the place where the bar is placed.
		 * @default Auto
		 */
		design?: sap.m.BarDesign;
	}

	interface BreadcrumbsMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Determines the text of current/last element in the Breadcrumbs path.
		 */
		currentLocationText?: string;
	}

	interface BusyDialogMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Optional text displayed inside the dialog.
		 * @default 
		 */
		text?: string;
		/**
		 * Sets the title of the BusyDialog. The default value is an empty string.
		 * @default 
		 */
		title?: string;
		/**
		 * Icon, used from the BusyIndicator. This icon is invisible in iOS platform and it is density aware. You can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density screens.
		 * @default 
		 */
		customIcon?: sap.ui.core.URI;
		/**
		 * Defines the rotation speed of the given image. If GIF file is used, the speed has to be set to 0. The value is in milliseconds.
		 * @default 1000
		 */
		customIconRotationSpeed?: number;
		/**
		 * If this is set to <code>false</code>, the source image will be loaded directly without attempting to fetch the density perfect image for high density devices.
		 * By default, this is set to <code>true</code> but then one or more requests are sent trying to get the density perfect version of the image.
		 * 
		 * If bandwidth is the key for the application, set this value to <code>false</code>.
		 * @default true
		 */
		customIconDensityAware?: boolean;
		/**
		 * Width of the provided icon with default value "44px".
		 * @default 44px
		 */
		customIconWidth?: sap.ui.core.CSSSize;
		/**
		 * Height of the provided icon with default value "44px".
		 * @default 44px
		 */
		customIconHeight?: sap.ui.core.CSSSize;
		/**
		 * The text of the cancel button. The default text is "Cancel" (translated to the respective language).
		 * @default 
		 */
		cancelButtonText?: string;
		/**
		 * Indicates if the cancel button will be rendered inside the busy dialog. The default value is set to <code>false</code>.
		 * @default false
		 */
		showCancelButton?: boolean;
		/**
		 * Fires when the busy dialog is closed.
		 * @param cancelPressed Indicates if the close events are triggered by a user, pressing a cancel button or because the operation was terminated.
		 * This parameter is set to true if the close event is fired by user interaction.
		 */
		close?: (cancelPressed: boolean) => void;
	}

	interface BusyIndicatorMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Defines text to be displayed below the busy indicator.
		 * It can be used to inform the user of the current operation.
		 * @default 
		 */
		text?: string;
		/**
		 * Options for the text direction are RTL and LTR.
		 * Alternatively, the control can inherit the text direction from its parent container.
		 * @default Inherit
		 */
		textDirection?: sap.ui.core.TextDirection;
		/**
		 * Icon URL if an icon is used as the busy indicator.
		 * @default 
		 */
		customIcon?: sap.ui.core.URI;
		/**
		 * Defines the rotation speed of the given image.
		 * If a .gif is used, the speed has to be set to 0.
		 * The unit is in ms.
		 * <b>Note:</b> Values are considered valid when greater than or equal to 0.
		 * If invalid value is provided the speed defaults to 0.
		 * @default 1000
		 */
		customIconRotationSpeed?: number;
		/**
		 * If this is set to false, the src image will be loaded directly without attempting
		 * to fetch the density perfect image for high density device.
		 * By default, this is set to true but then one or more requests are sent to the server,
		 * trying to get the density perfect version of the specified image.
		 * If bandwidth is the key for the application, set this value to false.
		 * @default true
		 */
		customIconDensityAware?: boolean;
		/**
		 * Width of the provided icon. By default 44px are used.
		 * @default 44px
		 */
		customIconWidth?: sap.ui.core.CSSSize;
		/**
		 * Height of the provided icon. By default 44px are used.
		 * @default 44px
		 */
		customIconHeight?: sap.ui.core.CSSSize;
		/**
		 * Defines the size of the busy indicator.
		 * The animation consists of three circles, each of which will be this size.
		 * Therefore the total width of the control amounts to three times the given size.
		 * @default 1rem
		 */
		size?: sap.ui.core.CSSSize;
	}

	interface ButtonMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Button text
		 */
		text?: string;
		/**
		 * Type of a button (e.g. Default, Accept, Reject, Back, etc.)
		 * @default Default
		 */
		type?: sap.m.ButtonType;
		/**
		 * Defines the width of the button.
		 */
		width?: sap.ui.core.CSSSize;
		/**
		 * Boolean property to enable the control (default is true). Buttons that are disabled have other colors than enabled ones, depending on custom settings
		 * @default true
		 */
		enabled?: boolean;
		/**
		 * Icon to be displayed as graphical element within the button. This can be an image or an icon from the icon font.
		 */
		icon?: sap.ui.core.URI;
		/**
		 * If set to true (default), the display sequence is 1. icon 2. control text
		 * @default true
		 */
		iconFirst?: boolean;
		/**
		 * The source property of an alternative icon for the active (depressed) state of the button.
		 * Both active and default icon properties should be defined and have the same type: image or icon font.
		 * If the <code>icon</code> property is not set or has a different type, the active icon is not displayed.
		 */
		activeIcon?: sap.ui.core.URI;
		/**
		 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
		 * 
		 * If only one version of image is provided, set this value to false to avoid the attempt of fetching density perfect image.
		 * @default true
		 */
		iconDensityAware?: boolean;
		/**
		 * This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * @default Inherit
		 */
		textDirection?: sap.ui.core.TextDirection;
		/**
		 * Event is fired when the user clicks on the control.
		 */
		press?: () => void;
	}

	interface CarouselMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * The height of the carousel. Note that when a percentage value is used, the height of the surrounding container must be defined.
		 * @default 100%
		 */
		height?: sap.ui.core.CSSSize;
		/**
		 * The width of the carousel. Note that when a percentage value is used, the height of the surrounding container must be defined.
		 * @default 100%
		 */
		width?: sap.ui.core.CSSSize;
		/**
		 * Defines whether the carousel should loop, i.e show the first page after the last page is reached and vice versa.
		 * @default false
		 */
		loop?: boolean;
		/**
		 * Show or hide carousel's page indicator.
		 * @default true
		 */
		showPageIndicator?: boolean;
		/**
		 * Defines where the carousel's page indicator is displayed. Possible values are sap.m.PlacementType.Top, sap.m.PlacementType.Bottom. Other values are ignored and the default value will be applied. The default value is sap.m.PlacementType.Bottom.
		 * @default Bottom
		 */
		pageIndicatorPlacement?: sap.m.PlacementType;
		/**
		 * This event is fired after a carousel swipe has been completed. It is triggered both by physical swipe events and through API carousel manipulations such as calling 'next', 'previous' or 'setActivePageId' functions.
		 * @param oldActivePageId Id of the page which was active before the page change.
		 * @param newActivePageId Id of the page which is active after the page change.
		 */
		pageChanged?: (oldActivePageId: string, newActivePageId: string) => void;
	}

	interface CheckBoxMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Stores the state of the checkbox whether it is selected or not.
		 * @default false
		 */
		selected?: boolean;
		/**
		 * Disables the Checkbox. Disabled controls are not interactive and are rendered differently according to the theme.
		 * @default true
		 */
		enabled?: boolean;
		/**
		 * The 'name' property to be used in the HTML code, for example for HTML forms that send data to the server via submit.
		 */
		name?: string;
		/**
		 * Defines the text displayed next to the checkbox
		 */
		text?: string;
		/**
		 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
		 * @default Inherit
		 */
		textDirection?: sap.ui.core.TextDirection;
		/**
		 * Aligns the text of the checkbox. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
		 * @default Begin
		 */
		textAlign?: sap.ui.core.TextAlign;
		/**
		 * Width of the checkbox`s label
		 * @default 
		 */
		width?: sap.ui.core.CSSSize;
		/**
		 * Flag to switch on activeHandling, when it is switched off, there will be no visual changes on active state. Default value is 'true'
		 * @default true
		 */
		activeHandling?: boolean;
		/**
		 * Specifies whether the user shall be allowed to edit the state of the checkbox
		 * @default true
		 */
		editable?: boolean;
		/**
		 * Accepts the core enumeration ValueState.type that supports 'None', 'Error', 'Warning' and 'Success'.
		 * @default None
		 */
		valueState?: sap.ui.core.ValueState;
		/**
		 * Event is triggered when the control status is changed by the user by selecting or deselecting the checkbox.
		 * @param selected Checks whether the CheckBox is marked or not .
		 */
		select?: (selected: boolean) => void;
	}

	interface ColumnMetadata {
		/**
		 * Defines the width of the column. If you leave it empty then this column covers the remaining space.
		 */
		width?: sap.ui.core.CSSSize;
		/**
		 * Horizontal alignment of the column content. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
		 * 
		 * NOTE: Control with a "textAlign" property inherits the horizontal alignment.
		 * @default Begin
		 */
		hAlign?: sap.ui.core.TextAlign;
		/**
		 * Vertical alignment of the cells in a column. Possible values are "Inherit", "Top", "Middle", "Bottom"
		 * This property does not affect the vertical alignment of header and footer.
		 * @default Inherit
		 */
		vAlign?: sap.ui.core.VerticalAlign;
		/**
		 * CSS class name for column contents(header, cells and footer of column). This property can be used for different column styling. If column is shown as pop-in then this class name is applied to related pop-in row.
		 */
		styleClass?: string;
		/**
		 * Specifies whether or not the column is visible. Invisible columns are not rendered.
		 * @default true
		 */
		visible?: boolean;
		/**
		 * By default column is always shown. If you set this property, control checks the minimum width of the screen to show or hide this column.
		 * As you can give specific CSS sizes(e.g: "480px" or "40em"), you can also use sap.m.ScreenSize enumeration(e.g: "Phone", "Tablet", "Desktop", "Small", "Medium", "Large", ....).
		 * 
		 * sap.m.Column.MediaQuery1->Range1 = 199
		 * 
		 * This property can be used for responsive design. e.g: "40em"(or "640px" or "Tablet") setting shows this column in iPad(and Desktop) but hides in iPhone.
		 * Please also see "demandPopin" property
		 */
		minScreenWidth?: string;
		/**
		 * According to your minScreenWidth settings, the column can be hidden in different screen sizes.
		 * Setting this property to true, shows this column as pop-in instead of hiding it.
		 * @default false
		 */
		demandPopin?: boolean;
		/**
		 * Defines enumerated display options for the pop-in.
		 * @default Block
		 */
		popinDisplay?: sap.m.PopinDisplay;
		/**
		 * Set "true" to merge repeating cells(duplicates) into one cell block.
		 * Please see "mergeFunctionName" property to customize this property.
		 * Note: This feature must not be used together with two-way binding. This property is ignored if a column is shown in the pop-in.
		 * @default false
		 */
		mergeDuplicates?: boolean;
		/**
		 * Defines the value getter(serialization) function if "mergeDuplicates" property is set "true"
		 * Control itself uses this function to compare values of two repeating cells.
		 * Default value "getText" is suitable for Label and Text control.
		 * e.g. For "Icon" control "getSrc" can be used.
		 * Note: You can pass one string parameter to given function after "#" sign. e.g. "data#myparameter"
		 * @default getText
		 */
		mergeFunctionName?: string;
	}

	interface ColumnListItemMetadata extends sap.m.ListItemBaseMetadata {
		/**
		 * Sets the vertical alignment of all the cells within the table row (including selection and navigation).
		 * <b>Note:</b> <code>vAlign</code> property of <code>sap.m.Column</code> overrides the property for cell vertical alignment if both are set.
		 * @default Inherit
		 */
		vAlign?: sap.ui.core.VerticalAlign;
	}

	interface ComboBoxMetadata extends sap.m.ComboBoxBaseMetadata {
		/**
		 * Key of the selected item.
		 * 
		 * <b>Note:</b> If duplicate keys exist, the first item matching the key is used.
		 * @default 
		 */
		selectedKey?: string;
		/**
		 * ID of the selected item.
		 * @default 
		 */
		selectedItemId?: string;
		/**
		 * Indicates whether the text values of the <code>additionalText</code> property of a
		 * {@link sap.ui.core.ListItem} are shown.
		 * @default false
		 */
		showSecondaryValues?: boolean;
		/**
		 * This event is fired when the user types something that matches with an item in the list;
		 * it is also fired when the user presses on a list item, or when navigating via keyboard.
		 * @param selectedItem The selected item.
		 */
		selectionChange?: (selectedItem: sap.ui.core.Item) => void;
	}

	interface ComboBoxBaseMetadata extends sap.m.ComboBoxTextFieldMetadata {
		/**
		 * This event is fired when the end user moves the cursor to the text field, performs
		 * an action that requires items to be loaded, and items are not already loaded. For example,
		 * pressing F4 to open the dropdown list or typing something in the text field fires the event.
		 * 
		 * <b>Note:</b> We strongly recommend to only use this feature in performance critical scenarios.
		 * Loading the items lazily (on demand) to defer initialization has several implications for the end user
		 * experience. For example, the busy indicator has to be shown while the items are being loaded and
		 * assistive technology software also has to announce the state changes (which may be confusing
		 * for some screen reader users).
		 * 
		 * <b>Note</b>: Currently the <code>sap.m.MultiComboBox</code> does not support this event.
		 */
		loadItems?: () => void;
	}

	interface ComboBoxTextFieldMetadata extends sap.m.InputBaseMetadata {
		/**
		 * Sets the maximum width of the text field.
		 * @default 100%
		 */
		maxWidth?: sap.ui.core.CSSSize;
		/**
		 * Indicates whether the dropdown arrow button is shown.
		 * @default true
		 */
		showButton?: boolean;
	}

	interface DatePickerMetadata extends sap.m.InputBaseMetadata {
		/**
		 * The date is displayed in the input field using this format. By default, the medium format of the used locale is used.
		 * 
		 * Supported format options are pattern-based on Unicode LDML Date Format notation. {@link http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}
		 * <b>Note:</b> If you use data binding on the <code>value</code> property with type <code>sap.ui.model.type.Date</code> this property will be ignored.
		 * The format defined in the binding will be used.
		 */
		displayFormat?: string;
		/**
		 * The date string expected and returned in the <code>value</code> property uses this format. By default the short format of the used locale is used.
		 * 
		 * 
		 * Supported format options are pattern-based on Unicode LDML Date Format notation. {@link http://unicode.org/reports/tr35/#Date_Field_Symbol_Table}
		 * 
		 * For example, if the date string represents an ABAP DATS type, the format should be "yyyyMMdd".
		 * 
		 * <b>Note:</b> If data binding on <code>value</code> property with type <code>sap.ui.model.type.Date</code> is used, this property will be ignored.
		 * The format defined in the binding will be used.
		 */
		valueFormat?: string;
		/**
		 * The date as JavaScript Date object. This is independent from any formatter.
		 * 
		 * <b>Note:</b> If this property is used, the <code>value</code> property should not be changed from the caller.
		 */
		dateValue?: any;
		/**
		 * Displays date in this given type in input field. Default value is taken from locale settings.
		 * Accepted are values of <code>sap.ui.core.CalendarType</code> or an empty string. If no type is set, the default type of the
		 * configuration is used.
		 * <b>Note:</b> If data binding on <code>value</code> property with type <code>sap.ui.model.type.Date</code> is used, this property will be ignored.
		 * @default 
		 */
		displayFormatType?: string;
		/**
		 * If set, the days in the calendar popup are also displayed in this calendar type
		 * If not set, the dates are only displayed in the primary calendar type
		 */
		secondaryCalendarType?: sap.ui.core.CalendarType;
		/**
		 * Minimum date that can be shown and selected in the <code>DatePicker</code>. This must be a JavaScript date object.
		 * 
		 * <b>Note:</b> If the <code>minDate</code> is set to be after the <code>maxDate</code>,
		 * the <code>maxDate</code> and the <code>minDate</code> are switched before rendering.
		 */
		minDate?: any;
		/**
		 * Maximum date that can be shown and selected in the <code>DatePicker</code>. This must be a JavaScript date object.
		 * 
		 * <b>Note:</b> If the <code>maxDate</code> is set to be before the <code>minDate</code>,
		 * the <code>maxDate</code> and the <code>minDate</code> are switched before rendering.
		 */
		maxDate?: any;
	}

	interface DateRangeSelectionMetadata extends sap.m.DatePickerMetadata {
		/**
		 * Delimiter between start and end date. Default value is "-".
		 * If no delimiter is given, the one defined for the used locale is used.
		 * @default -
		 */
		delimiter?: string;
		/**
		 * The end date of the range as JavaScript Date object. This is independent from any formatter.
		 * 
		 * <b>Note:</b> If this property is used, the <code>value</code> property should not be changed from the caller.
		 */
		secondDateValue?: any;
	}

	interface DialogMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Icon displayed in the dialog's header. This icon is invisible on the iOS platform and it's density aware. You can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density screen.
		 */
		icon?: sap.ui.core.URI;
		/**
		 * Title text appears in the dialog header.
		 */
		title?: string;
		/**
		 * Determines whether the header is shown inside the dialog. If this property is set to true, the text and icon property are ignored. This property has a default value true.
		 * @default true
		 */
		showHeader?: boolean;
		/**
		 * The type of the dialog. In theme sap_bluecrystal, the type "message" will limit the dialog's width within 480px on tablet and desktop.
		 * @default Standard
		 */
		type?: sap.m.DialogType;
		/**
		 * The state affects the icon and the title color. If other than "None" is set, a predefined icon will be added to the dialog. Setting icon property will overwrite the predefined icon. The default value is "None" which doesn't add any icon to the Dialog control. This property is by now only supported by blue crystal theme.
		 * @default None
		 */
		state?: sap.ui.core.ValueState;
		/**
		 * Determines  if the dialog will be stretched to full screen. This property is only applicable to standard dialog and message type dialog ignores this property.
		 * @default false
		 */
		stretch?: boolean;
		/**
		 * Preferred width of content in Dialog. This property affects the width of dialog on phone in landscape mode, tablet or desktop, because the dialog has a fixed width on phone in portrait mode. If the preferred width is less than the minimum width of dilaog or more than the available width of the screen, it will be overwritten by the min or max value. The current mininum value of dialog width on tablet is 400px.
		 */
		contentWidth?: sap.ui.core.CSSSize;
		/**
		 * Preferred height of content in Dialog. If the preferred height is bigger than the available space on screen, it will be overwritten by the maximum available height on screen in order to make sure that dialog isn't cut off.
		 */
		contentHeight?: sap.ui.core.CSSSize;
		/**
		 * Indicates if user can scroll horizontally inside dialog when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the dialog, this property needs to be set to false to disable the scrolling in dialog in order to make the scrolling in the child control work properly.
		 * Dialog detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to dialog. If there is, dialog will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
		 * @default true
		 */
		horizontalScrolling?: boolean;
		/**
		 * Indicates if user can scroll vertically inside dialog when the content is bignger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the dialog, this property needs to be set to false to disable the scrolling in dialog in order to make the scrolling in the child control work properly.
		 * Dialog detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to dialog. If there is, dialog will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
		 * @default true
		 */
		verticalScrolling?: boolean;
		/**
		 * Indicates whether the dialog is resizable. the dialog is resizable. If this property is set to true, the dialog will have a resize handler in it's bottom right corner. This property has a default value false. The Dialog can be resizable only in desktop mode.
		 * @default false
		 */
		resizable?: boolean;
		/**
		 * Indicates whether the dialog is draggable. If this property is set to true, the dialog will be draggable by it's header. This property has a default value false. The Dialog can be draggable only in desktop mode.
		 * @default false
		 */
		draggable?: boolean;
		/**
		 * This event will be fired before the dialog is opened.
		 */
		beforeOpen?: () => void;
		/**
		 * This event will be fired after the dialog is opened.
		 */
		afterOpen?: () => void;
		/**
		 * This event will be fired before the dialog is closed.
		 * @param origin This indicates the trigger of closing the dialog. If dialog is closed by either leftButton or rightButton, the button that closes the dialog is set to this parameter. Otherwise this parameter is set to null.
		 */
		beforeClose?: (origin: sap.m.Button) => void;
		/**
		 * This event will be fired after the dialog is closed.
		 * @param origin This indicates the trigger of closing the dialog. If dialog is closed by either leftButton or rightButton, the button that closes the dialog is set to this parameter. Otherwise this parameter is set to null.
		 */
		afterClose?: (origin: sap.m.Button) => void;
	}

	interface DisplayListItemMetadata extends sap.m.ListItemBaseMetadata {
		/**
		 * Defines the label of the list item.
		 */
		label?: string;
		/**
		 * Defines the value of the list item.
		 */
		value?: string;
		/**
		 * Defines the <code>value</code> text directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * @default Inherit
		 */
		valueTextDirection?: sap.ui.core.TextDirection;
	}

	interface DraftIndicatorMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * State of the indicator. Could be "Saving", "Saved" and "Clear".
		 * @default Clear
		 */
		state?: sap.m.DraftIndicatorState;
		/**
		 * Minimum time in milliseconds for showing the draft indicator
		 * @default 1500
		 */
		minDisplayTime?: number;
	}

	interface FacetFilterMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * If set to <code>true</code> and the FacetFilter type is <code>Simple</code>, then the Add Facet icon will be displayed and each facet button will also have a Facet Remove icon displayed beside it, allowing the user to deactivate the facet.
		 * @default false
		 */
		showPersonalization?: boolean;
		/**
		 * Defines the default appearance of the FacetFilter on the device. Possible values are <code>Simple</code> (default) and <code>Light</code>.
		 * @default Simple
		 */
		type?: sap.m.FacetFilterType;
		/**
		 * Enables/disables live search on all search fields except for the FacetFilterList search.
		 * @default true
		 */
		liveSearch?: boolean;
		/**
		 * Shows the summary bar instead of the FacetFilter buttons bar when set to <code>true</code>.
		 * @default false
		 */
		showSummaryBar?: boolean;
		/**
		 * Shows/hides the FacetFilter Reset button.
		 * @default true
		 */
		showReset?: boolean;
		/**
		 * If set to <code>true</code>, an OK button is displayed for every FacetFilterList popover. This button allows the user to close the popover from within the popover instead of having to click outside of it.
		 * @default false
		 */
		showPopoverOKButton?: boolean;
		/**
		 * Fired when the Reset button is pressed to inform that all FacetFilterLists need to be reset.
		 */
		reset?: () => void;
		/**
		 * Fired when the user confirms filter selection.
		 */
		confirm?: () => void;
	}

	interface FacetFilterItemMetadata extends sap.m.ListItemBaseMetadata {
		/**
		 * Can be used as input for subsequent actions.
		 */
		key?: string;
		/**
		 * Determines the text to be displayed for the item.
		 */
		text?: string;
	}

	interface FacetFilterListMetadata extends sap.m.ListMetadata {
		/**
		 * Defines the title of the facet. The facet title is displayed on the facet button when the FacetFilter type is set to <code>Simple</code>. It is also displayed as a list item in the facet page of the dialog.
		 */
		title?: string;
		/**
		 * If set to <code>true</code>, the item text wraps when it is too long.
		 * @default false
		 */
		wordWrap?: boolean;
		/**
		 * Indicates that the list is displayed as a button when the FacetFilter type is set to <code>Simple</code>.
		 * @default true
		 */
		active?: boolean;
		/**
		 * If set to <code>true</code>, enables case-insensitive search for OData.
		 * @default false
		 */
		enableCaseInsensitiveSearch?: boolean;
		/**
		 * Determines the number of objects that match this item in the target data set when all filter items are selected.
		 */
		allCount?: number;
		/**
		 * Sequence that determines the order in which FacetFilterList is shown on the FacetFilter. Lists are rendered by ascending order of sequence.
		 * @default -1
		 */
		sequence?: number;
		/**
		 * Unique identifier for this filter list.
		 */
		key?: string;
		/**
		 * Specifies whether remove icon for facet is visible or hidden.
		 * @default true
		 */
		showRemoveFacetIcon?: boolean;
		/**
		 * Retains the list sequence if it is inactive and made active again.
		 * @default false
		 */
		retainListSequence?: boolean;
		/**
		 * FacetFilterList data type. Only String data type will provide search function.
		 * @default String
		 */
		dataType?: sap.m.FacetFilterListDataType;
		/**
		 * Fired before the filter list is opened.
		 */
		listOpen?: () => void;
		/**
		 * Triggered after the list of items is closed.
		 * @param selectedItems Array of selected items. Items returned are only copies and therefore can only be used to read properties, not set them.
		 * @param allSelected <code>True</code> if the select All checkbox is selected. This will be <code>false</code> if all items are actually selected (every FacetFilterItem.selected == true). In that case selectedItems will contain all selected items.
		 * @param selectedKeys Associative array containing the keys of selected FacetFilterItems. Unlike the selectedItems parameter, this contains only the keys for all selected items, not the items themselves. Being an associative array, each object property is the FacetFilterItem key value and the value of the property is the FacetFilterItem text.
		 */
		listClose?: (selectedItems: sap.m.FacetFilterItem[], allSelected: boolean, selectedKeys: any) => void;
	}

	interface FeedContentMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * The content text.
		 */
		contentText?: string;
		/**
		 * The subheader.
		 */
		subheader?: string;
		/**
		 * The actual value.
		 */
		value?: string;
		/**
		 * The semantic color of the value.
		 */
		valueColor?: sap.m.ValueColor;
		/**
		 * The number of characters to display for the value property.
		 * @default 4
		 */
		truncateValueTo?: number;
		/**
		 * The event is fired when the user chooses the feed content.
		 */
		press?: () => void;
	}

	interface FeedInputMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Set this flag to "false" to disable both text input and post button.
		 * @default true
		 */
		enabled?: boolean;
		/**
		 * The maximum length (the maximum number of characters) for the feed input's value. By default this is not limited.
		 * @default 0
		 */
		maxLength?: number;
		/**
		 * The placeholder text shown in the input area as long as the user has not entered any text value.
		 * @default Post something here
		 */
		placeholder?: string;
		/**
		 * The text value of the feed input. As long as the user has not entered any text the post button is disabled
		 */
		value?: string;
		/**
		 * Icon to be displayed as a graphical element within the feed input. This can be an image or an icon from the icon font.
		 */
		icon?: sap.ui.core.URI;
		/**
		 * If set to "true" (default), icons will be displayed. In case no icon is provided the standard placeholder will be displayed. if set to "false" icons are hidden
		 * @default true
		 */
		showIcon?: boolean;
		/**
		 * Some mobile devices support higher resolution images while others do not. Therefore, you should provide image resources for all relevant densities.
		 * If the property is set to "true", one or more requests are sent to the server to try and get the perfect density version of an image. If an image of a certain density is not available, the image control falls back to the default image, which should be provided.
		 * 
		 * If you do not have higher resolution images, you should set the property to "false" to avoid unnecessary round-trips.
		 * 
		 * Please be aware that this property is relevant only for images and not for icons.
		 * @default true
		 */
		iconDensityAware?: boolean;
		/**
		 * Sets a new tooltip for Submit button. The tooltip can either be a simple string (which in most cases will be rendered as the title attribute of this element)
		 * or an instance of sap.ui.core.TooltipBase.
		 * If a new tooltip is set, any previously set tooltip is deactivated.
		 * The default value is set language dependent.
		 * @default Submit
		 */
		buttonTooltip?: sap.ui.core.TooltipBase;
		/**
		 * Text for Picture which will be read by screenreader.
		 * If a new ariaLabelForPicture is set, any previously set ariaLabelForPicture is deactivated.
		 */
		ariaLabelForPicture?: string;
		/**
		 * The Post event is triggered when the user has entered a value and pressed the post button. After firing this event, the value is reset.
		 * @param value The value of the feed input before reseting it.
		 */
		post?: (value: string) => void;
	}

	interface FeedListItemMetadata extends sap.m.ListItemBaseMetadata {
		/**
		 * Icon to be displayed as graphical element within the FeedListItem. This can be an image or an icon from the icon font. If no icon is provided, a default person-placeholder icon is displayed.
		 * Icon is only shown if showIcon = true.
		 */
		icon?: sap.ui.core.URI;
		/**
		 * Icon displayed when the list item is active.
		 */
		activeIcon?: sap.ui.core.URI;
		/**
		 * Sender of the chunk
		 */
		sender?: string;
		/**
		 * The FeedListItem text.
		 */
		text?: string;
		/**
		 * The Info text.
		 */
		info?: string;
		/**
		 * This chunks timestamp
		 */
		timestamp?: string;
		/**
		 * If true, sender string is an link, which will fire 'senderPress' events. If false, sender is normal text.
		 * @default true
		 */
		senderActive?: boolean;
		/**
		 * If true, icon is an link, which will fire 'iconPress' events. If false, icon is normal image
		 * @default true
		 */
		iconActive?: boolean;
		/**
		 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
		 * 
		 * If bandwidth is the key for the application, set this value to false.
		 * @default true
		 */
		iconDensityAware?: boolean;
		/**
		 * If set to "true" (default), icons will be displayed, if set to false icons are hidden
		 * @default true
		 */
		showIcon?: boolean;
		/**
		 * The expand and collapse feature is set by default and uses 300 characters on mobile devices and 500 characters on desktops as limits. Based on these values, the text of the FeedListItem is collapsed once text reaches these limits. In this case, only the specified number of characters is displayed. By clicking on the text link More, the entire text can be displayed. The text link Less collapses the text. The application is able to set the value to its needs.
		 */
		maxCharacters?: number;
		/**
		 * Event is fired when name of the sender is pressed.
		 * @param domRef Dom reference of the feed item's sender string to be used for positioning.
		 * @param getDomRef Function to retrieve the DOM reference for the <code>senderPress</code> event.
		 * The function returns the DOM element of the sender link or null
		 */
		senderPress?: (domRef: string, getDomRef: any) => void;
		/**
		 * Event is fired when the icon is pressed.
		 * @param domRef Dom reference of the feed item's icon to be used for positioning.
		 * @param getDomRef Function to retrieve the DOM reference for the <code>iconPress</code> event.
		 * The function returns the DOM element of the icon or null
		 */
		iconPress?: (domRef: string, getDomRef: any) => void;
	}

	interface FlexBoxMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * The height of the <code>sap.m.FlexBox</code>. Note that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.
		 * @default 
		 */
		height?: sap.ui.core.CSSSize;
		/**
		 * The width of the <code>sap.m.FlexBox</code>. Note that when a percentage is given, for the width to work as expected, the width of the surrounding container must be defined.
		 * @default 
		 */
		width?: sap.ui.core.CSSSize;
		/**
		 * Determines whether the <code>sap.m.FlexBox</code> is in block or inline mode.
		 * @default false
		 */
		displayInline?: boolean;
		/**
		 * Determines the direction of the layout of child elements.
		 * @default Row
		 */
		direction?: sap.m.FlexDirection;
		/**
		 * Determines whether the <code>sap.m.FlexBox</code> will be sized to completely fill its container. If the <code>sap.m.FlexBox</code> is inserted into a Page, the property 'enableScrolling' of the Page needs to be set to 'false' for the FlexBox to fit the entire viewport.
		 * @default false
		 */
		fitContainer?: boolean;
		/**
		 * Determines whether the layout is rendered as a series of divs or as an unordered list (ul)
		 * @default Div
		 */
		renderType?: sap.m.FlexRendertype;
		/**
		 * Determines the layout behavior along the main axis.
		 * @default Start
		 */
		justifyContent?: sap.m.FlexJustifyContent;
		/**
		 * Determines the layout behavior of items along the cross-axis. "Baseline" is not supported in Internet Explorer 10.
		 * @default Stretch
		 */
		alignItems?: sap.m.FlexAlignItems;
		/**
		 * Determines the wrapping behavior of the flex container. This property has no effect in older browsers, e.g. Android Native 4.3 and below.
		 * @default NoWrap
		 */
		wrap?: sap.m.FlexWrap;
		/**
		 * Determines the layout behavior of container lines when there's extra space along the cross-axis. This property has no effect in Internet Explorer 10.
		 * @default Stretch
		 */
		alignContent?: sap.m.FlexAlignContent;
		/**
		 * Defines the background style of the <code>sap.m.FlexBox</code>.
		 * @default Transparent
		 */
		backgroundDesign?: sap.m.BackgroundDesign;
	}

	interface FlexItemDataMetadata {
		/**
		 * Determines cross-axis alignment of individual element (not currently supported in Internet Explorer)
		 * @default Auto
		 */
		alignSelf?: sap.m.FlexAlignSelf;
		/**
		 * Determines the display order of flex items independent of their source code order.
		 * @default 0
		 */
		order?: number;
		/**
		 * Determines the flexibility of the flex item when allocatable space is remaining.
		 * @default 0
		 */
		growFactor?: number;
		/**
		 * The shrink factor determines how much the flex item will shrink relative to the rest of the flex items in the flex container when negative free space is distributed.
		 * @default 1
		 */
		shrinkFactor?: number;
		/**
		 * The base size is the initial main size of the item for the flex algorithm. If set to "auto", this will be the computed size of the item.
		 * @default auto
		 */
		baseSize?: sap.ui.core.CSSSize;
		/**
		 * The minimum height of the flex item.
		 * @default auto
		 */
		minHeight?: sap.ui.core.CSSSize;
		/**
		 * The maximum height of the flex item.
		 * @default 
		 */
		maxHeight?: sap.ui.core.CSSSize;
		/**
		 * The minimum height of the flex item.
		 * @default auto
		 */
		minWidth?: sap.ui.core.CSSSize;
		/**
		 * The maximum height of the flex item.
		 * @default 
		 */
		maxWidth?: sap.ui.core.CSSSize;
		/**
		 * The style class will be applied to the flex item and can be used for CSS selectors
		 * @default 
		 */
		styleClass?: string;
		/**
		 * Defines the background style of the flex item.
		 * @default Transparent
		 */
		backgroundDesign?: sap.m.BackgroundDesign;
	}

	interface FormattedTextMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Text in HTML format.
		 * The following tags are supported:
		 * <ul>
		 * 	<li><code>a</code></li>
		 * 	<li><code>abbr</code></li>
		 * 	<li><code>blockquote</code></li>
		 * 	<li><code>br</code></li>
		 * 	<li><code>cite</code></li>
		 * 	<li><code>code</code></li>
		 * 	<li><code>em</code></li>
		 * 	<li><code>h1</code></li>
		 * 	<li><code>h2</code></li>
		 * 	<li><code>h3</code></li>
		 * 	<li><code>h4</code></li>
		 * 	<li><code>h5</code></li>
		 * 	<li><code>h6</code></li>
		 * 	<li><code>p</code></li>
		 * 	<li><code>pre</code></li>
		 * 	<li><code>strong</code></li>
		 * 	<li><code>span</code></li>
		 * 	<li><code>u</code></li>
		 * 	<li><code>dl</code></li>
		 * 	<li><code>dt</code></li>
		 * 	<li><code>dl</code></li>
		 * 	<li><code>ul</code></li>
		 * 	<li><code>ol</code></li>
		 * 	<li><code>li</code></li>
		 * </ul>
		 * <p><code>class, style,</code> and <code>target</code> attributes are allowed.
		 * If <code>target</code> is not set, links open in a new window by default.
		 * <p>Only safe <code>href</code> attributes can be used. See {@link jQuery.sap.validateUrl}.
		 * @default 
		 */
		htmlText?: string;
		/**
		 * Optional width of the control in CSS units.
		 */
		width?: sap.ui.core.CSSSize;
		/**
		 * Optional height of the control in CSS units.
		 */
		height?: sap.ui.core.CSSSize;
	}

	interface GenericTileMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * The mode of the GenericTile.
		 * @default library.GenericTileMode.ContentMode
		 */
		mode?: sap.m.GenericTileMode;
		/**
		 * The header of the tile.
		 */
		header?: string;
		/**
		 * The subheader of the tile.
		 */
		subheader?: string;
		/**
		 * The message that appears when the control is in the Failed state.
		 */
		failedText?: string;
		/**
		 * The frame type: 1x1 or 2x1.
		 * @default library.FrameType.OneByOne
		 */
		frameType?: sap.m.FrameType;
		/**
		 * The URI of the background image.
		 */
		backgroundImage?: sap.ui.core.URI;
		/**
		 * The image to be displayed as a graphical element within the header. This can be an image or an icon from the icon font.
		 */
		headerImage?: sap.ui.core.URI;
		/**
		 * The load status.
		 * @default Loaded
		 */
		state?: sap.m.LoadState;
		/**
		 * Description of a header image that is used in the tooltip.
		 */
		imageDescription?: string;
		/**
		 * The event is fired when the user chooses the tile.
		 */
		press?: () => void;
	}

	interface GroupHeaderListItemMetadata extends sap.m.ListItemBaseMetadata {
		/**
		 * Defines the title of the group header.
		 */
		title?: string;
		/**
		 * Defines the count of items in the group, but it could also be an amount which represents the sum of all amounts in the group.
		 * <b>Note:</b> Will not be displayed if not set.
		 */
		count?: string;
		/**
		 * By default, the title is capitalized automatically. To disable this automation, set this property to <b>false</b>.
		 * @default true
		 */
		upperCase?: boolean;
		/**
		 * Defines the title text directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * @default Inherit
		 */
		titleTextDirection?: sap.ui.core.TextDirection;
	}

	interface IconTabBarMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Defines if the tabs are collapsible and expandable.
		 * @default true
		 */
		expandable?: boolean;
		/**
		 * Indicates if the actual tab content is expanded or not.
		 * @default true
		 */
		expanded?: boolean;
		/**
		 * Key of the selected tab item.
		 * 
		 * If the key has no corresponding aggregated item, no changes will apply.
		 * If duplicate keys exists the first item matching the key is used.
		 */
		selectedKey?: string;
		/**
		 * Determines whether the text of the icon tab filter (not the count) is displayed in uppercase.
		 * @default false
		 */
		upperCase?: boolean;
		/**
		 * Determines whether the IconTabBar height is stretched to the maximum possible height
		 * of its parent container. As a prerequisite, the height of the parent container must be
		 * defined as a fixed value.
		 * @default false
		 */
		stretchContentHeight?: boolean;
		/**
		 * Determines whether the IconTabBar content fits to the full area.
		 * The paddings are removed if it's set to false.
		 * @default true
		 */
		applyContentPadding?: boolean;
		/**
		 * Specifies the background color of the IconTabBar.
		 * 
		 * Depending on the theme, you can change the state of
		 * the background color to "Solid", "Translucent", or "Transparent".
		 * @default Solid
		 */
		backgroundDesign?: sap.m.BackgroundDesign;
		/**
		 * Specifies the header mode.
		 * <b>Note:</b> The Inline mode works only if no icons are set.
		 * @default Standard
		 */
		headerMode?: sap.m.IconTabHeaderMode;
		/**
		 * Fires when an item is selected.
		 * @param item The selected item
		 * @param key The key of the selected item
		 * @param selectedItem The selected item
		 * @param selectedKey The key of the selected item
		 */
		select?: (item: sap.m.IconTabFilter, key: string, selectedItem: sap.m.IconTabFilter, selectedKey: string) => void;
		/**
		 * Indicates that the tab will expand or collapse.
		 * @param expand If the tab will expand, this is true.
		 * @param collapse If the tab will collapse, this is true.
		 */
		expand?: (expand: boolean, collapse: boolean) => void;
	}

	interface IconTabFilterMetadata extends sap.ui.core.ItemMetadata {
		/**
		 * Represents the "count" text, which is displayed in the tab filter.
		 * @default 
		 */
		count?: string;
		/**
		 * Enables special visualization for disabled filter (show all items).
		 * @default false
		 */
		showAll?: boolean;
		/**
		 * Specifies the icon to be displayed for the tab filter.
		 * @default 
		 */
		icon?: sap.ui.core.URI;
		/**
		 * Specifies the icon color.
		 * 
		 * If an icon font is used, the color can be chosen from the icon colors (sap.ui.core.IconColor).
		 * Possible semantic colors are: Neutral, Positive, Critical, Negative.
		 * Instead of the semantic icon color the brand color can be used, this is named Default.
		 * Semantic colors and brand colors should not be mixed up inside one IconTabBar.
		 * @default Default
		 */
		iconColor?: sap.ui.core.IconColor;
		/**
		 * If set to true, it sends one or more requests,
		 * trying to get the density perfect version of the image if this version of
		 * the image doesn't exist on the server. Default value is set to true.
		 * 
		 * If bandwidth is key for the application, set this value to false.
		 * @default true
		 */
		iconDensityAware?: boolean;
		/**
		 * Specifies whether the tab filter is rendered.
		 * @default true
		 */
		visible?: boolean;
		/**
		 * Specifies whether the icon and the texts are placed vertically or horizontally.
		 * @default Vertical
		 */
		design?: sap.m.IconTabFilterDesign;
	}

	interface IconTabHeaderMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Key of the selected item.
		 * 
		 * If the key has no corresponding aggregated item, no changes will apply.
		 * If duplicate keys exists the first item matching, the key is used.
		 */
		selectedKey?: string;
		/**
		 * Specifies whether the control is rendered.
		 * @default true
		 */
		visible?: boolean;
		/**
		 * Specifies the header mode.
		 * <b>Note:</b> The Inline mode works only if no icons are set.
		 * @default Standard
		 */
		mode?: sap.m.IconTabHeaderMode;
		/**
		 * Fires when an item is selected.
		 * @param item The selected item
		 * @param key The key of the selected item
		 */
		select?: (item: sap.m.IconTabFilter, key: string) => void;
	}

	interface IconTabSeparatorMetadata {
		/**
		 * The icon to display for this separator. If no icon is given, a separator line is used instead.
		 * @default 
		 */
		icon?: sap.ui.core.URI;
		/**
		 * If set to true, it sends one or more requests,
		 * trying to get the density perfect version of the image if this version of
		 * the image doesn't exist on the server. Default value is set to true.
		 * 
		 * If bandwidth is key for the application, set this value to false.
		 * @default true
		 */
		iconDensityAware?: boolean;
	}

	interface ImageMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Relative or absolute path to URL where the image file is stored. The path will be adapted to the density aware format according to the density of the device following the convention that [imageName]@[densityValue].[extension]
		 */
		src?: sap.ui.core.URI;
		/**
		 * When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the original ratio between width/height is maintained. When 'mode' property is set to sap.m.ImageMode.Background, this property always needs to be set. Otherwise the output DOM element has a 0 size.
		 */
		width?: sap.ui.core.CSSSize;
		/**
		 * When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the original ratio between width/height is maintained. When 'mode' property is set to sap.m.ImageMode.Background, this property always needs to be set. Otherwise the output DOM element has a 0 size.
		 */
		height?: sap.ui.core.CSSSize;
		/**
		 * A decorative image is included for design reasons. Accessibility tools will ignore decorative images.
		 * 
		 * Note: If the Image has an image map (useMap is set), this property will be overridden (the image will not be rendered as decorative).
		 * A decorative image has no ALT attribute, so the Alt property is ignored if the image is decorative.
		 * @default true
		 */
		decorative?: boolean;
		/**
		 * The alternative text that is displayed in case the Image is not available, or cannot be displayed.
		 * If the image is set to decorative this property is ignored.
		 */
		alt?: string;
		/**
		 * The name of the image map that defines the clickable areas
		 */
		useMap?: string;
		/**
		 * If this is set to false, the src image will be loaded directly without attempting to fetch the density perfect image for high density device.
		 * 
		 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
		 * 
		 * If bandwidth is the key for the application, set this value to false.
		 * @default true
		 */
		densityAware?: boolean;
		/**
		 * The source property which is used when the image is pressed.
		 * @default 
		 */
		activeSrc?: sap.ui.core.URI;
		/**
		 * Defines how the src and the activeSrc is output to the Dom Element. When set to sap.m.ImageMode.Image which is the default value, the src (activeSrc) is set to the 'src' attribute of the 'img' tag. When set to sap.m.ImageMode.Background, the src (activeSrc) is set to the CSS style 'background-image' and the root DOM element is rendered as a 'span' tag instead of an 'img' tag.
		 * @default Image
		 */
		mode?: sap.m.ImageMode;
		/**
		 * Defines the size of the image in sap.m.ImageMode.Background mode. This property is set on the output DOM element using CSS style 'background-size'. This property takes effect only when the 'mode' property is set to sap.m.ImageMode.Background.
		 * @default cover
		 */
		backgroundSize?: string;
		/**
		 * Defines the position of the image in sap.m.ImageMode.Background mode. This property is set on the output DOM element using CSS style 'background-position'. This property takes effect only when the 'mode' property is set to sap.m.ImageMode.Background.
		 * @default initial
		 */
		backgroundPosition?: string;
		/**
		 * Defines whether the source image is repeated when the output DOM element is bigger than the source. This property is set on the output DOM element using CSS style 'background-repeat'. This property takes effect only when the 'mode' property is set to sap.m.ImageMode.Background.
		 * @default no-repeat
		 */
		backgroundRepeat?: string;
		/**
		 * Event is fired when the user clicks on the control. (This event is deprecated, use the press event instead)
		 */
		tap?: () => void;
		/**
		 * Event is fired when the user clicks on the control.
		 */
		press?: () => void;
		/**
		 * Event is fired when the image resource is loaded.
		 */
		load?: () => void;
		/**
		 * Event is fired when the image resource can't be loaded. If densityAware is set to true, the event is fired when none of the fallback resources can be loaded.
		 */
		error?: () => void;
	}

	interface ImageContentMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * The image to be displayed as a graphical element within the imageContent. This can be an image or an icon from the icon font.
		 */
		src?: sap.ui.core.URI;
		/**
		 * Description of image. This text is used to provide ScreenReader information.
		 */
		description?: string;
		/**
		 * The event is fired when the user chooses the image content.
		 */
		press?: () => void;
	}

	interface InputMetadata extends sap.m.InputBaseMetadata {
		/**
		 * HTML type of the internal <code>input</code> tag (e.g. Text, Number, Email, Phone).
		 * The particular effect of this property differs depending on the browser and the current language settings,
		 * especially for the type Number.<br>
		 * This parameter is intended to be used with touch devices that use different soft keyboard layouts depending on the given input type.<br>
		 * Only the default value <code>sap.m.InputType.Text</code> may be used in combination with data model formats.
		 * <code>sap.ui.model</code> defines extended formats that are mostly incompatible with normal HTML
		 * representations for numbers and dates.
		 * @default Text
		 */
		type?: sap.m.InputType;
		/**
		 * Maximum number of characters. Value '0' means the feature is switched off.
		 * This parameter is not compatible with the input type <code>sap.m.InputType.Number</code>.
		 * If the input type is set to <code>Number</code>, the <code>maxLength</code> value is ignored.
		 * @default 0
		 */
		maxLength?: number;
		/**
		 * If set to true, a value help indicator will be displayed inside the control. When clicked the event "valueHelpRequest" will be fired.
		 * @default false
		 */
		showValueHelp?: boolean;
		/**
		 * If this is set to true, suggest event is fired when user types in the input. Changing the suggestItems aggregation in suggest event listener will show suggestions within a popup. When runs on phone, input will first open a dialog where the input and suggestions are shown. When runs on a tablet, the suggestions are shown in a popup next to the input.
		 * @default false
		 */
		showSuggestion?: boolean;
		/**
		 * If set to true, direct text input is disabled and the control will trigger the event "valueHelpRequest" for all user interactions. The properties "showValueHelp", "editable", and "enabled" must be set to true, otherwise the property will have no effect
		 * @default false
		 */
		valueHelpOnly?: boolean;
		/**
		 * Defines whether to filter the provided suggestions before showing them to the user.
		 * @default true
		 */
		filterSuggests?: boolean;
		/**
		 * If set, the value of this parameter will control the horizontal size of the suggestion list to display more data. This allows suggestion lists to be wider than the input field if there is enough space available. By default, the suggestion list is always as wide as the input field.
		 * Note: The value will be ignored if the actual width of the input field is larger than the specified parameter value.
		 */
		maxSuggestionWidth?: sap.ui.core.CSSSize;
		/**
		 * Minimum length of the entered text in input before suggest event is fired. The default value is 1 which means the suggest event is fired after user types in input. When it's set to 0, suggest event is fired when input with no text gets focus.
		 * @default 1
		 */
		startSuggestion?: number;
		/**
		 * For tabular suggestions, this flag will show/hide the button at the end of the suggestion table that triggers the event "valueHelpRequest" when pressed. The default value is true.
		 * 
		 * NOTE: If suggestions are not tabular or no suggestions are used, the button will not be displayed and this flag is without effect.
		 * @default true
		 */
		showTableSuggestionValueHelp?: boolean;
		/**
		 * The description is a text after the input field, e.g. units of measurement, currencies.
		 */
		description?: string;
		/**
		 * This property only takes effect if the description property is set. It controls the distribution of space between the input field and the description text. The default value is 50% leaving the other 50% for the description.
		 * @default 50%
		 */
		fieldWidth?: sap.ui.core.CSSSize;
		/**
		 * Indicates when the value gets updated with the user changes: At each keystroke (true) or first when the user presses enter or tabs out (false).
		 * @default false
		 */
		valueLiveUpdate?: boolean;
		/**
		 * This event is fired when the value of the input is changed - e.g. at each keypress
		 * @param value The new value of the input.
		 */
		liveChange?: (value: string) => void;
		/**
		 * When the value help indicator is clicked, this event will be fired.
		 * @param fromSuggestions The event parameter is set to true, when the button at the end of the suggestion table is clicked, otherwise false. It can be used to determine whether the "value help" trigger or the "show all items" trigger has been pressed.
		 */
		valueHelpRequest?: (fromSuggestions: boolean) => void;
		/**
		 * This event is fired when user types in the input and showSuggestion is set to true. Changing the suggestItems aggregation will show the suggestions within a popup.
		 * @param suggestValue The current value which has been typed in the input.
		 * @param suggestionColumns The suggestion list is passed to this event for convenience. If you use list-based or tabular suggestions, fill the suggestionList with the items you want to suggest. Otherwise, directly add the suggestions to the "suggestionItems" aggregation of the input control.
		 */
		suggest?: (suggestValue: string, suggestionColumns: sap.m.ListBase) => void;
		/**
		 * This event is fired when suggestionItem shown in suggestion popup are selected. This event is only fired when showSuggestion is set to true and there are suggestionItems shown in the suggestion popup.
		 * @param selectedItem This is the item selected in the suggestion popup for one and two-value suggestions. For tabular suggestions, this value will not be set.
		 * @param selectedRow This is the row selected in the tabular suggestion popup represented as a ColumnListItem. For one and two-value suggestions, this value will not be set.
		 * 
		 * Note: The row result function to select a result value for the string is already executed at this time. To pick different value for the input field or to do follow up steps after the item has been selected.
		 */
		suggestionItemSelected?: (selectedItem: sap.ui.core.Item, selectedRow: sap.m.ColumnListItem) => void;
		/**
		 * This event is fired when user presses the <code>Enter</code> key on the input.
		 * 
		 * <b>Note:</b>
		 * The event is fired independent of whether there was a change before or not. If a change was performed the event is fired after the change event.
		 * The event is also fired when an item of the select list is selected via <code>Enter</code>.
		 * The event is only fired on an input which allows text input (<code>editable</code>, <code>enabled</code> and not <code>valueHelpOnly</code>).
		 * @param value The new value of the input.
		 */
		submit?: (value: string) => void;
	}

	interface InputBaseMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Defines the value of the control.
		 */
		value?: string;
		/**
		 * Defines the width of the control.
		 */
		width?: sap.ui.core.CSSSize;
		/**
		 * Indicates whether the user can interact with the control or not.
		 * <b>Note:</b> Disabled controls cannot be focused and they are out of the tab-chain.
		 * @default true
		 */
		enabled?: boolean;
		/**
		 * Visualizes the validation state of the control, e.g. <code>Error</code>, <code>Warning</code>, <code>Success</code>.
		 * @default None
		 */
		valueState?: sap.ui.core.ValueState;
		/**
		 * Defines the name of the control for the purposes of form submission.
		 */
		name?: string;
		/**
		 * Defines a short hint intended to aid the user with data entry when the control has no value.
		 */
		placeholder?: string;
		/**
		 * Defines whether the control can be modified by the user or not.
		 * <b>Note:</b> A user can tab to non-editable control, highlight it, and copy the text from it.
		 * @default true
		 */
		editable?: boolean;
		/**
		 * Defines the text that appears in the value state message pop-up. If this is not specified, a default text is shown from the resource bundle.
		 */
		valueStateText?: string;
		/**
		 * Indicates whether the value state message should be shown or not.
		 * @default true
		 */
		showValueStateMessage?: boolean;
		/**
		 * Defines the horizontal alignment of the text that is shown inside the input field.
		 * @default Initial
		 */
		textAlign?: sap.ui.core.TextAlign;
		/**
		 * Defines the text directionality of the input field, e.g. <code>RTL</code>, <code>LTR</code>
		 * @default Inherit
		 */
		textDirection?: sap.ui.core.TextDirection;
		/**
		 * Indicates that user input is required. This property is only needed for accessibility purposes when a single relationship between
		 * the field and a label (see aggregation <code>labelFor</code> of <code>sap.m.Label</code>) cannot be established
		 * (e.g. one label should label multiple fields).
		 * @default false
		 */
		required?: boolean;
		/**
		 * Is fired when the text in the input field has changed and the focus leaves the input field or the enter key is pressed.
		 * @param value The new <code>value</code> of the <code>control</code>.
		 */
		change?: (value: string) => void;
	}

	interface InputListItemMetadata extends sap.m.ListItemBaseMetadata {
		/**
		 * Label of the list item
		 */
		label?: string;
		/**
		 * This property specifies the label text directionality with enumerated options. By default, the label inherits text direction from the DOM.
		 * @default Inherit
		 */
		labelTextDirection?: sap.ui.core.TextDirection;
	}

	interface LabelMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Sets the design of a Label to either Standard or Bold.
		 * @default Standard
		 */
		design?: sap.m.LabelDesign;
		/**
		 * Determines the Label text to be displayed.
		 */
		text?: string;
		/**
		 * Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
		 * @default Begin
		 */
		textAlign?: sap.ui.core.TextAlign;
		/**
		 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
		 * @default Inherit
		 */
		textDirection?: sap.ui.core.TextDirection;
		/**
		 * Determines the width of the label.
		 * @default 
		 */
		width?: sap.ui.core.CSSSize;
		/**
		 * Indicates that user input is required in the input this label labels.
		 * @default false
		 */
		required?: boolean;
	}

	interface LinkMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Link text to be displayed.
		 * @default 
		 */
		text?: string;
		/**
		 * Determines whether the link can be triggered by the user.
		 * @default true
		 */
		enabled?: boolean;
		/**
		 * Options are the standard values for window.open() supported by browsers: _self, _top, _blank, _parent, _search. Alternatively, a frame name can be entered. This property is only used when the href property is set.
		 */
		target?: string;
		/**
		 * Width of the link (CSS-size such as % or px). When it is set, this is the exact size. When left blank, the text defines the size.
		 */
		width?: sap.ui.core.CSSSize;
		/**
		 * The link target URI. Supports standard hyperlink behavior. If a JavaScript action should be triggered, this should not be set, but instead an event handler for the "press" event should be registered.
		 */
		href?: sap.ui.core.URI;
		/**
		 * Determines whether the link text is allowed to wrap when there is not sufficient space.
		 * @default false
		 */
		wrapping?: boolean;
		/**
		 * Sets the horizontal alignment of the text.
		 * @default Initial
		 */
		textAlign?: sap.ui.core.TextAlign;
		/**
		 * This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the parent DOM.
		 * @default Inherit
		 */
		textDirection?: sap.ui.core.TextDirection;
		/**
		 * Subtle links look more like standard text than like links. They should only be used to help with visual hierarchy between large data lists of important and less important links. Subtle links should not be used in any other use case.
		 * @default false
		 */
		subtle?: boolean;
		/**
		 * Emphasized links look visually more important than regular links.
		 * @default false
		 */
		emphasized?: boolean;
		/**
		 * Event is fired when the user triggers the link control.
		 */
		press?: () => void;
	}

	interface ListMetadata extends sap.m.ListBaseMetadata {
		/**
		 * Sets the background style of the list. Depending on the theme, you can change the state of the background from <code>Solid</code> to <code>Translucent</code> or to <code>Transparent</code>.
		 * @default Solid
		 */
		backgroundDesign?: sap.m.BackgroundDesign;
	}

	interface ListBaseMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Defines the indentation of the container. Setting it to <code>true</code> indents the list.
		 * @default false
		 */
		inset?: boolean;
		/**
		 * Defines the header text that appears in the control.
		 * <b>Note:</b> If <code>headerToolbar</code> aggregation is set, then this property is ignored.
		 */
		headerText?: string;
		/**
		 * Defines the footer text that appears in the control.
		 */
		footerText?: string;
		/**
		 * Defines the mode of the control (e.g. <code>None</code>, <code>SingleSelect</code>, <code>MultiSelect</code>, <code>Delete</code>).
		 * @default None
		 */
		mode?: sap.m.ListMode;
		/**
		 * Sets the width of the control.
		 * @default 100%
		 */
		width?: sap.ui.core.CSSSize;
		/**
		 * Defines whether the items are selectable by clicking on the item itself (<code>true</code>) rather than having to set the selection control first.
		 * <b>Note:</b> The <code>SingleSelectMaster</code> mode also provides this functionality by default.
		 * @default false
		 */
		includeItemInSelection?: boolean;
		/**
		 * Activates the unread indicator for all items, if set to <code>true</code>.
		 * @default false
		 */
		showUnread?: boolean;
		/**
		 * This text is displayed when the control contains no items.
		 */
		noDataText?: string;
		/**
		 * Defines whether or not the text specified in the <code>noDataText</code> property is displayed.
		 * @default true
		 */
		showNoData?: boolean;
		/**
		 * When this property is set to <code>true</code>, the control will automatically display a busy indicator when it detects that data is being loaded. This busy indicator blocks the interaction with the items until data loading is finished.
		 * By default, the busy indicator will be shown after one second. This behavior can be customized by setting the <code>busyIndicatorDelay</code> property.
		 * @default true
		 */
		enableBusyIndicator?: boolean;
		/**
		 * Defines if animations will be shown while switching between modes.
		 * @default true
		 */
		modeAnimationOn?: boolean;
		/**
		 * Defines which item separator style will be used.
		 * @default All
		 */
		showSeparators?: sap.m.ListSeparators;
		/**
		 * Defines the direction of the swipe movement (e.g LeftToRight, RightToLeft, Both) to display the control defined in the <code>swipeContent</code> aggregation.
		 * @default Both
		 */
		swipeDirection?: sap.m.SwipeDirection;
		/**
		 * If set to <code>true</code>, enables the growing feature of the control to load more items by requesting from the model.
		 * <b>Note:</b>: This feature only works when an <code>items</code> aggregation is bound. Growing must not be used together with two-way binding.
		 * @default false
		 */
		growing?: boolean;
		/**
		 * Defines the number of items to be requested from the model for each grow.
		 * This property can only be used if the <code>growing</code> property is set to <code>true</code>.
		 * @default 20
		 */
		growingThreshold?: number;
		/**
		 * Defines the text displayed on the growing button. The default is a translated text ("More") coming from the message bundle.
		 * This property can only be used if the <code>growing</code> property is set to <code>true</code>.
		 */
		growingTriggerText?: string;
		/**
		 * If set to true, the user can scroll down/up to load more items. Otherwise a growing button is displayed at the bottom/top of the control.
		 * <b>Note:</b> This property can only be used if the <code>growing</code> property is set to <code>true</code> and only if there is one instance of <code>sap.m.List</code> or <code>sap.m.Table</code> inside the scrollable scroll container (e.g <code>sap.m.Page</code>).
		 * @default false
		 */
		growingScrollToLoad?: boolean;
		/**
		 * Defines the direction of the growing feature.
		 * If set to <code>Downwards</code> the user has to scroll down to load more items or the growing button is displayed at the bottom.
		 * If set to <code>Upwards</code> the user has to scroll up to load more items or the growing button is displayed at the top.
		 * @default Downwards
		 */
		growingDirection?: sap.m.ListGrowingDirection;
		/**
		 * If set to true, this control remembers and retains the selection of the items after a binding update has been performed (e.g. sorting, filtering).
		 * <b>Note:</b> This feature works only if two-way data binding for the <code>selected</code> property of the item is not used. It also needs to be turned off if the binding context of the item does not always point to the same entry in the model, for example, if the order of the data in the <code>JSONModel</code> is changed.
		 * @default true
		 */
		rememberSelections?: boolean;
		/**
		 * Defines keyboard handling behavior of the control.
		 * @default Navigation
		 */
		keyboardMode?: sap.m.ListKeyboardMode;
		/**
		 * Fires when selection is changed via user interaction inside the control.
		 * @param listItem The item whose selection has changed. In <code>MultiSelect</code> mode, only the up-most selected item is returned. This parameter can be used for single-selection modes.
		 * @param listItems Array of items whose selection has changed. This parameter can be used for <code>MultiSelect</code> mode.
		 * @param selected Indicates whether the <code>listItem</code> parameter is selected or not.
		 */
		selectionChange?: (listItem: sap.m.ListItemBase, listItems: sap.m.ListItemBase[], selected: boolean) => void;
		/**
		 * Fires when delete icon is pressed by user.
		 * @param listItem The item which fired the delete event.
		 */
		delete?: (listItem: sap.m.ListItemBase) => void;
		/**
		 * Fires after user's swipe action and before the <code>swipeContent</code> is shown. On the <code>swipe</code> event handler, <code>swipeContent</code> can be changed according to the swiped item.
		 * Calling the <code>preventDefault</code> method of the event cancels the swipe action.
		 * @param listItem The item which fired the swipe.
		 * @param swipeContent Aggregated <code>swipeContent</code> control that is shown on the right hand side of the item.
		 * @param srcControl Holds which control caused the swipe event within the item.
		 */
		swipe?: (listItem: sap.m.ListItemBase, swipeContent: sap.ui.core.Control, srcControl: sap.ui.core.Control) => void;
		/**
		 * Fires before <code>items</code> binding is updated (e.g. sorting, filtering)
		 * 
		 * <b>Note:</b> Event handler should not invalidate the control.
		 * @param reason The reason of the update, e.g. Binding, Filter, Sort, Growing, Change, Refresh, Context.
		 * @param actual Actual number of items.
		 * @param total The total count of bound items. This can be used if the <code>growing</code> property is set to <code>true</code>.
		 */
		updateStarted?: (reason: string, actual: number, total: number) => void;
		/**
		 * Fires after <code>items</code> binding is updated and processed by the control.
		 * @param reason The reason of the update, e.g. Binding, Filter, Sort, Growing, Change, Refresh, Context.
		 * @param actual Actual number of items.
		 * @param total The total count of bound items. This can be used if the <code>growing</code> property is set to <code>true</code>.
		 */
		updateFinished?: (reason: string, actual: number, total: number) => void;
		/**
		 * Fires when an item is pressed unless the item's <code>type</code> property is <code>Inactive</code>.
		 * @param listItem The item which fired the pressed event.
		 * @param srcControl The control which caused the press event within the container.
		 */
		itemPress?: (listItem: sap.m.ListItemBase, srcControl: sap.ui.core.Control) => void;
	}

	interface ListItemBaseMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Defines the visual indication and behavior of the list items, e.g. <code>Active</code>, <code>Navigation</code>, <code>Detail</code>.
		 * @default Inactive
		 */
		type?: sap.m.ListType;
		/**
		 * Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead of the real control.
		 * @default true
		 */
		visible?: boolean;
		/**
		 * Activates the unread indicator for the list item, if set to <code>true</code>.
		 * <b>Note:</b> This flag is ignored when the <code>showUnread</code> property of the parent is set to <code>false</code>.
		 * @default false
		 */
		unread?: boolean;
		/**
		 * Defines the selected state of the list items.
		 * <b>Note:</b> Binding the <code>selected</code> property in single selection modes may cause unwanted results if you have more than one selected items in your binding.
		 * @default false
		 */
		selected?: boolean;
		/**
		 * Defines the counter value of the list items.
		 */
		counter?: number;
		/**
		 * Fires when the user clicks on the control.
		 * <b>Note:</b> This event is not fired when the parent <code>mode</code> is <code>SingleSelectMaster</code> or when the <code>includeItemInSelection</code> property is set to <code>true</code>.
		 * If there is an interactive element that handles its own <code>press</code> event then the list item's <code>press</code> event is not fired.
		 * Also see {@link sap.m.ListBase#attachItemPress}.
		 */
		press?: () => void;
		/**
		 * Fires when the user clicks on the detail button of the control.
		 */
		detailPress?: () => void;
	}

	interface MaskInputMetadata extends sap.m.InputBaseMetadata {
		/**
		 * Defines a placeholder symbol. Shown at the position where there is no user input yet.
		 * @default _
		 */
		placeholderSymbol?: string;
		/**
		 * Mask defined by its characters type (respectively, by its length).
		 * You should consider the following important facts:
		 * 1. The mask characters normally correspond to an existing rule (one rule per unique char).
		 * Characters which don't, are considered immutable characters (for example, the mask '2099', where '9' corresponds to a rule
		 * for digits, has the characters '2' and '0' as immutable).
		 * 2. Adding a rule corresponding to the <code>placeholderSymbol</code> is not recommended and would lead to an unpredictable behavior.
		 * 3. You can use the special escape character '^' called "Caret" prepending a rule character to make it immutable.
		 * Use the double escape '^^' if you want to make use of the escape character as a immutable one.
		 */
		mask?: string;
	}

	interface MaskInputRuleMetadata {
		/**
		 * Defines the symbol used in the mask format which will accept a certain range of characters.
		 * @default *
		 */
		maskFormatSymbol?: string;
		/**
		 * Defines the allowed characters as a regular expression.
		 * @default [a-zA-Z0-9]
		 */
		regex?: string;
	}

	interface MenuMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Defines the <code>Menu</code> title.
		 */
		title?: string;
		/**
		 * Fired when a <code>MenuItem</code> is selected.
		 * @param item The <code>MenuItem</code> which was selected.
		 */
		itemSelected?: (item: sap.m.MenuItem) => void;
		/**
		 * Fired when the menu is closed.
		 */
		closed?: () => void;
	}

	interface MenuButtonMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Defines the text of the <code>MenuButton</code>.
		 * <br/><b>Note:</b> In <code>Split</code> <code>buttonMode</code> with <code>useDefaultActionOnly</code>
		 * set to <code>false</code>, the text is changed to display the last selected item's text,
		 * while in <code>Regular</code> <code>buttonMode<code> the text stays unchanged.
		 */
		text?: string;
		/**
		 * Defines the type of the <code>MenuButton</code> (for example, Default, Accept, Reject, Back, etc.)
		 * @default Default
		 */
		type?: sap.m.ButtonType;
		/**
		 * Defines the width of the <code>MenuButton</code>.
		 */
		width?: sap.ui.core.CSSSize;
		/**
		 * Boolean property to enable the control (default is <code>true</code>).
		 * <br/><b>Note:</b> Depending on custom settings, the buttons that are disabled have other colors than the enabled ones.
		 * @default true
		 */
		enabled?: boolean;
		/**
		 * Defines the icon to be displayed as a graphical element within the button.
		 * It can be an image or an icon from the icon font.
		 */
		icon?: sap.ui.core.URI;
		/**
		 * The source property of an alternative icon for the active (pressed) state of the button.
		 * Both active and default icon properties should be defined and of the same type - image or icon font.
		 * If the <code>icon</code> property is not set or has a different type, the active icon is not displayed.
		 */
		activeIcon?: sap.ui.core.URI;
		/**
		 * When set to <code>true</code> (default), one or more requests are sent trying to get the
		 * density perfect version of image if this version of image doesn't exist on the server.
		 * If only one version of image is provided, set this value to <code>false</code> to
		 * avoid the attempt of fetching density perfect image.
		 * @default true
		 */
		iconDensityAware?: boolean;
		/**
		 * Specifies the element's text directionality with enumerated options.
		 * By default, the control inherits text direction from the DOM.
		 * @default Inherit
		 */
		textDirection?: sap.ui.core.TextDirection;
		/**
		 * Defines whether the <code>MenuButton</code> is set to <code>Regular</code> or <code>Split</code> mode.
		 * @default Regular
		 */
		buttonMode?: sap.m.MenuButtonMode;
		/**
		 * Controls whether the default action handler is invoked always or it is invoked only until a menu item is selected.
		 * Usable only if <code>buttonMode</code> is set to <code>Split</code>.
		 * @default false
		 */
		useDefaultActionOnly?: boolean;
		/**
		 * Fired when the <code>buttonMode</code> is set to <code>Split</code> and the user presses the main button
		 * unless <code>useDefaultActionOnly</code> is set to <code>false</code> and another action
		 * from the menu has been selected previously.
		 */
		defaultAction?: () => void;
	}

	interface MenuItemMetadata extends sap.ui.core.ItemMetadata {
		/**
		 * Defines the icon, which belongs to the item.
		 * This can be an URI to an image or an icon font URI.
		 */
		icon?: string;
		/**
		 * Defines whether the item should be visible on the screen. If set to <code>false</code>,
		 * a placeholder is rendered instead of the real item.
		 * @default true
		 */
		visible?: boolean;
		/**
		 * Defines whether a visual separator should be rendered before the item.
		 * <b>Note:</b> If an item is invisible its separator is also not displayed.
		 * @default false
		 */
		startsSection?: boolean;
		/**
		 * Fired after the item has been pressed.
		 */
		press?: () => void;
		/**
		 * Fired when a property of the item changes.
		 * @param propertyKey The property name to be changed.
		 * @param propertyValue The new property value.
		 */
		propertyChanged?: (propertyKey: string, propertyValue: any) => void;
		/**
		 * Fired when aggregation of the item changes.
		 * @param aggregationName The aggregation name of the changed aggregation.
		 * @param methodName Which method changed the aggregation.
		 * @param methodParams What parameters were used to change the aggregation.
		 */
		aggregationChanged?: (aggregationName: string, methodName: string, methodParams: any) => void;
	}

	interface MessagePageMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Determines the main text displayed on the MessagePage.
		 * @default No matching items found.
		 */
		text?: string;
		/**
		 * Determines the detailed description that shows additional information on the MessagePage.
		 * @default Check the filter settings.
		 */
		description?: string;
		/**
		 * Determines the title in the header of MessagePage.
		 */
		title?: string;
		/**
		 * Determines the visibility of the MessagePage header.
		 * Can be used to hide the header of the MessagePage when it's embedded in another page.
		 * @default true
		 */
		showHeader?: boolean;
		/**
		 * Determines the visibility of the navigation button in MessagePage header.
		 * @default false
		 */
		showNavButton?: boolean;
		/**
		 * Determines the icon displayed on the MessagePage.
		 * @default sap-icon://documents
		 */
		icon?: sap.ui.core.URI;
		/**
		 * Determines the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * @default Inherit
		 */
		textDirection?: sap.ui.core.TextDirection;
		/**
		 * This event is fired when Nav Button is pressed.
		 */
		navButtonPress?: () => void;
	}

	interface MessagePopoverMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Callback function for resolving a promise after description has been asynchronously loaded inside this function
		 */
		asyncDescriptionHandler?: any;
		/**
		 * Callback function for resolving a promise after a link has been asynchronously validated inside this function
		 */
		asyncURLHandler?: any;
		/**
		 * Determines the position, where the control will appear on the screen. Possible values are: sap.m.VerticalPlacementType.Top, sap.m.VerticalPlacementType.Bottom and sap.m.VerticalPlacementType.Vertical.
		 * The default value is sap.m.VerticalPlacementType.Vertical. Setting this property while the control is open, will not cause any re-rendering and changing of the position. Changes will only be applied with the next interaction.
		 * @default Vertical
		 */
		placement?: sap.m.VerticalPlacementType;
		/**
		 * Sets the initial state of the control - expanded or collapsed. By default the control opens as expanded
		 * @default true
		 */
		initiallyExpanded?: boolean;
		/**
		 * This event will be fired after the popover is opened
		 * @param openBy This refers to the control which opens the popover
		 */
		afterOpen?: (openBy: sap.ui.core.Control) => void;
		/**
		 * This event will be fired after the popover is closed
		 * @param openBy Refers to the control which opens the popover
		 */
		afterClose?: (openBy: sap.ui.core.Control) => void;
		/**
		 * This event will be fired before the popover is opened
		 * @param openBy Refers to the control which opens the popover
		 */
		beforeOpen?: (openBy: sap.ui.core.Control) => void;
		/**
		 * This event will be fired before the popover is closed
		 * @param openBy Refers to the control which opens the popover
		 * See sap.ui.core.MessageType enum values for types
		 */
		beforeClose?: (openBy: sap.ui.core.Control) => void;
		/**
		 * This event will be fired when description is shown
		 * @param item Refers to the message popover item that is being presented
		 * @param messageTypeFilter Refers to the type of messages being shown
		 * See sap.ui.core.MessageType values for types
		 */
		itemSelect?: (item: sap.m.MessagePopoverItem, messageTypeFilter: sap.ui.core.MessageType) => void;
		/**
		 * This event will be fired when one of the lists is shown when (not) filtered  by type
		 * @param messageTypeFilter This parameter refers to the type of messages being shown.
		 */
		listSelect?: (messageTypeFilter: sap.ui.core.MessageType) => void;
		/**
		 * This event will be fired when the long text description data from a remote URL is loaded
		 */
		longtextLoaded?: () => void;
		/**
		 * This event will be fired when a validation of a URL from long text description is ready
		 */
		urlValidated?: () => void;
	}

	interface MessagePopoverItemMetadata {
		/**
		 * Specifies the type of the message
		 * @default Error
		 */
		type?: sap.ui.core.MessageType;
		/**
		 * Specifies the title of the message
		 * @default 
		 */
		title?: string;
		/**
		 * Specifies the subtitle of the message
		 * <b>Note:</b> This is only visible when the <code>title</code> property is not empty.
		 */
		subtitle?: string;
		/**
		 * Specifies detailed description of the message
		 * @default 
		 */
		description?: string;
		/**
		 * Specifies if description should be interpreted as markup
		 * @default false
		 */
		markupDescription?: boolean;
		/**
		 * Specifies long text description location URL
		 */
		longtextUrl?: sap.ui.core.URI;
		/**
		 * Defines the number of messages for a given message.
		 */
		counter?: number;
	}

	interface MessageStripMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Determines the text of the message.
		 * @default 
		 */
		text?: string;
		/**
		 * Determines the type of messages that are displayed in the MessageStrip.
		 * Possible values are: Information (default), Success, Warning, Error.
		 * If None is passed, the value is set to Information and a warning is displayed in the console.
		 * @default Information
		 */
		type?: sap.ui.core.MessageType;
		/**
		 * Determines a custom icon which is displayed.
		 * If none is set, the default icon for this message type is used.
		 * @default 
		 */
		customIcon?: sap.ui.core.URI;
		/**
		 * Determines if an icon is displayed for the message.
		 * @default false
		 */
		showIcon?: boolean;
		/**
		 * Determines if the message has a close button in the upper right corner.
		 * @default false
		 */
		showCloseButton?: boolean;
		/**
		 * This event will be fired after the container is closed.
		 */
		close?: () => void;
	}

	interface MultiComboBoxMetadata extends sap.m.ComboBoxBaseMetadata {
		/**
		 * Keys of the selected items. If the key has no corresponding item, no changes will apply. If duplicate keys exists the first item matching the key is used.
		 * @default []
		 */
		selectedKeys?: string[];
		/**
		 * Event is fired when selection of an item is changed.
		 * Note: please do not use the "change" event inherited from sap.m.InputBase
		 * @param changedItem Item which selection is changed
		 * @param selected Selection state: true if item is selected, false if
		 * item is not selected
		 */
		selectionChange?: (changedItem: sap.ui.core.Item, selected: boolean) => void;
		/**
		 * Event is fired when user has finished a selection of items in a list box and list box has been closed.
		 * @param selectedItems The selected items which are selected after list box has been closed.
		 */
		selectionFinish?: (selectedItems: sap.ui.core.Item[]) => void;
	}

	interface MultiInputMetadata extends sap.m.InputMetadata {
		/**
		 * If set to true, the MultiInput will be displayed in multi-line display mode.
		 * In multi-line display mode, all tokens can be fully viewed and easily edited in the MultiInput.
		 * The default value is false.
		 * @default false
		 */
		enableMultiLineMode?: boolean;
		/**
		 * The max number of tokens that is allowed in MultiInput.
		 */
		maxTokens?: number;
		/**
		 * Fired when the tokens aggregation changed (add / remove token)
		 * @param type Type of tokenChange event.
		 * There are four TokenChange types: "added", "removed", "removedAll", "tokensChanged".
		 * Use Tokenizer.TokenChangeType.Added for "added",	Tokenizer.TokenChangeType.Removed for "removed", Tokenizer.TokenChangeType.RemovedAll for "removedAll" and Tokenizer.TokenChangeType.TokensChanged for "tokensChanged".
		 * @param token The added token or removed token.
		 * This parameter is used when tokenChange type is "added" or "removed".
		 * @param tokens The array of removed tokens.
		 * This parameter is used when tokenChange type is "removedAll".
		 * @param addedTokens The array of tokens that are added.
		 * This parameter is used when tokenChange type is "tokenChanged".
		 * @param removedTokens The array of tokens that are removed.
		 * This parameter is used when tokenChange type is "tokenChanged".
		 */
		tokenChange?: (type: string, token: sap.m.Token, tokens: sap.m.Token[], addedTokens: sap.m.Token[], removedTokens: sap.m.Token[]) => void;
	}

	interface NavContainerMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Determines whether the initial focus is set automatically on first rendering and after navigating to a new page.
		 * This is useful when on touch devices the keyboard pops out due to the focus being automatically set on an input field.
		 * If necessary the "afterShow" event can be used to focus another element.
		 * @default true
		 */
		autoFocus?: boolean;
		/**
		 * The height of the NavContainer. Can be changed when the NavContainer should not cover the whole available area.
		 * @default 100%
		 */
		height?: sap.ui.core.CSSSize;
		/**
		 * The width of the NavContainer. Can be changed when the NavContainer should not cover the whole available area.
		 * @default 100%
		 */
		width?: sap.ui.core.CSSSize;
		/**
		 * Whether the NavContainer is visible.
		 * @default true
		 */
		visible?: boolean;
		/**
		 * The type of the transition/animation to apply when "to()" is called without defining a transition type to use. The default is "slide". Other options are: "fade", "flip" and "show" - and the names of any registered custom transitions.
		 * @default slide
		 */
		defaultTransitionName?: string;
		/**
		 * The event is fired when navigation between two pages has been triggered. The transition (if any) to the new page has not started yet.
		 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation.
		 * @param from The page which was shown before the current navigation.
		 * @param fromId The ID of the page which was shown before the current navigation.
		 * @param to The page which will be shown after the current navigation.
		 * @param toId The ID of the page which will be shown after the current navigation.
		 * @param firstTime Whether the "to" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.
		 * @param isTo Whether this is a forward navigation, triggered by "to()".
		 * @param isBack Whether this is a back navigation, triggered by "back()".
		 * @param isBackToTop Whether this is a navigation to the root page, triggered by "backToTop()".
		 * @param isBackToPage Whether this was a navigation to a specific page, triggered by "backToPage()".
		 * @param direction How the navigation was triggered, possible values are "to", "back", "backToPage", and "backToTop".
		 */
		navigate?: (from: sap.ui.core.Control, fromId: string, to: sap.ui.core.Control, toId: string, firstTime: boolean, isTo: boolean, isBack: boolean, isBackToTop: boolean, isBackToPage: boolean, direction: string) => void;
		/**
		 * The event is fired when navigation between two pages has completed. In case of animated transitions this event is fired with some delay after the "navigate" event.
		 * @param from The page which had been shown before navigation.
		 * @param fromId The ID of the page which had been shown before navigation.
		 * @param to The page which is now shown after navigation.
		 * @param toId The ID of the page which is now shown after navigation.
		 * @param firstTime Whether the "to" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.
		 * @param isTo Whether was a forward navigation, triggered by "to()".
		 * @param isBack Whether this was a back navigation, triggered by "back()".
		 * @param isBackToTop Whether this was a navigation to the root page, triggered by "backToTop()".
		 * @param isBackToPage Whether this was a navigation to a specific page, triggered by "backToPage()".
		 * @param direction How the navigation was triggered, possible values are "to", "back", "backToPage", and "backToTop".
		 */
		afterNavigate?: (from: sap.ui.core.Control, fromId: string, to: sap.ui.core.Control, toId: string, firstTime: boolean, isTo: boolean, isBack: boolean, isBackToTop: boolean, isBackToPage: boolean, direction: string) => void;
	}

	interface NewsContentMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * The content text.
		 */
		contentText?: string;
		/**
		 * The subheader.
		 */
		subheader?: string;
		/**
		 * The event is fired when the user chooses the news content.
		 */
		press?: () => void;
	}

	interface NotificationListBaseMetadata extends sap.m.ListItemBaseMetadata {
		/**
		 * Determines the priority of the Notification.
		 * @default None
		 */
		priority?: sap.ui.core.Priority;
		/**
		 * Determines the title of the NotificationListBase item.
		 * @default 
		 */
		title?: string;
		/**
		 * Determines the due date of the NotificationListItem.
		 * @default 
		 */
		datetime?: string;
		/**
		 * Determines the action buttons visibility.
		 * @default true
		 */
		showButtons?: boolean;
		/**
		 * Determines the visibility of the close button.
		 * @default true
		 */
		showCloseButton?: boolean;
		/**
		 * Determines the notification group's author name.
		 * @default 
		 */
		authorName?: string;
		/**
		 * Determines the URL of the notification group's author picture.
		 */
		authorPicture?: sap.ui.core.URI;
		/**
		 * Fired when the close button of the notification is pressed.<br><b>Note:</b> Pressing the close button doesn't destroy the notification automatically.
		 */
		close?: () => void;
	}

	interface NotificationListGroupMetadata extends sap.m.NotificationListBaseMetadata {
		/**
		 * Determines if the group is collapsed or expanded.
		 * @default false
		 */
		collapsed?: boolean;
		/**
		 * Determines if the group will automatically set the priority based on the highest priority of its notifications or get its priority from the developer.
		 * @default true
		 */
		autoPriority?: boolean;
		/**
		 * Determines if the group header/footer of the empty group will be always shown. By default groups with 0 notifications are not shown.
		 * @default false
		 */
		showEmptyGroup?: boolean;
	}

	interface NotificationListItemMetadata extends sap.m.NotificationListBaseMetadata {
		/**
		 * Determines the description of the NotificationListItem.
		 * @default 
		 */
		description?: string;
		/**
		 * Determines if the text in the title and the description of the notification are truncated to the first two lines.
		 * @default true
		 */
		truncate?: boolean;
		/**
		 * Determines it the "Show More" button should be hidden.
		 * @default false
		 */
		hideShowMoreButton?: boolean;
	}

	interface NumericContentMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * If set to true, the change of the value will be animated.
		 * @default true
		 */
		animateTextChange?: boolean;
		/**
		 * If set to true, the value parameter contains a numeric value and scale. If set to false (default), the value parameter contains a numeric value only.
		 * @default false
		 */
		formatterValue?: boolean;
		/**
		 * The icon to be displayed as a graphical element within the control. This can be an image or an icon from the icon font.
		 */
		icon?: sap.ui.core.URI;
		/**
		 * Description of an icon that is used in the tooltip.
		 */
		iconDescription?: string;
		/**
		 * The indicator arrow that shows value deviation.
		 * @default None
		 */
		indicator?: sap.m.DeviationIndicator;
		/**
		 * If set to true, the omitted value property is set to 0.
		 * @default true
		 */
		nullifyValue?: boolean;
		/**
		 * The scaling prefix. Financial characters can be used for currencies and counters. The SI prefixes can be used for units. If the scaling prefix contains more than three characters, only the first three characters are displayed.
		 */
		scale?: string;
		/**
		 * The number of characters to display for the value property.
		 * @default 4
		 */
		truncateValueTo?: number;
		/**
		 * The actual value.
		 */
		value?: string;
		/**
		 * The semantic color of the value.
		 * @default Neutral
		 */
		valueColor?: sap.m.ValueColor;
		/**
		 * The width of the chart. If it is not set, the size of the control is defined by the size property.
		 */
		width?: sap.ui.core.CSSSize;
		/**
		 * If the value is set to false, the content will fit to the whole size of the control.
		 * @default true
		 */
		withMargin?: boolean;
		/**
		 * Indicates the load status.
		 * @default Loaded
		 */
		state?: sap.m.LoadState;
		/**
		 * The event is fired when the user chooses the numeric content.
		 */
		press?: () => void;
	}

	interface ObjectAttributeMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Defines the ObjectAttribute title.
		 */
		title?: string;
		/**
		 * Defines the ObjectAttribute text.
		 */
		text?: string;
		/**
		 * Indicates if the ObjectAttribute text is selectable for the user.
		 */
		active?: boolean;
		/**
		 * Determines the direction of the text, not including the title.
		 * Available options for the text direction are LTR (left-to-right) and RTL (right-to-left). By default the control inherits the text direction from its parent control.
		 * @default Inherit
		 */
		textDirection?: sap.ui.core.TextDirection;
		/**
		 * Fires when the user clicks on active text.
		 * @param domRef DOM reference of the ObjectAttribute's text to be used for positioning.
		 */
		press?: (domRef: string) => void;
	}

	interface ObjectHeaderMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Object header title
		 */
		title?: string;
		/**
		 * Object header number field
		 */
		number?: string;
		/**
		 * Object header number units qualifier
		 */
		numberUnit?: string;
		/**
		 * Introductory text for the object header
		 */
		intro?: string;
		/**
		 * Indicates that the intro is clickable
		 */
		introActive?: boolean;
		/**
		 * Indicates that the title is clickable and is set only if a title is provided
		 */
		titleActive?: boolean;
		/**
		 * Object header icon.
		 * 
		 * <b>Note:</b> Recursive resolution of binding expressions is not supported by the framework.
		 * It works only in ObjectHeader, since it is a composite control and creates an Image control internally.
		 */
		icon?: sap.ui.core.URI;
		/**
		 * Indicates that the object header icon is clickable
		 */
		iconActive?: boolean;
		/**
		 * Object header icon alternative text that is displayed in case the Image is not available, or cannot be displayed.
		 */
		iconAlt?: string;
		/**
		 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
		 * 
		 * If bandwidth is the key for the application, set this value to false.
		 * @default true
		 */
		iconDensityAware?: boolean;
		/**
		 * Sets the favorite state to true or false. The showMarkers property must be true for this property to take effect.
		 * @default false
		 */
		markFavorite?: boolean;
		/**
		 * Sets the flagged state to true or false. The showMarkers property must be true for this property to take effect.
		 * @default false
		 */
		markFlagged?: boolean;
		/**
		 * Indicates if object header supports showing markers such as flagged and favorite.
		 * @default false
		 */
		showMarkers?: boolean;
		/**
		 * When set to true, the selector arrow icon/image is shown and can be pressed.
		 * @default false
		 */
		showTitleSelector?: boolean;
		/**
		 * Object header number and numberUnit value state.
		 * @default None
		 */
		numberState?: sap.ui.core.ValueState;
		/**
		 * <code>ObjectHeader</code> with title, one attribute, number, and number unit.<br>
		 * <b>Note:</b> Only applied if the <code>responsive</code> property is set to <code>false</code>.
		 * @default false
		 */
		condensed?: boolean;
		/**
		 * This property is used to set the background color of the ObjectHeader. Possible values are "Solid", "Translucent" and "Transparent".
		 * NOTE: The different types of ObjectHeader come with different default background.
		 * - non responsive ObjectHeader: Transparent
		 * - responsive ObjectHeader: Translucent
		 * - condensed ObjectHeder: Solid
		 */
		backgroundDesign?: sap.m.BackgroundDesign;
		/**
		 * If this property is set to true the ObjectHeader is rendered with a different design and reacts responsively to the screen sizes.
		 * Be aware that the design and behavior of the responsive ObjectHeader can change without further notification.
		 * @default false
		 */
		responsive?: boolean;
		/**
		 * Optimizes the display of the elements of the <code>ObjectHeader</code>.<br>
		 * Set this property to <code>true</code> if your application uses a full-screen layout (as opposed to a master-detail or other split-screen layout).<br>
		 * <b>Note</b>: Only applied if the <code>responsive</code> property is also set to <code>true</code>.
		 * 
		 * If set to <code>true</code>, the following situations apply:
		 * <ul>
		 *                 <li>On desktop, 1-3 attributes/statuses - positioned as a third block on the right side of the Title/Number group</li>
		 *                 <li>On desktop, 4+ attributes/statuses - 4 columns below the Title/Number</li>
		 *                 <li>On tablet (portrait mode), always in 2 columns below the Title/Number</li>
		 *                 <li>On tablet (landscape mode), 1-2 attributes/statuses - 2 columns below the Title/Number</li>
		 *                 <li>On tablet (landscape mode), 3+ attributes/statuses - 3 columns below the Title/Number</li>
		 * </ul>
		 * On phone, the attributes and statuses are always positioned in 1 column below the Title/Number of the <code>ObjectHeader</code>.<br>
		 * 
		 * If set to <code>false</code>, the attributes and statuses are being positioned below the Title/Number of the <code>ObjectHeader</code> in 2 or 3 columns depending on their number:
		 * <ul>
		 *                <li>On desktop, 1-4 attributes/statuses - 2 columns</li>
		 *                <li>On desktop, 5+ attributes/statuses - 3 columns</li>
		 *                <li>On tablet, always in 2 columns</li>
		 * </ul>
		 * @default false
		 */
		fullScreenOptimized?: boolean;
		/**
		 * The title link target URI. Supports standard hyperlink behavior. If an action should be triggered, this should not be set, but instead an event handler for the "titlePress" event should be registered.
		 */
		titleHref?: sap.ui.core.URI;
		/**
		 * Options are _self, _top, _blank, _parent, _search. Alternatively, a frame name can be entered.
		 */
		titleTarget?: string;
		/**
		 * The intro link target URI. Supports standard hyperlink behavior. If an action should be triggered, this should not be set, but instead an event handler for the "introPress" event should be registered.
		 */
		introHref?: sap.ui.core.URI;
		/**
		 * Options are _self, _top, _blank, _parent, _search. Alternatively, a frame name can be entered.
		 */
		introTarget?: string;
		/**
		 * This property specifies the title text directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * @default Inherit
		 */
		titleTextDirection?: sap.ui.core.TextDirection;
		/**
		 * This property specifies the intro text directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * @default Inherit
		 */
		introTextDirection?: sap.ui.core.TextDirection;
		/**
		 * This property specifies the number and unit directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * @default Inherit
		 */
		numberTextDirection?: sap.ui.core.TextDirection;
		/**
		 * Sets custom text for the tooltip of the select title arrow. If not set, a default text of the tooltip will be displayed.
		 * @default Options
		 */
		titleSelectorTooltip?: string;
		/**
		 * Defines the semantic level of the title.
		 * This information is e.g. used by assistive technologies like screenreaders to create a hierarchical site map for faster navigation.
		 * Depending on this setting a HTML h1-h6 element is used.
		 * @default H1
		 */
		titleLevel?: sap.ui.core.TitleLevel;
		/**
		 * Event is fired when the title is active and the user taps/clicks on it
		 * @param domRef Dom reference of the object header' title to be used for positioning.
		 */
		titlePress?: (domRef: any) => void;
		/**
		 * Event is fired when the intro is active and the user taps/clicks on it
		 * @param domRef Dom reference of the object header' intro to be used for positioning.
		 */
		introPress?: (domRef: any) => void;
		/**
		 * Event is fired when the title icon is active and the user taps/clicks on it
		 * @param domRef Dom reference of the object header' icon to be used for positioning.
		 */
		iconPress?: (domRef: any) => void;
		/**
		 * Event is fired when the object header title selector (down-arrow) is pressed
		 * @param domRef Dom reference of the object header' titleArrow to be used for positioning.
		 */
		titleSelectorPress?: (domRef: any) => void;
	}

	interface ObjectIdentifierMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Defines the object title.
		 */
		title?: string;
		/**
		 * Defines the object text.
		 */
		text?: string;
		/**
		 * Indicates if the ObjectIdentifier is visible. An invisible ObjectIdentifier is not being rendered.
		 * @default true
		 */
		visible?: boolean;
		/**
		 * Indicates if the ObjectIdentifier's title is clickable.
		 * @default false
		 */
		titleActive?: boolean;
		/**
		 * Specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * @default Inherit
		 */
		textDirection?: sap.ui.core.TextDirection;
		/**
		 * Fires when the title is active and the user taps/clicks on it.
		 * @param domRef DOM reference of the object identifier's title.
		 */
		titlePress?: (domRef: any) => void;
	}

	interface ObjectListItemMetadata extends sap.m.ListItemBaseMetadata {
		/**
		 * Defines the ObjectListItem title.
		 */
		title?: string;
		/**
		 * Defines the ObjectListItem number.
		 */
		number?: string;
		/**
		 * Defines the number units qualifier of the ObjectListItem.
		 */
		numberUnit?: string;
		/**
		 * Defines the introductory text for the ObjectListItem.
		 */
		intro?: string;
		/**
		 * ObjectListItem icon displayed to the left of the title.
		 */
		icon?: sap.ui.core.URI;
		/**
		 * Icon displayed when the ObjectListItem is active.
		 */
		activeIcon?: sap.ui.core.URI;
		/**
		 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image (in case this version of image dоesn't exist on the server).
		 * 
		 * If bandwidth is key for the application, set this value to false.
		 * @default true
		 */
		iconDensityAware?: boolean;
		/**
		 * Sets the favorite state for the ObjectListItem.
		 */
		markFavorite?: boolean;
		/**
		 * Sets the flagged state for the ObjectListItem.
		 */
		markFlagged?: boolean;
		/**
		 * If set to true, the ObjectListItem can be marked with icons such as favorite and flag.
		 */
		showMarkers?: boolean;
		/**
		 * Defines the ObjectListItem number and numberUnit value state.
		 * @default None
		 */
		numberState?: sap.ui.core.ValueState;
		/**
		 * Determines the text direction of the item title.
		 * Available options for the title direction are LTR (left-to-right) and RTL (right-to-left).
		 * By default the item title inherits the text direction from its parent.
		 * @default Inherit
		 */
		titleTextDirection?: sap.ui.core.TextDirection;
		/**
		 * Determines the text direction of the item intro.
		 * Available options for the intro direction are LTR (left-to-right) and RTL (right-to-left).
		 * By default the item intro inherits the text direction from its parent.
		 * @default Inherit
		 */
		introTextDirection?: sap.ui.core.TextDirection;
		/**
		 * Determines the text direction of the item number.
		 * Available options for the number direction are LTR (left-to-right) and RTL (right-to-left).
		 * By default the item number inherits the text direction from its parent.
		 * @default Inherit
		 */
		numberTextDirection?: sap.ui.core.TextDirection;
		/**
		 * Sets the locked state of the ObjectListItem.
		 * @default false
		 */
		markLocked?: boolean;
	}

	interface ObjectMarkerMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Sets one of the predefined types.<br>
		 * <b>Note</b>: If the <code>visibility</code> property is not specified explicitly, every <code>type</code> comes with predefined one as follows:
		 * <ul>
		 *                 <li>For <code>Flagged</code> and <code>Favorite</code> the icon is visible and the text is not displayed</li>
		 *                 <li>For <code>Draft</code> the text is visible and the icon is not displayed</li>
		 *                 <li>For <code>Locked</code> and <code>Unsaved</code> - on screens larger than 600px both icon and text are visible, otherwise only the icon</li>
		 * 
		 * </ul>
		 */
		type?: sap.m.ObjectMarkerType;
		/**
		 * Sets one of the visibility states.
		 * Visibility states are as follows:
		 * <ul>
		 *                 <li><code>IconOnly</code> - displays only icon, regardless of the screen size</li>
		 *                 <li><code>TextOnly</code> - displays only text, regardless of the screen size</li>
		 *                 <li><code>IconAndText</code> - displays both icon and text, regardless of the screen size</li>
		 * </ul>
		 */
		visibility?: sap.m.ObjectMarkerVisibility;
		/**
		 * Event is fired when the <code>ObjectMarker</code> is interactive and the user taps/clicks on it.
		 */
		press?: () => void;
	}

	interface ObjectNumberMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Defines the number field.
		 */
		number?: string;
		/**
		 * Indicates if the object number should appear emphasized.
		 * @default true
		 */
		emphasized?: boolean;
		/**
		 * Determines the object number's value state. Setting this state will cause the number to be rendered in state-specific colors (only blue-crystal theme).
		 * @default None
		 */
		state?: sap.ui.core.ValueState;
		/**
		 * Defines the number units qualifier. If numberUnit and unit are both set, the unit value is used.
		 */
		unit?: string;
		/**
		 * Available options for the number and unit text direction are LTR(left-to-right) and RTL(right-to-left). By default, the control inherits the text direction from its parent control.
		 * @default Inherit
		 */
		textDirection?: sap.ui.core.TextDirection;
		/**
		 * Sets the horizontal alignment of the number and unit.
		 * @default Begin
		 */
		textAlign?: sap.ui.core.TextAlign;
	}

	interface ObjectStatusMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Defines the ObjectStatus title.
		 */
		title?: string;
		/**
		 * Defines the ObjectStatus text.
		 */
		text?: string;
		/**
		 * Defines the text value state.
		 * @default None
		 */
		state?: sap.ui.core.ValueState;
		/**
		 * Icon URI. This may be either an icon font or image path.
		 */
		icon?: sap.ui.core.URI;
		/**
		 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
		 * 
		 * If bandwidth is key for the application, set this value to false.
		 * @default true
		 */
		iconDensityAware?: boolean;
		/**
		 * Determines the direction of the text, not including the title.
		 * Available options for the text direction are LTR (left-to-right) and RTL (right-to-left). By default the control inherits the text direction from its parent control.
		 * @default Inherit
		 */
		textDirection?: sap.ui.core.TextDirection;
	}

	interface OverflowToolbarLayoutDataMetadata extends sap.m.ToolbarLayoutDataMetadata {
		/**
		 * Defines OverflowToolbar items priority, Available priorities ate NeverOverflow, High, Low, Disappear and AlwaysOverflow
		 * @default High
		 */
		priority?: sap.m.OverflowToolbarPriority;
		/**
		 * Defines OverflowToolbar items group number.
		 * Default value is 0, which means that the control does not belong to any group.
		 * Elements that belong to a group overflow together. The overall priority of the group is defined by the element with highest priority.
		 * Elements that belong to a group are not allowed to have AlwaysOverflow or NeverOverflow priority.
		 * @default 0
		 */
		group?: number;
		/**
		 * Defines whether the overflow area is automatically closed when interacting with a control in it
		 * @default true
		 */
		closeOverflowOnInteraction?: boolean;
	}

	interface P13nColumnsItemMetadata extends sap.ui.core.ItemMetadata {
		/**
		 * This property contains the unique table column key
		 */
		columnKey?: string;
		/**
		 * This property contains the index of a table column
		 */
		index?: number;
		/**
		 * This property decides whether a P13nColumnsItem is visible
		 */
		visible?: boolean;
		/**
		 * This property contains the with of a table column.
		 */
		width?: string;
		/**
		 * This property contains the total flag of a table column.
		 */
		total?: boolean;
	}

	interface P13nColumnsPanelMetadata extends sap.m.P13nPanelMetadata {
		/**
		 * Specifies a threshold of visible items. If the end user makes a lot of columns visible, this might cause performance to slow down.
		 * When this happens, the user can receive a corresponding warning triggered by the <code>visibleItemsThreshold</code> property. The
		 * property needs to be activated and set to the required value by the consuming application to ensure that the warning message is
		 * shown when the threshold has been exceeded. In the following example the message will be shown if more than 100 visible columns are
		 * selected:
		 * 
		 * <pre>
		 * customData&gt;
		 * core:CustomData key=&quot;p13nDialogSettings&quot;
		 * value='\{&quot;columns&quot;:\{&quot;visible&quot;: true, &quot;payload&quot;: \{&quot;visibleItemsThreshold&quot;: 3\}\}\}' /&gt;
		 * /customData&gt;
		 * </pre>
		 * @default -1
		 */
		visibleItemsThreshold?: number;
		/**
		 * Event raised when a <code>columnsItem</code> is added.
		 * @param newItem <code>columnsItem</code> that needs to be added in the model.
		 */
		addColumnsItem?: (newItem: sap.m.P13nColumnsItem) => void;
		/**
		 * Event raised if <code>columnsItems</code> is changed or new one needs to be created in the model.
		 * @param newItems Contains <code>columnsItems</code> that needs to be created in the model.
		 * @param existingItems Contains <code>columnsItems</code> that needs to be changed in the model.
		 */
		changeColumnsItems?: (newItems: sap.m.P13nColumnsItem[], existingItems: sap.m.P13nColumnsItem[]) => void;
		/**
		 * Event raised if <code>setData</code> is called in model. The event serves the purpose of minimizing such calls since they can
		 * take up a lot of performance.
		 */
		setData?: () => void;
	}

	interface P13nConditionPanelMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * defines the max number of conditions on the ConditionPanel
		 * @default -1
		 */
		maxConditions?: string;
		/**
		 * exclude options for filter
		 * @default false
		 */
		exclude?: boolean;
		/**
		 * defines if the mediaQuery or a ContainerResize will be used for layout update. When the P13nConditionPanel is used on a dialog the
		 * property should be set to true!
		 * @default false
		 */
		containerQuery?: boolean;
		/**
		 * adds initial a new empty condition row
		 * @default false
		 */
		autoAddNewRow?: boolean;
		/**
		 * makes the remove icon on the first condition row disabled when only one condition exist.
		 * @default false
		 */
		disableFirstRemoveIcon?: boolean;
		/**
		 * makes the Add icon visible on each condition row. If is set to false the Add is only visible at the end and you can only append a
		 * new condition.
		 * @default true
		 */
		alwaysShowAddIcon?: boolean;
		/**
		 * new added condition use the settings from the previous condition as default.
		 * @default true
		 */
		usePrevConditionSetting?: boolean;
		/**
		 * KeyField value can only be selected once. When you set the property to true the ConditionPanel will automatically offers on the
		 * KeyField drop down only the keyFields which are not used. The default behavior is that in each keyField dropdown all keyfields are
		 * listed.
		 * @default false
		 */
		autoReduceKeyFieldItems?: boolean;
		/**
		 * can be used to control the layout behavior. Default is "" which will automatically change the layout. With "Desktop", "Table"
		 * or"Phone" you can set a fixed layout.
		 */
		layoutMode?: string;
		/**
		 * show additional labels in the condition
		 * @default false
		 */
		showLabel?: boolean;
		/**
		 * This represents the displayFormat of the condition Values. With the value "UpperCase" the entered value of the condition will be
		 * converted to upperCase.
		 */
		displayFormat?: string;
		/**
		 * Calls the validation listener tbd...
		 */
		validationExecutor?: any;
		/**
		 * Workaround for updating the binding
		 */
		dataChange?: () => void;
	}

	interface P13nDialogMetadata extends sap.m.DialogMetadata {
		/**
		 * This property determines which panel is initially shown when dialog is opened. Due to extensibility reason the type should be
		 * <code>string</code>. So it is feasible to add a custom panel without expanding the type.
		 */
		initialVisiblePanelType?: string;
		/**
		 * This property determines whether the 'Restore' button is shown inside the dialog. If this property is set to true, clicking the
		 * 'Reset' button will trigger the <code>reset</code> event sending a notification that model data must be reset.
		 * @default false
		 */
		showReset?: boolean;
		/**
		 * This property determines whether the 'Restore' button is enabled and is taken into account only if <code>showReset</code> is set
		 * to <code>true</code>.
		 * @default false
		 */
		showResetEnabled?: boolean;
		/**
		 * Calls the validation listener once all panel-relevant validation checks have been done. This callback function is called in order
		 * to perform cross-model validation checks.
		 */
		validationExecutor?: any;
		/**
		 * Event fired if the 'ok' button in P13nDialog is clicked.
		 */
		ok?: () => void;
		/**
		 * Event fired if the 'cancel' button in P13nDialog is clicked.
		 */
		cancel?: () => void;
		/**
		 * Event fired if the 'reset' button in P13nDialog is clicked.
		 */
		reset?: () => void;
	}

	interface P13nDimMeasureItemMetadata extends sap.ui.core.ItemMetadata {
		/**
		 * Specifies the unique chart column key. In this context a column refers to dimensions or measures of a chart.
		 */
		columnKey?: string;
		/**
		 * Specifies the order of visible dimensions or measures of a chart.
		 * @default -1
		 */
		index?: number;
		/**
		 * Specifies the visibility of dimensions or measures.
		 */
		visible?: boolean;
		/**
		 * Specifies the role of dimensions or measures. The role determines how dimensions and measures influence the chart.
		 */
		role?: string;
	}

	interface P13nDimMeasurePanelMetadata extends sap.m.P13nPanelMetadata {
		/**
		 * Specifies a chart type key.
		 * @default 
		 */
		chartTypeKey?: string;
	}

	interface P13nFilterItemMetadata extends sap.ui.core.ItemMetadata {
		/**
		 * sap.m.P13nConditionOperation
		 */
		operation?: string;
		/**
		 * value of the filter
		 */
		value1?: string;
		/**
		 * to value of the between filter
		 */
		value2?: string;
		/**
		 * key of the column
		 */
		columnKey?: string;
		/**
		 * defines if the filter is an include or exclude filter item
		 * @default false
		 */
		exclude?: boolean;
	}

	interface P13nFilterPanelMetadata extends sap.m.P13nPanelMetadata {
		/**
		 * Defines the maximum number of include filters.
		 * @default -1
		 */
		maxIncludes?: string;
		/**
		 * Defines the maximum number of exclude filters.
		 * @default -1
		 */
		maxExcludes?: string;
		/**
		 * Defines if the <code>mediaQuery</code> or a <code>ContainerResize</code> is used for layout update. If the
		 * <code>ConditionPanel</code> is used in a dialog, the property must be set to <code>true</code>.
		 * @default false
		 */
		containerQuery?: boolean;
		/**
		 * Can be used to control the layout behavior. Default is "" which will automatically change the layout. With "Desktop", "Table"
		 * or"Phone" you can set a fixed layout.
		 */
		layoutMode?: string;
		/**
		 * Event raised if a filter item has been added.
		 */
		addFilterItem?: () => void;
		/**
		 * Removes a filter item.
		 */
		removeFilterItem?: () => void;
		/**
		 * Updates a filter item.
		 */
		updateFilterItem?: () => void;
	}

	interface P13nGroupItemMetadata extends sap.ui.core.ItemMetadata {
		/**
		 * sap.m.P13nConditionOperation
		 */
		operation?: string;
		/**
		 * key of the column
		 */
		columnKey?: string;
		/**
		 * make the grouped column as normalcolumn visible
		 * @default false
		 */
		showIfGrouped?: boolean;
	}

	interface P13nGroupPanelMetadata extends sap.m.P13nPanelMetadata {
		/**
		 * Defines the maximum number of groups.
		 * @default -1
		 */
		maxGroups?: string;
		/**
		 * Defines if <code>mediaQuery</code> or <code>ContainerResize</code> is used for a layout update. If <code>ConditionPanel</code>
		 * is used in a dialog, the property must be set to true.
		 * @default false
		 */
		containerQuery?: boolean;
		/**
		 * Can be used to control the layout behavior. Default is "" which will automatically change the layout. With "Desktop", "Table"
		 * or"Phone" you can set a fixed layout.
		 */
		layoutMode?: string;
		/**
		 * Event raised if a <code>GroupItem</code> has been added.
		 */
		addGroupItem?: () => void;
		/**
		 * Removes a group item.
		 */
		removeGroupItem?: () => void;
		/**
		 * Updates a group item.
		 */
		updateGroupItem?: () => void;
	}

	interface P13nItemMetadata extends sap.ui.core.ItemMetadata {
		/**
		 * Can be used as input for subsequent actions.
		 */
		columnKey?: string;
		/**
		 * The text to be displayed for the item.
		 * @default 
		 */
		text?: string;
		/**
		 * Defines visibility of column
		 */
		visible?: boolean;
		/**
		 * data type of the column (text, numeric or date is supported)
		 * @default text
		 */
		type?: string;
		/**
		 * if type==numeric the precision will be used to format the entered value (maxIntegerDigits of the used Formatter)
		 */
		precision?: string;
		/**
		 * if type==numeric the scale will be used to format the entered value (maxFractionDigits of the used Formatter)
		 */
		scale?: string;
		/**
		 * specifies the number of characters which can be entered in the value fields of the condition panel
		 */
		maxLength?: string;
		/**
		 * Defines column width
		 */
		width?: string;
		/**
		 * the column with isDefault==true will be used as the selected column item on the conditionPanel
		 * @default false
		 */
		isDefault?: boolean;
		/**
		 * the array of values for type bool. e.g. ["", "Off", "On"]. The first entry can be empty (used to blank the value field). Next value
		 * represent the false value, last entry the true value.
		 */
		values?: string[];
		/**
		 * Defines role. The role is reflected in the manner how the dimension will influence the chart layout.
		 */
		role?: string;
		/**
		 * Defines aggregation role
		 */
		aggregationRole?: string;
	}

	interface P13nPanelMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Title text appears in the panel.
		 */
		title?: string;
		/**
		 * Large title text appears e.g. in dialog header in case that only one panel is shown.
		 */
		titleLarge?: string;
		/**
		 * Panel type for generic use. Due to extensibility reason the type of <code>type</code> property should be <code>string</code>.
		 * So it is feasible to add a custom panel without expanding the type.
		 */
		type?: string;
		/**
		 * Enables the vertical Scrolling on the P13nDialog when the panel is shown.
		 * @default true
		 */
		verticalScrolling?: boolean;
		/**
		 * Callback method which is called in order to validate end user entry.
		 */
		validationExecutor?: any;
		/**
		 * Callback method which is called in order to register for validation result.
		 */
		validationListener?: any;
		/**
		 * Callback which notifies a change on this panel.
		 */
		changeNotifier?: any;
		/**
		 * Due to performance the data of the panel can be requested in lazy mode e.g. when the panel is displayed
		 */
		beforeNavigationTo?: () => void;
	}

	interface P13nSortItemMetadata extends sap.ui.core.ItemMetadata {
		/**
		 * sap.m.P13nConditionOperation
		 */
		operation?: string;
		/**
		 * key of the column
		 */
		columnKey?: string;
	}

	interface P13nSortPanelMetadata extends sap.m.P13nPanelMetadata {
		/**
		 * defines if the mediaQuery or a ContainerResize will be used for layout update. When the ConditionPanel is used on a dialog the
		 * property should be set to true!
		 * @default false
		 */
		containerQuery?: boolean;
		/**
		 * can be used to control the layout behavior. Default is "" which will automatically change the layout. With "Desktop", "Table"
		 * or"Phone" you can set a fixed layout.
		 */
		layoutMode?: string;
		/**
		 * event raised when a SortItem was added
		 */
		addSortItem?: () => void;
		/**
		 * remove a sort item
		 */
		removeSortItem?: () => void;
		/**
		 * update a sort item
		 */
		updateSortItem?: () => void;
	}

	interface PageMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * The title text appearing in the page header bar.
		 */
		title?: string;
		/**
		 * Defines the semantic level of the title. Using "Auto" no explicit level information is written.
		 * Used for accessibility purposes only.
		 * @default Auto
		 */
		titleLevel?: sap.ui.core.TitleLevel;
		/**
		 * A nav button will be rendered on the left area of header bar if this property is set to true.
		 * @default false
		 */
		showNavButton?: boolean;
		/**
		 * Whether this page shall have a header.
		 * If set to true, either the control under the "customHeader" aggregation is used, or if there is no such control, a Header control is constructed from the properties "title", "showNavButton", "navButtonText" and "icon" depending on the platform.
		 * @default true
		 */
		showHeader?: boolean;
		/**
		 * Whether this page shall show the subheader.
		 * @default true
		 */
		showSubHeader?: boolean;
		/**
		 * The tooltip of the nav button
		 * 
		 * Since version 1.34
		 */
		navButtonTooltip?: string;
		/**
		 * Enable vertical scrolling of page contents. Page headers and footers are fixed and do not scroll.
		 * If set to false, there will be no scrolling at all.
		 * 
		 * The Page only allows vertical scrolling because horizontal scrolling is discouraged in general for full-page content. If it still needs to be achieved, disable the Page scrolling and use a ScrollContainer as full-page content of the Page. This allows you to freely configure scrolling. It can also be used to create horizontally-scrolling sub-areas of (vertically-scrolling) Pages.
		 * @default true
		 */
		enableScrolling?: boolean;
		/**
		 * This property is used to set the background color of a page. When a list is placed inside a page, the value "List" should be used to display a gray background. "Standard", with the value white, is used as default if not specified.
		 * @default Standard
		 */
		backgroundDesign?: sap.m.PageBackgroundDesign;
		/**
		 * Whether this page shall have a footer
		 * @default true
		 */
		showFooter?: boolean;
		/**
		 * Decides which area is covered by the local BusyIndicator when <code>page.setBusy()</code> is called. By default the entire page is covered, including headers and footer. When this property is set to "true", only the content area is covered (not header/sub header and footer), which is useful e.g. when there is a SearchField in the sub header and live search continuously updates the content area while the user is still able to type.
		 * @default false
		 */
		contentOnlyBusy?: boolean;
		/**
		 * Decides whether the floating footer behavior should be enabled.
		 * When the floating footer behavior is used, the content is visible when it's underneath the footer.
		 * @default false
		 */
		floatingFooter?: boolean;
		/**
		 * this event is fired when Nav Button is pressed
		 */
		navButtonPress?: () => void;
	}

	interface PageAccessibleLandmarkInfoMetadata {
		/**
		 * Landmark role of the root container of the corresponding <code>sap.m.Page</code> control.
		 * 
		 * If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.
		 * @default Region
		 */
		rootRole?: sap.ui.core.AccessibleLandmarkRole;
		/**
		 * Texts which describes the landmark of the root container of the corresponding <code>sap.m.Page</code> control.
		 * 
		 * If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text
		 * is used.
		 */
		rootLabel?: string;
		/**
		 * Landmark role of the content container of the corresponding <code>sap.m.Page</code> control.
		 * 
		 * If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.
		 * @default Main
		 */
		contentRole?: sap.ui.core.AccessibleLandmarkRole;
		/**
		 * Texts which describes the landmark of the content container of the corresponding <code>sap.m.Page</code> control.
		 * 
		 * If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text
		 * is used.
		 */
		contentLabel?: string;
		/**
		 * Landmark role of the header container of the corresponding <code>sap.m.Page</code> control.
		 * 
		 * If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.
		 * @default Region
		 */
		headerRole?: sap.ui.core.AccessibleLandmarkRole;
		/**
		 * Texts which describes the landmark of the header container of the corresponding <code>sap.m.Page</code> control.
		 * 
		 * If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text
		 * is used.
		 */
		headerLabel?: string;
		/**
		 * Landmark role of the subheader container of the corresponding <code>sap.m.Page</code> control.
		 * 
		 * If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.
		 */
		subHeaderRole?: sap.ui.core.AccessibleLandmarkRole;
		/**
		 * Texts which describes the landmark of the subheader container of the corresponding <code>sap.m.Page</code> control.
		 * 
		 * If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text
		 * is used.
		 */
		subHeaderLabel?: string;
		/**
		 * Landmark role of the footer container of the corresponding <code>sap.m.Page</code> control.
		 * 
		 * If set to <code>sap.ui.core.AccessibleLandmarkRole.None</code>, no landmark will be added to the container.
		 * @default Region
		 */
		footerRole?: sap.ui.core.AccessibleLandmarkRole;
		/**
		 * Texts which describes the landmark of the header container of the corresponding <code>sap.m.Page</code> control.
		 * 
		 * If not set (and a landmark different than <code>sap.ui.core.AccessibleLandmarkRole.None</code> is defined), a predefined text
		 * is used.
		 */
		footerLabel?: string;
	}

	interface PagingButtonMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Determines the total count of items/entities that the control navigates through.
		 * The minimum number of items/entities is 1.
		 * @default 1
		 */
		count?: number;
		/**
		 * Determines the current position in the items/entities that the control navigates through.
		 * Starting (minimum) number is 1.
		 * @default 1
		 */
		position?: number;
		/**
		 * Determines the tooltip of the next button.
		 * @default 
		 */
		nextButtonTooltip?: string;
		/**
		 * Determines the tooltip of the previous button.
		 * @default 
		 */
		previousButtonTooltip?: string;
		/**
		 * Fired when the current position is changed.
		 * @param newPosition The number of the new position.
		 * @param oldPosition The number of the old position.
		 */
		positionChange?: (newPosition: number, oldPosition: number) => void;
	}

	interface PanelMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * This property is used to set the header text of the Panel.
		 * The "headerText" is visible in both expanded and collapsed state.
		 * Note: This property is overwritten by the "headerToolbar" aggregation.
		 * @default 
		 */
		headerText?: string;
		/**
		 * Determines the Panel width.
		 * @default 100%
		 */
		width?: sap.ui.core.CSSSize;
		/**
		 * Determines the Panel height.
		 * @default auto
		 */
		height?: sap.ui.core.CSSSize;
		/**
		 * Specifies whether the control is expandable.
		 * This allows for collapsing or expanding the infoToolbar (if available) and content of the Panel.
		 * Note: If expandable is set to false, the Panel will always be rendered expanded.
		 * @default false
		 */
		expandable?: boolean;
		/**
		 * Indicates whether the Panel is expanded or not.
		 * If expanded is set to true, then both the infoToolbar (if available) and the content are rendered.
		 * If expanded is set to false, then only the headerText or headerToolbar is rendered.
		 * @default false
		 */
		expanded?: boolean;
		/**
		 * Indicates whether the transition between the expanded and the collapsed state of the control is animated.
		 * By default the animation is enabled.
		 * @default true
		 */
		expandAnimation?: boolean;
		/**
		 * This property is used to set the background color of the Panel.
		 * Depending on the theme you can change the state of the background from "Solid" over "Translucent" to "Transparent".
		 * @default Translucent
		 */
		backgroundDesign?: sap.m.BackgroundDesign;
		/**
		 * Indicates that the panel will expand or collapse
		 * @param expand If the panel will expand, this is true.
		 * If the panel will collapse, this is false.
		 */
		expand?: (expand: boolean) => void;
	}

	interface PlanningCalendarMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Start date of the row, as JavaScript date object. As a default the current date is used.
		 */
		startDate?: any;
		/**
		 * Key of the <code>PlanningCalendarView</code> used for the output. The default value uses a default view.
		 * If you are using own views, the keys of these views must be used instead.
		 * @default sap.ui.unified.CalendarIntervalType.Hour
		 */
		viewKey?: string;
		/**
		 * If set, only a single row can be selected
		 * @default true
		 */
		singleSelection?: boolean;
		/**
		 * Width of the <code>PlanningCalendar</code>
		 */
		width?: sap.ui.core.CSSSize;
		/**
		 * Height of the <code>PlanningCalendar</code>
		 */
		height?: sap.ui.core.CSSSize;
		/**
		 * If set, interval headers are shown like specified in <code>showEmptyIntervalHeaders</code>.
		 * 
		 * If not set, no interval headers are shown even if <code>intervalHeaders</code> are assigned.
		 * @default true
		 */
		showIntervalHeaders?: boolean;
		/**
		 * If set, interval headers are shown even if no <code>intervalHeaders</code> are assigned to the visible time frame.
		 * 
		 * If not set, no interval headers are shown if no <code>intervalHeaders</code> are assigned.
		 * 
		 * <b>Note:</b> This property is only used if <code>showIntervalHeaders</code> is set to <code>true</code>.
		 * @default true
		 */
		showEmptyIntervalHeaders?: boolean;
		/**
		 * If set, headers of the <code>PlanningCalendarRows</code> are shown. This means the column with the headers is shown.
		 * 
		 * If not set, the header column is not shown at all, even if header information is provided.
		 * @default true
		 */
		showRowHeaders?: boolean;
		/**
		 * This text is displayed when no rows are assigned.
		 */
		noDataText?: string;
		/**
		 * If set the appointments without text (only title) are rendered with a smaller height.
		 * 
		 * <b>Note:</b> On phone devices this property is ignored, appointments are always rendered in full height
		 * to allow touching.
		 * @default false
		 */
		appointmentsReducedHeight?: boolean;
		/**
		 * Defines the visualization of the <code>CalendarAppoinment</code>
		 * 
		 * <b>Note:</b> The real visualization depends on the used theme.
		 * @default Standard
		 */
		appointmentsVisualization?: sap.ui.unified.CalendarAppointmentVisualization;
		/**
		 * Minimum date that can be shown and selected in the <code>PlanningCalendar</code>. This must be a JavaScript date object.
		 * 
		 * <b>Note:</b> If the <code>minDate</code> is set to be after the <code>maxDate</code>,
		 * the <code>maxDate</code> is set to the end of the month of the <code>minDate</code>.
		 */
		minDate?: any;
		/**
		 * Maximum date that can be shown and selected in the <code>PlanningCalendar</code>. This must be a JavaScript date object.
		 * 
		 * <b>Note:</b> If the <code>maxDate</code> is set to be before the <code>minDate</code>,
		 * the <code>minDate</code> is set to the begin of the month of the <code>maxDate</code>.
		 */
		maxDate?: any;
		/**
		 * Fired if an appointment was selected
		 * @param appointment Selected appointment
		 * @param appointments Selected appointments in case a group appointment is selected
		 * @param multiSelect If set, the appointment was selected using multiple selection (e.g. Shift + single mouse click),
		 * meaning more than the current appointment could be selected.
		 */
		appointmentSelect?: (appointment: sap.ui.unified.CalendarAppointment, appointments: sap.ui.unified.CalendarAppointment[], multiSelect: boolean) => void;
		/**
		 * Fired if an interval was selected in the header calendar or in the row
		 * @param startDate Start date of the selected interval, as JavaScript date object.
		 * @param endDate Interval end date as JavaScript date object
		 * @param subInterval If set, the selected interval is a subinterval
		 * @param row Row of the selected interval
		 */
		intervalSelect?: (startDate: any, endDate: any, subInterval: boolean, row: sap.m.PlanningCalendarRow) => void;
		/**
		 * Fires when row selection is changed
		 * @param rows Array of rows whose selection has changed.
		 */
		rowSelectionChange?: (rows: sap.m.PlanningCalendarRow[]) => void;
		/**
		 * <code>startDate</code> was changed while navigating in <code>PlanningCalendar</code>
		 */
		startDateChange?: () => void;
		/**
		 * <code>viewKey</code> was changed by user interaction
		 */
		viewChange?: () => void;
	}

	interface PlanningCalendarRowMetadata {
		/**
		 * Title of the header (e.g. name of the person)
		 */
		title?: string;
		/**
		 * Text of the header (e.g. department of the person)
		 */
		text?: string;
		/**
		 * Icon of the header (e.g. picture of the person)
		 * 
		 * URI of an image or an icon registered in sap.ui.core.IconPool.
		 */
		icon?: sap.ui.core.URI;
		/**
		 * If set, the provided weekdays are displayed as non-working days.
		 * Valid values inside the array are 0 to 6. (other values will just be ignored.)
		 * 
		 * If not set, the weekend defined in the locale settings is displayed as non-working days.
		 * 
		 * <b>Note:</b> The non-working days are only visualized if <code>intervalType</code> is set to day.
		 */
		nonWorkingDays?: number[];
		/**
		 * If set, the provided hours are displayed as non-working hours.
		 * Valid values inside the array are 0 to 23. (other values will just be ignored.)
		 * 
		 * <b>Note:</b> The non-working hours are only visualized if <code>intervalType</code> is set to hour.
		 */
		nonWorkingHours?: number[];
		/**
		 * Defines the selected state of the <code>PlanningCalendarRow</code>.
		 * <b>Note:</b> Binding the <code>selected</code> property in single selection modes may cause unwanted results if you have more than one selected row in your binding.
		 * @default false
		 */
		selected?: boolean;
		/**
		 * Can be used as an identifier of the row
		 */
		key?: string;
	}

	interface PlanningCalendarViewMetadata {
		/**
		 * Key of the view. This must be set to identify the used view in the <code>PlanningCalendar</code>
		 */
		key?: string;
		/**
		 * Type of the intervals of the row. Default is Hour.
		 * @default Hour
		 */
		intervalType?: sap.ui.unified.CalendarIntervalType;
		/**
		 * Description of the <code>PlanningCalendarView</code>
		 */
		description?: string;
		/**
		 * Number of intervals (defined with <code>intervalType</code>) that are displayed on small size (phones).
		 * 
		 * <b>Note:</b> It is not only the screen size which is used to determine the available space, the size of the <code>PlanningCalendar</code> is used as well.
		 * @default 6
		 */
		intervalsS?: number;
		/**
		 * Number of intervals (defined with <code>intervalType</code>) that are displayed on medium size (tablet)
		 * 
		 * <b>Note:</b> It is not only the screen size which is used to determine the available space, the size of the <code>PlanningCalendar</code> is used as well.
		 * @default 8
		 */
		intervalsM?: number;
		/**
		 * Number of intervals (defined with <code>intervalType</code>) that are displayed on large size (desktop)
		 * 
		 * <b>Note:</b> It is not only the screen size which is used to determine the available space, the size of the <code>PlanningCalendar</code> is used as well.
		 * @default 12
		 */
		intervalsL?: number;
		/**
		 * If set subintervals are shown.
		 * 
		 * If the interval type is <code>Hour</code>, quarter hours are shown.
		 * 
		 * If the interval type is <code>Day</code>, hours are shown.
		 * 
		 * If the interval type is <code>Month</code>, days are shown.
		 * @default false
		 */
		showSubIntervals?: boolean;
	}

	interface PopoverMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * This is the information about on which side will the popover be placed at. Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right, sap.m.PlacementType.Top, sap.m.PlacementType.Bottom, sap.m.PlacementType.Horizontal, sap.m.PlacementType.HorizontalPreferredLeft, sap.m.PlacementType.HorizontalPreferredRight, sap.m.PlacementType.Vertical, sap.m.PlacementType.VerticalPreferredTop, sap.m.PlacementType.VerticalPreferredBottom, sap.m.PlacementType.Auto. The default value is sap.m.PlacementType.Right. Setting this property while popover is open won't cause any rerendering of the popover, but it will take effect when it's opened again.
		 * @default Right
		 */
		placement?: sap.m.PlacementType;
		/**
		 * If a header should be shown at the top of the popover.
		 * @default true
		 */
		showHeader?: boolean;
		/**
		 * Title text appears in the header. This property will be ignored when showHeader is set to false.
		 */
		title?: string;
		/**
		 * If the popover will not be closed when tapping outside the popover. It also blocks any interaction with the background. The default value is false.
		 * @default false
		 */
		modal?: boolean;
		/**
		 * The offset for the popover placement in the x axis. It's with unit pixel.
		 * @default 0
		 */
		offsetX?: number;
		/**
		 * The offset for the popover placement in the y axis. It's with unit pixel.
		 * @default 0
		 */
		offsetY?: number;
		/**
		 * Whether Popover arrow should be visible
		 * @default true
		 */
		showArrow?: boolean;
		/**
		 * Set the width of the content area inside Popover. When controls which adapt their size to the parent control are added directly into Popover, for example sap.m.Page control, a size needs to be specified to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the right way. This values isn't necessary for controls added to Popover directly which can decide their size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent control.
		 */
		contentWidth?: sap.ui.core.CSSSize;
		/**
		 * Sets the minimum width of the content area inside popover.
		 * @default 
		 */
		contentMinWidth?: sap.ui.core.CSSSize;
		/**
		 * Set the height of the content area inside Popover. When controls which adapt their size to the parent control are added directly into Popover, for example sap.m.Page control, a size needs to be specified to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the right way. This values isn't necessary for controls added to Popover directly which can decide their size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent control.
		 */
		contentHeight?: sap.ui.core.CSSSize;
		/**
		 * This property indicates if user can scroll vertically inside popover when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be set to false to disable the scrolling in popover in order to make the scrolling in the child control work properly.
		 * Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
		 * @default true
		 */
		verticalScrolling?: boolean;
		/**
		 * This property indicates if user can scroll horizontally inside popover when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be set to false to disable the scrolling in popover in order to make the scrolling in the child control work properly.
		 * Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
		 * @default true
		 */
		horizontalScrolling?: boolean;
		/**
		 * Whether bouncing is enabled.
		 */
		bounce?: boolean;
		/**
		 * Whether resize option is enabled.
		 * @default false
		 */
		resizable?: boolean;
		/**
		 * This event will be fired after the popover is opened.
		 * @param openBy This refers to the control which opens the popover.
		 */
		afterOpen?: (openBy: sap.ui.core.Control) => void;
		/**
		 * This event will be fired after the popover is closed.
		 * @param openBy This refers to the control which opens the popover.
		 */
		afterClose?: (openBy: sap.ui.core.Control) => void;
		/**
		 * This event will be fired before the popover is opened.
		 * @param openBy This refers to the control which opens the popover.
		 */
		beforeOpen?: (openBy: sap.ui.core.Control) => void;
		/**
		 * This event will be fired before the popover is closed.
		 * @param openBy This refers to the control which opens the popover.
		 */
		beforeClose?: (openBy: sap.ui.core.Control) => void;
	}

	interface ProgressIndicatorMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Switches enabled state of the control. Disabled fields have different colors, and cannot be focused.
		 * @default true
		 */
		enabled?: boolean;
		/**
		 * Specifies the state of the bar. Enumeration sap.ui.core.ValueState provides Error (red), Warning (yellow), Success (green), None (blue) (default value).
		 * @default None
		 */
		state?: sap.ui.core.ValueState;
		/**
		 * Specifies the text value to be displayed in the bar.
		 */
		displayValue?: string;
		/**
		 * Specifies the numerical value in percent for the length of the progress bar.
		 * @default 0
		 */
		percentValue?: number;
		/**
		 * Indicates whether the displayValue should be shown in the ProgressIndicator.
		 * @default true
		 */
		showValue?: boolean;
		/**
		 * Specifies the width of the control.
		 * @default 100%
		 */
		width?: sap.ui.core.CSSSize;
		/**
		 * Specifies the height of the control. The default value depends on the theme. Suggested size for normal use is 2.5rem (40px). Suggested size for small size (like for use in ObjectHeader) is 1.375rem (22px).
		 */
		height?: sap.ui.core.CSSSize;
		/**
		 * Specifies the element's text directionality with enumerated options (RTL or LTR). By default, the control inherits text direction from the DOM.
		 * @default Inherit
		 */
		textDirection?: sap.ui.core.TextDirection;
	}

	interface PullToRefreshMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Optional description. May be used to inform a user, for example, when the list has been updated last time.
		 */
		description?: string;
		/**
		 * Set to true to display an icon/logo. Icon must be set either in the customIcon property or in the CSS theme for the PullToRefresh control.
		 * @default false
		 */
		showIcon?: boolean;
		/**
		 * Provide a URI to a custom icon image to replace the SAP logo. Large images are scaled down to max 50px height.
		 */
		customIcon?: sap.ui.core.URI;
		/**
		 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
		 * 
		 * If bandwidth is the key for the application, set this value to false.
		 * @default true
		 */
		iconDensityAware?: boolean;
		/**
		 * Event indicates that the user has requested new data
		 */
		refresh?: () => void;
	}

	interface QuickViewMetadata extends sap.m.QuickViewBaseMetadata {
		/**
		 * This property is reused from sap.m.Popover and only takes effect when running on desktop or tablet. Please refer the documentation of the placement property of sap.m.Popover.
		 * @default Right
		 */
		placement?: sap.m.PlacementType;
		/**
		 * The width of the QuickView. The property takes effect only when running on desktop or tablet.
		 * @default 320px
		 */
		width?: sap.ui.core.CSSSize;
		/**
		 * This event fires after the QuickView is opened.
		 * @param openBy This parameter refers to the control, which opens the QuickView.
		 */
		afterOpen?: (openBy: sap.ui.core.Control) => void;
		/**
		 * This event fires after the QuickView is closed.
		 * @param openBy This parameter refers to the control, which opens the QuickView.
		 * @param origin This parameter contains the control,
		 * which triggers the close of the QuickView.
		 * It is undefined when running on desktop or tablet.
		 */
		afterClose?: (openBy: sap.ui.core.Control, origin: sap.m.Button) => void;
		/**
		 * This event fires before the QuickView is opened.
		 * @param openBy This parameter refers to the control, which opens the QuickView.
		 */
		beforeOpen?: (openBy: sap.ui.core.Control) => void;
		/**
		 * This event fires before the QuickView is closed.
		 * @param openBy This parameter refers to the control, which opens the QuickView.
		 * @param origin This parameter contains the control,
		 * which triggers the close of the QuickView.
		 * It is undefined when running on desktop or tablet.
		 */
		beforeClose?: (openBy: sap.ui.core.Control, origin: sap.m.Button) => void;
	}

	interface QuickViewBaseMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * The event is fired when navigation between two pages has been triggered.
		 * The transition (if any) to the new page has not started yet.
		 * This event can be aborted by the application with preventDefault(),
		 * which means that there will be no navigation.
		 * @param from The page which was displayed before the current navigation.
		 * @param fromId The ID of the page which was displayed before the current navigation.
		 * @param to The page which will be displayed after the current navigation.
		 * @param toId The ID of the page which will be displayed after the current navigation.
		 * @param firstTime Determines whether the "to" page (a control with the ID of the page
		 * which is currently navigated to) has not been displayed/navigated to before.
		 * @param isTo Determines whether this is a forward navigation.
		 * @param isBack Determines whether this is a back navigation.
		 * @param isBackToTop Determines  whether this is a navigation to the root page.
		 * @param isBackToPage Determines whether this was a navigation to a specific page.
		 * @param direction Determines how the navigation was triggered, possible values are
		 * "to", "back", "backToPage", and "backToTop".
		 */
		navigate?: (from: sap.ui.core.Control, fromId: string, to: sap.ui.core.Control, toId: string, firstTime: boolean, isTo: boolean, isBack: boolean, isBackToTop: boolean, isBackToPage: boolean, direction: string) => void;
		/**
		 * The event is fired when navigation between two pages has completed.
		 * In case of animated transitions this event is fired with some delay
		 * after the "navigate" event.
		 * @param from Determines the page, which has been displayed before navigation.
		 * @param fromId Determines the ID of the page, which has been displayed before navigation.
		 * @param to Determines the page, which is now displayed after navigation.
		 * @param toId Determines the ID of the page, which is now displayed after navigation.
		 * @param firstTime Determines whether the "to" page (a control with the ID of the page, which has been navigated to) has not been displayed/navigated to before.
		 * @param isTo Determines whether this was a forward navigation.
		 * @param isBack Determines whether this was a back navigation.
		 * @param isBackToTop Determines whether this was a navigation to the root page.
		 * @param isBackToPage Determines whether this was a navigation to a specific page.
		 * @param direction Determines  how the navigation was triggered, possible values are
		 * "to", "back", "backToPage", and "backToTop".
		 * @param isTopPage Determines whether this is a navigation to the top page.
		 */
		afterNavigate?: (from: sap.ui.core.Control, fromId: string, to: sap.ui.core.Control, toId: string, firstTime: boolean, isTo: boolean, isBack: boolean, isBackToTop: boolean, isBackToPage: boolean, direction: string, isTopPage: boolean) => void;
	}

	interface QuickViewCardMetadata extends sap.m.QuickViewBaseMetadata {
		/**
		 * Determines whether the browser displays the vertical scroll bar or simply cuts the content of the QuickViewCard.
		 * @default true
		 */
		showVerticalScrollBar?: boolean;
	}

	interface QuickViewGroupMetadata {
		/**
		 * Determines whether the group is visible on the screen.
		 * @default true
		 */
		visible?: boolean;
		/**
		 * The title of the group
		 * @default 
		 */
		heading?: string;
	}

	interface QuickViewGroupElementMetadata {
		/**
		 * Determines whether the element should be visible on the screen.
		 * @default true
		 */
		visible?: boolean;
		/**
		 * Specifies the text displayed below the associated label.
		 * @default 
		 */
		label?: string;
		/**
		 * Specifies the text of the control that associates with the label.
		 * @default 
		 */
		value?: string;
		/**
		 * Specifies the address of the QuickViewGroupElement link. Works only with QuickViewGroupElement of type link.
		 * @default 
		 */
		url?: string;
		/**
		 * Specifies the target of the link – it works like the target property of the HTML <a> tag. Works only with QuickViewGroupElement of type link.
		 * @default _blank
		 */
		target?: string;
		/**
		 * Specifies the type of the displayed information – phone number, mobile number, e-mail, link, text or a link to another QuickViewPage. Default value is ‘text’.
		 * @default GroupElementType.text
		 */
		type?: sap.m.QuickViewGroupElementType;
		/**
		 * Specifies the ID of the QuickViewPage, which is opened from the link in the QuickViewGroupElement.
		 * Works only with QuickViewGroupElement of type pageLink.
		 * @default 
		 */
		pageLinkId?: string;
		/**
		 * The subject of the email.
		 * Works only with QuickViewGroupElement of type email.
		 * @default 
		 */
		emailSubject?: string;
	}

	interface QuickViewPageMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Page id
		 * @default 
		 */
		pageId?: string;
		/**
		 * Specifies the text displayed in the header of the control.
		 * @default 
		 */
		header?: string;
		/**
		 * Specifies the text displayed in the header of the content section of the control.
		 * @default 
		 */
		title?: string;
		/**
		 * Specifies the URL which opens when the title or the thumbnail is clicked.
		 * @default 
		 */
		titleUrl?: string;
		/**
		 * Specifies the application which provides target and param configuration  for cross-application navigation from the 'page header'.
		 */
		crossAppNavCallback?: any;
		/**
		 * Specifies the text displayed under the header of the content section
		 * @default 
		 */
		description?: string;
		/**
		 * Specifies the URL of the icon displayed under the header of the page
		 * @default 
		 */
		icon?: string;
	}

	interface RadioButtonMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Specifies if the radio button is disabled.
		 * @default true
		 */
		enabled?: boolean;
		/**
		 * Specifies the select state of the radio button
		 * @default false
		 */
		selected?: boolean;
		/**
		 * Name of the radio button group the current radio button belongs to. You can define a new name for the group.
		 * If no new name is specified, this radio button belongs to the sapMRbDefaultGroup per default. Default behavior of a radio button in a group is that when one of the radio buttons in a group is selected, all others are unselected.
		 * @default sapMRbDefaultGroup
		 */
		groupName?: string;
		/**
		 * Specifies the text displayed next to the RadioButton
		 */
		text?: string;
		/**
		 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
		 * @default Inherit
		 */
		textDirection?: sap.ui.core.TextDirection;
		/**
		 * Width of the Label
		 * @default 
		 */
		width?: sap.ui.core.CSSSize;
		/**
		 * This is a flag to switch on activeHandling. When it is switched off,
		 * there will not be visual changes on active state. Default value is 'true'
		 * @default true
		 */
		activeHandling?: boolean;
		/**
		 * Specifies whether the user can select the radio button.
		 * @default true
		 */
		editable?: boolean;
		/**
		 * Enumeration sap.ui.core.ValueState provides state values Error, Success, Warning, None
		 * @default None
		 */
		valueState?: sap.ui.core.ValueState;
		/**
		 * Specifies the alignment of the radio button. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
		 * @default Begin
		 */
		textAlign?: sap.ui.core.TextAlign;
		/**
		 * Event is triggered when the user makes a change on the radio button (selecting or unselecting it).
		 * @param selected Checks whether the RadioButton is active or not.
		 */
		select?: (selected: boolean) => void;
	}

	interface RadioButtonGroupMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Specifies the width of the RadioButtonGroup.
		 */
		width?: sap.ui.core.CSSSize;
		/**
		 * Specifies the maximum number of radio buttons displayed in one line.
		 * @default 1
		 */
		columns?: number;
		/**
		 * Specifies whether the user can change the selected value of the RadioButtonGroup.
		 * When the property is set to false, the control obtains visual styles
		 * different from its visual styles for the normal and the disabled state.
		 * Additionally, the control is no longer interactive, but can receive focus.
		 * @default true
		 */
		editable?: boolean;
		/**
		 * Тhe value state to be displayed for the radio button. Possible values are: sap.ui.core.ValueState.Error,
		 * sap.ui.core.ValueState.Warning, sap.ui.core.ValueState.Success and sap.ui.core.ValueState.None.
		 * Note: Setting this attribute to sap.ui.core.ValueState.Error when the accessibility feature is enabled,
		 * sets the value of the invalid propery for the whole RadioButtonGroup to “true”.
		 * @default None
		 */
		valueState?: sap.ui.core.ValueState;
		/**
		 * Determines the index of the selected/checked RadioButton. Default is 0.
		 * If no radio button is selected, the selectedIndex property will return -1.
		 * @default 0
		 */
		selectedIndex?: number;
		/**
		 * Switches the enabled state of the control. All Radio Buttons inside a disabled group are disabled. Default value is “true”.
		 * @default true
		 */
		enabled?: boolean;
		/**
		 * This property specifies the element's text directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * @default Inherit
		 */
		textDirection?: sap.ui.core.TextDirection;
		/**
		 * Fires when selection is changed by user interaction.
		 * @param selectedIndex Index of the selected RadioButton.
		 */
		select?: (selectedIndex: number) => void;
	}

	interface RangeSliderMetadata extends sap.m.SliderMetadata {
		/**
		 * Determines the range in which the user can select values.
		 * 
		 * If the value is lower/higher than the allowed minimum/maximum,
		 * a warning message will be output to the console.
		 * @default []
		 */
		range?: any;
		/**
		 * Indicates whether an Input fields should be used as tooltips for the handles.
		 * @default false
		 */
		inputsAsTooltips?: boolean;
	}

	interface RatingIndicatorMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Value "true" is required to let the user rate with this control. It is recommended to set this parameter to "false" for the "Small" size which is meant for indicating a value only
		 * @default true
		 */
		enabled?: boolean;
		/**
		 * The number of displayed rating symbols
		 * @default 5
		 */
		maxValue?: number;
		/**
		 * The indicated value of the rating
		 * @default 0
		 */
		value?: number;
		/**
		 * The Size of the image or icon to be displayed. The default value depends on the theme. Please be sure that the size is corresponding to a full pixel value as some browsers don't support subpixel calculations. Recommended size is 1.375rem (22px) for normal, 1rem (16px) for small, and 2rem (32px) for large icons correspondingly.
		 */
		iconSize?: sap.ui.core.CSSSize;
		/**
		 * The URI to the icon font icon or image that will be displayed for selected rating symbols. A star icon will be used if the property is not set
		 */
		iconSelected?: sap.ui.core.URI;
		/**
		 * The URI to the icon font icon or image that will be displayed for all unselected rating symbols. A star icon will be used if the property is not set
		 */
		iconUnselected?: sap.ui.core.URI;
		/**
		 * The URI to the icon font icon or image that will be displayed for hovered rating symbols. A star icon will be used if the property is not set
		 */
		iconHovered?: sap.ui.core.URI;
		/**
		 * Defines how float values are visualized: Full, Half (see enumeration RatingIndicatorVisualMode)
		 * @default Half
		 */
		visualMode?: sap.m.RatingIndicatorVisualMode;
		/**
		 * The event is fired when the user has done a rating.
		 * @param value The rated value
		 */
		change?: (value: number) => void;
		/**
		 * This event is triggered during the dragging period, each time the rating value changes.
		 * @param value The current value of the rating after a live change event.
		 */
		liveChange?: (value: number) => void;
	}

	interface ResponsivePopoverMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#placement.
		 * @default Right
		 */
		placement?: sap.m.PlacementType;
		/**
		 * This property is supported by both variants. Please see the documentation on sap.m.Popover#showHeader and sap.m.Dialog#showHeader
		 * @default true
		 */
		showHeader?: boolean;
		/**
		 * This property is supported by both variants. Please see the documentation on sap.m.Popover#title and sap.m.Dialog#title
		 */
		title?: string;
		/**
		 * This property only takes effect  on phone. Please see the documentation sap.m.Dialog#icon.
		 */
		icon?: sap.ui.core.URI;
		/**
		 * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#modal.
		 */
		modal?: boolean;
		/**
		 * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#offsetX.
		 */
		offsetX?: number;
		/**
		 * This property only takes effect on desktop or tablet. Please see the documentation sap.m.Popover#offsetY.
		 */
		offsetY?: number;
		/**
		 * This property is supported by both variants. Please see the documentation on sap.m.Popover#contentWidth and sap.m.Dialog#contentWidth
		 */
		contentWidth?: sap.ui.core.CSSSize;
		/**
		 * This property is supported by both variants. Please see the documentation on sap.m.Popover#contentHeight and sap.m.Dialog#contentHeight
		 */
		contentHeight?: sap.ui.core.CSSSize;
		/**
		 * This property is supported by both variants. Please see the documentation on sap.m.Popover#horizontalScrolling and sap.m.Dialog#horizontalScrolling
		 * @default true
		 */
		horizontalScrolling?: boolean;
		/**
		 * This property is supported by both variants. Please see the documentation on sap.m.Popover#verticalScrolling and sap.m.Dialog#verticalScrolling
		 * @default true
		 */
		verticalScrolling?: boolean;
		/**
		 * Determines if a close button should be inserted into the dialog's header dynamically to close the dialog. This property only takes effect on phone.
		 * @default true
		 */
		showCloseButton?: boolean;
		/**
		 * Whether resize option is enabled.
		 * @default false
		 */
		resizable?: boolean;
		/**
		 * Event is fired before popover or dialog is open.
		 * @param openBy This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.
		 */
		beforeOpen?: (openBy: sap.ui.core.Control) => void;
		/**
		 * Event is fired after popover or dialog is open.
		 * @param openBy This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.
		 */
		afterOpen?: (openBy: sap.ui.core.Control) => void;
		/**
		 * Event is fired before popover or dialog is closed.
		 * @param openBy This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.
		 * @param origin This parameter contains the control which triggers the close of the ResponsivePopover. This parameter is undefined when runs on desktop or tablet.
		 */
		beforeClose?: (openBy: sap.ui.core.Control, origin: sap.m.Button) => void;
		/**
		 * Event is fired after popover or dialog is closed.
		 * @param openBy This parameter contains the control which is passed as the parameter when calling openBy method. When runs on the phone, this parameter is undefined.
		 * @param origin This parameter contains the control which triggers the close of the ResponsivePopover. This parameter is undefined when runs on desktop or tablet.
		 */
		afterClose?: (openBy: sap.ui.core.Control, origin: sap.m.Button) => void;
	}

	interface ScrollContainerMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * The width of the ScrollContainer.
		 * If not set, it consumes the complete available width, behaving like normal HTML block elements. If only vertical scrolling is enabled, make sure the content always fits or wraps.
		 * @default auto
		 */
		width?: sap.ui.core.CSSSize;
		/**
		 * The height of the ScrollContainer.
		 * By default the height equals the content height. If only horizontal scrolling is used, do not set the height or make sure the height is always larger than the height of the content.
		 * 
		 * Note that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.
		 * @default auto
		 */
		height?: sap.ui.core.CSSSize;
		/**
		 * Whether horizontal scrolling should be possible.
		 * @default true
		 */
		horizontal?: boolean;
		/**
		 * Whether vertical scrolling should be possible.
		 * 
		 * Note that this is off by default because typically a Page is used as fullscreen element which can handle vertical scrolling. If this is not the case and vertical scrolling is required, this flag needs to be set to "true".
		 * Important: it is not supported to have nested controls that both enable scrolling into the same dimension.
		 * @default false
		 */
		vertical?: boolean;
		/**
		 * Whether the scroll container can be focused.
		 * 
		 * Note that it should be set to "true" when there are no focusable elements inside or when keyboard interaction requires an additional tab stop on the container.
		 * @default false
		 */
		focusable?: boolean;
	}

	interface SearchFieldMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Input Value.
		 */
		value?: string;
		/**
		 * Defines the CSS width of the input. If not set, width is 100%.
		 */
		width?: sap.ui.core.CSSSize;
		/**
		 * Boolean property to enable the control (default is true).
		 * @default true
		 */
		enabled?: boolean;
		/**
		 * Invisible inputs are not rendered.
		 * @default true
		 */
		visible?: boolean;
		/**
		 * Maximum number of characters. Value '0' means the feature is switched off.
		 * @default 0
		 */
		maxLength?: number;
		/**
		 * Text shown when no value available. Default placeholder text is the word "Search" in the current local language (if supported) or in English.
		 */
		placeholder?: string;
		/**
		 * Set to true to display a refresh button in place of the search icon. By pressing the refresh button or F5 key on keyboard, the user can reload the results list without changing the search string.
		 * @default false
		 */
		showRefreshButton?: boolean;
		/**
		 * Tooltip text of the refresh button. If it is not set, the tooltip of the SearchField (if any) is displayed. Tooltips are not displayed on touch devices.
		 */
		refreshButtonTooltip?: string;
		/**
		 * Set to true to show the search button with the magnifier icon.
		 * If false, both the search and refresh buttons are not displayed even if the "showRefreshButton" property is true.
		 * @default true
		 */
		showSearchButton?: boolean;
		/**
		 * If true, a <code>suggest</code> event is fired when user types in the input and when the input is focused.
		 * On a phone device, a full screen dialog with suggestions is always shown even if the suggestions list is empty.
		 * @default false
		 */
		enableSuggestions?: boolean;
		/**
		 * Event which is fired when the user triggers a search.
		 * @param query The search query string.
		 * @param suggestionItem Suggestion list item in case if the user has selected an item from the suggestions list.
		 * @param refreshButtonPressed Indicates if the user pressed the refresh icon.
		 * @param clearButtonPressed Indicates if the user pressed the clear icon.
		 */
		search?: (query: string, suggestionItem: sap.m.SuggestionItem, refreshButtonPressed: boolean, clearButtonPressed: boolean) => void;
		/**
		 * This event is fired when the value of the search field is changed by a user - e.g. at each key press. Do not invalidate or re-render a focused search field, especially during the liveChange event.
		 * @param newValue Current search string.
		 */
		liveChange?: (newValue: string) => void;
		/**
		 * This event is fired when the search field is initially focused or its value is changed by the user.
		 * This event means that suggestion data should be updated, in case if suggestions are used.
		 * Use the value parameter to create new suggestions for it.
		 * @param suggestValue Current search string of the search field.
		 */
		suggest?: (suggestValue: string) => void;
	}

	interface SegmentedButtonMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Defines the width of the SegmentedButton control. If not set, it uses the minimum required width to make all buttons inside of the same size (based on the biggest button).
		 */
		width?: sap.ui.core.CSSSize;
		/**
		 * Disables all the buttons in the SegmentedButton control. When disabled all the buttons look grey and you cannot focus or click on them.
		 * @default true
		 */
		enabled?: boolean;
		/**
		 * Key of the selected item. If no item to this key is found in the items aggregation, no changes will apply. Only the items aggregation is affected. If duplicate keys exist, the first item matching the key is used.
		 * @default 
		 */
		selectedKey?: string;
		/**
		 * Fires when the user selects a button, which returns the ID and button object.
		 * @param button Reference to the button, that has been selected.
		 * @param id ID of the button, which has been selected.
		 * @param key Key of the button, which has been selected. This property is only filled when the control is initiated with the items aggregation.
		 */
		select?: (button: sap.m.Button, id: string, key: string) => void;
	}

	interface SegmentedButtonItemMetadata extends sap.ui.core.ItemMetadata {
		/**
		 * The icon, which belongs to the button.
		 * This can be an URI to an image or an icon font URI.
		 */
		icon?: string;
		/**
		 * Whether the button should be visible on the screen. If set to false, a placeholder is rendered instead of the real button.
		 * @default true
		 */
		visible?: boolean;
		/**
		 * Sets the width of the buttons.
		 */
		width?: sap.ui.core.CSSSize;
		/**
		 * Fires when the user clicks on an individual button.
		 */
		press?: () => void;
	}

	interface SelectMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * The name to be used in the HTML code (for example, for HTML forms that send data to the server via submit).
		 * @default 
		 */
		name?: string;
		/**
		 * Indicates whether the user can change the selection.
		 * @default true
		 */
		enabled?: boolean;
		/**
		 * Sets the width of the control. The default width is derived from the widest item.
		 * If the width defined is smaller than the widest item in the selection list, only the width of
		 * the selection field will be changed: the list will keep the width of its widest item.
		 * If the list is wider than the viewport, it is truncated and an ellipsis is displayed for each item.
		 * For phones, the width of the list is always the same as the viewport.
		 * 
		 * <b>Note:</b> This property is ignored if the <code>autoAdjustWidth</code> property is set to <code>true</code>.
		 * @default auto
		 */
		width?: sap.ui.core.CSSSize;
		/**
		 * Sets the maximum width of the control.
		 * 
		 * <b>Note:</b> This property is ignored if the <code>autoAdjustWidth</code> property is set to <code>true</code>.
		 * @default 100%
		 */
		maxWidth?: sap.ui.core.CSSSize;
		/**
		 * Key of the selected item.
		 * 
		 * <b>Note:</b> If duplicate keys exist, the first item matching the key is used.
		 * @default 
		 */
		selectedKey?: string;
		/**
		 * ID of the selected item.
		 * @default 
		 */
		selectedItemId?: string;
		/**
		 * The URI to the icon that will be displayed only when using the <code>IconOnly</code> type.
		 * @default 
		 */
		icon?: sap.ui.core.URI;
		/**
		 * Type of a select. Possible values <code>Default</code>, <code>IconOnly</code>.
		 * @default Default
		 */
		type?: sap.m.SelectType;
		/**
		 * Indicates whether the width of the input field is determined by the selected item's content.
		 * @default false
		 */
		autoAdjustWidth?: boolean;
		/**
		 * Sets the horizontal alignment of the text within the input field.
		 * @default Initial
		 */
		textAlign?: sap.ui.core.TextAlign;
		/**
		 * Specifies the direction of the text within the input field with enumerated options.
		 * By default, the control inherits text direction from the DOM.
		 * @default Inherit
		 */
		textDirection?: sap.ui.core.TextDirection;
		/**
		 * Visualizes the validation state of the control, e.g. <code>Error</code>, <code>Warning</code>,
		 * <code>Success</code>.
		 * @default None
		 */
		valueState?: sap.ui.core.ValueState;
		/**
		 * Defines the text of the value state message popup.
		 * If this is not specified, a default text is shown from the resource bundle.
		 * @default 
		 */
		valueStateText?: string;
		/**
		 * Indicates whether the text values of the <code>additionalText</code> property of a
		 * {@link sap.ui.core.ListItem} are shown.
		 * @default false
		 */
		showSecondaryValues?: boolean;
		/**
		 * Indicates whether the selection is restricted to one of the items in the list.
		 * <b>Note:</b> We strongly recommend that you always set this property to <code>false</code> and bind
		 * the <code>selectedKey</code> property to the desired value for better interoperability with data binding.
		 * @default true
		 */
		forceSelection?: boolean;
		/**
		 * This event is fired when the value in the selection field is changed in combination with one of
		 * the following actions:
		 * <ul>
		 * 	<li>The focus leaves the selection field</li>
		 * 	<li>The <i>Enter</i> key is pressed</li>
		 * 	<li>The item is pressed</li>
		 * </ul>
		 * @param selectedItem The selected item.
		 */
		change?: (selectedItem: sap.ui.core.Item) => void;
	}

	interface SelectDialogMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Determines the title text that appears in the dialog header
		 */
		title?: string;
		/**
		 * Determines the text shown when the list has no data
		 */
		noDataText?: string;
		/**
		 * Determines if the user can select several options from the list
		 * @default false
		 */
		multiSelect?: boolean;
		/**
		 * Determines the number of items initially displayed in the list. Also defines the number of items to be requested from the model for each grow.
		 */
		growingThreshold?: number;
		/**
		 * Determines the content width of the inner dialog. For more information, see the dialog documentation.
		 */
		contentWidth?: sap.ui.core.CSSSize;
		/**
		 * This flag controls whether the dialog clears the selection after the confirm event has been fired. If the dialog needs to be opened multiple times in the same context to allow for corrections of previous user inputs, set this flag to "true".
		 * @default false
		 */
		rememberSelections?: boolean;
		/**
		 * Determines the content height of the inner dialog. For more information, see the dialog documentation.
		 */
		contentHeight?: sap.ui.core.CSSSize;
		/**
		 * This event will be fired when the dialog is confirmed by selecting an item in single selection mode or by pressing the confirmation button in multi selection mode . The items being selected are returned as event parameters.
		 * @param selectedItem Returns the selected list item. When no item is selected, "null" is returned. When multi-selection is enabled and multiple items are selected, only the first selected item is returned.
		 * @param selectedItems Returns an array containing the visible selected list items. If no items are selected, an empty array is returned.
		 * @param selectedContexts Returns the binding contexts of the selected items including the non-visible items.
		 * NOTE: In contrast to the parameter "selectedItems", this parameter will also include the selected but NOT visible items (e.g. due to list filtering). An empty array will be set for this parameter if no data binding is used.
		 * NOTE: When the list binding is pre-filtered and there are items in the selection that are not visible upon opening the dialog, these contexts are not loaded. Therefore, these items will not be included in the selectedContexts array unless they are displayed at least once.
		 */
		confirm?: (selectedItem: sap.m.StandardListItem, selectedItems: sap.m.StandardListItem[], selectedContexts: string) => void;
		/**
		 * This event will be fired when the search button has been clicked on the searchfield on the visual control
		 * @param value The value entered in the search
		 * @param itemsBinding The Items binding of the Select Dialog for search purposes. It will only be available if the items aggregation is bound to a model.
		 */
		search?: (value: string, itemsBinding: any) => void;
		/**
		 * This event will be fired when the value of the search field is changed by a user - e.g. at each key press
		 * @param value The value to search for, which can change at any keypress
		 * @param itemsBinding The Items binding of the Select Dialog. It will only be available if the items aggregation is bound to a model.
		 */
		liveChange?: (value: string, itemsBinding: any) => void;
		/**
		 * This event will be fired when the cancel button is clicked
		 */
		cancel?: () => void;
	}

	interface SelectListMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Indicates whether the user can change the selection.
		 * @default true
		 */
		enabled?: boolean;
		/**
		 * Sets the width of the control.
		 * @default auto
		 */
		width?: sap.ui.core.CSSSize;
		/**
		 * Sets the maximum width of the control.
		 * @default 100%
		 */
		maxWidth?: sap.ui.core.CSSSize;
		/**
		 * Key of the selected item.
		 * 
		 * <b>Note: </b> If duplicate keys exist, the first item matching the key is used.
		 * @default 
		 */
		selectedKey?: string;
		/**
		 * ID of the selected item.
		 * @default 
		 */
		selectedItemId?: string;
		/**
		 * Indicates whether the text values of the <code>additionalText</code> property of a {@link sap.ui.core.ListItem} are shown.
		 * @default false
		 */
		showSecondaryValues?: boolean;
		/**
		 * Defines the keyboard navigation mode.
		 * 
		 * <b>Note:</b> The <code>sap.m.SelectListKeyboardNavigationMode.None</code> enumeration value, is only
		 * intended for use in some composite controls that handles keyboard navigation by themselves.
		 * @default Delimited
		 */
		keyboardNavigationMode?: sap.m.SelectListKeyboardNavigationMode;
		/**
		 * This event is fired when the selection has changed.
		 * 
		 * <b>Note: </b> The selection can be changed by pressing an non-selected item or
		 * via keyboard and after the enter or space key is pressed.
		 * @param selectedItem The selected item.
		 */
		selectionChange?: (selectedItem: sap.ui.core.Item) => void;
		/**
		 * This event is fired when an item is pressed.
		 * @param item The pressed item.
		 */
		itemPress?: (item: sap.ui.core.Item) => void;
	}

	interface ShellMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Defines the application title, which may or may not be displayed outside the actual application, depending on the available screen size.
		 */
		title?: string;
		/**
		 * Defines the logo to be displayed next to the App when the screen is sufficiently large.
		 */
		logo?: sap.ui.core.URI;
		/**
		 * Determines whether the Logout button should be displayed. Currently, this only happens on very tall screens (1568px height), otherwise, it is always hidden.
		 * @default true
		 */
		showLogout?: boolean;
		/**
		 * Defines texts, such as the name of the logged-in user, which should be displayed on the right side of the header (if there is enough space to display the header at all - this only happens on very tall screens (1568px height), otherwise, it is always hidden).
		 */
		headerRightText?: string;
		/**
		 * Determines whether the width of the content (the aggregated App) should be limited or extended to the full screen width.
		 * @default true
		 */
		appWidthLimited?: boolean;
		/**
		 * Defines the background color of the Shell. If set, this color will override the default background defined by the theme. This should only be set when really required.
		 * Any configured background image will be placed above this colored background.
		 * Use the backgroundRepeat property to define whether this image should be stretched to cover the complete Shell or whether it should be tiled.
		 */
		backgroundColor?: sap.ui.core.CSSColor;
		/**
		 * Defines the background image of the Shell. If set, this image will override the default background defined by the theme. This should only be set when really required.
		 * This background image will be placed above any color set for the background.
		 * Use the backgroundRepeat property to define whether this image should be stretched to cover the complete Shell or whether it should be tiled.
		 */
		backgroundImage?: sap.ui.core.URI;
		/**
		 * Determines whether the background image (if configured) should be proportionally stretched to cover the whole Shell (false, default) or whether it should be tiled (true).
		 * @default false
		 */
		backgroundRepeat?: boolean;
		/**
		 * Defines the opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 (fully opaque).
		 * This can be used to improve readability of the Shell content by making the background image partly transparent.
		 * @default 1
		 */
		backgroundOpacity?: number;
		/**
		 * Sets the icon used for the mobile device home screen and the icon to be used for bookmarks by desktop browsers.
		 * 
		 * This property should be only set once, and as early as possible. Subsequent calls replace the previous icon settings and may lead to different behavior depending on the browser.
		 * 
		 * Different image sizes for device home screen need to be given as PNG images, an ICO file needs to be given as desktop browser bookmark icon (other file formats may not work in all browsers).
		 * The <code>precomposed</code> flag defines whether there is already a glow effect contained in the home screen images (or whether iOS should add such an effect). The given structure could look like this:
		 * {
		 * 'phone':'phone-icon_57x57.png',
		 * 'phone@2':'phone-retina_114x114.png',
		 * 'tablet':'tablet-icon_72x72.png',
		 * 'tablet@2':'tablet-retina_144x144.png',
		 * 'precomposed':true,
		 * 'favicon':'favicon.ico'
		 * }
		 * 
		 * See jQuery.sap.setIcons() for full documentation.
		 */
		homeIcon?: any;
		/**
		 * Fires when the user presses the logout button/link.
		 */
		logout?: () => void;
	}

	interface SliderMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Defines the width of the control.
		 * @default 100%
		 */
		width?: sap.ui.core.CSSSize;
		/**
		 * Indicates whether the user can change the value.
		 * @default true
		 */
		enabled?: boolean;
		/**
		 * The name property to be used in the HTML code for the slider (e.g. for HTML forms that send data to the server via submit).
		 * @default 
		 */
		name?: string;
		/**
		 * The minimum value.
		 * @default 0
		 */
		min?: number;
		/**
		 * The maximum value.
		 * @default 100
		 */
		max?: number;
		/**
		 * Define the amount of units to change the slider when adjusting by drag and drop.
		 * 
		 * Defines the size of the slider's selection intervals. (e.g. min = 0, max = 10, step = 5 would result in possible selection of the values 0, 5, 10).
		 * 
		 * The step must be positive, if a negative number is provided, the default value will be used instead.
		 * If the width of the slider converted to pixels is less than the range (max – min), the value will be rounded to multiples of the step size.
		 * @default 1
		 */
		step?: number;
		/**
		 * Indicate whether a progress bar indicator is shown.
		 * @default true
		 */
		progress?: boolean;
		/**
		 * Define the value.
		 * 
		 * If the value is lower/higher than the allowed minimum/maximum, the value of the properties <code>min<code>/<code>max</code> are used instead.
		 * @default 0
		 */
		value?: number;
		/**
		 * Indicate whether the handle tooltip is shown.
		 * @default true
		 */
		showHandleTooltip?: boolean;
		/**
		 * This event is triggered after the end user finishes interacting, if there is any change.
		 * @param value The current value of the slider after a change.
		 */
		change?: (value: number) => void;
		/**
		 * This event is triggered during the dragging period, each time the slider value changes.
		 * @param value The current value of the slider after a live change.
		 */
		liveChange?: (value: number) => void;
	}

	interface SlideTileMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * The time of the slide display in milliseconds.
		 * @default 5000
		 */
		displayTime?: number;
		/**
		 * The time of the slide changing in milliseconds.
		 * @default 500
		 */
		transitionTime?: number;
	}

	interface SplitAppMetadata extends sap.m.SplitContainerMetadata {
		/**
		 * Represents the icon to be displayed on the home screen of iOS devices after the user does "add to home screen".
		 * Note that only the first attempt to set the homeIcon is executed, subsequent settings are ignored.
		 * The icon must be in PNG format. The property can either store the URL of one single icon or an object holding icon URLs for the different required sizes.
		 * Note that if single icon is used for all devices, when scaled, its quality can regress.
		 * A desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires an object to be given and the "icon" property of this object then defines the desktop bookmark icon.
		 * For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all browsers. ICO is also preferred for this desktop icon setting as the file can contain different images for different resolutions.
		 * 
		 * One example is:
		 * 
		 * app.setHomeIcon({
		 * 'phone':'phone-icon.png',
		 * 'phone@2':'phone-retina.png',
		 * 'tablet':'tablet-icon.png',
		 * 'tablet@2':'tablet-retina.png',
		 * 'icon':'desktop.ico'
		 * });
		 * 
		 * The image size is 57/114 px for the phone and 72/144 px for the tablet.
		 * If an object is given but one of the sizes is not given, the largest given icon will be used for this size.
		 * 
		 * On Android, these icons may or may not be used by the device. Chances can be improved by adding glare effect, rounded corners, setting the file name to end with "-precomposed.png", and setting the homeIconPrecomposed property to true.
		 */
		homeIcon?: any;
		/**
		 * Fires when orientation (portrait/landscape) is changed.
		 * @param landscape Returns true if the device is in landscape mode.
		 */
		orientationChange?: (landscape: boolean) => void;
	}

	interface SplitContainerMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Determines the type of the transition/animation to apply when to() is called without defining the
		 * transition to use. The default is "slide", other options are "fade", "show", and the names of any registered custom transitions.
		 * @default slide
		 */
		defaultTransitionNameDetail?: string;
		/**
		 * Determines the type of the transition/animation to apply when to() is called, without defining the
		 * transition to use. The default is "slide", other options are "fade", "show", and the names of any registered custom transitions.
		 * @default slide
		 */
		defaultTransitionNameMaster?: string;
		/**
		 * Defines whether the master page will always be displayed (in portrait and landscape mode - StretchCompressMode),
		 * or if it should be hidden when in portrait mode (ShowHideMode). Default is ShowHideMode.
		 * Other possible values are Hide (Master is always hidden) and Popover (master is displayed in popover).
		 * @default ShowHideMode
		 */
		mode?: sap.m.SplitAppMode;
		/**
		 * Determines the text displayed in master button, which has a default value "Navigation".
		 * This text is only displayed in iOS platform and the icon from the current page in detail area is
		 * displayed in the master button for the other platforms.
		 * The master button is shown/hidden depending on the orientation of the device and whether
		 * the master area is opened or not. SplitContainer manages the show/hide of the master button by itself
		 * only when the pages added to the detail area are sap.m.Page with built-in header or sap.m.Page
		 * with built-in header, which is wrapped by one or several sap.ui.core.mvc.View.
		 * Otherwise, the show/hide of master button needs to be managed by the application.
		 */
		masterButtonText?: string;
		/**
		 * Determines the background color of the SplitContainer. If set, this color overrides the default one,
		 * which is defined by the theme (should only be used when really required).
		 * Any configured background image will be placed above this colored background,
		 * but any theme adaptation in the Theme Designer will override this setting.
		 * Use the backgroundRepeat property to define whether this image should be stretched
		 * to cover the complete SplitContainer or whether it should be tiled.
		 */
		backgroundColor?: string;
		/**
		 * Sets the background image of the SplitContainer. When set, this image overrides
		 * the default background defined by the theme (should only be used when really required).
		 * This background image will be placed above any color set for the background,
		 * but any theme adaptation in the Theme Designer will override this image setting.
		 * Use the backgroundRepeat property to define whether this image should be stretched
		 * to cover the complete SplitContainer or whether it should be tiled.
		 */
		backgroundImage?: sap.ui.core.URI;
		/**
		 * Defines whether the background image (if configured) is proportionally stretched
		 * to cover the whole SplitContainer (false) or whether it should be tiled (true).
		 * @default false
		 */
		backgroundRepeat?: boolean;
		/**
		 * Defines the opacity of the background image - between 0 (fully transparent) and 1 (fully opaque).
		 * This can be used to improve the content visibility by making the background image partly transparent.
		 * @default 1
		 */
		backgroundOpacity?: number;
		/**
		 * Fires when navigation between two pages in master area has been triggered. The transition (if any) to the new page has not started yet.
		 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation.
		 * @param from The page, which was displayed before the current navigation.
		 * @param fromId The ID of the page, which was displayed before the current navigation.
		 * @param to The page, which will be displayed after the current navigation.
		 * @param toId The ID of the page, which will be displayed after the current navigation.
		 * @param firstTime Determines whether the "to" page (more precisely: a control with the ID of the page,
		 * which is currently being navigated to) has not been displayed/navigated to before.
		 * @param isTo Determines whether this is a forward navigation, triggered by to().
		 * @param isBack Determines whether this is a back navigation, triggered by back().
		 * @param isBackToTop Determines whether this is a navigation to the root page, triggered by backToTop().
		 * @param isBackToPage Determines whether this was a navigation to a specific page, triggered by backToPage().
		 * @param direction Determines how the navigation was triggered, possible values are "to", "back", "backToPage", and "backToTop".
		 */
		masterNavigate?: (from: sap.ui.core.Control, fromId: string, to: sap.ui.core.Control, toId: string, firstTime: boolean, isTo: boolean, isBack: boolean, isBackToTop: boolean, isBackToPage: boolean, direction: string) => void;
		/**
		 * Fires when navigation between two pages in master area has completed.
		 * NOTE: In case of animated transitions this event is fired with some delay after the navigate event.
		 * @param from The page, which had been displayed before navigation.
		 * @param fromId The ID of the page, which had been displayed before navigation.
		 * @param to The page, which is now displayed after navigation.
		 * @param toId The ID of the page, which is now displayed after navigation.
		 * @param firstTime Whether the "to" page (more precisely: a control with the ID of the page, which has been navigated to)
		 * has not been displayed/navigated to before.
		 * @param isTo Determines whether was a forward navigation, triggered by to().
		 * @param isBack Determines whether this was a back navigation, triggered by back().
		 * @param isBackToTop Determines whether this was a navigation to the root page, triggered by backToTop().
		 * @param isBackToPage Determines whether this was a navigation to a specific page, triggered by backToPage().
		 * @param direction Determines how the navigation was triggered, possible values are "to", "back", "backToPage", and "backToTop".
		 */
		afterMasterNavigate?: (from: sap.ui.core.Control, fromId: string, to: sap.ui.core.Control, toId: string, firstTime: boolean, isTo: boolean, isBack: boolean, isBackToTop: boolean, isBackToPage: boolean, direction: string) => void;
		/**
		 * Fires when a Master Button needs to be shown or hidden. This is necessary for custom headers when the SplitContainer control does not handle the placement of the master button automatically.
		 */
		masterButton?: () => void;
		/**
		 * Fires before the master area is opened.
		 */
		beforeMasterOpen?: () => void;
		/**
		 * Fires when the master area is fully opened after animation if any.
		 */
		afterMasterOpen?: () => void;
		/**
		 * Fires before the master area is closed.
		 */
		beforeMasterClose?: () => void;
		/**
		 * Fires when the master area is fully closed after the animation (if any).
		 */
		afterMasterClose?: () => void;
		/**
		 * Fires when navigation between two pages in detail area has been triggered.
		 * The transition (if any) to the new page has not started yet.
		 * NOTE: This event can be aborted by the application with preventDefault(), which means that there will be no navigation.
		 * @param from The page, which was displayed before the current navigation.
		 * @param fromId The ID of the page, which was displayed before the current navigation.
		 * @param to The page, which will be displayed after the current navigation.
		 * @param toId The ID of the page, which will be displayed after the current navigation.
		 * @param firstTime Determines whether the "to" page (more precisely: a control with the ID of the page,
		 * which is currently navigated to) has not been displayed/navigated to before.
		 * @param isTo Determines whether this is a forward navigation, triggered by to().
		 * @param isBack Determines whether this is a back navigation, triggered by back().
		 * @param isBackToTop Determines whether this is a navigation to the root page, triggered by backToTop().
		 * @param isBackToPage Determines whether this was a navigation to a specific page, triggered by backToPage().
		 * @param direction Determines how the navigation was triggered, possible values are "to", "back", "backToPage", and "backToTop".
		 */
		detailNavigate?: (from: sap.ui.core.Control, fromId: string, to: sap.ui.core.Control, toId: string, firstTime: boolean, isTo: boolean, isBack: boolean, isBackToTop: boolean, isBackToPage: boolean, direction: string) => void;
		/**
		 * Fires when navigation between two pages in detail area has completed.
		 * NOTE: In case of animated transitions this event is fired with some delay after the "navigate" event.
		 * @param from The page, which had been displayed before navigation.
		 * @param fromId The ID of the page, which had been displayed before navigation.
		 * @param to The page, which is now displayed after navigation.
		 * @param toId The ID of the page, which is now displayed after navigation.
		 * @param firstTime Determines whether the "to" page (more precisely: a control with the ID of the page,
		 * which has been navigated to) has not been displayed/navigated to before.
		 * @param isTo Determines whether was a forward navigation, triggered by to().
		 * @param isBack Determines whether this was a back navigation, triggered by back().
		 * @param isBackToTop Determines whether this was a navigation to the root page, triggered by backToTop().
		 * @param isBackToPage Determines whether this was a navigation to a specific page, triggered by backToPage().
		 * @param direction Determines how the navigation was triggered, possible values are "to", "back", "backToPage", and "backToTop".
		 */
		afterDetailNavigate?: (from: sap.ui.core.Control, fromId: string, to: sap.ui.core.Control, toId: string, firstTime: boolean, isTo: boolean, isBack: boolean, isBackToTop: boolean, isBackToPage: boolean, direction: string) => void;
	}

	interface StandardListItemMetadata extends sap.m.ListItemBaseMetadata {
		/**
		 * Defines the title of the list item.
		 */
		title?: string;
		/**
		 * Defines the additional information for the title.
		 * <b>Note:</b> This is only visible when the <code>title</code> property is not empty.
		 */
		description?: string;
		/**
		 * Defines the list item icon.
		 */
		icon?: sap.ui.core.URI;
		/**
		 * Defines the indentation of the icon. If set to <code>false</code>, the icon will not be shown as embedded. Instead it will take the full height of the list item.
		 * @default true
		 */
		iconInset?: boolean;
		/**
		 * By default, one or more requests are sent to get the density perfect version of the icon if the given version of the icon doesn't exist on the server.
		 * <b>Note:<b> If bandwidth is a key factor for the application, set this value to <code>false</code>.
		 * @default true
		 */
		iconDensityAware?: boolean;
		/**
		 * Defines the icon that is shown while the list item is pressed.
		 */
		activeIcon?: sap.ui.core.URI;
		/**
		 * Defines an additional information text.
		 */
		info?: string;
		/**
		 * Defines the state of the information text, e.g. <code>Error</code>, <code>Warning</code>, <code>Success</code>.
		 * @default None
		 */
		infoState?: sap.ui.core.ValueState;
		/**
		 * By default, the title size adapts to the available space and gets bigger if the description is empty. If you have list items with and without descriptions, this results in titles with different sizes. In this case, it can be better to switch the size adaption off by setting this property to <code>false</code>.
		 * @default true
		 */
		adaptTitleSize?: boolean;
		/**
		 * Defines the <code>title</code> text directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * @default Inherit
		 */
		titleTextDirection?: sap.ui.core.TextDirection;
		/**
		 * Defines the <code>info</code> directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * @default Inherit
		 */
		infoTextDirection?: sap.ui.core.TextDirection;
	}

	interface StandardTileMetadata extends sap.m.TileMetadata {
		/**
		 * Defines the title of the StandardTile.
		 */
		title?: string;
		/**
		 * Defines the description of the StandardTile.
		 */
		info?: string;
		/**
		 * Defines the icon of the StandardTile.
		 */
		icon?: sap.ui.core.URI;
		/**
		 * Defines the active icon of the StandardTile.
		 */
		activeIcon?: sap.ui.core.URI;
		/**
		 * Defines the number field of the StandardTile.
		 */
		number?: string;
		/**
		 * Defines the number units qualifier of the StandardTile.
		 */
		numberUnit?: string;
		/**
		 * Defines the color of the info text. Possible values are Error, Warning, Success and so on.
		 * @default None
		 */
		infoState?: sap.ui.core.ValueState;
		/**
		 * Defines the type of the StandardTile.
		 * @default None
		 */
		type?: sap.m.StandardTileType;
		/**
		 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
		 * 
		 * If bandwidth is key for the application, set this value to false.
		 * @default true
		 */
		iconDensityAware?: boolean;
	}

	interface StepInputMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Sets the minimum possible value of the defined range.
		 */
		min?: number;
		/**
		 * Sets the maximum possible value of the defined range.
		 */
		max?: number;
		/**
		 * Increases/decreases the value of the input.
		 * @default 1
		 */
		step?: number;
		/**
		 * TIncreases/decreases the value with a larger value than the set step only when using the PageUp/PageDown keys.
		 * Default value is 2 times larger than the set step.
		 * @default 2
		 */
		largerStep?: number;
		/**
		 * Determines the value of the <code>StepInput</code> and can be set initially from the app developer.
		 * @default 0
		 */
		value?: number;
		/**
		 * Defines the width of the control.
		 */
		width?: sap.ui.core.CSSSize;
		/**
		 * Accepts the core enumeration ValueState.type that supports <code>None</code>, <code>Error</code>, <code>Warning</code> and <code>Success</code>.
		 * @default None
		 */
		valueState?: sap.ui.core.ValueState;
		/**
		 * Defines whether the control can be modified by the user or not.
		 * <b>Note:</b> A user can tab to the non-editable control, highlight it, and copy the text from it.
		 * @default true
		 */
		editable?: boolean;
		/**
		 * Indicates whether the user can interact with the control or not.
		 * <b>Note:</b> Disabled controls cannot be focused and they are out of the tab-chain.
		 * @default true
		 */
		enabled?: boolean;
	}

	interface SuggestionItemMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * The icon belonging to this list item instance.
		 * This can be an URI to an image or an icon font URI.
		 * @default 
		 */
		icon?: string;
		/**
		 * Additional text of type string, optionally to be displayed along with this item.
		 * @default 
		 */
		description?: string;
	}

	interface SwitchMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * A boolean value indicating whether the switch is on or off.
		 * @default false
		 */
		state?: boolean;
		/**
		 * Custom text for the "ON" state.
		 * 
		 * "ON" translated to the current language is the default value.
		 * Beware that the given text will be cut off after three characters.
		 * @default 
		 */
		customTextOn?: string;
		/**
		 * Custom text for the "OFF" state.
		 * 
		 * "OFF" translated to the current language is the default value.
		 * Beware that the given text will be cut off after three characters.
		 * @default 
		 */
		customTextOff?: string;
		/**
		 * Whether the switch is enabled.
		 * @default true
		 */
		enabled?: boolean;
		/**
		 * The name to be used in the HTML code for the switch (e.g. for HTML forms that send data to the server via submit).
		 * @default 
		 */
		name?: string;
		/**
		 * Type of a Switch. Possibles values "Default", "AcceptReject".
		 * @default Default
		 */
		type?: sap.m.SwitchType;
		/**
		 * Triggered when a switch changes the state.
		 * @param state The new state of the switch.
		 */
		change?: (state: boolean) => void;
	}

	interface TabContainerMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Defines whether an <code>Add New Tab</code> button is displayed in the TabStrip.
		 * @default false
		 */
		showAddNewButton?: boolean;
		/**
		 * Fired when an item is closed.
		 * @param item The item to be closed.
		 */
		itemClose?: (item: sap.m.TabContainerItem) => void;
		/**
		 * Fired when an item is pressed.
		 * @param item The selected item.
		 */
		itemSelect?: (item: sap.m.TabContainerItem) => void;
		/**
		 * Fired when <code>Add New Tab</code> button is pressed.
		 */
		addNewButtonPress?: () => void;
	}

	interface TabContainerItemMetadata {
		/**
		 * Determines the text to be displayed for the item.
		 * @default 
		 */
		name?: string;
		/**
		 * Determines the name of the item. Can be used as input for subsequent actions.
		 */
		key?: string;
		/**
		 * Shows if a control is edited (default is false). Items that are marked as modified have a * symbol to indicate that they haven't been saved.
		 * @default false
		 */
		modified?: boolean;
		/**
		 * Sends information that some of the properties have changed.
		 * @param itemChanged The item changed.
		 * @param propertyKey The key of the property.
		 * @param propertyValue The value of the property.
		 */
		itemPropertyChanged?: (itemChanged: sap.m.TabContainerItem, propertyKey: string, propertyValue: any) => void;
	}

	interface TableMetadata extends sap.m.ListBaseMetadata {
		/**
		 * Sets the background style of the table. Depending on the theme, you can change the state of the background from <code>Solid</code> to <code>Translucent</code> or to <code>Transparent</code>.
		 * @default Translucent
		 */
		backgroundDesign?: sap.m.BackgroundDesign;
		/**
		 * Defines the algorithm to be used to layout the table cells, rows, and columns.
		 * By default, a table is rendered with fixed layout algorithm. This means the horizontal layout only depends on the table's width and the width of the columns, not the contents of the cells. Cells in subsequent rows do not affect column widths. This allows a browser to layout the table faster than the auto table layout since the browser can begin to display the table once the first row has been analyzed.
		 * 
		 * When this property is set to <code>false</code>, <code>sap.m.Table</code> is rendered with auto layout algorithm. This means, the width of the table and its cells depends on the contents of the cells. The column width is set by the widest unbreakable content inside the cells. This can make the rendering slow, since the browser needs to read through all the content in the table before determining the final layout.
		 * <b>Note:</b> Since <code>sap.m.Table</code> does not have its own scrollbars, setting <code>fixedLayout</code> to false can force the table to overflow, which may cause visual problems. It is suggested to use this property when a table has a few columns in wide screens or within the horizontal scroll container (e.g <code>sap.m.Dialog</code>) to handle overflow.
		 * In auto layout mode the <code>width</code> property of <code>sap.m.Column</code> is taken into account as a minimum width.
		 * @default true
		 */
		fixedLayout?: boolean;
		/**
		 * Setting this property to <code>true</code> will show an overlay on top of the table content and prevents the user interaction with it.
		 * @default false
		 */
		showOverlay?: boolean;
	}

	interface TablePersoControllerMetadata extends sap.ui.base.ManagedObjectMetadata {
		contentWidth?: sap.ui.core.CSSSize;
		contentHeight?: sap.ui.core.CSSSize;
		/**
		 * Available options for the text direction are LTR and RTL. By default the control inherits the text direction from its parent control.
		 */
		componentName?: string;
		hasGrouping?: boolean;
		showSelectAll?: boolean;
		showResetAll?: boolean;
		/**
		 * 
		 */
		personalizationsDone?: () => void;
	}

	interface TablePersoDialogMetadata extends sap.ui.base.ManagedObjectMetadata {
		contentWidth?: sap.ui.core.CSSSize;
		contentHeight?: sap.ui.core.CSSSize;
		persoMap?: any;
		columnInfoCallback?: any;
		initialColumnState?: any;
		hasGrouping?: boolean;
		showSelectAll?: boolean;
		showResetAll?: boolean;
		/**
		 * 
		 */
		confirm?: () => void;
		/**
		 * 
		 */
		cancel?: () => void;
	}

	interface TableSelectDialogMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Specifies the title text in the dialog header.
		 */
		title?: string;
		/**
		 * Specifies the text displayed when the table has no data.
		 */
		noDataText?: string;
		/**
		 * Enables the user to select several options from the table.
		 * @default false
		 */
		multiSelect?: boolean;
		/**
		 * Determines the number of items initially displayed in the table.
		 */
		growingThreshold?: number;
		/**
		 * Determines the content width of the inner dialog. For more information, see the Dialog documentation.
		 */
		contentWidth?: sap.ui.core.CSSSize;
		/**
		 * Controls whether the dialog clears the selection or not. When the dialog is opened multiple times in the same context to allow for corrections of previous user inputs, set this flag to "true". When the dialog should reset the selection to allow for a new selection each time set it to "false"
		 * Note: This property must be set before the Dialog is opened to have an effect.
		 * @default false
		 */
		rememberSelections?: boolean;
		/**
		 * Specifies the content height of the inner dialog. For more information, see the Dialog documentation.
		 */
		contentHeight?: sap.ui.core.CSSSize;
		/**
		 * Fires when the dialog is confirmed by selecting an item in single-selection mode or by pressing the confirmation button in multi-selection mode. The items being selected are returned as event parameters.
		 * @param selectedItem Returns the selected list item. When no item is selected, "null" is returned. When multi-selection is enabled and multiple items are selected, only the first selected item is returned.
		 * @param selectedItems Returns an array containing the visible selected list items. If no items are selected, an empty array is returned.
		 * @param selectedContexts Returns the binding contexts of the selected items including the non-visible items.
		 * Note: In contrast to the parameter "selectedItems", this parameter includes the selected but NOT visible items (due to list filtering). An empty array is set for this parameter if no Databinding is used.
		 */
		confirm?: (selectedItem: sap.m.StandardListItem, selectedItems: sap.m.StandardListItem[], selectedContexts: string) => void;
		/**
		 * Fires when the search button has been clicked on dialog.
		 * @param value Specifies the value entered in the search field.
		 * @param itemsBinding Determines the Items binding of the Table Select Dialog. Only available if the items aggregation is bound to a model.
		 */
		search?: (value: string, itemsBinding: any) => void;
		/**
		 * Fires when the value of the search field is changed by a user (for example at each key press).
		 * @param value Specifies the value entered in the search field.
		 * @param itemsBinding The Items binding of the Table Select Dialog.
		 * Only available if the items aggregation is bound to a model.
		 */
		liveChange?: (value: string, itemsBinding: any) => void;
		/**
		 * Fires when the Cancel button is clicked.
		 */
		cancel?: () => void;
	}

	interface TextMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Determines the text to be displayed.
		 * @default 
		 */
		text?: string;
		/**
		 * Available options for the text direction are LTR and RTL. By default the control inherits the text direction from its parent control.
		 * @default Inherit
		 */
		textDirection?: sap.ui.core.TextDirection;
		/**
		 * Enables text wrapping.
		 * @default true
		 */
		wrapping?: boolean;
		/**
		 * Sets the horizontal alignment of the text.
		 * @default Begin
		 */
		textAlign?: sap.ui.core.TextAlign;
		/**
		 * Sets the width of the Text control. By default, the Text control uses the full width available. Set this property to restrict the width to a custom value.
		 */
		width?: sap.ui.core.CSSSize;
		/**
		 * Limits the number of lines for wrapping texts.
		 * 
		 * Note: The multi-line overflow indicator depends on the browser line clamping support. For such browsers, this will be shown as ellipsis, for the other browsers the overflow will just be hidden.
		 */
		maxLines?: number;
	}

	interface TextAreaMetadata extends sap.m.InputBaseMetadata {
		/**
		 * Defines the number of visible text lines for the control.
		 * <b>Note:</b> The <code>height</code> property wins over the <code>rows</code> property, if both are set.
		 * @default 2
		 */
		rows?: number;
		/**
		 * Defines the visible width of the control, in average character widths.
		 * <b>Note:</b> The <code>width</code> property wins over the <code>cols</code> property, if both are set.
		 * @default 20
		 */
		cols?: number;
		/**
		 * Defines the height of the control.
		 */
		height?: sap.ui.core.CSSSize;
		/**
		 * Defines the maximum number of characters that the <code>value</code> can be.
		 * @default 0
		 */
		maxLength?: number;
		/**
		 * Indicates how the control wraps the text, e.g. <code>Soft</code>, <code>Hard</code>, <code>Off</code>.
		 * @default None
		 */
		wrapping?: sap.ui.core.Wrapping;
		/**
		 * Indicates when the <code>value</code> property gets updated with the user changes. Setting it to <code>true</code> updates the <code>value</code> property whenever the user has modified the text shown on the text area.
		 * @default false
		 */
		valueLiveUpdate?: boolean;
		/**
		 * Indicates the ability of the control to automatically grow and shrink dynamically with its content.
		 * <b>Note:</b> The <code>height</code> property is ignored, if this property set to <code>true</code>.
		 * @default false
		 */
		growing?: boolean;
		/**
		 * Defines the maximum number of lines that the control can grow.
		 * @default 0
		 */
		growingMaxLines?: number;
		/**
		 * Is fired whenever the user has modified the text shown on the text area.
		 * @param value The new <code>value</code> of the control.
		 */
		liveChange?: (value: string) => void;
	}

	interface TileMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Determines whether the tile is movable within the surrounding tile container. The remove event is fired by the tile container.
		 * @default true
		 */
		removable?: boolean;
		/**
		 * Tap event is raised if the user taps or clicks the control.
		 */
		press?: () => void;
	}

	interface TileContainerMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Defines the width of the TileContainer in px.
		 * @default 100%
		 */
		width?: sap.ui.core.CSSSize;
		/**
		 * Defines the height of the TileContainer in px.
		 * @default 100%
		 */
		height?: sap.ui.core.CSSSize;
		/**
		 * Determines whether the TileContainer is editable so you can move, delete or add tiles.
		 */
		editable?: boolean;
		/**
		 * Determines whether the user is allowed to add Tiles in Edit mode (editable = true).
		 */
		allowAdd?: boolean;
		/**
		 * Fires if a Tile is moved.
		 * @param tile The Tile that has been moved.
		 * @param newIndex The new index of the Tile in the tiles aggregation.
		 */
		tileMove?: (tile: sap.m.Tile, newIndex: number) => void;
		/**
		 * Fires if a Tile is deleted in Edit mode.
		 * @param tile The deleted Tile.
		 */
		tileDelete?: (tile: sap.m.Tile) => void;
		/**
		 * Fires when a Tile is added.
		 */
		tileAdd?: () => void;
	}

	interface TileContentMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * The footer text of the tile.
		 */
		footer?: string;
		/**
		 * The percent sign, the currency symbol, or the unit of measure.
		 */
		unit?: string;
		/**
		 * Disables control if true.
		 * @default false
		 */
		disabled?: boolean;
		/**
		 * The frame type: 1x1 or 2x1.
		 * @default Auto
		 */
		frameType?: sap.m.FrameType;
	}

	interface TimePickerMetadata extends sap.m.MaskInputMetadata {
		/**
		 * Determines the format, displayed in the input field and the picker sliders.
		 * 
		 * The default value is the browser's medium time format locale setting
		 * {@link sap.ui.core.LocaleData#getTimePattern}.
		 * If data binding with type {@link sap.ui.model.type.Time} is used for the
		 * <code>value</code> property, the <code>displayFormat</code> property
		 * is ignored as the information is provided from the binding itself.
		 */
		displayFormat?: string;
		/**
		 * Determines the format of the value property.
		 * 
		 * The default value is the browser's medium time format locale setting
		 * {@link sap.ui.core.LocaleData#getTimePattern}.
		 * If data binding with type {@link sap.ui.model.type.Time} is used for the
		 * <code>value</code> property, the <code>valueFormat</code> property
		 * is ignored as the information is provided from the binding itself.
		 */
		valueFormat?: string;
		/**
		 * Defines the locale used to parse string values representing time.
		 * 
		 * Determines the locale, used to interpret the string, supplied by the
		 * <code>value</code> property.
		 * Example: AM in the string "09:04 AM" is locale (language) dependent.
		 * The format comes from the browser language settings if not set explicitly.
		 * Used in combination with 12 hour <code>valueFormat</code> containing 'a', which
		 * stands for day period string.
		 * Default value is taken from browser's locale setting.
		 */
		localeId?: string;
		/**
		 * Holds a reference to a JavaScript Date Object. The <code>value</code> (string)
		 * property will be set according to it. Alternatively, if the <code>value</code>
		 * and <code>valueFormat</code> pair properties are supplied instead,
		 * the <code>dateValue</code> will be instantiated аccording to the parsed
		 * <code>value</code>.
		 */
		dateValue?: any;
		/**
		 * Displays the text of the general picker label and is read by screen readers.
		 * It is visible only on phone.
		 */
		title?: string;
		/**
		 * Sets the minutes slider step.
		 * The minutes slider is populated only by multiples of the step.
		 * @default 1
		 */
		minutesStep?: number;
		/**
		 * Sets the seconds slider step.
		 * The seconds slider is populated only by multiples of the step.
		 * @default 1
		 */
		secondsStep?: number;
	}

	interface TitleMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Defines the text which should be displayed as a title.
		 */
		text?: string;
		/**
		 * Defines the semantic level of the title.
		 * This information is e.g. used by assistive technologies like screenreaders to create a hierarchical site map for faster navigation.
		 * Depending on this setting either a HTML h1-h6 element is used or when using level <code>Auto</code> no explicit level information is written (HTML5 header element).
		 * @default Auto
		 */
		level?: sap.ui.core.TitleLevel;
		/**
		 * Defines the style of the title.
		 * When using the <code>Auto</code> styling, the appearance of the title depends on the current position of the title and the defined level.
		 * This automatism can be overridden by setting a different style explicitly.
		 * The actual appearance of the title and the different styles always depends on the theme being used.
		 * @default Auto
		 */
		titleStyle?: sap.ui.core.TitleLevel;
		/**
		 * Defines the width of the title.
		 */
		width?: sap.ui.core.CSSSize;
		/**
		 * Defines the alignment of the text within the title. <b>Note:</b> This property only has an effect if the overall width of the title control is
		 * larger than the displayed text.
		 * @default Initial
		 */
		textAlign?: sap.ui.core.TextAlign;
	}

	interface ToggleButtonMetadata extends sap.m.ButtonMetadata {
		/**
		 * The property is “true” when the control is toggled. The default state of this property is "false".
		 * @default false
		 */
		pressed?: boolean;
	}

	interface TokenMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Indicates the current selection status of the token.
		 * @default false
		 */
		selected?: boolean;
		/**
		 * Key of the token.
		 * @default 
		 */
		key?: string;
		/**
		 * Displayed text of the token.
		 * @default 
		 */
		text?: string;
		/**
		 * Indicates the editable status of the token. If it is set to <code>true</code>, token displays a delete icon.
		 * @default true
		 */
		editable?: boolean;
		/**
		 * This property specifies the text directionality with enumerated options. By default, the control inherits text direction from the DOM.
		 * @default Inherit
		 */
		textDirection?: sap.ui.core.TextDirection;
		/**
		 * This event is fired if the user clicks the token's delete icon.
		 */
		delete?: () => void;
		/**
		 * This event is fired when the user clicks on the token.
		 */
		press?: () => void;
		/**
		 * This event is fired when the token gets selected.
		 */
		select?: () => void;
	}

	interface TokenizerMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * true if tokens shall be editable otherwise false
		 * @default true
		 */
		editable?: boolean;
		/**
		 * Defines the width of the Tokenizer.
		 */
		width?: sap.ui.core.CSSSize;
		/**
		 * fired when the tokens aggregation changed (add / remove token)
		 * @param type type of tokenChange event.
		 * There are four TokenChange types: "added", "removed", "removedAll", "tokensChanged".
		 * Use Tokenizer.TokenChangeType.Added for "added",	Tokenizer.TokenChangeType.Removed for "removed", Tokenizer.TokenChangeType.RemovedAll for "removedAll" and Tokenizer.TokenChangeType.TokensChanged for "tokensChanged".
		 * @param token the added token or removed token.
		 * This parameter is used when tokenChange type is "added" or "removed".
		 * @param tokens the array of removed tokens.
		 * This parameter is used when tokenChange type is "removedAll".
		 * @param addedTokens the array of tokens that are added.
		 * This parameter is used when tokenChange type is "tokenChanged".
		 * @param removedTokens the array of tokens that are removed.
		 * This parameter is used when tokenChange type is "tokenChanged".
		 */
		tokenChange?: (type: string, token: sap.m.Token, tokens: sap.m.Token[], addedTokens: sap.m.Token[], removedTokens: sap.m.Token[]) => void;
	}

	interface ToolbarMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Defines the width of the control.
		 * By default, Toolbar is a block element. If the the width is not explicitly set, the control will assume its natural size.
		 */
		width?: sap.ui.core.CSSSize;
		/**
		 * Indicates that the whole toolbar is clickable. The Press event is fired only if Active is set to true.
		 * Note: This property should be used when there are no interactive controls inside the toolbar and the toolbar itself is meant to be interactive.
		 * @default false
		 */
		active?: boolean;
		/**
		 * Sets the enabled property of all controls defined in the content aggregation.
		 * Note: This property does not apply to the toolbar itself, but rather to its items.
		 * @default true
		 */
		enabled?: boolean;
		/**
		 * Defines the height of the control.
		 * Note: By default, the Height property depends on the used theme and the Design property.
		 * @default 
		 */
		height?: sap.ui.core.CSSSize;
		/**
		 * Defines the toolbar design.
		 * Note: Design settings are theme-dependent. They also determine the default height of the toolbar.
		 * @default Auto
		 */
		design?: sap.m.ToolbarDesign;
		/**
		 * Fired when the user clicks on the toolbar, if the Active property is set to "true".
		 * @param srcControl The toolbar item that was pressed
		 */
		press?: (srcControl: sap.ui.core.Control) => void;
	}

	interface ToolbarLayoutDataMetadata {
		/**
		 * Determines whether the control, when in a toolbar, is shrinkable or not. For controls with fixed width (100px, 5rem, etc...) this property is ignored.
		 * 
		 * Note: Nested layout controls should not be shrinkable.
		 * @default false
		 */
		shrinkable?: boolean;
		/**
		 * Sets the minimum width of the toolbar item.
		 */
		minWidth?: sap.ui.core.CSSSize;
		/**
		 * Sets the maximum width of the toolbar item.
		 */
		maxWidth?: sap.ui.core.CSSSize;
	}

	interface ToolbarSpacerMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Defines the width of the horizontal space.
		 * Note: Empty("") value makes the space flexible which means it covers the remaining space between toolbar items.
		 * This feature can be used to push next item to the edge of the toolbar.
		 * @default 
		 */
		width?: sap.ui.core.CSSSize;
	}

	interface UploadCollectionMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Defines the allowed file types for the upload.
		 * The chosen files will be checked against an array of file types.
		 * If at least one file does not fit the file type requirements, the upload is prevented.  Example: ["jpg", "png", "bmp"].
		 */
		fileType?: string[];
		/**
		 * Specifies the maximum length of a file name.
		 * If the maximum file name length is exceeded, the corresponding event 'filenameLengthExceed' is triggered.
		 */
		maximumFilenameLength?: number;
		/**
		 * Specifies a file size limit in megabytes that prevents the upload if at least one file exceeds the limit.
		 * This property is not supported by Internet Explorer 8 and 9.
		 */
		maximumFileSize?: number;
		/**
		 * Defines the allowed MIME types of files to be uploaded.
		 * The chosen files will be checked against an array of MIME types.
		 * If at least one file does not fit the MIME type requirements, the upload is prevented.
		 * This property is not supported by Internet Explorer 8 and 9. Example: mimeType ["image/png", "image/jpeg"].
		 */
		mimeType?: string[];
		/**
		 * Lets the user select multiple files from the same folder and then upload them.
		 * Internet Explorer 8 and 9 do not support this property.
		 * Please note that the various operating systems for mobile devices can react differently to the property so that fewer upload functions may be available in some cases.
		 * @default false
		 */
		multiple?: boolean;
		/**
		 * Allows you to set your own text for the 'No data' label.
		 */
		noDataText?: string;
		/**
		 * Allows the user to use the same name for a file when editing the file name. 'Same name' refers to an already existing file name in the list.
		 * @default false
		 */
		sameFilenameAllowed?: boolean;
		/**
		 * Defines whether separators are shown between list items.
		 * @default All
		 */
		showSeparators?: sap.m.ListSeparators;
		/**
		 * Enables the upload of a file.
		 * @default true
		 */
		uploadEnabled?: boolean;
		/**
		 * Specifies the URL where the uploaded files have to be stored.
		 * @default ../../../upload
		 */
		uploadUrl?: string;
		/**
		 * If false, no upload is triggered when a file is selected. In addition, if a file was selected, a new FileUploader instance is created to ensure that multiple files from multiple folders can be chosen.
		 * @default true
		 */
		instantUpload?: boolean;
		/**
		 * Sets the title text in the toolbar of the list of attachments.
		 * To show as well the number of attachments in brackets like the default text does. The number of attachments could be retrieved via "getItems().length".
		 * If a new title is set, the default is deactivated.
		 * The default value is set to language-dependent "Attachments (n)".
		 */
		numberOfAttachmentsText?: string;
		/**
		 * Defines the selection mode of the control (e.g. None, SingleSelect, MultiSelect, SingleSelectLeft, SingleSelectMaster).
		 * Since the UploadCollection reacts like a list for attachments, the API is close to the ListBase Interface.
		 * sap.m.ListMode.Delete mode is not supported and will be automatically set to sap.m.ListMode.None.
		 * In addition, if instant upload is set to false the mode sap.m.ListMode.MultiSelect is not supported and will be automatically set to sap.m.ListMode.None.
		 * @default None
		 */
		mode?: sap.m.ListMode;
		/**
		 * The event is triggered when files are selected in the FileUploader dialog. Applications can set parameters and headerParameters which will be dispatched to the embedded FileUploader control.
		 * Limitation: parameters and headerParameters are not supported by Internet Explorer 9.
		 * @param documentId An unique Id of the attached document.
		 * This parameter is deprecated since version 1.28.0, use parameter files instead.
		 * @param files A FileList of individually selected files from the underlying system. See www.w3.org for the FileList Interface definition.
		 * Limitation: Internet Explorer 9 supports only single file with property file.name.
		 * Since version 1.28.0.
		 */
		change?: (documentId: string, files: any[]) => void;
		/**
		 * The event is triggered when an uploaded attachment is selected and the Delete button is pressed.
		 * @param documentId An unique Id of the attached document.
		 * This parameter is deprecated since version 1.28.0, use parameter item instead.
		 * @param item An item to be deleted from the collection.
		 * Since version 1.28.0.
		 */
		fileDeleted?: (documentId: string, item: sap.m.UploadCollectionItem) => void;
		/**
		 * The event is triggered when the name of a chosen file is longer than the value specified with the maximumFilenameLength property (only if provided by the application).
		 * @param documentId An unique Id of the attached document.
		 * This parameter is deprecated since version 1.28.0, use parameter files instead.
		 * @param files A FileList of individually selected files from the underlying system.
		 * Limitation: Internet Explorer 9 supports only single file with property file.name.
		 * Since version 1.28.0.
		 */
		filenameLengthExceed?: (documentId: string, files: any[]) => void;
		/**
		 * The event is triggered when the file name is changed.
		 * @param documentId An unique Id of the attached document.
		 * This parameter is deprecated since version 1.28.0, use parameter item instead.
		 * @param fileName The new file name.
		 * This parameter is deprecated since version 1.28.0, use parameter item instead.
		 * @param item The renamed UI element as a UploadCollectionItem.
		 * Since version 1.28.0.
		 */
		fileRenamed?: (documentId: string, fileName: string, item: sap.m.UploadCollectionItem) => void;
		/**
		 * The event is triggered when the file size of an uploaded file is exceeded (only if the maxFileSize property was provided by the application).
		 * This event is not supported by Internet Explorer 9.
		 * @param documentId An unique Id of the attached document.
		 * This parameter is deprecated since version 1.28.0, use parameter files instead.
		 * @param fileSize The size in MB of a file to be uploaded.
		 * This parameter is deprecated since version 1.28.0, use parameter files instead.
		 * @param files A FileList of individually selected files from the underlying system.
		 * Limitation: Internet Explorer 9 supports only single file with property file.name.
		 * Since version 1.28.0.
		 */
		fileSizeExceed?: (documentId: string, fileSize: string, files: any[]) => void;
		/**
		 * The event is triggered when the file type or the MIME type don't match the permitted types (only if the fileType property or the mimeType property are provided by the application).
		 * @param documentId An unique Id of the attached document.
		 * This parameter is deprecated since version 1.28.0, use parameter files instead.
		 * @param fileType File type.
		 * This parameter is deprecated since version 1.28.0, use parameter files instead.
		 * @param mimeType MIME type.
		 * This parameter is deprecated since version 1.28.0, use parameter files instead.
		 * @param files A FileList of individually selected files from the underlying system.
		 * Limitation: Internet Explorer 9 supports only single file.
		 * Since version 1.28.0.
		 */
		typeMissmatch?: (documentId: string, fileType: string, mimeType: string, files: any[]) => void;
		/**
		 * The event is triggered as soon as the upload request is completed.
		 * @param readyStateXHR Ready state XHR. This parameter is deprecated since version 1.28.0., use parameter files instead.
		 * @param response Response of the completed upload request. This parameter is deprecated since version 1.28.0., use parameter files instead.
		 * @param status Status Code of the completed upload event. This parameter is deprecated since version 1.28.0., use parameter files instead.
		 * @param files A list of uploaded files. Each entry contains the following members.
		 * fileName	: The name of a file to be uploaded.
		 * response	: Response message which comes from the server. On the server side, this response has to be put within the 'body' tags of the response document of the iFrame. It can consist of a return code and an optional message. This does not work in cross-domain scenarios.
		 * responseRaw : HTTP-Response which comes from the server. This property is not supported by Internet Explorer Versions lower than 9.
		 * status	: Status of the XHR request. This property is not supported by Internet Explorer 9 and lower.
		 * headers : HTTP-Response-Headers which come from the server. Provided as a JSON-map, i.e. each header-field is reflected by a property in the header-object, with the property value reflecting the header-field's content. This property is not supported by Internet Explorer 9 and lower.
		 * Since version 1.28.0.
		 */
		uploadComplete?: (readyStateXHR: string, response: string, status: string, files: any[]) => void;
		/**
		 * The event is triggered as soon as the upload request was terminated by the user.
		 * @param fileName Specifies the name of the file of which the upload is to be terminated.
		 * @param getHeaderParameter This callback function returns the corresponding header parameter (type sap.m.UploadCollectionParameter) if available.
		 */
		uploadTerminated?: (fileName: string, getHeaderParameter: any) => void;
		/**
		 * The event is triggered before the actual upload starts. An event is fired per file. All the necessary header parameters should be set here.
		 * @param fileName Specifies the name of the file to be uploaded.
		 * @param addHeaderParameter Adds a header parameter to the file that will be uploaded.
		 * @param getHeaderParameter Returns the corresponding header parameter (type sap.m.UploadCollectionParameter) if available.
		 */
		beforeUploadStarts?: (fileName: string, addHeaderParameter: any, getHeaderParameter: any) => void;
		/**
		 * Fires when selection is changed via user interaction inside the control.
		 * @param selectedItem The item whose selection has changed. In <code>MultiSelect</code> mode, only the selected item upmost is returned. This parameter can be used for single-selection modes.
		 * @param selectedItems Array of items whose selection has changed. This parameter can be used for <code>MultiSelect</code> mode.
		 * @param selected Indicates whether the <code>listItem</code> parameter is selected or not.
		 */
		selectionChange?: (selectedItem: sap.m.UploadCollectionItem, selectedItems: sap.m.UploadCollectionItem[], selected: boolean) => void;
	}

	interface UploadCollectionItemMetadata {
		/**
		 * Specifies a unique identifier of the file (created by the application).
		 */
		documentId?: string;
		/**
		 * Specifies the name of the uploaded file.
		 */
		fileName?: string;
		/**
		 * Specifies the MIME type of the file.
		 */
		mimeType?: string;
		/**
		 * Specifies the URL where the thumbnail of the file is located.
		 */
		thumbnailUrl?: string;
		/**
		 * Specifies the URL where the file is located.
		 * If the application doesn't provide a value for this property, the icon and the file name of the UploadCollectionItem are not clickable.
		 */
		url?: string;
		/**
		 * Enables/Disables the Edit button.
		 * If the value is true, the Edit button is enabled and the edit function can be used.
		 * If the value is false, the edit function is not available.
		 * @default true
		 */
		enableEdit?: boolean;
		/**
		 * Enables/Disables the Edit button.
		 * If the value is true, the Edit button is enabled and the edit function can be used.
		 * If the value is false, the edit function is not available.
		 * @default true
		 */
		enableDelete?: boolean;
		/**
		 * Show/Hide the Edit button.
		 * If the value is true, the Edit button is visible.
		 * If the value is false, the Edit button is not visible.
		 * @default true
		 */
		visibleEdit?: boolean;
		/**
		 * Show/Hide the Delete button.
		 * If the value is true, the Delete button is visible.
		 * If the value is false, the Delete button is not visible.
		 * @default true
		 */
		visibleDelete?: boolean;
		/**
		 * Aria label for the icon (or for the image).
		 */
		ariaLabelForPicture?: string;
		/**
		 * Defines the selected state of the UploadCollectionItem.
		 * @default false
		 */
		selected?: boolean;
	}

	interface UploadCollectionParameterMetadata {
		/**
		 * Specifies the name of the parameter.
		 */
		name?: string;
		/**
		 * Specifies the value of the parameter.
		 */
		value?: string;
	}

	interface ViewSettingsCustomItemMetadata extends sap.m.ViewSettingsItemMetadata {
		/**
		 * The number of currently active filters for this custom filter item. It will be displayed in the filter list of the ViewSettingsDialog to represent the filter state of the custom control.
		 * @default 0
		 */
		filterCount?: number;
	}

	interface ViewSettingsCustomTabMetadata extends sap.ui.core.ItemMetadata {
		/**
		 * Custom tab button icon
		 * @default sap-icon://competitor
		 */
		icon?: sap.ui.core.URI;
		/**
		 * Custom tab title
		 * @default 
		 */
		title?: string;
	}

	interface ViewSettingsDialogMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Defines the title of the dialog. If not set and there is only one active tab, the dialog uses the default "View" or "Sort", "Group", "Filter" respectively.
		 */
		title?: string;
		/**
		 * Determines whether the sort order is descending or ascending (default).
		 * @default false
		 */
		sortDescending?: boolean;
		/**
		 * Determines whether the group order is descending or ascending (default).
		 * @default false
		 */
		groupDescending?: boolean;
		/**
		 * Indicates that the user has pressed the OK button and the selected sort, group, and filter settings should be applied to the data on this page.
		 * </br></br><b>Note:</b> Custom tabs are not converted to event parameters automatically. For custom tabs, you have to read the state of your controls inside the callback of this event.
		 * @param sortItem The selected sort item.
		 * @param sortDescending The selected sort order (true = descending, false = ascending).
		 * @param groupItem The selected group item.
		 * @param groupDescending The selected group order (true = descending, false = ascending).
		 * @param presetFilterItem The selected preset filter item.
		 * @param filterItems The selected filters in an array of ViewSettingsItem.
		 * @param filterKeys The selected filter items in an object notation format: { key: boolean }. If a custom control filter was displayed (for example, the user clicked on the filter item), the value for its key is set to true to indicate that there has been an interaction with the control.
		 * @param filterString The selected filter items in a string format to display in the control's header bar in format "Filtered by: key (subkey1, subkey2, subkey3)".
		 */
		confirm?: (sortItem: sap.m.ViewSettingsItem, sortDescending: boolean, groupItem: sap.m.ViewSettingsItem, groupDescending: boolean, presetFilterItem: sap.m.ViewSettingsItem, filterItems: sap.m.ViewSettingsItem[], filterKeys: any, filterString: string) => void;
		/**
		 * Called when the Cancel button is pressed. It can be used to set the state of custom filter controls.
		 */
		cancel?: () => void;
		/**
		 * Called when the reset filters button is pressed. It can be used to clear the state of custom filter controls.
		 */
		resetFilters?: () => void;
		/**
		 * Fired when the filter detail page is opened.
		 * @param parentFilterItem The filter item for which the details are opened.
		 */
		filterDetailPageOpened?: (parentFilterItem: sap.m.ViewSettingsFilterItem) => void;
	}

	interface ViewSettingsFilterItemMetadata extends sap.m.ViewSettingsItemMetadata {
		/**
		 * If set to (true), multi selection will be allowed for the items aggregation.
		 * @default true
		 */
		multiSelect?: boolean;
		/**
		 * Let the outside world know that the filter detail aggregation was changed.
		 */
		filterDetailItemsAggregationChange?: () => void;
	}

	interface ViewSettingsItemMetadata extends sap.ui.core.ItemMetadata {
		/**
		 * Selected state of the item. If set to "true", the item will be displayed as selected in the view settings dialog.
		 * @default false
		 */
		selected?: boolean;
		/**
		 * Let the outside world know that some of its properties has changed.
		 * @param changedItem Instance of the item that changed.
		 * @param propertyKey Key of the changed property.
		 * @param propertyValue Value of the changed property.
		 */
		itemPropertyChanged?: (changedItem: sap.m.ViewSettingsItem, propertyKey: string, propertyValue: any) => void;
	}

	interface WizardMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Determines the width of the Wizard.
		 * @default auto
		 */
		width?: sap.ui.core.CSSSize;
		/**
		 * Determines the height of the Wizard.
		 * @default 100%
		 */
		height?: sap.ui.core.CSSSize;
		/**
		 * Controls the visibility of the next button. The developers can choose to control the flow of the
		 * steps either through the API (with <code>nextStep</code> and <code>previousStep</code> methods) or let the user click
		 * the next button, and control it with <code>validateStep</code> or <code>invalidateStep</code> methods.
		 * @default true
		 */
		showNextButton?: boolean;
		/**
		 * Changes the text of the finish button for the last step.
		 * This property can be used only if <code>showNextButton</code> is set to true.
		 * By default the text of the button is "Review".
		 * @default Review
		 */
		finishButtonText?: string;
		/**
		 * Enables the branching functionality of the Wizard.
		 * Branching gives the developer the ability to define multiple routes a user
		 * is able to take based on the input in the current step.
		 * It is up to the developer to programatically check for what is the input in the
		 * current step and set a concrete next step amongs the available subsequent steps.
		 * Note: If this property is set to false, <code>next</code> and <code>subSequentSteps</code>
		 * associations of the WizardStep control are ignored.
		 * @default false
		 */
		enableBranching?: boolean;
		/**
		 * The StepActivated event is fired every time a new step is activated.
		 * @param index The index of the activated step as a parameter. One-based.
		 */
		stepActivate?: (index: number) => void;
		/**
		 * The complete event is fired when the user clicks the finish button of the Wizard.
		 * The finish button is only available on the last step of the Wizard.
		 */
		complete?: () => void;
	}

	interface WizardStepMetadata extends sap.ui.core.ControlMetadata {
		/**
		 * Determines the title of the step.
		 * The title is visualized in the Wizard control.
		 * @default 
		 */
		title?: string;
		/**
		 * Determines the icon that is displayed for this step.
		 * The icon is visualized in the progress navigation part of the Wizard control.
		 * <b>Note:</b> In order for the icon to be displayed, each step in the Wizard should have
		 * this property defined, otherwise the default numbering will be displayed.
		 * @default 
		 */
		icon?: sap.ui.core.URI;
		/**
		 * Indicates whether or not the step is validated.
		 * When a step is validated a Next button is visualized in the Wizard control.
		 * @default true
		 */
		validated?: boolean;
		/**
		 * This event is fired after the user presses the Next button in the Wizard,
		 * or on <code>nextStep</code> method call from the app developer.
		 */
		complete?: () => void;
		/**
		 * This event is fired on next step activation from the Wizard.
		 */
		activate?: () => void;
	}
	/**
	 * Hide the soft keyboard.
	 */
	var closeKeyboard: any;
	/**
	 * Search given control's parents and try to find iScroll.
	 */
	var getIScroll: any;
	/**
	 * Search given control's parents and try to find ScrollDelegate.
	 */
	var getScrollDelegate: any;
	/**
	 * <pre>
	 * <code>sap.m.Support</code> shows the technical information for SAPUI5 Mobile Applications.
	 * This technical information includes
	 *    * SAPUI5 Version
	 *    * User Agent
	 *    * Configurations (Bootstrap and Computed)
	 *    * URI parameters
	 *    * All loaded module names
	 * 
	 * In order to show the device information, the user must follow the following gestures.
	 *    1 - Hold two finger for 3 seconds minimum.
	 *    2 - Tab with a third finger while holding the first two fingers.
	 * 
	 * NOTE: This class is internal and all its functions must not be used by an application
	 * 
	 * As <code>sap.m.Support</code> is a static class, a <code>jQuery.sap.require("sap.m.Support");</code>
	 * statement must be implicitly executed before the class is used.
	 * 
	 * 
	 * Enable Support:
	 * --------------------------------------------------
	 * //import library
	 * jQuery.sap.require("sap.m.Support");
	 * 
	 * //By default after require, support is enabled but implicitly we can call
	 * sap.m.Support.on();
	 * 
	 * Disable Support:
	 * --------------------------------------------------
	 * sap.m.Support.off();
	 * </pre>
	 */
	var Support: any;
	/**
	 * Finds default locale settings once and returns always the same.
	 * We should not need to create new instance to get same locale settings
	 * This method keep the locale instance in the scope and returns the same after first run
	 * @return sap.ui.core.Locale instane
	 */
	function getLocale(): any;
	/**
	 * Finds default locale data once and returns always the same.
	 * @return sap.ui.core.LocaleData instance
	 */
	function getLocaleData(): any;
	/**
	 * Checks if the given parameter is a valid JsDate Object.
	 * @param value Any variable to test.
	 * @return 
	 */
	function isDate(value: any): boolean;
}
