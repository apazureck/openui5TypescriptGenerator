

/**
 * The <code>sap.ui</code> namespace is the central OpenAjax compliant entry
 * point for UI related JavaScript functionality provided by SAP.
 */
declare namespace sap.ui {

	/**
	 * Common basic controls, mainly intended for desktop scenarios
	 */
	namespace commons {
	
		class ButtonStyle {
			/**
			 * Accept button (normally green).
			 */
			static Accept: string;
			/**
			 * default style (no special styling).
			 */
			static Default: string;
			/**
			 * Button is emphasized.
			 */
			static Emph: string;
			/**
			 * Reject button (normally red).
			 */
			static Reject: string;
		}
	
		class ColorPickerMode {
			/**
			 * Color picker works with HSL values.
			 */
			static HSL: string;
			/**
			 * Color picker works with HSV values.
			 */
			static HSV: string;
		}
	
		namespace enums {
		
			class AreaDesign {
				/**
				 * Shows the label in a filled look
				 */
				static Fill: string;
				/**
				 * Shows the area in a plain look
				 */
				static Plain: string;
				/**
				 * Shows the background as transparent
				 */
				static Transparent: string;
			}
		
			class BorderDesign {
				/**
				 * Draws the border as a box around the area
				 */
				static Box: string;
				/**
				 * Suppresses the border
				 */
				static None: string;
			}
		
			class Orientation {
				/**
				 * Horizontal orientation
				 */
				static horizontal: string;
				/**
				 * Vertical orientation
				 */
				static vertical: string;
			}
		}
	
		interface FormattedTextViewControl {
		}
	
		class HorizontalDividerHeight {
			/**
			 * Divider gets a large top and bottom margin.
			 */
			static Large: string;
			/**
			 * Divider gets a medium top and bottom margin.
			 */
			static Medium: string;
			/**
			 * Divider gets no top and bottom margin.
			 */
			static Ruleheight: string;
			/**
			 * Divider gets a small top and bottom margin.
			 */
			static Small: string;
		}
	
		class HorizontalDividerType {
			/**
			 * Type Area
			 */
			static Area: string;
			/**
			 * Type Page
			 */
			static Page: string;
		}
	
		class LabelDesign {
			/**
			 * Displays the label in bold.
			 */
			static Bold: string;
			/**
			 * Displays the label in normal mode.
			 */
			static Standard: string;
		}
	
		namespace layout {
		
			class BackgroundDesign {
				/**
				 * 
				 * A background design suitable for borders.
				 */
				static Border: string;
				/**
				 * 
				 * An opaque background design that looks dark filled.
				 */
				static Fill1: string;
				/**
				 * 
				 * An opaque background design that looks medium filled.
				 */
				static Fill2: string;
				/**
				 * 
				 * An opaque background design that looks light filled.
				 */
				static Fill3: string;
				/**
				 * 
				 * A background design suitable for headers.
				 */
				static Header: string;
				/**
				 * 
				 * A plain but opaque background design.
				 */
				static Plain: string;
				/**
				 * 
				 * A transparent background.
				 */
				static Transparent: string;
			}
		
			class BorderLayoutAreaTypes {
				/**
				 * Value to identify the begin area.
				 */
				static begin: string;
				/**
				 * Value to identify the bottom area.
				 */
				static bottom: string;
				/**
				 * Value to identify the center area.
				 */
				static center: string;
				/**
				 * Value to identify the end area.
				 */
				static end: string;
				/**
				 * Value to identify the top area.
				 */
				static top: string;
			}
		
			class HAlign {
				/**
				 * 
				 * Aligned towards the beginning of a line, in the current locale's writing direction.
				 */
				static Begin: string;
				/**
				 * 
				 * Horizontally centered.
				 */
				static Center: string;
				/**
				 * 
				 * Aligned towards the end of a line, in the current locale's writing direction.
				 */
				static End: string;
				/**
				 * 
				 * Left aligned, regardless of the current locale's writing direction.
				 */
				static Left: string;
				/**
				 * 
				 * Right aligned, regardless of the current locale's writing direction.
				 */
				static Right: string;
			}
		
			class Padding {
				/**
				 * 
				 * Top and bottom padding of 2px.
				 * Padding of 4px towards the beginning of a line, in the current locale's
				 * writing direction, but none towards its end.
				 */
				static Begin: string;
				/**
				 * 
				 * Top and bottom padding of 2px.
				 * Padding of 4px towards both the beginning and end of a line.
				 */
				static Both: string;
				/**
				 * 
				 * Top and bottom padding of 2px.
				 * Padding of 4px towards the end of a line, in the current locale's
				 * writing direction, but none towards its beginning.
				 */
				static End: string;
				/**
				 * 
				 * Top and bottom padding of 2px.
				 * No padding towards neither the beginning nor end of a line.
				 */
				static Neither: string;
				/**
				 * 
				 * No padding at all.
				 */
				static None: string;
			}
		
			class PositionContainer extends sap.ui.core.Element {
				/**
				 * Constructor for a new layout/PositionContainer.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: sap.ui.commons.layout.PositionContainerMetadata);
				/**
				 * Constructor for a new layout/PositionContainer.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @note Any overloads to support not documented metadata
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Destroys the control in the aggregation <code>control</code>.
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				destroyControl(): PositionContainer;
				/**
				 * Creates a new subclass of class sap.ui.commons.layout.PositionContainer with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Gets current value of property <code>bottom</code>.
				 * 
				 * Defines the distance to the bottom of the layout (as specified in HTML)
				 * @return Value of property <code>bottom</code>
				 */
				getBottom(): sap.ui.core.CSSSize;
				/**
				 * Gets current value of property <code>centerHorizontally</code>.
				 * 
				 * Indicates whether this container shall be centered horizontally within the AbsoluteLayout area.
				 * The values of the attributes left and right are ignored when this feature is activated.
				 * 
				 * Default value is <code>false</code>.
				 * @return Value of property <code>centerHorizontally</code>
				 */
				getCenterHorizontally(): boolean;
				/**
				 * Gets current value of property <code>centerVertically</code>.
				 * 
				 * Indicates whether this container should be centered vertically within the AbsoluteLayout area.
				 * The values of the attributes top and bottom are ignored when this feature is activated.
				 * 
				 * Default value is <code>false</code>.
				 * @return Value of property <code>centerVertically</code>
				 */
				getCenterVertically(): boolean;
				/**
				 * Gets content of aggregation <code>control</code>.
				 * 
				 * Child control of the position container
				 * @return 
				 */
				getControl(): sap.ui.core.Control;
				/**
				 * Gets current value of property <code>left</code>.
				 * 
				 * Defines the distance to the left of the layout (as specified in HTML)
				 * @return Value of property <code>left</code>
				 */
				getLeft(): sap.ui.core.CSSSize;
				/**
				 * Gets current value of property <code>right</code>.
				 * 
				 * Defines the distance to the right of the layout (as specified in HTML)
				 * @return Value of property <code>right</code>
				 */
				getRight(): sap.ui.core.CSSSize;
				/**
				 * Gets current value of property <code>top</code>.
				 * 
				 * Defines the distance to the top of the layout (as specified in HTML)
				 * @return Value of property <code>top</code>
				 */
				getTop(): sap.ui.core.CSSSize;
				/**
				 * Sets a new value for property <code>bottom</code>.
				 * 
				 * Defines the distance to the bottom of the layout (as specified in HTML)
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sBottom New value for property <code>bottom</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setBottom(sBottom: sap.ui.core.CSSSize): PositionContainer;
				/**
				 * Sets a new value for property <code>centerHorizontally</code>.
				 * 
				 * Indicates whether this container shall be centered horizontally within the AbsoluteLayout area.
				 * The values of the attributes left and right are ignored when this feature is activated.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>false</code>.
				 * @param bCenterHorizontally New value for property <code>centerHorizontally</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setCenterHorizontally(bCenterHorizontally: boolean): PositionContainer;
				/**
				 * Sets a new value for property <code>centerVertically</code>.
				 * 
				 * Indicates whether this container should be centered vertically within the AbsoluteLayout area.
				 * The values of the attributes top and bottom are ignored when this feature is activated.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>false</code>.
				 * @param bCenterVertically New value for property <code>centerVertically</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setCenterVertically(bCenterVertically: boolean): PositionContainer;
				/**
				 * Sets the aggregated <code>control</code>.
				 * @param oControl The control to set
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setControl(oControl: sap.ui.core.Control): PositionContainer;
				/**
				 * Sets a new value for property <code>left</code>.
				 * 
				 * Defines the distance to the left of the layout (as specified in HTML)
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sLeft New value for property <code>left</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setLeft(sLeft: sap.ui.core.CSSSize): PositionContainer;
				/**
				 * Sets a new value for property <code>right</code>.
				 * 
				 * Defines the distance to the right of the layout (as specified in HTML)
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sRight New value for property <code>right</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setRight(sRight: sap.ui.core.CSSSize): PositionContainer;
				/**
				 * Sets a new value for property <code>top</code>.
				 * 
				 * Defines the distance to the top of the layout (as specified in HTML)
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sTop New value for property <code>top</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setTop(sTop: sap.ui.core.CSSSize): PositionContainer;
				/**
				 * Updates the position properties of the container according to the given position in JSON style.
				 * @param oPos JSON-like object which defines the position of the child control in the absolute layout. The object is expected
				 *         to have one or more out of the attributes top, bottom, left, right (each with a value of type sap.ui.core.CSSSize). If no object
				 *         is given, nothing is updated.
				 */
				updatePosition(oPos: any);
			}
		
			class Separation {
				/**
				 * 
				 * A large (63px) vertical gutter without a vertical line.
				 */
				static Large: string;
				/**
				 * 
				 * A large (63px) vertical gutter with a vertical line in its middle.
				 */
				static LargeWithLine: string;
				/**
				 * 
				 * A medium (31px) vertical gutter without a vertical line.
				 */
				static Medium: string;
				/**
				 * 
				 * A medium (31px) vertical gutter with a vertical line in its middle.
				 */
				static MediumWithLine: string;
				/**
				 * 
				 * No gutter at all (0px), and without a vertical line, of course.
				 */
				static None: string;
				/**
				 * 
				 * A small (17px) vertical gutter without a vertical line.
				 */
				static Small: string;
				/**
				 * 
				 * A small (17px) vertical gutter with a vertical line in its middle.
				 */
				static SmallWithLine: string;
			}
		
			class VAlign {
				/**
				 * 
				 * Aligned at the bottom.
				 */
				static Bottom: string;
				/**
				 * 
				 * Vertically centered.
				 */
				static Middle: string;
				/**
				 * 
				 * Aligned at the top.
				 */
				static Top: string;
			}
		
			interface PositionContainerMetadata {
				/**
				 * Defines the distance to the top of the layout (as specified in HTML)
				 */
				top?: sap.ui.core.CSSSize;
				/**
				 * Defines the distance to the bottom of the layout (as specified in HTML)
				 */
				bottom?: sap.ui.core.CSSSize;
				/**
				 * Defines the distance to the left of the layout (as specified in HTML)
				 */
				left?: sap.ui.core.CSSSize;
				/**
				 * Defines the distance to the right of the layout (as specified in HTML)
				 */
				right?: sap.ui.core.CSSSize;
				/**
				 * Indicates whether this container shall be centered horizontally within the AbsoluteLayout area.
				 * The values of the attributes left and right are ignored when this feature is activated.
				 * @default false
				 */
				centerHorizontally?: boolean;
				/**
				 * Indicates whether this container should be centered vertically within the AbsoluteLayout area.
				 * The values of the attributes top and bottom are ignored when this feature is activated.
				 * @default false
				 */
				centerVertically?: boolean;
			}
		}
	
		class MenuBarDesign {
			/**
			 * The MenuBar appears in header design.
			 */
			static Header: string;
			/**
			 * The MenuBar appears in standard design.
			 */
			static Standard: string;
		}
	
		namespace MessageBox {
		
			class Action {
				/**
				 * Adds an "Abort" button to the message box.
				 */
				static ABORT: any;
				/**
				 * Adds a "Cancel" button to the message box.
				 */
				static CANCEL: any;
				/**
				 * Adds a "Close" button to the message box.
				 */
				static CLOSE: any;
				/**
				 * Adds an "Ignore" button to the message box.
				 */
				static IGNORE: any;
				/**
				 * Adds a "No" button to the message box.
				 */
				static NO: any;
				/**
				 * Adds an "Ok" button to the message box.
				 */
				static OK: any;
				/**
				 * Adds a "Retry" button to the message box.
				 */
				static RETRY: any;
				/**
				 * Adds a "Yes" button to the message box.
				 */
				static YES: any;
			}
		
			class Icon {
				/**
				 * Shows the error icon in the message box.
				 */
				static ERROR: any;
				/**
				 * Shows the information icon in the message box.
				 */
				static INFORMATION: any;
				/**
				 * Shows no icon in the message box.
				 */
				static NONE: any;
				/**
				 * Shows the question icon in the message box.
				 */
				static QUESTION: any;
				/**
				 * Shows the success icon in the message box.
				 */
				static SUCCESS: any;
				/**
				 * Shows the warning icon in the message box.
				 */
				static WARNING: any;
			}
		}
	
		class MessageType {
			/**
			 * Error message
			 */
			static Error: string;
			/**
			 * Successful message
			 */
			static Success: string;
			/**
			 * Warning message
			 */
			static Warning: string;
		}
	
		class PaginatorEvent {
			/**
			 * First page event
			 */
			static First: string;
			/**
			 * Go to page event
			 */
			static Goto: string;
			/**
			 * Last page event
			 */
			static Last: string;
			/**
			 * Next page event
			 */
			static Next: string;
			/**
			 * Previous page event
			 */
			static Previous: string;
		}
	
		class RatingIndicatorVisualMode {
			/**
			 * Values are not rounded.
			 */
			static Continuous: string;
			/**
			 * Values are rounded to the nearest integer value (e.g. 1.7 -> 2).
			 */
			static Full: string;
			/**
			 * Values are rounded to the nearest half value (e.g. 1.7 -> 1.5).
			 */
			static Half: string;
		}
	
		class RowRepeaterDesign {
			/**
			 * The RowRepeater will be displayed without header, toolbar or footer. Background will be transparent.
			 */
			static BareShell: string;
			/**
			 * The RowRepeater header and footer elements, as well as the row container background, appear solid.
			 */
			static Standard: string;
			/**
			 * The RowRepeater header and footer elements, as well as the row container background, appear transparent.
			 */
			static Transparent: string;
		}
	
		class TextViewColor {
			/**
			 * Critical color
			 */
			static Critical: string;
			/**
			 * Default color
			 */
			static Default: string;
			/**
			 * Negative color
			 */
			static Negative: string;
			/**
			 * Positive color
			 */
			static Positive: string;
		}
	
		class TextViewDesign {
			/**
			 * Displays the text in bold letters
			 */
			static Bold: string;
			/**
			 * Displays the text in header 1 letters.
			 */
			static H1: string;
			/**
			 * Displays the text in header 2 letters.
			 */
			static H2: string;
			/**
			 * Displays the text in header 3 letters.
			 */
			static H3: string;
			/**
			 * Displays the text in header 4 letters.
			 */
			static H4: string;
			/**
			 * Displays the text in header 5 letters.
			 */
			static H5: string;
			/**
			 * Displays the text in header 6 letters.
			 */
			static H6: string;
			/**
			 * Displays the text in italic letters
			 */
			static Italic: string;
			/**
			 * Displays the text in monospace letters.
			 */
			static Monospace: string;
			/**
			 * Displays the text in smaller letters.
			 */
			static Small: string;
			/**
			 * Displays the text in standard letters.
			 */
			static Standard: string;
			/**
			 * underlined Text
			 */
			static Underline: string;
		}
	
		class ToolbarDesign {
			/**
			 * The included controls have a very light appearance. The feature might be not supported by all themes.
			 */
			static Flat: string;
			/**
			 * The toolbar elements such as buttons for example have their normal visual design, and the toolbar appears solid.
			 * The feature might be not supported by all themes.
			 */
			static Standard: string;
			/**
			 * The controls included in the toolbar have a normal visual design where the toolbar appears transparent.
			 * The feature might be not supported by all themes.
			 */
			static Transparent: string;
		}
	
		interface ToolbarItem {
		}
	
		class ToolbarSeparatorDesign {
			/**
			 * 100% height Separator before and after specific controls
			 */
			static FullHeight: string;
			/**
			 * Standard Separator between controls
			 */
			static Standard: string;
		}
	
		class TreeSelectionMode {
			/**
			 * Behavior of the former Tree. It is possible to select a plurality of nodes via the API.
			 */
			static Legacy: string;
			/**
			 * Select multiple rows at a time.
			 */
			static Multi: string;
			/**
			 * No rows can be selected.
			 */
			static None: string;
			/**
			 * Select one row at a time.
			 */
			static Single: string;
		}
	
		class TriStateCheckBoxState {
			/**
			 * checked value for tri-state checkbox
			 */
			static Checked: string;
			/**
			 * mixed state for tri-state checkbox
			 */
			static Mixed: string;
			/**
			 * unchecked, default value for tri-state checkbox
			 */
			static Unchecked: string;
		}
		/**
		 * A string type that represents subset of CSS size values. For the Splitter only px and % are allowed.
		 */
		type SplitterSize = string;
	}

	/**
	 * SAPUI5 base classes
	 */
	namespace base {
	
		class Event extends Object {
			/**
			 * Creates an event with the given <code>sId</code>, linked to the provided <code>oSource</code> and enriched with the <code>mParameters</code>.
			 * @param sId The id of the event
			 * @param oSource The source of the event
			 * @param mParameters A map of parameters for this event
			 */
			constructor(sId: string, oSource: sap.ui.base.EventProvider, mParameters: any);
			/**
			 * Cancel bubbling of the event.
			 * 
			 * <b>Note:</b> This function only has an effect if the bubbling of the event is supported by the event source.
			 */
			cancelBubble();
			/**
			 * Creates a new subclass of class sap.ui.base.Event with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Returns the id of the event.
			 * @return The id of the event
			 */
			getId(): string;
			/**
			 * Returns the value of the parameter with the given sName.
			 * @param sName The name of the parameter to return
			 * @return The value for the named parameter
			 */
			getParameter(sName: string): any;
			/**
			 * Returns all parameter values of the event keyed by their names.
			 * @return All parameters of the event keyed by name
			 */
			getParameters(): any;
			/**
			 * Returns the event provider on which the event was fired.
			 * @return The source of the event
			 */
			getSource(): EventProvider;
			/**
			 * Prevent the default action of this event.
			 * 
			 * <b>Note:</b> This function only has an effect if preventing the default action of the event is supported by the event source.
			 */
			preventDefault();
		}
	
		class EventProvider extends Object {
			/**
			 * Creates an instance of EventProvider.
			 */
			constructor();
			/**
			 * Attaches an event handler to the event with the given identifier.
			 * @param sEventId The identifier of the event to listen for
			 * @param oData An object that will be passed to the handler along with the event object when the event is fired
			 * @param fnFunction The handler function to call when the event occurs. This function will be called in the context of the
			 *                       <code>oListener</code> instance (if present) or on the event provider instance. The event
			 *                       object ({@link sap.ui.base.Event}) is provided as first argument of the handler. Handlers must not change
			 *                       the content of the event. The second argument is the specified <code>oData</code> instance (if present).
			 * @param oListener The object that wants to be notified when the event occurs (<code>this</code> context within the
			 *                        handler function). If it is not specified, the handler function is called in the context of the event provider.(optional)
			 * @return Returns <code>this</code> to allow method chaining
			 */
			attachEvent(sEventId: string, oData: any, fnFunction: any, oListener?: any): EventProvider;
			/**
			 * Attaches an event handler, called one time only, to the event with the given identifier.
			 * 
			 * When the event occurs, the handler function is called and the handler registration is automatically removed afterwards.
			 * @param sEventId The identifier of the event to listen for
			 * @param oData An object that will be passed to the handler along with the event object when the event is fired
			 * @param fnFunction The handler function to call when the event occurs. This function will be called in the context of the
			 *                       <code>oListener</code> instance (if present) or on the event provider instance. The event
			 *                       object ({@link sap.ui.base.Event}) is provided as first argument of the handler. Handlers must not change
			 *                       the content of the event. The second argument is the specified <code>oData</code> instance (if present).
			 * @param oListener The object that wants to be notified when the event occurs (<code>this</code> context within the
			 *                        handler function). If it is not specified, the handler function is called in the context of the event provider.(optional)
			 * @return Returns <code>this</code> to allow method chaining
			 */
			attachEventOnce(sEventId: string, oData: any, fnFunction: any, oListener?: any): EventProvider;
			/**
			 * Cleans up the internal structures and removes all event handlers.
			 * 
			 * The object must not be used anymore after destroy was called.
			 */
			destroy();
			/**
			 * Removes a previously attached event handler from the event with the given identifier.
			 * 
			 * The passed parameters must match those used for registration with {@link #attachEvent} beforehand.
			 * @param sEventId The identifier of the event to detach from
			 * @param fnFunction The handler function to detach from the event
			 * @param oListener The object that wanted to be notified when the event occurred(optional)
			 * @return Returns <code>this</code> to allow method chaining
			 */
			detachEvent(sEventId: string, fnFunction: any, oListener?: any): EventProvider;
			/**
			 * Creates a new subclass of class sap.ui.base.EventProvider with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Fires an {@link sap.ui.base.Event event} with the given settings and notifies all attached event handlers.
			 * @param sEventId The identifier of the event to fire
			 * @param mParameters The parameters which should be carried by the event(optional)
			 * @param bAllowPreventDefault Defines whether function <code>preventDefault</code> is supported on the fired event(optional)
			 * @param bEnableEventBubbling Defines whether event bubbling is enabled on the fired event. Set to <code>true</code> the event is also forwarded to the parent(s)
			 *                                   of the event provider ({@link #getEventingParent}) until the bubbling of the event is stopped or no parent is available anymore.(optional)
			 * @return Returns <code>this</code> to allow method chaining. When <code>preventDefault</code> is supported on the fired event
			 *                                             the function returns <code>true</code> if the default action should be executed, <code>false</code> otherwise.
			 */
			fireEvent(sEventId: string, mParameters?: any, bAllowPreventDefault?: boolean, bEnableEventBubbling?: boolean): EventProvider|boolean;
			/**
			 * Returns the parent in the eventing hierarchy of this object.
			 * 
			 * Per default this returns null, but if eventing is used in objects, which are hierarchically
			 * structured, this can be overwritten to make the object hierarchy visible to the eventing and
			 * enables the use of event bubbling within this object hierarchy.
			 * @return The parent event provider
			 */
			getEventingParent(): EventProvider;
			/**
			 * Returns whether there are any registered event handlers for the event with the given identifier.
			 * @param sEventId The identifier of the event
			 * @return Whether there are any registered event handlers
			 */
			hasListeners(sEventId: string): boolean;
			/**
			 * Returns a string representation of this object.
			 * 
			 * In case there is no class or id information, a simple static string is returned.
			 * Subclasses should override this method.
			 * @return A string description of this event provider
			 */
			toString(): string;
		}
	
		class Interface  {
			/**
			 * Constructs an instance of sap.ui.base.Interface which restricts access to methods marked as public.
			 * @param oObject the instance that needs an interface created
			 * @param aMethods the names of the methods, that should be available on this interface
			 */
			constructor(oObject: sap.ui.base.Object, aMethods: string[]);
		}
	
		class ManagedObject extends EventProvider {
			/**
			 * Constructs and initializes a managed object with the given <code>sId</code> and settings.
			 * 
			 * If the optional <code>mSettings</code> are given, they must be a simple object
			 * that defines values for properties, aggregations, associations or events keyed by their name.
			 * 
			 * <b>Valid Names and Value Ranges:</b>
			 * 
			 * The property (key) names supported in the object literal are exactly the (case sensitive)
			 * names documented in the JSDoc for the properties, aggregations, associations and events
			 * of the current class and its base classes. Note that for 0..n aggregations and associations this
			 * name usually is the plural name, whereas it is the singular name in case of 0..1 relations.
			 * 
			 * If a key name is ambiguous for a specific managed object class (e.g. a property has the same
			 * name as an event), then this method prefers property, aggregation, association and
			 * event in that order. To resolve such ambiguities, the keys can be prefixed with
			 * <code>aggregation:</code>, <code>association:</code> or <code>event:</code>
			 * (such keys containing a colon (':') must be quoted to be valid Javascript).
			 * 
			 * The possible values for a setting depend on its kind:
			 * <ul>
			 * <li>for simple properties, the value has to match the documented type of the property (no type conversion occurs)
			 * <li>for 0..1 aggregations, the value has to be an instance of the aggregated type
			 * <li>for 0..n aggregations, the value has to be an array of instances of the aggregated type or a single instance
			 * <li>for 0..1 associations, an instance of the associated type or an id (string) is accepted
			 * <li>for 0..n associations, an array of instances of the associated type or of Ids is accepted
			 * <li>for events either a function (event handler) is accepted or an array of length 2
			 *     where the first element is a function and the 2nd element is an object to invoke the method on.
			 * </ul>
			 * 
			 * Each subclass should document the name and type of its supported settings in its constructor documentation.
			 * 
			 * Besides the settings documented below, ManagedObject itself supports the following special settings:
			 * <ul>
			 * <li><code>id : <i>sap.ui.core.ID</i></code> an ID for the new instance. Some subclasses (Element, Component) require the id
			 *   to be unique in a specific scope (e.g. an Element Id must be unique across all Elements, a Component id must
			 *   be unique across all Components).
			 * <li><code>models : <i>object</i></code> a map of {@link sap.ui.model.Model} instances keyed by their model name (alias).
			 *   Each entry with key <i>k</i> in this object has the same effect as a call <code>this.setModel(models[k], k);</code>.</li>
			 * <li><code>bindingContexts : <i>object</i></code> a map of {@link sap.ui.model.Context} instances keyed by their model name.
			 *   Each entry with key <i>k</i> in this object has the same effect as a call <code>this.setBindingContext(bindingContexts[k], k);</code></li>
			 * <li><code>objectBindings : <i>object</i></code>  a map of binding paths keyed by the corresponding model name.
			 *   Each entry with key <i>k</i> in this object has the same effect as a call <code>this.bindObject(objectBindings[k], k);</code></li>
			 * </ul>
			 * @param sId id for the new managed object; generated automatically if no non-empty id is given
			 *      Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!(optional)
			 * @param mSettings Optional map/JSON-object with initial property values, aggregated objects etc. for the new object(optional)
			 * @param oScope Scope object for resolving string based type and formatter references in bindings.
			 *      When a scope object is given, <code>mSettings</code> cannot be omitted, at least <code>null</code> or an empty object literal must be given.(optional)
			 */
			constructor(sId?: string, mSettings?: any, oScope?: any);
			/**
			 * Adds some entity <code>oObject</code> to the aggregation identified by <code>sAggregationName</code>.
			 * 
			 * If the given object is not valid with regard to the aggregation (if it is not an instance
			 * of the type specified for that aggregation) or when the method is called for an aggregation
			 * of cardinality 0..1, then an Error is thrown (see {@link #validateAggregation}.
			 * 
			 * If the aggregation already has content, the new object will be added after the current content.
			 * If the new object was already contained in the aggregation, it will be moved to the end.
			 * 
			 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
			 * Applications or frameworks must not use this method to generically add an object to an aggregation.
			 * Use the concrete method add<i>XYZ</i> for aggregation 'XYZ' or the generic {@link #applySettings} instead.
			 * @param sAggregationName the string identifying the aggregation that <code>oObject</code> should be added to.
			 * @param oObject the object to add; if empty, nothing is added
			 * @param bSuppressInvalidate if true, this ManagedObject as well as the added child are not marked as changed(optional)
			 * @return Returns <code>this</code> to allow method chaining
			 */
			addAggregation(sAggregationName: string, oObject: ManagedObject, bSuppressInvalidate?: boolean): ManagedObject;
			/**
			 * Adds some object with the ID <code>sId</code> to the association identified by <code>sAssociationName</code> and
			 * marks this ManagedObject as changed.
			 * 
			 * This method does not avoid duplicates.
			 * 
			 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
			 * Applications or frameworks must not use this method to generically add an object to an association.
			 * Use the concrete method add<i>XYZ</i> for association 'XYZ' or the generic {@link #applySettings} instead.
			 * @param sAssociationName the string identifying the association the object should be added to.
			 * @param sId the ID of the ManagedObject object to add; if empty, nothing is added; if a <code>sap.ui.base.ManagedObject</code> is given, its ID is added
			 * @param bSuppressInvalidate if true, this managed object as well as the newly associated object are not marked as changed(optional)
			 * @return Returns <code>this</code> to allow method chaining
			 */
			addAssociation(sAssociationName: string, sId: string|ManagedObject, bSuppressInvalidate?: boolean): ManagedObject;
			/**
			 * Sets all the properties, aggregations, associations and event handlers as given in
			 * the object literal <code>mSettings</code>. If a property, aggregation, etc.
			 * is not listed in <code>mSettings</code>, then its value is not changed by this method.
			 * 
			 * For properties and 0..1 aggregations/associations, any given setting overwrites
			 * the current value. For 0..n aggregations, the given values are appended; event
			 * listeners are registered in addition to existing ones.
			 * 
			 * For the possible keys and values in <code>mSettings</code> see the general
			 * documentation in {@link sap.ui.base.ManagedObject} or the specific documentation
			 * of the constructor of the concrete managed object class.
			 * @param mSettings the settings to apply to this managed object
			 * @param oScope Scope object to resolve types and formatters(optional)
			 * @return Returns <code>this</code> to allow method chaining
			 */
			applySettings(mSettings: any, oScope?: any): ManagedObject;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>formatError</code> event of this <code>sap.ui.base.ManagedObject</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.base.ManagedObject</code> itself.
			 * 
			 * Fired when a new value for a bound property should have been propagated from the model,
			 * but formatting the value failed with an exception.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.base.ManagedObject</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachFormatError(oData: any, fnFunction: any, oListener?: any): ManagedObject;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>modelContextChange</code> event of this <code>sap.ui.base.ManagedObject</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.base.ManagedObject</code> itself.
			 * 
			 * Fired when models or contexts are changed on this object (either by calling setModel/setBindingContext or due to propagation)
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.base.ManagedObject</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachModelContextChange(oData: any, fnFunction: any, oListener?: any): ManagedObject;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>parseError</code> event of this <code>sap.ui.base.ManagedObject</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.base.ManagedObject</code> itself.
			 * 
			 * Fired when a new value for a bound property should have been propagated to the model,
			 * but parsing the value failed with an exception.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.base.ManagedObject</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachParseError(oData: any, fnFunction: any, oListener?: any): ManagedObject;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>validationError</code> event of this <code>sap.ui.base.ManagedObject</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.base.ManagedObject</code> itself.
			 * 
			 * Fired when a new value for a bound property should have been propagated to the model,
			 * but validating the value failed with an exception.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.base.ManagedObject</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachValidationError(oData: any, fnFunction: any, oListener?: any): ManagedObject;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>validationSuccess</code> event of this <code>sap.ui.base.ManagedObject</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.base.ManagedObject</code> itself.
			 * 
			 * Fired after a new value for a bound property has been propagated to the model.
			 * Only fired, when the binding uses a data type.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.base.ManagedObject</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachValidationSuccess(oData: any, fnFunction: any, oListener?: any): ManagedObject;
			/**
			 * Bind an aggregation to the model.
			 * 
			 * The bound aggregation will use the given template, clone it for each item
			 * which exists in the bound list and set the appropriate binding context.
			 * This is a generic method which can be used to bind any aggregation to the
			 * model. A managed object may flag aggregations in the metamodel with
			 * bindable="bindable" to get typed bind<i>Something</i> methods for those aggregations.
			 * @param sName the aggregation to bind
			 * @param oBindingInfo the binding info
			 * @return reference to the instance itself
			 */
			bindAggregation(sName: string, oBindingInfo: any): ManagedObject;
			/**
			 * Bind the object to the referenced entity in the model, which is used as the binding context
			 * to resolve bound properties or aggregations of the object itself and all of its children
			 * relatively to the given path.
			 * If a relative binding path is used, this will be applied whenever the parent context changes.
			 * @param vPath the binding path or an object with more detailed binding options
			 * @param mParameters map of additional parameters for this binding (only taken into account when vPath is a string in that case the properties described for vPath above are valid here).
			 * The supported parameters are listed in the corresponding model-specific implementation of <code>sap.ui.model.ContextBinding</code>.(optional)
			 * @return reference to the instance itself
			 */
			bindObject(vPath: string|any, mParameters?: any): ManagedObject;
			/**
			 * Bind a property to the model.
			 * The Setter for the given property will be called with the value retrieved
			 * from the data model.
			 * This is a generic method which can be used to bind any property to the
			 * model. A managed object may flag properties in the metamodel with
			 * bindable="bindable" to get typed bind methods for a property.
			 * A composite property binding which may have multiple paths (also known as Calculated Fields) can be declared using the parts parameter.
			 * Note a composite binding is read only (One Way).
			 * @param sName the name of the property
			 * @param oBindingInfo the binding information
			 * @return reference to the instance itself
			 */
			bindProperty(sName: string, oBindingInfo: any): ManagedObject;
			/**
			 * Clones a tree of objects starting with the object on which clone is called first (root object).
			 * 
			 * The ids within the newly created clone tree are derived from the original ids by appending
			 * the given <code>sIdSuffix</code> (if no suffix is given, one will be created; it will be
			 * unique across multiple clone calls).
			 * 
			 * The <code>oOptions</code> configuration object can have the following properties:
			 * <ul>
			 * <li>The boolean value <code>cloneChildren</code> specifies wether associations/aggregations will be cloned</li>
			 * <li>The boolean value <code>cloneBindings</code> specifies if bindings will be cloned</li>
			 * </ul>
			 * 
			 * For each cloned object the following settings are cloned based on the metadata of the object and the defined options:
			 * <ul>
			 * <li>all properties that are not bound. If cloneBinding is false even these properties will be cloned;
			 * the values are used by reference, they are not cloned</li>
			 * <li>all aggregated objects that are not bound. If cloneBinding is false even the ones that are bound will be cloned;
			 * they are all cloned recursively using the same <code>sIdSuffix</code></li>
			 * <li>all associated controls; when an association points to an object inside the cloned object tree,
			 *     then the cloned association will be modified to that it points to the clone of the target object.
			 *     When the association points to a managed object outside of the cloned object tree, then its
			 *     target won't be changed.</li>
			 * <li>all models set via setModel(); used by reference </li>
			 * <li>all property and aggregation bindings (if cloneBindings is true); the pure binding infos (path, model name) are
			 *     cloned, but all other information like template control or factory function,
			 *     data type or formatter function are copied by reference. The bindings themselves
			 *     are created anew as they are specific for the combination (object, property, model).
			 *     As a result, any later changes to a binding of the original object are not reflected
			 *     in the clone, but changes to e.g the type or template etc. are.</li>
			 * </ul>
			 * 
			 * Each clone is created by first collecting the above mentioned settings and then creating
			 * a new instance with the normal constructor function. As a result, any side effects of
			 * mutator methods (setProperty etc.) or init hooks are repeated during clone creation.
			 * There is no need to override <code>clone()</code> just to reproduce these internal settings!
			 * 
			 * Custom controls however can override <code>clone()</code> to implement additional clone steps.
			 * They usually will first call <code>clone()</code> on the super class and then modify the
			 * returned clone accordingly.
			 * 
			 * Applications <b>must never provide</b> the second parameter <code>aLocaleIds</code>.
			 * It is determined automatically for the root object (and its non-existance also serves as
			 * an indicator for the root object). Specifying it will break the implementation of <code>clone()</code>.
			 * @param sIdSuffix a suffix to be appended to the cloned object id(optional)
			 * @param aLocalIds an array of local IDs within the cloned hierarchy (internally used)(optional)
			 * @param oOptions configuration object(optional)
			 * @return reference to the newly created clone
			 */
			clone(sIdSuffix?: string, aLocalIds?: string[], oOptions?: any): ManagedObject;
			/**
			 * Creates a new ManagedObject from the given data.
			 * 
			 * If vData is a managed object already, that object is returned.
			 * If vData is an object (literal), then a new object is created with vData as settings.
			 * The type of the object is either determined by a "Type" entry in the vData or
			 * by a type information in the oKeyInfo object
			 * @param vData the data to create the object from
			 * @param oKeyInfo 
			 * @param oScope Scope object to resolve types and formatters in bindings(optional)
			 */
			create(vData: ManagedObject|any, oKeyInfo: any, oScope?: any);
			/**
			 * Cleans up the resources associated with this object and all its aggregated children.
			 * 
			 * After an object has been destroyed, it can no longer be used in!
			 * 
			 * Applications should call this method if they don't need the object any longer.
			 * @param bSuppressInvalidate if true, this ManagedObject is not marked as changed(optional)
			 */
			destroy(bSuppressInvalidate?: boolean);
			/**
			 * Destructor method for objects
			 * @note Overload from base type sap.ui.base.Object
			 */
			destroy();
			/**
			 * Destroys (all) the managed object(s) in the aggregation named <code>sAggregationName</code> and empties the
			 * aggregation. If the aggregation did contain any object, this ManagedObject is marked as changed.
			 * 
			 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
			 * Applications or frameworks must not use this method to generically destroy all objects in an aggregation.
			 * Use the concrete method destroy<i>XYZ</i> for aggregation 'XYZ' instead.
			 * @param sAggregationName the name of the aggregation
			 * @param bSuppressInvalidate if true, this ManagedObject is not marked as changed(optional)
			 * @return Returns <code>this</code> to allow method chaining
			 */
			destroyAggregation(sAggregationName: string, bSuppressInvalidate?: boolean): ManagedObject;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>formatError</code> event of this <code>sap.ui.base.ManagedObject</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachFormatError(fnFunction: any, oListener: any): ManagedObject;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>modelContextChange</code> event of this <code>sap.ui.base.ManagedObject</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachModelContextChange(fnFunction: any, oListener: any): ManagedObject;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>parseError</code> event of this <code>sap.ui.base.ManagedObject</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachParseError(fnFunction: any, oListener: any): ManagedObject;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>validationError</code> event of this <code>sap.ui.base.ManagedObject</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachValidationError(fnFunction: any, oListener: any): ManagedObject;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>validationSuccess</code> event of this <code>sap.ui.base.ManagedObject</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachValidationSuccess(fnFunction: any, oListener: any): ManagedObject;
			/**
			 * Defines a new subclass of ManagedObject with name <code>sClassName</code> and enriches it with
			 * the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> can contain the same information that {@link sap.ui.base.Object.extend} already accepts,
			 * plus the following new properties in the 'metadata' object literal:
			 * 
			 * <ul>
			 * <li><code>library : <i>string</i></code></li>
			 * <li><code>properties : <i>object</i></code></li>
			 * <li><code>defaultProperty : <i>string</i></code></li>
			 * <li><code>aggregations : <i>object</i></code></li>
			 * <li><code>defaultAggregation : <i>string</i></code></li>
			 * <li><code>associations : <i>object</i></code></li>
			 * <li><code>events : <i>object</i></code></li>
			 * <li><code>specialSettings : <i>object</i></code>// this one is still experimental and not for public usage!</li>
			 * </ul>
			 * 
			 * Each of these properties is explained in more detail lateron.
			 * 
			 * Example:
			 * <pre>
			 * ManagedObect.extend('sap.mylib.MyClass', {
			 *   metadata : {
			 *     library: 'sap.mylib',
			 *     properties : {
			 *       value: 'string',
			 *       width: 'sap.ui.core.CSSSize',
			 *       height: { type: 'sap.ui.core.CSSSize', defaultValue: '100%' }
			 *     },
			 *     defaultProperty : 'value',
			 *     aggregations : {
			 *       header : { type: 'sap.mylib.FancyHeader', multiple : false }
			 *       items : 'sap.ui.core.Control'
			 *     },
			 *     defaultAggregation : 'items',
			 *     associations : {
			 *       initiallyFocused : { type: 'sap.ui.core.Control' }
			 *     },
			 *     events: {
			 *       beforeOpen : {
			 *         parameters : {
			 *           opener : 'sap.ui.core.Control'
			 *         }
			 *       }
			 *     },
			 *   },
			 * 
			 *   init: function() {
			 *   }
			 * 
			 * }); // end of 'extend' call
			 * </pre>
			 * 
			 * Detailed explanation of properties<br>
			 * 
			 * 
			 * <b>'library'</b> : <i>string</i><br>
			 * Name of the library that the new subclass should belong to. If the subclass is a control or element, it will
			 * automatically register with that library so that authoring tools can discover it.
			 * By convention, the name of the subclass should have the library name as a prefix, e.g. 'sap.ui.commons.Panel' belongs
			 * to library 'sap.ui.commons'.
			 * 
			 * 
			 * <b>'properties'</b> : <i>object</i><br>
			 * An object literal whose properties each define a new managed property in the ManagedObject subclass.
			 * The value can either be a simple string which then will be assumed to be the type of the new property or it can be
			 * an object literal with the following properties
			 * <ul>
			 * <li><code>type: <i>string</i></code> type of the new property. Must either be one of the built-in types 'string', 'boolean', 'int', 'float', 'object' or 'any', or a
			 *     type created and registered with {@link sap.ui.base.DataType.createType} or an array type based on one of the previous types.</li>
			 * <li><code>group: ...</code></li>
			 * <li><code>defaultValue: <i>any</i></code> the default value for the property or null if there is no defaultValue.</li>
			 * <li><code>bindable: <i>boolean|string</i></code> (either can be omitted or set to the boolean value <code>true</code> or the magic string 'bindable')
			 *     If set to <code>true</code> or 'bindable', additional named methods <code>bind<i>Name</i></code> and <code>unbind<i>Name</i></code> are generated as convenience.
			 *     Despite its name, setting this flag is not mandatory to make the managed property bindable. The generic methods {@link #bindProperty} and
			 *     {@link #unbindProperty} can always be used. </li>
			 * </ul>
			 * Property names should use camelCase notation, start with a lowercase letter and only use characters from the set [a-zA-Z0-9_$].
			 * If an aggregation in the literal is preceded by a JSDoc comment (doclet) and if the UI5 plugin and template are used for JSDoc3 generation, the doclet will
			 * be used as generic documentation of the aggregation.
			 * 
			 * For each public property 'foo', the following methods will be created by the "extend" method and will be added to the
			 * prototype of the subclass:
			 * <ul>
			 * <li>getFoo() - returns the current value of property 'foo'. Internally calls {@link #getProperty}
			 * <li>setFoo(v) - sets 'v' as the new value of property 'foo'. Internally calls {@link #setProperty}
			 * <li>bindFoo(c) - (only if property was defined to be 'bindable'): convenience function that wraps {@link #bindProperty}
			 * <li>unbindFoo() - (only if property was defined to be 'bindable'): convenience function that wraps {@link #unbindProperty}
			 * </ul>
			 * 
			 * 
			 * <b>'defaultProperty'</b> : <i>string</i><br>
			 * When specified, the default property must match the name of one of the properties defined for the new subclass (either own or inherited).
			 * The named property can be used to identify the main property to be used for bound data. E.g. the value property of a field control.
			 * 
			 * 
			 * <b>'aggregations'</b> : <i>object</i><br>
			 * An object literal whose properties each define a new aggregation in the ManagedObject subclass.
			 * The value can either be a simple string which then will be assumed to be the type of the new aggregation or it can be
			 * an object literal with the following properties
			 * <ul>
			 * <li><code>type: <i>string</i></code> type of the new aggregation. must be the full global name of a ManagedObject subclass (in dot notation, e.g. 'sap.m.Button')</li>
			 * <li><code>[multiple]: <i>boolean</i></code> whether the aggregation is a 0..1 (false) or a 0..n aggregation (true), defaults to true </li>
			 * <li><code>[singularName]: <i>string</i></code>. Singular name for 0..n aggregations. For 0..n aggregations the name by convention should be the plural name.
			 *     Methods affecting multiple objects in an aggregation will use the plural name (e.g. getItems(), whereas methods that deal with a single object will use
			 *     the singular name (e.g. addItem). The framework knows a set of common rules for building plural form of English nouns and uses these rules to determine
			 *     a singular name on its own. if that name is wrong, a singluarName can be specified with this property. </li>
			 * <li>[visibility]: <i>string</i></code> either 'hidden' or 'public', defaults to 'public'. Aggregations that belong to the API of a class must be 'public' whereas
			 *     'hidden' aggregations typically are used for the implementation of composite classes (e.g. composite controls) </li>
			 * <li><code>bindable: <i>boolean|string</i></code> (either can be omitted or set to the boolean value <code>true</code> or the magic string 'bindable')
			 *     If set to <code>true</code> or 'bindable', additional named methods <code>bind<i>Name</i></code> and <code>unbind<i>Name</i></code> are generated as convenience.
			 *     Despite its name, setting this flag is not mandatory to make the managed aggregation bindable. The generic methods {@link #bindAggregation} and
			 *     {@link #unbindAggregation} can always be used. </li>
			 * </ul>
			 * Aggregation names should use camelCase notation, start with a lowercase letter and only use characters from the set [a-zA-Z0-9_$].
			 * The name for a hidden aggregations might start with an underscore.
			 * If an aggregation in the literal is preceded by a JSDoc comment (doclet) and if the UI5 plugin and template are used for JSDoc3 generation, the doclet will
			 * be used as generic documentation of the aggregation.
			 * 
			 * For each public aggregation 'item' of cardinality 0..1, the following methods will be created by the "extend" method and will be added to the
			 * prototype of the subclass:
			 * <ul>
			 * <li>getItem() - returns the current value of aggregation 'item'. Internally calls {@link #getAggregation} with a default value of <code>undefined</code></li>
			 * <li>setItem(o) - sets 'o' as the new aggregated object in aggregation 'item'. Internally calls {@link #setAggregation}</li>
			 * <li>destroyItem(o) - destroy a currently aggregated object in aggregation 'item' and clears the aggregation. Internally calls {@link #destroyAggregation}</li>
			 * <li>bindItem(c) - (only if aggregation was defined to be 'bindable'): convenience function that wraps {@link #bindAggregation}</li>
			 * <li>unbindItem() - (only if aggregation was defined to be 'bindable'): convenience function that wraps {@link #unbindAggregation}</li>
			 * </ul>
			 * For a public aggregation 'items' of cardinality 0..n, the following methods will be created:
			 * <ul>
			 * <li>getItems() - returns an array with the objects contained in aggregation 'items'. Internally calls {@link #getAggregation} with a default value of <code>[]</code></li>
			 * <li>addItem(o) - adds an object as last element in the aggregation 'items'. Internally calls {@link #addAggregation}</li>
			 * <li>insertItem(o,p) - inserts an object into the aggregation 'items'. Internally calls {@link #insertAggregation}</li>
			 * <li>removeItem(v) - removes an object from the aggregation 'items'. Internally calls {@link #removeAggregation}</li>
			 * <li>removeItems() - removes all object from the aggregation 'items'. Internally calls {@link #removeAllAggregation}</li>
			 * <li>destroyItems() - destroy all currently aggregated objects in aggregation 'items' and clears the aggregation. Internally calls {@link #destroyAggregation}</li>
			 * <li>bindItems(c) - (only if aggregation was defined to be 'bindable'): convenience function that wraps {@link #bindAggregation}</li>
			 * <li>unbindItems() - (only if aggregation was defined to be 'bindable'): convenience function that wraps {@link #unbindAggregation}</li>
			 * </ul>
			 * For private or hidden aggregations, no methods are generated.
			 * 
			 * 
			 * <b>'defaultAggregation'</b> : <i>string</i><br>
			 * When specified, the default aggregation must match the name of one of the aggregations defined for the new subclass (either own or inherited).
			 * The named aggregation will be used in contexts where no aggregation is specified. E,g. when an object in an XMLView embeds other objects without
			 * naming an aggregation, as in the following example:
			 * <pre>
			 *  &lt;!-- assuming the defaultAggregation for Dialog is 'content' -->
			 *  &lt;Dialog>
			 *    &lt;Text/>
			 *    &lt;Button/>
			 *  &lt;/Dialog>
			 * </pre>
			 * 
			 * 
			 * <b>'associations'</b> : <i>object</i><br>
			 * An object literal whose properties each define a new association of the ManagedObject subclass.
			 * The value can either be a simple string which then will be assumed to be the type of the new association or it can be
			 * an object literal with the following properties
			 * <ul>
			 * <li><code>type: <i>string</i></code> type of the new association</li>
			 * <li><code>multiple: <i>boolean</i></code> whether the association is a 0..1 (false) or a 0..n association (true), defaults to false(1) for associations</li>
			 * <li><code>[singularName]: <i>string</i></code>. Singular name for 0..n associations. For 0..n associations the name by convention should be the plural name.
			 *     Methods affecting multiple objects in an association will use the plural name (e.g. getItems(), whereas methods that deal with a single object will use
			 *     the singular name (e.g. addItem). The framework knows a set of common rules for building plural form of English nouns and uses these rules to determine
			 *     a singular name on its own. if that name is wrong, a singluarName can be specified with this property.</li>
			 * </ul>
			 * Association names should use camelCase notation, start with a lowercase letter and only use characters from the set [a-zA-Z0-9_$].
			 * If an association in the literal is preceded by a JSDoc comment (doclet) and if the UI5 plugin and template are used for JSDoc3 generation, the doclet will
			 * be used as generic documentation of the association.
			 * 
			 * For each association 'ref' of cardinality 0..1, the following methods will be created by the "extend" method and will be added to the
			 * prototype of the subclass:
			 * <ul>
			 * <li>getRef() - returns the current value of association 'item'. Internally calls {@link #getAssociation} with a default value of <code>undefined</code></li>
			 * <li>setRef(o) - sets 'o' as the new associated object in association 'item'. Internally calls {@link #setAssociation}</li>
			 * </ul>
			 * For a public association 'refs' of cardinality 0..n, the following methods will be created:
			 * <ul>
			 * <li>getRefs() - returns an array with the objects contained in association 'items'. Internally calls {@link #getAssociation} with a default value of <code>[]</code></li>
			 * <li>addRef(o) - adds an object as last element in the association 'items'. Internally calls {@link #addAssociation}</li>
			 * <li>removeRef(v) - removes an object from the association 'items'. Internally calls {@link #removeAssociation}</li>
			 * <li>removeAllRefs() - removes all objects from the association 'items'. Internally calls {@link #removeAllAssociation}</li>
			 * </ul>
			 * 
			 * 
			 * <b>'events'</b> : <i>object</i><br>
			 * An object literal whose properties each define a new event of the ManagedObject subclass.
			 * The value can either be a simple string which then will be assumed to be the type of the new association or it can be
			 * an object literal with the following properties
			 * <ul>
			 * <li><code>allowPreventDefault: <i>boolean</i></code> whether the event allows to prevented the default behavior of the event source</li>
			 * <li><code>parameters: <i>object</i></code> an object literal that describes the parameters of this event. </li>
			 * </ul>
			 * Event names should use camelCase notation, start with a lowercase letter and only use characters from the set [a-zA-Z0-9_$].
			 * If an event in the literal is preceded by a JSDoc comment (doclet) and if the UI5 plugin and template are used for JSDoc3 generation, the doclet will be used
			 * as generic documentation of the event.
			 * 
			 * For each event 'Some' the following methods will be created by the "extend" method and will be added to the
			 * prototype of the subclass:
			 * <ul>
			 * <li>attachSome(fn,o) - registers a listener for the event. Internally calls {@link #attachEvent}</li>
			 * <li>detachSome(fn,o) - deregisters a listener for the event. Internally calls {@link #detachEvent}</li>
			 * <li>fireSome() - fire the event. Internally calls {@link #fireEvent}</li>
			 * </ul>
			 * 
			 * 
			 * <b>'specialSettings'</b> : <i>object</i><br>
			 * Special settings are an experimental feature and MUST NOT BE USED by controls or applications outside of the sap.ui.core project.
			 * @param sClassName name of the class to be created
			 * @param oClassInfo object literal with informations about the class(optional)
			 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.core.ManagedObjectMetadata.(optional)
			 * @return the created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Searches and returns an array of child elements and controls which are
			 * referenced within an aggregation or aggregations of child elements/controls.
			 * This can be either done recursive or not. Optionally a condition function can be passed that
			 * returns true if the object should be added to the array.
			 * <br>
			 * <b>Take care: this operation might be expensive.</b>
			 * @param bRecursive true, if all nested children should be returned.
			 * @param fnCondition if given, the object is passed as a parameter to the.
			 * @return array of child elements and controls
			 */
			findAggregatedObjects(bRecursive: boolean, fnCondition: boolean): ManagedObject[];
			/**
			 * Fires event <code>formatError</code> to attached listeners.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>element</code> of type <code>sap.ui.base.ManagedObject</code>ManagedObject instance whose property should have received the model update.</li>
			 * <li><code>property</code> of type <code>string</code>Name of the property for which the binding should have been updated.</li>
			 * <li><code>type</code> of type <code>sap.ui.model.Type</code>Data type used in the binding (if any).</li>
			 * <li><code>newValue</code> of type <code>any</code>New value (model representation) as propagated from the model.</li>
			 * <li><code>oldValue</code> of type <code>any</code>Old value (external representation) as previously stored in the ManagedObject.</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireFormatError(mArguments?: any): ManagedObject;
			/**
			 * Fires event <code>modelContextChange</code> to attached listeners.
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireModelContextChange(mArguments?: any): ManagedObject;
			/**
			 * Fires event <code>parseError</code> to attached listeners.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>element</code> of type <code>sap.ui.base.ManagedObject</code>ManagedObject instance whose property initiated the model update.</li>
			 * <li><code>property</code> of type <code>string</code>Name of the property for which the bound model property should have been been updated.</li>
			 * <li><code>type</code> of type <code>sap.ui.model.Type</code>Data type used in the binding.</li>
			 * <li><code>newValue</code> of type <code>any</code>New value (external representation) as parsed by the binding.</li>
			 * <li><code>oldValue</code> of type <code>any</code>Old value (external representation) as previously stored in the ManagedObject.</li>
			 * <li><code>message</code> of type <code>string</code>Localized message describing the parse error</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireParseError(mArguments?: any): ManagedObject;
			/**
			 * Fires event <code>validationError</code> to attached listeners.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>element</code> of type <code>sap.ui.base.ManagedObject</code>ManagedObject instance whose property initiated the model update.</li>
			 * <li><code>property</code> of type <code>string</code>Name of the property for which the bound model property should have been been updated.</li>
			 * <li><code>type</code> of type <code>sap.ui.model.Type</code>Data type used in the binding.</li>
			 * <li><code>newValue</code> of type <code>any</code>New value (external representation) as parsed and validated by the binding.</li>
			 * <li><code>oldValue</code> of type <code>any</code>Old value (external representation) as previously stored in the ManagedObject.</li>
			 * <li><code>message</code> of type <code>string</code>Localized message describing the validation issues</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireValidationError(mArguments?: any): ManagedObject;
			/**
			 * Fires event <code>validationSuccess</code> to attached listeners.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>element</code> of type <code>sap.ui.base.ManagedObject</code>ManagedObject instance whose property initiated the model update.</li>
			 * <li><code>property</code> of type <code>string</code>Name of the property for which the bound model property has been updated.</li>
			 * <li><code>type</code> of type <code>sap.ui.model.Type</code>Data type used in the binding.</li>
			 * <li><code>newValue</code> of type <code>any</code>New value (external representation) as propagated to the model.
			 * 
			 * <b>Note: </b>the model might modify (normalize) the value again and this modification
			 * will be stored in the ManagedObject. The 'newValue' parameter of this event contains
			 * the value <b>before</b> such a normalization.</li>
			 * <li><code>oldValue</code> of type <code>any</code>Old value (external representation) as previously stored in the ManagedObject.</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireValidationSuccess(mArguments?: any): ManagedObject;
			/**
			 * Returns the aggregated object(s) for the named aggregation of this ManagedObject.
			 * 
			 * If the aggregation does not contain any objects(s), the given <code>oDefaultForCreation</code>
			 * (or <code>null</code>) is set as new value of the aggregation and returned to the caller.
			 * 
			 * <b>Note:</b> the need to specify a default value and the fact that it is stored as
			 * new value of a so far empty aggregation is recognized as a shortcoming of this API
			 * but can no longer be changed for compatibility reasons.
			 * 
			 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
			 * Applications or frameworks must not use this method to generically read the content of an aggregation.
			 * Use the concrete method get<i>XYZ</i> for aggregation 'XYZ' instead.
			 * @param sAggregationName the name of the aggregation
			 * @param oDefaultForCreation the object that is used in case the current aggregation is empty
			 * @return the aggregation array in case of 0..n-aggregations or the managed object or null in case of 0..1-aggregations
			 */
			getAggregation(sAggregationName: string, oDefaultForCreation: ManagedObject|any[]): ManagedObject|any[];
			/**
			 * Returns the content of the association wit hthe given name.
			 * 
			 * For associations of cardinality 0..1, a single string with the ID of an associated
			 * object is returned (if any). For cardinality 0..n, an array with the IDs of the
			 * associated objects is returned.
			 * 
			 * If the association does not contain any objects(s), the given <code>oDefaultForCreation</code>
			 * is set as new value of the association and returned to the caller. The only supported values for
			 * <code>oDefaultForCreation</code> are <code>null</code> and <code>undefined</code> in the case of
			 * cardinality 0..1 and <code>null</code>, <code>undefined</code> or an empty array (<code>[]</code>)
			 * in case of cardinality 0..n. If the argument is omitted, <code>null</code> is used independently
			 * from the cardinality.
			 * 
			 * <b>Note:</b> the need to specify a default value and the fact that it is stored as
			 * new value of a so far empty association is recognized as a shortcoming of this API
			 * but can no longer be changed for compatibility reasons.
			 * 
			 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
			 * Applications or frameworks must not use this method to generically retrieve the content of an association.
			 * Use the concrete method get<i>XYZ</i> for association 'XYZ' instead.
			 * @param sAssociationName the name of the association
			 * @param oDefaultForCreation the object that is used in case the current aggregation is empty (only null or empty array allowed)
			 * @return the ID of the associated managed object or an array of such IDs; may be null if the association has not been populated
			 */
			getAssociation(sAssociationName: string, oDefaultForCreation: any): string|string[];
			/**
			 * Get the binding object for a specific aggregation/property
			 * @param sName the name of the property or aggregation
			 * @return the binding for the given name
			 */
			getBinding(sName: string): sap.ui.model.Binding;
			/**
			 * Get the binding context of this object for the given model name.
			 * 
			 * If the object does not have a binding context set on itself and has no own Model set,
			 * it will use the first binding context defined in its parent hierarchy.
			 * 
			 * Note: to be compatible with future versions of this API, applications must not use the value <code>null</code>,
			 * the empty string <code>""</code> or the string literals <code>"null"</code> or <code>"undefined"</code> as model name.
			 * 
			 * Note: A ManagedObject inherits binding contexts from the Core only when it is a descendant of an UIArea.
			 * @param sModelName the name of the model or <code>undefined</code>(optional)
			 * @return oContext The binding context of this object
			 */
			getBindingContext(sModelName?: string): sap.ui.model.Context;
			/**
			 * Returns the binding infos for the given property or aggregation. The binding info contains information about path, binding object, format options,
			 * sorter, filter etc. for the property or aggregation.
			 * @param sName the name of the property or aggregation
			 * @return the binding info object, containing at least a path property
			 *                   and, dependant of the binding type, additional properties
			 */
			getBindingInfo(sName: string): any;
			/**
			 * Get the binding path for a specific aggregation/property
			 * @param sName the name of the property or aggregation
			 * @return the binding path for the given name
			 */
			getBindingPath(sName: string): string;
			/**
			 * Returns the parent managed object as new eventing parent to enable control event bubbling
			 * or <code>null</code> if this object hasn't been added to a parent yet.
			 * @return the parent event provider
			 */
			getEventingParent(): EventProvider;
			/**
			 * Returns the object's Id.
			 * @return the objects's Id.
			 */
			getId(): string;
			/**
			 * Get the model to be used for data bindings with the given model name.
			 * If the object does not have a model set on itself, it will use the first
			 * model defined in its parent hierarchy.
			 * 
			 * The name can be omitted to reference the default model or it must be a non-empty string.
			 * 
			 * Note: to be compatible with future versions of this API, applications must not use the value <code>null</code>,
			 * the empty string <code>""</code> or the string literals <code>"null"</code> or <code>"undefined"</code> as model name.
			 * @param sName name of the model to be retrieved(optional)
			 * @return oModel
			 */
			getModel(sName?: string|any): sap.ui.model.Model;
			/**
			 * Get the object binding object for a specific model
			 * @param sModelName the name of the model
			 * @return the element binding for the given model name
			 */
			getObjectBinding(sModelName: string): sap.ui.model.Binding;
			/**
			 * Returns the origin info for the value of the given property.
			 * 
			 * The origin info might contain additional information for translatable
			 * texts. The bookkeeping of this information is not active by default and must be
			 * activated by configuration. Even then, it might not be present for all properties
			 * and their values depending on where the value came form.
			 * @param sPropertyName the name of the property
			 * @return a map of properties describing the origin of this property value or null
			 */
			getOriginInfo(sPropertyName: string): any;
			/**
			 * Returns the parent managed object or <code>null</code> if this object hasn't been added to a parent yet.
			 * @return The parent managed object or <code>null</code>
			 */
			getParent(): ManagedObject;
			/**
			 * Returns the value for the property with the given <code>sPropertyName</code>.
			 * 
			 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
			 * Applications or frameworks must not use this method to generically retrieve the value of a property.
			 * Use the concrete method get<i>XYZ</i> for property 'XYZ' instead.
			 * @param sPropertyName the name of the property
			 * @return the value of the property
			 */
			getProperty(sPropertyName: string): any;
			/**
			 * Check if any model is set to the ManagedObject or to one of its parents (including UIArea and Core).
			 * 
			 * Note: A ManagedObject inherits models from the Core only when it is a descendant of an UIArea.
			 * @return whether a model reference exists or not
			 */
			hasModel(): boolean;
			/**
			 * Searches for the provided ManagedObject in the named aggregation and returns its
			 * 0-based index if found, or -1 otherwise. Returns -2 if the given named aggregation
			 * is of cardinality 0..1 and doesn't reference the given object.
			 * 
			 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
			 * Applications or frameworks must not use this method to generically determine the position of an object in an aggregation.
			 * Use the concrete method indexOf<i>XYZ</i> for aggregation 'XYZ' instead.
			 * @param sAggregationName the name of the aggregation
			 * @param oObject the ManagedObject whose index is looked for.
			 * @return the index of the provided managed object in the aggregation.
			 */
			indexOfAggregation(sAggregationName: string, oObject: ManagedObject): number;
			/**
			 * Inserts managed object <code>oObject</code> to the aggregation named <code>sAggregationName</code> at
			 * position <code>iIndex</code>.
			 * 
			 * If the given object is not valid with regard to the aggregation (if it is not an instance
			 * of the type specified for that aggregation) or when the method is called for an aggregation
			 * of cardinality 0..1, then an Error is thrown (see {@link #validateAggregation}.
			 * 
			 * If the given index is out of range with respect to the current content of the aggregation,
			 * it is clipped to that range (0 for iIndex < 0, n for iIndex > n).
			 * 
			 * Please note that this method does not work as expected when an object is added
			 * that is already part of the aggregation. In order to change the index of an object
			 * inside an aggregation, first remove it, then insert it again.
			 * 
			 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
			 * Applications or frameworks must not use this method to generically insert an object into an aggregation.
			 * Use the concrete method insert<i>XYZ</i> for aggregation 'XYZ' instead.
			 * @param sAggregationName the string identifying the aggregation the managed object <code>oObject</code>
			 *            should be inserted into.
			 * @param oObject the ManagedObject to add; if empty, nothing is inserted.
			 * @param iIndex the <code>0</code>-based index the managed object should be inserted at; for a negative
			 *            value <code>iIndex</code>, <code>oObject</code> is inserted at position 0; for a value
			 *            greater than the current size of the aggregation, <code>oObject</code> is inserted at
			 *            the last position
			 * @param bSuppressInvalidate if true, this ManagedObject as well as the added child are not marked as changed(optional)
			 * @return Returns <code>this</code> to allow method chaining
			 */
			insertAggregation(sAggregationName: string, oObject: ManagedObject, iIndex: number, bSuppressInvalidate?: boolean): ManagedObject;
			/**
			 * This triggers rerendering of itself and its children.<br/> As <code>sap.ui.base.ManagedObject</code> "bubbles up" the
			 * invalidate, changes to child-<code>Elements</code> will also result in rerendering of the whole sub tree.
			 */
			invalidate();
			/**
			 * Find out whether a property or aggregation is bound
			 * @param sName the name of the property or aggregation
			 * @return whether a binding exists for the given name
			 */
			isBound(sName: string): boolean;
			/**
			 * Returns whether rerendering is currently suppressed on this ManagedObject
			 * @return boolean
			 */
			isInvalidateSuppressed();
			/**
			 * This method is used internally and should only be overridden by a tree managed object which utilizes the tree binding.
			 *  In this case and if the aggregation is a tree node the overridden method should then return true.
			 *  If true is returned the tree binding will be used instead of the list binding.
			 * @param sName the aggregation to bind (e.g. nodes for a tree managed object)
			 * @return whether tree binding should be used or list binding. Default is false. Override method to change this behavior.
			 */
			isTreeBinding(sName: string): boolean;
			/**
			 * Generic method which is called, whenever messages for this object exists.
			 * @param sName The property name
			 * @param aMessages The messages
			 */
			propagateMessages(sName: string, aMessages: any[]);
			/**
			 * Removes an object from the aggregation named <code>sAggregationName</code> with cardinality 0..n.
			 * 
			 * The removed object is not destroyed nor is it marked as changed.
			 * 
			 * If the given object is found in the aggreation, it is removed, it's parent relationship
			 * is unset and this ManagedObject is marked as changed. The removed object is returned as
			 * result of this method. If the object could not be found, <code>undefined</code> is returned.
			 * 
			 * This method must only be called for aggregations of cardinality 0..n. The only way to remove objects
			 * from a 0..1 aggregation is to set a <code>null</code> value for them.
			 * 
			 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
			 * Applications or frameworks must not use this method to generically remove an object from an aggregation.
			 * Use the concrete method remove<i>XYZ</i> for aggregation 'XYZ' instead.
			 * @param sAggregationName the string identifying the aggregation that the given object should be removed from
			 * @param vObject the position or ID of the ManagedObject that should be removed or that ManagedObject itself;
			 *            if <code>vObject</code> is invalid, a negative value or a value greater or equal than the current size
			 *            of the aggregation, nothing is removed.
			 * @param bSuppressInvalidate if true, this ManagedObject is not marked as changed(optional)
			 * @return the removed object or null
			 */
			removeAggregation(sAggregationName: string, vObject: number|string|ManagedObject, bSuppressInvalidate?: boolean): ManagedObject;
			/**
			 * Removes all objects from the 0..n-aggregation named <code>sAggregationName</code>.
			 * 
			 * The removed objects are not destroyed nor are they marked as changed.
			 * 
			 * Additionally, it clears the parent relationship of all removed objects, marks this
			 * ManagedObject as changed and returns an array with the removed objects.
			 * 
			 * If the aggregation did not contain any objects, an empty array is returned and this
			 * ManagedObject is not marked as changed.
			 * 
			 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
			 * Applications or frameworks must not use this method to generically remove all objects from an aggregation.
			 * Use the concrete method removeAll<i>XYZ</i> for aggregation 'XYZ' instead.
			 * @param sAggregationName the name of the aggregation
			 * @param bSuppressInvalidate if true, this ManagedObject is not marked as changed(optional)
			 * @return an array of the removed elements (might be empty)
			 */
			removeAllAggregation(sAggregationName: string, bSuppressInvalidate?: boolean): any[];
			/**
			 * Removes all the objects in the 0..n-association named <code>sAssociationName</code> and returns an array
			 * with their IDs. This ManagedObject is marked as changed, if the association contained any objects.
			 * 
			 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
			 * Applications or frameworks must not use this method to generically remove all object from an association.
			 * Use the concrete method removeAll<i>XYZ</i> for association 'XYZ' instead.
			 * @param sAssociationName the name of the association
			 * @param bSuppressInvalidate if true, this ManagedObject is not marked as changed(optional)
			 * @return an array with the IDs of the removed objects (might be empty)
			 */
			removeAllAssociation(sAssociationName: string, bSuppressInvalidate?: boolean): any[];
			/**
			 * Removes a ManagedObject from the association named <code>sAssociationName</code>.
			 * 
			 * If an object is removed, the Id of that object is returned and this ManagedObject is
			 * marked as changed. Otherwise <code>undefined</code> is returned.
			 * 
			 * If the same object was added multiple times to the same association, only a single
			 * occurence of it will be removed by this method. If the object is not found or if the
			 * parameter can't be interpreted neither as a ManagedObject (or id) nor as an index in
			 * the assocation, nothing will be removed. The same is true if an index is given and if
			 * that index is out of range for the association.
			 * 
			 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
			 * Applications or frameworks must not use this method to generically remove an object from an association.
			 * Use the concrete method remove<i>XYZ</i> for association 'XYZ' instead.
			 * @param sAssociationName the string identifying the association the ManagedObject should be removed from.
			 * @param vObject the position or ID of the ManagedObject to remove or the ManagedObject itself; if <code>vObject</code> is invalid input,
			 *            a negative value or a value greater or equal than the current size of the association, nothing is removed
			 * @param bSuppressInvalidate if true, the managed object is not marked as changed(optional)
			 * @return the ID of the removed ManagedObject or null
			 */
			removeAssociation(sAssociationName: string, vObject: number|string|ManagedObject, bSuppressInvalidate?: boolean);
			/**
			 * Sets a new object in the named 0..1 aggregation of this ManagedObject and
			 * marks this ManagedObject as changed.
			 * 
			 * If the given object is not valid with regard to the aggregation (if it is not an instance
			 * of the type specified for that aggregation) or when the method is called for an aggregation
			 * of cardinality 0..n, then an Error is thrown (see {@link #validateAggregation}.
			 * 
			 * If the new object is the same as the currently aggregated object, then the internal state
			 * is not modified and this ManagedObject is not marked as changed.
			 * 
			 * If the given object is different, the parent of a previously aggregated object is cleared
			 * (it must have been this ManagedObject before), the parent of the given object is set to this
			 * ManagedObject and {@link #invalidate} is called for this object.
			 * 
			 * Note that this method does neither return nor destroy the previously aggregated object.
			 * This behavior is inherited by named set methods (see below) in subclasses.
			 * To avoid memory leaks, applications therefore should first get the aggregated object,
			 * keep a reference to it or destroy it, depending on their needs, and only then set a new
			 * object.
			 * 
			 * Note that ManagedObject only implements a single level of change tracking: if a first
			 * call to setAggregation recognizes a change, 'invalidate' is called. If another call to
			 * setAggregation reverts that change, invalidate() will be called again, the new status
			 * is not recognized as being 'clean' again.
			 * 
			 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
			 * Applications or frameworks must not use this method to generically set an object in an aggregation.
			 * Use the concrete method set<i>XYZ</i> for aggregation 'XYZ' or the generic {@link #applySettings} instead.
			 * @param sAggregationName name of an 0..1 aggregation
			 * @param oObject the managed object that is set as aggregated object
			 * @param bSuppressInvalidate if true, this ManagedObject is not marked as changed(optional)
			 * @return Returns <code>this</code> to allow method chaining
			 */
			setAggregation(sAggregationName: string, oObject: any, bSuppressInvalidate?: boolean): ManagedObject;
			/**
			 * Sets the associatied object for the given managed association of cardinality '0..1' and
			 * marks this ManagedObject as changed.
			 * 
			 * The associated object can either be given by itself or by its id. If <code>null</code> or
			 * <code>undefined</code> is given, the association is cleared.
			 * 
			 * <b>Note:</b> This method is a low-level API as described in <a href="#lowlevelapi">the class documentation</a>.
			 * Applications or frameworks must not use this method to generically set an object in an association.
			 * Use the concrete method set<i>XYZ</i> for association 'XYZ' or the generic {@link #applySettings} instead.
			 * @param sAssociationName name of the association
			 * @param sId the ID of the managed object that is set as an association, or the managed object itself or null
			 * @param bSuppressInvalidate if true, the managed objects invalidate method is not called(optional)
			 * @return Returns <code>this</code> to allow method chaining
			 */
			setAssociation(sAssociationName: string, sId: string|ManagedObject, bSuppressInvalidate?: boolean): ManagedObject;
			/**
			 * Set the binding context for this ManagedObject for the model with the given name.
			 * 
			 * Note: to be compatible with future versions of this API, applications must not use the value <code>null</code>,
			 * the empty string <code>""</code> or the string literals <code>"null"</code> or <code>"undefined"</code> as model name.
			 * 
			 * Note: A ManagedObject inherits binding contexts from the Core only when it is a descendant of an UIArea.
			 * @param oContext the new binding context for this object
			 * @param sModelName the name of the model to set the context for or <code>undefined</code>(optional)
			 * @return reference to the instance itself
			 */
			setBindingContext(oContext: any, sModelName?: string): ManagedObject;
			/**
			 * Sets or unsets a model for the given model name for this ManagedObject.
			 * 
			 * The <code>sName</code> must either be <code>undefined</code> (or omitted) or a non-empty string.
			 * When the name is omitted, the default model is set/unset.
			 * 
			 * When <code>oModel</code> is <code>null</code> or <code>undefined</code>, a previously set model
			 * with that name is removed from this ManagedObject. If an ancestor (parent, UIArea or Core) has a model
			 * with that name, this ManagedObject will immediately inherit that model from its ancestor.
			 * 
			 * All local bindings that depend on the given model name, are updated (created if the model references
			 * became complete now; updated, if any model reference has changed; removed if the model references
			 * became incomplete now).
			 * 
			 * Any change (new model, removed model, inherited model) is also applied to all aggregated descendants
			 * as long as a descendant doesn't have its own model set for the given name.
			 * 
			 * Note: to be compatible with future versions of this API, applications must not use the value <code>null</code>,
			 * the empty string <code>""</code> or the string literals <code>"null"</code> or <code>"undefined"</code> as model name.
			 * 
			 * Note: By design, it is not possible to hide an inherited model by setting a <code>null</code> or
			 * <code>undefined</code> model. Applications can set an empty model to achieve the same.
			 * 
			 * Note: A ManagedObject inherits models from the Core only when it is a descendant of an UIArea.
			 * @param oModel the model to be set or <code>null</code> or <code>undefined</code>
			 * @param sName the name of the model or <code>undefined</code>(optional)
			 * @return <code>this</code> to allow method chaining
			 */
			setModel(oModel: sap.ui.model.Model, sName?: string): ManagedObject;
			/**
			 * Sets the given value for the given property after validating and normalizing it,
			 * marks this object as changed.
			 * 
			 * If the value is not valid with regard to the declared data type of the property,
			 * an Error is thrown. In case <code>null</code> or <code>undefined</code> is passed,
			 * the default value for this property is used (see {@link #validateProperty}. If the validated and normalized
			 * <code>oValue</code> equals the current value of the property, the internal state of
			 * this object is not changed. If the value changes, it is stored internally and
			 * the {@link #invalidate} method is called on this object. In the case of TwoWay
			 * databinding, the bound model is informed about the property change.
			 * 
			 * Note that ManagedObject only implements a single level of change tracking: if a first
			 * call to setProperty recognizes a change, 'invalidate' is called. If another call to
			 * setProperty reverts that change, invalidate() will be called again, the new status
			 * is not recognized as being 'clean' again.
			 * 
			 * <b>Note:</b> This method is a low level API as described in <a href="#lowlevelapi">the class documentation</a>.
			 * Applications or frameworks must not use this method to generically set a property.
			 * Use the concrete method set<i>XYZ</i> for property 'XYZ' or the generic {@link #applySettings} instead.
			 * @param sPropertyName name of the property to set
			 * @param oValue value to set the property to
			 * @param bSuppressInvalidate if true, the managed object is not marked as changed(optional)
			 * @return Returns <code>this</code> to allow method chaining
			 */
			setProperty(sPropertyName: string, oValue: any, bSuppressInvalidate?: boolean): ManagedObject;
			/**
			 * Returns a simple string representation of this managed object.
			 * 
			 * Mainly useful for tracing purposes.
			 * @return a string description of this managed object
			 */
			toString(): string;
			/**
			 * Unbind the aggregation from the model
			 * @param sName the name of the aggregation
			 * @param bSuppressReset whether the reset to empty aggregation when unbinding should be suppressed
			 * @return reference to the instance itself
			 */
			unbindAggregation(sName: string, bSuppressReset: boolean): ManagedObject;
			/**
			 * Removes the defined binding context of this object, all bindings will now resolve
			 * relative to the parent context again.
			 * @param sModelName name of the model to remove the context for.(optional)
			 * @return reference to the instance itself
			 */
			unbindObject(sModelName?: string): ManagedObject;
			/**
			 * Unbind the property from the model
			 * @param sName the name of the property
			 * @param bSuppressReset whether the reset to the default value when unbinding should be suppressed
			 * @return reference to the instance itself
			 */
			unbindProperty(sName: string, bSuppressReset: boolean): ManagedObject;
			/**
			 * Checks whether the given value is of the proper type for the given aggregation name.
			 * 
			 * This method is already called by {@link #setAggregation}, {@link #addAggregation} and {@link #insertAggregation}.
			 * In many cases, subclasses of ManagedObject don't need to call it again in their mutator methods.
			 * @param sAggregationName the name of the aggregation
			 * @param oObject the aggregated object or a primitive value
			 * @param bMultiple whether the caller assumes the aggregation to have cardinality 0..n
			 * @return the passed object
			 */
			validateAggregation(sAggregationName: string, oObject: ManagedObject|any, bMultiple: boolean): ManagedObject|any;
			/**
			 * Checks whether the given value is of the proper type for the given property name.
			 * 
			 * In case <code>null</code> or <code>undefined</code> is passed, the default value for
			 * this property is used as value. If no default value is defined for the property, the
			 * default value of the type of the property is used.
			 * 
			 * If the property has a data type that is an instance of sap.ui.base.DataType and if
			 * a <code>normalize</code> function is defined for that type, that function will be
			 * called with the resulting value as only argument. The result of the function call is
			 * then used instead of the raw value.
			 * 
			 * This method is called by {@link #setProperty}. In many cases, subclasses of
			 * ManagedObject don't need to call it themselves.
			 * @param sPropertyName the name of the property
			 * @param oValue the value
			 * @return the normalized value for the passed value or for the default value if null or undefined was passed
			 */
			validateProperty(sPropertyName: string, oValue: any): any;
		}
	
		class Metadata  {
			/**
			 * Creates a new metadata object from the given static infos.
			 * 
			 * Note: throughout this class documentation, the described subclass of Object
			 * is referenced as <i>the described class</i>.
			 * @param sClassName fully qualified name of the described class
			 * @param oClassInfo info to construct the class and its metadata from
			 */
			constructor(sClassName: string, oClassInfo: any);
			/**
			 * Returns an array with the names of all public methods declared by the described class
			 * and its ancestors.
			 * @return array with names of all public methods provided by the described class and its ancestors
			 */
			getAllPublicMethods(): string[];
			/**
			 * Returns the (constructor of the) described class
			 * @return class described by this metadata
			 */
			getClass(): any;
			/**
			 * Returns the fully qualified name of the described class
			 * @return name of the described class
			 */
			getName(): string;
			/**
			 * Returns the metadata object of the base class of the described class
			 * or null if the class has no (documented) base class.
			 * @return metadata of the base class
			 */
			getParent(): Metadata;
			/**
			 * Returns an array with the names of the public methods declared by the described class.
			 * @return array with names of public methods declared by the described class
			 */
			getPublicMethods(): string[];
			/**
			 * Returns whether the described class is abstract
			 * @return whether the class is abstract
			 */
			isAbstract(): boolean;
			/**
			 * Whether the described class is deprecated and should not be used any more
			 * @return whether the class is considered deprecated
			 */
			isDeprecated(): boolean;
			/**
			 * Returns whether the described class is final
			 * @return whether the class is final
			 */
			isFinal(): boolean;
			/**
			 * Checks whether the described class or one of its ancestor classes implements the given interface.
			 * @param sInterface name of the interface to test for (in dot notation)
			 * @return whether this class implements the interface
			 */
			isInstanceOf(sInterface: string): boolean;
		}
	
		class Object  {
			/**
			 * Constructor for a sap.ui.base.Object.
			 */
			constructor();
			/**
			 * Destructor method for objects
			 */
			destroy();
			/**
			 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain three kinds of informations:
			 * <ul>
			 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
			 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
			 * and might contain the following information
			 * <ul>
			 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
			 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
			 * facade of the class</li>
			 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
			 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
			 * </ul>
			 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
			 * </li>
			 * 
			 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
			 * If no constructor function is given, the framework creates a default implementation that delegates all
			 * its arguments to the constructor function of the base class.
			 * </li>
			 * 
			 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
			 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
			 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
			 * make sense to use primitive values here other than to declare public constants.
			 * </li>
			 * 
			 * </ul>
			 * 
			 * The prototype object of the newly created class uses the same prototype as instances of the base class
			 * (prototype chaining).
			 * 
			 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
			 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
			 * itself.
			 * 
			 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
			 * can be specified. Instances of that class will be used to represent metadata for the newly created class
			 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
			 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
			 * @param sClassName name of the class to be created
			 * @param oClassInfo structured object with informations about the class(optional)
			 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.(optional)
			 * @return the created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Returns the public interface of the object.
			 * @return the public interface of the object
			 */
			getInterface(): Interface;
		}
	
		class ObjectPool extends Object {
			/**
			 * Creates an ObjectPool instance based on the given oObjectClass.&lt;br/&gt;
			 * If there is a free pooled instance, returns that one, otherwise creates a new one.&lt;br/&gt;
			 * In order to be maintained by the ObjectPool, oObjectClass must implement
			 * methods described in the class description.
			 * @param oObjectClass constructor for the class of objects that this pool should manage
			 */
			constructor(oObjectClass: any);
			/**
			 * Borrows a free object from the pool. Any arguments to this method
			 * are forwarded to the init method of the borrowed object.
			 * @param any optional initialization parameters for the borrowed object(optional)
			 * @return the borrowed object of the same type that has been specified for this pool
			 */
			borrowObject(any?: any): any;
			/**
			 * Creates a new subclass of class sap.ui.base.ObjectPool with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Returns an object to the pool. The object must have been borrowed from this
			 * pool beforehand. The reset method is called on the object before it is added
			 * to the set of free objects.
			 * @param oObject the object to return to the pool
			 */
			returnObject(oObject: any);
		}
	
		interface Poolable {
			/**
			 * Called by the object pool when this instance will be actived for a caller.
			 * The same method will be called after a new instance has been created by an otherwise
			 * exhausted pool.
			 * 
			 * If the caller provided any arguments to {@link sap.ui.base.ObjectPool#borrowObject}
			 * all arguments will be propagated to this method.
			 */
			init();
			/**
			 * Called by the object pool when an instance is returned to the pool.
			 * While no specific implementation is required, poolable objects in general
			 * should clean all caller specific state (set to null) in this method to
			 * avoid memory leaks and to enforce garbage collection of the caller state.
			 */
			reset();
		}
	}

	/**
	 * The SAPUI5 Core Runtime.
	 * 
	 * Contains the UI5 jQuery plugins (jQuery.sap.*), the Core and all its components,
	 * base classes for Controls, Components and the Model View Controller classes.
	 */
	namespace core {
	
		/**
		 * The AppCacheBuster is used to hook into URL relevant functions in jQuery
		 * and SAPUI5 and rewrite the URLs with a timestamp segment. The timestamp
		 * information is fetched from the server and used later on for the URL
		 * rewriting.
		 */
		namespace AppCacheBuster {
			/**
			 * Converts the given URL if it matches a URL in the cachebuster index.
			 * If not then the same URL will be returned. To prevent URLs from being
			 * modified by the application cachebuster you can implement the function
			 * <code>sap.ui.core.AppCacheBuster.handleURL</code>.
			 * @param sUrl any URL
			 * @return modified URL when matching the index or unmodified when not
			 */
			function convertURL(sUrl: string): string;
			/**
			 * Callback function which can be overwritten to programmatically decide
			 * whether to rewrite the given URL or not.
			 * @param sUrl any URL
			 * @return <code>true</code> to rewrite or <code>false</code> to ignore
			 */
			function handleURL(sUrl: string): boolean;
			/**
			 * Normalizes the given URL and make it absolute.
			 * @param sUrl any URL
			 * @return normalized URL
			 */
			function normalizeURL(sUrl: string): string;
			/**
			 * Registers an application. Loads the cachebuster index file from this
			 * locations. All registered files will be considered by the cachebuster
			 * and the URLs will be prefixed with the timestamp of the index file.
			 * @param base URL of an application providing a cachebuster index file
			 */
			function register(base: string);
		}
	
		/**
		 * This type checks the short hand form of a margin or padding definition.
		 * 
		 * E.g. "1px 1px" or up to four CSSSize values are allowed or tHe special keyword <code>inherit</code>.
		 */
		namespace CSSSizeShortHand {
		}
	
		namespace delegate {
		
			class ItemNavigation extends sap.ui.base.EventProvider {
				/**
				 * Creates an <code>ItemNavigation</code> delegate that can be attached to controls requiring
				 * capabilities for keyboard navigation between items.
				 * @param oDomRef The root DOM reference that includes all items
				 * @param aItemDomRefs Array of DOM references representing the items for the navigation
				 * @param bNotInTabChain Whether the selected element should be in the tab chain or not(optional)
				 */
				constructor(oDomRef: any, aItemDomRefs: any[], bNotInTabChain?: boolean);
				/**
				 * Creates a new subclass of class sap.ui.core.delegate.ItemNavigation with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Returns disabled modifiers
				 * These modifiers will not be handled by the <code>ItemNavigation</code>
				 * @param oDisabledModifiers Object that includes event type with disabled keys as an array
				 * @return Object that includes event type with disabled keys as an array
				 */
				getDisabledModifiers(oDisabledModifiers: any): any;
				/**
				 * Returns the array of item DOM references
				 * @return Array of item DOM references
				 */
				getItemDomRefs(): any[];
				/**
				 * Returns the root DOM reference surrounding the items
				 * @return Root DOM reference
				 */
				getRootDomRef(): any;
				/**
				 * Check whether given event has disabled modifier or not
				 * @param oEvent jQuery event
				 * @return Flag if disabled modifiers are set
				 */
				hasDisabledModifier(oEvent: jQuery.Event): boolean;
				/**
				 * Sets whether the items are displayed in columns.
				 * 
				 * If columns are used, the Arrow Up and Arrow Down keys navigate to the next or previous
				 * item of the column. If the first or last item of the column is reached, the next focused
				 * item is then in the next or previous column.
				 * @param iColumns Count of columns for the table mode or cycling mode
				 * @param bNoColumnChange Forbids jumping to an other column with Arrow Up and Arrow Down keys
				 * @return <code>this</code> to allow method chaining
				 */
				setColumns(iColumns: number, bNoColumnChange: boolean): ItemNavigation;
				/**
				 * Sets whether the <code>ItemNavigation</code> should cycle through the items.
				 * 
				 * If cycling is disabled the navigation stops at the first and last item, if the corresponding arrow keys are used.
				 * @param bCycling Set to true if cycling should be done, else false
				 * @return <code>this</code> to allow method chaining
				 */
				setCycling(bCycling: boolean): ItemNavigation;
				/**
				 * Sets the disabled modifiers
				 * These modifiers will not be handled by the <code>ItemNavigation</code>
				 * 
				 * <pre>
				 * Example: Disable shift + up handling of the <code>ItemNavigation</code>
				 * 
				 * oItemNavigation.setDisabledModifiers({
				 *     sapnext : ["shift"]
				 * });
				 * 
				 * Possible keys are : "shift", "alt", "ctrl", "meta"
				 * Possible events are : "sapnext", "sapprevious", "saphome", "sapend"
				 * </pre>
				 * @param oDisabledModifiers Object that includes event type with disabled keys as an array
				 * @return <code>this</code> to allow method chaining
				 */
				setDisabledModifiers(oDisabledModifiers: any): ItemNavigation;
				/**
				 * Sets behavior of HOME and END keys if columns are used.
				 * @param bStayInRow HOME -> go to first item in row; END -> go to last item in row
				 * @param bCtrlEnabled HOME/END with CTRL -> go to first/last item of all
				 * @return <code>this</code> to allow method chaining
				 */
				setHomeEndColumnMode(bStayInRow: boolean, bCtrlEnabled: boolean): ItemNavigation;
				/**
				 * Sets the item DOM references as an array for the items
				 * @param aItemDomRefs Array of DOM references representing the items
				 * @return <code>this</code> to allow method chaining
				 */
				setItemDomRefs(aItemDomRefs: any[]): ItemNavigation;
				/**
				 * Sets the page size of the item navigation to allow Page Up and Page Down keys.
				 * @param iPageSize The page size, needs to be at least 1
				 * @return <code>this</code> to allow method chaining
				 */
				setPageSize(iPageSize: number): ItemNavigation;
				/**
				 * Sets the root DOM reference surrounding the items
				 * @param oDomRef Root DOM reference
				 * @return <code>this</code> to allow method chaining
				 */
				setRootDomRef(oDomRef: any): ItemNavigation;
				/**
				 * Sets the selected index if the used control supports selection.
				 * @param iIndex Index of the first selected item
				 * @return <code>this</code> to allow method chaining
				 */
				setSelectedIndex(iIndex: number): ItemNavigation;
				/**
				 * Sets whether the <code>ItemNavigation</code> should use the table mode to navigate through
				 * the items (navigation in a grid).
				 * @param bTableMode Set to true if table mode should be used, else false
				 * @param bTableList This sets a different behavior for table mode.
				 * In this mode we keep using table navigation but there are some differences. e.g.
				 * <ul>
				 * 	<li>Page-up moves focus to the first row, not to the first cell like in table mode</li>
				 * 	<li>Page-down moves focus to the last row, not to the last cell like in table mode</li>
				 * </ul>(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				setTableMode(bTableMode: boolean, bTableList?: boolean): ItemNavigation;
			}
		
			class ScrollEnablement extends sap.ui.base.Object {
				/**
				 * Destroys this Scrolling delegate.
				 * 
				 * This function must be called by the control which uses this delegate in the <code>exit</code> function.
				 */
				destroy();
				/**
				 * Creates a new subclass of class sap.ui.core.delegate.ScrollEnablement with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Calculates scroll position of a child of a container.
				 * @param vElement An element(DOM or jQuery) for which the scroll position will be calculated.
				 * @return Position object.
				 */
				getChildPosition(vElement: any): any;
				/**
				 * Get current setting for horizontal scrolling.
				 * @return true if horizontal scrolling is enabled
				 */
				getHorizontal(): boolean;
				/**
				 * Get current setting for vertical scrolling.
				 * @return true if vertical scrolling is enabled
				 */
				getVertical(): boolean;
				/**
				 * Refreshes this Scrolling delegate.
				 */
				refresh();
				/**
				 * Scrolls to an element within a container.
				 * @param oElement A DOM element.
				 * @param iTime The duration of animated scrolling in milliseconds. To scroll immediately without animation, give 0 as value.(optional)
				 * @return 
				 */
				scrollToElement(oElement: any, iTime?: number): ScrollEnablement;
				/**
				 * Setter for property <code>bounce</code>.
				 * @param bBounce new value for property <code>bounce</code>.
				 */
				setBounce(bBounce: boolean);
				/**
				 * Sets GrowingList control to scroll container
				 * @param fnScrollLoadCallback Scrolling callback
				 * @param sScrollLoadDirection Scrolling direction
				 * This function is supported in iScroll and mouse delegates only.
				 */
				setGrowingList(fnScrollLoadCallback: any, sScrollLoadDirection: sap.m.ListGrowingDirection);
				/**
				 * Enable or disable horizontal scrolling.
				 * @param bHorizontal set true to enable horizontal scrolling, false - to disable
				 */
				setHorizontal(bHorizontal: boolean);
				/**
				 * Sets IconTabBar control to scroll container
				 * @param IconTabBar instance
				 * This function is supported in iScroll only.
				 */
				setIconTabBar(IconTabBar: sap.m.IconTabBar);
				/**
				 * Set overflow control on top of scroll container.
				 * @param top control that should be normally hidden over
				 * the top border of the scroll container (pull-down content).
				 * This function is supported in iScroll delegates only. In MouseScroll delegates the element is not hidden and should have an appropriate rendering for being always displayed and should have an alternative way for triggering (e.g. a Button).
				 */
				setPullDown(top: sap.ui.core.Control);
				/**
				 * Enable or disable vertical scrolling.
				 * @param bVertical set true to enable vertical scrolling, false - to disable
				 */
				setVertical(bVertical: boolean);
			}
		}
	
		/**
		 * Format classes
		 */
		namespace format {
		
			class DateFormat  {
				/**
				 * Constructor for DateFormat - must not be used: To get a DateFormat instance, please use getInstance, getDateTimeInstance or getTimeInstance.
				 */
				constructor();
				/**
				 * Format a date according to the given format options.
				 * @param oDate the value to format
				 * @param bUTC whether to use UTC
				 * @return the formatted output value. If an invalid date is given, an empty string is returned.
				 */
				format(oDate: any, bUTC: boolean): string;
				/**
				 * Get a date instance of the DateFormat, which can be used for formatting.
				 * @param oFormatOptions Object which defines the format options(optional)
				 * @param oLocale Locale to ask for locale specific texts/settings(optional)
				 * @return date instance of the DateFormat
				 */
				getDateInstance(oFormatOptions?: any, oLocale?: sap.ui.core.Locale): DateFormat;
				/**
				 * Get a datetime instance of the DateFormat, which can be used for formatting.
				 * @param oFormatOptions Object which defines the format options(optional)
				 * @param oLocale Locale to ask for locale specific texts/settings(optional)
				 * @return datetime instance of the DateFormat
				 */
				getDateTimeInstance(oFormatOptions?: any, oLocale?: sap.ui.core.Locale): DateFormat;
				/**
				 * Get a time instance of the DateFormat, which can be used for formatting.
				 * @param oFormatOptions Object which defines the format options(optional)
				 * @param oLocale Locale to ask for locale specific texts/settings(optional)
				 * @return time instance of the DateFormat
				 */
				getTimeInstance(oFormatOptions?: any, oLocale?: sap.ui.core.Locale): DateFormat;
				/**
				 * Parse a string which is formatted according to the given format options.
				 * @param sValue the string containing a formatted date/time value
				 * @param bUTC whether to use UTC, if no timezone is contained
				 * @param bStrict to use strict value check
				 * @return the parsed value
				 */
				parse(sValue: string, bUTC: boolean, bStrict: boolean): any;
			}
		
			class FileSizeFormat extends sap.ui.base.Object {
				/**
				 * Constructor for FileSizeFormat - must not be used: To get a FileSizeFormat instance, please use getInstance.
				 */
				constructor();
				/**
				 * Creates a new subclass of class sap.ui.core.format.FileSizeFormat with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Format a filesize (in bytes) according to the given format options.
				 * @param oValue the number (or hex string) to format
				 * @return the formatted output value
				 */
				format(oValue: number|string): string;
				/**
				 * Get an instance of the FileSizeFormat, which can be used for formatting.
				 * 
				 * If no locale is given, the currently configured
				 * {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale formatLocale} will be used.
				 * @param oFormatOptions Object which defines the format options(optional)
				 * @param oLocale Locale to get the formatter for(optional)
				 * @return instance of the FileSizeFormat
				 */
				getInstance(oFormatOptions?: any, oLocale?: sap.ui.core.Locale): FileSizeFormat;
				/**
				 * Parse a string which is formatted according to the given format options.
				 * @param sValue the string containing a formatted filesize value
				 * @return the parsed value in bytes
				 */
				parse(sValue: string): number;
			}
		
			class NumberFormat extends sap.ui.base.Object {
				/**
				 * Constructor for NumberFormat - must not be used: To get a NumberFormat instance, please use getInstance, getFloatInstance or getIntegerInstance.
				 * @param oFormatOptions The option object which support the following parameters. If no options is given, default values according to the type and locale settings are used.(optional)
				 */
				constructor(oFormatOptions?: any);
				/**
				 * Creates a new subclass of class sap.ui.core.format.NumberFormat with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Format a number according to the given format options.
				 * @param oValue the number to format or an array which contains the number to format and the sMeasure parameter
				 * @param sMeasure a measure which has an impact on the formatting(optional)
				 * @return the formatted output value
				 */
				format(oValue: number|any[], sMeasure?: string): string;
				/**
				 * Get a currency instance of the NumberFormat, which can be used for formatting.
				 * 
				 * If no locale is given, the currently configured
				 * {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale formatLocale} will be used.
				 * 
				 * <p>
				 * This instance has HALF_AWAY_FROM_ZERO set as default rounding mode.
				 * Please set the roundingMode property in oFormatOptions to change the
				 * default value.
				 * </p>
				 * @param oFormatOptions Object which defines the format options(optional)
				 * @param oLocale Locale to get the formatter for(optional)
				 * @return integer instance of the NumberFormat
				 */
				getCurrencyInstance(oFormatOptions?: any, oLocale?: sap.ui.core.Locale): NumberFormat;
				/**
				 * Get a float instance of the NumberFormat, which can be used for formatting.
				 * 
				 * If no locale is given, the currently configured
				 * {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale formatLocale} will be used.
				 * 
				 * <p>
				 * This instance has HALF_AWAY_FROM_ZERO set as default rounding mode.
				 * Please set the roundingMode property in oFormatOptions to change the
				 * default value.
				 * </p>
				 * @param oFormatOptions Object which defines the format options(optional)
				 * @param oLocale Locale to get the formatter for(optional)
				 * @return float instance of the NumberFormat
				 */
				getFloatInstance(oFormatOptions?: any, oLocale?: sap.ui.core.Locale): NumberFormat;
				/**
				 * Get an integer instance of the NumberFormat, which can be used for formatting.
				 * 
				 * If no locale is given, the currently configured
				 * {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale formatLocale} will be used.
				 * 
				 * <p>
				 * This instance has TOWARDS_ZERO set as default rounding mode.
				 * Please set the roundingMode property in oFormatOptions to change the
				 * default value.
				 * </p>
				 * @param oFormatOptions Object which defines the format options(optional)
				 * @param oLocale Locale to get the formatter for(optional)
				 * @return integer instance of the NumberFormat
				 */
				getIntegerInstance(oFormatOptions?: any, oLocale?: sap.ui.core.Locale): NumberFormat;
				/**
				 * Get a percent instance of the NumberFormat, which can be used for formatting.
				 * 
				 * If no locale is given, the currently configured
				 * {@link sap.ui.core.Configuration.FormatSettings#getFormatLocale formatLocale} will be used.
				 * 
				 * <p>
				 * This instance has HALF_AWAY_FROM_ZERO set as default rounding mode.
				 * Please set the roundingMode property in oFormatOptions to change the
				 * default value.
				 * </p>
				 * @param oFormatOptions Object which defines the format options(optional)
				 * @param oLocale Locale to get the formatter for(optional)
				 * @return integer instance of the NumberFormat
				 */
				getPercentInstance(oFormatOptions?: any, oLocale?: sap.ui.core.Locale): NumberFormat;
				/**
				 * Parse a string which is formatted according to the given format options.
				 * @param sValue the string containing a formatted numeric value
				 * @return the parsed value or an array which contains the parsed value and the currency code (symbol) when the NumberFormat is a currency instance
				 */
				parse(sValue: string): number|any[];
			}
		
			namespace NumberFormat {
			
				class RoundingMode {
					/**
					 * Rounding mode to round away from zero
					 */
					static AWAY_FROM_ZERO: string;
					/**
					 * Rounding mode to round towards positive infinity
					 */
					static CEILING: string;
					/**
					 * Rounding mode to round towards negative infinity
					 */
					static FLOOR: string;
					/**
					 * Rounding mode to round towards the nearest neighbor unless both neighbors are equidistant, in which case round away from zero.
					 */
					static HALF_AWAY_FROM_ZERO: string;
					/**
					 * Rounding mode to round towards the nearest neighbor unless both neighbors are equidistant, in which case round towards positive infinity.
					 */
					static HALF_CEILING: string;
					/**
					 * Rounding mode to round towards the nearest neighbor unless both neighbors are equidistant, in which case round towards negative infinity.
					 */
					static HALF_FLOOR: string;
					/**
					 * Rounding mode to round towards the nearest neighbor unless both neighbors are equidistant, in which case round towards zero.
					 */
					static HALF_TOWARDS_ZERO: string;
					/**
					 * Rounding mode to round towards zero
					 */
					static TOWARDS_ZERO: string;
				}
			}
		}
	
		/**
		 * The IconPool is a static class for retrieving or registering icons.
		 * It also provides helping methods for easier consumption of icons.
		 * There are already icons registered in IconPool, please use the Demo App named
		 * "Icon Explorer" to find the name of the icon.
		 * 
		 * In order to use the icon inside an existing control, please call
		 * {@link sap.ui.core.IconPool.getIconURI} and assign the URI to the control's property
		 * which supports icons.
		 * If you want to support both, icons and standard images in your own control, please use
		 * the static method {@link sap.ui.core.IconPool.createControlByURI} to either create an Icon in
		 * case the first argument is an icon-URL or another control which you define by
		 * providing it as the second argument.
		 */
		namespace IconPool {
			/**
			 * Register an additional icon to the sap.ui.core.IconPool.
			 * @param iconName the name of the icon.
			 * @param collectionName the name of icon collection. The built in icons are with empty collectionName, so if additional icons need to be registered in IconPool, the collectionName can't be empty.
			 * @param iconInfo the icon info which contains the following properties:
			 * @return the info object of the registered icon which has the name, collection, uri, fontFamily, content and suppressMirroring properties.
			 */
			function addIcon(iconName: string, collectionName: string, iconInfo: any): any;
			/**
			 * Creates an instance of {@link sap.ui.core.Icon} if the given URI is an icon URI, otherwise the given constructor is called.
			 * The given URI is set to the src property of the control.
			 * @param setting contains the properties which will be used to instantiate the returned control. It should contain at least a property named src. If it's given with a string type, it will be taken as the value of src property.
			 * @param constructor the constructor function which is called when the given URI isn't an icon URI
			 * @return either an instance of sap.ui.core.Icon or instance created by calling the given constructor
			 */
			function createControlByURI(setting: string|any, constructor: any): Control;
			/**
			 * Returns all names of registered collections in IconPool
			 * @return An array contains all of the registered collections' names.
			 */
			function getIconCollectionNames(): any[];
			/**
			 * Returns the icon url based on the given mime type
			 * @param sMimeType the mime type of a file (e.g. "application/zip")
			 * @return the icon url (e.g. "sap-icon://attachment-zip-file")
			 */
			function getIconForMimeType(sMimeType: string): string;
			/**
			 * Returns an info object for the icon with the given <code>iconName</code> and <code>collectionName</code>.
			 * 
			 * Instead of giving name and collection, a complete icon-URI can be provided as <code>iconName</code>.
			 * The method will determine name and collection from the URI, see {@link #.isIconURI IconPool.isIconURI}
			 * for details.
			 * 
			 * The returned info object has the following properties:
			 * <ul>
			 * <li><code>string: name</code> Name of the icon</li>
			 * <li><code>string: collection</code> Name of the collection that contains the icon or <code>undefined</code> in case of the default collection</li>
			 * <li><code>string: uri</code> Icon URI that identifies the icon</li>
			 * <li><code>string: fontFamily</code> CSS font family to use for this icon</li>
			 * <li><code>string: content</code> Character sequence that represents the icon in the icon font</li>
			 * <li><code>string: text</code> Alternative text describing the icon (optional, might be empty)</li>
			 * <li><code>boolean: suppressMirroring</code> Whether the icon needs no mirroring in right-to-left mode</li>
			 * </ul>
			 * @param iconName Name of the icon, must not be empty
			 * @param collectionName Name of the icon collection; to access built-in icons, omit the collection name(optional)
			 * @return Info object for the icon or <code>undefined</code> when the icon can't be found.
			 */
			function getIconInfo(iconName: string, collectionName?: string): any;
			/**
			 * Returns all name of icons that are registerd under the given collection.
			 * @param collectionName the name of collection where icon names are retrieved.
			 * @return An array contains all of the registered icon names under the given collection.
			 */
			function getIconNames(collectionName: string): any[];
			/**
			 * Returns the URI of the icon in the pool which has the given <code>iconName</code> and <code>collectionName</code>.
			 * @param iconName Name of the icon, must not be empty
			 * @param collectionName Name of the icon collection; to access built-in icons, omit the collection name(optional)
			 * @return URI of the icon or <code>undefined</code> if the icon can't be found in the IconPool
			 */
			function getIconURI(iconName: string, collectionName?: string): string;
			/**
			 * Returns whether the given <code>uri</code> is an icon URI.
			 * 
			 * A string is an icon URI when it can be parsed as an URI and when it has one of the two forms
			 * <ul>
			 * <li>sap-icon://collectionName/iconName</li>
			 * <li>sap-icon://iconName</li>
			 * </ul>
			 * where collectionName and iconName must be non-empty.
			 * @param uri The URI to check
			 * @return Whether the URI matches the icon URI format
			 */
			function isIconURI(uri: string): boolean;
		}
	
		/**
		 * Helper functionality for enhancement of a Label with common label functionality.
		 */
		namespace LabelEnablement {
			/**
			 * This function should be called on a label control to enrich it's functionality.
			 * 
			 * <b>Usage:</b>
			 * The function can be called with a control prototype:
			 * <code>
			 * sap.ui.core.LabelEnablement.enrich(my.Label.prototype);
			 * </code>
			 * Or the function can be called on instance level in the init function of a label control:
			 * <code>
			 * my.Label.prototype.init: function(){
			 *    sap.ui.core.LabelEnablement.enrich(this);
			 * }
			 * </code>
			 * 
			 * <b>Preconditions:</b>
			 * The given control must implement the interface sap.ui.core.Label and have an association 'labelFor' with cardinality 0..1.
			 * This function extends existing API functions. Ensure not to override this extensions AFTER calling this function.
			 * 
			 * <b>What does this function do?</b>
			 * 
			 * A mechanismn is added that ensures that a bidirectional reference between the label and it's labeled control is established:
			 * The label references the labeled control via the html 'for' attribute (@see sap.ui.core.LabelEnablement#writeLabelForAttribute).
			 * If the labeled control supports the aria-labelledby attribute. A reference to the label is added automatically.
			 * 
			 * In addition an alternative to apply a for reference without influencing the labelFor association of the API is applied (e.g. used by Form).
			 * For this purpose the functions setAlternativeLabelFor and getLabelForRendering are added.
			 * @param oControl the label control which should be enriched with further label functionality.
			 */
			function enrich(oControl: Control);
			/**
			 * Returns an array of ids of the labels referencing the given element
			 * @param oElement The element whose referencing labels should be returned
			 * @return an array of ids of the labels referencing the given element
			 */
			function getReferencingLabels(oElement: Element): string[];
			/**
			 * Returns <code>true</code> when the given control is required (property 'required') or one of its referencing labels, <code>false</code> otherwise.
			 * @param oElement The element which should be checked for its required state
			 * @return <code>true</code> when the given control is required (property 'required') or one of its referencing labels, <code>false</code> otherwise
			 */
			function isRequired(oElement: Element): boolean;
			/**
			 * Helper function for the label control to render the html 'for' attribute. This function should be called
			 * at the desired location in the renderer code of the label control.
			 * @param oRenderManager The RenderManager that can be used for writing to the render-output-buffer.
			 * @param oLabel The label for which the 'for' html attribute should be written to the render-output-buffer.
			 */
			function writeLabelForAttribute(oRenderManager: RenderManager, oLabel: Label);
		}
	
		namespace message {
		
			class ControlMessageProcessor extends MessageProcessor {
				/**
				 * Constructor for a new ControlMessageProcessor
				 */
				constructor();
				/**
				 * Check Messages and update controls with messages
				 */
				checkMessages();
				/**
				 * Creates a new subclass of class sap.ui.core.message.ControlMessageProcessor with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.message.MessageProcessor.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Set Messages to check
				 * @param vMessages map of messages: {'target': [array of messages],...}
				 */
				setMessages(vMessages: any);
			}
		
			class Message extends sap.ui.base.Object {
				/**
				 * Constructor for a new Message.
				 * @param mParameters (optional) a map which contains the following parameter properties:(optional)
				 */
				constructor(mParameters?: any);
				/**
				 * Creates a new subclass of class sap.ui.core.message.Message with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			}
		
			class MessageManager extends sap.ui.base.EventProvider {
				/**
				 * Constructor for a new MessageManager.
				 */
				constructor();
				/**
				 * Add messages to MessageManager
				 * @param vMessages Array of sap.ui.core.message.Message or single sap.ui.core.message.Message
				 */
				addMessages(vMessages: Message|Message[]);
				/**
				 * destroy MessageManager
				 * @deprecated 
				 */
				destroy();
				/**
				 * Creates a new subclass of class sap.ui.core.message.MessageManager with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Get the MessageModel
				 * @return oMessageModel The Message Model
				 */
				getMessageModel(): sap.ui.model.message.MessageModel;
				/**
				 * Register MessageProcessor
				 * @param oProcessor The MessageProcessor
				 */
				registerMessageProcessor(oProcessor: MessageProcessor);
				/**
				 * Register ManagedObject: Validation and Parse errors are handled by the MessageManager for this object
				 * @param oObject The sap.ui.base.ManageObject
				 * @param bHandleValidation Handle validation for this object. If set to true validation/parse events creates Messages and cancel event.
				 * 					If set to false only the event will be canceled, but no messages will be created
				 */
				registerObject(oObject: sap.ui.base.ManagedObject, bHandleValidation: boolean);
				/**
				 * Remove all messages
				 */
				removeAllMessages();
				/**
				 * Remove given Messages
				 * @param vMessages The message(s) to be removed.
				 */
				removeMessages(vMessages: Message|Message[]);
				/**
				 * Deregister MessageProcessor
				 * @param oProcessor The MessageProcessor
				 */
				unregisterMessageProcessor(oProcessor: MessageProcessor);
				/**
				 * Unregister ManagedObject
				 * @param oObject The sap.ui.base.ManageObject
				 */
				unregisterObject(oObject: sap.ui.base.ManagedObject);
			}
		
			class MessageParser extends sap.ui.base.Object {
				/**
				 * Abstract MessageParser class to be inherited in back-end specific implementations.
				 */
				constructor();
				/**
				 * Creates a new subclass of class sap.ui.core.message.MessageParser with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Returns the registered processor on which the events for message handling can be fired
				 * @return The currently set MessageProcessor or null if none is set
				 */
				getProcessor(): MessageProcessor;
				/**
				 * Abstract parse method must be implemented in the inheriting class.
				 */
				parse();
				/**
				 * This method is used by the model to register itself as MessageProcessor for this parser
				 * @param oProcessor The MessageProcessor that can be used to fire events
				 * @return Instance reference for method chaining
				 */
				setProcessor(oProcessor: MessageProcessor): MessageParser;
			}
		
			class MessageProcessor extends sap.ui.base.EventProvider {
				/**
				 * Constructor for a new MessageProcessor
				 */
				constructor();
				/**
				 * Attach event-handler <code>fnFunction</code> to the 'messageChange' event of this <code>sap.ui.core.message.MessageProcessor</code>.<br/>
				 * @param oData The object, that should be passed along with the event-object when firing the event.
				 * @param fnFunction The function to call, when the event occurs. This function will be called on the
				 *            oListener-instance (if present) or in a 'static way'.
				 * @param oListener Object on which to call the given function. If empty, this MessageProcessor is used.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				attachMessageChange(oData: any, fnFunction: any, oListener?: any): MessageProcessor;
				/**
				 * Implement in inheriting classes
				 * @return 
				 */
				checkMessage(): sap.ui.model.ListBinding;
				/**
				 * Destroys the MessageProcessor Instance
				 */
				destroy();
				/**
				 * Detach event-handler <code>fnFunction</code> from the 'sap.ui.core.message.MessageProcessor' event of this <code>sap.ui.core.message.MessageProcessor</code>.<br/>
				 * 
				 * The passed function and listener object must match the ones previously used for event registration.
				 * @param fnFunction The function to call, when the event occurs.
				 * @param oListener Object on which the given function had to be called.
				 * @return <code>this</code> to allow method chaining
				 */
				detachMessageChange(fnFunction: any, oListener: any): MessageProcessor;
				/**
				 * Creates a new subclass of class sap.ui.core.message.MessageProcessor with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Fire event messageChange to attached listeners.
				 * @param mArguments the arguments to pass along with the event.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				fireMessageChange(mArguments?: any): MessageProcessor;
				/**
				 * Returns the ID of the MessageProcessor instance
				 * @return sId The MessageProcessor ID
				 */
				getId(): string;
				/**
				 * Implement in inheriting classes
				 * @param vMessages map of messages: {'target': [array of messages],...}
				 */
				setMessages(vMessages: any);
			}
		}
	
		namespace mvc {
		
			class Controller extends sap.ui.base.EventProvider {
				/**
				 * Instantiates a (MVC-style) controller. Consumers should call the constructor only in the
				 * typed controller scenario. In the generic controller use case, they should use
				 * {@link sap.ui.controller} instead.
				 * @param sName The name of the controller to instantiate. If a controller is defined as real sub-class,
				 *                                   the "arguments" of the sub-class constructor should be given instead.
				 */
				constructor(sName: string|any[]);
				/**
				 * Returns an Element of the connected view with the given local ID.
				 * 
				 * Views automatically prepend their own ID as a prefix to created Elements
				 * to make the IDs unique even in the case of multiple view instances.
				 * This method helps to find an element by its local ID only.
				 * 
				 * If no view is connected or if the view doesn't contain an element with
				 * the given local ID, undefined is returned.
				 * @param sId View-local ID
				 * @return Element by its (view local) ID
				 */
				byId(sId: string): sap.ui.core.Element;
				/**
				 * Converts a view local ID to a globally unique one by prepending
				 * the view ID.
				 * 
				 * If no view is connected, undefined is returned.
				 * @param sId View-local ID
				 * @return Prefixed ID
				 */
				createId(sId: string): string;
				/**
				 * Creates a new subclass of class sap.ui.core.mvc.Controller with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Gets the component of the controller's view
				 * 
				 * If there is no Component connected to the view or the view is not connected to the controller,
				 * undefined is returned.
				 * @return Component instance
				 */
				getOwnerComponent(): sap.ui.core.Component;
				/**
				 * Returns the view associated with this controller or undefined.
				 * @return View connected to this controller.
				 */
				getView(): View;
				/**
				 * This method is called every time the View is rendered, after the HTML is placed in the DOM-Tree. It can be
				 * used to apply additional changes to the DOM after the Renderer has finished.
				 * (Even though this method is declared as "abstract", it does not need to be defined in controllers, if the
				 * method does not exist, it will simply not be called.)
				 */
				onAfterRendering();
				/**
				 * This method is called every time the View is rendered, before the Renderer is called and the HTML is placed in
				 * the DOM-Tree. It can be used to perform clean-up-tasks before re-rendering.
				 * (Even though this method is declared as "abstract", it does not need to be defined in controllers, if the
				 * method does not exist, it will simply not be called.)
				 */
				onBeforeRendering();
				/**
				 * This method is called upon desctuction of the View. The controller should perform its internal destruction in
				 * this hook. It is only called once per View instance, unlike the onBeforeRendering and onAfterRendering
				 * hooks.
				 * (Even though this method is declared as "abstract", it does not need to be defined in controllers, if the
				 * method does not exist, it will simply not be called.)
				 */
				onExit();
				/**
				 * This method is called upon initialization of the View. The controller can perform its internal setup in
				 * this hook. It is only called once per View instance, unlike the onBeforeRendering and onAfterRendering
				 * hooks.
				 * (Even though this method is declared as "abstract", it does not need to be defined in controllers, if the
				 * method does not exist, it will simply not be called.)
				 */
				onInit();
				/**
				 * Registers a callback module, which provides code enhancements for the
				 * lifecycle and event handler functions of a specific controller. The code
				 * enhancements are returned either in sync or async mode.
				 * 
				 * The extension provider module provides the <code>getControllerExtensions</code> function
				 * which returns either directly an array of objects or a Promise that returns an array
				 * of objects when it resolves. These objects are object literals defining the
				 * methods and properties of the controller in a similar way as {@link sap.ui.controller}.
				 * 
				 * 
				 * <b>Example for a callback module definition (sync):</b>
				 * <pre>
				 * sap.ui.define("my/custom/sync/ExtensionProvider", ['jquery.sap.global'], function(jQuery) {
				 *   var ExtensionProvider = function() {};
				 *   ExtensionProvider.prototype.getControllerExtensions = function(sControllerName, sComponentId, bAsync) {
				 *     if (!bAsync && sControllerName == "my.own.Controller") {
				 *       // IMPORTANT: only return extensions for a specific controller
				 *       return [{
				 *         onInit: function() {
				 *           // Do something here...
				 *         },
				 *         onAfterRendering: function() {
				 *           // Do something here...
				 *         },
				 *         onButtonClick: function(oEvent) {
				 *           // Handle the button click event
				 *         }
				 *       }
				 *     }];
				 *   };
				 *   return ExtensionProvider;
				 * }, true);
				 * </pre>
				 * 
				 * 
				 * <b>Example for a callback module definition (async):</b>
				 * <pre>
				 * sap.ui.define("my/custom/async/ExtensionProvider", ['jquery.sap.global'], function(jQuery) {
				 *   var ExtensionProvider = function() {};
				 *   ExtensionProvider.prototype.getControllerExtensions = function(sControllerName, sComponentId, bAsync) {
				 *     if (bAsync && sControllerName == "my.own.Controller") {
				 *       // IMPORTANT:
				 *       // only return a Promise for a specific controller since it
				 *       // requires the View/Controller and its parents to run in async
				 *       // mode!
				 *       return new Promise(function(fnResolve, fnReject) {
				 *         fnResolve([{
				 *           onInit: function() {
				 *             // Do something here...
				 *           },
				 *           onAfterRendering: function() {
				 *             // Do something here...
				 *           },
				 *           onButtonClick: function(oEvent) {
				 *             // Handle the button click event
				 *           }
				 *         }]);
				 *       }
				 *     };
				 *   };
				 *   return ExtensionProvider;
				 * }, true);
				 * </pre>
				 * 
				 * 
				 * The lifecycle functions <code>onInit</code>, <code>onExit</code>,
				 * <code>onBeforeRendering</code> and <code>onAfterRendering</code>
				 * are added before or after the lifecycle functions of the original
				 * controller. The event handler functions, such as <code>onButtonClick</code>,
				 * are replacing the original controller's function.
				 * 
				 * When using an async extension provider you need to ensure that the
				 * view is loaded in async mode.
				 * 
				 * In both cases, return <code>undefined</code> if no controller extension shall be applied.
				 * @param sExtensionProvider the module name of the extension provider
				 */
				registerExtensionProvider(sExtensionProvider: string);
			}
		
			class HTMLView extends View {
				/**
				 * Constructor for a new mvc/HTMLView.
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Flag for feature detection of asynchronous loading/rendering
				 */
				asyncSupport: any;
				/**
				 * Creates a new subclass of class sap.ui.core.mvc.HTMLView with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.mvc.View.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			}
		
			class JSONView extends View {
				/**
				 * Constructor for a new mvc/JSONView.
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Flag for feature detection of asynchronous loading/rendering
				 */
				asyncSupport: any;
				/**
				 * Creates a new subclass of class sap.ui.core.mvc.JSONView with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.mvc.View.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			}
		
			class JSView extends View {
				/**
				 * Constructor for a new mvc/JSView.
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Flag for feature detection of asynchronous loading/rendering
				 */
				asyncSupport: any;
				/**
				 * A method to be implemented by JSViews, returning the View UI.
				 * While for declarative View types like XMLView or JSONView the user interface definition is declared in a separate file,
				 * JSViews programmatically construct the UI. This happens in the createContent method which every JSView needs to implement.
				 * The View implementation can construct the complete UI in this method - or only return the root control and create the rest of the UI lazily later on.
				 * @return a control or (typically) tree of controls representing the View user interface
				 */
				createContent(): sap.ui.core.Control;
				/**
				 * Creates a new subclass of class sap.ui.core.mvc.JSView with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.mvc.View.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * A method to be implemented by JSViews, returning the flag whether to prefix
				 * the IDs of controls automatically or not if the controls are created inside
				 * the {@link sap.ui.core.mvc.JSView#createContent} function. By default this
				 * feature is not activated.
				 * 
				 * You can overwrite this function and return true to activate the automatic
				 * prefixing.
				 * @return true, if the controls IDs should be prefixed automatically
				 */
				getAutoPrefixId(): boolean;
			}
		
			class TemplateView extends View {
				/**
				 * Constructor for a new mvc/TemplateView.
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Creates a new subclass of class sap.ui.core.mvc.TemplateView with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.mvc.View.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			}
		
			class View extends sap.ui.core.Control {
				/**
				 * Constructor for a new View.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: sap.ui.core.mvc.ViewMetadata);
				/**
				 * Constructor for a new View.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @note Any overloads to support not documented metadata
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Adds some content to the aggregation <code>content</code>.
				 * @param oContent the content to add; if empty, nothing is inserted
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				addContent(oContent: sap.ui.core.Control): View;
				/**
				 * Attaches event handler <code>fnFunction</code> to the <code>afterInit</code> event of this <code>sap.ui.core.mvc.View</code>.
				 * 
				 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
				 * otherwise it will be bound to this <code>sap.ui.core.mvc.View</code> itself.
				 * 
				 * Fired when the View has parsed the UI description and instantiated the contained controls (/control tree).
				 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
				 * @param fnFunction The function to be called when the event occurs
				 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.core.mvc.View</code> itself(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				attachAfterInit(oData: any, fnFunction: any, oListener?: any): View;
				/**
				 * Attaches event handler <code>fnFunction</code> to the <code>afterRendering</code> event of this <code>sap.ui.core.mvc.View</code>.
				 * 
				 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
				 * otherwise it will be bound to this <code>sap.ui.core.mvc.View</code> itself.
				 * 
				 * Fired when the View has been (re-)rendered and its HTML is present in the DOM.
				 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
				 * @param fnFunction The function to be called when the event occurs
				 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.core.mvc.View</code> itself(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				attachAfterRendering(oData: any, fnFunction: any, oListener?: any): View;
				/**
				 * Attaches event handler <code>fnFunction</code> to the <code>beforeExit</code> event of this <code>sap.ui.core.mvc.View</code>.
				 * 
				 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
				 * otherwise it will be bound to this <code>sap.ui.core.mvc.View</code> itself.
				 * 
				 * Fired when the view has received the request to destroy itself, but before it has destroyed anything.
				 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
				 * @param fnFunction The function to be called when the event occurs
				 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.core.mvc.View</code> itself(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				attachBeforeExit(oData: any, fnFunction: any, oListener?: any): View;
				/**
				 * Attaches event handler <code>fnFunction</code> to the <code>beforeRendering</code> event of this <code>sap.ui.core.mvc.View</code>.
				 * 
				 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
				 * otherwise it will be bound to this <code>sap.ui.core.mvc.View</code> itself.
				 * 
				 * Fired before this View is re-rendered. Use to unbind event handlers from HTML elements etc.
				 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
				 * @param fnFunction The function to be called when the event occurs
				 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.core.mvc.View</code> itself(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				attachBeforeRendering(oData: any, fnFunction: any, oListener?: any): View;
				/**
				 * Returns an element by its ID in the context of the view.
				 * @param sId View local ID of the element
				 * @return element by its ID or <code>undefined</code>
				 */
				byId(sId: string): sap.ui.core.Element;
				/**
				 * Override clone method to avoid conflict between generic cloning of content
				 * and content creation as defined by the UI5 Model View Controller lifecycle.
				 * 
				 * For more details see the development guide section about Model View Controller in UI5.
				 * @param sIdSuffix a suffix to be appended to the cloned element id(optional)
				 * @param aLocalIds an array of local IDs within the cloned hierarchy (internally used)(optional)
				 * @return reference to the newly created clone
				 */
				clone(sIdSuffix?: string, aLocalIds?: string[]): sap.ui.core.Element;
				/**
				 * Clones a tree of objects starting with the object on which clone is called first (root object).
				 * 
				 * The ids within the newly created clone tree are derived from the original ids by appending
				 * the given <code>sIdSuffix</code> (if no suffix is given, one will be created; it will be
				 * unique across multiple clone calls).
				 * 
				 * The <code>oOptions</code> configuration object can have the following properties:
				 * <ul>
				 * <li>The boolean value <code>cloneChildren</code> specifies wether associations/aggregations will be cloned</li>
				 * <li>The boolean value <code>cloneBindings</code> specifies if bindings will be cloned</li>
				 * </ul>
				 * 
				 * For each cloned object the following settings are cloned based on the metadata of the object and the defined options:
				 * <ul>
				 * <li>all properties that are not bound. If cloneBinding is false even these properties will be cloned;
				 * the values are used by reference, they are not cloned</li>
				 * <li>all aggregated objects that are not bound. If cloneBinding is false even the ones that are bound will be cloned;
				 * they are all cloned recursively using the same <code>sIdSuffix</code></li>
				 * <li>all associated controls; when an association points to an object inside the cloned object tree,
				 *     then the cloned association will be modified to that it points to the clone of the target object.
				 *     When the association points to a managed object outside of the cloned object tree, then its
				 *     target won't be changed.</li>
				 * <li>all models set via setModel(); used by reference </li>
				 * <li>all property and aggregation bindings (if cloneBindings is true); the pure binding infos (path, model name) are
				 *     cloned, but all other information like template control or factory function,
				 *     data type or formatter function are copied by reference. The bindings themselves
				 *     are created anew as they are specific for the combination (object, property, model).
				 *     As a result, any later changes to a binding of the original object are not reflected
				 *     in the clone, but changes to e.g the type or template etc. are.</li>
				 * </ul>
				 * 
				 * Each clone is created by first collecting the above mentioned settings and then creating
				 * a new instance with the normal constructor function. As a result, any side effects of
				 * mutator methods (setProperty etc.) or init hooks are repeated during clone creation.
				 * There is no need to override <code>clone()</code> just to reproduce these internal settings!
				 * 
				 * Custom controls however can override <code>clone()</code> to implement additional clone steps.
				 * They usually will first call <code>clone()</code> on the super class and then modify the
				 * returned clone accordingly.
				 * 
				 * Applications <b>must never provide</b> the second parameter <code>aLocaleIds</code>.
				 * It is determined automatically for the root object (and its non-existance also serves as
				 * an indicator for the root object). Specifying it will break the implementation of <code>clone()</code>.
				 * @note Overload from base type sap.ui.base.ManagedObject
				 * @param sIdSuffix a suffix to be appended to the cloned object id(optional)
				 * @param aLocalIds an array of local IDs within the cloned hierarchy (internally used)(optional)
				 * @param oOptions configuration object(optional)
				 * @return reference to the newly created clone
				 */
				clone(sIdSuffix?: string, aLocalIds?: string[], oOptions?: any): sap.ui.base.ManagedObject;
				/**
				 * Clone delegates
				 * @note Overload from base type sap.ui.core.Element
				 * @param sIdSuffix a suffix to be appended to the cloned element id(optional)
				 * @param aLocalIds an array of local IDs within the cloned hierarchy (internally used)(optional)
				 * @return reference to the newly created clone
				 */
				clone(sIdSuffix?: string, aLocalIds?: string[]): sap.ui.base.ManagedObject;
				/**
				 * Convert the given view local element ID to a globally unique ID
				 * by prefixing it with the view ID.
				 * @param sId View local ID of the element
				 * @return prefixed id
				 */
				createId(sId: string): string;
				/**
				 * Destroys all the content in the aggregation <code>content</code>.
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				destroyContent(): View;
				/**
				 * Detaches event handler <code>fnFunction</code> from the <code>afterInit</code> event of this <code>sap.ui.core.mvc.View</code>.
				 * 
				 * The passed function and listener object must match the ones used for event registration.
				 * @param fnFunction The function to be called, when the event occurs
				 * @param oListener Context object on which the given function had to be called
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				detachAfterInit(fnFunction: any, oListener: any): View;
				/**
				 * Detaches event handler <code>fnFunction</code> from the <code>afterRendering</code> event of this <code>sap.ui.core.mvc.View</code>.
				 * 
				 * The passed function and listener object must match the ones used for event registration.
				 * @param fnFunction The function to be called, when the event occurs
				 * @param oListener Context object on which the given function had to be called
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				detachAfterRendering(fnFunction: any, oListener: any): View;
				/**
				 * Detaches event handler <code>fnFunction</code> from the <code>beforeExit</code> event of this <code>sap.ui.core.mvc.View</code>.
				 * 
				 * The passed function and listener object must match the ones used for event registration.
				 * @param fnFunction The function to be called, when the event occurs
				 * @param oListener Context object on which the given function had to be called
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				detachBeforeExit(fnFunction: any, oListener: any): View;
				/**
				 * Detaches event handler <code>fnFunction</code> from the <code>beforeRendering</code> event of this <code>sap.ui.core.mvc.View</code>.
				 * 
				 * The passed function and listener object must match the ones used for event registration.
				 * @param fnFunction The function to be called, when the event occurs
				 * @param oListener Context object on which the given function had to be called
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				detachBeforeRendering(fnFunction: any, oListener: any): View;
				/**
				 * Creates a new subclass of class sap.ui.core.mvc.View with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Fires event <code>afterInit</code> to attached listeners.
				 * @param mArguments The arguments to pass along with the event(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				fireAfterInit(mArguments?: any): View;
				/**
				 * Fires event <code>afterRendering</code> to attached listeners.
				 * @param mArguments The arguments to pass along with the event(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				fireAfterRendering(mArguments?: any): View;
				/**
				 * Fires event <code>beforeExit</code> to attached listeners.
				 * @param mArguments The arguments to pass along with the event(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				fireBeforeExit(mArguments?: any): View;
				/**
				 * Fires event <code>beforeRendering</code> to attached listeners.
				 * @param mArguments The arguments to pass along with the event(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				fireBeforeRendering(mArguments?: any): View;
				/**
				 * Gets content of aggregation <code>content</code>.
				 * 
				 * Child Controls of the view
				 * @return 
				 */
				getContent(): sap.ui.core.Control[];
				/**
				 * Returns the view's Controller instance or null for a controller-less View.
				 * @return Controller of this view.
				 */
				getController(): any;
				/**
				 * An (optional) method to be implemented by Views. When no controller instance is given at View instantiation time
				 * AND this method exists and returns the (package and class) name of a controller, the View tries to load and
				 * instantiate the controller and to connect it to itself.
				 * @return the name of the controller
				 */
				getControllerName(): string;
				/**
				 * Gets current value of property <code>displayBlock</code>.
				 * 
				 * Whether the CSS display should be set to "block".
				 * Set this to "true" if the default display "inline-block" causes a vertical scrollbar with Views that are set to 100% height.
				 * Do not set this to "true" if you want to display other content in the same HTML parent on either side of the View (setting to "true" may push that other content to the next/previous line).
				 * 
				 * Default value is <code>false</code>.
				 * @return Value of property <code>displayBlock</code>
				 */
				getDisplayBlock(): boolean;
				/**
				 * Gets current value of property <code>height</code>.
				 * 
				 * The height
				 * @return Value of property <code>height</code>
				 */
				getHeight(): sap.ui.core.CSSSize;
				/**
				 * Returns the local ID of an element by removing the view ID prefix or
				 * <code>null</code> if the ID does not contain a prefix.
				 * @param sId Prefixed ID
				 * @return ID without prefix or <code>null</code>
				 */
				getLocalId(sId: string): string;
				/**
				 * Returns the info object which is also passed to the preprocessors
				 * @param bSync Describes the view execution, true if sync
				 * @return Info object for the view
				 */
				getPreprocessorInfo(bSync: boolean): any;
				/**
				 * Returns user specific data object
				 * @return viewData
				 */
				getViewData(): any;
				/**
				 * Gets current value of property <code>viewName</code>.
				 * 
				 * Name of the View
				 * @return Value of property <code>viewName</code>
				 */
				getViewName(): string;
				/**
				 * Gets current value of property <code>width</code>.
				 * 
				 * The width
				 * 
				 * Default value is <code>100%</code>.
				 * @return Value of property <code>width</code>
				 */
				getWidth(): sap.ui.core.CSSSize;
				/**
				 * Checks if any preprocessors are active for the specified type
				 * @param sType Type of the preprocessor, e.g. "raw", "xml" or "controls"
				 * @return <code>true</code> if a preprocessor is active
				 */
				hasPreprocessor(sType: string): boolean;
				/**
				 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.
				 * and returns its index if found or -1 otherwise.
				 * @param oContent The content whose index is looked for
				 * @return The index of the provided control in the aggregation if found, or -1 otherwise
				 */
				indexOfContent(oContent: sap.ui.core.Control): number;
				/**
				 * Inserts a content into the aggregation <code>content</code>.
				 * @param oContent the content to insert; if empty, nothing is inserted
				 * @param iIndex the <code>0</code>-based index the content should be inserted at; for
				 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
				 *              greater than the current size of the aggregation, the content is inserted at
				 *              the last position
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				insertContent(oContent: sap.ui.core.Control, iIndex: number): View;
				/**
				 * Creates a Promise representing the state of the view initialization.
				 * 
				 * For views that are loading asynchronously (by setting async=true) this Promise is created by view
				 * initialization. Synchronously loading views get wrapped in an immediately resolving Promise.
				 * @return resolves with the complete view instance, reject with any thrown error
				 */
				loaded(): any;
				/**
				 * Register a preprocessor for all views of a specific type.
				 * 
				 * The preprocessor can be registered for several stages of view initialization, which are
				 * dependant from the view type, e.g. "raw", "xml" or already initialized "controls". If there is a preprocessor
				 * passed to or activated at the view instance already, that one is used. When several preprocessors are registered
				 * for one hook, it has to be made sure that they do not conflict when beeing processed serially.
				 * 
				 * It can be either a module name as string of an implementation of {@link sap.ui.core.mvc.View.Preprocessor} or a
				 * function with a signature according to {@link sap.ui.core.mvc.View.Preprocessor.process}.
				 * 
				 * <strong>Note</strong>: Preprocessors only work in async views and will be ignored when the view is instantiated
				 * in sync mode by default, as this could have unexpected side effects. You may override this behaviour by setting the
				 * <code>bSyncSupport</code> flag to <code>true</code>.
				 * @param sType the type of content to be processed
				 * @param vPreprocessor module path of the preprocessor implementation or a preprocessor function
				 * @param sViewType type of the calling view, e.g. <code>XML</code>
				 * @param bSyncSupport declares if the vPreprocessor ensures safe sync processing. This means the preprocessor will be executed
				 * 		also for sync views. Please be aware that any kind of async processing (like Promises, XHR, etc) may
				 * 		break the view initialization and lead to unexpected results.
				 * @param bOnDemand on-demand preprocessor which enables developers to quickly activate the preprocessor for a view,
				 * 		by setting <code>preprocessors : { xml }</code>, for example. This should be false except for very special
				 * 		cases. There can only be one on-demand preprocessor per content type.(optional)
				 * @param mSettings optional configuration for preprocessor(optional)
				 */
				registerPreprocessor(sType: string, vPreprocessor: string|any, sViewType: string, bSyncSupport: boolean, bOnDemand?: boolean, mSettings?: any);
				/**
				 * Removes all the controls from the aggregation <code>content</code>.
				 * 
				 * Additionally, it unregisters them from the hosting UIArea.
				 * @return An array of the removed elements (might be empty)
				 */
				removeAllContent(): sap.ui.core.Control[];
				/**
				 * Removes a content from the aggregation <code>content</code>.
				 * @param vContent The content to remove or its index or id
				 * @return The removed content or <code>null</code>
				 */
				removeContent(vContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
				/**
				 * Executes preprocessors for a type of source
				 * @param sType the type of preprocessor, e.g. "raw", "xml" or "controls"
				 * @param vSource the view source as a JSON object, a raw text, an XML document element or a Promise resolving with those
				 * @param bSync describes the view execution, true if sync(optional)
				 * @return a promise resolving with the processed source or an error | the source when bSync=true
				 */
				runPreprocessor(sType: string, vSource: any|string, bSync?: boolean): any|string;
				/**
				 * Sets a new value for property <code>displayBlock</code>.
				 * 
				 * Whether the CSS display should be set to "block".
				 * Set this to "true" if the default display "inline-block" causes a vertical scrollbar with Views that are set to 100% height.
				 * Do not set this to "true" if you want to display other content in the same HTML parent on either side of the View (setting to "true" may push that other content to the next/previous line).
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>false</code>.
				 * @param bDisplayBlock New value for property <code>displayBlock</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setDisplayBlock(bDisplayBlock: boolean): View;
				/**
				 * Sets a new value for property <code>height</code>.
				 * 
				 * The height
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sHeight New value for property <code>height</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setHeight(sHeight: sap.ui.core.CSSSize): View;
				/**
				 * Sets a new value for property <code>viewName</code>.
				 * 
				 * Name of the View
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sViewName New value for property <code>viewName</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setViewName(sViewName: string): View;
				/**
				 * Sets a new value for property <code>width</code>.
				 * 
				 * The width
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>100%</code>.
				 * @param sWidth New value for property <code>width</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setWidth(sWidth: sap.ui.core.CSSSize): View;
			}
		
			namespace View {
			
				interface Preprocessor {
					/**
					 * Processing method that must be implemented by a Preprocessor.
					 * @param vSource the source to be processed
					 * @param oViewInfo identification information about the calling instance
					 * @param mSettings settings object containing the settings provided with the preprocessor(optional)
					 * @return the processed resource or a promise which resolves with the processed resource or an error according to the
					 * 		declared preprocessor sync capability
					 */
					process(vSource: any, oViewInfo: any, mSettings?: any): any;
				}
			}
		
			class ViewType {
				/**
				 * HTML view
				 */
				static HTML: string;
				/**
				 * JS View
				 */
				static JS: string;
				/**
				 * JSON View
				 */
				static JSON: string;
				/**
				 * Template View
				 */
				static Template: string;
				/**
				 * XML view
				 */
				static XML: string;
			}
		
			class XMLView extends View {
				/**
				 * Constructor for a new mvc/XMLView.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * 
				 * This class does not have its own settings, but all settings applicable to the base type
				 * {@link sap.ui.core.mvc.View#constructor sap.ui.core.mvc.View} can be used.
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Flag for feature detection of asynchronous loading/rendering
				 */
				asyncSupport: any;
				/**
				 * Creates a new subclass of class sap.ui.core.mvc.XMLView with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.mvc.View.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Register a preprocessor for all views of a specific type.
				 * 
				 * The preprocessor can be registered for several stages of view initialization, for xml views these are
				 * either the plain "xml" or the already initialized "controls" , see {@link sap.ui.core.mvc.XMLView.PreprocessorType}.
				 * For each type one preprocessor is executed. If there is a preprocessor passed to or activated at the
				 * view instance already, that one is used. When several preprocessors are registered for one hook, it has to be made
				 * sure, that they do not conflict when beeing processed serially.
				 * 
				 * It can be either a module name as string of an implementation of {@link sap.ui.core.mvc.View.Preprocessor} or a
				 * function with a signature according to {@link sap.ui.core.mvc.View.Preprocessor.process}.
				 * 
				 * <strong>Note</strong>: Preprocessors work only in async views and will be ignored when the view is instantiated
				 * in sync mode by default, as this could have unexpected side effects. You may override this behaviour by setting the
				 * bSyncSupport flag to true.
				 * @param sType the type of content to be processed
				 * @param vPreprocessor module path of the preprocessor implementation or a preprocessor function
				 * @param bSyncSupport declares if the vPreprocessor ensures safe sync processing. This means the preprocessor will be executed
				 * 		also for sync views. Please be aware that any kind of async processing (like Promises, XHR, etc) may
				 * 		break the view initialization and lead to unexpected results.
				 * @param bOnDemand ondemand preprocessor which enables developers to quickly activate the preprocessor for a view,
				 * 		by setting <code>preprocessors : { xml }</code>, for example.(optional)
				 * @param mSettings optional configuration for preprocessor(optional)
				 */
				registerPreprocessor(sType: string|XMLView.PreprocessorType, vPreprocessor: string|any, bSyncSupport: boolean, bOnDemand?: boolean, mSettings?: any);
				/**
				 * Register a preprocessor for all views of a specific type.
				 * 
				 * The preprocessor can be registered for several stages of view initialization, which are
				 * dependant from the view type, e.g. "raw", "xml" or already initialized "controls". If there is a preprocessor
				 * passed to or activated at the view instance already, that one is used. When several preprocessors are registered
				 * for one hook, it has to be made sure that they do not conflict when beeing processed serially.
				 * 
				 * It can be either a module name as string of an implementation of {@link sap.ui.core.mvc.View.Preprocessor} or a
				 * function with a signature according to {@link sap.ui.core.mvc.View.Preprocessor.process}.
				 * 
				 * <strong>Note</strong>: Preprocessors only work in async views and will be ignored when the view is instantiated
				 * in sync mode by default, as this could have unexpected side effects. You may override this behaviour by setting the
				 * <code>bSyncSupport</code> flag to <code>true</code>.
				 * @note Overload from base type sap.ui.core.mvc.View
				 * @param sType the type of content to be processed
				 * @param vPreprocessor module path of the preprocessor implementation or a preprocessor function
				 * @param sViewType type of the calling view, e.g. <code>XML</code>
				 * @param bSyncSupport declares if the vPreprocessor ensures safe sync processing. This means the preprocessor will be executed
				 * 		also for sync views. Please be aware that any kind of async processing (like Promises, XHR, etc) may
				 * 		break the view initialization and lead to unexpected results.
				 * @param bOnDemand on-demand preprocessor which enables developers to quickly activate the preprocessor for a view,
				 * 		by setting <code>preprocessors : { xml }</code>, for example. This should be false except for very special
				 * 		cases. There can only be one on-demand preprocessor per content type.(optional)
				 * @param mSettings optional configuration for preprocessor(optional)
				 */
				registerPreprocessor(sType: string, vPreprocessor: string|any, sViewType: string, bSyncSupport: boolean, bOnDemand?: boolean, mSettings?: any);
			}
		
			namespace XMLView {
			
				class PreprocessorType {
					/**
					 * This preprocessor receives the control tree produced through the view source
					 */
					static CONTROLS: string;
					/**
					 * This preprocessor receives a valid xml source for View creation without any template tags but with control
					 * declarations. These include their full IDs by which they can also be queried during runtime.
					 */
					static VIEWXML: string;
					/**
					 * This preprocessor receives the plain xml source of the view and should also return a valid
					 * xml ready for view creation
					 */
					static XML: string;
				}
			}
		
			interface ViewMetadata extends sap.ui.core.ControlMetadata {
				/**
				 * The width
				 * @default 100%
				 */
				width?: sap.ui.core.CSSSize;
				/**
				 * The height
				 */
				height?: sap.ui.core.CSSSize;
				/**
				 * Name of the View
				 */
				viewName?: string;
				/**
				 * Whether the CSS display should be set to "block".
				 * Set this to "true" if the default display "inline-block" causes a vertical scrollbar with Views that are set to 100% height.
				 * Do not set this to "true" if you want to display other content in the same HTML parent on either side of the View (setting to "true" may push that other content to the next/previous line).
				 * @default false
				 */
				displayBlock?: boolean;
			}
		}
	
		/**
		 * A string type that represents a percentage value.
		 */
		namespace Percentage {
		}
	
		/**
		 * Base Class for a Renderer.
		 */
		namespace Renderer {
			/**
			 * Creates a new static renderer class that extends a given renderer.
			 * 
			 * This method can be used with two signatures that are explained below.
			 * In both variants, the returned renderer class inherits all properties (methods, fields)
			 * from the given parent renderer class. Both variants also add an 'extend' method to the
			 * created renderer class that behaves like the new signature of this <code>Renderer.extend</code>
			 * method, but creates subclasses of the new class, not of <code>sap.ui.core.Renderer</code>.
			 * 
			 * <b>New Signature</b><br>
			 * In the new signature variant, two parameters must be given: a qualified name
			 * for the new renderer (its class name), and an optional object literal that contains
			 * methods or fields to be added to the new renderer class.
			 * 
			 * This signature has been designed to resemble the class extension mechanism as
			 * provided by {@link sap.ui.base.Object.extend Object.extend}.
			 * 
			 * <pre>
			 * sap.ui.define(['sap/ui/core/Renderer'],
			 *     function(Renderer) {
			 *     "use strict";
			 * 
			 *     var LabelRenderer = Renderer.extend('sap.m.LabelRenderer', {
			 *         renderer: function(oRM, oControl) {
			 * 
			 *             renderPreamble(oRM, oControl);
			 * 
			 *             // implementation core renderer logic here
			 * 
			 *             renderPreamble(oRM, oControl);
			 * 
			 *         },
			 * 
			 *         renderPreamble : function(oRM, oControl) {
			 *         ...
			 *         },
			 * 
			 *         renderPostamble : function(oRM, oControl) {
			 *         ...
			 *         }
			 * 
			 *     });
			 * 
			 *     return LabelRenderer;
			 * });
			 * </pre>
			 * 
			 * The extension of Renderers works across multiple levels. A FancyLabelRenderer can
			 * extend the above LabelRenderer:
			 * 
			 * <pre>
			 * sap.ui.define(['sap/m/LabelRenderer'],
			 *     function(LabelRenderer) {
			 *     "use strict";
			 * 
			 *     var FancyLabelRenderer = LabelRenderer.extend('sap.mylib.FancyLabelRenderer', {
			 *         renderer: function(oRM, oControl) {
			 * 
			 *             // call base renderer
			 *             LabelRenderer.renderPreamble(oRM, oControl);
			 * 
			 *             // ... do your own fancy rendering here
			 * 
			 *             // call base renderer again
			 *             LabelRenderer.renderPostamble(oRM, oControl);
			 *         }
			 *     });
			 * 
			 *     return FancyLabelRenderer;
			 * });
			 * </pre>
			 * 
			 * <b>Note:</b> the new signature no longer requires the <code>bExport</code> flag to be set for
			 * the enclosing {@link sap.ui.define} call. The Renderer base classes takes care of the necessary
			 * global export of the render. This allows Non-SAP developers to write a renderer that complies with
			 * the documented restriction for <code>sap.ui.define</code> (no use of bExport = true outside
			 * sap.ui.core projects).
			 * 
			 * <b>Deprecated Signature</b><br>
			 * The deprecated old signature expects just one parameter: a renderer that should be extended.
			 * With that signature the renderer can't be exported globally as the name of the renderer class
			 * is not known.
			 * 
			 * For compatibility reasons, the class created by the deprecated signature contains a property
			 * <code>_super</code> that references the parent class. It shouldn't be used by applications / control
			 * developers as it doesn't work reliably for deeper inheritance chains: if the old variant of
			 * <code>Renderer.extend</code> is used on two or more levels of the inheritance hierarchy, the
			 * <code>_super</code> property of the resulting renderer class will always point to the implementation
			 * of the base renderer of the last call to extend. Instead of using <code>this._super</code>, renderer
			 * implementations should use the new signature variant and access the base implementation of a method
			 * via the AMD reference to the base renderer (as shown in the FancyLabelRenderer example above).
			 * @param vName either the name of the new renderer class (new signature) or the base
			 *                              renderer to extend (deprecated signature)
			 * @param oRendererInfo methods and/or properties that should be added to the new renderer class(optional)
			 * @return a new static renderer class that can be enriched further
			 */
			function extend(vName: string|any, oRendererInfo?: any): any;
			/**
			 * Returns the TextAlignment for the provided configuration.
			 * @param oTextAlign the text alignment of the Control
			 * @param oTextDirection the text direction of the Control
			 * @return the actual text alignment that must be set for this environment
			 */
			function getTextAlign(oTextAlign: TextAlign, oTextDirection: TextDirection): string;
		}
	
		/**
		 * The resize handling API provides firing of resize events on all browsers by regularly
		 * checking the width and height of registered DOM elements or controls and firing events accordingly.
		 */
		namespace ResizeHandler {
			/**
			 * Deregisters a previously registered handler for resize events with the given registration ID.
			 * @param sId The registration ID of the handler to deregister. The ID was provided by function {@link sap.ui.core.ResizeHandler.register}
			 *            when the handler was registered.
			 */
			function deregister(sId: string);
			/**
			 * Creates a new subclass of class sap.ui.core.ResizeHandler with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			function extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Registers the given event handler for resize events on the given DOM element or control.
			 * 
			 * <b>Note:</b> This function must not be used before the UI5 framework is initialized.
			 * Please use the {@link sap.ui.core.Core#attachInit init event} of UI5 if you are not sure whether this is the case.
			 * 
			 * The resize handler periodically checks the dimensions of the registered reference. Whenever it detects changes, an event is fired.
			 * Be careful when changing dimensions within the event handler which might cause another resize event and so on.
			 * 
			 * The available parameters of the resize event are:
			 * <ul>
			 * <li><code>oEvent.target</code>: The DOM element of which the dimensions were checked</li>
			 * <li><code>oEvent.size.width</code>: The current width of the DOM element in pixels</li>
			 * <li><code>oEvent.size.height</code>: The current height of the DOM element in pixels</li>
			 * <li><code>oEvent.oldSize.width</code>: The previous width of the DOM element in pixels</li>
			 * <li><code>oEvent.oldSize.height</code>: The previous height of the DOM element in pixels</li>
			 * <li><code>oEvent.control</code>: The control which was given during registration of the event handler (if present)</li>
			 * </ul>
			 * @param oRef The control or the DOM reference for which the given event handler should be registered (beside the window)
			 * @param fHandler The event handler which should be called whenever the size of the given reference is changed.
			 *             The event object is passed as first argument to the event handler. See the description of this function for more details about the available parameters of this event.
			 * @return A registration ID which can be used for deregistering the event handler, see {@link sap.ui.core.ResizeHandler.deregister}.
			 *             If the UI5 framework is not yet initialized <code>null</code> is returned.
			 */
			function register(oRef: any|Control, fHandler: any): string;
		}
	
		namespace theming {
		
			/**
			 * A helper used for (read-only) access to CSS parameters at runtime
			 */
			namespace Parameters {
				/**
				 * Returns the scopes from current theming parameters.
				 * @param bAvoidLoading Whether loading of parameters should be avoided(optional)
				 * @return Scope names
				 */
				// Resticted function _getScopes(bAvoidLoading?: boolean): any[];
				/**
				 * Returns the current value for one or more theming parameters, depending on the given arguments.
				 * <ul>
				 * <li>If no parameter is given a key-value map containing all parameters is returned</li>
				 * <li>If a <code>string</code> is given as first parameter the value is returned as a <code>string</code></li>
				 * <li>If an <code>array</code> is given as first parameter a key-value map containing all parameters from the <code>array</code> is returned</li>
				 * </ul>
				 * <p>The returned key-value maps are a copy so changing values in the map does not have any effect</p>
				 * @param vName the (array with) CSS parameter name(s)
				 * @param oElement Element / control instance to take into account when looking for a parameter value.
				 *                           This can make a difference when a parameter value is overridden in a theme scope set via a CSS class.(optional)
				 * @return the CSS parameter value(s)
				 */
				function get(vName: string|string[], oElement?: sap.ui.core.Element): string|any;
				/**
				 * Returns the active scope(s) for a given control by looking up the hierarchy.
				 * 
				 * The lookup navigates the DOM hierarchy if it's available. Otherwise if controls aren't rendered yet,
				 * it navigates the control hierarchy. By navigating the control hierarchy, inner-html elements
				 * with the respective scope classes can't get recognized as the Custom Style Class API does only for
				 * root elements.
				 * @param oElement element/control instance
				 * @return Two dimensional array with scopes in bottom up order
				 */
				// Resticted function getActiveScopesFor(oElement: any): string[][];
				/**
				 * Resets the CSS parameters which finally will reload the parameters
				 * the next time they are queried via the method <code>get</code>.
				 */
				function reset();
			}
		}
	
		/**
		 * Helper functionality for value state support.
		 */
		namespace ValueStateSupport {
			/**
			 * Appends a generic success, warning or error message to the given tooltip text if the given Element
			 * has a property "valueState" with one of these three states.
			 * @param oElement the Element of which the tooltip needs to be modified
			 * @param sTooltipText the original tooltip text (may be null)
			 * @return the given text, with appended success/warning/error text, if appropriate
			 */
			function enrichTooltip(oElement: Element, sTooltipText: string): string;
			/**
			 * Returns a ValueState object based on the given integer value
			 * 
			 *  0 : ValueState.None
			 *  1 : ValueState.Warning
			 *  2 : ValueState.Success
			 *  3 : ValueState.Error
			 * @param iState the state as an integer
			 * @return the corresponding ValueState object
			 */
			function formatValueState(iState: number): ValueState;
			/**
			 * Returns a generic success, warning or error message if the given Element
			 * has a property "valueState" with one of these three states or the given ValueState
			 * represents one of these states.
			 * @param vValue the Element of which the valueState needs to be checked, or the ValueState explicitly
			 * @return the success/warning/error text, if appropriate; otherwise null
			 */
			function getAdditionalText(vValue: Element|ValueState): string;
		}
	
		namespace Popup {
			/**
			 * Enumeration providing options for docking of some element to another.
			 * "Right" and "Left" will stay the same in RTL mode, but "Begin" and "End" will flip to the other side ("Begin" is "Right" in RTL).
			 */
			type Dock = string;
		}
	
		namespace util {
		
			/**
			 * Utility class to handle files
			 */
			namespace File {
				/**
				 * <p>Triggers a download / save action of the given file.</p>
				 * 
				 * <p>There are limitations for this feature in some browsers:<p>
				 * 
				 * <p><b>Internet Explorer 8 / 9</b><br>
				 * Some file extensions on some operating systems are not working due to a bug in IE.
				 * Therefore 'txt' will be used as file extension if the problem is occurring.</p>
				 * 
				 * <p><b>Safari (OS X / iOS)</b><br>
				 * A new window/tab will be opened. In OS X the user has to manually save the file (CMD + S), choose "page source" and specify a filename.
				 * In iOS the content can be opened in another app (Mail, Notes, ...) or copied to the clipboard.
				 * In case the popup blocker prevents this action, an error will be thrown which can be used to notify the user to disable it.</p>
				 * 
				 * <p><b>Android Browser</b><br>
				 * Not supported</p>
				 * @param sData file content
				 * @param sFileName file name
				 * @param sFileExtension file extension
				 * @param sMimeType file mime-type
				 * @param sCharset file charset
				 */
				function save(sData: string, sFileName: string, sFileExtension: string, sMimeType: string, sCharset: string);
			}
		
			/**
			 * The XML pre-processor for template instructions in XML views.
			 */
			namespace XMLPreprocessor {
			
				interface IContext {
					/**
					 * Returns a context interface for the indicated part in case of the root formatter
					 * of a composite binding. The new interface provides access to the original
					 * settings, but only to the model and path of the indicated part:
					 * <pre>
					 * this.getInterface(i).getSetting(sName) === this.getSetting(sName);
					 * this.getInterface(i).getModel() === this.getModel(i);
					 * this.getInterface(i).getPath() === this.getPath(i);
					 * </pre>
					 * 
					 * If a path is given, the new interface points to the resolved path as follows:
					 * <pre>
					 * this.getInterface(i, "foo/bar").getPath() === this.getPath(i) + "/foo/bar";
					 * this.getInterface(i, "/absolute/path").getPath() === "/absolute/path";
					 * </pre>
					 * A formatter which is not at the root level of a composite binding can also
					 * provide a path, but must not provide an index:
					 * <pre>
					 * this.getInterface("foo/bar").getPath() === this.getPath() + "/foo/bar";
					 * this.getInterface("/absolute/path").getPath() === "/absolute/path";
					 * </pre>
					 * Note that at least one argument must be present.
					 * @param iPart index of part in case of the root formatter of a composite binding(optional)
					 * @param sPath a path, interpreted relative to <code>this.getPath(iPart)</code>(optional)
					 * @return the context interface related to the indicated part
					 */
					getInterface(iPart?: number, sPath?: string): IContext;
					/**
					 * Returns the model related to the current formatter call.
					 * @param iPart index of part in case of the root formatter of a composite binding
					 *   (since 1.31.0)(optional)
					 * @return the model related to the current formatter call, or (since 1.31.0)
					 *   <code>undefined</code> in case of a root formatter if no <code>iPart</code> is
					 *   given or if <code>iPart</code> is out of range
					 */
					getModel(iPart?: number): sap.ui.model.Model;
					/**
					 * Returns the absolute path related to the current formatter call.
					 * @param iPart index of part in case of the root formatter of a composite binding
					 *   (since 1.31.0)(optional)
					 * @return the absolute path related to the current formatter call, or (since 1.31.0)
					 *   <code>undefined</code> in case of a root formatter if no <code>iPart</code> is
					 *   given or if <code>iPart</code> is out of range
					 */
					getPath(iPart?: number): string;
					/**
					 * Returns the value of the setting with the given name which was provided to the
					 * XML template processing.
					 * @param sName the name of the setting
					 * @return the value of the setting
					 */
					getSetting(sName: string): any;
				}
			}
		
			class Export extends sap.ui.core.Control {
				/**
				 * Constructor for a new Export.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Adds some column to the aggregation <code>columns</code>.
				 * @param oColumn the column to add; if empty, nothing is inserted
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				addColumn(oColumn: ExportColumn): Export;
				/**
				 * Adds some row to the aggregation <code>rows</code>.
				 * @param oRow the row to add; if empty, nothing is inserted
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				addRow(oRow: ExportRow): Export;
				/**
				 * Binds aggregation <code>columns</code> to model data.
				 * 
				 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
				 * detailed description of the possible properties of <code>oBindingInfo</code>.
				 * @param oBindingInfo The binding information
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				bindColumns(oBindingInfo: any): Export;
				/**
				 * Binds aggregation <code>rows</code> to model data.
				 * 
				 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
				 * detailed description of the possible properties of <code>oBindingInfo</code>.
				 * @param oBindingInfo The binding information
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				bindRows(oBindingInfo: any): Export;
				/**
				 * Destroys all the columns in the aggregation <code>columns</code>.
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				destroyColumns(): Export;
				/**
				 * Destroys the exportType in the aggregation <code>exportType</code>.
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				destroyExportType(): Export;
				/**
				 * Destroys all the rows in the aggregation <code>rows</code>.
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				destroyRows(): Export;
				/**
				 * Creates a new subclass of class sap.ui.core.util.Export with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Generates the file content and returns a Promise
				 * with the instance as context (this).<br>
				 * The promise will be resolved with the generated content
				 * as a string.
				 * 
				 * <p><b>Please note: The return value was changed from jQuery Promises to standard ES6 Promises.
				 * jQuery specific Promise methods ('done', 'fail', 'always', 'pipe' and 'state') are still available but should not be used.
				 * Please use only the standard methods 'then' and 'catch'!</b></p>
				 * @return Promise object
				 */
				generate(): any;
				/**
				 * Gets content of aggregation <code>columns</code>.
				 * 
				 * Columns for the Export.
				 * @return 
				 */
				getColumns(): ExportColumn[];
				/**
				 * Gets content of aggregation <code>exportType</code>.
				 * 
				 * Type that generates the content.
				 * @return 
				 */
				getExportType(): ExportType;
				/**
				 * Gets content of aggregation <code>rows</code>.
				 * 
				 * Rows of the Export.
				 * @return 
				 */
				getRows(): ExportRow[];
				/**
				 * Checks for the provided <code>sap.ui.core.util.ExportColumn</code> in the aggregation <code>columns</code>.
				 * and returns its index if found or -1 otherwise.
				 * @param oColumn The column whose index is looked for
				 * @return The index of the provided control in the aggregation if found, or -1 otherwise
				 */
				indexOfColumn(oColumn: ExportColumn): number;
				/**
				 * Checks for the provided <code>sap.ui.core.util.ExportRow</code> in the aggregation <code>rows</code>.
				 * and returns its index if found or -1 otherwise.
				 * @param oRow The row whose index is looked for
				 * @return The index of the provided control in the aggregation if found, or -1 otherwise
				 */
				indexOfRow(oRow: ExportRow): number;
				/**
				 * Inserts a column into the aggregation <code>columns</code>.
				 * @param oColumn the column to insert; if empty, nothing is inserted
				 * @param iIndex the <code>0</code>-based index the column should be inserted at; for
				 *              a negative value of <code>iIndex</code>, the column is inserted at position 0; for a value
				 *              greater than the current size of the aggregation, the column is inserted at
				 *              the last position
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				insertColumn(oColumn: ExportColumn, iIndex: number): Export;
				/**
				 * Inserts a row into the aggregation <code>rows</code>.
				 * @param oRow the row to insert; if empty, nothing is inserted
				 * @param iIndex the <code>0</code>-based index the row should be inserted at; for
				 *              a negative value of <code>iIndex</code>, the row is inserted at position 0; for a value
				 *              greater than the current size of the aggregation, the row is inserted at
				 *              the last position
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				insertRow(oRow: ExportRow, iIndex: number): Export;
				/**
				 * Removes all the controls from the aggregation <code>columns</code>.
				 * 
				 * Additionally, it unregisters them from the hosting UIArea.
				 * @return An array of the removed elements (might be empty)
				 */
				removeAllColumns(): ExportColumn[];
				/**
				 * Removes all the controls from the aggregation <code>rows</code>.
				 * 
				 * Additionally, it unregisters them from the hosting UIArea.
				 * @return An array of the removed elements (might be empty)
				 */
				removeAllRows(): ExportRow[];
				/**
				 * Removes a column from the aggregation <code>columns</code>.
				 * @param vColumn The column to remove or its index or id
				 * @return The removed column or <code>null</code>
				 */
				removeColumn(vColumn: number|string|ExportColumn): ExportColumn;
				/**
				 * Removes a row from the aggregation <code>rows</code>.
				 * @param vRow The row to remove or its index or id
				 * @return The removed row or <code>null</code>
				 */
				removeRow(vRow: number|string|ExportRow): ExportRow;
				/**
				 * Generates the file content, triggers a download / save action and
				 * returns a Promise with the instance as context (this).<br>
				 * The promise will be resolved with the generated content
				 * as a string.
				 * <p><b>For information about browser support, see <code>sap.ui.core.util.File.save</code></b></p>
				 * 
				 * <p><b>Please note: The return value was changed from jQuery Promises to standard ES6 Promises.
				 * jQuery specific Promise methods ('done', 'fail', 'always', 'pipe' and 'state') are still available but should not be used.
				 * Please use only the standard methods 'then' and 'catch'!</b></p>
				 * @param sFileName file name, defaults to 'data'(optional)
				 * @return Promise object
				 */
				saveFile(sFileName?: string): any;
				/**
				 * Sets the aggregated <code>exportType</code>.
				 * @param oExportType The exportType to set
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setExportType(oExportType: ExportType): Export;
				/**
				 * Unbinds aggregation <code>columns</code> from model data.
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				unbindColumns(): Export;
				/**
				 * Unbinds aggregation <code>rows</code> from model data.
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				unbindRows(): Export;
			}
		
			class ExportCell extends sap.ui.core.Element {
				/**
				 * Constructor for a new ExportCell.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: sap.ui.core.util.ExportCellMetadata);
				/**
				 * Constructor for a new ExportCell.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @note Any overloads to support not documented metadata
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Creates a new subclass of class sap.ui.core.util.ExportCell with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Gets current value of property <code>content</code>.
				 * 
				 * Cell content.
				 * @return Value of property <code>content</code>
				 */
				getContent(): string;
				/**
				 * Sets a new value for property <code>content</code>.
				 * 
				 * Cell content.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sContent New value for property <code>content</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setContent(sContent: string): ExportCell;
			}
		
			class ExportColumn extends sap.ui.base.ManagedObject {
				/**
				 * Constructor for a new ExportCell.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: sap.ui.core.util.ExportColumnMetadata);
				/**
				 * Constructor for a new ExportCell.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @note Any overloads to support not documented metadata
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Destroys the template in the aggregation <code>template</code>.
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				destroyTemplate(): ExportColumn;
				/**
				 * Creates a new subclass of class sap.ui.core.util.ExportColumn with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Gets current value of property <code>name</code>.
				 * 
				 * Column name.
				 * @return Value of property <code>name</code>
				 */
				getName(): string;
				/**
				 * Gets content of aggregation <code>template</code>.
				 * 
				 * Cell template for column.
				 * @return 
				 */
				getTemplate(): ExportCell;
				/**
				 * Sets a new value for property <code>name</code>.
				 * 
				 * Column name.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sName New value for property <code>name</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setName(sName: string): ExportColumn;
				/**
				 * Sets the aggregated <code>template</code>.
				 * @param oTemplate The template to set
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setTemplate(oTemplate: ExportCell): ExportColumn;
			}
		
			class ExportRow extends sap.ui.base.ManagedObject {
				/**
				 * Constructor for a new ExportRow.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Adds some cell to the aggregation <code>cells</code>.
				 * @param oCell the cell to add; if empty, nothing is inserted
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				addCell(oCell: ExportCell): ExportRow;
				/**
				 * Destroys all the cells in the aggregation <code>cells</code>.
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				destroyCells(): ExportRow;
				/**
				 * Creates a new subclass of class sap.ui.core.util.ExportRow with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Gets content of aggregation <code>cells</code>.
				 * 
				 * Cells for the Export.
				 * @return 
				 */
				getCells(): ExportCell[];
				/**
				 * Checks for the provided <code>sap.ui.core.util.ExportCell</code> in the aggregation <code>cells</code>.
				 * and returns its index if found or -1 otherwise.
				 * @param oCell The cell whose index is looked for
				 * @return The index of the provided control in the aggregation if found, or -1 otherwise
				 */
				indexOfCell(oCell: ExportCell): number;
				/**
				 * Inserts a cell into the aggregation <code>cells</code>.
				 * @param oCell the cell to insert; if empty, nothing is inserted
				 * @param iIndex the <code>0</code>-based index the cell should be inserted at; for
				 *              a negative value of <code>iIndex</code>, the cell is inserted at position 0; for a value
				 *              greater than the current size of the aggregation, the cell is inserted at
				 *              the last position
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				insertCell(oCell: ExportCell, iIndex: number): ExportRow;
				/**
				 * Removes all the controls from the aggregation <code>cells</code>.
				 * 
				 * Additionally, it unregisters them from the hosting UIArea.
				 * @return An array of the removed elements (might be empty)
				 */
				removeAllCells(): ExportCell[];
				/**
				 * Removes a cell from the aggregation <code>cells</code>.
				 * @param vCell The cell to remove or its index or id
				 * @return The removed cell or <code>null</code>
				 */
				removeCell(vCell: number|string|ExportCell): ExportCell;
			}
		
			class ExportType extends sap.ui.base.ManagedObject {
				/**
				 * Constructor for a new ExportType.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: sap.ui.core.util.ExportTypeMetadata);
				/**
				 * Constructor for a new ExportType.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @note Any overloads to support not documented metadata
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Handles the generation process of the file.<br>
				 * @param oExport export instance
				 * @return content
				 */
				_generate(oExport: Export): string;
				/**
				 * Creates a cell "generator" (inspired by ES6 Generators)
				 * @return generator
				 */
				cellGenerator(): any;
				/**
				 * Creates a column "generator" (inspired by ES6 Generators)
				 * @return generator
				 */
				columnGenerator(): any;
				/**
				 * Creates a new subclass of class sap.ui.core.util.ExportType with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Generates the file content.<br>
				 * Should be implemented by the individual types!
				 * @return content
				 */
				generate(): string;
				/**
				 * Gets current value of property <code>charset</code>.
				 * 
				 * Charset.
				 * @return Value of property <code>charset</code>
				 */
				getCharset(): string;
				/**
				 * Returns the number of columns.
				 * @return count
				 */
				getColumnCount(): number;
				/**
				 * Gets current value of property <code>fileExtension</code>.
				 * 
				 * File extension.
				 * @return Value of property <code>fileExtension</code>
				 */
				getFileExtension(): string;
				/**
				 * Gets current value of property <code>mimeType</code>.
				 * 
				 * MIME type.
				 * @return Value of property <code>mimeType</code>
				 */
				getMimeType(): string;
				/**
				 * Returns the number of rows.
				 * @return count
				 */
				getRowCount(): number;
				/**
				 * Creates a row "generator" (inspired by ES6 Generators)
				 * @return generator
				 */
				rowGenerator(): any;
				/**
				 * Sets a new value for property <code>charset</code>.
				 * 
				 * Charset.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sCharset New value for property <code>charset</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setCharset(sCharset: string): ExportType;
				/**
				 * Sets a new value for property <code>fileExtension</code>.
				 * 
				 * File extension.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sFileExtension New value for property <code>fileExtension</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setFileExtension(sFileExtension: string): ExportType;
				/**
				 * Sets a new value for property <code>mimeType</code>.
				 * 
				 * MIME type.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sMimeType New value for property <code>mimeType</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setMimeType(sMimeType: string): ExportType;
			}
		
			class ExportTypeCSV extends ExportType {
				/**
				 * Constructor for a new ExportTypeCSV.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: sap.ui.core.util.ExportTypeCSVMetadata);
				/**
				 * Constructor for a new ExportTypeCSV.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @note Any overloads to support not documented metadata
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Creates a new subclass of class sap.ui.core.util.ExportTypeCSV with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.util.ExportType.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Generates the file content.
				 * @return content
				 */
				generate(): string;
				/**
				 * Gets current value of property <code>separatorChar</code>.
				 * 
				 * Separator char.
				 * 
				 * Value needs to be exactly one character or empty for default.
				 * 
				 * Default value is <code>,</code>.
				 * @return Value of property <code>separatorChar</code>
				 */
				getSeparatorChar(): string;
				/**
				 * Setter for property <code>separatorChar</code>.
				 * 
				 * Value needs to be exactly one character or empty for default. Default value is ','.
				 * @param sSeparatorChar new value for property <code>separatorChar</code>
				 * @return <code>this</code> to allow method chaining
				 */
				setSeparatorChar(sSeparatorChar: string): ExportTypeCSV;
			}
		
			class MockServer extends sap.ui.base.ManagedObject {
				/**
				 * Creates a mocked server. This helps to mock all or some backend calls, e.g. for OData/JSON Models or simple XHR calls, without
				 * changing the application code. This class can also be used for qunit tests.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param sId id for the new server object; generated automatically if no non-empty id is given
				 *      Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!(optional)
				 * @param mSettings optional map/JSON-object with initial property values, aggregated objects etc. for the new object(optional)
				 * @param oScope scope object for resolving string based type and formatter references in bindings(optional)
				 */
				constructor(sId?: string, mSettings?: sap.ui.core.util.MockServerMetadata, oScope?: any);
				/**
				 * Creates a mocked server. This helps to mock all or some backend calls, e.g. for OData/JSON Models or simple XHR calls, without
				 * changing the application code. This class can also be used for qunit tests.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @note Any overloads to support not documented metadata
				 * @param sId id for the new server object; generated automatically if no non-empty id is given
				 *      Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!(optional)
				 * @param mSettings optional map/JSON-object with initial property values, aggregated objects etc. for the new object(optional)
				 * @param oScope scope object for resolving string based type and formatter references in bindings(optional)
				 */
				constructor(sId?: string, mSettings?: any, oScope?: any);
				/**
				 * Enum for the method.
				 */
				HTTPMETHOD: any;
				/**
				 * Attaches an event handler to be called after the built-in request processing of the mock server
				 * @param event type according to HTTP Method
				 * @param fnCallback the name of the function that will be called at this exit
				 * The callback function exposes an event with parameters, depending on the type of the request.
				 * oEvent.getParameters() lists the parameters as per the request. Examples are:
				 * oXhr : the request object; oFilteredData : the mock data entries that are about to be returned in the response; oEntry : the mock data entry that is about to be returned in the response;
				 * @param sEntitySet (optional) the name of the entity set
				 */
				attachAfter(event: string, fnCallback: any, sEntitySet: string);
				/**
				 * Attaches an event handler to be called before the built-in request processing of the mock server
				 * @param event type according to HTTP Method
				 * @param fnCallback the name of the function that will be called at this exit.
				 * The callback function exposes an event with parameters, depending on the type of the request.
				 * oEvent.getParameters() lists the parameters as per the request. Examples are:
				 * oXhr : the request object; sUrlParams : the URL parameters of the request; sKeys : key properties of the requested entry; sNavProp/sNavName : name of navigation
				 * @param sEntitySet (optional) the name of the entity set
				 */
				attachBefore(event: string, fnCallback: any, sEntitySet: string);
				/**
				 * Cleans up the resources associated with this object and all its aggregated children.
				 * 
				 * After an object has been destroyed, it can no longer be used in!
				 * 
				 * Applications should call this method if they don't need the object any longer.
				 * @param bSuppressInvalidate if true, this ManagedObject is not marked as changed(optional)
				 */
				destroy(bSuppressInvalidate?: boolean);
				/**
				 * Destructor method for objects
				 * @note Overload from base type sap.ui.base.Object
				 */
				destroy();
				/**
				 * Removes a previously attached event handler
				 * @param event type according to HTTP Method
				 * @param fnCallback the name of the function that will be called at this exit
				 * @param sEntitySet (optional) the name of the entity set
				 */
				detachAfter(event: string, fnCallback: any, sEntitySet: string);
				/**
				 * Removes a previously attached event handler
				 * @param event type according to HTTP Method
				 * @param fnCallback the name of the function that will be called at this exit
				 * @param sEntitySet (optional) the name of the entity set
				 */
				detachBefore(event: string, fnCallback: any, sEntitySet: string);
				/**
				 * Creates a new subclass of class sap.ui.core.util.MockServer with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Returns the data model of the given EntitySet name.
				 * @param sEntitySetName EntitySet name
				 * @return data model of the given EntitySet
				 */
				getEntitySetData(sEntitySetName: any): any[];
				/**
				 * Getter for property <code>requests</code>.
				 * 
				 * Default value is <code>[]</code>
				 * @return the value of property <code>rootUri</code>
				 */
				getRequests(): any[];
				/**
				 * Getter for property <code>rootUri</code>.
				 * 
				 * Default value is empty/<code>undefined</code>
				 * @return the value of property <code>rootUri</code>
				 */
				getRootUri(): string;
				/**
				 * Returns whether the server is started or not.
				 * @return whether the server is started or not.
				 */
				isStarted(): boolean;
				/**
				 * Sets the data of the given EntitySet name with the given array.
				 * @param sEntitySetName EntitySet name
				 * @param aData 
				 */
				setEntitySetData(sEntitySetName: any, aData: any);
				/**
				 * Setter for property <code>requests</code>.
				 * 
				 * Default value is is <code>[]</code>
				 * 
				 * Each array entry should consist of an array with the following properties / values:
				 * 
				 * <ul>
				 * <li><b>method <string>: "GET"|"POST"|"DELETE|"PUT"</b>
				 * <br>
				 * (any HTTP verb)
				 * </li>
				 * <li><b>path <string>: "/path/to/resource"</b>
				 * <br>
				 * The path is converted to a regular expression, so it can contain normal regular expression syntax.
				 * All regular expression groups are forwarded as arguments to the <code>response</code> function.
				 * In addition to this, parameters can be written in this notation: <code>:param</code>. These placeholder will be replaced by regular expression groups.
				 * </li>
				 * <li><b>response <function>: function(xhr, param1, param2, ...) { }</b>
				 * <br>
				 * The xhr object can be used to respond on the request. Supported methods are:
				 * <br>
				 * <code>xhr.respond(iStatusCode, mHeaders, sBody)</code>
				 * <br>
				 * <code>xhr.respondJSON(iStatusCode, mHeaders, oJsonObjectOrString)</code>. By default a JSON header is set for response header
				 * <br>
				 * <code>xhr.respondXML(iStatusCode, mHeaders, sXmlString)</code>. By default a XML header is set for response header
				 * <br>
				 * <code>xhr.respondFile(iStatusCode, mHeaders, sFileUrl)</code>. By default the mime type of the file is set for response header
				 * </li>
				 * </ul>
				 * @param requests new value for property <code>requests</code>
				 */
				setRequests(requests: any[]);
				/**
				 * Setter for property <code>rootUri</code>. All request path URI are prefixed with this root URI if set.
				 * 
				 * Default value is empty/<code>undefined</code>
				 * @param rootUri new value for property <code>rootUri</code>
				 */
				setRootUri(rootUri: string);
				/**
				 * Simulates an existing OData service by sepcifiying the metadata URL and the base URL for the mockdata. The server
				 * configures the request handlers depending on the service metadata. The mockdata needs to be stored individually for
				 * each entity type in a separate JSON file. The name of the JSON file needs to match the name of the entity type. If
				 * no base url for the mockdata is specified then the mockdata are generated from the metadata
				 * @param sMetadataUrl url to the service metadata document
				 * @param vMockdataSettings (optional) base url which contains the path to the mockdata, or an object which contains the following properties: sMockdataBaseUrl, bGenerateMissingMockData, aEntitySetsNames. See below for descriptions of these parameters. Ommit this parameter to produce random mock data based on the service metadata.(optional)
				 */
				simulate(sMetadataUrl: string, vMockdataSettings?: string|any);
				/**
				 * Starts the server.
				 */
				start();
				/**
				 * Stops the server.
				 */
				stop();
			}
		
			namespace serializer {
			
				namespace delegate {
				
					class Delegate extends sap.ui.base.EventProvider {
						/**
						 * Abstract serializer delegate class. All delegates must extend from this class and implement the abstract methods.
						 */
						constructor();
						/**
						 * Creates a new subclass of class sap.ui.core.util.serializer.delegate.Delegate with name <code>sClassName</code>
						 * and enriches it with the information contained in <code>oClassInfo</code>.
						 * 
						 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
						 * @param sClassName Name of the class being created
						 * @param oClassInfo Object literal with information about the class(optional)
						 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
						 * @return Created class / constructor function
						 */
						extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
					}
				
					class HTML extends Delegate {
						/**
						 * HTML serializer delegate class. Called by the serializer instance.
						 * @param fnGetControlId delegate function which returns the control id(optional)
						 * @param fnGetEventHandlerName delegate function which returns the event handler name(optional)
						 */
						constructor(fnGetControlId?: any, fnGetEventHandlerName?: any);
						/**
						 * Creates a new subclass of class sap.ui.core.util.serializer.delegate.HTML with name <code>sClassName</code>
						 * and enriches it with the information contained in <code>oClassInfo</code>.
						 * 
						 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.util.serializer.delegate.Delegate.extend}.
						 * @param sClassName Name of the class being created
						 * @param oClassInfo Object literal with information about the class(optional)
						 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
						 * @return Created class / constructor function
						 */
						extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
					}
				
					class XML extends Delegate {
						/**
						 * XML serializer delegate class. Called by the serializer instance.
						 * @param sDefaultXmlNamespace defines the default XML namespace(optional)
						 * @param fnGetControlId delegate function which returns the control id(optional)
						 * @param fnGetEventHandlerName delegate function which returns the event handler name(optional)
						 * @param fnMemorizePackage a delegate function to memorize the control packages(optional)
						 */
						constructor(sDefaultXmlNamespace?: string, fnGetControlId?: any, fnGetEventHandlerName?: any, fnMemorizePackage?: any);
						/**
						 * Creates a new subclass of class sap.ui.core.util.serializer.delegate.XML with name <code>sClassName</code>
						 * and enriches it with the information contained in <code>oClassInfo</code>.
						 * 
						 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.util.serializer.delegate.Delegate.extend}.
						 * @param sClassName Name of the class being created
						 * @param oClassInfo Object literal with information about the class(optional)
						 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
						 * @return Created class / constructor function
						 */
						extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
					}
				}
			
				class HTMLViewSerializer extends sap.ui.base.EventProvider {
					/**
					 * HTML view serializer class. Serializes a given view.
					 * @param oView the view to serialize
					 * @param oWindow the window object. Default is the window object the instance of the serializer is running in
					 * @param fnGetControlId delegate function which returns the control id
					 * @param fnGetEventHandlerName delegate function which returns the event handler name
					 */
					constructor(oView: sap.ui.core.mvc.HTMLView, oWindow: any, fnGetControlId: any, fnGetEventHandlerName: any);
					/**
					 * Creates a new subclass of class sap.ui.core.util.serializer.HTMLViewSerializer with name <code>sClassName</code>
					 * and enriches it with the information contained in <code>oClassInfo</code>.
					 * 
					 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
					 * @param sClassName Name of the class being created
					 * @param oClassInfo Object literal with information about the class(optional)
					 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
					 * @return Created class / constructor function
					 */
					extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				}
			
				class Serializer extends sap.ui.base.EventProvider {
					/**
					 * Serializer class. Iterates over all controls and call a given serializer delegate.
					 * @param oRootControl the root control to serialize
					 * @param serializeDelegate the serializer delegate. Has to implement start/middle/end methods.
					 * @param bSkipRoot whether to skip the root node or not
					 * @param fnSkipAggregations whether to skip aggregations
					 * @param fnSkipElement whether to skip an element
					 */
					constructor(oRootControl: sap.ui.core.Control|sap.ui.core.UIArea, serializeDelegate: any, bSkipRoot: boolean, fnSkipAggregations: any, fnSkipElement: any);
					/**
					 * Creates a new subclass of class sap.ui.core.util.serializer.Serializer with name <code>sClassName</code>
					 * and enriches it with the information contained in <code>oClassInfo</code>.
					 * 
					 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
					 * @param sClassName Name of the class being created
					 * @param oClassInfo Object literal with information about the class(optional)
					 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
					 * @return Created class / constructor function
					 */
					extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				}
			
				class ViewSerializer extends sap.ui.base.EventProvider {
					/**
					 * View serializer class. Iterates over all controls and serializes all found views by calling the corresponding view type serializer.
					 * @param oRootControl the root control to serialize
					 * @param oWindow the window object. Default is the window object the instance of the serializer is running in.(optional)
					 * @param sDefaultXmlNamespace defines the default xml namespace(optional)
					 */
					constructor(oRootControl: sap.ui.core.Control|sap.ui.core.UIArea, oWindow?: any, sDefaultXmlNamespace?: string);
					/**
					 * Creates a new subclass of class sap.ui.core.util.serializer.ViewSerializer with name <code>sClassName</code>
					 * and enriches it with the information contained in <code>oClassInfo</code>.
					 * 
					 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
					 * @param sClassName Name of the class being created
					 * @param oClassInfo Object literal with information about the class(optional)
					 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
					 * @return Created class / constructor function
					 */
					extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				}
			
				class XMLViewSerializer extends sap.ui.base.EventProvider {
					/**
					 * XML view serializer class. Serializes a given view.
					 * @param oView the view to serialize
					 * @param oWindow the window object. Default is the window object the instance of the serializer is running in
					 * @param sDefaultXmlNamespace defines the default XML namespace
					 * @param fnGetControlId delegate function which returns the control id
					 * @param fnGetEventHandlerName delegate function which returns the event handler name
					 */
					constructor(oView: sap.ui.core.mvc.XMLView, oWindow: any, sDefaultXmlNamespace: string, fnGetControlId: any, fnGetEventHandlerName: any);
					/**
					 * Creates a new subclass of class sap.ui.core.util.serializer.XMLViewSerializer with name <code>sClassName</code>
					 * and enriches it with the information contained in <code>oClassInfo</code>.
					 * 
					 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
					 * @param sClassName Name of the class being created
					 * @param oClassInfo Object literal with information about the class(optional)
					 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
					 * @return Created class / constructor function
					 */
					extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				}
			}
		
			interface ExportCellMetadata {
				/**
				 * Cell content.
				 */
				content?: string;
			}
		
			interface ExportColumnMetadata {
				/**
				 * Column name.
				 */
				name?: string;
			}
		
			interface ExportTypeMetadata {
				/**
				 * File extension.
				 */
				fileExtension?: string;
				/**
				 * MIME type.
				 */
				mimeType?: string;
				/**
				 * Charset.
				 */
				charset?: string;
			}
		
			interface ExportTypeCSVMetadata extends sap.ui.core.util.ExportTypeMetadata {
				/**
				 * Separator char.
				 * 
				 * Value needs to be exactly one character or empty for default.
				 * @default ,
				 */
				separatorChar?: string;
			}
		
			interface MockServerMetadata {
				/**
				 * Getter for property <code>rootUri</code>.
				 * 
				 * Default value is empty/<code>undefined</code>
				 */
				rootUri?: string;
				/**
				 * Getter for property <code>requests</code>.
				 * 
				 * Default value is <code>[]</code>
				 * @default []
				 */
				requests?: any[];
			}
		}
	
		namespace ws {
		
			namespace SapPcpWebSocket {
			
				/**
				 * Protocol versions.<br>
				 * One (or more) of these have to be selected to create a SapPcpWebSocket connection
				 * (or no protocol at all).
				 */
				namespace SUPPORTED_PROTOCOLS {
					/**
					 * Protocol v10.pcp.sap.com
					 */
					var v10: any;
				}
			}
		
			class ReadyState {
				/**
				 * The connection has been closed or could not be opened.
				 */
				static CLOSED: any;
				/**
				 * The connection is going through the closing handshake.
				 */
				static CLOSING: any;
				/**
				 * The connection has not yet been established.
				 */
				static CONNECTING: any;
				/**
				 * The WebSocket connection is established and communication is possible.
				 */
				static OPEN: any;
			}
		
			class SapPcpWebSocket extends WebSocket {
				/**
				 * Creates a new WebSocket connection and uses the pcp-protocol for communication.
				 * @param sUrl relative or absolute URL for WebSocket connection.
				 * @param aProtocols array of protocols as strings, a single protocol as a string.
				 * Protocol(s) should be selected from {@link sap.ui.core.ws.SapPcpWebSocket.SUPPORTED_PROTOCOLS}.(optional)
				 */
				constructor(sUrl: string, aProtocols?: any[]);
				/**
				 * Creates a new subclass of class sap.ui.core.ws.SapPcpWebSocket with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.ws.WebSocket.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Fire event 'message' to attached listeners.
				 * @param mArguments the arguments to pass along with the event.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				fireMessage(mArguments?: any): SapPcpWebSocket;
				/**
				 * Fire event 'message' to attached listeners.
				 * @note Overload from base type sap.ui.core.ws.WebSocket
				 * @param mArguments the arguments to pass along with the event.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				fireMessage(mArguments?: any): WebSocket;
				/**
				 * Sends a message and optional pcp-header-fields using the pcp-protocol.<br>
				 * <br>
				 * If the connection is not yet opened, the message will be queued and sent
				 * when the connection is established.
				 * @param message message to send
				 * @param oPcpFields additional pcp-fields as key-value map(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				send(message: string|any, oPcpFields?: any): SapPcpWebSocket;
				/**
				 * Sends a message.<br>
				 * <br>
				 * If the connection is not yet opened, the message will be queued and sent
				 * when the connection is established.
				 * @note Overload from base type sap.ui.core.ws.WebSocket
				 * @param sMessage Message to send
				 * @return <code>this</code> to allow method chaining
				 */
				send(sMessage: string): WebSocket;
			}
		
			class WebSocket extends sap.ui.base.EventProvider {
				/**
				 * Creates a new WebSocket connection.
				 * @param sUrl relative or absolute URL for WebSocket connection.
				 * @param aProtocols array of protocols as strings, a single protocol as a string(optional)
				 */
				constructor(sUrl: string, aProtocols?: any[]);
				/**
				 * Attach event-handler <code>fnFunction</code> to the 'close' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
				 * @param oData The object, that should be passed along with the event-object when firing the event.
				 * @param fnFunction The function to call, when the event occurs. This function will be called on the
				 *            oListener-instance (if present) or in a 'static way'.
				 * @param oListener Object on which to call the given function. If empty, this WebSocket is used.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				attachClose(oData: any, fnFunction: any, oListener?: any): WebSocket;
				/**
				 * Attach event-handler <code>fnFunction</code> to the 'error' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
				 * @param oData The object, that should be passed along with the event-object when firing the event.
				 * @param fnFunction The function to call, when the event occurs. This function will be called on the
				 *            oListener-instance (if present) or in a 'static way'.
				 * @param oListener Object on which to call the given function. If empty, this WebSocket is used.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				attachError(oData: any, fnFunction: any, oListener?: any): WebSocket;
				/**
				 * Attach event-handler <code>fnFunction</code> to the 'message' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
				 * @param oData The object, that should be passed along with the event-object when firing the event.
				 * @param fnFunction The function to call, when the event occurs. This function will be called on the
				 *            oListener-instance (if present) or in a 'static way'.
				 * @param oListener Object on which to call the given function. If empty, this WebSocket is used.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				attachMessage(oData: any, fnFunction: any, oListener?: any): WebSocket;
				/**
				 * Attach event-handler <code>fnFunction</code> to the 'open' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
				 * @param oData The object, that should be passed along with the event-object when firing the event.
				 * @param fnFunction The function to call, when the event occurs. This function will be called on the
				 *            oListener-instance (if present) or in a 'static way'.
				 * @param oListener Object on which to call the given function. If empty, this WebSocket is used.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				attachOpen(oData: any, fnFunction: any, oListener?: any): WebSocket;
				/**
				 * Closes the connection.
				 * @param iCode Status code that explains why the connection is closed. Must be either 1000, or between 3000 and 4999 (default 1000)(optional)
				 * @param sReason Closing reason as a string(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				close(iCode?: number, sReason?: string): WebSocket;
				/**
				 * Detach event-handler <code>fnFunction</code> from the 'close' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
				 * 
				 * The passed function and listener object must match the ones previously used for event registration.
				 * @param fnFunction The function to call, when the event occurs.
				 * @param oListener Object on which the given function had to be called.
				 * @return <code>this</code> to allow method chaining
				 */
				detachClose(fnFunction: any, oListener: any): WebSocket;
				/**
				 * Detach event-handler <code>fnFunction</code> from the 'error' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
				 * 
				 * The passed function and listener object must match the ones previously used for event registration.
				 * @param fnFunction The function to call, when the event occurs.
				 * @param oListener Object on which the given function had to be called.
				 * @return <code>this</code> to allow method chaining
				 */
				detachError(fnFunction: any, oListener: any): WebSocket;
				/**
				 * Detach event-handler <code>fnFunction</code> from the 'message' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
				 * 
				 * The passed function and listener object must match the ones previously used for event registration.
				 * @param fnFunction The function to call, when the event occurs.
				 * @param oListener Object on which the given function had to be called.
				 * @return <code>this</code> to allow method chaining
				 */
				detachMessage(fnFunction: any, oListener: any): WebSocket;
				/**
				 * Detach event-handler <code>fnFunction</code> from the 'open' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
				 * 
				 * The passed function and listener object must match the ones previously used for event registration.
				 * @param fnFunction The function to call, when the event occurs.
				 * @param oListener Object on which the given function had to be called.
				 * @return <code>this</code> to allow method chaining
				 */
				detachOpen(fnFunction: any, oListener: any): WebSocket;
				/**
				 * Creates a new subclass of class sap.ui.core.ws.WebSocket with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Fire event 'close' to attached listeners.
				 * @param mArguments the arguments to pass along with the event.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				fireClose(mArguments?: any): WebSocket;
				/**
				 * Fire event 'error' to attached listeners.
				 * @param mArguments the arguments to pass along with the event.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				fireError(mArguments?: any): WebSocket;
				/**
				 * Fire event 'message' to attached listeners.
				 * @param mArguments the arguments to pass along with the event.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				fireMessage(mArguments?: any): WebSocket;
				/**
				 * Fire event 'open' to attached listeners.
				 * @param mArguments the arguments to pass along with the event.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				fireOpen(mArguments?: any): WebSocket;
				/**
				 * 
				 */
				getInterface();
				/**
				 * Returns the public interface of the object.
				 * @note Overload from base type sap.ui.base.Object
				 * @return the public interface of the object
				 */
				getInterface(): sap.ui.base.Interface;
				/**
				 * Getter for the protocol selected by the server once the connection is open.
				 * @return protocol
				 */
				getProtocol(): string;
				/**
				 * Getter for WebSocket readyState.
				 * @return readyState
				 */
				getReadyState(): ReadyState;
				/**
				 * Sends a message.<br>
				 * <br>
				 * If the connection is not yet opened, the message will be queued and sent
				 * when the connection is established.
				 * @param sMessage Message to send
				 * @return <code>this</code> to allow method chaining
				 */
				send(sMessage: string): WebSocket;
			}
		}
	
		class AccessibleLandmarkRole {
			/**
			 * Represents the ARIA role <code>banner</code>.
			 * 
			 * A banner usually appears at the top of the page and typically spans the full width.
			 */
			static Banner: string;
			/**
			 * Represents the ARIA role <code>complementary</code>.
			 * 
			 * A section of the page, designed to be complementary to the main content at a similar level in the DOM hierarchy.
			 */
			static Complementary: string;
			/**
			 * Represents the ARIA role <code>main</code>.
			 * 
			 * The main content of a page.
			 */
			static Main: string;
			/**
			 * Represents the ARIA role <code>navigation</code>.
			 * 
			 * A region that contains a collection of items and objects that, as a whole, combine to create a navigation facility.
			 */
			static Navigation: string;
			/**
			 * No explicit role is applicable.
			 * 
			 * The interpretation of this value depends on the control / element which defines a property with this type.
			 * Normally this value means that no accessible landmark should be written.
			 */
			static None: string;
			/**
			 * Represents the ARIA role <code>region</code>.
			 * 
			 * A section of a page, that is important enough to be included in a page summary or table of contents.
			 */
			static Region: string;
			/**
			 * Represents the ARIA role <code>search</code>.
			 * 
			 * A region that contains a collection of items and objects that, as a whole, combine to create a search facility.
			 */
			static Search: string;
		}
	
		class AccessibleRole {
			/**
			 * A message with an alert or error information.
			 */
			static Alert: string;
			/**
			 * A separate window with an alert or error information.
			 */
			static AlertDialog: string;
			/**
			 * A software unit executing a set of tasks for the user.
			 */
			static Application: string;
			/**
			 * Usually defined as the advertisement at the top of a web page.
			 * The banner content typically contains the site or company logo, or other key advertisements.
			 */
			static Banner: string;
			/**
			 * Allows user-triggered actions.
			 */
			static Button: string;
			/**
			 * A control that has three possible values: true, false, mixed.
			 */
			static Checkbox: string;
			/**
			 * A table cell containing header information for a column.
			 */
			static ColumnHeader: string;
			/**
			 * Allows selecting an item from a list, or to enter data directly in the input field.
			 */
			static Combobox: string;
			/**
			 * Information about the content on the page. Examples are footnotes, copyrights, or links to privacy statements.
			 */
			static ContentInfo: string;
			/**
			 * The content of the associated element represents a definition.
			 * If there is a definition element within the content, this one represents the term being defined.
			 */
			static Definition: string;
			/**
			 * Descriptive content for a page element.
			 */
			static Description: string;
			/**
			 * A small window that is designed to interrupt the current application processing
			 * in order to inform the user and to get some response.
			 */
			static Dialog: string;
			/**
			 * A list of references to members of a single group.
			 */
			static Directory: string;
			/**
			 * Content that contains related information, such as a book.
			 */
			static Document: string;
			/**
			 * Contains cells of tabular data arranged in rows and columns, for example in a table.
			 */
			static Grid: string;
			/**
			 * A table cell in a grid where the cells can be active, editable, and selectable.
			 * Cells may have functional relationships to controls, for example.
			 */
			static GridCell: string;
			/**
			 * A section of user interface objects.
			 */
			static Group: string;
			/**
			 * A heading for a section of the page.
			 */
			static Heading: string;
			/**
			 * A container for a collection of elements that form an image.
			 */
			static Img: string;
			/**
			 * An interactive reference to a resource.
			 */
			static Link: string;
			/**
			 * A container for non-interactive list items which are the children of the list.
			 */
			static List: string;
			/**
			 * A widget that allows the user to select one or more items from a list.
			 * The items within the list are static and can contain images.
			 */
			static Listbox: string;
			/**
			 * A single item in a list.
			 */
			static ListItem: string;
			/**
			 * An area where new information is added, or old information disappears.
			 * Information types are chat logs, messaging, or error logs, for example.
			 * The log contains a sequence: New information is always added to the end of the log.
			 */
			static Log: string;
			/**
			 * Defines the main content of a document.
			 */
			static Main: string;
			/**
			 * Is used to scroll text across the page.
			 */
			static Marquee: string;
			/**
			 * Offers a list of choices to the user.
			 */
			static Menu: string;
			/**
			 * A container for menu items where each item may activate a submenu.
			 */
			static Menubar: string;
			/**
			 * A child in a menu.
			 */
			static MenuItem: string;
			/**
			 * A checkable menu item (tri-state).
			 */
			static MenuItemCheckbox: string;
			/**
			 * A menu item which is part of a group of menuitemradio roles.
			 */
			static MenuItemRadio: string;
			/**
			 * A collection of links suitable for use when navigating the document or related documents.
			 */
			static Navigation: string;
			/**
			 * The content is parenthetic or ancillary to the main content of the resource.
			 */
			static Note: string;
			/**
			 * A selectable item in a list represented by a select.
			 */
			static Option: string;
			/**
			 * An element whose role is presentational does not need to be mapped to the accessibility API.
			 */
			static Presentation: string;
			/**
			 * Shows the execution progress in applications providing functions that take a long time.
			 */
			static ProgressBar: string;
			/**
			 * An option in single-select list. Only one radio control in a radiogroup can be selected at the same time.
			 */
			static Radio: string;
			/**
			 * A group of radio controls.
			 */
			static RadioGroup: string;
			/**
			 * A large section on the web page.
			 */
			static Region: string;
			/**
			 * A row of table cells.
			 */
			static Row: string;
			/**
			 * A table cell containing header information for a row.
			 */
			static RowHeader: string;
			/**
			 * A search section of a web document. In many cases, this is a form used to submit search requests about the site,
			 * or a more general Internet wide search service.
			 */
			static Search: string;
			/**
			 * A unique section of the document. In the case of a portal, this may include time display, weather forecast,
			 * or stock price.
			 */
			static Secondary: string;
			/**
			 * Indicates that the element contains content that is related to the main content of the page.
			 */
			static SeeAlso: string;
			/**
			 * A line or bar that separates sections of content.
			 */
			static Separator: string;
			/**
			 * A user input where the user selects an input in a given range. This form of range expects an analogous keyboard
			 * interface.
			 */
			static Slider: string;
			/**
			 * Allows users to select a value from a list of given entries where exactly one value is displayed at runtime, and
			 * the other ones can be displayed by scrolling using the arrow up and arrow down key.
			 */
			static SpinButton: string;
			/**
			 * A container for processing advisory information.
			 */
			static Status: string;
			/**
			 * A header for a tab panel.
			 */
			static Tab: string;
			/**
			 * A list of tabs which are references to tab panels.
			 */
			static Tablist: string;
			/**
			 * A container for the resources associated with a tab.
			 */
			static Tabpanel: string;
			/**
			 * Inputs that allow free-form text as their value.
			 */
			static Textbox: string;
			/**
			 * A numerical counter which indicates an amount of elapsed time from a start point,
			 * or of the time remaining until a certain end point.
			 */
			static Timer: string;
			/**
			 * A collection of commonly used functions represented in compact visual form.
			 */
			static Toolbar: string;
			/**
			 * A popup that displays a description for an element when the user passes over or rests on that element.
			 * Supplement to the normal tooltip processing of the user agent.
			 */
			static Tooltip: string;
			/**
			 * A form of a list (tree) having groups (subtrees) inside groups (subtrees), where the sub trees can be collapsed and expanded.
			 */
			static Tree: string;
			/**
			 * A grid whose rows are expandable and collapsable in the same manner as the ones of trees.
			 */
			static TreeGrid: string;
			/**
			 * A tree node
			 */
			static TreeItem: string;
		}
	
		class BarColor {
			/**
			 * Color: yellow (#faf2b0)
			 */
			static CRITICAL: string;
			/**
			 * Color: red (#ff9a90)
			 */
			static NEGATIVE: string;
			/**
			 * Color: blue (#b8d0e8)
			 */
			static NEUTRAL: string;
			/**
			 * Color: green (#b5e7a8)
			 */
			static POSITIVE: string;
		}
	
		class BusyIndicator {
		}
	
		class BusyIndicatorUtils {
		}
	
		class CalendarType {
			/**
			 * The Gregorian calendar
			 */
			static Gregorian: string;
			/**
			 * The Islamic calendar
			 */
			static Islamic: string;
			/**
			 * The Japanese emperor calendar
			 */
			static Japanese: string;
		}
	
		class Component extends sap.ui.base.ManagedObject {
			/**
			 * Creates and initializes a new Component with the given <code>sId</code> and
			 * settings.
			 * 
			 * The set of allowed entries in the <code>mSettings</code> object depends on
			 * the concrete subclass and is described there. See {@link sap.ui.core.Component}
			 * for a general description of this argument.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * 
			 * This class does not have its own settings, but all settings applicable to the base type
			 * {@link sap.ui.base.ManagedObject#constructor sap.ui.base.ManagedObject} can be used.
			 * @param sId Optional ID for the new control; generated automatically if
			 *            no non-empty ID is given. Note: this can be omitted, no matter
			 *            whether <code>mSettings</code> are given or not!(optional)
			 * @param mSettings Optional map or JSON-object with initial settings for the
			 *            new Component instance(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Cleans up the Component instance before destruction.
			 * 
			 * Applications must not call this hook method directly, it is called by the
			 * framework when the element is {@link #destroy destroyed}.
			 * 
			 * Subclasses of Component should override this hook to implement any necessary
			 * cleanup.
			 */
			exit();
			/**
			 * Creates a new subclass of class sap.ui.core.Component with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Returns user specific data object
			 * @return componentData
			 */
			getComponentData(): any;
			/**
			 * Returns the event bus of this component.
			 * @return the event bus
			 */
			getEventBus(): EventBus;
			/**
			 * 
			 */
			getInterface();
			/**
			 * Returns the public interface of the object.
			 * @note Overload from base type sap.ui.base.Object
			 * @return the public interface of the object
			 */
			getInterface(): sap.ui.base.Interface;
			/**
			 * Returns the manifest defined in the metadata of the component.
			 * If not specified, the return value is null.
			 * @return manifest.
			 */
			getManifest(): any;
			/**
			 * Returns the configuration of a manifest section or the value for a
			 * specific path. If no section or key is specified, the return value is null.
			 * 
			 * Example:
			 * <code>
			 *   {
			 *     "sap.ui5": {
			 *       "dependencies": {
			 *         "libs": {
			 *           "sap.m": {}
			 *         },
			 *         "components": {
			 *           "my.component.a": {}
			 *         }
			 *       }
			 *   });
			 * </code>
			 * 
			 * The configuration above can be accessed in the following ways:
			 * <ul>
			 * <li><b>By section/namespace</b>: <code>oComponent.getManifestEntry("sap.ui5")</code></li>
			 * <li><b>By path</b>: <code>oComponent.getManifestEntry("/sap.ui5/dependencies/libs")</code></li>
			 * </ul>
			 * 
			 * By section/namespace returns the configuration for the specified manifest
			 * section and by path allows to specify a concrete path to a dedicated entry
			 * inside the manifest. The path syntax always starts with a slash (/).
			 * @param sKey Either the manifest section name (namespace) or a concrete path
			 * @return Value of the manifest section or the key (could be any kind of value)
			 */
			getManifestEntry(sKey: string): any;
			/**
			 * Returns the manifest object.
			 * @return manifest.
			 */
			getManifestObject(): Manifest;
			/**
			 * Returns the Component instance in whose "context" the given ManagedObject has been created
			 * or <code>undefined</code>.
			 * 
			 * This is a convenience wrapper around {@link sap.ui.core.Component.getOwnerIdFor Component.getOwnerIdFor}.
			 * If the owner ID cannot be determined for reasons documented on <code>getOwnerForId</code>
			 * or when the Component for the determined ID no longer exists, <code>undefined</code>
			 * will be returned.
			 * @param oObject Object to retrieve the owner Component for
			 * @return the owner Component or <code>undefined</code>.
			 */
			getOwnerComponentFor(oObject: sap.ui.base.ManagedObject): Component;
			/**
			 * Returns the ID of the object in whose "context" the given ManagedObject has been created.
			 * 
			 * For objects that are not ManagedObjects or for which the owner is unknown,
			 * <code>undefined</code> will be returned as owner ID.
			 * 
			 * <strong>Note</strong>: Ownership for objects is only checked by the framework at the time
			 * when they are created. It is not checked or updated afterwards. And it can only be detected
			 * while the {@link sap.ui.core.Component.runAsOwner Component.runAsOwner} function is executing.
			 * Without further action, this is only the case while the content of an UIComponent is
			 * {@link sap.ui.core.UIComponent.createContent constructed} or when a
			 * {@link sap.ui.core.routing.Router Router} creates a new View and its content.
			 * 
			 * <strong>Note</strong>: This method does not guarantee that the returned owner ID belongs
			 * to a Component. Currently, it always does. But future versions of UI5 might introduce a
			 * more fine grained ownership concept, e.g. taking Views into account. Callers that
			 * want to deal only with components as owners, should use the following method:
			 * {@link sap.ui.core.Component.getOwnerComponentFor Component.getOwnerComponentFor}.
			 * It guarantees that the returned object (if any) will be a Component.
			 * 
			 * <strong>Further note</strong> that only the ID of the owner is recorded. In rare cases,
			 * when the lifecycle of a ManagedObject is not bound to the lifecycle of its owner,
			 * (e.g. by the means of aggregations), then the owner might have been destroyed already
			 * whereas the ManagedObject is still alive. So even the existence of an owner ID is
			 * not a guarantee for the existence of the corresponding owner.
			 * @param oObject Object to retrieve the owner ID for
			 * @return ID of the owner or <code>undefined</code>
			 */
			getOwnerIdFor(oObject: sap.ui.base.ManagedObject): string;
			/**
			 * Returns a service interface for the {@link sap.ui.core.service.Service Service}
			 * declared in the descriptor for components (manifest.json). The declaration needs
			 * to be done in the <code>sap.ui5/services</code> section as follows:
			 * <pre>
			 * {
			 *   [...]
			 *   "sap.ui5": {
			 *     "services": {
			 *       "myLocalServiceAlias": {
			 *         "factoryName": "my.ServiceFactory",
			 *         ["optional": true]
			 *       }
			 *     }
			 *   }
			 *   [...]
			 * }
			 * </pre>
			 * The service declaration is used to define a mapping between the local
			 * alias for the service that can be used in the Component and the name of
			 * the service factory which will be used to create a service instance.
			 * 
			 * The <code>getService</code> function will look up the service factory and will
			 * create a new instance by using the service factory function
			 * {@link sap.ui.core.service.ServiceFactory#createInstance createInstance}
			 * The optional property defines that the service is not mandatory and the
			 * usage will not depend on the availability of this service. When requesting
			 * an optional service the <code>getService</code> function will reject but
			 * there will be no error logged in the console.
			 * 
			 * When creating a new instance of the service the Component context will be
			 * passed as <code>oServiceContext</code> as follows:
			 * <pre>
			 * {
			 *   "scopeObject": this,     // the Component instance
			 *   "scopeType": "component" // the stereotype of the scopeObject
			 * }
			 * </pre>
			 * 
			 * The service will be created only once per Component and reused in future
			 * calls to the <code>getService</code> function.
			 * <p>
			 * This function will return a <code>Promise</code> which provides the service
			 * interface when resolved. If the <code>factoryName</code> could not
			 * be found in the {@link sap.ui.core.service.ServiceFactoryRegistry Service Factory Registry}
			 * or the service declaration in the descriptor for components (manifest.json)
			 * is missing the Promise will reject.
			 * 
			 * This is an example of how the <code>getService</code> function can be used:
			 * <pre>
			 * oComponent.getService("myLocalServiceAlias").then(function(oService) {
			 *   oService.doSomething();
			 * }).catch(function(oError) {
			 *   jQuery.sap.log.error(oError);
			 * });
			 * </pre>
			 * @param sLocalServiceAlias Local service alias as defined in the manifest.json
			 * @return Promise which will be resolved with the Service interface
			 */
			getService(sLocalServiceAlias: string): any;
			/**
			 * Initializes the Component instance after creation.
			 * 
			 * Applications must not call this hook method directly, it is called by the
			 * framework while the constructor of an Component is executed.
			 * 
			 * Subclasses of Component should override this hook to implement any necessary
			 * initialization.
			 */
			init();
			/**
			 * The hook which gets called when the static configuration of the component
			 * has been changed by some configuration extension.
			 * @param sConfigKey Error message.
			 */
			onConfigChange(sConfigKey: string);
			/**
			 * The window before unload hook. Override this method in your Component class
			 * implementation, to handle cleanup before the real unload or to prompt a question
			 * to the user, if the component should be exited.
			 * @return a string if a prompt should be displayed to the user
			 *                  confirming closing the Component (e.g. when the Component is not yet saved).
			 */
			onWindowBeforeUnload(): string;
			/**
			 * The window error hook. Override this method in your Component class implementation
			 * to listen to unhandled errors.
			 * @param sMessage The error message.
			 * @param sFile File where the error occurred
			 * @param iLine Line number of the error
			 */
			onWindowError(sMessage: string, sFile: string, iLine: number);
			/**
			 * The window unload hook. Override this method in your Component class
			 * implementation, to handle cleanup of the component once the window
			 * will be unloaded (e.g. closed).
			 */
			onWindowUnload();
			/**
			 * Calls the function <code>fn</code> once and marks all ManagedObjects
			 * created during that call as "owned" by this Component.
			 * 
			 * Nested calls of this method are supported (e.g. inside a newly created,
			 * nested component). The currently active owner Component will be remembered
			 * before executing <code>fn</code> and restored afterwards.
			 * @param fn Function to execute
			 * @return result of function <code>fn</code>
			 */
			runAsOwner(fn: any): any;
		}
	
		class ComponentContainer extends Control {
			/**
			 * Constructor for a new ComponentContainer.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.core.ComponentContainerMetadata);
			/**
			 * Constructor for a new ComponentContainer.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.ui.core.ComponentContainer with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * ID of the element which is the current target of the association <code>component</code>, or <code>null</code>.
			 * @return 
			 */
			getComponent(): ID;
			/**
			 * Gets current value of property <code>handleValidation</code>.
			 * 
			 * Enable/disable validation handling by MessageManager for this component.
			 * The resulting Messages will be propagated to the controls.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>handleValidation</code>
			 */
			getHandleValidation(): boolean;
			/**
			 * Gets current value of property <code>height</code>.
			 * 
			 * Container height in CSS size
			 * @return Value of property <code>height</code>
			 */
			getHeight(): CSSSize;
			/**
			 * Gets current value of property <code>name</code>.
			 * 
			 * Component name, the package where the component is contained. The property can only be applied initially.
			 * @return Value of property <code>name</code>
			 */
			getName(): string;
			/**
			 * Gets current value of property <code>propagateModel</code>.
			 * 
			 * Defines whether binding information is propagated to the component.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>propagateModel</code>
			 */
			getPropagateModel(): boolean;
			/**
			 * Gets current value of property <code>settings</code>.
			 * 
			 * The settings object passed to the component when created. The property can only be applied initially.
			 * @return Value of property <code>settings</code>
			 */
			getSettings(): any;
			/**
			 * Gets current value of property <code>url</code>.
			 * 
			 * The URL of the component. The property can only be applied initially.
			 * @return Value of property <code>url</code>
			 */
			getUrl(): URI;
			/**
			 * Gets current value of property <code>width</code>.
			 * 
			 * Container width in CSS size
			 * @return Value of property <code>width</code>
			 */
			getWidth(): CSSSize;
			/**
			 * Sets the associated <code>component</code>.
			 * @param oComponent ID of an element which becomes the new target of this component association; alternatively, an element instance may be given
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setComponent(oComponent: ID|UIComponent): ComponentContainer;
			/**
			 * Sets a new value for property <code>handleValidation</code>.
			 * 
			 * Enable/disable validation handling by MessageManager for this component.
			 * The resulting Messages will be propagated to the controls.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bHandleValidation New value for property <code>handleValidation</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setHandleValidation(bHandleValidation: boolean): ComponentContainer;
			/**
			 * Sets a new value for property <code>height</code>.
			 * 
			 * Container height in CSS size
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sHeight New value for property <code>height</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setHeight(sHeight: CSSSize): ComponentContainer;
			/**
			 * Sets a new value for property <code>name</code>.
			 * 
			 * Component name, the package where the component is contained. The property can only be applied initially.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sName New value for property <code>name</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setName(sName: string): ComponentContainer;
			/**
			 * Sets a new value for property <code>propagateModel</code>.
			 * 
			 * Defines whether binding information is propagated to the component.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bPropagateModel New value for property <code>propagateModel</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setPropagateModel(bPropagateModel: boolean): ComponentContainer;
			/**
			 * Sets a new value for property <code>settings</code>.
			 * 
			 * The settings object passed to the component when created. The property can only be applied initially.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param oSettings New value for property <code>settings</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSettings(oSettings: any): ComponentContainer;
			/**
			 * Sets a new value for property <code>url</code>.
			 * 
			 * The URL of the component. The property can only be applied initially.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sUrl New value for property <code>url</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setUrl(sUrl: URI): ComponentContainer;
			/**
			 * Sets a new value for property <code>width</code>.
			 * 
			 * Container width in CSS size
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sWidth New value for property <code>width</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setWidth(sWidth: CSSSize): ComponentContainer;
		}
	
		class ComponentMetadata  {
			/**
			 * Creates a new metadata object for a Component subclass.
			 * @param sClassName Fully qualified name of the class that is described by this metadata object
			 * @param oStaticInfo Static info to construct the metadata from
			 */
			constructor(sClassName: string, oStaticInfo: any);
			/**
			 * Returns the name of the Component (which is the namespace only with the module name)
			 * @return Component name
			 */
			getComponentName(): string;
			/**
			 * Returns the manifest object.
			 * @return manifest.
			 */
			getManifestObject(): Manifest;
			/**
			 * Returns the version of the metadata which could be 1 or 2. 1 is for legacy
			 * metadata whereas 2 is for the manifest.
			 * @return metadata version (1: legacy metadata, 2: manifest)
			 */
			getMetadataVersion(): number;
			/**
			 * Returns whether the class of this metadata is a component base class
			 * or not.
			 * @return true if it is sap.ui.core.Component or sap.ui.core.UIComponent
			 */
			isBaseClass(): boolean;
		}
	
		class Configuration extends sap.ui.base.Object {
			/**
			 * Creates a new Configuration object.
			 */
			constructor();
			/**
			 * Applies multiple changes to the configuration at once.
			 * 
			 * If the changed settings contain localization related settings like <code>language</code>
			 * or <ode>calendarType</code>, then only a single <code>localizationChanged</code> event will
			 * be fired. As the framework has to inform all existing components, elements, models etc.
			 * about localization changes, using <code>applySettings</code> can significantly reduce the
			 * overhead for multiple changes, esp. when they occur after the UI has been created already.
			 * 
			 * The <code>mSettings</code> can contain any property <code><i>xyz</i></code> for which a
			 * setter method <code>set<i>XYZ</i></code> exists in the API of this class.
			 * Similarly, values for the {@link sap.ui.core.Configuration.FormatSettings format settings}
			 * API can be provided in a nested object with name <code>formatSettings</code>.
			 * @param mSettings Configuration options to apply
			 * @return Returns <code>this</code> to allow method chaining
			 */
			applySettings(mSettings: any): Configuration;
			/**
			 * Creates a new subclass of class sap.ui.core.Configuration with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Returns whether the accessibility mode is used or not
			 * @return whether the accessibility mode is used or not
			 */
			getAccessibility(): boolean;
			/**
			 * Returns whether the animations are globally used
			 * @return whether the animations are globally used
			 */
			getAnimation(): boolean;
			/**
			 * Base URLs to AppCacheBuster Etag-Index files
			 * @return array of base URLs
			 */
			getAppCacheBuster(): string[];
			/**
			 * Object defining the callback hooks for the AppCacheBuster like e.g.
			 * <code>handleURL</code>, <code>onIndexLoad</code> or <code>onIndexLoaded</code>.
			 * @return object containing the callback functions for the AppCacheBuster
			 */
			getAppCacheBusterHooks(): any;
			/**
			 * The loading mode (sync|async|batch) of the AppCacheBuster (sync is default)
			 * @return sync | async
			 */
			getAppCacheBusterMode(): string;
			/**
			 * Returns whether the framework automatically adds automatically
			 * the ARIA role 'application' to the html body or not.
			 * @return 
			 */
			getAutoAriaBodyRole(): boolean;
			/**
			 * Returns the used compatibility version for the given feature.
			 * @param sFeature the key of desired feature
			 * @return the used compatibility version
			 */
			getCompatibilityVersion(sFeature: string): jQuery.sap.Version;
			/**
			 * Return whether the controller code is deactivated. During design mode the
			 * @return whether the activation of the controller code is suppressed or not
			 */
			getControllerCodeDeactivated(): boolean;
			/**
			 * Returns whether the page runs in debug mode
			 * @return whether the page runs in debug mode
			 */
			getDebug(): boolean;
			/**
			 * Return whether the design mode is active or not.
			 * @return whether the design mode is active or not.
			 */
			getDesignMode(): boolean;
			/**
			 * Returns whether the Fiori2Adaptation is on
			 * @return false - no adaptation, true - full adaptation, comma-separated list - partial adaptation
			 * Possible values: style, collapse, title, back, hierarchy
			 */
			getFiori2Adaptation(): boolean|string;
			/**
			 * Returns the format locale string with language and region code. Falls back to
			 * language configuration, in case it has not been explicitly defined.
			 * @return the format locale string with language and country code
			 */
			getFormatLocale(): string;
			/**
			 * Returns a configuration object that bundles the format settings of UI5.
			 * @return A FormatSettings object.
			 */
			getFormatSettings(): Configuration.FormatSettings;
			/**
			 * frameOptions mode (allow/deny/trusted).
			 * @return frameOptions mode
			 */
			getFrameOptions(): string;
			/**
			 * Returns whether the UI5 control inspector is displayed
			 * Has only an effect when the sap-ui-debug module has been loaded
			 * @return whether the UI5 control inspector is displayed
			 */
			getInspect(): boolean;
			/**
			 * Returns a string that identifies the current language.
			 * 
			 * The value returned by this methods in most cases corresponds to the exact value that has been
			 * configured by the user or application or that has been determined from the user agent settings.
			 * It neither has been normalized nor validated against a specification or standard, although
			 * UI5 expects a value compliant with {@link http://www.ietf.org/rfc/bcp/bcp47.txt BCP47}.
			 * 
			 * The exceptions mentioned above affect languages that have been specified via the URL parameter
			 * <code>sap-language</code>. That parameter by definition represents a SAP logon language code
			 * ('ABAP language'). Most but not all of these language codes are valid ISO639 two-letter languages
			 * and as such are valid BCP47 language tags. For better BCP47 compliance, the framework
			 * maps the following non-BCP47 SAP logon codes to a BCP47 substitute:
			 * <pre>
			 *    "ZH"  -->  "zh-Hans"         // script 'Hans' added to distinguish it from zh-Hant
			 *    "ZF"  -->  "zh-Hant"         // ZF ist not a valid ISO639 code, use the compliant language + script 'Hant'
			 * 		 "    "1Q"  -->  "en-US-x-saptrc"  // special language code for supportability (tracing),
			 *                                    represented as en-US with a priate extension
			 *    "2Q"  -->  "en-US-x-sappsd"  // special language code for supportability (pseudo translation),
			 *                                    represented as en-US with a priate extension
			 * </pre>
			 * @return The language string as configured
			 */
			getLanguage(): string;
			/**
			 * Returns a BCP47-compliant language tag for the current language.
			 * 
			 * If the current {@link #getLanguage language} can't be interpreted as a
			 * BCP47-compliant language, then the value <code>undefined</code> is returned.
			 * @return The language tag for the current language, conforming to BCP47
			 */
			getLanguageTag(): string;
			/**
			 * Returns a Locale object for the current language.
			 * 
			 * The Locale is derived from the {@link #getLanguage language} property.
			 * @return The locale
			 */
			getLocale(): Locale;
			/**
			 * Flag whether a Component should load the manifest first
			 * @return true if a Component should load the manifest first
			 */
			getManifestFirst(): boolean;
			/**
			 * Returns whether there should be an exception on any duplicate element IDs
			 * @return whether there should be an exception on any duplicate element IDs
			 */
			getNoDuplicateIds(): boolean;
			/**
			 * Returns whether the text origin information is collected
			 * @return whether the text info is collected
			 */
			getOriginInfo(): boolean;
			/**
			 * The name of the root component to start or empty
			 * @return name of the root component
			 */
			getRootComponent(): string;
			/**
			 * Returns whether the page uses the RTL text direction.
			 * 
			 * If no mode has been explicitly set (neither true nor false),
			 * the mode is derived from the current language setting.
			 * @return whether the page uses the RTL text direction
			 */
			getRTL(): boolean;
			/**
			 * Returns a SAP logon language for the current language.
			 * 
			 * If the current {@link #getLanguage language} can't be interpreted as a
			 * BCP47-compliant language, or if the BCP47 language can't be converted to
			 * a SAP Logon language, then the value <code>undefined</code> is returned.
			 * @return The SAP logon language code for the current language
			 */
			getSAPLogonLanguage(): string;
			/**
			 * Return whether the activation of the controller code is suppressed
			 * @return whether the activation of the controller code is suppressed or not
			 */
			getSuppressDeactivationOfControllerCode(): boolean;
			/**
			 * Returns the theme name
			 * @return the theme name
			 */
			getTheme(): string;
			/**
			 * Prefix to be used for automatically generated control IDs.
			 * Default is a double underscore "__".
			 * @return the prefix to be used
			 */
			getUIDPrefix(): string;
			/**
			 * Returns the version of the framework.
			 * 
			 * Similar to <code>sap.ui.version</code>.
			 * @return the version
			 */
			getVersion(): jQuery.sap.Version;
			/**
			 * URL of the whitelist service.
			 * @return whitelist service URL
			 */
			getWhitelistService(): string;
			/**
			 * Sets the new calendar type to be used from now on in locale dependent functionalities (for example,
			 * formatting, translation texts, etc.).
			 * @param sCalendarType the new calendar type. Set it with null to clear the calendar type
			 *   and the calendar type is calculated based on the format settings and current locale.
			 * @return <code>this</code> to allow method chaining
			 */
			setCalendarType(sCalendarType: CalendarType): Configuration;
			/**
			 * Sets a new formatLocale to be used from now on for retrieving locale
			 * specific formatters. Modifying this setting does not have an impact on
			 * the retrieval of translated texts!
			 * 
			 * Can either be set to a concrete value (a BCP-47 or Java locale compliant
			 * language tag) or to <code>null</code>. When set to <code>null</code> (default
			 * value) then locale specific formatters are retrieved for the current language.
			 * 
			 * After changing the formatLocale, the framework tries to update localization
			 * specific parts of the UI. See the documentation of {@link #setLanguage} for
			 * details and restrictions.
			 * @param sFormatLocale the new format locale as a BCP47 compliant language tag;
			 *   case doesn't matter and underscores can be used instead of a dashes to separate
			 *   components (compatibility with Java Locale Ids)
			 * @return <code>this</code> to allow method chaining
			 */
			setFormatLocale(sFormatLocale: string): Configuration;
			/**
			 * Sets a new language to be used from now on for language/region dependent
			 * functionality (e.g. formatting, data types, translated texts, ...).
			 * 
			 * When the language has changed, the Core will fire its
			 * {@link sap.ui.core.Core#event:localizationChanged localizationChanged} event.
			 * 
			 * The framework <strong>does not</strong> guarantee that already created, language
			 * dependent objects will be updated by this call. It therefore remains best practice
			 * for applications to switch the language early, e.g. before any language dependent
			 * objects are created. Applications that need to support more dynamic changes of
			 * the language should listen to the <code>localizationChanged</code> event and adapt
			 * all language dependent objects that they use (e.g. by rebuilding their UI).
			 * 
			 * Currently, the framework notifies the following objects about a change of the
			 * localization settings before it fires the <code>localizationChanged</code> event:
			 * 
			 * <ul>
			 * <li>date and number data types that are used in property bindings or composite
			 *     bindings in existing Elements, Controls, UIAreas or Components</li>
			 * <li>ResourceModels currently assigned to the Core, an UIArea, Component,
			 *     Element or Control</li>
			 * <li>Elements or Controls that implement the <code>onlocalizationChanged</code> hook
			 *     (note the lowercase 'l' in onlocalizationChanged)
			 * </ul>
			 * 
			 * It furthermore derives the RTL mode from the new language, if no explicit RTL
			 * mode has been set. If the RTL mode changes, the following additional actions will be taken:
			 * 
			 * <ul>
			 * <li>the URLs of already loaded library theme files will be changed</li>
			 * <li>the <code>dir</code> attribute of the page will be changed to reflect the new mode.</li>
			 * <li>all UIAreas will be invalidated (which results in a rendering of the whole UI5 UI)</li>
			 * </ul>
			 * 
			 * This method does not handle SAP logon language codes.
			 * @param sLanguage the new language as a BCP47 compliant language tag; case doesn't matter
			 *   and underscores can be used instead of a dashes to separate components (compatibility with Java Locale Ids)
			 * @return <code>this</code> to allow method chaining
			 */
			setLanguage(sLanguage: string): Configuration;
			/**
			 * Sets the character orientation mode to be used from now on.
			 * 
			 * Can either be set to a concrete value (true meaning right-to-left,
			 * false meaning left-to-right) or to <code>null</code> which means that
			 * the character orientation mode should be derived from the current
			 * language (incl. region) setting.
			 * 
			 * After changing the character orientation mode, the framework tries
			 * to update localization specific parts of the UI. See the documentation of
			 * {@link #setLanguage} for details and restrictions.
			 * @param bRTL new character orientation mode or <code>null</code>
			 * @return <code>this</code> to allow method chaining
			 */
			setRTL(bRTL: boolean): Configuration;
		}
	
		namespace Configuration {
		
			class FormatSettings extends sap.ui.base.Object {
				/**
				 * 
				 */
				constructor();
				/**
				 * Creates a new subclass of class sap.ui.core.Configuration.FormatSettings with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Returns the currently set date pattern or undefined if no pattern has been defined.
				 */
				getDatePattern();
				/**
				 * Returns the locale to be used for formatting.
				 * 
				 * If no such locale has been defined, this method falls back to the language,
				 * see {@link sap.ui.core.Configuration#getLanguage Configuration.getLanguage()}.
				 * 
				 * If any user preferences for date, time or number formatting have been set,
				 * and if no format locale has been specified, then a special private use subtag
				 * is added to the locale, indicating to the framework that these user preferences
				 * should be applied.
				 * @return the format locale
				 */
				getFormatLocale(): sap.ui.core.Locale;
				/**
				 * Returns the currently set customizing data for Islamic calendar support
				 * @return Returns an array contains the customizing data. Each element in the array has properties: dateFormat, islamicMonthStart, gregDate. For details, please see {@link #setLegacyDateCalendarCustomizing}
				 */
				getLegacyDateCalendarCustomizing(): any[];
				/**
				 * Returns the currently set legacy ABAP date format (its id) or undefined if none has been set.
				 */
				getLegacyDateFormat();
				/**
				 * Returns the currently set legacy ABAP number format (its id) or undefined if none has been set.
				 */
				getLegacyNumberFormat();
				/**
				 * Returns the currently set legacy ABAP time format (its id) or undefined if none has been set.
				 */
				getLegacyTimeFormat();
				/**
				 * Returns the currently set number symbol of the given type or undefined if no symbol has been defined.
				 */
				getNumberSymbol();
				/**
				 * Returns the currently set time pattern or undefined if no pattern has been defined.
				 */
				getTimePattern();
				/**
				 * Defines the preferred format pattern for the given date format style.
				 * Calling this method with a null or undefined pattern removes a previously set pattern.
				 * 
				 * If a pattern is defined, it will be preferred over patterns derived from the current locale.
				 * 
				 * See class {@link sap.ui.core.format.DateFormat} for details about the pattern syntax.
				 * 
				 * After changing the date pattern, the framework tries to update localization
				 * specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage}
				 * for details and restrictions.
				 * @param sStyle must be one of short, medium, long or full.
				 * @param sPattern the format pattern to be used in LDML syntax.
				 * @return Returns <code>this</code> to allow method chaining
				 */
				setDatePattern(sStyle: string, sPattern: string): FormatSettings;
				/**
				 * Defines the day used as the first day of the week.
				 * The day is set as an integer value between 0 (Sunday) and 6 (Saturday).
				 * Calling this method with a null or undefined symbol removes a previously set value.
				 * 
				 * If a value is defined, it will be preferred over values derived from the current locale.
				 * 
				 * Usually in the US the week starts on Sunday while in most European countries on Monday.
				 * There are special cases where you want to have the first day of week set independent of the
				 * user locale.
				 * 
				 * After changing the first day of week, the framework tries to update localization
				 * specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage}
				 * for details and restrictions.
				 * @param iValue must be an integer value between 0 and 6
				 * @return Returns <code>this</code> to allow method chaining
				 */
				setFirstDayOfWeek(iValue: number): FormatSettings;
				/**
				 * Allows to specify the customizing data for Islamic calendar support
				 * @param aMappings contains the customizing data for the support of Islamic calendar.
				 * @return Returns <code>this</code> to allow method chaining
				 */
				setLegacyDateCalendarCustomizing(aMappings: any[]): FormatSettings;
				/**
				 * Allows to specify one of the legacy ABAP date formats.
				 * 
				 * This method modifies the date patterns for 'short' and 'medium' style with the corresponding ABAP
				 * format. When called with a null or undefined format id, any previously applied format will be removed.
				 * 
				 * After changing the legacy date format, the framework tries to update localization
				 * specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage}
				 * for details and restrictions.
				 * 
				 * Note: Iranian date format 'C' is NOT yet supported by UI5. It's accepted by this method for convenience
				 * (user settings from ABAP system can be used without filtering), but it's ignored. Instead, the formats
				 * from the current format locale will be used and a warning will be logged.
				 * @param sFormatId id of the ABAP data format (one of '1','2','3','4','5','6','7','8','9','A','B','C')
				 * @return Returns <code>this</code> to allow method chaining
				 */
				setLegacyDateFormat(sFormatId: string): FormatSettings;
				/**
				 * Allows to specify one of the legacy ABAP number format.
				 * 
				 * This method will modify the 'group' and 'decimal' symbols. When called with a null
				 * or undefined format id, any previously applied format will be removed.
				 * 
				 * After changing the legacy number format, the framework tries to update localization
				 * specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage}
				 * for details and restrictions.
				 * @param sFormatId id of the ABAP number format set (one of ' ','X','Y')
				 * @return Returns <code>this</code> to allow method chaining
				 */
				setLegacyNumberFormat(sFormatId: string): FormatSettings;
				/**
				 * Allows to specify one of the legacy ABAP time formats.
				 * 
				 * This method sets the time patterns for 'short' and 'medium' style to the corresponding ABAP
				 * formats and sets the day period texts to "AM"/"PM" or "am"/"pm" respectively. When called
				 * with a null or undefined format id, any previously applied format will be removed.
				 * 
				 * After changing the legacy time format, the framework tries to update localization
				 * specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage}
				 * for details and restrictions.
				 * @param sFormatId id of the ABAP time format (one of '0','1','2','3','4')
				 * @return Returns <code>this</code> to allow method chaining
				 */
				setLegacyTimeFormat(sFormatId: string): FormatSettings;
				/**
				 * Defines the string to be used for the given number symbol.
				 * Calling this method with a null or undefined symbol removes a previously set symbol string.
				 * Note that an empty string is explicitly allowed.
				 * 
				 * If a symbol is defined, it will be preferred over symbols derived from the current locale.
				 * 
				 * See class {@link sap.ui.core.format.NumberFormat} for details about the symbols.
				 * 
				 * After changing the number symbol, the framework tries to update localization
				 * specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage}
				 * for details and restrictions.
				 * @param sStyle must be one of decimal, group, plusSign, minusSign.
				 * @param sSymbol will be used to represent the given symbol type
				 * @return Returns <code>this</code> to allow method chaining
				 */
				setNumberSymbol(sStyle: string, sSymbol: string): FormatSettings;
				/**
				 * Defines the preferred format pattern for the given time format style.
				 * Calling this method with a null or undefined pattern removes a previously set pattern.
				 * 
				 * If a pattern is defined, it will be preferred over patterns derived from the current locale.
				 * 
				 * See class {@link sap.ui.core.format.DateFormat} for details about the pattern syntax.
				 * 
				 * After changing the time pattern, the framework tries to update localization
				 * specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage}
				 * for details and restrictions.
				 * @param sStyle must be one of short, medium, long or full.
				 * @param sPattern the format pattern to be used in LDML syntax.
				 * @return Returns <code>this</code> to allow method chaining
				 */
				setTimePattern(sStyle: string, sPattern: string): FormatSettings;
			}
		}
	
		class Control extends Element {
			/**
			 * Creates and initializes a new control with the given <code>sId</code> and settings.
			 * 
			 * The set of allowed entries in the <code>mSettings</code> object depends on the concrete
			 * subclass and is described there. See {@link sap.ui.core.Element} for a general description of this
			 * argument.
			 * 
			 * The settings supported by Control are:
			 * <ul>
			 * <li>Properties
			 * <ul>
			 * <li>{@link #getBusy busy} : boolean (default: false)</li>
			 * <li>{@link #getBusyIndicatorDelay busyIndicatorDelay} : int (default: 1000)</li>
			 * </ul>
			 * </li>
			 * </ul>
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId optional id for the new control; generated automatically if no non-empty id is given
			 *      Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!(optional)
			 * @param mSettings optional map/JSON-object with initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.core.ControlMetadata);
			/**
			 * Creates and initializes a new control with the given <code>sId</code> and settings.
			 * 
			 * The set of allowed entries in the <code>mSettings</code> object depends on the concrete
			 * subclass and is described there. See {@link sap.ui.core.Element} for a general description of this
			 * argument.
			 * 
			 * The settings supported by Control are:
			 * <ul>
			 * <li>Properties
			 * <ul>
			 * <li>{@link #getBusy busy} : boolean (default: false)</li>
			 * <li>{@link #getBusyIndicatorDelay busyIndicatorDelay} : int (default: 1000)</li>
			 * </ul>
			 * </li>
			 * </ul>
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId optional id for the new control; generated automatically if no non-empty id is given
			 *      Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!(optional)
			 * @param mSettings optional map/JSON-object with initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * The string given as "sStyleClass" will be added to the "class" attribute of this control's root HTML element.
			 * 
			 * This method is intended to be used to mark controls as being of a special type for which
			 * special styling can be provided using CSS selectors that reference this style class name.
			 * 
			 * <pre>
			 * Example:
			 *    myButton.addStyleClass("myRedTextButton"); // add a CSS class to one button instance
			 * 
			 * ...and in CSS:
			 *    .myRedTextButton {
			 *       color: red;
			 *    }
			 * </pre>
			 * 
			 * This will add the CSS class "myRedTextButton" to the Button HTML and the CSS code above will then
			 * make the text in this particular button red.
			 * 
			 * Only characters allowed inside HTML attributes are allowed.
			 * Quotes are not allowed and this method will ignore any strings containing quotes.
			 * Strings containing spaces are interpreted as multiple custom style classes which are split by space and can be removed
			 * individually later by calling removeStyleClass.
			 * Multiple calls with the same sStyleClass will have no different effect than calling once.
			 * If sStyleClass is null, empty string or it contains quotes, the call is ignored.
			 * @param sStyleClass the CSS class name to be added
			 * @return Returns <code>this</code> to allow method chaining
			 */
			addStyleClass(sStyleClass: string): Control;
			/**
			 * Defines whether the user can select text inside this control.
			 * Defaults to <code>true</code> as long as this method has not been called.
			 * 
			 * <b>Note:</b>This only works in IE and Safari; for Firefox the element's style must
			 * be set to:
			 * <pre>
			 *   -moz-user-select: none;
			 * </pre>
			 * in order to prevent text selection.
			 * @param bAllow whether to allow text selection or not
			 * @return Returns <code>this</code> to allow method chaining
			 */
			allowTextSelection(bAllow: boolean): Control;
			/**
			 * Allows binding handlers for any native browser event to the root HTML element of this Control. This internally handles
			 * DOM element replacements caused by re-rendering.
			 * 
			 * IMPORTANT:
			 * This should be only used as FALLBACK when the Control events do not cover a specific use-case! Always try using
			 * SAPUI5 control events, as e.g. accessibility-related functionality is then provided automatically.
			 * E.g. when working with a sap.ui.commons.Button, always use the Button's "press" event, not the native "click" event, because
			 * "press" is also guaranteed to be fired when certain keyboard activity is supposed to trigger the Button.
			 * 
			 * In the event handler, "this" refers to the Control - not to the root DOM element like in jQuery. While the DOM element can
			 * be used and modified, the general caveats for working with SAPUI5 control DOM elements apply. In particular the DOM element
			 * may be destroyed and replaced by a new one at any time, so modifications that are required to have permanent effect may not
			 * be done. E.g. use Control.addStyleClass() instead if the modification is of visual nature.
			 * 
			 * Use detachBrowserEvent() to remove the event handler(s) again.
			 * @param sEventType A string containing one or more JavaScript event types, such as "click" or "blur".(optional)
			 * @param fnHandler A function to execute each time the event is triggered.(optional)
			 * @param oListener The object, that wants to be notified, when the event occurs(optional)
			 * @return Returns <code>this</code> to allow method chaining
			 */
			attachBrowserEvent(sEventType?: string, fnHandler?: any, oListener?: any): Control;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>validateFieldGroup</code> event of this <code>sap.ui.core.Control</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.core.Control</code> itself.
			 * 
			 * Event is fired if a logical field group defined by <code>fieldGroupIds</code> of a control was left or the user explicitly pressed a validation key combination.
			 * Use this event to validate data of the controls belonging to a field group.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.core.Control</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachValidateFieldGroup(oData: any, fnFunction: any, oListener?: any): Control;
			/**
			 * Returns whether the control has a given field group.
			 * If <code>vFieldGroupIds</code> is not given it checks whether at least one field group ID is given for this control.
			 * If <code>vFieldGroupIds</code> is an empty array or empty string, true is returned if there is no field group ID set for this control.
			 * If <code>vFieldGroupIds</code> is a string array or a string all expected field group IDs are checked and true is returned if all are contained for given for this control.
			 * The comma delimiter can be used to seperate multiple field group IDs in one string.
			 * @param vFieldGroupIds ID of the field group or an array of field group IDs to match(optional)
			 * @return true if a field group ID matches
			 */
			checkFieldGroupIds(vFieldGroupIds?: string|string[]): boolean;
			/**
			 * Overrides {@link sap.ui.core.Element#clone Element.clone} to clone additional
			 * internal state.
			 * 
			 * The additionally cloned information contains:
			 * <ul>
			 * <li>browser event handlers attached with {@link #attachBrowserEvent}
			 * <li>text selection behavior
			 * <li>style classes added with {@link #addStyleClass}
			 * </ul>
			 * @param sIdSuffix a suffix to be appended to the cloned element id(optional)
			 * @param aLocalIds an array of local IDs within the cloned hierarchy (internally used)(optional)
			 * @return reference to the newly created clone
			 */
			clone(sIdSuffix?: string, aLocalIds?: string[]): Element;
			/**
			 * Clones a tree of objects starting with the object on which clone is called first (root object).
			 * 
			 * The ids within the newly created clone tree are derived from the original ids by appending
			 * the given <code>sIdSuffix</code> (if no suffix is given, one will be created; it will be
			 * unique across multiple clone calls).
			 * 
			 * The <code>oOptions</code> configuration object can have the following properties:
			 * <ul>
			 * <li>The boolean value <code>cloneChildren</code> specifies wether associations/aggregations will be cloned</li>
			 * <li>The boolean value <code>cloneBindings</code> specifies if bindings will be cloned</li>
			 * </ul>
			 * 
			 * For each cloned object the following settings are cloned based on the metadata of the object and the defined options:
			 * <ul>
			 * <li>all properties that are not bound. If cloneBinding is false even these properties will be cloned;
			 * the values are used by reference, they are not cloned</li>
			 * <li>all aggregated objects that are not bound. If cloneBinding is false even the ones that are bound will be cloned;
			 * they are all cloned recursively using the same <code>sIdSuffix</code></li>
			 * <li>all associated controls; when an association points to an object inside the cloned object tree,
			 *     then the cloned association will be modified to that it points to the clone of the target object.
			 *     When the association points to a managed object outside of the cloned object tree, then its
			 *     target won't be changed.</li>
			 * <li>all models set via setModel(); used by reference </li>
			 * <li>all property and aggregation bindings (if cloneBindings is true); the pure binding infos (path, model name) are
			 *     cloned, but all other information like template control or factory function,
			 *     data type or formatter function are copied by reference. The bindings themselves
			 *     are created anew as they are specific for the combination (object, property, model).
			 *     As a result, any later changes to a binding of the original object are not reflected
			 *     in the clone, but changes to e.g the type or template etc. are.</li>
			 * </ul>
			 * 
			 * Each clone is created by first collecting the above mentioned settings and then creating
			 * a new instance with the normal constructor function. As a result, any side effects of
			 * mutator methods (setProperty etc.) or init hooks are repeated during clone creation.
			 * There is no need to override <code>clone()</code> just to reproduce these internal settings!
			 * 
			 * Custom controls however can override <code>clone()</code> to implement additional clone steps.
			 * They usually will first call <code>clone()</code> on the super class and then modify the
			 * returned clone accordingly.
			 * 
			 * Applications <b>must never provide</b> the second parameter <code>aLocaleIds</code>.
			 * It is determined automatically for the root object (and its non-existance also serves as
			 * an indicator for the root object). Specifying it will break the implementation of <code>clone()</code>.
			 * @note Overload from base type sap.ui.base.ManagedObject
			 * @param sIdSuffix a suffix to be appended to the cloned object id(optional)
			 * @param aLocalIds an array of local IDs within the cloned hierarchy (internally used)(optional)
			 * @param oOptions configuration object(optional)
			 * @return reference to the newly created clone
			 */
			clone(sIdSuffix?: string, aLocalIds?: string[], oOptions?: any): sap.ui.base.ManagedObject;
			/**
			 * Clone delegates
			 * @note Overload from base type sap.ui.core.Element
			 * @param sIdSuffix a suffix to be appended to the cloned element id(optional)
			 * @param aLocalIds an array of local IDs within the cloned hierarchy (internally used)(optional)
			 * @return reference to the newly created clone
			 */
			clone(sIdSuffix?: string, aLocalIds?: string[]): sap.ui.base.ManagedObject;
			/**
			 * Removes event handlers which have been previously attached using {@link #attachBrowserEvent}.
			 * 
			 * Note: listeners are only removed, if the same combination of event type, callback function
			 * and context object is given as in the call to <code>attachBrowserEvent</code>.
			 * @param sEventType A string containing one or more JavaScript event types, such as "click" or "blur".(optional)
			 * @param fnHandler The function that is to be no longer executed.(optional)
			 * @param oListener The context object that was given in the call to attachBrowserEvent.(optional)
			 */
			detachBrowserEvent(sEventType?: string, fnHandler?: any, oListener?: any);
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>validateFieldGroup</code> event of this <code>sap.ui.core.Control</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachValidateFieldGroup(fnFunction: any, oListener: any): Control;
			/**
			 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Fires event <code>validateFieldGroup</code> to attached listeners.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>fieldGroupIds</code> of type <code>string[]</code>field group IDs of the logical field groups to validate</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireValidateFieldGroup(mArguments?: any): Control;
			/**
			 * This function (if available on the concrete control) provides
			 * the current accessibility state of the control.
			 * 
			 * Applications must not call this hook method directly, it is called by the framework.
			 * 
			 * Subclasses of Control should implement this hook to provide any necessary accessibility information:
			 * 
			 * <pre>
			 * MyControl.prototype.getAccessibilityInfo = function() {
			 *    return {
			 *      role: "textbox",      // String which represents the WAI-ARIA role which is implemented by the control.
			 *      type: "date input",   // String which represents the control type (Must be a translated text). Might correlate with
			 *                            // the role.
			 *      description: "value", // String which describes the most relevant control state (e.g. the inputs value). Must be a
			 *                            // translated text.
			 *                            // Note: The type and the enabled/editable state must not be handled here.
			 *      focusable: true,      // Boolean which describes whether the control can get the focus.
			 *      enabled: true,        // Boolean which describes whether the control is enabled. If not relevant it must not be set or
			 *                            // <code>null</code> can be provided.
			 *      editable: true,       // Boolean which describes whether the control is editable. If not relevant it must not be set or
			 *                            // <code>null</code> can be provided.
			 *      children: []          // Array of accessibility info objects of children of the given control (e.g. when the control is a layout).
			 *                            // Note: Children should only be provided when it is helpful to understand the accessibility context
			 *                            //       (e.g. a form control must not provide details of its internals (fields, labels, ...) but a
			 *                            //       layout should).
			 *    };
			 * };
			 * </pre>
			 * 
			 * Note: The returned object provides the accessibility state of the control at the point in time when this function is called.
			 * @return Current accessibility state of the control.
			 */
			getAccessibilityInfo(): any;
			/**
			 * Gets current value of property <code>busy</code>.
			 * 
			 * Whether the control is currently in busy state.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>busy</code>
			 */
			getBusy(): boolean;
			/**
			 * Gets current value of property <code>busyIndicatorDelay</code>.
			 * 
			 * The delay in milliseconds, after which the busy indicator will show up for this control.
			 * 
			 * Default value is <code>1000</code>.
			 * @return Value of property <code>busyIndicatorDelay</code>
			 */
			getBusyIndicatorDelay(): number;
			/**
			 * Returns a list of all child controls with a field group ID.
			 * See {@link #checkFieldGroupIds checkFieldGroupIds} for a description of the
			 * <code>vFieldGroupIds</code> parameter.
			 * Associated controls are not taken into account.
			 * @param vFieldGroupIds ID of the field group or an array of field group IDs to match(optional)
			 * @return The list of controls with a field group ID
			 */
			getControlsByFieldGroupId(vFieldGroupIds?: string|string[]): Control[];
			/**
			 * Returns a copy of the field group IDs array. Modification of the field group IDs
			 * need to call {@link #setFieldGroupIds setFieldGroupIds} to apply the changes.
			 * @return copy of the field group IDs
			 */
			getFieldGroupIds(): string[];
			/**
			 * Returns the DOMNode Id to be used for the "labelFor" attribute of the label.
			 * 
			 * By default, this is the Id of the control itself.
			 * @return Id to be used for the <code>labelFor</code>
			 */
			getIdForLabel(): string;
			/**
			 * Returns a renderer for this control instance.
			 * 
			 * It is retrieved using the RenderManager as done during rendering.
			 * @return a Renderer suitable for this Control instance.
			 */
			getRenderer(): any;
			/**
			 * Gets current value of property <code>visible</code>.
			 * 
			 * Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead of the real control
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>visible</code>
			 */
			getVisible(): boolean;
			/**
			 * Returns true if the given style class or all multiple style classes which are generated by splitting the given string with space are already set on the control
			 * via previous call(s) to addStyleClass().
			 * @param sStyleClass the style to check for
			 * @return 
			 */
			hasStyleClass(sStyleClass: string): boolean;
			/**
			 * Triggers rerendering of this element and its children.
			 * 
			 * As <code>sap.ui.core.Element</code> "bubbles up" the invalidate, changes to children
			 * potentially result in rerendering of the whole sub tree.
			 * @param oOrigin 
			 */
			invalidate(oOrigin: any);
			/**
			 * This triggers rerendering of itself and its children.<br/> As <code>sap.ui.base.ManagedObject</code> "bubbles up" the
			 * invalidate, changes to child-<code>Elements</code> will also result in rerendering of the whole sub tree.
			 * @note Overload from base type sap.ui.base.ManagedObject
			 */
			invalidate();
			/**
			 * Check if the control is currently in busy state
			 * @deprecated Use getBusy instead
			 * @return boolean
			 */
			isBusy();
			/**
			 * Function is called when the rendering of the control is completed.
			 * 
			 * Applications must not call this hook method directly, it is called by the framework.
			 * 
			 * Subclasses of Control should override this hook to implement any necessary actions after the rendering.
			 */
			onAfterRendering();
			/**
			 * Function is called before the rendering of the control is started.
			 * 
			 * Applications must not call this hook method directly, it is called by the framework.
			 * 
			 * Subclasses of Control should override this hook to implement any necessary actions before the rendering.
			 */
			onBeforeRendering();
			/**
			 * Puts <code>this</code> control into the specified container (<code>oRef</code>) at the given
			 * position (<code>oPosition</code>).
			 * 
			 * First it is checked whether <code>oRef</code> is a container element / control (has a
			 * multiple aggregation with type <code>sap.ui.core.Control</code> and name 'content') or is an Id String
			 * of such an container.
			 * If this is not the case <code>oRef</code> can either be a Dom Reference or Id String of the UIArea
			 * (if it does not yet exist implicitly a new UIArea is created),
			 * 
			 * The <code>oPosition</code> can be one of the following:
			 * 
			 * <ul>
			 *  <li>"first": The control is added as the first element to the container.</li>
			 *  <li>"last": The control is added as the last element to the container (default).</li>
			 *  <li>"only": All existing children of the container are removed (not destroyed!) and the control is added as new child.</li>
			 *  <li><i>index</i>: The control is added at the specified <i>index</i> to the container.</li>
			 * </ul>
			 * @param oRef container into which the control should be put
			 * @param oPosition Describes the position where the control should be put into the container
			 * @return Returns <code>this</code> to allow method chaining
			 */
			placeAt(oRef: string|any|Control, oPosition?: string|number): Control;
			/**
			 * Removes the given string from the list of custom style classes that have been set previously.
			 * Regular style classes like "sapUiBtn" cannot be removed.
			 * @param sStyleClass the style to be removed
			 * @return Returns <code>this</code> to allow method chaining
			 */
			removeStyleClass(sStyleClass: string): Control;
			/**
			 * Tries to replace its DOM reference by re-rendering.
			 */
			rerender();
			/**
			 * Set the controls busy state.
			 * @param bBusy The new busy state to be set
			 * @return <code>this</code> to allow method chaining
			 */
			setBusy(bBusy: boolean): Control;
			/**
			 * Define the delay, after which the busy indicator will show up
			 * @param iDelay The delay in ms
			 * @return <code>this</code> to allow method chaining
			 */
			setBusyIndicatorDelay(iDelay: number): Control;
			/**
			 * Sets a new value for property <code>fieldGroupIds</code>.
			 * 
			 * The IDs of a logical field group that this control belongs to. All fields in a logical field group should share the same <code>fieldGroupId</code>.
			 * Once a logical field group is left, the validateFieldGroup event is raised.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>[]</code>.
			 * @param sFieldGroupIds New value for property <code>fieldGroupIds</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setFieldGroupIds(sFieldGroupIds: string[]): Control;
			/**
			 * Sets a new value for property <code>visible</code>.
			 * 
			 * Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead of the real control
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bVisible New value for property <code>visible</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setVisible(bVisible: boolean): Control;
			/**
			 * The string given as "sStyleClass" will be be either added to or removed from the "class" attribute of this control's root HTML element,
			 * depending on the value of "bAdd": if bAdd is true, sStyleClass will be added.
			 * If bAdd is not given, sStyleClass will be removed if it is currently present and will be added if not present.
			 * If sStyleClass is null or empty string, the call is ignored.
			 * 
			 * See addStyleClass and removeStyleClass for further documentation.
			 * @param sStyleClass the CSS class name to be added or removed
			 * @param bAdd whether sStyleClass should be added (or removed); when this parameter is not given, sStyleClass will be toggled (removed, if present, and added if not present)
			 * @return Returns <code>this</code> to allow method chaining
			 */
			toggleStyleClass(sStyleClass: string, bAdd: boolean): Control;
			/**
			 * Triggers the validateFieldGroup event for this control.
			 * Called by sap.ui.core.UIArea if a field group should be validated after is loses the focus or a validation key combibation was pressed.
			 * The validation key is defined in the UI area <code>UIArea._oFieldGroupValidationKey</code>
			 */
			triggerValidateFieldGroup();
		}
	
		class Core extends sap.ui.base.Object {
			/**
			 * 
			 */
			constructor();
			/**
			 * Enforces an immediate update of the visible UI (aka "rendering").
			 * 
			 * In general, applications should avoid calling this method and
			 * instead let the framework manage any necessary rendering.
			 */
			applyChanges();
			/**
			 * Applies the theme with the given name (by loading the respective style sheets, which does not disrupt the application).
			 * 
			 * By default, the theme files are expected to be located at path relative to the respective control library ([libraryLocation]/themes/[themeName]).
			 * Different locations can be configured by using the method setThemePath() or by using the second parameter "sThemeBaseUrl" of applyTheme().
			 * Usage of this second parameter is a shorthand for setThemePath and internally calls setThemePath, so the theme location is then known.
			 * 
			 * sThemeBaseUrl is a single URL to specify the default location of all theme files. This URL is the base folder below which the control library folders
			 * are located. E.g. if the CSS files are not located relative to the root location of UI5, but instead they are at locations like
			 *    http://my.server/myapp/resources/sap/ui/core/themes/my_theme/library.css
			 * then the URL that needs to be given is:
			 *    http://my.server/myapp/resources
			 * All theme resources are then loaded from below this folder - except if for a certain library a different location has been registered.
			 * 
			 * If the theme resources are not all either below this base location or  with their respective libraries, then setThemePath must be
			 * used to configure individual locations.
			 * @param sThemeName the name of the theme to be loaded
			 * @param sThemeBaseUrl the (optional) base location of the theme(optional)
			 */
			applyTheme(sThemeName: string, sThemeBaseUrl?: string);
			/**
			 * Registers a listener for control events.
			 * @param fnFunction callback to be called for each control event
			 * @param oListener optional context object to call the callback on.(optional)
			 */
			attachControlEvent(fnFunction: any, oListener?: any);
			/**
			 * Attach event-handler <code>fnFunction</code> to the 'formatError' event of <code>sap.ui.core.Core</code>.<br/>
			 * Please note that this event is a bubbling event and may already be canceled before reaching the core.<br/>
			 * @param fnFunction The function to call, when the event occurs. This function will be called on the
			 *            oListener-instance (if present) or in a 'static way'.
			 * @param oListener Object on which to call the given function. If empty, this Model is used.(optional)
			 * @return <code>this</code> to allow method chaining
			 */
			attachFormatError(fnFunction: any, oListener?: any): Core;
			/**
			 * Attaches a given function to the <code>initEvent</code> event of the core.
			 * 
			 * The given callback function will either be called once the Core has been initialized
			 * or, if it has been initialized already, it will be called immediately.
			 * @param fnFunction the callback function to be called on event firing.
			 */
			attachInit(fnFunction: any);
			/**
			 * Registers a listener to the central interval timer.
			 * @param fnFunction callback to be called periodically
			 * @param oListener optional context object to call the callback on.(optional)
			 */
			attachIntervalTimer(fnFunction: any, oListener?: any);
			/**
			 * Register a listener for the <code>localizationChanged</code> event.
			 * @param fnFunction callback to be called
			 * @param oListener context object to cal lthe function on.
			 */
			attachLocalizationChanged(fnFunction: any, oListener: any);
			/**
			 * Attach event-handler <code>fnFunction</code> to the 'parseError' event of <code>sap.ui.core.Core</code>.<br/>
			 * Please note that this event is a bubbling event and may already be canceled before reaching the core.<br/>
			 * @param oData The object, that should be passed along with the event-object when firing the event
			 * @param fnFunction The function to call, when the event occurs. This function will be called on the
			 *            oListener-instance (if present) or in a 'static way'.
			 * @param oListener Object on which to call the given function. If empty, this Model is used.(optional)
			 * @return <code>this</code> to allow method chaining
			 */
			attachParseError(oData: any, fnFunction: any, oListener?: any): Core;
			/**
			 * Attach event-handler <code>fnFunction</code> to the 'validationError' event of <code>sap.ui.core.Core</code>.<br/>
			 * Please note that this event is a bubbling event and may already be canceled before reaching the core.<br/>
			 * @param oData The object, that should be passed along with the event-object when firing the event
			 * @param fnFunction The function to call, when the event occurs. This function will be called on the
			 *            oListener-instance (if present) or in a 'static way'.
			 * @param oListener Object on which to call the given function. If empty, this Model is used.(optional)
			 * @return <code>this</code> to allow method chaining
			 */
			attachValidationError(oData: any, fnFunction: any, oListener?: any): Core;
			/**
			 * Attach event-handler <code>fnFunction</code> to the 'validationSuccess' event of <code>sap.ui.core.Core</code>.<br/>
			 * Please note that this event is a bubbling event and may already be canceled before reaching the core.<br/>
			 * @param oData The object, that should be passed along with the event-object when firing the event
			 * @param fnFunction The function to call, when the event occurs. This function will be called on the
			 *            oListener-instance (if present) or in a 'static way'.
			 * @param oListener Object on which to call the given function. If empty, this Model is used.(optional)
			 * @return <code>this</code> to allow method chaining
			 */
			attachValidationSuccess(oData: any, fnFunction: any, oListener?: any): Core;
			/**
			 * Returns a list of all controls with a field group ID.
			 * See {@link sap.ui.core.Control#checkFieldGroupIds Control.prototype.checkFieldGroupIds} for a description of the
			 * <code>vFieldGroupIds</code> parameter.
			 * @param vFieldGroupIds ID of the field group or an array of field group IDs to match(optional)
			 * @return The list of controls with matching field group IDs
			 */
			byFieldGroupId(vFieldGroupIds?: string|string[]): Control[];
			/**
			 * Returns the registered element for the given id, if any.
			 * @param sId 
			 * @return the element for the given id
			 */
			byId(sId: string): Element;
			/**
			 * Creates a component with the provided id and settings.
			 * 
			 * When the optional parameter <code>sUrl</code> is given, then all request for resources of the
			 * library will be redirected to the given Url. This is convenience for a call to
			 * <pre>
			 *   jQuery.sap.registerModulePath(sName, sUrl);
			 * </pre>
			 * @param vComponent name of the component to import or object containing all needed parameters
			 * @param sUrl the URL to load the component from(optional)
			 * @param sId the ID for the component instance(optional)
			 * @param mSettings the settings object for the component(optional)
			 */
			createComponent(vComponent: string|any, sUrl?: string, sId?: string, mSettings?: any);
			/**
			 * Returns a new instance of the RenderManager interface.
			 * @return the new instance of the RenderManager interface.
			 */
			createRenderManager(): RenderManager;
			/**
			 * Creates a new sap.ui.core.UIArea.
			 * @param oDomRef a DOM Element or ID string of the UIArea
			 * @deprecated Use <code>setRoot()</code> instead!
			 * @return a new UIArea
			 */
			createUIArea(oDomRef: string|any): UIArea;
			/**
			 * Unregisters a listener for control events.
			 * 
			 * A listener will only be unregistered if the same function/context combination
			 * is given as in the attachControlEvent call.
			 * @param fnFunction function to unregister
			 * @param oListener context object given during registration(optional)
			 */
			detachControlEvent(fnFunction: any, oListener?: any);
			/**
			 * Detach event-handler <code>fnFunction</code> from the 'formatError' event of <code>sap.ui.core.Core</code>.<br/>
			 * 
			 * The passed function and listener object must match the ones previously used for event registration.
			 * @param fnFunction The callback function to unregister
			 * @param oListener Object on which the given function had to be called.
			 * @return <code>this</code> to allow method chaining
			 */
			detachFormatError(fnFunction: any, oListener: any): Core;
			/**
			 * Unregisters a listener for the central interval timer.
			 * 
			 * A listener will only be unregistered if the same function/context combination
			 * is given as in the attachIntervalTimer call.
			 * @param fnFunction function to unregister
			 * @param oListener context object given during registration(optional)
			 */
			detachIntervalTimer(fnFunction: any, oListener?: any);
			/**
			 * Unregister a listener from the <code>localizationChanged</code> event.
			 * 
			 * The listener will only be unregistered if the same function/context combination
			 * is given as in the call to <code>attachLocalizationListener</code>.
			 * @param fnFunction callback to be deregistered
			 * @param oListener context object given in a previous call to attachLocalizationChanged.
			 */
			detachLocalizationChanged(fnFunction: any, oListener: any);
			/**
			 * Detach event-handler <code>fnFunction</code> from the 'parseError' event of <code>sap.ui.core.Core</code>.<br/>
			 * 
			 * The passed function and listener object must match the ones previously used for event registration.
			 * @param fnFunction The callback function to unregister.
			 * @param oListener Object on which the given function had to be called.
			 * @return <code>this</code> to allow method chaining
			 */
			detachParseError(fnFunction: any, oListener: any): Core;
			/**
			 * Detach event-handler <code>fnFunction</code> from the 'validationError' event of <code>sap.ui.core.Core</code>.<br/>
			 * 
			 * The passed function and listener object must match the ones previously used for event registration.
			 * @param fnFunction The callback function to unregister
			 * @param oListener Object on which the given function had to be called.
			 * @return <code>this</code> to allow method chaining
			 */
			detachValidationError(fnFunction: any, oListener: any): Core;
			/**
			 * Detach event-handler <code>fnFunction</code> from the 'validationSuccess' event of <code>sap.ui.core.Core</code>.<br/>
			 * 
			 * The passed function and listener object must match the ones previously used for event registration.
			 * @param fnFunction The function to call, when the event occurs.
			 * @param oListener Object on which the given function had to be called.
			 * @return <code>this</code> to allow method chaining
			 */
			detachValidationSuccess(fnFunction: any, oListener: any): Core;
			/**
			 * Creates a new subclass of class sap.ui.core.Core with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Fire event formatError to attached listeners.
			 * 
			 * Expects following event parameters:
			 * <ul>
			 * <li>'element' of type <code>sap.ui.core.Element</code> </li>
			 * <li>'property' of type <code>string</code> </li>
			 * <li>'type' of type <code>string</code> </li>
			 * <li>'newValue' of type <code>object</code> </li>
			 * <li>'oldValue' of type <code>object</code> </li>
			 * <li>'exception' of type <code>object</code> </li>
			 * </ul>
			 * @param mArguments the arguments to pass along with the event.(optional)
			 * @return <code>this</code> to allow method chaining
			 */
			fireFormatError(mArguments?: any): Core;
			/**
			 * Fire event parseError to attached listeners.
			 * 
			 * Expects following event parameters:
			 * <ul>
			 * <li>'element' of type <code>sap.ui.core.Element</code> </li>
			 * <li>'property' of type <code>string</code> </li>
			 * <li>'type' of type <code>string</code> </li>
			 * <li>'newValue' of type <code>object</code> </li>
			 * <li>'oldValue' of type <code>object</code> </li>
			 * <li>'exception' of type <code>object</code> </li>
			 * </ul>
			 * @param mArguments the arguments to pass along with the event.(optional)
			 * @return <code>this</code> to allow method chaining
			 */
			fireParseError(mArguments?: any): Core;
			/**
			 * Fire event validationError to attached listeners.
			 * 
			 * Expects following event parameters:
			 * <ul>
			 * <li>'element' of type <code>sap.ui.core.Element</code> </li>
			 * <li>'property' of type <code>string</code> </li>
			 * <li>'type' of type <code>string</code> </li>
			 * <li>'newValue' of type <code>object</code> </li>
			 * <li>'oldValue' of type <code>object</code> </li>
			 * <li>'exception' of type <code>object</code> </li>
			 * </ul>
			 * @param mArguments the arguments to pass along with the event.(optional)
			 * @return <code>this</code> to allow method chaining
			 */
			fireValidationError(mArguments?: any): Core;
			/**
			 * Fire event validationSuccess to attached listeners.
			 * 
			 * Expects following event parameters:
			 * <ul>
			 * <li>'element' of type <code>sap.ui.core.Element</code> </li>
			 * <li>'property' of type <code>string</code> </li>
			 * <li>'type' of type <code>string</code> </li>
			 * <li>'newValue' of type <code>object</code> </li>
			 * <li>'oldValue' of type <code>object</code> </li>
			 * </ul>
			 * @param mArguments the arguments to pass along with the event.(optional)
			 * @return <code>this</code> to allow method chaining
			 */
			fireValidationSuccess(mArguments?: any): Core;
			/**
			 * Returns the registered component for the given id, if any.
			 * @param sId 
			 * @return the component for the given id
			 */
			getComponent(sId: string): Component;
			/**
			 * Returns the Configuration of the Core.
			 * @return the Configuration of the current Core.
			 */
			getConfiguration(): Configuration;
			/**
			 * Returns the registered element for the given ID, if any.
			 * @param sId 
			 * @deprecated use <code>sap.ui.core.Core.byId</code> instead!
			 * @return the element for the given id
			 */
			getControl(sId: string): Element;
			/**
			 * Returns the Id of the control/element currently in focus.
			 * @return the Id of the control/element currently in focus.
			 */
			getCurrentFocusedControlId(): string;
			/**
			 * Returns the registered element for the given ID, if any.
			 * @param sId 
			 * @deprecated use <code>sap.ui.core.Core.byId</code> instead!
			 * @return the element for the given id
			 */
			getElementById(sId: string): Element;
			/**
			 * Returns the event bus.
			 * @return the event bus
			 */
			getEventBus(): EventBus;
			/**
			 * Retrieves a resource bundle for the given library and locale.
			 * 
			 * If only one argument is given, it is assumed to be the libraryName. The locale
			 * then falls back to the current {@link sap.ui.core.Configuration.prototype.getLanguage session locale}.
			 * If no argument is given, the library also falls back to a default: "sap.ui.core".
			 * @param sLibraryName name of the library to retrieve the bundle for(optional)
			 * @param sLocale locale to retrieve the resource bundle for(optional)
			 * @return the best matching resource bundle for the given parameters or undefined
			 */
			getLibraryResourceBundle(sLibraryName?: string, sLocale?: string): jQuery.sap.util.ResourceBundle;
			/**
			 * Returns a map of library info objects for all currently loaded libraries,
			 * keyed by their names.
			 * 
			 * The structure of the library info objects matches the structure of the info object
			 * that the {@link #initLibrary} method expects. Only property names documented with
			 * <code>initLibrary</code> should be accessed, any additional properties might change or
			 * disappear in future. When a property does not exists, its default value (as documented
			 * with <code>initLibrary</code>) should be assumed.
			 * 
			 * <b>Note:</b> The returned info objects must not be modified. They might be a living
			 * copy of the internal data (for efficiency reasons) and the framework is not prepared
			 * to handle modifications to these objects.
			 * @return Map of library info objects keyed by the library names.
			 */
			getLoadedLibraries(): any;
			/**
			 * Returns the active <code>MessageManager</code> instance.
			 * @return 
			 */
			getMessageManager(): message.MessageManager;
			/**
			 * Get the model with the given model name.
			 * 
			 * The name can be omitted to reference the default model or it must be a non-empty string.
			 * 
			 * Note: to be compatible with future versions of this API, applications must not use the value <code>null</code>,
			 * the empty string <code>""</code> or the string literals <code>"null"</code> or <code>"undefined"</code> as model name.
			 * @param sName name of the model to be retrieved(optional)
			 * @return oModel
			 */
			getModel(sName?: string|any): sap.ui.model.Model;
			/**
			 * Returns the instance of the root component (if exists).
			 * @return instance of the current root component
			 */
			getRootComponent(): Component;
			/**
			 * Returns the static, hidden area DOM element belonging to this core instance.
			 * 
			 * It can be used e.g. for hiding elements like Popups, Shadow, Blocklayer etc.
			 * 
			 * If it is not yet available, a DIV is created and appended to the body.
			 * @return the static, hidden area DOM element belonging to this core instance.
			 */
			getStaticAreaRef(): any;
			/**
			 * Returns a UIArea if the given ID/Element belongs to one.
			 * @param o a DOM Element or ID string of the UIArea
			 * @return a UIArea with a given id or dom ref.
			 */
			getUIArea(o: string|any): UIArea;
			/**
			 * Returns <code>true</code> if there are any pending rendering tasks or when
			 * such rendering tasks are currently being executed.
			 * @return true if there are pending (or executing) rendering tasks.
			 */
			getUIDirty(): boolean;
			/**
			 * Check if a Model is set to the core
			 * @return true or false
			 */
			hasModel(): boolean;
			/**
			 * Includes a library theme into the current page (if a variant is specified it
			 * will include the variant library theme)
			 * @param sLibName the name of the UI library
			 * @param sVariant the variant to include (optional)(optional)
			 * @param sQuery to be used only by the Core(optional)
			 */
			includeLibraryTheme(sLibName: string, sVariant?: string, sQuery?: string);
			/**
			 * Provides the framework with information about a library.
			 * 
			 * This method is intended to be called exactly once while the main module of a library
			 * (its <code>library.js</code> module) is executing, typically at its begin. The single
			 * parameter <code>oLibInfo</code> is an info object that describes the content of the library.
			 * 
			 * When the <code>oLibInfo</code> has been processed, a normalized version of it will be kept
			 * and will be returned as library information in later calls to {@link #getLoadedLibraries}.
			 * Finally, <code>initLibrary</code> fires (the currently private) {@link #event:LibraryChanged}
			 * event with operation 'add' for the newly loaded library.
			 * 
			 * 
			 * <h3>Side Effects</h3>
			 * 
			 * While analyzing the <code>oLibInfo</code>, the framework takes some additional actions:
			 * 
			 * <ul>
			 * <li>If the info object contains a list of <code>interfaces</code>, they will be registered
			 * with the {@link sap.ui.base.DataType} class to make them available as aggregation types
			 * in managed objects.</li>
			 * 
			 * <li>If the object contains a list of <code>controls</code> or <code>elements</code>,
			 * {@link sap.ui.lazyRequire lazy stubs} will be created for their constructor as well as for
			 * their static <code>extend</code> and <code>getMetadata</code> methods.<br>
			 * <b>Note:</b> Future versions might abandon the concept of lazy stubs as it requires synchronous
			 * XMLHttpRequests which have been deprecated (see {@link http://xhr.spec.whatwg.org}). To be on the
			 * safe side, productive applications should always require any modules that they directly depend on.</li>
			 * 
			 * <li>With the <code>noLibraryCSS</code> property, the library can be marked as 'theming-free'.
			 * Otherwise, the framework will add a &lt;link&gt; tag to the page's head, pointing to the library's
			 * theme-specific stylesheet. The creation of such a &lt;link&gt; tag can be suppressed with the
			 * {@link sap.ui.core.Configuration global configuration option} <code>preloadLibCss</code>.
			 * It can contain a list of library names for which no stylesheet should be included.
			 * This is e.g. useful when an application merges the CSS for multiple libraries and already
			 * loaded the resulting stylesheet.</li>
			 * 
			 * <li>If a list of library <code>dependencies</code> is specified in the info object, those
			 * libraries will be loaded synchronously by <code>initLibrary</code>.<br>
			 * <b>Note:</b> Dependencies between libraries don't have to be modeled as AMD dependencies.
			 * Only when enums or types from an additional library are used in the coding of the
			 * <code>library.js</code> module, the library should be additionally listed in the AMD dependencies.</li>
			 * </ul>
			 * 
			 * Last but not least, higher layer frameworks might want to include their own metadata for libraries.
			 * The property <code>extensions</code> might contain such additional metadata. Its structure is not defined
			 * by the framework, but it is strongly suggested that each extension only occupies a single property
			 * in the <code>extensions</code> object and that the name of that property contains some namespace
			 * information (e.g. library name that introduces the feature) to avoid conflicts with other extensions.
			 * The framework won't touch the content of <code>extensions</code> but will make it available
			 * in the library info objects returned by {@link #getLoadedLibraries}.
			 * 
			 * 
			 * <h3>Relationship to Descriptor for Libraries (manifest.json)</h3>
			 * 
			 * The information contained in <code>oLibInfo</code> is partially redundant to the content of the descriptor
			 * for the same library (its <code>manifest.json</code> file). Future versions of UI5 might ignore the information
			 * provided in <code>oLibInfo</code> and might evaluate the descriptor file instead. Library developers therefore
			 * should keep the information in both files in sync.
			 * 
			 * When the <code>manifest.json</code> is generated from the <code>.library</code> file (which is the default
			 * for UI5 libraries built with Maven), then the content of the <code>.library</code> and <code>library.js</code>
			 * files must be kept in sync.
			 * @param oLibInfo Info object for the library
			 */
			initLibrary(oLibInfo: any);
			/**
			 * Returns true if the Core has already been initialized. This means that instances
			 * of RenderManager etc. do already exist and the init event has already been fired
			 * (and will not be fired again).
			 * @return whether the Core has already been initialized
			 */
			isInitialized(): boolean;
			/**
			 * Returns the locked state of the <code>sap.ui.core.Core</code>
			 * @return locked state
			 */
			isLocked(): boolean;
			/**
			 * Check if the script is running on mobile
			 * @return true or false
			 */
			isMobile(): boolean;
			/**
			 * Used to find out whether a certain DOM element is the static area
			 * @param oDomRef 
			 * @return whether the given DomRef is the StaticAreaRef
			 */
			isStaticAreaRef(oDomRef: any): boolean;
			/**
			 * Returns true, if the styles of the current theme are already applied, false otherwise.
			 * 
			 * This function must not be used before the init event of the Core.
			 * If the styles are not yet applied an theme changed event will follow when the styles will be applied.
			 * @return whether the styles of the current theme are already applied
			 */
			isThemeApplied(): boolean;
			/**
			 * Loads a set of libraries, preferably asynchronously.
			 * 
			 * The module loading is still synchronous, so if a library loads additional modules besides
			 * its library.js file, those modules might be loaded synchronously by the library.js
			 * The async loading is only supported by the means of the library-preload.json files, so if a
			 * library doesn't provide a preload or when the preload is deactivated (configuration, debug mode)
			 * then this API falls back to synchronous loading. However, the contract (Promise) remains valid
			 * and a Promise will be returned if async is specified - even when the real loading
			 * is done synchronously.
			 * @param aLibraries set of libraries that should be loaded
			 * @param mOptions configuration options(optional)
			 * @return returns a Promise in async mode, otherwise <code>undefined</code>
			 */
			// Resticted loadLibraries(aLibraries: string[], mOptions?: any): any;
			/**
			 * Synchronously loads the given library and makes it available to the application.
			 * 
			 * Loads the *.library module, which contains all preload modules (enums, types, content of a shared.js
			 * if it exists). The library module will call initLibrary with additional metadata for the library.
			 * 
			 * As a result, consuming applications can instantiate any control or element from that library
			 * without having to write import statements for the controls or for the enums.
			 * 
			 * When the optional parameter <code>sUrl</code> is given, then all request for resources of the
			 * library will be redirected to the given Url. This is convenience for a call to
			 * <pre>
			 *   jQuery.sap.registerModulePath(sLibrary, sUrl);
			 * </pre>
			 * 
			 * When the given library has been loaded already, no further action will be taken.
			 * Especially, a given Url will not be honored!
			 * 
			 * Note: this method does not participate in the supported preload of libraries.
			 * @param sLibrary name of the library to import
			 * @param sUrl URL to load the library from(optional)
			 */
			loadLibrary(sLibrary: string, sUrl?: string);
			/**
			 * Locks the Core. No browser events are dispatched to the controls.
			 * 
			 * Lock should be called before and after the dom is modified for rendering, roundtrips...
			 * Exceptions might be the case for asynchronous UI behavior
			 */
			lock();
			/**
			 * Registers a Plugin to the <code>sap.ui.core.Core</code>, which lifecycle
			 * will be managed (start and stop).
			 * <br/>
			 * Plugin object need to implement two methods:
			 * <ul>
			 *   <li><code>startPlugin(oCore)</code>: will be invoked, when the Plugin
			 *       should start (as parameter the reference to the Core will be provided</li>
			 *   <li><code>stopPlugin()</code>: will be invoked, when the Plugin should stop</li>
			 * </ul>
			 * @param oPlugin reference to a Plugin object
			 */
			registerPlugin(oPlugin: any);
			/**
			 * Sets or unsets a model for the given model name.
			 * 
			 * The <code>sName</code> must either be <code>undefined</code> (or omitted) or a non-empty string.
			 * When the name is omitted, the default model is set/unset.
			 * 
			 * When <code>oModel</code> is <code>null</code> or <code>undefined</code>, a previously set model
			 * with that name is removed from the Core.
			 * 
			 * Any change (new model, removed model) is propagated to all existing UIAreas and their descendants
			 * as long as a descendant doesn't have its own model set for the given name.
			 * 
			 * Note: to be compatible with future versions of this API, applications must not use the value <code>null</code>,
			 * the empty string <code>""</code> or the string literals <code>"null"</code> or <code>"undefined"</code> as model name.
			 * @param oModel the model to be set or <code>null</code> or <code>undefined</code>
			 * @param sName the name of the model or <code>undefined</code>(optional)
			 * @return <code>this</code> to allow method chaining
			 */
			setModel(oModel: sap.ui.model.Model, sName?: string): Core;
			/**
			 * Implicitly creates a new <code>UIArea</code> (or reuses an exiting one) for the given DOM reference and
			 * adds the given control reference to the UIAreas content (existing content will be removed).
			 * @param oDomRef a DOM Element or Id (string) of the UIArea
			 * @param oControl the Control that should be the added to the <code>UIArea</code>.
			 * @deprecated Use function <code>oControl.placeAt(oDomRef, "only")</code> of <code>sap.ui.core.Control</code> instead.
			 */
			setRoot(oDomRef: string|any, oControl: sap.ui.base.Interface|Control);
			/**
			 * Defines the root directory from below which UI5 should load the theme with the given name.
			 * Optionally allows restricting the setting to parts of a theme covering specific control libraries.
			 * 
			 * Example:
			 * <code>
			 *   core.setThemeRoot("my_theme", "http://mythemeserver.com/allThemes");
			 *   core.applyTheme("my_theme");
			 * </code>
			 * will cause the following file to be loaded:
			 * <code>http://mythemeserver.com/allThemes/sap/ui/core/themes/my_theme/library.css</code>
			 * (and the respective files for all used control libraries, like <code>http://mythemeserver.com/allThemes/sap/ui/commons/themes/my_theme/library.css</code>
			 * if the sap.ui.commons library is used)
			 * 
			 * If parts of the theme are at different locations (e.g. because you provide a standard theme like "sap_goldreflection" for a custom control library and
			 * this self-made part of the standard theme is at a different location than the UI5 resources), you can also specify for which control libraries the setting
			 * should be used, by giving an array with the names of the respective control libraries as second parameter:
			 * <code>core.setThemeRoot("sap_goldreflection", ["my.own.library"], "http://mythemeserver.com/allThemes");</code>
			 * This will cause the Gold Reflection theme to be loaded normally from the UI5 location, but the part for styling the "my.own.library" controls will be loaded from:
			 * <code>http://mythemeserver.com/allThemes/my/own/library/themes/sap_goldreflection/library.css</code>
			 * 
			 * If the custom theme should be loaded initially (via bootstrap attribute), the "themeRoots" property of the window["sap-ui-config"] object must be used instead
			 * of Core.setThemeRoot(...) in order to configure the theme location early enough.
			 * @param sThemeName the name of the theme for which to configure the location
			 * @param aLibraryNames the optional library names to which the configuration should be restricted
			 * @param sThemeBaseUrl the base URL below which the CSS file(s) will be loaded from
			 * @return the Core, to allow method chaining
			 */
			setThemeRoot(sThemeName: string, aLibraryNames: string[], sThemeBaseUrl: string): Core;
			/**
			 * Unlocks the Core.
			 * 
			 * Browser events are dispatched to the controls again after this method is called.
			 */
			unlock();
			/**
			 * Unregisters a Plugin out of the <code>sap.ui.core.Core</code>
			 * @param oPlugin reference to a Plugin object
			 */
			unregisterPlugin(oPlugin: any);
		}
	
		class CustomData extends Element {
			/**
			 * Constructor for a new CustomData.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.core.CustomDataMetadata);
			/**
			 * Constructor for a new CustomData.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.ui.core.CustomData with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets current value of property <code>key</code>.
			 * 
			 * The key of the data in this CustomData object.
			 * When the data is just stored, it can be any string, but when it is to be written to HTML (writeToDom == true) then it must also be a valid HTML attribute name (it must conform to the sap.ui.core.ID type and may contain no colon) to avoid collisions, it also may not start with "sap-ui". When written to HTML, the key is prefixed with "data-".
			 * If any restriction is violated, a warning will be logged and nothing will be written to the DOM.
			 * @return Value of property <code>key</code>
			 */
			getKey(): string;
			/**
			 * Gets current value of property <code>value</code>.
			 * 
			 * The data stored in this CustomData object.
			 * When the data is just stored, it can be any JS type, but when it is to be written to HTML (writeToDom == true) then it must be a string.
			 * If this restriction is violated, a warning will be logged and nothing will be written to the DOM.
			 * @return Value of property <code>value</code>
			 */
			getValue(): any;
			/**
			 * Gets current value of property <code>writeToDom</code>.
			 * 
			 * If set to "true" and the value is of type "string" and the key conforms to the documented restrictions, this custom data is written to the HTML root element of the control as a "data-*" attribute.
			 * If the key is "abc" and the value is "cde", the HTML will look as follows:
			 * &lt;SomeTag ... data-abc="cde" ... &gt;
			 * Thus the application can provide stable attributes by data binding which can be used for styling or identification purposes.
			 * ATTENTION: use carefully to not create huge attributes or a large number of them.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>writeToDom</code>
			 */
			getWriteToDom(): boolean;
			/**
			 * Sets a new value for property <code>key</code>.
			 * 
			 * The key of the data in this CustomData object.
			 * When the data is just stored, it can be any string, but when it is to be written to HTML (writeToDom == true) then it must also be a valid HTML attribute name (it must conform to the sap.ui.core.ID type and may contain no colon) to avoid collisions, it also may not start with "sap-ui". When written to HTML, the key is prefixed with "data-".
			 * If any restriction is violated, a warning will be logged and nothing will be written to the DOM.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sKey New value for property <code>key</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setKey(sKey: string): CustomData;
			/**
			 * Sets a new value for property <code>value</code>.
			 * 
			 * The data stored in this CustomData object.
			 * When the data is just stored, it can be any JS type, but when it is to be written to HTML (writeToDom == true) then it must be a string.
			 * If this restriction is violated, a warning will be logged and nothing will be written to the DOM.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param oValue New value for property <code>value</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setValue(oValue: any): CustomData;
			/**
			 * Sets a new value for property <code>writeToDom</code>.
			 * 
			 * If set to "true" and the value is of type "string" and the key conforms to the documented restrictions, this custom data is written to the HTML root element of the control as a "data-*" attribute.
			 * If the key is "abc" and the value is "cde", the HTML will look as follows:
			 * &lt;SomeTag ... data-abc="cde" ... &gt;
			 * Thus the application can provide stable attributes by data binding which can be used for styling or identification purposes.
			 * ATTENTION: use carefully to not create huge attributes or a large number of them.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bWriteToDom New value for property <code>writeToDom</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setWriteToDom(bWriteToDom: boolean): CustomData;
		}
	
		class DeclarativeSupport  {
			/**
			 * 
			 */
			constructor();
			/**
			 * Enhances the given DOM element by parsing the Control and Elements info and creating
			 * the SAPUI5 controls for them.
			 * @param oElement the DOM element to compile
			 * @param oView The view instance to use(optional)
			 * @param isRecursive Whether the call of the function is recursive.(optional)
			 */
			compile(oElement: any, oView?: mvc.HTMLView, isRecursive?: boolean);
		}
	
		class Design {
			/**
			 * Mono space font
			 */
			static Monospace: string;
			/**
			 * Standard font
			 */
			static Standard: string;
		}
	
		class Element extends sap.ui.base.ManagedObject {
			/**
			 * Constructs and initializes an UI Element with the given <code>sId</code> and settings.
			 * 
			 * If the optional <code>mSettings</code> are given, they must be a JSON-like object (object literal)
			 * that defines values for properties, aggregations, associations or events keyed by their name.
			 * 
			 * <b>Valid Names:</b>
			 * 
			 * The property (key) names supported in the object literal are exactly the (case sensitive)
			 * names documented in the JSDoc for the properties, aggregations, associations and events
			 * of the control and its base classes. Note that for  0..n aggregations and associations this
			 * usually is the plural name, whereas it is the singular name in case of 0..1 relations.
			 * 
			 * If a key name is ambiguous for a specific control class (e.g. a property has the same
			 * name as an event), then this method prefers property, aggregation, association and
			 * event in that order. To resolve such ambiguities, the keys can be prefixed with
			 * <code>aggregation:</code>, <code>association:</code> or <code>event:</code>.
			 * In that case the keys must be quoted due to the ':'.
			 * 
			 * Each subclass should document the set of supported names in its constructor documentation.
			 * 
			 * <b>Valid Values:</b>
			 * 
			 * <ul>
			 * <li>for normal properties, the value has to be of the correct simple type (no type conversion occurs)
			 * <li>for 0..1 aggregations, the value has to be an instance of the aggregated control or element type
			 * <li>for 0..n aggregations, the value has to be an array of instances of the aggregated type
			 * <li>for 0..1 associations, an instance of the associated type or an id (string) is accepted
			 * <li>0..n associations are not supported yet
			 * <li>for events either a function (event handler) is accepted or an array of length 2
			 *     where the first element is a function and the 2nd element is an object to invoke the method on.
			 * </ul>
			 * 
			 * Special aggregation "dependents" is connected to the lifecycle management and databinding,
			 * but not rendered automatically and can be used for popups or other dependent controls. This allows
			 * definition of popup controls in declarative views and enables propagation of model and context
			 * information to them.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control; generated automatically if no non-empty id is given
			 *      Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!(optional)
			 * @param mSettings optional map/JSON-object with initial property values, aggregated objects etc. for the new element(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some customData to the aggregation <code>customData</code>.
			 * @param oCustomData the customData to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addCustomData(oCustomData: CustomData): Element;
			/**
			 * Adds some dependent to the aggregation <code>dependents</code>.
			 * @param oDependent the dependent to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addDependent(oDependent: Control): Element;
			/**
			 * Adds a delegate that listens to the events that are fired on this element (as opposed to events which are fired BY this element).
			 * 
			 * When this element is cloned, the same delegate will be added to all clones. This behavior is well-suited for applications which want to add delegates
			 * that also work with templates in aggregation bindings.
			 * For control development the internal "addDelegate" method which does not clone delegates by default may be more suitable, as typically each control instance takes care of its own delegates.
			 * 
			 * To avoid double registrations, all registrations of the given delegate are first
			 * removed and then the delegate is added.
			 * 
			 * <strong>Important:</strong> If event delegates were added the delegate will still be called even if
			 * the event was processed and/or cancelled via <code>preventDefault</code> by the Element or another event delegate.
			 * <code>preventDefault</code> only prevents the event from bubbling.
			 * It should be checked e.g. in the event delegate's listener whether an Element is still enabled via <code>getEnabled</code>.
			 * Additionally there might be other things that delegates need to check depending on the event
			 * (e.g. not adding a key twice to an output string etc.).
			 * @param oDelegate the delegate object
			 * @param oThis if given, this object will be the "this" context in the listener methods; default is the delegate object itself(optional)
			 * @return Returns <code>this</code> to allow method chaining
			 */
			addEventDelegate(oDelegate: any, oThis?: any): Element;
			/**
			 * Applies the focus info.
			 * 
			 * To be overwritten by the specific control method.
			 * @param oFocusInfo 
			 */
			applyFocusInfo(oFocusInfo: any);
			/**
			 * Bind the object to the referenced entity in the model, which is used as the binding context
			 * to resolve bound properties or aggregations of the object itself and all of its children
			 * relatively to the given path.
			 * If a relative binding path is used, this will be applied whenever the parent context changes.
			 * @param vPath the binding path or an object with more detailed binding options
			 * @param mParameters map of additional parameters for this binding (only taken into account when vPath is a string in that case the properties described for vPath above are valid here).(optional)
			 * @return reference to the instance itself
			 */
			bindElement(vPath: string|any, mParameters?: any): sap.ui.base.ManagedObject;
			/**
			 * Clone delegates
			 * @param sIdSuffix a suffix to be appended to the cloned element id(optional)
			 * @param aLocalIds an array of local IDs within the cloned hierarchy (internally used)(optional)
			 * @return reference to the newly created clone
			 */
			clone(sIdSuffix?: string, aLocalIds?: string[]): sap.ui.base.ManagedObject;
			/**
			 * Clones a tree of objects starting with the object on which clone is called first (root object).
			 * 
			 * The ids within the newly created clone tree are derived from the original ids by appending
			 * the given <code>sIdSuffix</code> (if no suffix is given, one will be created; it will be
			 * unique across multiple clone calls).
			 * 
			 * The <code>oOptions</code> configuration object can have the following properties:
			 * <ul>
			 * <li>The boolean value <code>cloneChildren</code> specifies wether associations/aggregations will be cloned</li>
			 * <li>The boolean value <code>cloneBindings</code> specifies if bindings will be cloned</li>
			 * </ul>
			 * 
			 * For each cloned object the following settings are cloned based on the metadata of the object and the defined options:
			 * <ul>
			 * <li>all properties that are not bound. If cloneBinding is false even these properties will be cloned;
			 * the values are used by reference, they are not cloned</li>
			 * <li>all aggregated objects that are not bound. If cloneBinding is false even the ones that are bound will be cloned;
			 * they are all cloned recursively using the same <code>sIdSuffix</code></li>
			 * <li>all associated controls; when an association points to an object inside the cloned object tree,
			 *     then the cloned association will be modified to that it points to the clone of the target object.
			 *     When the association points to a managed object outside of the cloned object tree, then its
			 *     target won't be changed.</li>
			 * <li>all models set via setModel(); used by reference </li>
			 * <li>all property and aggregation bindings (if cloneBindings is true); the pure binding infos (path, model name) are
			 *     cloned, but all other information like template control or factory function,
			 *     data type or formatter function are copied by reference. The bindings themselves
			 *     are created anew as they are specific for the combination (object, property, model).
			 *     As a result, any later changes to a binding of the original object are not reflected
			 *     in the clone, but changes to e.g the type or template etc. are.</li>
			 * </ul>
			 * 
			 * Each clone is created by first collecting the above mentioned settings and then creating
			 * a new instance with the normal constructor function. As a result, any side effects of
			 * mutator methods (setProperty etc.) or init hooks are repeated during clone creation.
			 * There is no need to override <code>clone()</code> just to reproduce these internal settings!
			 * 
			 * Custom controls however can override <code>clone()</code> to implement additional clone steps.
			 * They usually will first call <code>clone()</code> on the super class and then modify the
			 * returned clone accordingly.
			 * 
			 * Applications <b>must never provide</b> the second parameter <code>aLocaleIds</code>.
			 * It is determined automatically for the root object (and its non-existance also serves as
			 * an indicator for the root object). Specifying it will break the implementation of <code>clone()</code>.
			 * @note Overload from base type sap.ui.base.ManagedObject
			 * @param sIdSuffix a suffix to be appended to the cloned object id(optional)
			 * @param aLocalIds an array of local IDs within the cloned hierarchy (internally used)(optional)
			 * @param oOptions configuration object(optional)
			 * @return reference to the newly created clone
			 */
			clone(sIdSuffix?: string, aLocalIds?: string[], oOptions?: any): sap.ui.base.ManagedObject;
			/**
			 * Creates a new Element from the given data.
			 * 
			 * If vData is an Element already, that element is returned.
			 * If vData is an object (literal), then a new element is created with vData as settings.
			 * The type of the element is either determined by a "Type" entry in the vData or
			 * by a type information in the oKeyInfo object
			 * @param vData the data to create the element from
			 * @param oKeyInfo an entity information (e.g. aggregation info)(optional)
			 */
			create(vData: Element|any, oKeyInfo?: any);
			/**
			 * Creates a new ManagedObject from the given data.
			 * 
			 * If vData is a managed object already, that object is returned.
			 * If vData is an object (literal), then a new object is created with vData as settings.
			 * The type of the object is either determined by a "Type" entry in the vData or
			 * by a type information in the oKeyInfo object
			 * @note Overload from base type sap.ui.base.ManagedObject
			 * @param vData the data to create the object from
			 * @param oKeyInfo 
			 * @param oScope Scope object to resolve types and formatters in bindings(optional)
			 */
			create(vData: sap.ui.base.ManagedObject|any, oKeyInfo: any, oScope?: any);
			/**
			 * Attaches custom data to an Element or retrieves attached data.
			 * 
			 * Usage:
			 *    data("myKey", myData)
			 * attaches myData (which can be any JS data type, e.g. a number, a string, an object, or a function) to this element, under the given key "myKey". If the key already exists,the value will be updated.
			 * 
			 *    data("myKey", myData, writeToDom)
			 * attaches myData to this element, under the given key "myKey" and (if writeToDom is true) writes key and value to the HTML. If the key already exists,the value will be updated. While oValue can be any JS data type to be attached, it must be a string to be also written to DOM. The key must also be a valid HTML attribute name (it must conform to sap.ui.core.ID and may contain no colon) and may not start with "sap-ui". When written to HTML, the key is prefixed with "data-".
			 * 
			 *    data("myKey")
			 * retrieves whatever data has been attached to this Element (using the key "myKey") before
			 * 
			 *    data("myKey", null)
			 * removes whatever data has been attached to this Element (using the key "myKey") before
			 * 
			 *    data(null)
			 * removes all data
			 * 
			 *    data()
			 * returns all data, as a map
			 */
			data();
			/**
			 * Cleans up the resources associated with this element and all its children.
			 * 
			 * After an element has been destroyed, it can no longer be used in the UI!
			 * 
			 * Applications should call this method if they don't need the element any longer.
			 * @param bSuppressInvalidate if true, the UI element is not marked for redraw(optional)
			 */
			destroy(bSuppressInvalidate?: boolean);
			/**
			 * Destructor method for objects
			 * @note Overload from base type sap.ui.base.Object
			 */
			destroy();
			/**
			 * Destroys all the customData in the aggregation <code>customData</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyCustomData(): Element;
			/**
			 * Destroys all the dependents in the aggregation <code>dependents</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyDependents(): Element;
			/**
			 * Destroys the layoutData in the aggregation <code>layoutData</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyLayoutData(): Element;
			/**
			 * Destroys the tooltip in the aggregation
			 * named <code>tooltip</code>.
			 * @return <code>this</code> to allow method chaining
			 */
			destroyTooltip(): Element;
			/**
			 * Allows the parent of a control to enhance the aria information during rendering.
			 * 
			 * This function is called by the RenderManager's writeAccessibilityState method
			 * for the parent of the currently rendered control - if the parent implements it.
			 * @param oElement the Control/Element for which aria properties are rendered
			 * @param mAriaProps map of aria properties keyed by there name (withour prefix "aria-")
			 * @return map of enhanced aria properties
			 */
			enhanceAccessibilityState(oElement: Element, mAriaProps: any): any;
			/**
			 * Cleans up the element instance before destruction.
			 * 
			 * Applications must not call this hook method directly, it is called by the framework
			 * when the element is {@link #destroy destroyed}.
			 * 
			 * Subclasses of Element should override this hook to implement any necessary cleanup.
			 */
			exit();
			/**
			 * Creates a new subclass of class sap.ui.core.Element with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the following:
			 * <ul>
			 * <li><code>metadata:</code> an (optional) object literal containing meta information about the class.
			 * The information in the object literal will be wrapped by an instance of ElementMetadata
			 * and might contain the following information:
			 * <ul>
			 * <li>all values accepted for metadata as documented for the {@link sap.ui.base.Object.extend Object.extend} method</li>
			 * <li>library: {string} (optional) name of the library that contains the element/control
			 * <li>properties: a map of property info objects, mapped by the property name
			 *     Each info object should be a simple object literal and may contain the following information
			 *     <ul>
			 *     <li>type {string} optional type of the property, defaults to type "string"
			 *     <li>[defaultValue] {any} default value of the property. When omitted, defaults to the default value for the type
			 *     <li>group {string} optional semantic group of the property. Defaults to "Misc"
			 *     </ul>
			 *     If the property info object is not an object literal, it is assumed to be a string and
			 *     interpreted as the type of the property. All other informations use their default values.
			 * <li>aggregations: a map of aggregation info objects, mapped by the aggregation name
			 *     By convention, the name should be a singular name for aggregations of cardinality 0..1 and
			 *     should be a plural name for aggregations of cardinality 0..n.
			 * 
			 *     The info object should contain the following information
			 *     <ul>
			 *     <li>type {string} (optional) type of the aggregated controls/elements, defaults to sap.ui.core.Control
			 *     <li>altTypes {string[]} (optional) alternative primitive types that the aggregation can have (like string etc.). Defaults to no alternative types.
			 *     <li>multiple {boolean} (optional) information about the cardinality, defaults to true (multiple aggregation)
			 *     <li>singularName {string} (optional) singular name for 0..n aggregations. If not specified, a singular name is guessed from the plural name.
			 *     </ul>
			 *     If the aggregation info object is not an object literal, it is assumed to be a string and
			 *     interpreted as the type of the aggregation. All other informations use their default values.
			 * <li>associations: a map of association info objects, mapped by the association name
			 *     By convention, the name should be a singular name for aggregations of cardinality 0..1 and
			 *     should be a plural name for aggregations of cardinality 0..n.
			 * 
			 *     The info object should contain the following information
			 *     <ul>
			 *     <li>type {string} type of the associated controls/elements, defaults to sap.ui.core.Control
			 *     <li>multiple {boolean} (optional) information about the cardinality, defaults to false (single aggregation)
			 *     <li>singularName {string} (optional) singular name for 0..n aggregations. If not specified, a singular name is guessed from the plural name.
			 *     </ul>
			 *     If the association info object is not an object literal, it is assumed to be a string and
			 *     interpreted as the type of the aggregation. All other informations then use their default values.
			 * <li>events: a map of event info objects, mapped by the event name
			 *     The info object can contain the following information
			 *     <ul>
			 *     <li><code>allowPreventDefault:</code> {boolean} whether the control allows to prevent its default behavior for this event (defaults to false) </li>
			 *     </ul>
			 * </ul>
			 * For all properties, aggregations, associations and events, the usual access methods are created and added to the public facade.
			 * They don't need to be listed in the publicMethods array.
			 * </li>
			 * 
			 * <li><code>constructor:</code> a function that serves as a constructor function for the new element class.
			 * If no constructor function is given, the framework creates a default implementation that delegates all
			 * its arguments to the constructor function of the base class.
			 * <b>Note:</b> most of the time, subclasses of Element don't need to specify their own constructor function.
			 * They should use the symmetric {@link #init} and {@link #exit} hooks instead.
			 * </li>
			 * 
			 * <li><code>renderer:</code> definition of a renderer. This can be any of the following
			 * <ul>
			 * <li>the class name of a renderer class (a string)</li>
			 * <li>a render function with signature <code>function(oRenderManager, oControl)</code> that implements the rendering for the new class</li>
			 * <li>an object literal that contains functions/properties that should be mixed into a new render class which is
			 * created as a subclass of the renderer of the current class.</li>
			 * </ul>
			 * <b>Note:</b> usually only controls have a renderer. But to keep the control creation APIs simple and to honor future
			 * extensions of the current policy, the definition of a renderer is supported for direct subclasses of Element as well.
			 * </li>
			 * 
			 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
			 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
			 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
			 * make sense to use primitive values here other than to declare public constants.
			 * 
			 * All methods added this way and whose name is not 'init' nor 'exit' nor does it start with an underscore ('_')
			 * nor with the prefix 'on' are assumed to be public methods and are automatically added to the list of public facade methods.
			 * </ul>
			 * 
			 * The prototype object of the newly created class uses the same prototype as instances of the base class
			 * (prototype chaining).
			 * 
			 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
			 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
			 * itself.
			 * 
			 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
			 * can be specified. Instances of that class will be used to represent metadata for the newly created class
			 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
			 * metadata for a new class hierarchy they introduce (as done by  {@link sap.ui.core.Element Element}).
			 * @param sClassName name of the class to be created
			 * @param oClassInfo structured object with informations about the class(optional)
			 * @param FNMetaImpl constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.(optional)
			 * @return the created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Searches and returns an array of child elements and controls which are
			 * referenced within an aggregation or aggregations of child elements/controls.
			 * This can be either done recursive or not.
			 * <br>
			 * <b>Take care: this operation might be expensive.</b>
			 * @param bRecursive true, if all nested children should be returned.
			 * @return array of child elements and controls
			 */
			findElements(bRecursive: boolean): Element[];
			/**
			 * Fires the given event and notifies all listeners. Listeners must not change
			 * the content of the event.
			 * @param sEventId the event id
			 * @param mParameters the parameter map
			 * @return Returns <code>this</code> to allow method chaining
			 */
			fireEvent(sEventId: string, mParameters: any): Element;
			/**
			 * Fires an {@link sap.ui.base.Event event} with the given settings and notifies all attached event handlers.
			 * @note Overload from base type sap.ui.base.EventProvider
			 * @param sEventId The identifier of the event to fire
			 * @param mParameters The parameters which should be carried by the event(optional)
			 * @param bAllowPreventDefault Defines whether function <code>preventDefault</code> is supported on the fired event(optional)
			 * @param bEnableEventBubbling Defines whether event bubbling is enabled on the fired event. Set to <code>true</code> the event is also forwarded to the parent(s)
			 *                                   of the event provider ({@link #getEventingParent}) until the bubbling of the event is stopped or no parent is available anymore.(optional)
			 * @return Returns <code>this</code> to allow method chaining. When <code>preventDefault</code> is supported on the fired event
			 *                                             the function returns <code>true</code> if the default action should be executed, <code>false</code> otherwise.
			 */
			fireEvent(sEventId: string, mParameters?: any, bAllowPreventDefault?: boolean, bEnableEventBubbling?: boolean): sap.ui.base.EventProvider|boolean;
			/**
			 * Sets the focus to the stored focus DOM reference
			 */
			focus();
			/**
			 * Gets content of aggregation <code>customData</code>.
			 * 
			 * Custom Data, a data structure like a map containing arbitrary key value pairs.
			 * @return 
			 */
			getCustomData(): CustomData[];
			/**
			 * Gets content of aggregation <code>dependents</code>.
			 * 
			 * Dependents are not rendered, but their databinding context and lifecycle are bound to the aggregating Element.
			 * @return 
			 */
			getDependents(): Control[];
			/**
			 * Returns the best suitable DOM Element that represents this UI5 Element.
			 * By default the DOM Element with the same ID as this Element is returned.
			 * Subclasses should override this method if the lookup via id is not sufficient.
			 * 
			 * Note that such a DOM Element does not necessarily exist in all cases.
			 * Some elements or controls might not have a DOM representation at all (e.g.
			 * a naive FlowLayout) while others might not have one due to their current
			 * state (e.g. an initial, not yet rendered control).
			 * 
			 * If an ID suffix is given, the ID of this Element is concatenated with the suffix
			 * (separated by a single dash) and the DOM node with that compound ID will be returned.
			 * This matches the UI5 naming convention for named inner DOM nodes of a control.
			 * @param sSuffix ID suffix to get the DOMRef for(optional)
			 * @return The Element's DOM Element sub DOM Element or null
			 */
			getDomRef(sSuffix?: string): any;
			/**
			 * Get the element binding object for a specific model
			 * @param sModelName the name of the model
			 * @return the element binding for the given model name
			 */
			getElementBinding(sModelName: string): sap.ui.model.Binding;
			/**
			 * Returns the DOM Element that should get the focus.
			 * 
			 * To be overwritten by the specific control method.
			 * @return Returns the DOM Element that should get the focus
			 */
			getFocusDomRef(): any;
			/**
			 * Returns an object representing the serialized focus information
			 * To be overwritten by the specific control method
			 * @return an object representing the serialized focus information
			 */
			getFocusInfo(): any;
			/**
			 * 
			 */
			getInterface();
			/**
			 * Returns the public interface of the object.
			 * @note Overload from base type sap.ui.base.Object
			 * @return the public interface of the object
			 */
			getInterface(): sap.ui.base.Interface;
			/**
			 * Gets content of aggregation <code>layoutData</code>.
			 * 
			 * Defines the layout constraints for this control when it is used inside a Layout.
			 * LayoutData classes are typed classes and must match the embedding Layout.
			 * See VariantLayoutData for aggregating multiple alternative LayoutData instances to a single Element.
			 * @return 
			 */
			getLayoutData(): LayoutData;
			/**
			 * Returns the tooltip for this element if any or an undefined value.
			 * The tooltip can either be a simple string or a subclass of
			 * {@link sap.ui.core.TooltipBase}.
			 * 
			 * Callers that are only interested in tooltips of type string (e.g. to render
			 * them as a <code>title</code> attribute), should call the convenience method
			 * {@link #getTooltip_AsString} instead. If they want to get a tooltip text no
			 * matter where it comes from (be it a string tooltip or the text from a TooltipBase
			 * instance) then they could call {@link #getTooltip_Text} instead.
			 * @return The tooltip for this Element.
			 */
			getTooltip(): string|TooltipBase;
			/**
			 * Returns the tooltip for this element but only if it is a simple string.
			 * Otherwise an undefined value is returned.
			 * @return string tooltip or undefined
			 */
			getTooltip_AsString(): string;
			/**
			 * Returns the main text for the current tooltip or undefined if there is no such text.
			 * If the tooltip is an object derived from sap.ui.core.Tooltip, then the text property
			 * of that object is returned. Otherwise the object itself is returned (either a string
			 * or undefined or null).
			 * @return text of the current tooltip or undefined
			 */
			getTooltip_Text(): string;
			/**
			 * Checks for the provided <code>sap.ui.core.CustomData</code> in the aggregation <code>customData</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oCustomData The customData whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfCustomData(oCustomData: CustomData): number;
			/**
			 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>dependents</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oDependent The dependent whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfDependent(oDependent: Control): number;
			/**
			 * Initializes the element instance after creation.
			 * 
			 * Applications must not call this hook method directly, it is called by the framework
			 * while the constructor of an element is executed.
			 * 
			 * Subclasses of Element should override this hook to implement any necessary initialization.
			 */
			init();
			/**
			 * Inserts a customData into the aggregation <code>customData</code>.
			 * @param oCustomData the customData to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the customData should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the customData is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the customData is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertCustomData(oCustomData: CustomData, iIndex: number): Element;
			/**
			 * Inserts a dependent into the aggregation <code>dependents</code>.
			 * @param oDependent the dependent to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the dependent should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the dependent is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the dependent is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertDependent(oDependent: Control, iIndex: number): Element;
			/**
			 * Removes all the controls from the aggregation <code>customData</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllCustomData(): CustomData[];
			/**
			 * Removes all the controls from the aggregation <code>dependents</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllDependents(): Control[];
			/**
			 * Removes a customData from the aggregation <code>customData</code>.
			 * @param vCustomData The customData to remove or its index or id
			 * @return The removed customData or <code>null</code>
			 */
			removeCustomData(vCustomData: number|string|CustomData): CustomData;
			/**
			 * Removes a dependent from the aggregation <code>dependents</code>.
			 * @param vDependent The dependent to remove or its index or id
			 * @return The removed dependent or <code>null</code>
			 */
			removeDependent(vDependent: number|string|Control): Control;
			/**
			 * Removes the given delegate from this element.
			 * 
			 * This method will remove all registrations of the given delegate, not only one.
			 * @param oDelegate the delegate object
			 * @return Returns <code>this</code> to allow method chaining
			 */
			removeEventDelegate(oDelegate: any): Element;
			/**
			 * This triggers immediate rerendering of its parent and thus of itself and its children.<br/> As <code>sap.ui.core.Element</code> "bubbles up" the
			 * rerender, changes to child-<code>Elements</code> will also result in immediate rerendering of the whole sub tree.
			 */
			rerender();
			/**
			 * Sets the {@link sap.ui.core.LayoutData} defining the layout constraints
			 * for this control when it is used inside a layout.
			 * @param oLayoutData 
			 */
			setLayoutData(oLayoutData: LayoutData);
			/**
			 * Sets a new tooltip for this object. The tooltip can either be a simple string
			 * (which in most cases will be rendered as the <code>title</code> attribute of this
			 * Element) or an instance of {@link sap.ui.core.TooltipBase}.
			 * 
			 * If a new tooltip is set, any previously set tooltip is deactivated.
			 * @param vTooltip 
			 */
			setTooltip(vTooltip: string|TooltipBase);
			/**
			 * Returns a simple string representation of this element.
			 * 
			 * Mainly useful for tracing purposes.
			 * @return a string descripition of this element
			 */
			toString(): string;
			/**
			 * Removes the defined binding context of this object, all bindings will now resolve
			 * relative to the parent context again.
			 * @param sModelName 
			 * @return reference to the instance itself
			 */
			unbindElement(sModelName: string): sap.ui.base.ManagedObject;
		}
	
		class EnabledPropagator  {
			/**
			 * 
			 * @param bDefault the value that should be used as default value for the enhancement of the control.(optional)
			 * @param bLegacy whether the introduced property should use the old name 'Enabled'(optional)
			 */
			constructor(bDefault?: boolean, bLegacy?: boolean);
		}
	
		class EventBus extends sap.ui.base.Object {
			/**
			 * Creates an instance of EventBus.
			 */
			constructor();
			/**
			 * Cleans up the internal structures and removes all event handlers.
			 * 
			 * The object must not be used anymore after destroy was called.
			 */
			destroy();
			/**
			 * Creates a new subclass of class sap.ui.core.EventBus with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Fires an event using the specified settings and notifies all attached event handlers.
			 * @param sChannelId The channel of the event to fire. If not given, the default channel is used. The channel <code>"sap.ui"</code> is
			 *                         reserved by the UI5 framework. An application might listen to events on this channel but is not allowed
			 *                         to publish its own events there.
			 * @param sEventId The identifier of the event to fire
			 * @param oData The parameters which should be carried by the event(optional)
			 */
			publish(sChannelId: string, sEventId: string, oData?: any);
			/**
			 * Attaches an event handler to the event with the given identifier on the given event channel.
			 * @param sChannelId The channel of the event to subscribe to. If not given, the default channel is used.
			 *                         The channel <code>"sap.ui"</code> is reserved by the UI5 framework. An application might listen to
			 *                         events on this channel but is not allowed to publish its own events there.
			 * @param sEventId The identifier of the event to listen for
			 * @param fnFunction The handler function to call when the event occurs. This function will be called in the context of the
			 *                       <code>oListener</code> instance (if present) or on the event bus instance. The channel is provided as first argument of the handler, and
			 *                       the event identifier is provided as the second argument. The parameter map carried by the event is provided as the third argument (if present).
			 *                       Handlers must not change the content of this map.
			 * @param oListener The object that wants to be notified when the event occurs (<code>this</code> context within the
			 *                        handler function). If it is not specified, the handler function is called in the context of the event bus.(optional)
			 * @return Returns <code>this</code> to allow method chaining
			 */
			subscribe(sChannelId: string, sEventId: string, fnFunction: any, oListener?: any): EventBus;
			/**
			 * Attaches an event handler, called one time only, to the event with the given identifier on the given event channel.
			 * 
			 * When the event occurs, the handler function is called and the handler registration is automatically removed afterwards.
			 * @param sChannelId The channel of the event to subscribe to. If not given, the default channel is used.
			 *                         The channel <code>"sap.ui"</code> is reserved by the UI5 framework. An application might listen to
			 *                         events on this channel but is not allowed to publish its own events there.
			 * @param sEventId The identifier of the event to listen for
			 * @param fnFunction The handler function to call when the event occurs. This function will be called in the context of the
			 *                       <code>oListener</code> instance (if present) or on the event bus instance. The channel is provided as first argument of the handler, and
			 *                       the event identifier is provided as the second argument. The parameter map carried by the event is provided as the third argument (if present).
			 *                       Handlers must not change the content of this map.
			 * @param oListener The object that wants to be notified when the event occurs (<code>this</code> context within the
			 *                        handler function). If it is not specified, the handler function is called in the context of the event bus.(optional)
			 * @return Returns <code>this</code> to allow method chaining
			 */
			subscribeOnce(sChannelId: string, sEventId: string, fnFunction: any, oListener?: any): EventBus;
			/**
			 * Removes a previously subscribed event handler from the event with the given identifier on the given event channel.
			 * 
			 * The passed parameters must match those used for registration with {@link #subscribe } beforehand!
			 * @param sChannelId The channel of the event to unsubscribe from. If not given, the default channel is used.
			 * @param sEventId The identifier of the event to unsubscribe from
			 * @param fnFunction The handler function to unsubscribe from the event
			 * @param oListener The object that wanted to be notified when the event occurred(optional)
			 * @return Returns <code>this</code> to allow method chaining
			 */
			unsubscribe(sChannelId: string, sEventId: string, fnFunction: any, oListener?: any): EventBus;
		}
	
		class Fragment extends sap.ui.base.ManagedObject {
			/**
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 */
			constructor();
			/**
			 * Returns an Element/Control by its ID in the context of the Fragment with the given ID
			 * @param sFragmentId 
			 * @param sId 
			 * @return Element by its ID and Fragment ID
			 */
			byId(sFragmentId: string, sId: string);
			/**
			 * Returns the ID which a Control with the given ID in the context of the Fragment with the given ID would have
			 * @param sFragmentId 
			 * @param sId 
			 * @return the prefixed ID
			 */
			createId(sFragmentId: string, sId: string);
			/**
			 * Creates a new subclass of class sap.ui.core.Fragment with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets current value of property <code>type</code>.
			 * @return Value of property <code>type</code>
			 */
			getType(): string;
			/**
			 * Registers a new Fragment type
			 * @param sType the Fragment type. Types "XML", "HTML" and JS" are built-in and always available.
			 * @param oFragmentImpl an object having a property "init" of type "function" which is called on Fragment instantiation with the settings map as argument
			 */
			registerType(sType: string, oFragmentImpl: any);
			/**
			 * Sets a new value for property <code>type</code>.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sType New value for property <code>type</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setType(sType: string): Fragment;
		}
	
		class History extends sap.ui.base.Object {
			/**
			 * Creates a new subclass of class sap.ui.core.History with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		}
	
		class HorizontalAlign {
			/**
			 * Locale-specific positioning at the beginning of the line
			 */
			static Begin: string;
			/**
			 * Centered alignment of text
			 */
			static Center: string;
			/**
			 * Locale-specific positioning at the end of the line
			 */
			static End: string;
			/**
			 * Hard option for left alignment
			 */
			static Left: string;
			/**
			 * Hard option for right alignment
			 */
			static Right: string;
		}
	
		class HTML extends Control {
			/**
			 * Constructor for a new HTML.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.core.HTMLMetadata);
			/**
			 * Constructor for a new HTML.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>afterRendering</code> event of this <code>sap.ui.core.HTML</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.core.HTML</code> itself.
			 * 
			 * Fired after the HTML control has been rendered. Allows to manipulate the resulting DOM.
			 * 
			 * When the control doesn't have string content and no preserved DOM existed for this control,
			 * then this event will fire, but there won't be a DOM node for this control.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.core.HTML</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachAfterRendering(oData: any, fnFunction: any, oListener?: any): HTML;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>afterRendering</code> event of this <code>sap.ui.core.HTML</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachAfterRendering(fnFunction: any, oListener: any): HTML;
			/**
			 * Creates a new subclass of class sap.ui.core.HTML with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Fires event <code>afterRendering</code> to attached listeners.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>isPreservedDOM</code> of type <code>boolean</code>Whether the current DOM of the control has been preserved (true) or not (e.g.
			 * rendered from content property or it is an empty HTML control).</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireAfterRendering(mArguments?: any): HTML;
			/**
			 * Gets current value of property <code>content</code>.
			 * 
			 * HTML content to be displayed, defined as a string.
			 * 
			 * The content is converted to DOM nodes with a call to <code>new jQuery(content)</code>, so any
			 * restrictions for the jQuery constructor apply to the content of the HTML control as well.
			 * 
			 * Some of these restrictions (there might be others!) are:
			 * <ul>
			 * <li>the content must be enclosed in tags, pure text is not supported. </li>
			 * <li>if the content contains script tags, they will be executed but they will not appear in the
			 *     resulting DOM tree. When the contained code tries to find the corresponding script tag,
			 *     it will fail.</li>
			 * </ul>
			 * 
			 * Please consider to consult the jQuery documentation as well.
			 * 
			 * The HTML control currently doesn't prevent the usage of multiple root nodes in its DOM content
			 * (e.g. <code>setContent("&lt;div/>&lt;div/>")</code>), but this is not a guaranteed feature.
			 * The accepted content might be restricted to single root nodes in future versions.
			 * To notify applications about this fact, a warning is written in the log when multiple root nodes are used.
			 * @return Value of property <code>content</code>
			 */
			getContent(): string;
			/**
			 * 
			 * @param sSuffix Suffix of the Element to be retrieved or empty(optional)
			 * @return The element's DOM reference or null
			 */
			getDomRef(sSuffix?: string): any;
			/**
			 * Gets current value of property <code>preferDOM</code>.
			 * 
			 * Whether existing DOM content is preferred over the given content string.
			 * 
			 * There are two scenarios where this flag is relevant (when set to true):
			 * <ul>
			 * <li>for the initial rendering: when an HTML control is added to an UIArea for the first time
			 *     and if the root node of that UIArea contained DOM content with the same id as the HTML
			 *     control, then that content will be used for rendering instead of any specified string
			 *     content</li>
			 * <li>any follow-up rendering: when an HTML control is rendered for the second or any later
			 *     time and the preferDOM flag is set, then the DOM from the first rendering is preserved
			 *     and not replaced by the string content</li>
			 * </ul>
			 * 
			 * As preserving the existing DOM is the most common use case of the HTML control, the default value is true.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>preferDOM</code>
			 */
			getPreferDOM(): boolean;
			/**
			 * Gets current value of property <code>sanitizeContent</code>.
			 * 
			 * Whether to run the HTML sanitizer once the content (HTML markup) is applied or not.
			 * 
			 * To configure allowed URLs please use the whitelist API via jQuery.sap.addUrlWhitelist.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>sanitizeContent</code>
			 */
			getSanitizeContent(): boolean;
			/**
			 * Gets current value of property <code>visible</code>.
			 * 
			 * Specifies whether the control is visible. Invisible controls are not rendered.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>visible</code>
			 */
			getVisible(): boolean;
			/**
			 * Sets a new value for property <code>content</code>.
			 * 
			 * HTML content to be displayed, defined as a string.
			 * 
			 * The content is converted to DOM nodes with a call to <code>new jQuery(content)</code>, so any
			 * restrictions for the jQuery constructor apply to the content of the HTML control as well.
			 * 
			 * Some of these restrictions (there might be others!) are:
			 * <ul>
			 * <li>the content must be enclosed in tags, pure text is not supported. </li>
			 * <li>if the content contains script tags, they will be executed but they will not appear in the
			 *     resulting DOM tree. When the contained code tries to find the corresponding script tag,
			 *     it will fail.</li>
			 * </ul>
			 * 
			 * Please consider to consult the jQuery documentation as well.
			 * 
			 * The HTML control currently doesn't prevent the usage of multiple root nodes in its DOM content
			 * (e.g. <code>setContent("&lt;div/>&lt;div/>")</code>), but this is not a guaranteed feature.
			 * The accepted content might be restricted to single root nodes in future versions.
			 * To notify applications about this fact, a warning is written in the log when multiple root nodes are used.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sContent New value for property <code>content</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setContent(sContent: string): HTML;
			/**
			 * Sets some new DOM content for this HTML control. The content will replace the existing content
			 * after the next rendering. Properties are not modified, but preferDOM should be set to true.
			 * @param oDom the new DOM content
			 * @return <code>this</code> to facilitate method chaining
			 */
			setDOMContent(oDom: any): HTML;
			/**
			 * Sets a new value for property <code>preferDOM</code>.
			 * 
			 * Whether existing DOM content is preferred over the given content string.
			 * 
			 * There are two scenarios where this flag is relevant (when set to true):
			 * <ul>
			 * <li>for the initial rendering: when an HTML control is added to an UIArea for the first time
			 *     and if the root node of that UIArea contained DOM content with the same id as the HTML
			 *     control, then that content will be used for rendering instead of any specified string
			 *     content</li>
			 * <li>any follow-up rendering: when an HTML control is rendered for the second or any later
			 *     time and the preferDOM flag is set, then the DOM from the first rendering is preserved
			 *     and not replaced by the string content</li>
			 * </ul>
			 * 
			 * As preserving the existing DOM is the most common use case of the HTML control, the default value is true.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bPreferDOM New value for property <code>preferDOM</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setPreferDOM(bPreferDOM: boolean): HTML;
			/**
			 * Sets a new value for property <code>sanitizeContent</code>.
			 * 
			 * Whether to run the HTML sanitizer once the content (HTML markup) is applied or not.
			 * 
			 * To configure allowed URLs please use the whitelist API via jQuery.sap.addUrlWhitelist.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bSanitizeContent New value for property <code>sanitizeContent</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSanitizeContent(bSanitizeContent: boolean): HTML;
			/**
			 * Sets a new value for property <code>visible</code>.
			 * 
			 * Specifies whether the control is visible. Invisible controls are not rendered.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bVisible New value for property <code>visible</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setVisible(bVisible: boolean): HTML;
			/**
			 * Sets a new value for property <code>visible</code>.
			 * 
			 * Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead of the real control
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @note Overload from base type sap.ui.core.Control
			 * @param bVisible New value for property <code>visible</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setVisible(bVisible: boolean): Control;
		}
	
		class Icon extends Control {
			/**
			 * Constructor for a new Icon.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.core.IconMetadata);
			/**
			 * Constructor for a new Icon.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
			 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addAriaLabelledBy(vAriaLabelledBy: ID|Control): Icon;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this <code>sap.ui.core.Icon</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.core.Icon</code> itself.
			 * 
			 * This event is fired when icon is pressed/activated by the user. When a handler is attached to this event, the Icon gets tab stop. If you want to disable this behavior, set the noTabStop property to true.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.core.Icon</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachPress(oData: any, fnFunction: any, oListener?: any): Icon;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this <code>sap.ui.core.Icon</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachPress(fnFunction: any, oListener: any): Icon;
			/**
			 * Creates a new subclass of class sap.ui.core.Icon with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Fires event <code>press</code> to attached listeners.
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			firePress(mArguments?: any): Icon;
			/**
			 * 
			 */
			getAccessibilityInfo();
			/**
			 * This function (if available on the concrete control) provides
			 * the current accessibility state of the control.
			 * 
			 * Applications must not call this hook method directly, it is called by the framework.
			 * 
			 * Subclasses of Control should implement this hook to provide any necessary accessibility information:
			 * 
			 * <pre>
			 * MyControl.prototype.getAccessibilityInfo = function() {
			 *    return {
			 *      role: "textbox",      // String which represents the WAI-ARIA role which is implemented by the control.
			 *      type: "date input",   // String which represents the control type (Must be a translated text). Might correlate with
			 *                            // the role.
			 *      description: "value", // String which describes the most relevant control state (e.g. the inputs value). Must be a
			 *                            // translated text.
			 *                            // Note: The type and the enabled/editable state must not be handled here.
			 *      focusable: true,      // Boolean which describes whether the control can get the focus.
			 *      enabled: true,        // Boolean which describes whether the control is enabled. If not relevant it must not be set or
			 *                            // <code>null</code> can be provided.
			 *      editable: true,       // Boolean which describes whether the control is editable. If not relevant it must not be set or
			 *                            // <code>null</code> can be provided.
			 *      children: []          // Array of accessibility info objects of children of the given control (e.g. when the control is a layout).
			 *                            // Note: Children should only be provided when it is helpful to understand the accessibility context
			 *                            //       (e.g. a form control must not provide details of its internals (fields, labels, ...) but a
			 *                            //       layout should).
			 *    };
			 * };
			 * </pre>
			 * 
			 * Note: The returned object provides the accessibility state of the control at the point in time when this function is called.
			 * @note Overload from base type sap.ui.core.Control
			 * @return Current accessibility state of the control.
			 */
			getAccessibilityInfo(): any;
			/**
			 * Gets current value of property <code>activeBackgroundColor</code>.
			 * 
			 * Background color for Icon in active state.
			 * @return Value of property <code>activeBackgroundColor</code>
			 */
			getActiveBackgroundColor(): string;
			/**
			 * Gets current value of property <code>activeColor</code>.
			 * 
			 * This color is shown when icon is pressed/activated by the user.
			 * @return Value of property <code>activeColor</code>
			 */
			getActiveColor(): string;
			/**
			 * Gets current value of property <code>alt</code>.
			 * 
			 * This defines the alternative text which is used for outputting the aria-label attribute on the DOM.
			 * @return Value of property <code>alt</code>
			 */
			getAlt(): string;
			/**
			 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
			 * @return 
			 */
			getAriaLabelledBy(): ID[];
			/**
			 * Gets current value of property <code>backgroundColor</code>.
			 * 
			 * Background color of the Icon in normal state.
			 * @return Value of property <code>backgroundColor</code>
			 */
			getBackgroundColor(): string;
			/**
			 * Gets current value of property <code>color</code>.
			 * 
			 * The color of the Icon. If color is not defined here, the Icon inherits the color from its DOM parent.
			 * @return Value of property <code>color</code>
			 */
			getColor(): string;
			/**
			 * Gets current value of property <code>decorative</code>.
			 * 
			 * A decorative icon is included for design reasons. Accessibility tools will ignore decorative icons. Tab stop isn't affected by this property anymore and it's now controlled by the existence of press event handler and the noTabStop property.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>decorative</code>
			 */
			getDecorative(): boolean;
			/**
			 * Gets current value of property <code>height</code>.
			 * 
			 * This is the height of the DOM element which contains the Icon. Setting this property doesn't affect the size of the font. If you want to make the font bigger, increase the size property.
			 * @return Value of property <code>height</code>
			 */
			getHeight(): CSSSize;
			/**
			 * Gets current value of property <code>hoverBackgroundColor</code>.
			 * 
			 * Background color for Icon in hover state. This property has no visual effect when run on mobile device.
			 * @return Value of property <code>hoverBackgroundColor</code>
			 */
			getHoverBackgroundColor(): string;
			/**
			 * Gets current value of property <code>hoverColor</code>.
			 * 
			 * This color is shown when icon is hovered. This property has no visual effect when run on mobile device.
			 * @return Value of property <code>hoverColor</code>
			 */
			getHoverColor(): string;
			/**
			 * Gets current value of property <code>noTabStop</code>.
			 * 
			 * Defines whether the tab stop of icon is controlled by the existence of press event handler. When it's set to false, Icon control has tab stop when press event handler is attached.
			 * If it's set to true, Icon control never has tab stop no matter whether press event handler exists or not.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>noTabStop</code>
			 */
			getNoTabStop(): boolean;
			/**
			 * Gets current value of property <code>size</code>.
			 * 
			 * Since Icon uses font, this property will be applied to the css font-size property on the rendered DOM element.
			 * @return Value of property <code>size</code>
			 */
			getSize(): CSSSize;
			/**
			 * Gets current value of property <code>src</code>.
			 * 
			 * This property should be set by the return value of calling sap.ui.core.IconPool.getIconURI with a Icon name parameter and an optional collection parameter which is required when using application extended Icons. A list of standard FontIcon is available here.
			 * @return Value of property <code>src</code>
			 */
			getSrc(): URI;
			/**
			 * Gets current value of property <code>useIconTooltip</code>.
			 * 
			 * Decides whether a default Icon tooltip should be used if no tooltip is set.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>useIconTooltip</code>
			 */
			getUseIconTooltip(): boolean;
			/**
			 * Gets current value of property <code>width</code>.
			 * 
			 * This is the width of the DOM element which contains the Icon. Setting this property doesn't affect the size of the font. If you want to make the font bigger, increase the size property.
			 * @return Value of property <code>width</code>
			 */
			getWidth(): CSSSize;
			/**
			 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllAriaLabelledBy(): ID[];
			/**
			 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
			 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
			 * @return The removed ariaLabelledBy or <code>null</code>
			 */
			removeAriaLabelledBy(vAriaLabelledBy: number|ID|Control): ID;
			/**
			 * Sets a new value for property <code>activeBackgroundColor</code>.
			 * 
			 * Background color for Icon in active state.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sActiveBackgroundColor New value for property <code>activeBackgroundColor</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setActiveBackgroundColor(sActiveBackgroundColor: string): Icon;
			/**
			 * Sets a new value for property <code>activeColor</code>.
			 * 
			 * This color is shown when icon is pressed/activated by the user.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sActiveColor New value for property <code>activeColor</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setActiveColor(sActiveColor: string): Icon;
			/**
			 * Sets a new value for property <code>alt</code>.
			 * 
			 * This defines the alternative text which is used for outputting the aria-label attribute on the DOM.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sAlt New value for property <code>alt</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setAlt(sAlt: string): Icon;
			/**
			 * Sets a new value for property <code>backgroundColor</code>.
			 * 
			 * Background color of the Icon in normal state.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sBackgroundColor New value for property <code>backgroundColor</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setBackgroundColor(sBackgroundColor: string): Icon;
			/**
			 * Sets a new value for property <code>color</code>.
			 * 
			 * The color of the Icon. If color is not defined here, the Icon inherits the color from its DOM parent.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sColor New value for property <code>color</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setColor(sColor: string): Icon;
			/**
			 * Sets a new value for property <code>decorative</code>.
			 * 
			 * A decorative icon is included for design reasons. Accessibility tools will ignore decorative icons. Tab stop isn't affected by this property anymore and it's now controlled by the existence of press event handler and the noTabStop property.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bDecorative New value for property <code>decorative</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setDecorative(bDecorative: boolean): Icon;
			/**
			 * Sets a new value for property <code>height</code>.
			 * 
			 * This is the height of the DOM element which contains the Icon. Setting this property doesn't affect the size of the font. If you want to make the font bigger, increase the size property.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sHeight New value for property <code>height</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setHeight(sHeight: CSSSize): Icon;
			/**
			 * Sets a new value for property <code>hoverBackgroundColor</code>.
			 * 
			 * Background color for Icon in hover state. This property has no visual effect when run on mobile device.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sHoverBackgroundColor New value for property <code>hoverBackgroundColor</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setHoverBackgroundColor(sHoverBackgroundColor: string): Icon;
			/**
			 * Sets a new value for property <code>hoverColor</code>.
			 * 
			 * This color is shown when icon is hovered. This property has no visual effect when run on mobile device.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sHoverColor New value for property <code>hoverColor</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setHoverColor(sHoverColor: string): Icon;
			/**
			 * Sets a new value for property <code>noTabStop</code>.
			 * 
			 * Defines whether the tab stop of icon is controlled by the existence of press event handler. When it's set to false, Icon control has tab stop when press event handler is attached.
			 * If it's set to true, Icon control never has tab stop no matter whether press event handler exists or not.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bNoTabStop New value for property <code>noTabStop</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setNoTabStop(bNoTabStop: boolean): Icon;
			/**
			 * Sets a new value for property <code>size</code>.
			 * 
			 * Since Icon uses font, this property will be applied to the css font-size property on the rendered DOM element.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sSize New value for property <code>size</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSize(sSize: CSSSize): Icon;
			/**
			 * Sets a new value for property <code>src</code>.
			 * 
			 * This property should be set by the return value of calling sap.ui.core.IconPool.getIconURI with a Icon name parameter and an optional collection parameter which is required when using application extended Icons. A list of standard FontIcon is available here.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sSrc New value for property <code>src</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSrc(sSrc: URI): Icon;
			/**
			 * Sets a new value for property <code>useIconTooltip</code>.
			 * 
			 * Decides whether a default Icon tooltip should be used if no tooltip is set.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bUseIconTooltip New value for property <code>useIconTooltip</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setUseIconTooltip(bUseIconTooltip: boolean): Icon;
			/**
			 * Sets a new value for property <code>width</code>.
			 * 
			 * This is the width of the DOM element which contains the Icon. Setting this property doesn't affect the size of the font. If you want to make the font bigger, increase the size property.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sWidth New value for property <code>width</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setWidth(sWidth: CSSSize): Icon;
		}
	
		class IconColor {
			/**
			 * Critical color
			 */
			static Critical: string;
			/**
			 * Default color (brand color)
			 */
			static Default: string;
			/**
			 * Negative color
			 */
			static Negative: string;
			/**
			 * Neutral color.
			 */
			static Neutral: string;
			/**
			 * Positive color
			 */
			static Positive: string;
		}
	
		class ImeMode {
			/**
			 * IME is used for entering characters.
			 */
			static Active: string;
			/**
			 * The value is automatically computed by the user agent.
			 */
			static Auto: string;
			/**
			 * IME is disabled.
			 */
			static Disabled: string;
			/**
			 * IME is not used for entering characters.
			 */
			static Inactive: string;
		}
	
		class IntervalTrigger extends sap.ui.base.Object {
			/**
			 * Creates an instance of EventBus.
			 * @param iInterval is the interval the trigger should be used. If the
			 *            trigger is >0 triggering starts/runs and if the interval is
			 *            set to <=0 triggering stops.
			 */
			constructor(iInterval: number);
			/**
			 * Adds a listener to the list that should be triggered.
			 * @param fnFunction is the called function that should be called when
			 *            the trigger want to trigger the listener.
			 * @param oListener that should be triggered.(optional)
			 */
			addListener(fnFunction: any, oListener?: any);
			/**
			 * Destructor method for objects.
			 */
			destroy();
			/**
			 * Creates a new subclass of class sap.ui.core.IntervalTrigger with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * 
			 */
			getInterface();
			/**
			 * Returns the public interface of the object.
			 * @note Overload from base type sap.ui.base.Object
			 * @return the public interface of the object
			 */
			getInterface(): sap.ui.base.Interface;
			/**
			 * Removes corresponding listener from list.
			 * @param fnFunction is the previously registered function
			 * @param oListener that should be removed(optional)
			 */
			removeListener(fnFunction: any, oListener?: any);
			/**
			 * Sets the trigger interval. If the value is >0 triggering will start if
			 * there are any registered listeners. If the interval is set to <=0
			 * triggering will stop.
			 * @param iInterval sets the interval in milliseconds when a new
			 *            triggering should occur.
			 */
			setInterval(iInterval: number);
		}
	
		class InvisibleText extends Control {
			/**
			 * Constructor for a new InvisibleText.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.core.InvisibleTextMetadata);
			/**
			 * Constructor for a new InvisibleText.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.ui.core.InvisibleText with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets current value of property <code>text</code>.
			 * 
			 * The text of the InvisibleText.
			 * 
			 * Default value is <code></code>.
			 * @return Value of property <code>text</code>
			 */
			getText(): string;
			/**
			 * 
			 * @deprecated Local BusyIndicator is not supported by control.
			 * @return Returns <code>this</code> to allow method chaining
			 */
			setBusy(): any;
			/**
			 * Set the controls busy state.
			 * @note Overload from base type sap.ui.core.Control
			 * @param bBusy The new busy state to be set
			 * @return <code>this</code> to allow method chaining
			 */
			setBusy(bBusy: boolean): Control;
			/**
			 * 
			 * @deprecated Local BusyIndicator is not supported by control.
			 * @return Returns <code>this</code> to allow method chaining
			 */
			setBusyIndicatorDelay(): any;
			/**
			 * Define the delay, after which the busy indicator will show up
			 * @note Overload from base type sap.ui.core.Control
			 * @param iDelay The delay in ms
			 * @return <code>this</code> to allow method chaining
			 */
			setBusyIndicatorDelay(iDelay: number): Control;
			/**
			 * Sets a new value for property <code>text</code>.
			 * 
			 * The text of the InvisibleText.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code></code>.
			 * @param sText New value for property <code>text</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setText(sText: string): InvisibleText;
			/**
			 * 
			 * @deprecated Tooltip is not supported by control.
			 * @return Returns <code>this</code> to allow method chaining
			 */
			setTooltip(): any;
			/**
			 * Sets a new tooltip for this object. The tooltip can either be a simple string
			 * (which in most cases will be rendered as the <code>title</code> attribute of this
			 * Element) or an instance of {@link sap.ui.core.TooltipBase}.
			 * 
			 * If a new tooltip is set, any previously set tooltip is deactivated.
			 * @note Overload from base type sap.ui.core.Element
			 * @param vTooltip 
			 */
			setTooltip(vTooltip: string|TooltipBase);
			/**
			 * 
			 * @deprecated Property visible is not supported by control.
			 * @return Returns <code>this</code> to allow method chaining
			 */
			setVisible(): any;
			/**
			 * Sets a new value for property <code>visible</code>.
			 * 
			 * Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead of the real control
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @note Overload from base type sap.ui.core.Control
			 * @param bVisible New value for property <code>visible</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setVisible(bVisible: boolean): Control;
			/**
			 * Adds <code>this</code> control into the static, hidden area UI area container.
			 * @return Returns <code>this</code> to allow method chaining
			 */
			toStatic(): any;
		}
	
		interface IShrinkable {
		}
	
		class Item extends Element {
			/**
			 * Constructor for a new Item.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.core.ItemMetadata);
			/**
			 * Constructor for a new Item.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.ui.core.Item with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets current value of property <code>enabled</code>.
			 * 
			 * Enabled items can be selected.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>enabled</code>
			 */
			getEnabled(): boolean;
			/**
			 * Gets current value of property <code>key</code>.
			 * 
			 * Can be used as input for subsequent actions.
			 * @return Value of property <code>key</code>
			 */
			getKey(): string;
			/**
			 * Gets current value of property <code>text</code>.
			 * 
			 * The text to be displayed for the item.
			 * 
			 * Default value is <code></code>.
			 * @return Value of property <code>text</code>
			 */
			getText(): string;
			/**
			 * Gets current value of property <code>textDirection</code>.
			 * 
			 * Options are RTL and LTR. Alternatively, an item can inherit its text direction from its parent control.
			 * 
			 * Default value is <code>Inherit</code>.
			 * @return Value of property <code>textDirection</code>
			 */
			getTextDirection(): TextDirection;
			/**
			 * Sets a new value for property <code>enabled</code>.
			 * 
			 * Enabled items can be selected.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bEnabled New value for property <code>enabled</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setEnabled(bEnabled: boolean): Item;
			/**
			 * Sets a new value for property <code>key</code>.
			 * 
			 * Can be used as input for subsequent actions.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sKey New value for property <code>key</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setKey(sKey: string): Item;
			/**
			 * Sets a new value for property <code>text</code>.
			 * 
			 * The text to be displayed for the item.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code></code>.
			 * @param sText New value for property <code>text</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setText(sText: string): Item;
			/**
			 * Sets a new value for property <code>textDirection</code>.
			 * 
			 * Options are RTL and LTR. Alternatively, an item can inherit its text direction from its parent control.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>Inherit</code>.
			 * @param sTextDirection New value for property <code>textDirection</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setTextDirection(sTextDirection: TextDirection): Item;
		}
	
		interface Label {
		}
	
		class LayoutData extends Element {
			/**
			 * Constructor for a new LayoutData.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.ui.core.LayoutData with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		}
	
		class ListItem extends Item {
			/**
			 * Constructor for a new ListItem.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.core.ListItemMetadata);
			/**
			 * Constructor for a new ListItem.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.ui.core.ListItem with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets current value of property <code>additionalText</code>.
			 * 
			 * Some additional text of type string, optionally to be displayed along with this item.
			 * @return Value of property <code>additionalText</code>
			 */
			getAdditionalText(): string;
			/**
			 * Gets current value of property <code>icon</code>.
			 * 
			 * The icon belonging to this list item instance.
			 * This can be an URI to an image or an icon font URI.
			 * @return Value of property <code>icon</code>
			 */
			getIcon(): string;
			/**
			 * Sets a new value for property <code>additionalText</code>.
			 * 
			 * Some additional text of type string, optionally to be displayed along with this item.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sAdditionalText New value for property <code>additionalText</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setAdditionalText(sAdditionalText: string): ListItem;
			/**
			 * Sets a new value for property <code>icon</code>.
			 * 
			 * The icon belonging to this list item instance.
			 * This can be an URI to an image or an icon font URI.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sIcon New value for property <code>icon</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setIcon(sIcon: string): ListItem;
		}
	
		class Locale extends sap.ui.base.Object {
			/**
			 * Creates an instance of the Locale.
			 * @param sLocaleId the locale identifier, in format en-US or en_US.
			 */
			constructor(sLocaleId: string);
			/**
			 * Creates a new subclass of class sap.ui.core.Locale with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Get the locale extension as a single string or null.
			 * 
			 * The extension always consists of a singleton character (not 'x'),
			 * a dash '-' and one or more extension token, each separated
			 * again with a dash.
			 * 
			 * Use {@link #getExtensions} to get the individual extension tokens as an array.
			 * @return the extension
			 */
			getExtension(): string;
			/**
			 * Get the locale extensions as an array of tokens.
			 * 
			 * The leading singleton and the separating dashes are not part of the result.
			 * If there is no extensions section in the locale tag, an empty array is returned.
			 * @return the individual extension sections
			 */
			getExtensionSubtags(): string[];
			/**
			 * Get the locale language.
			 * 
			 * Note that the case might differ from the original script tag
			 * (Lower case is enforced as recommended by BCP47/ISO639).
			 * @return the language code
			 */
			getLanguage(): string;
			/**
			 * Get the locale private use section or null.
			 * @return the private use section
			 */
			getPrivateUse(): string;
			/**
			 * Get the locale private use section
			 * @return the private use section
			 */
			getPrivateUseSubtags(): string;
			/**
			 * Get the locale region or null if none was specified.
			 * 
			 * Note that the case might differ from the original script tag
			 * (Upper case is enforced as recommended by BCP47/ISO3166-1).
			 * @return the ISO3166-1 region code (2-letter or 3-digits)
			 */
			getRegion(): string;
			/**
			 * Best guess to get a proper SAP Logon Language for this locale.
			 * 
			 * Conversions taken into account:
			 * <ul>
			 * <li>use the language part only</li>
			 * <li>convert old ISO639 codes to newer ones (e.g. 'iw' to 'he')</li>
			 * <li>for Chinese, map 'Traditional Chinese' to SAP proprietary code 'zf'</li>
			 * <li>map private extensions x-sap1q and x-sap2q to SAP pseudo languages '1Q' and '2Q'</li>
			 * <li>remove ext. language sub tags</li>
			 * <li>convert to uppercase</li>
			 * </ul>
			 * 
			 * Note that the conversion also returns a result for languages that are not
			 * supported by the default set of SAP languages. This method has no knowledge
			 * about the concrete languages of any given backend system.
			 * @return a language code that should
			 */
			getSAPLogonLanguage(): string;
			/**
			 * Get the locale script or null if none was specified.
			 * 
			 * Note that the case might differ from the original language tag
			 * (Upper case first letter and lower case reminder enforced as
			 * recommended by BCP47/ISO15924)
			 * @return the script code or null
			 */
			getScript(): string;
			/**
			 * Get the locale variants as a single string or null.
			 * 
			 * Multiple variants are separated by a dash '-'.
			 * @return the variant or null
			 */
			getVariant(): string;
			/**
			 * Get the locale variants as an array of individual variants.
			 * 
			 * The separating dashes are not part of the result.
			 * If there is no variant section in the locale tag, an empty array is returned.
			 * @return the individual variant sections
			 */
			getVariantSubtags(): string[];
		}
	
		class LocaleData extends sap.ui.base.Object {
			/**
			 * Creates an instance of the Data.
			 * @param oLocale the locale
			 */
			constructor(oLocale: sap.ui.core.Locale);
			/**
			 * Creates a new subclass of class sap.ui.core.LocaleData with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Returns the defined pattern for representing the calendar week number.
			 * @param sStyle the style of the pattern. It can only be either "wide" or "narrow".
			 * @param iWeekNumber the week number
			 * @return the week number string
			 */
			getCalendarWeek(sStyle: string, iWeekNumber: number): string;
			/**
			 * Get combined datetime pattern with given date and and time style
			 * @param sDateStyle the required style for the date part
			 * @param sTimeStyle the required style for the time part
			 * @param sCalendarType the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.(optional)
			 * @return the combined datetime pattern
			 */
			getCombinedDateTimePattern(sDateStyle: string, sTimeStyle: string, sCalendarType?: CalendarType): string;
			/**
			 * Returns the currency code which is corresponded with the given currency symbol.
			 * @param sCurrencySymbol The currency symbol which needs to be converted to currency code
			 * @return The corresponded currency code defined for the given currency symbol. The given currency symbol is returned if no currency code can be found by using the given currency symbol.
			 */
			getCurrencyCodeBySymbol(sCurrencySymbol: string): string;
			/**
			 * Returns the number of digits of the specified currency
			 * @param sCurrency ISO 4217 currency code
			 * @return digits of the currency
			 */
			getCurrencyDigits(sCurrency: string): number;
			/**
			 * Get currency format pattern
			 * @param sContext the context of the currency pattern (standard or accounting)
			 * @return The pattern
			 */
			getCurrencyPattern(sContext: string): string;
			/**
			 * Returns the currency symbol for the specified currency, if no symbol is found the ISO 4217 currency code is returned
			 * @param sCurrency ISO 4217 currency code
			 * @return the currency symbol
			 */
			getCurrencySymbol(sCurrency: string): string;
			/**
			 * Get custom datetime pattern for a given skeleton format.
			 * 
			 * The format string does contain pattern symbols (e.g. "yMMMd" or "Hms") and will be converted into the pattern in the used
			 * locale, which matches the wanted symbols best. The symbols must be in canonical order, that is:
			 * Era (G), Year (y/Y), Quarter (q/Q), Month (M/L), Week (w/W), Day-Of-Week (E/e/c), Day (d/D),
			 * Hour (h/H/k/K/), Minute (m), Second (s), Timezone (z/Z/v/V/O/X/x)
			 * 
			 * See http://unicode.org/reports/tr35/tr35-dates.html#availableFormats_appendItems
			 * @param sSkeleton the wanted skeleton format for the datetime pattern
			 * @param sCalendarType the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.(optional)
			 * @return the best matching datetime pattern
			 */
			getCustomDateTimePattern(sSkeleton: string, sCalendarType?: CalendarType): string;
			/**
			 * Get date pattern in format "short", "medium", "long" or "full"
			 * @param sStyle the required style for the date pattern
			 * @param sCalendarType the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.(optional)
			 * @return the selected date pattern
			 */
			getDatePattern(sStyle: string, sCalendarType?: CalendarType): string;
			/**
			 * Get datetime pattern in style "short", "medium", "long" or "full"
			 * @param sStyle the required style for the datetime pattern
			 * @param sCalendarType the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.(optional)
			 * @return the selected datetime pattern
			 */
			getDateTimePattern(sStyle: string, sCalendarType?: CalendarType): string;
			/**
			 * Get day periods in width "narrow", "abbreviated" or "wide"
			 * @param sWidth the required width for the day period names
			 * @param sCalendarType the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.(optional)
			 * @return array of day periods (AM, PM)
			 */
			getDayPeriods(sWidth: string, sCalendarType?: CalendarType): any[];
			/**
			 * Get standalone day periods in width "narrow", "abbreviated" or "wide"
			 * @param sWidth the required width for the day period names
			 * @param sCalendarType the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.(optional)
			 * @return array of day periods (AM, PM)
			 */
			getDayPeriodsStandAlone(sWidth: string, sCalendarType?: CalendarType): any[];
			/**
			 * Get day names in width "narrow", "abbreviated" or "wide"
			 * @param sWidth the required width for the day names
			 * @param sCalendarType the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.(optional)
			 * @return array of day names (starting with Sunday)
			 */
			getDays(sWidth: string, sCalendarType?: CalendarType): any[];
			/**
			 * Get stand alone day names in width "narrow", "abbreviated" or "wide"
			 * @param sWidth the required width for the day names
			 * @param sCalendarType the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.(optional)
			 * @return array of day names (starting with Sunday)
			 */
			getDaysStandAlone(sWidth: string, sCalendarType?: CalendarType): any[];
			/**
			 * Returns the short decimal formats (like 1K, 1M....)
			 * @param sStyle short or long
			 * @param sNumber 1000, 10000 ...
			 * @param sPlural one or other (if not exists other is used)
			 * @return decimal format
			 */
			getDecimalFormat(sStyle: string, sNumber: string, sPlural: string): string;
			/**
			 * Get decimal format pattern
			 * @return The pattern
			 */
			getDecimalPattern(): string;
			/**
			 * Returns the display name for a time unit (second, minute, hour, day, week, month, year)
			 * @param sType Type (second, minute, hour, day, week, month, year)
			 * @param sStyle @since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow"
			 * returns {string} display name(optional)
			 */
			getDisplayName(sType: string, sStyle?: string);
			/**
			 * Returns the map of era ids to era dates
			 * @param sCalendarType the type of calendar(optional)
			 * @return the array of eras containing objects with either an _end or _start property with a date
			 */
			getEraDates(sCalendarType?: CalendarType): any[];
			/**
			 * Returns array of eras
			 * @param sWidth the style of the era name. It can be 'wide', 'abbreviated' or 'narrow'
			 * @param sCalendarType the type of calendar(optional)
			 * @return the array of eras
			 */
			getEras(sWidth: string, sCalendarType?: CalendarType): any[];
			/**
			 * Returns the day that usually is regarded as the first day
			 * of a week in the current locale. Days are encoded as integer
			 * where sunday=0, monday=1 etc.
			 * 
			 * 
			 * All week data information in the CLDR is provides for territories (countries).
			 * If the locale of this LocaleData doesn't contain country information (e.g. if it
			 * contains only a language), then the "likelySubtag" information of the CLDR
			 * is taken into account to guess the "most likely" territory for the locale.
			 * @return first day of week
			 */
			getFirstDayOfWeek(): number;
			/**
			 * Returns the interval format with the given Id (see CLDR documentation for valid Ids)
			 * or the fallback format if no interval format with that Id is known.
			 * 
			 * The empty Id ("") might be used to retrieve the interval format fallback.
			 * @param sId Id of the interval format, e.g. "d-d"
			 * @param sCalendarType the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.(optional)
			 * @return interval format string with placeholders {0} and {1}
			 */
			getIntervalPattern(sId: string, sCalendarType?: CalendarType): string;
			/**
			 * Get locale specific language names
			 * @return map of locale specific language names
			 */
			getLanguages(): any;
			/**
			 * Get month names in width "narrow", "abbreviated" or "wide"
			 * @param sWidth the required width for the month names
			 * @param sCalendarType the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.(optional)
			 * @return array of month names (starting with January)
			 */
			getMonths(sWidth: string, sCalendarType?: CalendarType): any[];
			/**
			 * Get stand alone month names in width "narrow", "abbreviated" or "wide"
			 * @param sWidth the required width for the month names
			 * @param sCalendarType the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.(optional)
			 * @return array of month names (starting with January)
			 */
			getMonthsStandAlone(sWidth: string, sCalendarType?: CalendarType): any[];
			/**
			 * Get number symbol "decimal", "group", "plusSign", "minusSign", "percentSign"
			 * @param sType the required type of symbol
			 * @return the selected number symbol
			 */
			getNumberSymbol(sType: string): string;
			/**
			 * Get orientation (left-to-right or right-to-left)
			 * @return character orientation for this locale
			 */
			getOrientation(): string;
			/**
			 * Get percent format pattern
			 * @return The pattern
			 */
			getPercentPattern(): string;
			/**
			 * Returns the preferred calendar type for the current locale which exists in {@link sap.ui.core.CalendarType}
			 * 
			 * returns {sap.ui.core.CalendarType} the preferred calendar type
			 */
			getPreferredCalendarType();
			/**
			 * Returns the preferred hour pattern symbol (h for 12, H for 24 hours) for the current locale
			 * 
			 * returns {string} the preferred hour symbol
			 */
			getPreferredHourSymbol();
			/**
			 * Get quarter names in width "narrow", "abbreviated" or "wide"
			 * @param sWidth the required width for the quarter names
			 * @param sCalendarType the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.(optional)
			 * @return array of quarters
			 */
			getQuarters(sWidth: string, sCalendarType?: CalendarType): any[];
			/**
			 * Get stand alone quarter names in width "narrow", "abbreviated" or "wide"
			 * @param sWidth the required width for the quarter names
			 * @param sCalendarType the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.(optional)
			 * @return array of quarters
			 */
			getQuartersStandAlone(sWidth: string, sCalendarType?: CalendarType): any[];
			/**
			 * Returns the relative day resource pattern (like "Today", "Yesterday", "{0} days ago") based on the given
			 * difference of days (0 means today, 1 means tommorrow, -1 means yesterday, ...).
			 * @param iDiff the difference in days
			 * @param sStyle @since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow"(optional)
			 * @return the relative day resource pattern
			 */
			getRelativeDay(iDiff: number, sStyle?: string): string;
			/**
			 * Returns the relative resource pattern with unit 'hour' (like "in {0} hour(s)", "{0} hour(s) ago" under locale 'en') based on the given
			 * difference value (positive value means in the future and negative value means in the past).
			 * 
			 * There's no pattern defined for 0 difference and the function returns null if 0 is given. In the 0 difference case, you can use the getRelativeMinute or getRelativeSecond
			 * function to format the difference using unit 'minute' or 'second'.
			 * @param iDiff the difference in hours
			 * @param sStyle @since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow"(optional)
			 * @return the relative resource pattern in unit 'hour'. The method returns null if 0 is given as parameter.
			 */
			getRelativeHour(iDiff: number, sStyle?: string): string;
			/**
			 * Returns the relative resource pattern with unit 'minute' (like "in {0} minute(s)", "{0} minute(s) ago" under locale 'en') based on the given
			 * difference value (positive value means in the future and negative value means in the past).
			 * 
			 * There's no pattern defined for 0 difference and the function returns null if 0 is given. In the 0 difference case, you can use the getRelativeSecond
			 * function to format the difference using unit 'second'.
			 * @param iDiff the difference in minutes
			 * @param sStyle @since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow"(optional)
			 * @return the relative resource pattern in unit 'minute'. The method returns null if 0 is given as parameter.
			 */
			getRelativeMinute(iDiff: number, sStyle?: string): string;
			/**
			 * Returns the relative month resource pattern (like "This month", "Last month", "{0} months ago") based on the given
			 * difference of months (0 means this month, 1 means next month, -1 means last month, ...).
			 * @param iDiff the difference in months
			 * @param sStyle @since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow"(optional)
			 * @return the relative month resource pattern
			 */
			getRelativeMonth(iDiff: number, sStyle?: string): string;
			/**
			 * Returns the relative format pattern with given scale (year, month, week, ...) and difference value
			 * @param sScale the scale the relative pattern is needed for
			 * @param iDiff the difference in the given scale unit
			 * @param bFuture whether a future or past pattern should be used(optional)
			 * @param sStyle @since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow"(optional)
			 * @return the relative format pattern
			 */
			getRelativePattern(sScale: string, iDiff: number, bFuture?: boolean, sStyle?: string): string;
			/**
			 * Returns relative time patterns for the given scales as an array of objects containing scale, value and pattern.
			 * 
			 * The array may contain the following values: "year", "month", "week", "day", "hour", "minute" and "second". If
			 * no scales are given, patterns for all available scales will be returned.
			 * 
			 * The return array will contain objects looking like:
			 * {
			 *     scale: "minute",
			 *     sign: 1,
			 *     pattern: "in {0} minutes"
			 * }
			 * @param aScales The scales for which the available patterns should be returned
			 * @param sStyle @since 1.32.10, 1.34.4 The style of the scale patterns. The valid values are "wide", "short" and "narrow".(optional)
			 * @return An array of all relative time patterns
			 */
			getRelativePatterns(aScales: string[], sStyle?: string): any[];
			/**
			 * Returns the relative resource pattern with unit 'second' (like now, "in {0} seconds", "{0} seconds ago" under locale 'en') based on the given
			 * difference value (0 means now, positive value means in the future and negative value means in the past).
			 * @param iDiff the difference in seconds
			 * @param sStyle @since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow"(optional)
			 * @return the relative resource pattern in unit 'second'
			 */
			getRelativeSecond(iDiff: number, sStyle?: string): string;
			/**
			 * Returns the relative week resource pattern (like "This week", "Last week", "{0} weeks ago") based on the given
			 * difference of weeks (0 means this week, 1 means next week, -1 means last week, ...).
			 * @param iDiff the difference in weeks
			 * @param sStyle @since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow"(optional)
			 * @return the relative week resource pattern
			 */
			getRelativeWeek(iDiff: number, sStyle?: string): string;
			/**
			 * Returns the relative year resource pattern (like "This year", "Last year", "{0} year ago") based on the given
			 * difference of years (0 means this year, 1 means next year, -1 means last year, ...).
			 * @param iDiff the difference in years
			 * @param sStyle @since 1.32.10, 1.34.4 the style of the pattern. The valid values are "wide", "short" and "narrow"(optional)
			 * @return the relative year resource pattern
			 */
			getRelativeYear(iDiff: number, sStyle?: string): string;
			/**
			 * Get locale specific script names
			 * @return map of locale specific script names
			 */
			getScripts(): any;
			/**
			 * Get locale specific territory names
			 * @return map of locale specific territory names
			 */
			getTerritories(): any;
			/**
			 * Get time pattern in style "short", "medium", "long" or "full"
			 * @param sStyle the required style for the date pattern
			 * @param sCalendarType the type of calendar. If it's not set, it falls back to the calendar type either set in configuration or calculated from locale.(optional)
			 * @return the selected time pattern
			 */
			getTimePattern(sStyle: string, sCalendarType?: CalendarType): string;
			/**
			 * Returns the last day of a weekend for the given locale.
			 * 
			 * Days are encoded in the same way as for {@link #getFirstDayOfWeek}.
			 * 
			 * All week data information in the CLDR is provides for territories (countries).
			 * If the locale of this LocaleData doesn't contain country information (e.g. if it
			 * contains only a language), then the "likelySubtag" information of the CLDR
			 * is taken into account to guess the "most likely" territory for the locale.
			 * @return last day of weekend
			 */
			getWeekendEnd(): number;
			/**
			 * Returns the first day of a weekend for the given locale.
			 * 
			 * Days are encoded in the same way as for {@link #getFirstDayOfWeek}.
			 * 
			 * All week data information in the CLDR is provides for territories (countries).
			 * If the locale of this LocaleData doesn't contain country information (e.g. if it
			 * contains only a language), then the "likelySubtag" information of the CLDR
			 * is taken into account to guess the "most likely" territory for the locale.
			 * @return first day of weekend
			 */
			getWeekendStart(): number;
		}
	
		class Manifest extends sap.ui.base.Object {
			/**
			 * Creates and initializes a manifest wrapper which provides API access to
			 * the content of the manifest.
			 * @param oManifest the manifest object
			 * @param mOptions (optional) the configuration options(optional)
			 */
			constructor(oManifest: any, mOptions?: any);
			/**
			 * Creates a new subclass of class sap.ui.core.Manifest with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Returns the Component name which is defined in the manifest as
			 * <code>sap.ui5/componentName</code> or <code>sap.app/id</code>
			 * @return the component name
			 */
			getComponentName(): string;
			/**
			 * Returns the configuration of a manifest section or the value for a
			 * specific path. If no key is specified, the return value is null.
			 * 
			 * Example:
			 * <code>
			 *   {
			 *     "sap.ui5": {
			 *       "dependencies": {
			 *         "libs": {
			 *           "sap.m": {}
			 *         },
			 *         "components": {
			 *           "my.component.a": {}
			 *         }
			 *       }
			 *   });
			 * </code>
			 * 
			 * The configuration above can be accessed in the following ways:
			 * <ul>
			 * <li><b>By section/namespace</b>: <code>oManifest.getEntry("sap.ui5")</code></li>
			 * <li><b>By path</b>: <code>oManifest.getEntry("/sap.ui5/dependencies/libs")</code></li>
			 * </ul>
			 * 
			 * By section/namespace returns the configuration for the specified manifest
			 * section and by path allows to specify a concrete path to a dedicated entry
			 * inside the manifest. The path syntax always starts with a slash (/).
			 * @param sKey Either the manifest section name (namespace) or a concrete path
			 * @return Value of the key (could be any kind of value)
			 */
			getEntry(sKey: string): any;
			/**
			 * Returns the manifest defined in the metadata of the component.
			 * If not specified, the return value is null.
			 * @return manifest.
			 */
			getJson(): any;
			/**
			 * Returns the raw manifest defined in the metadata of the component.
			 * If not specified, the return value is null.
			 * @return manifest
			 */
			getRawJson(): any;
			/**
			 * Function to load the manifest by URL
			 * @param mOptions the configuration options
			 * @return Manifest object or for asynchronous calls an ECMA Script 6 Promise object will be returned.
			 */
			load(mOptions: any): Manifest|any;
		}
	
		class Message extends Element {
			/**
			 * Constructor for a new Message.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.core.MessageMetadata);
			/**
			 * Constructor for a new Message.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Compares the given message with <code>this</code> message. The types of
			 * {@link sap.ui.core.MessageType} are ordered from "Error" > "Warning" > "Success" >
			 * "Information" > "None".
			 * 
			 * See  {@link sap.ui.core.Message.compareByType}
			 * @param oOther message to compare with this one
			 * @return returns <code>0</code> if both messages are at
			 *         the same level. <code>-1</code> if <code>this</code>
			 *         message has a lower level. <code>1</code> if <code>this</code>
			 *         message has a higher level.
			 */
			compareByType(oOther: Message): number;
			/**
			 * Compares two given messages with each other.
			 * 
			 * The types of {@link sap.ui.core.MessageType} are ordered from "Error" > "Warning" > "Success" >
			 * "Information" > "None".
			 * @param oMessage1 first message to compare
			 * @param oMessage2 second message to compare
			 * @return returns <code>0</code> if both messages are at
			 *         the same level. <code>-1</code> if <code>this</code>
			 *         message has a lower level. <code>1</code> if <code>this</code>
			 *         message has a higher level.
			 */
			compareByType(oMessage1: Message, oMessage2: Message): number;
			/**
			 * Creates a new subclass of class sap.ui.core.Message with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Returns the icon's default URI depending on given size.
			 * 
			 * There are default icons for messages available that can be used this way. If no
			 * parameter is given, the size will be 16x16 per default. If larger icons are needed,
			 * the parameter "32x32" might be given.
			 * @param sSize If parameter is not set the default icon's size will be 16x16. If parameter
			 *         is set to "32x32" the icon size will be 32x32.
			 * @return URI of the default icon.
			 */
			getDefaultIcon(sSize: string): URI;
			/**
			 * Gets current value of property <code>icon</code>.
			 * 
			 * A possible icon URI of the message
			 * @return Value of property <code>icon</code>
			 */
			getIcon(): URI;
			/**
			 * Gets current value of property <code>level</code>.
			 * 
			 * Setting the message's level.
			 * 
			 * Default value is <code>None</code>.
			 * @return Value of property <code>level</code>
			 */
			getLevel(): MessageType;
			/**
			 * Gets current value of property <code>readOnly</code>.
			 * 
			 * Determines whether the message should be read only. This helps the application to handle a message a different way if the application differentiates between read-only and common messages.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>readOnly</code>
			 */
			getReadOnly(): boolean;
			/**
			 * Gets current value of property <code>text</code>.
			 * 
			 * Message text
			 * @return Value of property <code>text</code>
			 */
			getText(): string;
			/**
			 * Gets current value of property <code>timestamp</code>.
			 * 
			 * Message's timestamp. It is just a simple String that will be used without any transformation. So the application that uses messages needs to format the timestamp to its own needs.
			 * @return Value of property <code>timestamp</code>
			 */
			getTimestamp(): string;
			/**
			 * Sets a new value for property <code>icon</code>.
			 * 
			 * A possible icon URI of the message
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sIcon New value for property <code>icon</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setIcon(sIcon: URI): Message;
			/**
			 * Sets a new value for property <code>level</code>.
			 * 
			 * Setting the message's level.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>None</code>.
			 * @param sLevel New value for property <code>level</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setLevel(sLevel: MessageType): Message;
			/**
			 * Sets a new value for property <code>readOnly</code>.
			 * 
			 * Determines whether the message should be read only. This helps the application to handle a message a different way if the application differentiates between read-only and common messages.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bReadOnly New value for property <code>readOnly</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setReadOnly(bReadOnly: boolean): Message;
			/**
			 * Sets a new value for property <code>text</code>.
			 * 
			 * Message text
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sText New value for property <code>text</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setText(sText: string): Message;
			/**
			 * Sets a new value for property <code>timestamp</code>.
			 * 
			 * Message's timestamp. It is just a simple String that will be used without any transformation. So the application that uses messages needs to format the timestamp to its own needs.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sTimestamp New value for property <code>timestamp</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setTimestamp(sTimestamp: string): Message;
		}
	
		class MessageType {
			/**
			 * Message is an error
			 */
			static Error: string;
			/**
			 * Message should be just an information
			 */
			static Information: string;
			/**
			 * Message has no specific level
			 */
			static None: string;
			/**
			 * Message is an success message
			 */
			static Success: string;
			/**
			 * Message is a warning
			 */
			static Warning: string;
		}
	
		class OpenState {
			/**
			 * Closed and currently not changing states.
			 */
			static CLOSED: string;
			/**
			 * Still open, but in the process of going to the CLOSED state.
			 */
			static CLOSING: string;
			/**
			 * Open and currently not changing states.
			 */
			static OPEN: string;
			/**
			 * Already left the CLOSED state, is not OPEN yet, but in the process of getting OPEN.
			 */
			static OPENING: string;
		}
	
		class Orientation {
			/**
			 * Arrange Horizontally
			 */
			static Horizontal: string;
			/**
			 * Arrange Vertically
			 */
			static Vertical: string;
		}
	
		class Popup extends sap.ui.base.ManagedObject {
			/**
			 * Creates an instance of <code>sap.ui.core.Popup</code> that can be used to open controls as a Popup,
			 * visually appearing in front of other controls.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param oContent the content to render in the popup. In case of sap.ui.core.Element or DOMNode, the content must be present in the page (i.e. rendered). In case of sap.ui.core.Control, the Popup ensures rendering before opening.
			 * @param bModal whether the popup should be opened in a modal way (i.e. with blocking background). Setting this to "true" effectively blocks all attempts to focus content outside the modal popup. A modal popup also automatically sets the focus back to whatever was focused when the popup opened.(optional)
			 * @param bShadow whether the popup should be have a visual shadow underneath (shadow appearance depends on active theme and browser support)(optional)
			 * @param bAutoClose whether the popup should automatically close when the focus moves out of the popup(optional)
			 */
			constructor(oContent: sap.ui.core.Control|sap.ui.core.Element|any, bModal?: boolean, bShadow?: boolean, bAutoClose?: boolean);
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>closed</code> event of this <code>sap.ui.core.Popup</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.core.Popup</code> itself.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.core.Popup</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachClosed(oData: any, fnFunction: any, oListener?: any): Popup;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>opened</code> event of this <code>sap.ui.core.Popup</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.core.Popup</code> itself.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.core.Popup</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachOpened(oData: any, fnFunction: any, oListener?: any): Popup;
			/**
			 * Closes the popup.
			 * 
			 * If the Popup is already closed or in the process of closing, calling this method does nothing.
			 * If the Popup is in the process of being opened and closed with a duration of 0, calling this method does nothing.
			 * If the Popup is in the process of being opened and closed with an animation duration, the animation will be chained, but this functionality is dangerous,
			 * may lead to inconsistent behavior and is thus not recommended and may even be removed.
			 * @param iDuration animation duration in milliseconds; default is the jQuery preset "fast".  For iDuration == 0 the closing happens synchronously without animation.(optional)
			 */
			close(iDuration?: number);
			/**
			 * Closes and destroys this instance of Popup.
			 * Does not destroy the hosted content.
			 */
			destroy();
			/**
			 * Cleans up the resources associated with this object and all its aggregated children.
			 * 
			 * After an object has been destroyed, it can no longer be used in!
			 * 
			 * Applications should call this method if they don't need the object any longer.
			 * @note Overload from base type sap.ui.base.ManagedObject
			 * @param bSuppressInvalidate if true, this ManagedObject is not marked as changed(optional)
			 */
			destroy(bSuppressInvalidate?: boolean);
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>closed</code> event of this <code>sap.ui.core.Popup</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachClosed(fnFunction: any, oListener: any): Popup;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>opened</code> event of this <code>sap.ui.core.Popup</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachOpened(fnFunction: any, oListener: any): Popup;
			/**
			 * When the Popup is being destroyed all corresponding references should be
			 * deleted as well to prevent any memory leaks.
			 */
			exit();
			/**
			 * Creates a new subclass of class sap.ui.core.Popup with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Fires event <code>closed</code> to attached listeners.
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireClosed(mArguments?: any): Popup;
			/**
			 * Fires event <code>opened</code> to attached listeners.
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireOpened(mArguments?: any): Popup;
			/**
			 * Determines whether the pop-up should auto closes or not.
			 * @return 
			 */
			getAutoClose(): boolean;
			/**
			 * Returns this Popup's content.
			 * @return the content that has been set previously (if any)
			 */
			getContent(): Control|any;
			/**
			 * This returns true/false if the default followOf method should be used. If a separate followOf-handler was previously added
			 * the correspodning function is returned.
			 * @return if a function was set it is returned otherwise a boolean value whether the follow of is activated
			 */
			getFollowOf(): boolean|any;
			/**
			 * Returns the last z-index that has been handed out. does not increase the internal z-index counter.
			 * @return 
			 */
			getLastZIndex(): number;
			/**
			 * Returns the value if a Popup is of modal type
			 * @return {boolean] bModal whether the Popup is of modal type
			 */
			getModal();
			/**
			 * Returns the next available z-index on top of the existing/previous popups. Each call increases the internal z-index counter and the returned z-index.
			 * @return the next z-index on top of the Popup stack
			 */
			getNextZIndex(): number;
			/**
			 * Returns whether the Popup is currently open, closed, or transitioning between these states.
			 * @return whether the Popup is opened
			 */
			getOpenState(): OpenState;
			/**
			 * Returns whether the Popup is currently open (this includes opening and
			 * closing animations).
			 * @return whether the Popup is opened (or currently being
			 *                            opened or closed)
			 */
			isOpen(): boolean;
			/**
			 * Opens the popup's content at the position either specified here or beforehand via {@link #setPosition}.
			 * Content must be capable of being positioned via "position:absolute;"
			 * All parameters are optional (open() may be called without any parameters). iDuration may just be omitted, but if any of "at", "of", "offset", "collision" is given, also the preceding positioning parameters ("my", at",...) must be given.
			 * 
			 * If the Popup's OpenState is different from "CLOSED" (i.e. if the Popup is already open, opening or closing), the call is ignored.
			 * @param iDuration animation duration in milliseconds; default is the jQuery preset "fast". For iDuration == 0 the opening happens synchronously without animation.(optional)
			 * @param my the popup content's reference position for docking(optional)
			 * @param at the "of" element's reference point for docking to(optional)
			 * @param of specifies the reference element to which the given content should dock to(optional)
			 * @param offset the offset relative to the docking point, specified as a string with space-separated pixel values (e.g. "0 10" to move the popup 10 pixels to the right). If the docking of both "my" and "at" are both RTL-sensitive ("begin" or "end"), this offset is automatically mirrored in the RTL case as well.(optional)
			 * @param collision defines how the position of an element should be adjusted in case it overflows the window in some direction.(optional)
			 * @param followOf defines whether the popup should follow the dock reference when the reference changes its position.(optional)
			 */
			open(iDuration?: number, my?: Popup.Dock, at?: Popup.Dock, of?: string|Element|any|jQuery.Event, offset?: string, collision?: string, followOf?: boolean);
			/**
			 * Sets the animation functions to use for opening and closing the Popup. Any null value will be ignored and not change the respective animation function.
			 * When called, the animation functions receive three parameters:
			 * - the jQuery object wrapping the DomRef of the popup
			 * - the requested animation duration
			 * - a function that MUST be called once the animation has completed
			 * @param fnOpen 
			 * @param fnClose 
			 * @return <code>this</code> to allow method chaining
			 */
			setAnimations(fnOpen: any, fnClose: any): Popup;
			/**
			 * Used to specify whether the Popup should close as soon as
			 * - for non-touch environment: the focus leaves
			 * - for touch environment: user clicks the area which is outside the popup itself, the dom elemnt which popup aligns to (except document),
			 *  and one of the autoCloseAreas set by calling setAutoCloseAreas.
			 * @param bAutoClose whether the Popup should close as soon as the focus leaves
			 * @return <code>this</code> to allow method chaining
			 */
			setAutoClose(bAutoClose: boolean): Popup;
			/**
			 * Sets the additional areas in the page that are considered part of the Popup when autoclose is enabled.
			 * - non-touch environment: if the focus leaves the Popup but immediately enters one of these areas, the Popup does NOT close.
			 * - touch environment: if user clicks one of these areas, the Popup does NOT close.
			 * @param aAutoCloseAreas an array containing DOM elements considered part of the Popup; a value of null removes all previous areas
			 * @return <code>this</code> to allow method chaining
			 */
			setAutoCloseAreas(aAutoCloseAreas: any[]): Popup;
			/**
			 * Sets the content this instance of the Popup should render.
			 * Content must be capable of being positioned via position:absolute;
			 * @param oContent 
			 * @return <code>this</code> to allow method chaining
			 */
			setContent(oContent: Control|any): Popup;
			/**
			 * Sets the durations for opening and closing animations.
			 * Null values and values < 0 are ignored.
			 * A duration of 0 means no animation.
			 * Default value is "fast" which is the jQuery constant for "200 ms".
			 * @param iOpenDuration in milliseconds
			 * @param iCloseDuration in milliseconds
			 * @return <code>this</code> to allow method chaining
			 */
			setDurations(iOpenDuration: number, iCloseDuration: number): Popup;
			/**
			 * This enabled/disables the Popup to follow its opening reference. If the Popup is open and a followOf should
			 * be set the corresponding listener will be attached.
			 * @param followOf a boolean value enabled/disables the default followOf-Handler. Or an individual handler can be given.
			 * null deletes all followOf settings.
			 */
			setFollowOf(followOf: boolean|any);
			/**
			 * Sets the ID of the element that should be focused once the popup opens.
			 * If the given ID is the ID of an existing Control, this Control's focusDomRef will be focused instead, which may be an HTML element with a different ID (usually a sub-element inside the Control).
			 * If no existing element ID is supplied and the Popup is modal or auto-close, the Popup will instead focus the first focusable element.
			 * @param sId the ID of the DOM element to focus
			 */
			setInitialFocusId(sId: string);
			/**
			 * Set an initial z-index that should be used by all Popup so all Popups start at least
			 * with the set z-index.
			 * If the given z-index is lower than any current available z-index the highest z-index will be used.
			 * @param iInitialZIndex is the initial z-index
			 */
			setInitialZIndex(iInitialZIndex: number);
			/**
			 * Used to specify whether the Popup should be modal. A modal popup will put some fading "block layer" over the background and
			 * prevent attempts to put the focus outside/below the popup.
			 * Setting this while the popup is open will change "block layer" immediately.
			 * @param bModal whether the Popup is of modal type
			 * @param sModalCSSClass a CSS class (or space-separated list of classes) that should be added to the block layer(optional)
			 * @return <code>this</code> to allow method chaining
			 */
			setModal(bModal: boolean, sModalCSSClass?: string): Popup;
			/**
			 * Sets the position of the Popup (if you refer to a Control as anchor then do not
			 * use the DOMRef of the control which might change after re-renderings).
			 * Optional parameters can only be omitted when all subsequent parameters are omitted as well.
			 * @param my specifies which point of the given Content should be aligned
			 * @param at specifies the point of the reference element to which the given Content should be aligned
			 * @param of specifies the reference element to which the given content should be aligned as specified in the other parameters(optional)
			 * @param offset the offset relative to the docking point, specified as a string with space-separated pixel values (e.g. "0 10" to move the popup 10 pixels to the right). If the docking of both "my" and "at" are both RTL-sensitive ("begin" or "end"), this offset is automatically mirrored in the RTL case as well.(optional)
			 * @param collision defines how the position of an element should be adjusted in case it overflows the window in some direction. The valid values that refer to jQuery-UI's position parameters are "flip", "fit" and "none".(optional)
			 * @return <code>this</code> to allow method chaining
			 */
			setPosition(my: Popup.Dock, at: Popup.Dock|any, of?: string|Element|any|jQuery.Event, offset?: string, collision?: string): Popup;
			/**
			 * Determines whether the Popup should have a shadow (in supporting browsers).
			 * This also affects a currently open popup.
			 * @param bShowShadow whether to show a shadow
			 * @return <code>this</code> to allow method chaining
			 */
			setShadow(bShowShadow: boolean): Popup;
		}
	
		interface PopupInterface {
		}
	
		class Priority {
			/**
			 * High priority
			 */
			static High: string;
			/**
			 * Low priority
			 */
			static Low: string;
			/**
			 * Medium priority
			 */
			static Medium: string;
			/**
			 * Default, none priority
			 */
			static None: string;
		}
	
		class RenderManager extends sap.ui.base.Object {
			/**
			 * Creates an instance of the RenderManager.
			 */
			constructor();
			/**
			 * Adds a class to the class collection if the name is not empty or null.
			 * The class collection is flushed if it is written to the buffer using {@link #writeClasses}
			 * @param sName name of the class to be added; null values are ignored
			 * @return this render manager instance to allow chaining
			 */
			addClass(sName: string): RenderManager;
			/**
			 * Adds a style property to the style collection if the value is not empty or null
			 * The style collection is flushed if it is written to the buffer using {@link #writeStyle}
			 * @param sName name of the CSS property to write
			 * @param value value to write
			 * @return this render manager instance to allow chaining
			 */
			addStyle(sName: string, value: string|number): RenderManager;
			/**
			 * Cleans up the rendering state of the given control with rendering it.
			 * 
			 * A control is responsible for the rendering of all its child controls.
			 * But in some cases it makes sense that a control does not render all its
			 * children based on a filter condition. For example a Carousel control only renders
			 * the current visible parts (and maybe some parts before and after the visible area)
			 * for performance reasons.
			 * If a child was rendered but should not be rendered anymore because the filter condition
			 * does not apply anymore this child must be cleaned up correctly (e.g deregistering eventhandlers, ...).
			 * 
			 * The following example shows how renderControl and cleanupControlWithoutRendering should
			 * be used:
			 * 
			 * render = function(rm, ctrl){
			 *   //...
			 *   var aAggregatedControls = //...
			 *   for(var i=0; i<aAgrregatedControls.length; i++){
			 *   	if(//... some filter expression){
			 *         rm.renderControl(aAggregatedControls[i]);
			 *      }else{
			 *         rm.cleanupControlWithoutRendering(aAggregatedControls[i]);
			 *      }
			 *   }
			 *   //...
			 * }
			 * 
			 * Note:
			 * The method does not remove DOM of the given control. The callee of this method has to take over the
			 * responsibility to cleanup the DOM of the control afterwards.
			 * For parents which are rendered with the normal mechanism as shown in the example above this requirement
			 * is fulfilled, because the control is not added to the rendering buffer (renderControl is not called) and
			 * the DOM is replaced when the rendering cycle is finalized.
			 * @param oControl the control that should be cleaned up
			 */
			cleanupControlWithoutRendering(oControl: Control);
			/**
			 * Creates the ID to be used for the invisible Placeholder DOM element.
			 * This method can be used to get direct access to the placeholder DOM element.
			 * Also statically available as RenderManager.createInvisiblePlaceholderId()
			 * @param oElement The Element instance for which to create the placeholder ID
			 * @return The ID used for the invisible Placeholder of this element
			 */
			createInvisiblePlaceholderId(oElement: Element): string;
			/**
			 * Cleans up the resources associated with this instance.
			 * After the instance has been destroyed, it must not be used anymore.
			 * Applications should call this function if they don't need the instance any longer.
			 */
			destroy();
			/**
			 * Creates a new subclass of class sap.ui.core.RenderManager with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Searches "to-be-preserved" nodes for the given control id.
			 * @param sId control id to search content for.
			 * @return a jQuery collection representing the found content
			 */
			findPreservedContent(sId: string): any;
			/**
			 * Renders the content of the rendering buffer into the provided DOMNode.
			 * 
			 * This function must not be called within control renderers.
			 * 
			 * Usage:
			 * <pre>
			 * // Create a new instance of the RenderManager
			 * var rm = sap.ui.getCore().createRenderManager();
			 * // Use the writer API to fill the buffers
			 * rm.write(...);
			 * rm.renderControl(oControl);
			 * rm.write(...);
			 * ...
			 * // Finally flush the buffer into the provided DOM node (The current content is removed)
			 * rm.flush(oDomNode);
			 * // If the instance is not needed anymore, destroy it
			 * rm.destroy();
			 * </pre>
			 * @param oTargetDomNode The node in the dom where the buffer should be flushed into.
			 * @param bDoNotPreserve flag, whether to not preserve (true) the content or to preserve it (false).
			 * @param vInsert flag, whether to append (true) or replace (false) the buffer of the target dom node or to insert at a certain position (int)
			 */
			flush(oTargetDomNode: any, bDoNotPreserve: boolean, vInsert: boolean|number);
			/**
			 * Returns the configuration object
			 * Shortcut for <code>sap.ui.getCore().getConfiguration()</code>
			 * @return the configuration object
			 */
			getConfiguration(): Configuration;
			/**
			 * Returns the hidden area reference belonging to this window instance.
			 * @return the hidden area reference belonging to this core instance.
			 */
			getPreserveAreaRef(): any;
			/**
			 * Returns the renderer class for a given control instance
			 * @param oControl the control that should be rendered
			 * @return the renderer class for a given control instance
			 */
			getRenderer(oControl: Control);
			/**
			 * Returns the renderer class for a given control instance
			 * @param oControl the control that should be rendered
			 * @return the renderer class for a given control instance
			 */
			getRenderer(oControl: Control): any;
			/**
			 * Collects descendants of the given root node that need to be preserved before the root node
			 * is wiped out. The "to-be-preserved" nodes are moved to a special, hidden 'preserve' area.
			 * 
			 * A node is declared "to-be-preserved" when it has the <code>data-sap-ui-preserve</code>
			 * attribute set. When the optional parameter <code>bPreserveNodesWithId</code> is set to true,
			 * then nodes with an id are preserved as well and their <code>data-sap-ui-preserve</code> attribute
			 * is set automatically. This option is used by UIAreas when they render for the first time and
			 * simplifies the handling of predefined HTML content in a web page.
			 * 
			 * The "to-be-preserved" nodes are searched with a depth first search and moved to the 'preserve'
			 * area in the order that they are found. So for direct siblings the order should be stable.
			 * @param oRootNode to search for "to-be-preserved" nodes
			 * @param bPreserveRoot whether to preserve the root itself(optional)
			 * @param bPreserveNodesWithId whether to preserve nodes with an id as well(optional)
			 */
			preserveContent(oRootNode: any, bPreserveRoot?: boolean, bPreserveNodesWithId?: boolean);
			/**
			 * Renders the given control to the provided DOMNode.
			 * 
			 * If the control is already rendered in the provided DOMNode the DOM of the control is replaced. If the control
			 * is already rendered somewhere else the current DOM of the control is removed and the new DOM is appended
			 * to the provided DOMNode.
			 * 
			 * This function must not be called within control renderers.
			 * @param oControl the Control that should be rendered.
			 * @param oTargetDomNode The node in the DOM where the result of the rendering should be inserted.
			 */
			render(oControl: Control, oTargetDomNode: any);
			/**
			 * Turns the given control into its HTML representation and appends it to the
			 * rendering buffer.
			 * 
			 * If the given control is undefined or null, then nothing is rendered.
			 * @param oControl the control that should be rendered
			 * @return this render manager instance to allow chaining
			 */
			renderControl(oControl: Control): RenderManager;
			/**
			 * 
			 * @param sKey 
			 * @deprecated Not implemented - DO NOT USE
			 */
			translate(sKey: string);
			/**
			 * Write the given texts to the buffer
			 * @param sText (can be a number too)
			 * @return this render manager instance to allow chaining
			 */
			write(sText: string|number): RenderManager;
			/**
			 * 
			 * @deprecated Not implemented - DO NOT USE
			 * @return this render manager instance to allow chaining
			 */
			writeAcceleratorKey(): RenderManager;
			/**
			 * Writes the accessibility state (see WAI-ARIA specification) of the provided element into the HTML
			 * based on the element's properties and associations.
			 * 
			 * The ARIA properties are only written when the accessibility feature is activated in the UI5 configuration.
			 * 
			 * The following properties/values to ARIA attribute mappings are done (if the element does have such properties):
			 * <code>editable===false</code> => <code>aria-readonly="true"</code>
			 * <code>enabled===false</code> => <code>aria-disabled="true"</code>
			 * <code>visible===false</code> => <code>aria-hidden="true"</code>
			 * <code>required===true</code> => <code>aria-required="true"</code>
			 * <code>selected===true</code> => <code>aria-selected="true"</code>
			 * <code>checked===true</code> => <code>aria-checked="true"</code>
			 * 
			 * In case of the required attribute also the Label controls which referencing the given element in their 'for' relation
			 * are taken into account to compute the <code>aria-required</code> attribute.
			 * 
			 * Additionally the association <code>ariaDescribedBy</code> and <code>ariaLabelledBy</code> are used to write
			 * the id lists of the ARIA attributes <code>aria-describedby</code> and <code>aria-labelledby</code>.
			 * 
			 * Label controls which referencing the given element in their 'for' relation are automatically added to the
			 * <code>aria-labelledby</code> attributes.
			 * 
			 * Note: This function is only a heuristic of a control property to ARIA attribute mapping. Control developers
			 * have to check whether it fullfills their requirements. In case of problems (for example the RadioButton has a
			 * <code>selected</code> property but must provide an <code>aria-checked</code> attribute) the auto-generated
			 * result of this function can be influenced via the parameter <code>mProps</code> as described below.
			 * 
			 * The parameter <code>mProps</code> can be used to either provide additional attributes which should be added and/or
			 * to avoid the automatic generation of single ARIA attributes. The 'aria-' prefix will be prepended automatically to the keys
			 * (Exception: Attribute 'role' does not get the prefix 'aria-').
			 * 
			 * Examples:
			 * <code>{hidden : true}</code> results in <code>aria-hidden="true"</code> independent of the precense or absence of
			 * the visibility property.
			 * <code>{hidden : null}</code> ensures that no <code>aria-hidden</code> attribute is written independent of the precense
			 * or absence of the visibility property.
			 * The function behaves in the same way for the associations <code>ariaDescribedBy</code> and <code>ariaLabelledBy</code>.
			 * To append additional values to the auto-generated <code>aria-describedby</code> and <code>aria-labelledby</code> attributes
			 * the following format can be used:
			 * <code>{describedby : {value: "id1 id2", append: true}}</code> => <code>aria-describedby="ida idb id1 id2"</code> (assuming that "ida idb"
			 * is the auto-generated part based on the association <code>ariaDescribedBy</code>).
			 * @param oElement the element whose accessibility state should be rendered(optional)
			 * @param mProps a map of properties that should be added additionally or changed.(optional)
			 * @return this render manager instance to allow chaining
			 */
			writeAccessibilityState(oElement?: Element, mProps?: any): RenderManager;
			/**
			 * Writes the attribute and its value into the HTML
			 * @param sName the name of the attribute
			 * @param value the value of the attribute
			 * @return this render manager instance to allow chaining
			 */
			writeAttribute(sName: string, value: string|number|boolean): RenderManager;
			/**
			 * Writes the attribute and its value into the HTML
			 * 
			 * The value is properly escaped to avoid XSS attacks.
			 * @param sName the name of the attribute
			 * @param vValue the value of the attribute
			 * @return this render manager instance to allow chaining
			 */
			writeAttributeEscaped(sName: string, vValue: any): RenderManager;
			/**
			 * Writes and flushes the class collection (all CSS classes added by "addClass()" since the last flush).
			 * Also writes the custom style classes added by the application with "addStyleClass(...)". Custom classes are
			 * added by default from the currently rendered control. If an oElement is given, this Element's custom style
			 * classes are added instead. If oElement === false, no custom style classes are added.
			 * @param oElement an Element from which to add custom style classes (instead of adding from the control itself)(optional)
			 * @return this render manager instance to allow chaining
			 */
			writeClasses(oElement?: Element|boolean): RenderManager;
			/**
			 * Writes the controls data into the HTML.
			 * Control Data consists at least of the id of a control
			 * @param oControl the control whose identifying information should be written to the buffer
			 * @return this render manager instance to allow chaining
			 */
			writeControlData(oControl: Control): RenderManager;
			/**
			 * Writes the elements data into the HTML.
			 * Element Data consists at least of the id of a element
			 * @param oElement the element whose identifying information should be written to the buffer
			 * @return this render manager instance to allow chaining
			 */
			writeElementData(oElement: Element): RenderManager;
			/**
			 * Escape text for HTML and write it to the buffer
			 * @param sText 
			 * @param bLineBreaks Whether to convert linebreaks into <br> tags
			 * @return this render manager instance to allow chaining
			 */
			writeEscaped(sText: string, bLineBreaks: boolean): RenderManager;
			/**
			 * Writes necessary invisible control/element placeholder data into the HTML.
			 * 
			 * Controls should only use this method if they can't live with the standard 'visible=false' implementation of the RenderManager which
			 * renders dummy HTMLSpanElement for better re-rendering performance. Even though HTML5 error tolerance accepts this for most of the cases and
			 * these dummy elements are not in the render tree of the Browser, controls may need to generate a valid and semantic HTML output when the
			 * rendered HTMLSpanElement is not an allowed element(e.g. &lt;span&gt; element within the &lt;tr&gt; or &lt;li&gt; group).
			 * 
			 * The caller needs to start an opening HTML tag, then call this method, then complete the opening and closing tag.
			 * <pre>
			 * oRenderManager.write("<tr");
			 * oRenderManager.writeInvisiblePlaceholderData(oControl);
			 * oRenderManager.write("></tr>");
			 * </pre>
			 * @param oElement an instance of sap.ui.core.Element
			 * @return this render manager instance to allow chaining
			 */
			writeInvisiblePlaceholderData(oElement: Element): RenderManager;
			/**
			 * Writes and flushes the style collection
			 * @return this render manager instance to allow chaining
			 */
			writeStyles(): RenderManager;
		}
	
		namespace routing {
		
			class HashChanger extends sap.ui.base.EventProvider {
				/**
				 * 
				 */
				constructor();
				/**
				 * Cleans the event registration
				 */
				destroy();
				/**
				 * Creates a new subclass of class sap.ui.core.routing.HashChanger with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Fires the hashchanged event, may be extended to modify the hash before fireing the event
				 * @param newHash the new hash of the browser
				 * @param oldHash the previous hash
				 */
				fireHashChanged(newHash: string, oldHash: string);
				/**
				 * Gets the current hash
				 * @return the current hash
				 */
				getHash(): string;
				/**
				 * Gets a global singleton of the HashChanger. The singleton will get created when this function is invoked for the first time.
				 */
				getInstance();
				/**
				 * Will start listening to hashChanges with the parseHash function.
				 * This will also fire a hashchanged event with the initial hash.
				 * @return false if it was initialized before, true if it was initialized the first time
				 */
				init();
				/**
				 * Replaces the hash to a certain value. When using the replace function no browser history is written.
				 * If you want to have an entry in the browser history, please use set setHash function.
				 * @param sHash the hash
				 */
				replaceHash(sHash: string);
				/**
				 * Sets the hashChanger to a new instance, destroys the old one and copies all its event listeners to the new one
				 * @param oHashChanger the new instance for the global singleton
				 */
				replaceHashChanger(oHashChanger: HashChanger);
				/**
				 * Sets the hash to a certain value. When using the set function a browser history  entry is written.
				 * If you do not want to have an entry in the browser history, please use set replaceHash function.
				 * @param sHash the hash
				 */
				setHash(sHash: string);
			}
		
			class History  {
				/**
				 * Used to determine the {@link sap.ui.core.HistoryDirection} of the current or a future navigation,
				 * done with a {@link sap.ui.core.routing.Router} or {@link sap.ui.core.routing.HashChanger}.
				 * 
				 * <strong>ATTENTION:</strong> this class will not be accurate if someone does hash-replacement without the named classes above
				 * If you are manipulating the hash directly this class is not supported anymore.
				 * @param oHashChanger required, without a HashChanger this class cannot work. The class needs to be aware of the hash-changes.
				 */
				constructor(oHashChanger: sap.ui.core.routing.HashChanger);
				/**
				 * Determines what the navigation direction for a newly given hash would be
				 * It will say Unknown if there is a history foo - bar (current history) - foo
				 * If you now ask for the direction of the hash "foo" you get Unknown because it might be backwards or forwards.
				 * For hash replacements, the history stack will be replaced at this position for the history.
				 * @param sNewHash optional, if this parameter is not passed the last hashChange is taken.(optional)
				 * @return or undefined, if no navigation has taken place yet.
				 */
				getDirection(sNewHash?: string): HistoryDirection;
				/**
				 * 
				 * @return a global singleton that gets created as soon as the sap.ui.core.routing.History is required
				 */
				getInstance(): History;
				/**
				 * gets the previous hash in the history - if the last direction was Unknown or there was no navigation yet, undefined will be returned
				 * @return or undefined
				 */
				getPreviousHash(): string;
			}
		
			class HistoryDirection {
				/**
				 * The page has already been navigated to and it was the precessor of the previous page
				 */
				static Backwards: string;
				/**
				 * The page has already been navigated to and it was the successor of the previous page
				 */
				static Forwards: string;
				/**
				 * A new Entry is added to the history
				 */
				static NewEntry: string;
				/**
				 * A Navigation took place, but it could be any of the other three states
				 */
				static Unknown: string;
			}
		
			class Route extends sap.ui.base.EventProvider {
				/**
				 * Instantiates a SAPUI5 Route
				 * @param The router instance, the route will be added to.
				 * @param oConfig configuration object for the route
				 * @param oParent The parent route - if a parent route is given, the routeMatched event of this route will also trigger the route matched of the parent and it will also create the view of the parent(if provided).(optional)
				 */
				constructor(The: sap.ui.core.routing.Router, oConfig: any, oParent?: sap.ui.core.routing.Route);
				/**
				 * Attach event-handler <code>fnFunction</code> to the 'matched' event of this <code>sap.ui.core.routing.Route</code>.<br/>
				 * @param oData The object, that should be passed along with the event-object when firing the event.
				 * @param fnFunction The function to call, when the event occurs. This function will be called on the
				 *            oListener-instance (if present) or in a 'static way'.
				 * @param oListener Object on which to call the given function. If empty, this Model is used.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				attachMatched(oData: any, fnFunction: any, oListener?: any): Route;
				/**
				 * Attach event-handler <code>fnFunction</code> to the 'patternMatched' event of this <code>sap.ui.core.routing.Route</code>.<br/>
				 * @param oData The object, that should be passed along with the event-object when firing the event.
				 * @param fnFunction The function to call, when the event occurs. This function will be called on the
				 *            oListener-instance (if present) or in a 'static way'.
				 * @param oListener Object on which to call the given function. If empty, this Model is used.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				attachPatternMatched(oData: any, fnFunction: any, oListener?: any): Route;
				/**
				 * Destroys a route
				 * @return this for chaining.
				 */
				destroy(): Route;
				/**
				 * Destructor method for objects
				 * @note Overload from base type sap.ui.base.Object
				 */
				destroy();
				/**
				 * Detach event-handler <code>fnFunction</code> from the 'matched' event of this <code>sap.ui.core.routing.Route</code>.<br/>
				 * 
				 * The passed function and listener object must match the ones previously used for event registration.
				 * @param fnFunction The function to call, when the event occurs.
				 * @param oListener Object on which the given function had to be called.
				 * @return <code>this</code> to allow method chaining
				 */
				detachMatched(fnFunction: any, oListener: any): Route;
				/**
				 * Detach event-handler <code>fnFunction</code> from the 'patternMatched' event of this <code>sap.ui.core.routing.Route</code>.<br/>
				 * 
				 * The passed function and listener object must match the ones previously used for event registration.
				 * @param fnFunction The function to call, when the event occurs.
				 * @param oListener Object on which the given function had to be called.
				 * @return <code>this</code> to allow method chaining
				 */
				detachPatternMatched(fnFunction: any, oListener: any): Route;
				/**
				 * Creates a new subclass of class sap.ui.core.routing.Route with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Return the pattern of the route. If there are multiple patterns, the first pattern is returned
				 * @return the routes pattern
				 */
				getPattern(): string;
				/**
				 * Returns the URL for the route and replaces the placeholders with the values in oParameters
				 * @param oParameters Parameters for the route
				 * @return the unencoded pattern with interpolated arguments
				 */
				getURL(oParameters: any): string;
			}
		
			class Router extends sap.ui.base.EventProvider {
				/**
				 * Instantiates a SAPUI5 Router
				 * @param oRoutes may contain many Route configurations as {@link sap.ui.core.routing.Route#constructor}.<br/>
				 * Each of the routes contained in the array/object will be added to the router.<br/>
				 * 
				 * One way of defining routes is an array:
				 * <pre>
				 * [
				 *     //Will create a route called 'firstRouter' you can later use this name in navTo to navigate to this route
				 *     {
				 *         name: "firstRoute"
				 *         pattern : "usefulPattern"
				 *     },
				 *     //Will create a route called 'anotherRoute'
				 *     {
				 *         name: "anotherRoute"
				 *         pattern : "anotherPattern"
				 *     }
				 * ]
				 * </pre>
				 * 
				 * The alternative way of defining routes is an Object.
				 * If you choose this way, the name attribute is the name of the property.
				 * <pre>
				 * {
				 *     //Will create a route called 'firstRouter' you can later use this name in navTo to navigate to this route
				 *     firstRoute : {
				 *         pattern : "usefulPattern"
				 *     },
				 *     //Will create a route called 'anotherRoute'
				 *     anotherRoute : {
				 *         pattern : "anotherPattern"
				 *     }
				 * }
				 * </pre>
				 * The values that may be provided are the same as in {@link sap.ui.core.routing.Route#constructor}(optional)
				 * @param oConfig Default values for route configuration - also takes the same parameters as {@link sap.ui.core.routing.Target#constructor}.<br/>
				 * This config will be used for routes and for targets, used in the router<br/>
				 * Eg: if the config object specifies :
				 * <pre>
				 * <code>
				 * {
				 *     viewType : "XML"
				 * }
				 * </code>
				 * </pre>
				 * The targets look like this:
				 * <pre>
				 * {
				 *     xmlTarget : {
				 *         ...
				 *     },
				 *     jsTarget : {
				 *         viewType : "JS"
				 *         ...
				 *     }
				 * }
				 * </pre>
				 * Then the effective config will look like this:
				 * <pre>
				 * {
				 *     xmlTarget : {
				 *         viewType : "XML"
				 *         ...
				 *     },
				 *     jsTarget : {
				 *         viewType : "JS"
				 *         ...
				 *     }
				 * }
				 * </pre>
				 * 
				 * Since the xmlTarget does not specify its viewType, XML is taken from the config object. The jsTarget is specifying it, so the viewType will be JS.(optional)
				 * @param oOwner the Component of all the views that will be created by this Router,<br/>
				 * will get forwarded to the {@link sap.ui.core.routing.Views#contructor}.<br/>
				 * If you are using the componentMetadata to define your routes you should skip this parameter.(optional)
				 * @param oTargetsConfig available @since 1.28 the target configuration, see {@link sap.ui.core.Targets#constructor} documentation (the options object).<br/>
				 * You should use Targets to create and display views. Since 1.28 the route should only contain routing relevant properties.<br/>
				 * <b>Example:</b>
				 * <pre>
				 * <code>
				 *     new Router(
				 *     // Routes
				 *     [
				 *         {
				 *             // no view creation related properties are in the route
				 *             name: "startRoute",
				 *             //no hash
				 *             pattern: "",
				 *             // you can find this target in the targetConfig
				 *             target: "welcome"
				 *         }
				 *     ],
				 *     // Default values shared by routes and Targets
				 *     {
				 *         viewNamespace: "my.application.namespace",
				 *         viewType: "XML"
				 *     },
				 *     // You should only use this constructor when you are not using a router with a component.
				 *     // Please use the metadata of a component to define your routes and targets.
				 *     // The documentation can be found here: {@link sap.ui.core.UIComponent#.extend}.
				 *     null,
				 *     // Target config
				 *     {
				 *          //same name as in the route called 'startRoute'
				 *          welcome: {
				 *              // All properties for creating and placing a view go here or in the config
				 *              viewName: "Welcome",
				 *              controlId: "app",
				 *              controlAggregation: "pages"
				 *          }
				 *     })
				 * </code>
				 * </pre>(optional)
				 */
				constructor(oRoutes?: any|any[], oConfig?: any, oOwner?: sap.ui.core.UIComponent, oTargetsConfig?: any);
				/**
				 * Adds a route to the router
				 * @param oConfig configuration object for the route @see sap.ui.core.routing.Route#constructor
				 * @param oParent The parent route - if a parent route is given, the routeMatched event of this route will also trigger the route matched of the parent and it will also create the view of the parent (if provided).
				 */
				addRoute(oConfig: any, oParent: Route);
				/**
				 * Attach event-handler <code>fnFunction</code> to the 'bypassed' event of this <code>sap.ui.core.routing.Router</code>.<br/>
				 * The event will get fired, if none of the routes of the routes is matching. <br/>
				 * @param oData The object, that should be passed along with the event-object when firing the event.
				 * @param fnFunction The function to call, when the event occurs. This function will be called on the
				 *            oListener-instance (if present) or in a 'static way'.
				 * @param oListener Object on which to call the given function. If empty, this Model is used.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				attachBypassed(oData: any, fnFunction: any, oListener?: any): Router;
				/**
				 * Attach event-handler <code>fnFunction</code> to the 'routeMatched' event of this <code>sap.ui.core.routing.Router</code>.<br/>
				 * @param oData The object, that should be passed along with the event-object when firing the event.
				 * @param fnFunction The function to call, when the event occurs. This function will be called on the
				 *            oListener-instance (if present) or in a 'static way'.
				 * @param oListener Object on which to call the given function. If empty, this Model is used.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				attachRouteMatched(oData: any, fnFunction: any, oListener?: any): Router;
				/**
				 * Attach event-handler <code>fnFunction</code> to the 'routePatternMatched' event of this <code>sap.ui.core.routing.Router</code>.<br/>
				 * This event is similar to route matched. But it will only fire for the route that has a matching pattern, not for its parent Routes <br/>
				 * @param oData The object, that should be passed along with the event-object when firing the event.
				 * @param fnFunction The function to call, when the event occurs. This function will be called on the
				 *            oListener-instance (if present) or in a 'static way'.
				 * @param oListener Object on which to call the given function. If empty, this Model is used.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				attachRoutePatternMatched(oData: any, fnFunction: any, oListener?: any): Router;
				/**
				 * Removes the router from the hash changer @see sap.ui.core.routing.HashChanger
				 * @return this for chaining.
				 */
				destroy(): Router;
				/**
				 * Destructor method for objects
				 * @note Overload from base type sap.ui.base.Object
				 */
				destroy();
				/**
				 * Detach event-handler <code>fnFunction</code> from the 'bypassed' event of this <code>sap.ui.core.routing.Router</code>.<br/>
				 * The event will get fired, if none of the routes of the routes is matching. <br/>
				 * 
				 * The passed function and listener object must match the ones previously used for event registration.
				 * @param fnFunction The function to call, when the event occurs.
				 * @param oListener Object on which the given function had to be called.
				 * @return <code>this</code> to allow method chaining
				 */
				detachBypassed(fnFunction: any, oListener: any): Router;
				/**
				 * Detach event-handler <code>fnFunction</code> from the 'routeMatched' event of this <code>sap.ui.core.routing.Router</code>.<br/>
				 * 
				 * The passed function and listener object must match the ones previously used for event registration.
				 * @param fnFunction The function to call, when the event occurs.
				 * @param oListener Object on which the given function had to be called.
				 * @return <code>this</code> to allow method chaining
				 */
				detachRouteMatched(fnFunction: any, oListener: any): Router;
				/**
				 * Detach event-handler <code>fnFunction</code> from the 'routePatternMatched' event of this <code>sap.ui.core.routing.Router</code>.<br/>
				 * This event is similar to route matched. But it will only fire for the route that has a matching pattern, not for its parent Routes <br/>
				 * 
				 * The passed function and listener object must match the ones previously used for event registration.
				 * @param fnFunction The function to call, when the event occurs.
				 * @param oListener Object on which the given function had to be called.
				 * @return <code>this</code> to allow method chaining
				 */
				detachRoutePatternMatched(fnFunction: any, oListener: any): Router;
				/**
				 * Creates a new subclass of class sap.ui.core.routing.Router with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Fire event bypassed to attached listeners.
				 * The event will get fired, if none of the routes of the routes is matching. <br/>
				 * @param mArguments the arguments to pass along with the event.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				fireBypassed(mArguments?: any): Router;
				/**
				 * Fire event routeMatched to attached listeners.
				 * @param mArguments the arguments to pass along with the event.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				fireRouteMatched(mArguments?: any): Router;
				/**
				 * Fire event routePatternMatched to attached listeners.
				 * This event is similar to route matched. But it will only fire for the route that has a matching pattern, not for its parent Routes <br/>
				 * @param mArguments the arguments to pass along with the event.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				fireRoutePatternMatched(mArguments?: any): Router;
				/**
				 * Returns the Route with a name, if no route is found undefined is returned
				 * @param sName Name of the route
				 * @return the route with the provided name or undefined.
				 */
				getRoute(sName: string): Route;
				/**
				 * Get a registered router
				 * @param sName Name of the router
				 * @return The router with the specified name, else undefined
				 */
				getRouter(sName: string): Router;
				/**
				 * Returns the instance of Targets, if you pass a targets config to the router
				 * @return The instance of targets, the router uses to place views or undefined if you did not specify the targets parameter in the router's constructor.
				 */
				getTargets(): Targets|any;
				/**
				 * Returns the URL for the route and replaces the placeholders with the values in oParameters
				 * @param sName Name of the route
				 * @param oParameters Parameters for the route(optional)
				 * @return the unencoded pattern with interpolated arguments
				 */
				getURL(sName: string, oParameters?: any): string;
				/**
				 * Returns the views instance created by the router
				 * @return the Views instance
				 */
				getViews(): Views;
				/**
				 * Attaches the router to the hash changer @see sap.ui.core.routing.HashChanger
				 * @return this for chaining.
				 */
				initialize(): Router;
				/**
				 * Navigates to a specific route defining a set of parameters. The Parameters will be URI encoded - the characters ; , / ? : @ & = + $ are reserved and will not be encoded.
				 * If you want to use special characters in your oParameters, you have to encode them (encodeURIComponent).
				 * 
				 * IF the given route name can't be found, an error message is logged to the console and the hash will be changed to empty string.
				 * @param sName Name of the route
				 * @param oParameters Parameters for the route(optional)
				 * @param bReplace Defines if the hash should be replaced (no browser history entry) or set (browser history entry)(optional)
				 * @return this for chaining.
				 */
				navTo(sName: string, oParameters?: any, bReplace?: boolean): Router;
				/**
				 * Will trigger routing events + place targets for routes matching the string
				 * @param sNewHash a new hash
				 */
				parse(sNewHash: string);
				/**
				 * Registers the router to access it from another context. Use sap.ui.routing.Router.getRouter() to receive the instance
				 * @param sName Name of the router
				 */
				register(sName: string);
				/**
				 * Stops to listen to the hashChange of the browser.</br>
				 * If you want the router to start again, call initialize again.
				 * @return this for chaining.
				 */
				stop(): Router;
			}
		
			class Target extends sap.ui.base.EventProvider {
				/**
				 * Provides a convenient way for placing views into the correct containers of your application.<br/>
				 * The main benefit of Targets is lazy loading: you do not have to create the views until you really need them.<br/>
				 * <b>Don't call this constructor directly</b>, use {@link sap.ui.core.routing.Targets} instead, it will create instances of a Target.<br/>
				 * If you are using the mobile library, please use the {@link sap.m.routing.Targets} constructor, please read the documentation there.<br/>
				 * @param oOptions all of the parameters defined in {@link sap.m.routing.Targets#constructor} are accepted here, except for children you need to specify the parent.
				 * @param oViews All views required by this target will get created by the views instance using {@link sap.ui.core.routing.Views#getView}
				 * @param oParent the parent of this target. Will also get displayed, if you display this target. In the config you have the fill the children property {@link sap.m.routing.Targets#constructor}(optional)
				 */
				constructor(oOptions: any, oViews: sap.ui.core.routing.Views, oParent?: sap.ui.core.routing.Target);
				/**
				 * Attach event-handler <code>fnFunction</code> to the 'display' event of this <code>sap.ui.core.routing.Target</code>.<br/>
				 * @param oData The object, that should be passed along with the event-object when firing the event.
				 * @param fnFunction The function to call, when the event occurs. This function will be called on the
				 * oListener-instance (if present) or in a 'static way'.
				 * @param oListener Object on which to call the given function.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				attachDisplay(oData: any, fnFunction: any, oListener?: any): Target;
				/**
				 * Destroys the target, will be called by {@link sap.m.routing.Targets} don't call this directly.
				 * @return this for chaining.
				 */
				destroy(): Target;
				/**
				 * Destructor method for objects
				 * @note Overload from base type sap.ui.base.Object
				 */
				destroy();
				/**
				 * Detach event-handler <code>fnFunction</code> from the 'display' event of this <code>sap.ui.core.routing.Target</code>.<br/>
				 * 
				 * The passed function and listener object must match the ones previously used for event registration.
				 * @param fnFunction The function to call, when the event occurs.
				 * @param oListener Object on which the given function had to be called.
				 * @return <code>this</code> to allow method chaining
				 */
				detachDisplay(fnFunction: any, oListener: any): Target;
				/**
				 * Creates a view and puts it in an aggregation of a control that has been defined in the {@link sap.ui.core.routing.Target#constructor}.
				 * @param vData an object that will be passed to the display event in the data property. If the target has parents, the data will also be passed to them.(optional)
				 * @return resolves with {name: *, view: *, control: *} if the target can be successfully displayed otherwise it resolves with {name: *, error: *}
				 */
				display(vData?: any): any;
				/**
				 * Creates a new subclass of class sap.ui.core.routing.Target with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Fire event created to attached listeners.
				 * @param mArguments the arguments to pass along with the event.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				fireDisplay(mArguments?: any): Target;
			}
		
			class Targets extends sap.ui.base.EventProvider {
				/**
				 * Provides a convenient way for placing views into the correct containers of your application.
				 * The main benefit of Targets is lazy loading: you do not have to create the views until you really need them.
				 * If you are using the mobile library, please use {@link sap.m.routing.Targets} instead of this class.
				 * @param oOptions 
				 */
				constructor(oOptions: any);
				/**
				 * Creates a target by using the given name and options. If there's already a target with the same name exists, the existing target is kept from being overwritten and an error log will be written to the development console.
				 * @param sName the name of a target
				 * @param oTarget the options of a target. The option names are the same as the ones in "oOptions.targets.anyName" of {@link constructor}.
				 * @return Targets itself for method chaining
				 */
				addTarget(sName: string, oTarget: any): Targets;
				/**
				 * Attach event-handler <code>fnFunction</code> to the 'display' event of this <code>sap.ui.core.routing.Targets</code>.<br/>
				 * @param oData The object, that should be passed along with the event-object when firing the event.
				 * @param fnFunction The function to call, when the event occurs. This function will be called on the
				 * oListener-instance (if present) or in a 'static way'.
				 * @param oListener Object on which to call the given function.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				attachDisplay(oData: any, fnFunction: any, oListener?: any): Targets;
				/**
				 * Destroys the targets instance and all created targets. Does not destroy the views instance passed to the constructor. It has to be destroyed separately.
				 * @return this for chaining.
				 */
				destroy(): Targets;
				/**
				 * Destructor method for objects
				 * @note Overload from base type sap.ui.base.Object
				 */
				destroy();
				/**
				 * Detach event-handler <code>fnFunction</code> from the 'display' event of this <code>sap.ui.core.routing.Targets</code>.<br/>
				 * 
				 * The passed function and listener object must match the ones previously used for event registration.
				 * @param fnFunction The function to call, when the event occurs.
				 * @param oListener Object on which the given function had to be called.
				 * @return <code>this</code> to allow method chaining
				 */
				detachDisplay(fnFunction: any, oListener: any): Targets;
				/**
				 * Creates a view and puts it in an aggregation of the specified control.
				 * @param vTargets the key of the target as specified in the {@link #constructor}. To display multiple targets you may also pass an array of keys.
				 * @param vData an object that will be passed to the display event in the data property. If the target has parents, the data will also be passed to them.(optional)
				 * @return this pointer for chaining
				 */
				display(vTargets: string|string[], vData?: any): Targets;
				/**
				 * Creates a new subclass of class sap.ui.core.routing.Targets with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Fire event created to attached listeners.
				 * @param mArguments the arguments to pass along with the event.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				fireDisplay(mArguments?: any): Targets;
				/**
				 * Returns a target by its name (if you pass myTarget: { view: "myView" }) in the config myTarget is the name.
				 * @param vName the name of a single target or the name of multiple targets
				 * @return The target with the coresponding name or undefined. If an array way passed as name this will return an array with all found targets. Non existing targets will not be returned but will log an error.
				 */
				getTarget(vName: string|string[]): Target|any|Target[];
				/**
				 * Returns the views instance passed to the constructor
				 * @return the views instance
				 */
				getViews(): Views;
			}
		
			class Views extends sap.ui.base.EventProvider {
				/**
				 * Instantiates a view repository that creates and caches views. If it is destroyed, all the Views it created are destroyed.
				 * Usually you do not have to create instances of this class, it is used by the {@link sap.ui.core.routing.Router}.
				 * If you are using {@link sap.ui.core.routing.Targets} without using a {@link sap.ui.core.UIComponent} you have to create an instance of this class.
				 * They will create an instance on their own, or if they are used with a {@link sap.ui.core.UIComponent} they will share the same instance of Views.
				 * @param oOptions 
				 */
				constructor(oOptions: any);
				/**
				 * Attach event-handler <code>fnFunction</code> to the 'created' event of this <code>sap.ui.core.routing.Views</code>.<br/>
				 * @param oData The object, that should be passed along with the event-object when firing the event.
				 * @param fnFunction The function to call, when the event occurs. This function will be called on the
				 * oListener-instance (if present) or in a 'static way'.
				 * @param oListener Object on which to call the given function.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				attachCreated(oData: any, fnFunction: any, oListener?: any): Views;
				/**
				 * Detach event-handler <code>fnFunction</code> from the 'created' event of this <code>sap.ui.core.routing.Views</code>.<br/>
				 * 
				 * The passed function and listener object must match the ones previously used for event registration.
				 * @param fnFunction The function to call, when the event occurs.
				 * @param oListener Object on which the given function had to be called.
				 * @return <code>this</code> to allow method chaining
				 */
				detachCreated(fnFunction: any, oListener: any): Views;
				/**
				 * Creates a new subclass of class sap.ui.core.routing.Views with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Fire event created to attached listeners.
				 * @param mArguments the arguments to pass along with the event.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				fireCreated(mArguments?: any): Views;
			}
		}
	
		class ScrollBar extends Control {
			/**
			 * Constructor for a new ScrollBar.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.core.ScrollBarMetadata);
			/**
			 * Constructor for a new ScrollBar.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>scroll</code> event of this <code>sap.ui.core.ScrollBar</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.core.ScrollBar</code> itself.
			 * 
			 * Scroll event.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.core.ScrollBar</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachScroll(oData: any, fnFunction: any, oListener?: any): ScrollBar;
			/**
			 * Binds the mouse wheel scroll event of the control that has the scrollbar to the scrollbar itself.
			 * @param oOwnerDomRef Dom ref of the control that uses the scrollbar
			 */
			bind(oOwnerDomRef: string);
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>scroll</code> event of this <code>sap.ui.core.ScrollBar</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachScroll(fnFunction: any, oListener: any): ScrollBar;
			/**
			 * Creates a new subclass of class sap.ui.core.ScrollBar with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Fires event <code>scroll</code> to attached listeners.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>action</code> of type <code>sap.ui.core.ScrollBarAction</code>Actions are: Click on track, button, drag of thumb, or mouse wheel click.</li>
			 * <li><code>forward</code> of type <code>boolean</code>Direction of scrolling: back (up) or forward (down).</li>
			 * <li><code>newScrollPos</code> of type <code>int</code>Current Scroll position either in pixels or in steps.</li>
			 * <li><code>oldScrollPos</code> of type <code>int</code>Old Scroll position - can be in pixels or in steps.</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireScroll(mArguments?: any): ScrollBar;
			/**
			 * Gets current value of property <code>contentSize</code>.
			 * 
			 * Size of the scrollable content (in pixels).
			 * @return Value of property <code>contentSize</code>
			 */
			getContentSize(): CSSSize;
			/**
			 * Gets current value of property <code>scrollPosition</code>.
			 * 
			 * Scroll position in steps or pixels.
			 * @return Value of property <code>scrollPosition</code>
			 */
			getScrollPosition(): number;
			/**
			 * Gets current value of property <code>size</code>.
			 * 
			 * Size of the Scrollbar (in pixels).
			 * @return Value of property <code>size</code>
			 */
			getSize(): CSSSize;
			/**
			 * Gets current value of property <code>steps</code>.
			 * 
			 * Number of steps to scroll. Used if the size of the content is not known as the data is loaded dynamically.
			 * @return Value of property <code>steps</code>
			 */
			getSteps(): number;
			/**
			 * Gets current value of property <code>vertical</code>.
			 * 
			 * Orientation. Defines if the Scrollbar is vertical or horizontal.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>vertical</code>
			 */
			getVertical(): boolean;
			/**
			 * Page Down is used to scroll one page forward.
			 */
			pageDown();
			/**
			 * Page Up is used to scroll one page back.
			 */
			pageUp();
			/**
			 * Sets a new value for property <code>contentSize</code>.
			 * 
			 * Size of the scrollable content (in pixels).
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sContentSize New value for property <code>contentSize</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setContentSize(sContentSize: CSSSize): ScrollBar;
			/**
			 * Sets a new value for property <code>scrollPosition</code>.
			 * 
			 * Scroll position in steps or pixels.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param iScrollPosition New value for property <code>scrollPosition</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setScrollPosition(iScrollPosition: number): ScrollBar;
			/**
			 * Sets a new value for property <code>size</code>.
			 * 
			 * Size of the Scrollbar (in pixels).
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sSize New value for property <code>size</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSize(sSize: CSSSize): ScrollBar;
			/**
			 * Sets a new value for property <code>steps</code>.
			 * 
			 * Number of steps to scroll. Used if the size of the content is not known as the data is loaded dynamically.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param iSteps New value for property <code>steps</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSteps(iSteps: number): ScrollBar;
			/**
			 * Sets a new value for property <code>vertical</code>.
			 * 
			 * Orientation. Defines if the Scrollbar is vertical or horizontal.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bVertical New value for property <code>vertical</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setVertical(bVertical: boolean): ScrollBar;
			/**
			 * Unbinds the mouse wheel scroll event of the control that has the scrollbar
			 * @param oOwnerDomRef Dom ref of the Control that uses the scrollbar
			 */
			unbind(oOwnerDomRef: string);
		}
	
		class ScrollBarAction {
			/**
			 * Scrolling done by dragging the scroll bar's paint thumb
			 */
			static Drag: string;
			/**
			 * Scrolling done by mouse wheel
			 */
			static MouseWheel: string;
			/**
			 * Range scrolling caused by clicking track area or using page up or page down key.
			 */
			static Page: string;
			/**
			 * Single step scrolling caused by clicking an arrow button or arrow key.
			 */
			static Step: string;
		}
	
		class Scrolling {
			/**
			 * A scroll bar is shown if the content requires more space than the given space (rectangle) provides.
			 */
			static Auto: string;
			/**
			 * No scroll bar is shown, and the content stays in the given rectangle.
			 */
			static Hidden: string;
			/**
			 * No scroll bar provided even if the content is larger than the available space.
			 */
			static None: string;
			/**
			 * A scroll bar is always shown even if the space is large enough for the current content.
			 */
			static Scroll: string;
		}
	
		namespace search {
		
			class OpenSearchProvider extends SearchProvider {
				/**
				 * Constructor for a new search/OpenSearchProvider.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: sap.ui.core.search.OpenSearchProviderMetadata);
				/**
				 * Constructor for a new search/OpenSearchProvider.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @note Any overloads to support not documented metadata
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Creates a new subclass of class sap.ui.core.search.OpenSearchProvider with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.search.SearchProvider.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Gets current value of property <code>suggestType</code>.
				 * 
				 * The type of data which is provided by the given suggestUrl: either 'json' or 'xml'.
				 * 
				 * Default value is <code>json</code>.
				 * @return Value of property <code>suggestType</code>
				 */
				getSuggestType(): string;
				/**
				 * Gets current value of property <code>suggestUrl</code>.
				 * 
				 * The URL for suggestions of the search provider. As placeholder for the concrete search queries '{searchTerms}' must be used. For cross domain requests maybe a proxy must be used.
				 * @return Value of property <code>suggestUrl</code>
				 */
				getSuggestUrl(): sap.ui.core.URI;
				/**
				 * Sets a new value for property <code>suggestType</code>.
				 * 
				 * The type of data which is provided by the given suggestUrl: either 'json' or 'xml'.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>json</code>.
				 * @param sSuggestType New value for property <code>suggestType</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setSuggestType(sSuggestType: string): OpenSearchProvider;
				/**
				 * Sets a new value for property <code>suggestUrl</code>.
				 * 
				 * The URL for suggestions of the search provider. As placeholder for the concrete search queries '{searchTerms}' must be used. For cross domain requests maybe a proxy must be used.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sSuggestUrl New value for property <code>suggestUrl</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setSuggestUrl(sSuggestUrl: sap.ui.core.URI): OpenSearchProvider;
				/**
				 * Call this function to get suggest values from the search provider.
				 * The given callback function is called with the suggest value (type 'string', 1st parameter)
				 * and an array of the suggestions (type '[string]', 2nd parameter).
				 * @param sValue The value for which suggestions are requested.
				 * @param fCallback The callback function which is called when the suggestions are available.
				 */
				suggest(sValue: string, fCallback: any);
				/**
				 * Call this function to get suggest values from the search provider.
				 * The given callback function is called with the suggest value (type 'string', 1st parameter)
				 * and an array of the suggestions (type '[string]', 2nd parameter).
				 * @note Overload from base type sap.ui.core.search.SearchProvider
				 * @param sValue The value for which suggestions are requested.
				 * @param fnCallback The callback function which is called when the suggestions are available.
				 */
				suggest(sValue: string, fnCallback: any);
			}
		
			class SearchProvider extends sap.ui.core.Element {
				/**
				 * Constructor for a new search/SearchProvider.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: sap.ui.core.search.SearchProviderMetadata);
				/**
				 * Constructor for a new search/SearchProvider.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @note Any overloads to support not documented metadata
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Creates a new subclass of class sap.ui.core.search.SearchProvider with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Gets current value of property <code>icon</code>.
				 * 
				 * Icon of the Search Provider
				 * @return Value of property <code>icon</code>
				 */
				getIcon(): string;
				/**
				 * Sets a new value for property <code>icon</code>.
				 * 
				 * Icon of the Search Provider
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sIcon New value for property <code>icon</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setIcon(sIcon: string): SearchProvider;
				/**
				 * Call this function to get suggest values from the search provider.
				 * The given callback function is called with the suggest value (type 'string', 1st parameter)
				 * and an array of the suggestions (type '[string]', 2nd parameter).
				 * @param sValue The value for which suggestions are requested.
				 * @param fnCallback The callback function which is called when the suggestions are available.
				 */
				suggest(sValue: string, fnCallback: any);
			}
		
			interface OpenSearchProviderMetadata extends sap.ui.core.search.SearchProviderMetadata {
				/**
				 * The URL for suggestions of the search provider. As placeholder for the concrete search queries '{searchTerms}' must be used. For cross domain requests maybe a proxy must be used.
				 */
				suggestUrl?: sap.ui.core.URI;
				/**
				 * The type of data which is provided by the given suggestUrl: either 'json' or 'xml'.
				 * @default json
				 */
				suggestType?: string;
			}
		
			interface SearchProviderMetadata {
				/**
				 * Icon of the Search Provider
				 */
				icon?: string;
			}
		}
	
		class SeparatorItem extends Item {
			/**
			 * Constructor for a new SeparatorItem.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.ui.core.SeparatorItem with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Item.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		}
	
		namespace service {
		
			class Service extends sap.ui.base.Object {
				/**
				 * Lifecycle method to destroy the service instance.
				 * 
				 * This function is not available on the service interface.
				 */
				destroy();
				/**
				 * Cleans up the service instance before destruction.
				 * 
				 * Applications must not call this hook method directly, it is called by the
				 * framework when the service is {@link #destroy destroyed}.
				 * 
				 * Subclasses of service should override this hook to implement any necessary
				 * clean-up.
				 */
				exit();
				/**
				 * Creates a new subclass of class sap.ui.core.service.Service with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Returns the context of the service:
				 * <pre>
				 * {
				 *   "scopeObject": oComponent, // the Component instance
				 *   "scopeType": "component"   // the stereotype of the scopeObject
				 * }
				 * </pre>
				 * 
				 * This function is not available on the service interface.
				 * @return the context of the service
				 */
				getContext(): any;
				/**
				 * Returns the public interface of the service. By default, this filters the
				 * internal functions like <code>getInterface</code>, <code>getContext</code>
				 * and all other functions starting with "_". Additionally the lifecycle
				 * functions <code>init</code>, <code>exit</code> and <code>destroy</code>
				 * will be filtered for the service interface. This function can be
				 * overridden in order to self-create a service interface.
				 * 
				 * This function is not available on the service interface.
				 * @return the public interface of the service
				 */
				getInterface(): any;
				/**
				 * Returns the public interface of the object.
				 * @note Overload from base type sap.ui.base.Object
				 * @return the public interface of the object
				 */
				getInterface(): sap.ui.base.Interface;
				/**
				 * Initializes the service instance after creation.
				 * 
				 * Applications must not call this hook method directly, it is called by the
				 * framework while the constructor of a service is executed.
				 * 
				 * Subclasses of service should override this hook to implement any necessary
				 * initialization.
				 */
				init();
			}
		
			class ServiceFactory extends sap.ui.base.Object {
				/**
				 * Creates a new instance of a service. When used as a generic service factory
				 * by providing a service constructor function it will create a new service
				 * instance otherwise the function will fail. For custom service factories
				 * this function has to be overridden and should return a <code>Promise</code>.
				 * @param oServiceContext Context for which the service is created
				 * @return Promise which resolves with the new Service instance.
				 */
				createInstance(oServiceContext: any): any;
				/**
				 * Lifecycle method to destroy the service factory instance.
				 */
				destroy();
				/**
				 * Creates a new subclass of class sap.ui.core.service.ServiceFactory with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			}
		}
	
		class TextAlign {
			/**
			 * Locale-specific positioning at the beginning of the line.
			 */
			static Begin: string;
			/**
			 * Centered text alignment.
			 */
			static Center: string;
			/**
			 * Locale-specific positioning at the end of the line.
			 */
			static End: string;
			/**
			 * Sets no text align, so the browser default is used.
			 */
			static Initial: string;
			/**
			 * Hard option for left alignment.
			 */
			static Left: string;
			/**
			 * Hard option for right alignment.
			 */
			static Right: string;
		}
	
		class TextDirection {
			/**
			 * Inherits the direction from its parent control/container.
			 */
			static Inherit: string;
			/**
			 * Specifies left-to-right text direction.
			 */
			static LTR: string;
			/**
			 * Specifies right-to-left text direction.
			 */
			static RTL: string;
		}
	
		class Title extends Element {
			/**
			 * Constructor for a new Title.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.core.TitleMetadata);
			/**
			 * Constructor for a new Title.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.ui.core.Title with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets current value of property <code>emphasized</code>.
			 * 
			 * If set the title is displayed emphasized.
			 * This feature is nor supported by all controls using the Title.control.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>emphasized</code>
			 */
			getEmphasized(): boolean;
			/**
			 * Gets current value of property <code>icon</code>.
			 * 
			 * Defines the URL for icon display
			 * @return Value of property <code>icon</code>
			 */
			getIcon(): URI;
			/**
			 * Gets current value of property <code>level</code>.
			 * 
			 * Defines the level of the title. If set to auto the level of the title is chosen by the control rendering the title.
			 * 
			 * Currently not all controls using the Title.control supporting this property.
			 * 
			 * Default value is <code>Auto</code>.
			 * @return Value of property <code>level</code>
			 */
			getLevel(): TitleLevel;
			/**
			 * Gets current value of property <code>text</code>.
			 * 
			 * Defines the title text
			 * @return Value of property <code>text</code>
			 */
			getText(): string;
			/**
			 * Sets a new value for property <code>emphasized</code>.
			 * 
			 * If set the title is displayed emphasized.
			 * This feature is nor supported by all controls using the Title.control.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bEmphasized New value for property <code>emphasized</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setEmphasized(bEmphasized: boolean): Title;
			/**
			 * Sets a new value for property <code>icon</code>.
			 * 
			 * Defines the URL for icon display
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sIcon New value for property <code>icon</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setIcon(sIcon: URI): Title;
			/**
			 * Sets a new value for property <code>level</code>.
			 * 
			 * Defines the level of the title. If set to auto the level of the title is chosen by the control rendering the title.
			 * 
			 * Currently not all controls using the Title.control supporting this property.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>Auto</code>.
			 * @param sLevel New value for property <code>level</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setLevel(sLevel: TitleLevel): Title;
			/**
			 * Sets a new value for property <code>text</code>.
			 * 
			 * Defines the title text
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sText New value for property <code>text</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setText(sText: string): Title;
		}
	
		class TitleLevel {
			/**
			 * The level of the title is choosen by the control rendering the title.
			 */
			static Auto: string;
			/**
			 * The Title is of level 1.
			 */
			static H1: string;
			/**
			 * The Title is of level 2
			 */
			static H2: string;
			/**
			 * The Title is of level 3
			 */
			static H3: string;
			/**
			 * The Title is of level 4
			 */
			static H4: string;
			/**
			 * The Title is of level 5
			 */
			static H5: string;
			/**
			 * The Title is of level 6
			 */
			static H6: string;
		}
	
		namespace tmpl {
		
			class DOMAttribute extends sap.ui.core.Element {
				/**
				 * Constructor for a new tmpl/DOMAttribute.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: sap.ui.core.tmpl.DOMAttributeMetadata);
				/**
				 * Constructor for a new tmpl/DOMAttribute.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @note Any overloads to support not documented metadata
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Creates a new subclass of class sap.ui.core.tmpl.DOMAttribute with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Gets current value of property <code>name</code>.
				 * 
				 * Name of the DOM attribute
				 * @return Value of property <code>name</code>
				 */
				getName(): string;
				/**
				 * Gets current value of property <code>value</code>.
				 * 
				 * Value of the DOM attribute
				 * @return Value of property <code>value</code>
				 */
				getValue(): string;
				/**
				 * Sets a new value for property <code>name</code>.
				 * 
				 * Name of the DOM attribute
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sName New value for property <code>name</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setName(sName: string): DOMAttribute;
				/**
				 * Sets a new value for property <code>value</code>.
				 * 
				 * Value of the DOM attribute
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sValue New value for property <code>value</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setValue(sValue: string): DOMAttribute;
			}
		
			class DOMElement extends sap.ui.core.Control {
				/**
				 * Constructor for a new tmpl/DOMElement.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: sap.ui.core.tmpl.DOMElementMetadata);
				/**
				 * Constructor for a new tmpl/DOMElement.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @note Any overloads to support not documented metadata
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Adds some attribute to the aggregation <code>attributes</code>.
				 * @param oAttribute the attribute to add; if empty, nothing is inserted
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				addAttribute(oAttribute: DOMAttribute): DOMElement;
				/**
				 * Adds some element to the aggregation <code>elements</code>.
				 * @param oElement the element to add; if empty, nothing is inserted
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				addElement(oElement: DOMElement): DOMElement;
				/**
				 * Returns the value of a DOM attribute if available or undefined if the DOM attribute is not available when using this method with the parameter name only.
				 * When using the method with the parameter name and value the method acts as a setter and sets the value of a DOM attribute.
				 * In this case the return value is the reference to this DOM element to support method chaining. If you pass null as value of the attribute the attribute will be removed.
				 * @param sName The name of the DOM attribute.
				 * @param sValue The value of the DOM attribute. If the value is undefined the DOM attribute will be removed.
				 * @return value of attribute or <code>this</code> when called as a setter
				 */
				attr(sName: string, sValue: string): any;
				/**
				 * Destroys all the attributes in the aggregation <code>attributes</code>.
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				destroyAttributes(): DOMElement;
				/**
				 * Destroys all the elements in the aggregation <code>elements</code>.
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				destroyElements(): DOMElement;
				/**
				 * Creates a new subclass of class sap.ui.core.tmpl.DOMElement with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Gets content of aggregation <code>attributes</code>.
				 * 
				 * DOM attributes which are rendered as part of the DOM element and bindable
				 * @return 
				 */
				getAttributes(): DOMAttribute[];
				/**
				 * Gets content of aggregation <code>elements</code>.
				 * 
				 * Nested DOM elements to support nested bindable structures
				 * @return 
				 */
				getElements(): DOMElement[];
				/**
				 * Gets current value of property <code>tag</code>.
				 * 
				 * The HTML-tag of the DOM element which contains the text
				 * 
				 * Default value is <code>span</code>.
				 * @return Value of property <code>tag</code>
				 */
				getTag(): string;
				/**
				 * Gets current value of property <code>text</code>.
				 * 
				 * The text content of the DOM element
				 * @return Value of property <code>text</code>
				 */
				getText(): string;
				/**
				 * Checks for the provided <code>sap.ui.core.tmpl.DOMAttribute</code> in the aggregation <code>attributes</code>.
				 * and returns its index if found or -1 otherwise.
				 * @param oAttribute The attribute whose index is looked for
				 * @return The index of the provided control in the aggregation if found, or -1 otherwise
				 */
				indexOfAttribute(oAttribute: DOMAttribute): number;
				/**
				 * Checks for the provided <code>sap.ui.core.tmpl.DOMElement</code> in the aggregation <code>elements</code>.
				 * and returns its index if found or -1 otherwise.
				 * @param oElement The element whose index is looked for
				 * @return The index of the provided control in the aggregation if found, or -1 otherwise
				 */
				indexOfElement(oElement: DOMElement): number;
				/**
				 * Inserts a attribute into the aggregation <code>attributes</code>.
				 * @param oAttribute the attribute to insert; if empty, nothing is inserted
				 * @param iIndex the <code>0</code>-based index the attribute should be inserted at; for
				 *              a negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value
				 *              greater than the current size of the aggregation, the attribute is inserted at
				 *              the last position
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				insertAttribute(oAttribute: DOMAttribute, iIndex: number): DOMElement;
				/**
				 * Inserts a element into the aggregation <code>elements</code>.
				 * @param oElement the element to insert; if empty, nothing is inserted
				 * @param iIndex the <code>0</code>-based index the element should be inserted at; for
				 *              a negative value of <code>iIndex</code>, the element is inserted at position 0; for a value
				 *              greater than the current size of the aggregation, the element is inserted at
				 *              the last position
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				insertElement(oElement: DOMElement, iIndex: number): DOMElement;
				/**
				 * Removes all the controls from the aggregation <code>attributes</code>.
				 * 
				 * Additionally, it unregisters them from the hosting UIArea.
				 * @return An array of the removed elements (might be empty)
				 */
				removeAllAttributes(): DOMAttribute[];
				/**
				 * Removes all the controls from the aggregation <code>elements</code>.
				 * 
				 * Additionally, it unregisters them from the hosting UIArea.
				 * @return An array of the removed elements (might be empty)
				 */
				removeAllElements(): DOMElement[];
				/**
				 * Removes the DOM attribute for the given name and returns the reference to this DOM element to support method chaining.
				 * @param sName The name of the DOM attribute.
				 * @return 
				 */
				removeAttr(sName: string): DOMElement;
				/**
				 * Removes a attribute from the aggregation <code>attributes</code>.
				 * @param vAttribute The attribute to remove or its index or id
				 * @return The removed attribute or <code>null</code>
				 */
				removeAttribute(vAttribute: number|string|DOMAttribute): DOMAttribute;
				/**
				 * Removes a element from the aggregation <code>elements</code>.
				 * @param vElement The element to remove or its index or id
				 * @return The removed element or <code>null</code>
				 */
				removeElement(vElement: number|string|DOMElement): DOMElement;
				/**
				 * Sets a new value for property <code>tag</code>.
				 * 
				 * The HTML-tag of the DOM element which contains the text
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>span</code>.
				 * @param sTag New value for property <code>tag</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setTag(sTag: string): DOMElement;
				/**
				 * Sets a new value for property <code>text</code>.
				 * 
				 * The text content of the DOM element
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sText New value for property <code>text</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setText(sText: string): DOMElement;
			}
		
			class HandlebarsTemplate extends Template {
				/**
				 * Creates and initializes a new handlebars template with the given <code>sId</code>
				 * and settings.
				 * 
				 * The set of allowed entries in the <code>mSettings</code> object depends on
				 * the concrete subclass and is described there.
				 * @param sId optional id for the new template; generated automatically if
				 *            no non-empty id is given Note: this can be omitted, no matter
				 *            whether <code>mSettings</code> will be given or not!(optional)
				 * @param mSettings optional map/JSON-object with initial settings for the
				 *            new component instance(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Creates a new subclass of class sap.ui.core.tmpl.HandlebarsTemplate with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.tmpl.Template.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			}
		
			class Template extends sap.ui.base.ManagedObject {
				/**
				 * Creates and initializes a new template with the given <code>sId</code> and
				 * settings.
				 * 
				 * The set of allowed entries in the <code>mSettings</code> object depends on
				 * the concrete subclass and is described there.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param sId optional id for the new template; generated automatically if
				 *            no non-empty id is given Note: this can be omitted, no matter
				 *            whether <code>mSettings</code> will be given or not!(optional)
				 * @param mSettings optional map/JSON-object with initial settings for the
				 *            new component instance(optional)
				 */
				constructor(sId?: string, mSettings?: sap.ui.core.tmpl.TemplateMetadata);
				/**
				 * Creates and initializes a new template with the given <code>sId</code> and
				 * settings.
				 * 
				 * The set of allowed entries in the <code>mSettings</code> object depends on
				 * the concrete subclass and is described there.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @note Any overloads to support not documented metadata
				 * @param sId optional id for the new template; generated automatically if
				 *            no non-empty id is given Note: this can be omitted, no matter
				 *            whether <code>mSettings</code> will be given or not!(optional)
				 * @param mSettings optional map/JSON-object with initial settings for the
				 *            new component instance(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Returns the registered template for the given id, if any.
				 * @param sId 
				 * @return the template for the given id
				 */
				byId(sId: string): Template;
				/**
				 * Creates an anonymous TemplateControl for the Template.
				 * @param sId the control ID
				 * @param oContext the context for the renderer/templating
				 * @param oView 
				 * @return the created control instance
				 */
				createControl(sId: string, oContext: any, oView: sap.ui.core.mvc.View): TemplateControl;
				/**
				 * Declares a new control based on this template and returns the created
				 * class / constructor function. The class is based on the information coming
				 * from the abstract functions <code>createMetadata</code> and
				 * <code>createRenderer</code>.
				 * @param sControl the fully qualified name of the control
				 * @return the created class / constructor function
				 */
				declareControl(sControl: string): any;
				/**
				 * Creates a new subclass of class sap.ui.core.tmpl.Template with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Gets current value of property <code>content</code>.
				 * 
				 * The Template definition as a String.
				 * @return Value of property <code>content</code>
				 */
				getContent(): string;
				/**
				 * 
				 */
				getInterface();
				/**
				 * Returns the public interface of the object.
				 * @note Overload from base type sap.ui.base.Object
				 * @return the public interface of the object
				 */
				getInterface(): sap.ui.base.Interface;
				/**
				 * parses the given path and extracts the model and path
				 * @param sPath the path
				 * @return the model and the path
				 */
				parsePath(sPath: string): any;
				/**
				 * Creates an anonymous TemplateControl for the Template and places the control
				 * into the specified DOM element.
				 * @param oRef the id or the DOM reference where to render the template
				 * @param oContext The context to use to evaluate the Template. It will be applied as value for the context property of the created control.
				 * @param vPosition Describes the position where the control should be put into the container
				 * @param bInline 
				 * @return the created control instance
				 */
				placeAt(oRef: string|any, oContext: any, vPosition: string|number, bInline: boolean): TemplateControl;
				/**
				 * Sets a new value for property <code>content</code>.
				 * 
				 * The Template definition as a String.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sContent New value for property <code>content</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setContent(sContent: string): Template;
			}
		
			class TemplateControl extends sap.ui.core.Control {
				/**
				 * Constructor for a new tmpl/TemplateControl.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: sap.ui.core.tmpl.TemplateControlMetadata);
				/**
				 * Constructor for a new tmpl/TemplateControl.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @note Any overloads to support not documented metadata
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Attaches event handler <code>fnFunction</code> to the <code>afterRendering</code> event of this <code>sap.ui.core.tmpl.TemplateControl</code>.
				 * 
				 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
				 * otherwise it will be bound to this <code>sap.ui.core.tmpl.TemplateControl</code> itself.
				 * 
				 * Fired when the Template Control has been (re-)rendered and its HTML is present in the DOM.
				 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
				 * @param fnFunction The function to be called when the event occurs
				 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.core.tmpl.TemplateControl</code> itself(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				attachAfterRendering(oData: any, fnFunction: any, oListener?: any): TemplateControl;
				/**
				 * Attaches event handler <code>fnFunction</code> to the <code>beforeRendering</code> event of this <code>sap.ui.core.tmpl.TemplateControl</code>.
				 * 
				 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
				 * otherwise it will be bound to this <code>sap.ui.core.tmpl.TemplateControl</code> itself.
				 * 
				 * Fired before this Template Control is re-rendered. Use to unbind event handlers from HTML elements etc.
				 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
				 * @param fnFunction The function to be called when the event occurs
				 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.core.tmpl.TemplateControl</code> itself(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				attachBeforeRendering(oData: any, fnFunction: any, oListener?: any): TemplateControl;
				/**
				 * Creates a pseudo binding for a aggregation to get notified once the property
				 * changes to invalidate the control and trigger a re-rendering.
				 * @param sPath the binding path
				 * @return the value of the path
				 */
				bindList(sPath: string): any;
				/**
				 * Creates a pseudo binding for a property to get notified once the property
				 * changes to invalidate the control and trigger a re-rendering.
				 * @param sPath the binding path
				 * @return the value of the path
				 */
				bindProp(sPath: string): any;
				/**
				 * compiles (creates and registers) a new control
				 * @param mSettings the settings for the new control
				 * @param sParentPath the parent path for the control
				 * @param bDoNotAdd if true, then the control will not be
				 *          added to the _controls aggregation
				 * @param oView 
				 * @return new control instance
				 */
				createControl(mSettings: any, sParentPath: string, bDoNotAdd: boolean, oView: sap.ui.core.mvc.View): sap.ui.core.Control;
				/**
				 * compiles (creates and registers) a new DOM element
				 * @param mSettings the settings for the new DOM element
				 * @param sParentPath the parent path for the DOM element(optional)
				 * @param bDoNotAdd if true, then the control will not be
				 *          added to the _controls aggregation(optional)
				 * @return new DOM element instance
				 */
				createDOMElement(mSettings: any, sParentPath?: string, bDoNotAdd?: boolean): sap.ui.core.Control;
				/**
				 * Detaches event handler <code>fnFunction</code> from the <code>afterRendering</code> event of this <code>sap.ui.core.tmpl.TemplateControl</code>.
				 * 
				 * The passed function and listener object must match the ones used for event registration.
				 * @param fnFunction The function to be called, when the event occurs
				 * @param oListener Context object on which the given function had to be called
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				detachAfterRendering(fnFunction: any, oListener: any): TemplateControl;
				/**
				 * Detaches event handler <code>fnFunction</code> from the <code>beforeRendering</code> event of this <code>sap.ui.core.tmpl.TemplateControl</code>.
				 * 
				 * The passed function and listener object must match the ones used for event registration.
				 * @param fnFunction The function to be called, when the event occurs
				 * @param oListener Context object on which the given function had to be called
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				detachBeforeRendering(fnFunction: any, oListener: any): TemplateControl;
				/**
				 * Creates a new subclass of class sap.ui.core.tmpl.TemplateControl with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Fires event <code>afterRendering</code> to attached listeners.
				 * @param mArguments The arguments to pass along with the event(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				fireAfterRendering(mArguments?: any): TemplateControl;
				/**
				 * Fires event <code>beforeRendering</code> to attached listeners.
				 * @param mArguments The arguments to pass along with the event(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				fireBeforeRendering(mArguments?: any): TemplateControl;
				/**
				 * Gets current value of property <code>context</code>.
				 * 
				 * The context is a data object. It can be used for default template expressions. A change of the context object leads to a re-rendering whereas a change of a nested property of the context object doesn't. By default the context is an empty object.
				 * @return Value of property <code>context</code>
				 */
				getContext(): any;
				/**
				 * ID of the element which is the current target of the association <code>template</code>, or <code>null</code>.
				 * @return 
				 */
				getTemplate(): sap.ui.core.ID;
				/**
				 * Returns the instance specific renderer for an anonymous template control.
				 * @return the instance specific renderer function
				 */
				getTemplateRenderer(): any;
				/**
				 * checks whether the control is inline or not
				 * @return flag, whether to control is inline or not
				 */
				isInline(): boolean;
				/**
				 * Sets a new value for property <code>context</code>.
				 * 
				 * The context is a data object. It can be used for default template expressions. A change of the context object leads to a re-rendering whereas a change of a nested property of the context object doesn't. By default the context is an empty object.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param oContext New value for property <code>context</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setContext(oContext: any): TemplateControl;
				/**
				 * Sets the associated <code>template</code>.
				 * @param oTemplate ID of an element which becomes the new target of this template association; alternatively, an element instance may be given
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setTemplate(oTemplate: sap.ui.core.ID|Template): TemplateControl;
				/**
				 * Sets the instance specific renderer for an anonymous template control.
				 * @param fnRenderer the instance specific renderer function
				 * @return <code>this</code> to allow method chaining
				 */
				setTemplateRenderer(fnRenderer: any): Template;
			}
		
			interface DOMAttributeMetadata {
				/**
				 * Name of the DOM attribute
				 */
				name?: string;
				/**
				 * Value of the DOM attribute
				 */
				value?: string;
			}
		
			interface DOMElementMetadata extends sap.ui.core.ControlMetadata {
				/**
				 * The text content of the DOM element
				 */
				text?: string;
				/**
				 * The HTML-tag of the DOM element which contains the text
				 * @default span
				 */
				tag?: string;
			}
		
			interface TemplateMetadata {
				/**
				 * The Template definition as a String.
				 */
				content?: string;
			}
		
			interface TemplateControlMetadata extends sap.ui.core.ControlMetadata {
				/**
				 * The context is a data object. It can be used for default template expressions. A change of the context object leads to a re-rendering whereas a change of a nested property of the context object doesn't. By default the context is an empty object.
				 */
				context?: any;
			}
		}
	
		interface Toolbar {
		}
	
		class TooltipBase extends Control {
			/**
			 * Constructor for a new TooltipBase.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.core.TooltipBaseMetadata);
			/**
			 * Constructor for a new TooltipBase.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>closed</code> event of this <code>sap.ui.core.TooltipBase</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.core.TooltipBase</code> itself.
			 * 
			 * This event is fired when the Tooltip has been closed
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.core.TooltipBase</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachClosed(oData: any, fnFunction: any, oListener?: any): TooltipBase;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>closed</code> event of this <code>sap.ui.core.TooltipBase</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachClosed(fnFunction: any, oListener: any): TooltipBase;
			/**
			 * Creates a new subclass of class sap.ui.core.TooltipBase with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Fires event <code>closed</code> to attached listeners.
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireClosed(mArguments?: any): TooltipBase;
			/**
			 * Gets current value of property <code>atPosition</code>.
			 * 
			 * Optional. At position defines which position on the target control to align the positioned tooltip.
			 * 
			 * Default value is <code>begin bottom</code>.
			 * @return Value of property <code>atPosition</code>
			 */
			getAtPosition(): Dock;
			/**
			 * Gets current value of property <code>closeDelay</code>.
			 * 
			 * Closing delay of the tooltip in milliseconds
			 * 
			 * Default value is <code>100</code>.
			 * @return Value of property <code>closeDelay</code>
			 */
			getCloseDelay(): number;
			/**
			 * Gets current value of property <code>closeDuration</code>.
			 * 
			 * Optional. Close Duration in milliseconds.
			 * 
			 * Default value is <code>200</code>.
			 * @return Value of property <code>closeDuration</code>
			 */
			getCloseDuration(): number;
			/**
			 * Gets current value of property <code>collision</code>.
			 * 
			 * Optional. Collision - when the positioned element overflows the window in some direction, move it to an alternative position.
			 * 
			 * Default value is <code>flip</code>.
			 * @return Value of property <code>collision</code>
			 */
			getCollision(): Collision;
			/**
			 * Gets current value of property <code>myPosition</code>.
			 * 
			 * Optional. My position defines which position on the extended tooltip being positioned to align with the target control.
			 * 
			 * Default value is <code>begin top</code>.
			 * @return Value of property <code>myPosition</code>
			 */
			getMyPosition(): Dock;
			/**
			 * Gets current value of property <code>offset</code>.
			 * 
			 * Optional. Offset adds these left-top values to the calculated position.
			 * Example: "10 3".
			 * 
			 * Default value is <code>10 3</code>.
			 * @return Value of property <code>offset</code>
			 */
			getOffset(): string;
			/**
			 * Gets current value of property <code>openDelay</code>.
			 * 
			 * Opening delay of the tooltip in milliseconds
			 * 
			 * Default value is <code>500</code>.
			 * @return Value of property <code>openDelay</code>
			 */
			getOpenDelay(): number;
			/**
			 * Gets current value of property <code>openDuration</code>.
			 * 
			 * Optional. Open Duration in milliseconds.
			 * 
			 * Default value is <code>200</code>.
			 * @return Value of property <code>openDuration</code>
			 */
			getOpenDuration(): number;
			/**
			 * Gets current value of property <code>text</code>.
			 * 
			 * The text that is shown in the tooltip that extends the TooltipBase class, for example in RichTooltip.
			 * 
			 * Default value is <code></code>.
			 * @return Value of property <code>text</code>
			 */
			getText(): string;
			/**
			 * Sets a new value for property <code>atPosition</code>.
			 * 
			 * Optional. At position defines which position on the target control to align the positioned tooltip.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>begin bottom</code>.
			 * @param sAtPosition New value for property <code>atPosition</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setAtPosition(sAtPosition: Dock): TooltipBase;
			/**
			 * Sets a new value for property <code>closeDelay</code>.
			 * 
			 * Closing delay of the tooltip in milliseconds
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>100</code>.
			 * @param iCloseDelay New value for property <code>closeDelay</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setCloseDelay(iCloseDelay: number): TooltipBase;
			/**
			 * Sets a new value for property <code>closeDuration</code>.
			 * 
			 * Optional. Close Duration in milliseconds.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>200</code>.
			 * @param iCloseDuration New value for property <code>closeDuration</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setCloseDuration(iCloseDuration: number): TooltipBase;
			/**
			 * Sets a new value for property <code>collision</code>.
			 * 
			 * Optional. Collision - when the positioned element overflows the window in some direction, move it to an alternative position.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>flip</code>.
			 * @param sCollision New value for property <code>collision</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setCollision(sCollision: Collision): TooltipBase;
			/**
			 * Sets a new value for property <code>myPosition</code>.
			 * 
			 * Optional. My position defines which position on the extended tooltip being positioned to align with the target control.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>begin top</code>.
			 * @param sMyPosition New value for property <code>myPosition</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setMyPosition(sMyPosition: Dock): TooltipBase;
			/**
			 * Sets a new value for property <code>offset</code>.
			 * 
			 * Optional. Offset adds these left-top values to the calculated position.
			 * Example: "10 3".
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>10 3</code>.
			 * @param sOffset New value for property <code>offset</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setOffset(sOffset: string): TooltipBase;
			/**
			 * Sets a new value for property <code>openDelay</code>.
			 * 
			 * Opening delay of the tooltip in milliseconds
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>500</code>.
			 * @param iOpenDelay New value for property <code>openDelay</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setOpenDelay(iOpenDelay: number): TooltipBase;
			/**
			 * Sets a new value for property <code>openDuration</code>.
			 * 
			 * Optional. Open Duration in milliseconds.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>200</code>.
			 * @param iOpenDuration New value for property <code>openDuration</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setOpenDuration(iOpenDuration: number): TooltipBase;
			/**
			 * Sets a new value for property <code>text</code>.
			 * 
			 * The text that is shown in the tooltip that extends the TooltipBase class, for example in RichTooltip.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code></code>.
			 * @param sText New value for property <code>text</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setText(sText: string): TooltipBase;
		}
	
		class UIArea extends sap.ui.base.ManagedObject {
			/**
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param oCore internal API of the <core>Core</code> that manages this UIArea
			 * @param oRootNode reference to the Dom Node that should be 'hosting' the UI Area.(optional)
			 */
			constructor(oCore: sap.ui.core.Core, oRootNode?: any);
			/**
			 * Adds some content to the aggregation <code>content</code>.
			 * @param oContent the content to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addContent(oContent: Control): UIArea;
			/**
			 * Adds some dependent to the aggregation <code>dependents</code>.
			 * @param oDependent the dependent to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addDependent(oDependent: Control): UIArea;
			/**
			 * Destroys all the content in the aggregation <code>content</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyContent(): UIArea;
			/**
			 * Destroys all the dependents in the aggregation <code>dependents</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyDependents(): UIArea;
			/**
			 * Creates a new subclass of class sap.ui.core.UIArea with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Provide getBindingContext, as UIArea can be parent of an element.
			 * @return Always returns null.
			 */
			getBindingContext();
			/**
			 * Get the binding context of this object for the given model name.
			 * 
			 * If the object does not have a binding context set on itself and has no own Model set,
			 * it will use the first binding context defined in its parent hierarchy.
			 * 
			 * Note: to be compatible with future versions of this API, applications must not use the value <code>null</code>,
			 * the empty string <code>""</code> or the string literals <code>"null"</code> or <code>"undefined"</code> as model name.
			 * 
			 * Note: A ManagedObject inherits binding contexts from the Core only when it is a descendant of an UIArea.
			 * @note Overload from base type sap.ui.base.ManagedObject
			 * @param sModelName the name of the model or <code>undefined</code>(optional)
			 * @return oContext The binding context of this object
			 */
			getBindingContext(sModelName?: string): sap.ui.model.Context;
			/**
			 * Gets content of aggregation <code>content</code>.
			 * 
			 * Content that is displayed in the UIArea.
			 * @return 
			 */
			getContent(): Control[];
			/**
			 * Gets content of aggregation <code>dependents</code>.
			 * 
			 * Dependent objects whose lifecycle is bound to the UIarea but which are not automatically rendered by the UIArea.
			 * @return 
			 */
			getDependents(): Control[];
			/**
			 * Returns the Core's event provider as new eventing parent to enable control event bubbling to the core to ensure compatibility with the core validation events.
			 * @return the parent event provider
			 */
			getEventingParent(): sap.ui.base.EventProvider;
			/**
			 * Returns this <code>UIArea</code>'s id (as determined from provided RootNode).
			 * @return id of this UIArea
			 */
			getId(): string;
			/**
			 * Returns the content control of this <code>UIArea</code> at the specified index.
			 * If no index is given the first content control is returned.
			 * @param idx index of the control in the content of this <code>UIArea</code>
			 * @deprecated use function <code>getContent</code> instead
			 * @return the content control of this <code>UIArea</code> at the specified index.
			 */
			getRootControl(idx: number): Control;
			/**
			 * Returns the Root Node hosting this instance of <code>UIArea</code>.
			 * @return the Root Node hosting this instance of <code>UIArea</code>.
			 */
			getRootNode(): any;
			/**
			 * Returns this UI area. Needed to stop recursive calls from an element to its parent.
			 * @return this
			 */
			getUIArea(): UIArea;
			/**
			 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oContent The content whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfContent(oContent: Control): number;
			/**
			 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>dependents</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oDependent The dependent whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfDependent(oDependent: Control): number;
			/**
			 * Inserts a content into the aggregation <code>content</code>.
			 * @param oContent the content to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the content should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the content is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertContent(oContent: Control, iIndex: number): UIArea;
			/**
			 * Inserts a dependent into the aggregation <code>dependents</code>.
			 * @param oDependent the dependent to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the dependent should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the dependent is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the dependent is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertDependent(oDependent: Control, iIndex: number): UIArea;
			/**
			 * Will be used as end-point for invalidate-bubbling from controls up their hierarchy.<br/> Triggers re-rendering of
			 * the UIAreas content.
			 */
			invalidate();
			/**
			 * Checks whether the control is still valid (is in the DOM)
			 * @return True if the control is still in the active DOM
			 */
			isActive(): boolean;
			/**
			 * Returns whether rerendering is currently suppressed on this UIArea
			 * @return boolean
			 */
			isInvalidateSuppressed();
			/**
			 * Returns the locked state of the <code>sap.ui.core.UIArea</code>
			 * @return locked state
			 */
			isLocked(): boolean;
			/**
			 * Locks this instance of UIArea.
			 * 
			 * Rerendering and eventing will not be active as long as no
			 * {@link #unlock} is called.
			 */
			lock();
			/**
			 * Removes all the controls from the aggregation <code>content</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllContent(): Control[];
			/**
			 * Removes all the controls from the aggregation <code>dependents</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllDependents(): Control[];
			/**
			 * Removes a content from the aggregation <code>content</code>.
			 * @param vContent The content to remove or its index or id
			 * @return The removed content or <code>null</code>
			 */
			removeContent(vContent: number|string|Control): Control;
			/**
			 * Removes a dependent from the aggregation <code>dependents</code>.
			 * @param vDependent The dependent to remove or its index or id
			 * @return The removed dependent or <code>null</code>
			 */
			removeDependent(vDependent: number|string|Control): Control;
			/**
			 * Sets the root control to be displayed in this UIArea.
			 * 
			 * First, all old content controls (if any) will be detached from this UIArea (e.g. their parent
			 * relationship to this UIArea will be cut off). Then the parent relationship for the new
			 * content control (if not empty) will be set to this UIArea and finally, the UIArea will
			 * be marked for re-rendering.
			 * 
			 * The real re-rendering happens whenever the re-rendering is called. Either implicitly
			 * at the end of any control event or by calling sap.ui.getCore().applyChanges().
			 * @param oRootControl the Control that should be the Root for this <code>UIArea</code>.
			 * @deprecated use functions <code>removeAllContent</code> and <code>addContent</code> instead
			 */
			setRootControl(oRootControl: sap.ui.base.Interface|Control);
			/**
			 * Allows setting the Root Node hosting this instance of <code>UIArea</code>.<br/> The Dom Ref must have an Id that
			 * will be used as Id for this instance of <code>UIArea</code>.
			 * @param oRootNode the hosting Dom Ref for this instance of <code>UIArea</code>.
			 */
			setRootNode(oRootNode: any);
			/**
			 * Un-Locks this instance of UIArea.
			 * 
			 * Rerendering and eventing will now be enabled again.
			 */
			unlock();
		}
	
		class UIComponent extends Component {
			/**
			 * Base Class for UIComponent.
			 * 
			 * If you are extending an UIComponent make sure you read the {@link #.extend} documentation since the metadata is special.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId Optional ID for the new control; generated automatically if
			 *            no non-empty ID is given Note: this can be omitted, no matter
			 *            whether <code>mSettings</code> will be given or not!(optional)
			 * @param mSettings optional map/JSON-object with initial settings for the
			 *            new component instance(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Returns an element by its ID in the context of the component.
			 * @param sId Component local ID of the element
			 * @return element by its ID or <code>undefined</code>
			 */
			byId(sId: string): Element;
			/**
			 * The method to create the content (UI Control Tree) of the Component.
			 * This method has to be overwritten in the implementation of the component
			 * if the root view is not declared in the component metadata.
			 */
			createContent();
			/**
			 * Convert the given component local element ID to a globally unique ID
			 * by prefixing it with the component ID.
			 * @param sId Component local ID of the element
			 * @return prefixed id
			 */
			createId(sId: string): string;
			/**
			 * Creates a new subclass of class sap.ui.core.UIComponent with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Component.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * A method to be implemented by UIComponents, returning the flag whether to prefix
			 * the IDs of controls automatically or not if the controls are created inside
			 * the {@link sap.ui.core.UIComponent#createContent} function. By default this
			 * feature is not activated.
			 * 
			 * You can overwrite this function and return <code>true</code> to activate the automatic
			 * prefixing. In addition the default behavior can be configured in the manifest
			 * by specifying the entry <code>sap.ui5/autoPrefixId</code>.
			 * @return true, if the Controls IDs should be prefixed automatically
			 */
			getAutoPrefixId(): boolean;
			/**
			 * 
			 */
			getEventingParent();
			/**
			 * Returns the parent in the eventing hierarchy of this object.
			 * 
			 * Per default this returns null, but if eventing is used in objects, which are hierarchically
			 * structured, this can be overwritten to make the object hierarchy visible to the eventing and
			 * enables the use of event bubbling within this object hierarchy.
			 * @note Overload from base type sap.ui.base.EventProvider
			 * @return The parent event provider
			 */
			getEventingParent(): sap.ui.base.EventProvider;
			/**
			 * Returns the local ID of an element by removing the component ID prefix or
			 * <code>null</code> if the ID does not contain a prefix.
			 * @param sId Prefixed ID
			 * @return ID without prefix or <code>null</code>
			 */
			getLocalId(sId: string): string;
			/**
			 * Returns the reference to the router instance which has been created by
			 * the UIComponent once the routes in the routing metadata has been defined.
			 * @return the router instance
			 */
			getRouter(): routing.Router;
			/**
			 * Returns the reference to the router instance. The passed controller or view
			 * has to be created in the context of a UIComponent to return the router
			 * instance. Otherwise this function will return undefined.
			 * You may define the routerClass property in the config section of the routing to make the Component create your router extension.
			 * Example:
			 * routing: {
			 * 	config: {
			 * 		routerClass : myAppNamespace.MyRouterClass
			 * 		...
			 * }
			 * ...
			 * @param oControllerOrView either a view or controller
			 * @return the router instance
			 */
			getRouterFor(oControllerOrView: mvc.View|mvc.Controller): routing.Router;
			/**
			 * Returns the reference to the Targets instance which has been created by
			 * the UIComponent once the targets in the routing metadata has been defined.
			 * If routes have been defined, it will be the Targets instance created and used by the router.
			 * @return the targets instance
			 */
			getTargets(): routing.Targets;
			/**
			 * Returns the reference to the UIArea of the container.
			 * @return reference to the UIArea of the container
			 */
			getUIArea(): UIArea;
			/**
			 * Initializes the Component instance after creation.
			 * 
			 * Applications must not call this hook method directly, it is called by the
			 * framework while the constructor of a Component is executed.
			 * 
			 * Subclasses of Component should override this hook to implement any necessary
			 * initialization. <b>When overriding this function make sure to invoke the
			 * init function of the UIComponent as well!</b>
			 */
			init();
			/**
			 * Function is called when the rendering of the ComponentContainer is completed.
			 * 
			 * Applications must not call this hook method directly, it is called from ComponentContainer.
			 * 
			 * Subclasses of UIComponent override this hook to implement any necessary actions after the rendering.
			 */
			onAfterRendering();
			/**
			 * Function is called when the rendering of the ComponentContainer is started.
			 * 
			 * Applications must not call this hook method directly, it is called from ComponentContainer.
			 * 
			 * Subclasses of UIComponent override this hook to implement any necessary actions before the rendering.
			 */
			onBeforeRendering();
			/**
			 * Renders the the root control of the UIComponent.
			 * @param oRenderManager a RenderManager instance
			 */
			render(oRenderManager: RenderManager);
			/**
			 * Sets the reference to the ComponentContainer - later required for the
			 * determination of the UIArea for the UIComponent.
			 * @param oContainer reference to a ComponentContainer
			 * @return reference to this instance to allow method chaining
			 */
			setContainer(oContainer: ComponentContainer): UIComponent;
		}
	
		class ValueState {
			/**
			 * State is not valid.
			 */
			static Error: string;
			/**
			 * State is not specified.
			 */
			static None: string;
			/**
			 * State is valid.
			 */
			static Success: string;
			/**
			 * State is valid but with a warning.
			 */
			static Warning: string;
		}
	
		class VariantLayoutData extends LayoutData {
			/**
			 * Constructor for a new VariantLayoutData.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some multipleLayoutData to the aggregation <code>multipleLayoutData</code>.
			 * @param oMultipleLayoutData the multipleLayoutData to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addMultipleLayoutData(oMultipleLayoutData: LayoutData): VariantLayoutData;
			/**
			 * Destroys all the multipleLayoutData in the aggregation <code>multipleLayoutData</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyMultipleLayoutData(): VariantLayoutData;
			/**
			 * Creates a new subclass of class sap.ui.core.VariantLayoutData with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets content of aggregation <code>multipleLayoutData</code>.
			 * 
			 * Allows multiple LayoutData.
			 * @return 
			 */
			getMultipleLayoutData(): LayoutData[];
			/**
			 * Checks for the provided <code>sap.ui.core.LayoutData</code> in the aggregation <code>multipleLayoutData</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oMultipleLayoutData The multipleLayoutData whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfMultipleLayoutData(oMultipleLayoutData: LayoutData): number;
			/**
			 * Inserts a multipleLayoutData into the aggregation <code>multipleLayoutData</code>.
			 * @param oMultipleLayoutData the multipleLayoutData to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the multipleLayoutData should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the multipleLayoutData is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the multipleLayoutData is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertMultipleLayoutData(oMultipleLayoutData: LayoutData, iIndex: number): VariantLayoutData;
			/**
			 * Removes all the controls from the aggregation <code>multipleLayoutData</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllMultipleLayoutData(): LayoutData[];
			/**
			 * Removes a multipleLayoutData from the aggregation <code>multipleLayoutData</code>.
			 * @param vMultipleLayoutData The multipleLayoutData to remove or its index or id
			 * @return The removed multipleLayoutData or <code>null</code>
			 */
			removeMultipleLayoutData(vMultipleLayoutData: number|string|LayoutData): LayoutData;
		}
	
		class VerticalAlign {
			/**
			 * 
			 * Content is aligned at the bottom.
			 */
			static Bottom: string;
			/**
			 * 
			 * Content respect the parent's vertical alignment.
			 */
			static Inherit: string;
			/**
			 * 
			 * Content is centered vertically .
			 */
			static Middle: string;
			/**
			 * 
			 * Content is aligned at the top.
			 */
			static Top: string;
		}
	
		class Wrapping {
			/**
			 * Inserts actual line breaks in the text at the wrap point.
			 */
			static Hard: string;
			/**
			 * The standard browser behavior is considered for wrapping.
			 */
			static None: string;
			/**
			 * Wrapping shall not be allowed.
			 */
			static Off: string;
			/**
			 * The text is actually on the same line but displayed within several lines.
			 */
			static Soft: string;
		}
	
		interface ComponentContainerMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * Component name, the package where the component is contained. The property can only be applied initially.
			 */
			name?: string;
			/**
			 * The URL of the component. The property can only be applied initially.
			 */
			url?: sap.ui.core.URI;
			/**
			 * Enable/disable validation handling by MessageManager for this component.
			 * The resulting Messages will be propagated to the controls.
			 * @default false
			 */
			handleValidation?: boolean;
			/**
			 * The settings object passed to the component when created. The property can only be applied initially.
			 */
			settings?: any;
			/**
			 * Defines whether binding information is propagated to the component.
			 * @default false
			 */
			propagateModel?: boolean;
			/**
			 * Container width in CSS size
			 */
			width?: sap.ui.core.CSSSize;
			/**
			 * Container height in CSS size
			 */
			height?: sap.ui.core.CSSSize;
		}
	
		interface ControlMetadata {
			/**
			 * Whether the control is currently in busy state.
			 * @default false
			 */
			busy?: boolean;
			/**
			 * The delay in milliseconds, after which the busy indicator will show up for this control.
			 * @default 1000
			 */
			busyIndicatorDelay?: number;
			/**
			 * Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead of the real control
			 * @default true
			 */
			visible?: boolean;
			/**
			 * The IDs of a logical field group that this control belongs to. All fields in a logical field group should share the same <code>fieldGroupId</code>.
			 * Once a logical field group is left, the validateFieldGroup event is raised.
			 * @default []
			 */
			fieldGroupIds?: string[];
		}
	
		interface CustomDataMetadata {
			/**
			 * The key of the data in this CustomData object.
			 * When the data is just stored, it can be any string, but when it is to be written to HTML (writeToDom == true) then it must also be a valid HTML attribute name (it must conform to the sap.ui.core.ID type and may contain no colon) to avoid collisions, it also may not start with "sap-ui". When written to HTML, the key is prefixed with "data-".
			 * If any restriction is violated, a warning will be logged and nothing will be written to the DOM.
			 */
			key?: string;
			/**
			 * The data stored in this CustomData object.
			 * When the data is just stored, it can be any JS type, but when it is to be written to HTML (writeToDom == true) then it must be a string.
			 * If this restriction is violated, a warning will be logged and nothing will be written to the DOM.
			 */
			value?: any;
			/**
			 * If set to "true" and the value is of type "string" and the key conforms to the documented restrictions, this custom data is written to the HTML root element of the control as a "data-*" attribute.
			 * If the key is "abc" and the value is "cde", the HTML will look as follows:
			 * &lt;SomeTag ... data-abc="cde" ... &gt;
			 * Thus the application can provide stable attributes by data binding which can be used for styling or identification purposes.
			 * ATTENTION: use carefully to not create huge attributes or a large number of them.
			 * @default false
			 */
			writeToDom?: boolean;
		}
	
		interface HTMLMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * HTML content to be displayed, defined as a string.
			 * 
			 * The content is converted to DOM nodes with a call to <code>new jQuery(content)</code>, so any
			 * restrictions for the jQuery constructor apply to the content of the HTML control as well.
			 * 
			 * Some of these restrictions (there might be others!) are:
			 * <ul>
			 * <li>the content must be enclosed in tags, pure text is not supported. </li>
			 * <li>if the content contains script tags, they will be executed but they will not appear in the
			 *     resulting DOM tree. When the contained code tries to find the corresponding script tag,
			 *     it will fail.</li>
			 * </ul>
			 * 
			 * Please consider to consult the jQuery documentation as well.
			 * 
			 * The HTML control currently doesn't prevent the usage of multiple root nodes in its DOM content
			 * (e.g. <code>setContent("&lt;div/>&lt;div/>")</code>), but this is not a guaranteed feature.
			 * The accepted content might be restricted to single root nodes in future versions.
			 * To notify applications about this fact, a warning is written in the log when multiple root nodes are used.
			 */
			content?: string;
			/**
			 * Whether existing DOM content is preferred over the given content string.
			 * 
			 * There are two scenarios where this flag is relevant (when set to true):
			 * <ul>
			 * <li>for the initial rendering: when an HTML control is added to an UIArea for the first time
			 *     and if the root node of that UIArea contained DOM content with the same id as the HTML
			 *     control, then that content will be used for rendering instead of any specified string
			 *     content</li>
			 * <li>any follow-up rendering: when an HTML control is rendered for the second or any later
			 *     time and the preferDOM flag is set, then the DOM from the first rendering is preserved
			 *     and not replaced by the string content</li>
			 * </ul>
			 * 
			 * As preserving the existing DOM is the most common use case of the HTML control, the default value is true.
			 * @default true
			 */
			preferDOM?: boolean;
			/**
			 * Whether to run the HTML sanitizer once the content (HTML markup) is applied or not.
			 * 
			 * To configure allowed URLs please use the whitelist API via jQuery.sap.addUrlWhitelist.
			 * @default false
			 */
			sanitizeContent?: boolean;
			/**
			 * Specifies whether the control is visible. Invisible controls are not rendered.
			 * @default true
			 */
			visible?: boolean;
		}
	
		interface IconMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * This property should be set by the return value of calling sap.ui.core.IconPool.getIconURI with a Icon name parameter and an optional collection parameter which is required when using application extended Icons. A list of standard FontIcon is available here.
			 */
			src?: sap.ui.core.URI;
			/**
			 * Since Icon uses font, this property will be applied to the css font-size property on the rendered DOM element.
			 */
			size?: sap.ui.core.CSSSize;
			/**
			 * The color of the Icon. If color is not defined here, the Icon inherits the color from its DOM parent.
			 */
			color?: string;
			/**
			 * This color is shown when icon is hovered. This property has no visual effect when run on mobile device.
			 */
			hoverColor?: string;
			/**
			 * This color is shown when icon is pressed/activated by the user.
			 */
			activeColor?: string;
			/**
			 * This is the width of the DOM element which contains the Icon. Setting this property doesn't affect the size of the font. If you want to make the font bigger, increase the size property.
			 */
			width?: sap.ui.core.CSSSize;
			/**
			 * This is the height of the DOM element which contains the Icon. Setting this property doesn't affect the size of the font. If you want to make the font bigger, increase the size property.
			 */
			height?: sap.ui.core.CSSSize;
			/**
			 * Background color of the Icon in normal state.
			 */
			backgroundColor?: string;
			/**
			 * Background color for Icon in hover state. This property has no visual effect when run on mobile device.
			 */
			hoverBackgroundColor?: string;
			/**
			 * Background color for Icon in active state.
			 */
			activeBackgroundColor?: string;
			/**
			 * A decorative icon is included for design reasons. Accessibility tools will ignore decorative icons. Tab stop isn't affected by this property anymore and it's now controlled by the existence of press event handler and the noTabStop property.
			 * @default true
			 */
			decorative?: boolean;
			/**
			 * Decides whether a default Icon tooltip should be used if no tooltip is set.
			 * @default true
			 */
			useIconTooltip?: boolean;
			/**
			 * This defines the alternative text which is used for outputting the aria-label attribute on the DOM.
			 */
			alt?: string;
			/**
			 * Defines whether the tab stop of icon is controlled by the existence of press event handler. When it's set to false, Icon control has tab stop when press event handler is attached.
			 * If it's set to true, Icon control never has tab stop no matter whether press event handler exists or not.
			 * @default false
			 */
			noTabStop?: boolean;
		}
	
		interface InvisibleTextMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * The text of the InvisibleText.
			 * @default 
			 */
			text?: string;
		}
	
		interface ItemMetadata {
			/**
			 * The text to be displayed for the item.
			 * @default 
			 */
			text?: string;
			/**
			 * Enabled items can be selected.
			 * @default true
			 */
			enabled?: boolean;
			/**
			 * Options are RTL and LTR. Alternatively, an item can inherit its text direction from its parent control.
			 * @default Inherit
			 */
			textDirection?: sap.ui.core.TextDirection;
			/**
			 * Can be used as input for subsequent actions.
			 */
			key?: string;
		}
	
		interface ListItemMetadata extends sap.ui.core.ItemMetadata {
			/**
			 * The icon belonging to this list item instance.
			 * This can be an URI to an image or an icon font URI.
			 */
			icon?: string;
			/**
			 * Some additional text of type string, optionally to be displayed along with this item.
			 */
			additionalText?: string;
		}
	
		interface MessageMetadata {
			/**
			 * Message text
			 */
			text?: string;
			/**
			 * Message's timestamp. It is just a simple String that will be used without any transformation. So the application that uses messages needs to format the timestamp to its own needs.
			 */
			timestamp?: string;
			/**
			 * A possible icon URI of the message
			 */
			icon?: sap.ui.core.URI;
			/**
			 * Setting the message's level.
			 * @default None
			 */
			level?: sap.ui.core.MessageType;
			/**
			 * Determines whether the message should be read only. This helps the application to handle a message a different way if the application differentiates between read-only and common messages.
			 * @default false
			 */
			readOnly?: boolean;
		}
	
		interface ScrollBarMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * Orientation. Defines if the Scrollbar is vertical or horizontal.
			 * @default true
			 */
			vertical?: boolean;
			/**
			 * Scroll position in steps or pixels.
			 */
			scrollPosition?: number;
			/**
			 * Size of the Scrollbar (in pixels).
			 */
			size?: sap.ui.core.CSSSize;
			/**
			 * Size of the scrollable content (in pixels).
			 */
			contentSize?: sap.ui.core.CSSSize;
			/**
			 * Number of steps to scroll. Used if the size of the content is not known as the data is loaded dynamically.
			 */
			steps?: number;
		}
	
		interface TitleMetadata {
			/**
			 * Defines the title text
			 */
			text?: string;
			/**
			 * Defines the URL for icon display
			 */
			icon?: sap.ui.core.URI;
			/**
			 * Defines the level of the title. If set to auto the level of the title is chosen by the control rendering the title.
			 * 
			 * Currently not all controls using the Title.control supporting this property.
			 * @default Auto
			 */
			level?: sap.ui.core.TitleLevel;
			/**
			 * If set the title is displayed emphasized.
			 * This feature is nor supported by all controls using the Title.control.
			 * @default false
			 */
			emphasized?: boolean;
		}
	
		interface TooltipBaseMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * The text that is shown in the tooltip that extends the TooltipBase class, for example in RichTooltip.
			 * @default 
			 */
			text?: string;
			/**
			 * Optional. Open Duration in milliseconds.
			 * @default 200
			 */
			openDuration?: number;
			/**
			 * Optional. Close Duration in milliseconds.
			 * @default 200
			 */
			closeDuration?: number;
			/**
			 * Optional. My position defines which position on the extended tooltip being positioned to align with the target control.
			 * @default begin top
			 */
			myPosition?: sap.ui.core.Dock;
			/**
			 * Optional. At position defines which position on the target control to align the positioned tooltip.
			 * @default begin bottom
			 */
			atPosition?: sap.ui.core.Dock;
			/**
			 * Optional. Offset adds these left-top values to the calculated position.
			 * Example: "10 3".
			 * @default 10 3
			 */
			offset?: string;
			/**
			 * Optional. Collision - when the positioned element overflows the window in some direction, move it to an alternative position.
			 * @default flip
			 */
			collision?: sap.ui.core.Collision;
			/**
			 * Opening delay of the tooltip in milliseconds
			 * @default 500
			 */
			openDelay?: number;
			/**
			 * Closing delay of the tooltip in milliseconds
			 * @default 100
			 */
			closeDelay?: number;
		}
		/**
		 * Applies the support for custom style classes on the prototype of a <code>sap.ui.core.Element</code>.
		 * 
		 * All controls (subclasses of <code>sap.ui.core.Control</code>) provide the support custom style classes. The control API provides functions
		 * to the application which allow it to add, remove or change style classes for the control.
		 * In general, this option is not available for elements because elements do not necessarily have a representation in the DOM.
		 * 
		 * This function can be used by a control developer to explicitly enrich the API of his/her element implementation with the API functions
		 * for the custom style class support. It must be called on the prototype of the element.
		 * 
		 * <b>Usage Example:</b>
		 * <pre>
		 * sap.ui.define(['sap/ui/core/Element', 'sap/ui/core/CustomStyleClassSupport'], function(Element, CustomStyleClassSupport) {
		 *    "use strict";
		 *    var MyElement = Element.extend("my.MyElement", {
		 *       metadata : {
		 *          //...
		 *       }
		 *       //...
		 *    });
		 * 
		 *    CustomStyleClassSupport.apply(MyElement.prototype);
		 * 
		 *    return MyElement;
		 * }, true);
		 * </pre>
		 * 
		 * Furthermore, the function <code>oRenderManager.writeClasses(oElement);</code> ({@link sap.ui.core.RenderManager#writeClasses}) must be called within
		 * the renderer of the control to which the element belongs, when writing the root tag of the element. This ensures the classes are written to the HTML.
		 * 
		 * This function adds the following functions to the elements prototype:
		 * <ul>
		 * <li><code>addStyleClass</code>: {@link sap.ui.core.Control#addStyleClass}</li>
		 * <li><code>removeStyleClass</code>: {@link sap.ui.core.Control#removeStyleClass}</li>
		 * <li><code>toggleStyleClass</code>: {@link sap.ui.core.Control#toggleStyleClass}</li>
		 * <li><code>hasStyleClass</code>: {@link sap.ui.core.Control#hasStyleClass}</li>
		 * </ul>
		 * In addition the clone function of the element is extended to ensure that the custom style classes are also available on the cloned element.
		 * 
		 * <b>Note:</b> This function can only be used <i>within</i> control development. An application cannot add style class support on existing elements by calling this function.
		 */
		function CustomStyleClassSupport();
		/**
		 * Collision behavior: horizontal/vertical.
		 * 
		 * Defines how the position of an element should be adjusted in case it overflows the window in some direction. For both
		 * directions this can be "flip", "fit" or "none". If only one behavior is provided it is applied to both directions.
		 * Examples: "flip", "fit none".
		 */
		type Collision = string;
		/**
		 * A string type that represents CSS color values.
		 * 
		 * Allowed values are CSS hex colors like "#666666" or "#fff", RGB/HSL values like "rgb(0,0,0)"
		 * or "hsla(50%,10%,30%,0.5)" as well as CSS color names like "green" and "darkblue" and special
		 * values like "inherit" and "transparent".
		 * 
		 * The empty string is also allowed and has the same effect as setting no color.
		 */
		type CSSColor = string;
		/**
		 * A string type that represents CSS size values.
		 * 
		 * The CSS specifications calls this the <code>'&lt;length&gt; type'</code>.
		 * Allowed values are CSS sizes like "1px" or "2em" or "50%". The special values <code>auto</code>
		 * and <code>inherit</code> are also accepted as well as mathematical expressions using the CSS3
		 * <code>calc(<i>expression</i>)</code> operator.
		 * 
		 * Note that CSS does not allow all these values for every CSS property representing a size.
		 * E.g. <code>padding-left</code> doesn't allow the value <code>auto</code>. So even if a value is
		 * accepted by <code>sap.ui.core.CSSSize</code>, it still might have no effect in a specific context.
		 * In other words: UI5 controls usually don't extend the range of allowed values in CSS.
		 * 
		 * 
		 * <b>Units</b>
		 * 
		 * Valid font-relative units are <code>em, ex</code> and <code>rem</code>. Supported absolute units
		 * are <code>cm, mm, in, pc, pt</code> and <code>px</code>. Other units are not supported yet.
		 * 
		 * 
		 * <b>Mathematical Expressions</b>
		 * 
		 * Expressions inside the <code>calc()</code> operator are only roughly checked for validity.
		 * Not every value that this type accepts might be a valid expression in the sense of the CSS spec.
		 * But vice versa, any expression that is valid according to the spec should be accepted by this type.
		 * The current implementation is based on the
		 * {@link http://dev.w3.org/csswg/css-values-3/#calc-syntax CSS3 Draft specification from 22 April 2015}.
		 * 
		 * Noteworthy details:
		 * <ul>
		 * <li>whitespace is mandatory around a '-' or '+' operator and optional otherwise</li>
		 * <li>parentheses are accepted but not checked for being balanced (a limitation of regexp based checks)</li>
		 * <li>semantic constraints like type restrictions are not checked</li>
		 * </ul>
		 * 
		 * Future versions of UI5 might check <code>calc()</code> expressions in more detail, so applications should
		 * not assume that a value, that is invalid according to the CSS spec but currently accepted by this type
		 * still will be accepted by future versions of this type.
		 */
		type CSSSize = string;
		/**
		 * Docking position: horizontal/vertical.
		 * 
		 * Defines a position on the element which is used for aligned positioning of another element (e.g. the left top
		 * corner of a popup is positioned at the left bottom corner of the input field). For the horizontal position possible values
		 * are "begin", "left", "center", "right" and "end", where left/right always are left and right, or begin/end which are
		 * dependent on the text direction. For the vertical position possible values are "top", "center" and "bottom".
		 * Examples: "left top", "end bottom", "center center".
		 */
		type Dock = string;
		/**
		 * A string type representing an Id or a name.
		 * 
		 * Allowed is a sequence of characters (capital/lowercase), digits, underscores, dashes, points and/or colons.
		 * It may start with a character, number or underscore only.
		 */
		type ID = string;
		/**
		 * A string type that represents an RFC 3986 conformant URI.
		 */
		type URI = string;
	}

	/**
	 * Device and Feature Detection API: Provides information about the used browser / device and cross platform support for certain events
	 * like media queries, orientation change or resizing.
	 * 
	 * This API is independent from any other part of the UI5 framework. This allows it to be loaded beforehand, if it is needed, to create the UI5 bootstrap
	 * dynamically depending on the capabilities of the browser or device.
	 */
	namespace Device {
	
		/**
		 * Contains information about the used browser.
		 */
		namespace browser {
		
			/**
			 * Enumeration containing the names of known browsers.
			 */
			namespace BROWSER {
				/**
				 * Android stock browser name.
				 */
				var ANDROID: any;
				/**
				 * Chrome browser name.
				 */
				var CHROME: any;
				/**
				 * Edge browser name.
				 */
				var EDGE: any;
				/**
				 * Firefox browser name.
				 */
				var FIREFOX: any;
				/**
				 * Internet Explorer browser name.
				 */
				var INTERNET_EXPLORER: any;
				/**
				 * Safari browser name.
				 */
				var SAFARI: any;
			}
			/**
			 * If this flag is set to <code>true</code>, the Google Chrome browser is used.
			 */
			var chrome: boolean;
			/**
			 * If this flag is set to <code>true</code>, the Microsoft Edge browser is used.
			 */
			var edge: boolean;
			/**
			 * If this flag is set to <code>true</code>, the Mozilla Firefox browser is used.
			 */
			var firefox: boolean;
			/**
			 * If this flag is set to <code>true</code>, the Safari browser runs in standalone fullscreen mode on iOS.
			 * 
			 * <b>Note:</b> This flag is only available if the Safari browser was detected. Furthermore, if this mode is detected,
			 * technically not a standard Safari is used. There might be slight differences in behavior and detection, e.g.
			 * the availability of {@link sap.ui.Device.browser#version}.
			 */
			var fullscreen: boolean;
			/**
			 * If this flag is set to <code>true</code>, the mobile variant of the browser is used.
			 * 
			 * <b>Note:</b> This information might not be available for all browsers.
			 */
			var mobile: boolean;
			/**
			 * If this flag is set to <code>true</code>, a browser featuring a Mozilla engine is used.
			 */
			var mozilla: boolean;
			/**
			 * If this flag is set to <code>true</code>, the Microsoft Internet Explorer browser is used.
			 */
			var msie: boolean;
			/**
			 * The name of the browser.
			 */
			var name: string;
			/**
			 * If this flag is set to <code>true</code>, the Apple Safari browser is used.
			 * 
			 * <b>Note:</b>
			 * This flag is also <code>true</code> when the standalone (fullscreen) mode or webview is used on iOS devices.
			 * Please also note the flags {@link sap.ui.Device.browser#fullscreen} and {@link sap.ui.Device.browser#webview}.
			 */
			var safari: boolean;
			/**
			 * The version of the browser as <code>float</code>.
			 * 
			 * Might be <code>-1</code> if no version can be determined.
			 */
			var version: number;
			/**
			 * The version of the browser as <code>string</code>.
			 * 
			 * Might be empty if no version can be determined.
			 */
			var versionStr: string;
			/**
			 * If this flag is set to <code>true</code>, a browser featuring a Webkit engine is used.
			 */
			var webkit: boolean;
			/**
			 * If this flag is set to <code>true</code>, the Safari browser runs in webview mode on iOS.
			 * 
			 * <b>Note:</b> This flag is only available if the Safari browser was detected. Furthermore, if this mode is detected,
			 * technically not a standard Safari is used. There might be slight differences in behavior and detection, e.g.
			 * the availability of {@link sap.ui.Device.browser#version}.
			 */
			var webview: boolean;
		}
	
		/**
		 * Event API for screen width changes.
		 * 
		 * This API is based on media queries but can also be used if media queries are not natively supported by the used browser.
		 * In this case, the behavior of media queries is simulated by this API.
		 * 
		 * There are several predefined {@link sap.ui.Device.media.RANGESETS range sets} available. Each of them defines a
		 * set of intervals for the screen width (from small to large). Whenever the screen width changes and the current screen width is in
		 * a different interval to the one before the change, the registered event handlers for the range set are called.
		 * 
		 * If needed, it is also possible to define a custom set of intervals.
		 * 
		 * The following example shows a typical use case:
		 * <pre>
		 * function sizeChanged(mParams) {
		 *     switch(mParams.name) {
		 *         case "Phone":
		 *             // Do what is needed for a little screen
		 *             break;
		 *         case "Tablet":
		 *             // Do what is needed for a medium sized screen
		 *             break;
		 *         case "Desktop":
		 *             // Do what is needed for a large screen
		 *     }
		 * }
		 * 
		 * // Register an event handler to changes of the screen size
		 * sap.ui.Device.media.attachHandler(sizeChanged, null, sap.ui.Device.media.RANGESETS.SAP_STANDARD);
		 * // Do some initialization work based on the current size
		 * sizeChanged(sap.ui.Device.media.getCurrentRange(sap.ui.Device.media.RANGESETS.SAP_STANDARD));
		 * </pre>
		 */
		namespace media {
		
			/**
			 * Enumeration containing the names and settings of predefined screen width media query range sets.
			 */
			namespace RANGESETS {
				/**
				 * A 3-step range set (S-L).
				 * 
				 * The ranges of this set are:
				 * <ul>
				 * <li><code>"S"</code>: For screens smaller than 520 pixels.</li>
				 * <li><code>"M"</code>: For screens greater than or equal to 520 pixels and smaller than 960 pixels.</li>
				 * <li><code>"L"</code>: For screens greater than or equal to 960 pixels.</li>
				 * </ul>
				 * 
				 * To use this range set, you must initialize it explicitly ({@link sap.ui.Device.media.html#initRangeSet}).
				 * 
				 * If this range set is initialized, a CSS class is added to the page root (<code>html</code> tag) which indicates the current
				 * screen width range: <code>sapUiMedia-3Step-<i>NAME_OF_THE_INTERVAL</i></code>.
				 */
				var SAP_3STEPS: any;
				/**
				 * A 4-step range set (S-XL).
				 * 
				 * The ranges of this set are:
				 * <ul>
				 * <li><code>"S"</code>: For screens smaller than 520 pixels.</li>
				 * <li><code>"M"</code>: For screens greater than or equal to 520 pixels and smaller than 760 pixels.</li>
				 * <li><code>"L"</code>: For screens greater than or equal to 760 pixels and smaller than 960 pixels.</li>
				 * <li><code>"XL"</code>: For screens greater than or equal to 960 pixels.</li>
				 * </ul>
				 * 
				 * To use this range set, you must initialize it explicitly ({@link sap.ui.Device.media.html#initRangeSet}).
				 * 
				 * If this range set is initialized, a CSS class is added to the page root (<code>html</code> tag) which indicates the current
				 * screen width range: <code>sapUiMedia-4Step-<i>NAME_OF_THE_INTERVAL</i></code>.
				 */
				var SAP_4STEPS: any;
				/**
				 * A 6-step range set (XS-XXL).
				 * 
				 * The ranges of this set are:
				 * <ul>
				 * <li><code>"XS"</code>: For screens smaller than 241 pixels.</li>
				 * <li><code>"S"</code>: For screens greater than or equal to 241 pixels and smaller than 400 pixels.</li>
				 * <li><code>"M"</code>: For screens greater than or equal to 400 pixels and smaller than 541 pixels.</li>
				 * <li><code>"L"</code>: For screens greater than or equal to 541 pixels and smaller than 768 pixels.</li>
				 * <li><code>"XL"</code>: For screens greater than or equal to 768 pixels and smaller than 960 pixels.</li>
				 * <li><code>"XXL"</code>: For screens greater than or equal to 960 pixels.</li>
				 * </ul>
				 * 
				 * To use this range set, you must initialize it explicitly ({@link sap.ui.Device.media.html#initRangeSet}).
				 * 
				 * If this range set is initialized, a CSS class is added to the page root (<code>html</code> tag) which indicates the current
				 * screen width range: <code>sapUiMedia-6Step-<i>NAME_OF_THE_INTERVAL</i></code>.
				 */
				var SAP_6STEPS: any;
				/**
				 * A 3-step range set (Phone, Tablet, Desktop).
				 * 
				 * The ranges of this set are:
				 * <ul>
				 * <li><code>"Phone"</code>: For screens smaller than 600 pixels.</li>
				 * <li><code>"Tablet"</code>: For screens greater than or equal to 600 pixels and smaller than 1024 pixels.</li>
				 * <li><code>"Desktop"</code>: For screens greater than or equal to 1024 pixels.</li>
				 * </ul>
				 * 
				 * This range set is initialized by default. An initialization via {@link sap.ui.Device.media.html#initRangeSet} is not needed.
				 * 
				 * A CSS class is added to the page root (<code>html</code> tag) which indicates the current
				 * screen width range: <code>sapUiMedia-Std-<i>NAME_OF_THE_INTERVAL</i></code>.
				 * Furthermore there are 5 additional CSS classes to hide elements based on the width of the screen:
				 * <ul>
				 * <li><code>sapUiHideOnPhone</code>: Will be hidden if the screen has 600px or more</li>
				 * <li><code>sapUiHideOnTablet</code>: Will be hidden if the screen has less than 600px or more than 1023px</li>
				 * <li><code>sapUiHideOnDesktop</code>: Will be hidden if the screen is smaller than 1024px</li>
				 * <li><code>sapUiVisibleOnlyOnPhone</code>: Will be visible if the screen has less than 600px</li>
				 * <li><code>sapUiVisibleOnlyOnTablet</code>: Will be visible if the screen has 600px or more but less than 1024px</li>
				 * <li><code>sapUiVisibleOnlyOnDesktop</code>: Will be visible if the screen has 1024px or more</li>
				 * </ul>
				 */
				var SAP_STANDARD: any;
				/**
				 * A 4-step range set (Phone, Tablet, Desktop, LargeDesktop).
				 * 
				 * The ranges of this set are:
				 * <ul>
				 * <li><code>"Phone"</code>: For screens smaller than 600 pixels.</li>
				 * <li><code>"Tablet"</code>: For screens greater than or equal to 600 pixels and smaller than 1024 pixels.</li>
				 * <li><code>"Desktop"</code>: For screens greater than or equal to 1024 pixels and smaller than 1440 pixels.</li>
				 * <li><code>"LargeDesktop"</code>: For screens greater than or equal to 1440 pixels.</li>
				 * </ul>
				 * 
				 * This range set is initialized by default. An initialization via {@link sap.ui.Device.media.html#initRangeSet} is not needed.
				 * 
				 * A CSS class is added to the page root (<code>html</code> tag) which indicates the current
				 * screen width range: <code>sapUiMedia-StdExt-<i>NAME_OF_THE_INTERVAL</i></code>.
				 */
				var SAP_STANDARD_EXTENDED: any;
			}
			/**
			 * Registers the given event handler to change events of the screen width based on the range set with the specified name.
			 * 
			 * The event is fired whenever the screen width changes and the current screen width is in
			 * a different interval of the given range set than before the width change.
			 * 
			 * The event handler is called with a single argument: a map <code>mParams</code> which provides the following information
			 * about the entered interval:
			 * <ul>
			 * <li><code>mParams.from</code>: The start value (inclusive) of the entered interval as a number</li>
			 * <li><code>mParams.to</code>: The end value (exclusive) range of the entered interval as a number or undefined for the last interval (infinity)</li>
			 * <li><code>mParams.unit</code>: The unit used for the values above, e.g. <code>"px"</code></li>
			 * <li><code>mParams.name</code>: The name of the entered interval, if available</li>
			 * </ul>
			 * @param fnFunction The handler function to call when the event occurs. This function will be called in the context of the
			 *                       <code>oListener</code> instance (if present) or on the <code>window</code> instance. A map with information
			 *                       about the entered range set is provided as a single argument to the handler (see details above).
			 * @param oListener The object that wants to be notified when the event occurs (<code>this</code> context within the
			 *                        handler function). If it is not specified, the handler function is called in the context of the <code>window</code>.
			 * @param sName The name of the range set to listen to. The range set must be initialized beforehand
			 *                  ({@link sap.ui.Device.media.html#initRangeSet}). If no name is provided, the
			 *                  {@link sap.ui.Device.media.RANGESETS.SAP_STANDARD default range set} is used.
			 */
			function attachHandler(fnFunction: any, oListener: any, sName: string);
			/**
			 * Removes a previously attached event handler from the change events of the screen width.
			 * 
			 * The passed parameters must match those used for registration with {@link #attachHandler} beforehand.
			 * @param fnFunction The handler function to detach from the event
			 * @param oListener The object that wanted to be notified when the event occurred
			 * @param sName The name of the range set to listen to. If no name is provided, the
			 *                   {@link sap.ui.Device.media.RANGESETS.SAP_STANDARD default range set} is used.
			 */
			function detachHandler(fnFunction: any, oListener: any, sName: string);
			/**
			 * Returns information about the current active range of the range set with the given name.
			 * @param sName The name of the range set. The range set must be initialized beforehand ({@link sap.ui.Device.media.html#initRangeSet})
			 * @return Information about the current active interval of the range set. The returned map has the same structure as the argument of the event handlers ({link sap.ui.Device.media#attachHandler})
			 */
			function getCurrentRange(sName: string): any;
			/**
			 * Returns <code>true</code> if a range set with the given name is already initialized.
			 * @param sName The name of the range set.
			 * @return Returns <code>true</code> if a range set with the given name is already initialized
			 */
			function hasRangeSet(sName: string): boolean;
			/**
			 * Initializes a screen width media query range set.
			 * 
			 * This initialization step makes the range set ready to be used for one of the other functions in namespace <code>sap.ui.Device.media</code>.
			 * The most important {@link sap.ui.Device.media.RANGESETS predefined range sets} are initialized automatically.
			 * 
			 * To make a not yet initialized {@link sap.ui.Device.media.RANGESETS predefined range set} ready to be used, call this function with the
			 * name of the range set to be initialized:
			 * <pre>
			 * sap.ui.Device.media.initRangeSet(sap.ui.Device.media.RANGESETS.SAP_3STEPS);
			 * </pre>
			 * 
			 * Alternatively it is possible to define custom range sets as shown in the following example:
			 * <pre>
			 * sap.ui.Device.media.initRangeSet("MyRangeSet", [200, 400], "px", ["Small", "Medium", "Large"]);
			 * </pre>
			 * This example defines the following named ranges:
			 * <ul>
			 * <li><code>"Small"</code>: For screens smaller than 200 pixels.</li>
			 * <li><code>"Medium"</code>: For screens greater than or equal to 200 pixels and smaller than 400 pixels.</li>
			 * <li><code>"Large"</code>: For screens greater than or equal to 400 pixels.</li>
			 * </ul>
			 * The range names are optional. If they are specified a CSS class (e.g. <code>sapUiMedia-MyRangeSet-Small</code>) is also
			 * added to the document root depending on the current active range. This can be suppressed via parameter <code>bSuppressClasses</code>.
			 * @param sName The name of the range set to be initialized - either a {@link sap.ui.Device.media.RANGESETS predefined} or custom one.
			 *                   The name must be a valid id and consist only of letters and numeric digits.
			 * @param aRangeBorders The range borders(optional)
			 * @param sUnit The unit which should be used for the values given in <code>aRangeBorders</code>.
			 *                     The allowed values are <code>"px"</code> (default), <code>"em"</code> or <code>"rem"</code>(optional)
			 * @param aRangeNames The names of the ranges. The names must be a valid id and consist only of letters and digits. If names
			 *             are specified, CSS classes are also added to the document root as described above. This behavior can be
			 *             switched off explicitly by using <code>bSuppressClasses</code>. <b>Note:</b> <code>aRangeBorders</code> with <code>n</code> entries
			 *             define <code>n+1</code> ranges. Therefore <code>n+1</code> names must be provided.(optional)
			 * @param bSuppressClasses Whether or not writing of CSS classes to the document root should be suppressed when
			 *             <code>aRangeNames</code> are provided(optional)
			 */
			function initRangeSet(sName: string, aRangeBorders?: number[], sUnit?: string, aRangeNames?: string[], bSuppressClasses?: boolean);
			/**
			 * Removes a previously initialized range set and detaches all registered handlers.
			 * 
			 * Only custom range sets can be removed via this function. Initialized predefined range sets
			 * ({@link sap.ui.Device.media#RANGESETS}) cannot be removed.
			 * @param sName The name of the range set which should be removed.
			 */
			function removeRangeSet(sName: string);
		}
	
		/**
		 * Common API for orientation change notifications across all platforms.
		 * 
		 * For browsers or devices that do not provide native support for orientation change events
		 * the API simulates them based on the ratio of the document's width and height.
		 */
		namespace orientation {
			/**
			 * If this flag is set to <code>true</code>, the screen is currently in landscape mode (the width is greater than the height).
			 */
			var landscape: boolean;
			/**
			 * If this flag is set to <code>true</code>, the screen is currently in portrait mode (the height is greater than the width).
			 */
			var portrait: boolean;
			/**
			 * Registers the given event handler to orientation change events of the document's window.
			 * 
			 * The event is fired whenever the screen orientation changes and the width of the document's window
			 * becomes greater than its height or the other way round.
			 * 
			 * The event handler is called with a single argument: a map <code>mParams</code> which provides the following information:
			 * <ul>
			 * <li><code>mParams.landscape</code>: If this flag is set to <code>true</code>, the screen is currently in landscape mode, otherwise in portrait mode.</li>
			 * </ul>
			 * @param fnFunction The handler function to call when the event occurs. This function will be called in the context of the
			 *                       <code>oListener</code> instance (if present) or on the <code>window</code> instance. A map with information
			 *                       about the orientation is provided as a single argument to the handler (see details above).
			 * @param oListener The object that wants to be notified when the event occurs (<code>this</code> context within the
			 *                        handler function). If it is not specified, the handler function is called in the context of the <code>window</code>.(optional)
			 */
			function attachHandler(fnFunction: any, oListener?: any);
			/**
			 * Removes a previously attached event handler from the orientation change events.
			 * 
			 * The passed parameters must match those used for registration with {@link #attachHandler} beforehand.
			 * @param fnFunction The handler function to detach from the event
			 * @param oListener The object that wanted to be notified when the event occurred(optional)
			 */
			function detachHandler(fnFunction: any, oListener?: any);
		}
	
		/**
		 * Contains information about the operating system of the device.
		 */
		namespace os {
		
			/**
			 * Enumeration containing the names of known operating systems.
			 */
			namespace OS {
				/**
				 * Android operating system name.
				 */
				var ANDROID: any;
				/**
				 * Blackberry operating system name.
				 */
				var BLACKBERRY: any;
				/**
				 * iOS operating system name.
				 */
				var IOS: any;
				/**
				 * Linux operating system name.
				 */
				var LINUX: any;
				/**
				 * MAC operating system name.
				 */
				var MACINTOSH: any;
				/**
				 * Windows operating system name.
				 */
				var WINDOWS: any;
				/**
				 * Windows Phone operating system name.
				 */
				var WINDOWS_PHONE: any;
			}
			/**
			 * If this flag is set to <code>true</code>, an Android operating system is used.
			 */
			var android: boolean;
			/**
			 * If this flag is set to <code>true</code>, a Blackberry operating system is used.
			 */
			var blackberry: boolean;
			/**
			 * If this flag is set to <code>true</code>, an iOS operating system is used.
			 */
			var ios: boolean;
			/**
			 * If this flag is set to <code>true</code>, a Linux operating system is used.
			 */
			var linux: boolean;
			/**
			 * If this flag is set to <code>true</code>, a Mac operating system is used.
			 */
			var macintosh: boolean;
			/**
			 * The name of the operating system.
			 */
			var name: string;
			/**
			 * The version of the operating system as <code>float</code>.
			 * 
			 * Might be <code>-1</code> if no version can be determined.
			 */
			var version: number;
			/**
			 * The version of the operating system as <code>string</code>.
			 * 
			 * Might be empty if no version can be determined.
			 */
			var versionStr: string;
			/**
			 * If this flag is set to <code>true</code>, a Windows operating system is used.
			 */
			var windows: boolean;
			/**
			 * If this flag is set to <code>true</code>, a Windows Phone operating system is used.
			 */
			var windows_phone: boolean;
		}
	
		/**
		 * Common API for document window size change notifications across all platforms.
		 */
		namespace resize {
			/**
			 * The current height of the document's window in pixels.
			 */
			var height: number;
			/**
			 * The current width of the document's window in pixels.
			 */
			var width: number;
			/**
			 * Registers the given event handler to resize change events of the document's window.
			 * 
			 * The event is fired whenever the document's window size changes.
			 * 
			 * The event handler is called with a single argument: a map <code>mParams</code> which provides the following information:
			 * <ul>
			 * <li><code>mParams.height</code>: The height of the document's window in pixels.</li>
			 * <li><code>mParams.width</code>: The width of the document's window in pixels.</li>
			 * </ul>
			 * @param fnFunction The handler function to call when the event occurs. This function will be called in the context of the
			 *                       <code>oListener</code> instance (if present) or on the <code>window</code> instance. A map with information
			 *                       about the size is provided as a single argument to the handler (see details above).
			 * @param oListener The object that wants to be notified when the event occurs (<code>this</code> context within the
			 *                        handler function). If it is not specified, the handler function is called in the context of the <code>window</code>.(optional)
			 */
			function attachHandler(fnFunction: any, oListener?: any);
			/**
			 * Removes a previously attached event handler from the resize events.
			 * 
			 * The passed parameters must match those used for registration with {@link #attachHandler} beforehand.
			 * @param fnFunction The handler function to detach from the event
			 * @param oListener The object that wanted to be notified when the event occurred(optional)
			 */
			function detachHandler(fnFunction: any, oListener?: any);
		}
	
		/**
		 * Contains information about detected capabilities of the used browser or device.
		 */
		namespace support {
			/**
			 * If this flag is set to <code>true</code>, the used browser natively supports media queries via JavaScript.
			 * 
			 * <b>Note:</b> The {@link sap.ui.Device.media media queries API} of the device API can also be used when there is no native support.
			 */
			var matchmedia: boolean;
			/**
			 * If this flag is set to <code>true</code>, the used browser natively supports events of media queries via JavaScript.
			 * 
			 * <b>Note:</b> The {@link sap.ui.Device.media media queries API} of the device API can also be used when there is no native support.
			 */
			var matchmedialistener: boolean;
			/**
			 * If this flag is set to <code>true</code>, the used browser natively supports the <code>orientationchange</code> event.
			 * 
			 * <b>Note:</b> The {@link sap.ui.Device.orientation orientation event} of the device API can also be used when there is no native support.
			 */
			var orientation: boolean;
			/**
			 * If this flag is set to <code>true</code>, the used browser supports pointer events.
			 */
			var pointer: boolean;
			/**
			 * If this flag is set to <code>true</code>, the device has a display with a high resolution.
			 */
			var retina: boolean;
			/**
			 * If this flag is set to <code>true</code>, the used browser supports touch events.
			 * 
			 * <b>Note:</b> This flag indicates whether the used browser supports touch events or not.
			 * This does not necessarily mean that the used device has a touchable screen.
			 */
			var touch: boolean;
			/**
			 * If this flag is set to <code>true</code>, the used browser supports web sockets.
			 */
			var websocket: boolean;
		}
	
		/**
		 * Provides a basic categorization of the used device based on various indicators.
		 * 
		 * These indicators are for example the support of touch events, the screen size, the used operation system or
		 * the user agent of the browser.
		 * 
		 * <b>Note:</b> Depending on the capabilities of the device it is also possible that multiple flags are set to <code>true</code>.
		 */
		namespace system {
			/**
			 * If this flag is set to <code>true</code>, the device is recognized as a combination of a desktop system and tablet.
			 * 
			 * Furthermore, a CSS class <code>sap-combi</code> is added to the document root element.
			 * 
			 * <b>Note:</b> This property is mainly for Microsoft Windows 8 (and following) devices where the mouse and touch event may be supported
			 * natively by the browser being used. This property is set to <code>true</code> only when both mouse and touch event are natively supported.
			 */
			var combi: boolean;
			/**
			 * If this flag is set to <code>true</code>, the device is recognized as a desktop system.
			 * 
			 * Furthermore, a CSS class <code>sap-desktop</code> is added to the document root element.
			 */
			var desktop: boolean;
			/**
			 * If this flag is set to <code>true</code>, the device is recognized as a phone.
			 * 
			 * Furthermore, a CSS class <code>sap-phone</code> is added to the document root element.
			 */
			var phone: boolean;
			/**
			 * If this flag is set to <code>true</code>, the device is recognized as a tablet.
			 * 
			 * Furthermore, a CSS class <code>sap-tablet</code> is added to the document root element.
			 */
			var tablet: boolean;
		}
	}

	/**
	 * The SAPUI5 Data Binding API.
	 * 
	 * The default binding mode for model implementations (if not implemented otherwise) is two way and the supported binding modes by the model
	 * are one way, two way and one time. The default binding mode can be changed by the application for each model instance.
	 * A model implementation should specify its supported binding modes and set the default binding mode accordingly
	 * (e.g. if the model supports only one way binding the default binding mode should also be set to one way).
	 * 
	 * The default size limit for models is 100. The size limit determines the number of entries used for the list bindings.
	 */
	namespace model {
	
		/**
		 * Analytical Adapter for ODataModels
		 */
		namespace analytics {
		
			/**
			 * The OData4Analytics API is purely experimental, not yet functionally complete
			 * and not meant for productive usage. At present, its only purpose is to
			 * demonstrate how easy analytical extensions of OData4SAP can be consumed.
			 * 
			 * <em>USE OBJECTS VIA METHODS ONLY - DO NOT ACCESS JAVASCRIPT OBJECT PROPERTIES DIRECTLY !</em>
			 * 
			 * Lazy initialization of attributes will cause unexpected values when you
			 * access object attributes directly.
			 */
			namespace odata4analytics {
			
				class Dimension  {
					/**
					 * Create a representation of a dimension provided by an analytic query. Do not create your own instances.
					 * @param oQueryResult The query result containing this dimension
					 * @param oProperty The DataJS object object representing the dimension
					 */
					constructor(oQueryResult: sap.ui.model.analytics.odata4analytics.QueryResult, oProperty: any);
					/**
					 * Find attribute by name
					 * @param sName Attribute name
					 * @return The dimension attribute
					 *          object with this name or null if it does not exist
					 */
					findAttributeByName(sName: string): Dimension;
					/**
					 * Get the names of all attributes included in this dimension
					 * @return List of all attribute names
					 */
					getAllAttributeNames(): string;
					/**
					 * Get all attributes of this dimension
					 * @return An object with individual JS properties for each
					 *          attribute of this dimension. The JS object properties all are
					 *          objects of type odata4analytics.DimensionAttribute. The
					 *          names of the JS object properties are given by the OData entity
					 *          type property names representing the dimension attribute keys.
					 */
					getAllAttributes(): any;
					/**
					 * Get query result containing this dimension
					 * @return The query result object
					 */
					getContainingQueryResult(): QueryResult;
					/**
					 * Get associated hierarchy
					 * @return The hierarchy object or null if there is none. It can
					 *          be an instance of class
					 *          odata4analytics.RecursiveHierarchy (TODO later: or a
					 *          leveled hierarchy). Use methods isLeveledHierarchy and
					 *          isRecursiveHierarchy to determine object type.
					 */
					getHierarchy(): any;
					/**
					 * Get the key property
					 * @return The DataJS object representing the property for the
					 *          dimension key
					 */
					getKeyProperty(): any;
					/**
					 * Get label
					 * @return The (possibly language-dependent) label text for this
					 *          dimension
					 */
					getLabelText(): string;
					/**
					 * Get master data entity set for this dimension
					 * @return The master data entity set
					 *         for this dimension, or null, if it does not exist
					 */
					getMasterDataEntitySet(): EntitySet;
					/**
					 * Get the name of the dimension
					 * @return The name of this dimension, which is identical to the
					 *          name of the dimension key property in the entity type
					 */
					getName(): string;
					/**
					 * Get super-ordinate dimension
					 * @return The super-ordinate dimension or null if there is none
					 */
					getSuperOrdinateDimension(): any;
					/**
					 * Get text property related to this dimension
					 * @return The DataJS object representing the text property or
					 *          null if it does not exist
					 */
					getTextProperty(): any;
					/**
					 * Get indicator whether or not master data is available for this dimension
					 * @return True iff master data is available
					 */
					hasMasterData(): boolean;
				}
			
				class DimensionAttribute  {
					/**
					 * Create a representation of a dimension attribute provided by an analytic
					 * query. Do not create your own instances.
					 * @param oQueryResult The query result containing this dimension attribute
					 * @param oProperty The DataJS object object representing the dimension
					 *            attribute
					 */
					constructor(oQueryResult: sap.ui.model.analytics.odata4analytics.QueryResult, oProperty: any);
					/**
					 * Get dimension
					 * @return The dimension object
					 *          containing this attribute
					 */
					getDimension(): Dimension;
					/**
					 * Get the key property
					 * @return The DataJS object representing the property for the key
					 *          of this dimension attribute
					 */
					getKeyProperty(): any;
					/**
					 * Get label
					 * @return The (possibly language-dependent) label text for this
					 *          dimension attribute
					 */
					getLabelText(): string;
					/**
					 * Get the name of the dimension attribute
					 * @return The name of the dimension attribute, which is identical
					 *          to the name of the property in the entity type holding the
					 *          attribute value
					 */
					getName(): string;
					/**
					 * Get text property related to this dimension attribute
					 * @return The DataJS object representing the text property or
					 *          null if it does not exist
					 */
					getTextProperty(): any;
				}
			
				class DimensionMemberSetRequest  {
					/**
					 * Create a request object for interaction with a dimension value help. Such a
					 * value help is served by either the query result entity set, in which case the
					 * returned dimension members are limited to those also used in the query result
					 * data. Or, the value help is populated by a master data entity set, if made
					 * available by the service. In this case, the result will include all valid
					 * members for that dimension.
					 * @param oDimension Description of a dimension
					 * @param oParameterizationRequest (optional) Request object for
					 *            interactions with the parameterization of the query result or (not
					 *            yet supported) master data entity set Such an object is required
					 *            if the entity set holding the dimension members includes
					 *            parameters.
					 * @param bUseMasterData (optional) Indicates use of master data for
					 *            determining the dimension members.
					 */
					constructor(oDimension: sap.ui.model.analytics.odata4analytics.Dimension, oParameterizationRequest: sap.ui.model.analytics.odata4analytics.ParameterizationRequest, bUseMasterData: boolean);
					/**
					 * Get the filter expression for this request.
					 * 
					 * Expressions are represented by separate objects. If none exists so far, a
					 * new expression object gets created.
					 * @return The filter object
					 *          associated to this request.
					 */
					getFilterExpression(): FilterExpression;
					/**
					 * Returns the current page boundaries as object with properties
					 * <code>start</code> and <code>end</code>. If the end of the page is
					 * unbounded, <code>end</code> is null.
					 * @return the current page boundaries as object
					 */
					getResultPageBoundaries(): any;
					/**
					 * Get the sort expression for this request.
					 * 
					 * Expressions are represented by separate objects. If none exists so far, a
					 * new expression object gets created.
					 * @return The sort object
					 *          associated to this request.
					 */
					getSortExpression(): SortExpression;
					/**
					 * Get the value of an query option for the OData request URI corresponding
					 * to this request.
					 * @param sQueryOptionName Identifies the query option: $select,
					 *            $filter,... or any custom query option
					 * @return The value of the requested query option or null, if
					 *          this option is not used for the OData request.
					 */
					getURIQueryOptionValue(sQueryOptionName: string): string;
					/**
					 * Get the URI to locate the entity set for the dimension memebers.
					 * @param sServiceRootURI (optional) Identifies the root of the OData
					 *            service
					 * @return The resource path of the URI pointing to the entity
					 *          set. It is a relative URI unless a service root is given, which
					 *          would then prefixed in order to return a complete URL.
					 */
					getURIToDimensionMemberEntitySet(sServiceRootURI: string): string;
					/**
					 * Get the unescaped URI to fetch the dimension members, optionally
					 * augmented by text and attributes.
					 * @param sServiceRootURI (optional) Identifies the root of the OData
					 *            service
					 * @return The unescaped URI that contains the OData resource path
					 *          and OData system query options to express the request for the
					 *          parameter value set..
					 */
					getURIToDimensionMemberEntries(sServiceRootURI: string): string;
					/**
					 * Set the filter expression for this request.
					 * 
					 * Expressions are represented by separate objects. Calling this method
					 * replaces the filter object maintained by this request.
					 * @param oFilter The filter object to be associated with this request.
					 */
					setFilterExpression(oFilter: FilterExpression);
					/**
					 * Set the parameterization request required for retrieving dimension
					 * members directly from the query result, if it is parameterized.
					 * @param oParameterizationRequest Request object for interactions with the parameterization of
					 *            this query result
					 */
					setParameterizationRequest(oParameterizationRequest: any);
					/**
					 * Set further options to be applied for the OData request
					 * @param bIncludeCount Indicates whether or not the result shall
					 *            include a count for the returned entities. Default is not to
					 *            include it. Pass null to keep current setting.
					 */
					setRequestOptions(bIncludeCount: boolean);
					/**
					 * Specify that only a page of the query result shall be returned. A page is
					 * described by its boundaries, that are row numbers for the first and last
					 * rows in the query result to be returned.
					 * @param start The first row of the query result to be returned.
					 *            Numbering starts at 1. Passing null is equivalent to start
					 *            with the first row.
					 * @param end The last row of the query result to be returned. Passing
					 *            null is equivalent to get all rows up to the end of the query
					 *            result.
					 */
					setResultPageBoundaries(start: number, end: number);
					/**
					 * Set the sort expression for this request.
					 * 
					 * Expressions are represented by separate objects. Calling this method
					 * replaces the sort object maintained by this request.
					 * @param oSorter The sort object to be associated with this request.
					 */
					setSortExpression(oSorter: SortExpression);
				}
			
				class EntitySet  {
					/**
					 * Create a representation of an OData entity set in the context of an analytic
					 * query. Do not create your own instances.
					 * @param oModel DataJS object for the OData model containing this entity
					 *            set
					 * @param oSchema DataJS object for the schema surrounding the container of
					 *            this entity set
					 * @param oContainer DataJS object for the container holding this entity set
					 * @param oEntitySet DataJS object for the entity set
					 * @param oEntityType DataJS object for the entity type
					 */
					constructor(oModel: any, oSchema: any, oContainer: any, oEntitySet: any, oEntityType: any);
					/**
					 * Get entity type used for this entity set
					 * @return The DataJS object representing the entity type
					 */
					getEntityType(): any;
					/**
					 * Get the fully qualified name for this entity type
					 * @return The fully qualified name
					 */
					getQName(): string;
					/**
					 * Get full description for this entity set
					 * @return The DataJS object representing the entity set
					 */
					getSetDescription(): any;
					/**
					 * Get names of properties in this entity set that can be updated
					 * @return An object with individual JS properties for each
					 *          updatable property. For testing whether propertyName is the name
					 *          of an updatable property, use
					 *          <code>getUpdatablePropertyNameSet()[propertyName]</code>. The
					 *          included JS object properties are all set to true.
					 */
					getUpdatablePropertyNameSet(): any;
				}
			
				class EntityType  {
					/**
					 * Create a representation of an OData entity type in the context of an analytic
					 * query. Do not create your own instances.
					 * @param oModel DataJS object for the OData model containing this entity
					 *            type
					 * @param oSchema DataJS object for the schema containing this entity type
					 * @param oEntityType DataJS object for the entity type
					 */
					constructor(oModel: any, oSchema: any, oEntityType: any);
					/**
					 * Find property by name
					 * @param sPropertyName Property name
					 * @return The DataJS object representing the property or null if
					 *          it does not exist
					 */
					findPropertyByName(sPropertyName: string): any;
					/**
					 * Get the names of all properties with an associated hierarchy
					 * @return List of all property names
					 */
					getAllHierarchyPropertyNames(): string;
					/**
					 * Get names of properties that can be filtered, that is they can be used in
					 * $filter expressions
					 * @return Array with names of properties that can be
					 *          filtered.
					 */
					getFilterablePropertyNames(): string;
					/**
					 * Get heading of the property with specified name (identified by property
					 * metadata annotation sap:heading)
					 * @param sPropertyName Property name
					 * @return The heading string
					 */
					getHeadingOfProperty(sPropertyName: string): string;
					/**
					 * Get the hierarchy associated to a given property Based on the current
					 * specification, hierarchies are always recursive. TODO: Extend behavior
					 * when leveled hierarchies get in scope
					 * @param sName Parameter name
					 * @return The hierarchy
					 *          object or null if it does not exist
					 */
					getHierarchy(sName: string): RecursiveHierarchy;
					/**
					 * Get key properties of this type
					 * @return The list of key property names
					 */
					getKeyProperties(): string;
					/**
					 * Get label of the property with specified name (identified by property
					 * metadata annotation sap:label)
					 * @param sPropertyName Property name
					 * @return The label string
					 */
					getLabelOfProperty(sPropertyName: string): string;
					/**
					 * Get all properties
					 * @return Object with (JavaScript) properties, one for each (OData
					 *         entity type) property. These (JavaScript) properties hold the
					 *         DataJS object representing the property
					 */
					getProperties(): any;
					/**
					 * Get properties for which filter restrictions have been specified
					 * @return Object with (JavaScript) properties, one for each
					 *          (OData entity type) property. The property value is from
					 *          odata4analytics.EntityType.propertyFilterRestriction and
					 *          indicates the filter restriction for this property.
					 */
					getPropertiesWithFilterRestrictions(): any;
					/**
					 * Get the fully qualified name for this entity type
					 * @return The fully qualified name
					 */
					getQName(): string;
					/**
					 * Get quick info of the property with specified name (identified by property
					 * metadata annotation sap:quickinfo)
					 * @param sPropertyName Property name
					 * @return The quick info string
					 */
					getQuickInfoOfProperty(sPropertyName: string): string;
					/**
					 * Get names of properties that must be filtered, that is they must appear
					 * in every $filter expression
					 * @return Array with names of properties that must be
					 *          filtered.
					 */
					getRequiredFilterPropertyNames(): string;
					/**
					 * Get names of properties that can be sorted, that is they can be used in
					 * $orderby expressions
					 * @return Array with names of properties that can be
					 *          sorted.
					 */
					getSortablePropertyNames(): string;
					/**
					 * Get the super-ordinate property related to the property with specified
					 * name (identified by property metadata annotation sap:super-ordinate)
					 * @param sPropertyName Property name
					 * @return The DataJS object representing the super-ordinate
					 *          property or null if it does not exist
					 */
					getSuperOrdinatePropertyOfProperty(sPropertyName: string): any;
					/**
					 * Get the text property related to the property with specified name
					 * (identified by property metadata annotation sap:text)
					 * @param sPropertyName Property name
					 * @return The DataJS object representing the text property or
					 *          null if it does not exist
					 */
					getTextPropertyOfProperty(sPropertyName: string): any;
					/**
					 * Get full description for this entity type
					 * @return The DataJS object representing the entity type
					 */
					getTypeDescription(): any;
				}
			
				class FilterExpression  {
					/**
					 * Create a representation of a filter expression for a given entity type. It can be rendered as value for the $filter system
					 * query option.
					 * @param oModel DataJS object for the OData model containing this entity type
					 * @param oSchema DataJS object for the schema containing this entity type
					 * @param oEntityType object for the entity type
					 */
					constructor(oModel: any, oSchema: any, oEntityType: sap.ui.model.analytics.odata4analytics.EntityType);
					/**
					 * Add a condition to the filter expression.
					 * 
					 * Multiple conditions on the same property are combined with a logical OR first, and in a second step conditions for
					 * different properties are combined with a logical AND.
					 * @param sPropertyName The name of the property bound in the condition
					 * @param sOperator operator used for the condition
					 * @param oValue value to be used for this condition
					 * @param oValue2 (optional) as second value to be used for this condition
					 * @return This object for method chaining
					 */
					addCondition(sPropertyName: string, sOperator: sap.ui.model.FilterOperator, oValue: any, oValue2: any): FilterExpression;
					/**
					 * Add a set condition to the filter expression.
					 * 
					 * A set condition tests if the value of a property is included in a set of given values. It is a convenience method for
					 * this particular use case eliminating the need for multiple API calls.
					 * @param sPropertyName The name of the property bound in the condition
					 * @param aValues values defining the set
					 * @return This object for method chaining
					 */
					addSetCondition(sPropertyName: string, aValues: any[]): FilterExpression;
					/**
					 * Add an array of UI5 filter conditions to the filter expression.
					 * 
					 * The UI5 filter condition is combined with the other given conditions using a logical AND. This method
					 * is particularly useful for passing forward already created UI5 filter arrays.
					 * @param aUI5Filter Array of UI5 filter objects
					 * @return This object for method chaining
					 */
					addUI5FilterConditions(aUI5Filter: sap.ui.model.Filter): FilterExpression;
					/**
					 * Check if request is compliant with basic filter constraints expressed in metadata:
					 * 
					 * (a) all properties required in the filter expression have been referenced (b) the single-value filter restrictions have been obeyed
					 * @return The value true. In case the expression violates some of the rules, an exception with some explanatory
					 *          message is thrown
					 */
					checkValidity(): boolean;
					/**
					 * Clear expression from any conditions that may have been set previously
					 */
					clear();
					/**
					 * Get description for this entity type
					 * @return The object representing the entity type
					 */
					getEntityType(): EntityType;
					/**
					 * Get an array of SAPUI5 Filter objects corresponding to this expression.
					 * @return List of filter objects representing this expression
					 */
					getExpressionAsUI5FilterArray(): sap.ui.model.Filter;
					/**
					 * Get the value for the OData system query option $filter corresponding to this expression.
					 * @return The $filter value for the filter expression
					 */
					getURIFilterOptionValue(): string;
					/**
					 * Remove all conditions for some property from the filter expression.
					 * 
					 * All previously set conditions for some property are removed from the filter expression.
					 * @param sPropertyName The name of the property bound in the condition
					 * @return This object for method chaining
					 */
					removeConditions(sPropertyName: string): FilterExpression;
				}
			
				class Measure  {
					/**
					 * Create a representation of a measure provided by an analytic query. Do not create your own instances.
					 * @param oQueryResult The query result containing this measure
					 * @param oProperty The DataJS object object representing the measure
					 */
					constructor(oQueryResult: sap.ui.model.analytics.odata4analytics.QueryResult, oProperty: any);
					/**
					 * Get the text property associated to the raw value property holding the
					 * formatted value related to this measure
					 * @return The DataJS object representing the property holding the
					 *          formatted value text of this measure or null if this measure
					 *          does not have a unit
					 */
					getFormattedValueProperty(): any;
					/**
					 * Get label
					 * @return The (possibly language-dependent) label text for this
					 *          measure
					 */
					getLabelText(): string;
					/**
					 * Get the name of the measure
					 * @return The name of the measure, which is identical to the name
					 *          of the measure raw value property in the entity type
					 */
					getName(): string;
					/**
					 * Get the raw value property
					 * @return The DataJS object representing the property holding the
					 *          raw value of this measure
					 */
					getRawValueProperty(): any;
					/**
					 * Get the unit property related to this measure
					 * @return The DataJS object representing the unit property or
					 *          null if this measure does not have a unit
					 */
					getUnitProperty(): any;
					/**
					 * Get indicator whether or not the measure is updatable
					 * @return True iff the measure is updatable
					 */
					isUpdatable(): boolean;
				}
			
				class Model  {
					/**
					 * Create a representation of the analytical semantics of OData service metadata
					 * @param oModelReference An instance of ReferenceByURI, ReferenceByModel or
					 *            ReferenceWithWorkaround for locating the OData service.
					 * @param mParameter Additional parameters for controlling the model construction. Currently supported are:
					 *            <li> sAnnotationJSONDoc - A JSON document providing extra annotations to the elements of the
					 *                 structure of the given service
					 *            </li>
					 *            <li> modelVersion - Parameter to define which ODataModel version should be used, in you use
					 *                 'odata4analytics.Model.ReferenceByURI': 1 (default), 2
					 *                 see also: AnalyticalVersionInfo constants
					 *            </li>(optional)
					 */
					constructor(oModelReference: any, mParameter?: any);
					/**
					 * Find analytic query result by name
					 * @param sName Fully qualified name of query result entity set
					 * @return The query result object
					 *          with this name or null if it does not exist
					 */
					findQueryResultByName(sName: string): QueryResult;
					/**
					 * Get the names of all query results (entity sets) offered by the model
					 * @return List of all query result names
					 */
					getAllQueryResultNames(): string;
					/**
					 * Get all query results offered by the model
					 * @return An object with individual JS properties for each query
					 *          result included in the model. The JS object properties all are
					 *          objects of type odata4analytics.QueryResult. The names
					 *          of the JS object properties are given by the entity set names
					 *          representing the query results.
					 */
					getAllQueryResults(): any;
					/**
					 * Get underlying OData model provided by SAP UI5
					 * @return The SAP UI5 representation of the model.
					 */
					getODataModel(): any;
				}
			
				namespace Model {
				
					class ReferenceByModel  {
						/**
						 * Create a reference to an OData model already loaded elsewhere with the help
						 * of SAP UI5.
						 * @param oModel holding the OData model.
						 */
						constructor(oModel: any);
					}
				
					class ReferenceByURI  {
						/**
						 * Create a reference to an OData model by the URI of the related OData service.
						 * @param sURI holding the URI.
						 */
						constructor(sURI: string);
					}
				
					class ReferenceWithWorkaround  {
						/**
						 * Create a reference to an OData model having certain workarounds activated. A
						 * workaround is an implementation that changes the standard behavior of the API
						 * to overcome some gap or limitation in the OData provider. The workaround
						 * implementation can be conditionally activated by passing the identifier in
						 * the contructor.
						 * 
						 * Known workaround identifiers are:
						 * 
						 * <li>"CreateLabelsFromTechnicalNames" - If a property has no label text, it
						 * gets generated from the property name.</li>
						 * 
						 * <li>"IdentifyTextPropertiesByName" -If a dimension property has no text and
						 * another property with the same name and an appended "Name", "Text" etc.
						 * exists, they are linked via annotation.</li>
						 * @param oModel holding a reference to the OData model, obtained
						 *            by odata4analytics.Model.ReferenceByModel or by
						 *            sap.odata4analytics.Model.ReferenceByURI.
						 * @param aWorkaroundID listing all workarounds to be applied.
						 */
						constructor(oModel: any, aWorkaroundID: string[]);
					}
				}
			
				class Parameter  {
					/**
					 * Create a representation of a single parameter contained in a parameterization. Do not create your own instances.
					 * @param oParameterization The parameterization containing this parameter
					 * @param oProperty The DataJS object object representing the text property
					 */
					constructor(oParameterization: sap.ui.model.analytics.odata4analytics.Parameterization, oProperty: any);
					/**
					 * Get parameterization containing this parameter
					 * @return The parameterization
					 *         object
					 */
					getContainingParameterization(): Parameterization;
					/**
					 * Get label
					 * @return The (possibly language-dependent) label text for this
					 *          parameter
					 */
					getLabelText(): string;
					/**
					 * Get the name of the parameter
					 * @return The name of the parameter, which is identical with the
					 *          name of the property representing the parameter in the
					 *          parameterization entity type
					 */
					getName(): string;
					/**
					 * Get property for the parameter representing the peer boundary of the same
					 * interval
					 * @return The parameter representing
					 *          the peer boundary of the same interval. This means that if
					 *          *this* parameter is a lower boundary, the returned object
					 */
					getPeerIntervalBoundaryParameter(): Parameter;
					/**
					 * Get property
					 * @return The DataJS object representing the property of this
					 *          parameter
					 */
					getProperty(): any;
					/**
					 * Get text property related to this parameter
					 * @return The DataJS object representing the text property or
					 *          null if it does not exist
					 */
					getTextProperty(): any;
					/**
					 * Get the URI to locate the entity set holding the value set, if it is
					 * available.
					 * @param sServiceRootURI (optional) Identifies the root of the OData
					 *            service
					 * @return The resource path of the URI pointing to the entity set. It is a
					 *          relative URI unless a service root is given, which would then
					 *          prefixed in order to return a complete URL.
					 */
					getURIToValueEntitySet(sServiceRootURI: string);
					/**
					 * Get indicator if the parameter represents an interval boundary
					 * @return True iff it represents an interval boundary, otherwise
					 *          false
					 */
					isIntervalBoundary(): boolean;
					/**
					 * Get indicator if the parameter represents the lower boundary of an
					 * interval
					 * @return True iff it represents the lower boundary of an
					 *          interval, otherwise false
					 */
					isLowerIntervalBoundary(): boolean;
					/**
					 * Get indicator whether or not the parameter is optional
					 * @return True iff the parameter is optional
					 */
					isOptional(): boolean;
					/**
					 * Get indicator if a set of values is available for this parameter.
					 * Typically, this is true for parameters with a finite set of known values
					 * such as products, business partners in different roles, organization
					 * units, and false for integer or date parameters
					 * @return True iff a value set is available, otherwise false
					 */
					isValueSetAvailable(): boolean;
				}
			
				class Parameterization  {
					/**
					 * Create a representation of a parameterization for an analytic query. Do not create your own instances.
					 * @param oEntityType The OData entity type for this parameterization
					 * @param oEntitySet The OData entity set for this parameterization offered
					 *            by the OData service
					 */
					constructor(oEntityType: sap.ui.model.analytics.odata4analytics.EntityType, oEntitySet: sap.ui.model.analytics.odata4analytics.EntitySet);
					/**
					 * Find parameter by name
					 * @param sName Parameter name
					 * @return The parameter object with
					 *          this name or null if it does not exist
					 */
					findParameterByName(sName: string): Parameter;
					/**
					 * Get the names of all parameters part of the parameterization
					 * @return List of all parameter names
					 */
					getAllParameterNames(): string;
					/**
					 * Get all parameters included in this parameterization
					 * @return An object with individual JS properties for each
					 *          parameter included in the query result. The JS object properties
					 *          all are objects of type odata4analytics.Parameter. The
					 *          names of the JS object properties are given by the OData entity
					 *          type property names representing the parameter keys.
					 */
					getAllParameters(): any;
					/**
					 * Get the entity set representing this query result in the OData model
					 * @return The OData entity set
					 *          representing this query result
					 */
					getEntitySet(): EntitySet;
					/**
					 * Get the entity type defining the type of this query result in the OData
					 * model
					 * @return The OData entity type for
					 *          this query result
					 */
					getEntityType(): EntityType;
					/**
					 * Get the name of the parameter
					 * @return The name of the parameterization, which is identical
					 *          with the name of the entity set representing the
					 *          parameterization in the OData service
					 */
					getName(): string;
					/**
					 * Get navigation property to query result
					 * @return The parameter object with
					 *          this name or null if it does not exist
					 */
					getNavigationPropertyToQueryResult(): QueryResult;
				}
			
				class ParameterizationRequest  {
					/**
					 * Create a request object for interaction with a query parameterization.
					 * @param oParameterization Description of a query parameterization
					 */
					constructor(oParameterization: sap.ui.model.analytics.odata4analytics.Parameterization);
					/**
					 * Get the description of the parameterization on which this request
					 * operates on
					 * @return Description of a
					 *          query parameterization
					 */
					getParameterization(): Parameterization;
					/**
					 * Get the URI to locate the entity set for the query parameterization.
					 * @param sServiceRootURI (optional) Identifies the root of the OData
					 *            service
					 * @return The resource path of the URI pointing to the entity set. It is a
					 *          relative URI unless a service root is given, which would then
					 *          prefixed in order to return a complete URL.
					 */
					getURIToParameterizationEntitySet(sServiceRootURI: string);
					/**
					 * Get the URI to locate the parameterization entity for the values assigned
					 * to all parameters beforehand. Notice that a value must be supplied for
					 * every parameter including those marked as optional. For optional
					 * parameters, assign the special value that the service provider uses as an
					 * "omitted" value. For example, for services based on BW Easy Queries, this
					 * would be an empty string.
					 * @param sServiceRootURI (optional) Identifies the root of the OData
					 *            service
					 * @return The resource path of the URI pointing to the entity set. It is a
					 *          relative URI unless a service root is given, which would then
					 *          prefixed in order to return a complete URL.
					 */
					getURIToParameterizationEntry(sServiceRootURI: string);
					/**
					 * Assign a value to a parameter
					 * @param sParameterName Name of the parameter. In case of a range
					 *            value, provide the name of the lower boundary parameter.
					 * @param sValue Assigned value. Pass null to remove a value assignment.
					 * @param sToValue Omit it or set it to null for single values. If set,
					 *            it will be assigned to the upper boundary parameter
					 */
					setParameterValue(sParameterName: string, sValue: string, sToValue: string);
				}
			
				class ParameterValueSetRequest  {
					/**
					 * Create a request object for interaction with a query parameter value help.
					 * @param oParameter Description of a query parameter
					 */
					constructor(oParameter: sap.ui.model.analytics.odata4analytics.Parameter);
					/**
					 * Get the filter expression for this request.
					 * 
					 * Expressions are represented by separate objects. If none exists so far, a
					 * new expression object gets created.
					 * @return The filter object
					 *          associated to this request.
					 */
					getFilterExpression(): FilterExpression;
					/**
					 * Get the sort expression for this request.
					 * 
					 * Expressions are represented by separate objects. If none exists so far, a
					 * new expression object gets created.
					 * @return The sort object
					 *          associated to this request.
					 */
					getSortExpression(): SortExpression;
					/**
					 * Get the value of an query option for the OData request URI corresponding
					 * to this request.
					 * @param sQueryOptionName Identifies the query option: $select,
					 *            $filter,... or any custom query option
					 * @return The value of the requested query option or null, if
					 *          this option is not used for the OData request.
					 */
					getURIQueryOptionValue(sQueryOptionName: string): string;
					/**
					 * Get the unescaped URI to fetch the parameter value set.
					 * @param sServiceRootURI (optional) Identifies the root of the OData
					 *            service
					 * @return The unescaped URI that contains the OData resource path
					 *          and OData system query options to express the request for the
					 *          parameter value set..
					 */
					getURIToParameterValueSetEntries(sServiceRootURI: string): string;
					/**
					 * Specify which components of the parameter shall be included in the value
					 * set.
					 * @param bIncludeText Indicator whether or not to include the parameter text (if
					 *            available) in the value set. Pass null to keep current
					 *            setting.
					 */
					includeParameterText(bIncludeText: any);
					/**
					 * Set the filter expression for this request.
					 * 
					 * Expressions are represented by separate objects. Calling this method
					 * replaces the filter object maintained by this request.
					 * @param oFilter The filter object to be associated with this request.
					 */
					setFilterExpression(oFilter: FilterExpression);
					/**
					 * Set the sort expression for this request.
					 * 
					 * Expressions are represented by separate objects. Calling this method
					 * replaces the sort object maintained by this request.
					 * @param oSorter The sort object to be associated with this request.
					 */
					setSortExpression(oSorter: SortExpression);
				}
			
				class QueryResult  {
					/**
					 * Create a representation of an analytic query. Do not create your own instances.
					 * @param oModel The analytical model containing this query result entity
					 *            set
					 * @param oEntityType The OData entity type for this query
					 * @param oEntitySet The OData entity set for this query offered by the
					 *            OData service
					 * @param oParameterization The parameterization of this query, if any
					 */
					constructor(oModel: sap.ui.model.analytics.odata4analytics.Model, oEntityType: sap.ui.model.analytics.odata4analytics.EntityType, oEntitySet: sap.ui.model.analytics.odata4analytics.EntitySet, oParameterization: sap.ui.model.analytics.odata4analytics.Parameterization);
					/**
					 * Find dimension by name
					 * @param sName Dimension name
					 * @return The dimension object with
					 *          this name or null if it does not exist
					 */
					findDimensionByName(sName: string): Dimension;
					/**
					 * Find dimension by property name
					 * @param sName Property name
					 * @return The dimension object to
					 *          which the given property name is related, because the property
					 *          holds the dimension key, its text, or is an attribute of this
					 *          dimension. If no such dimension exists, null is returned.
					 */
					findDimensionByPropertyName(sName: string): Dimension;
					/**
					 * Find measure by name
					 * @param sName Measure name
					 * @return The measure object with this
					 *          name or null if it does not exist
					 */
					findMeasureByName(sName: string): Measure;
					/**
					 * Find measure by property name
					 * @param sName Property name
					 * @return The measure object to which
					 *          the given property name is related, because the property holds
					 *          the raw measure value or its formatted value. If no such measure
					 *          exists, null is returned.
					 */
					findMeasureByPropertyName(sName: string): Measure;
					/**
					 * Get the names of all dimensions included in the query result
					 * @return List of all dimension names
					 */
					getAllDimensionNames(): string;
					/**
					 * Get all dimensions included in this query result
					 * @return An object with individual JS properties for each
					 *          dimension included in the query result. The JS object properties
					 *          all are objects of type odata4analytics.Dimension. The
					 *          names of the JS object properties are given by the OData entity
					 *          type property names representing the dimension keys.
					 */
					getAllDimensions(): any;
					/**
					 * Get the names of all measures included in the query result
					 * @return List of all measure names
					 */
					getAllMeasureNames(): string;
					/**
					 * Get all measures included in this query result
					 * @return An object with individual JS properties for each
					 *          measure included in the query result. The JS object properties
					 *          all are objects of type odata4analytics.Measure. The
					 *          names of the JS object properties are given by the OData entity
					 *          type property names representing the measure raw values.
					 */
					getAllMeasures(): any;
					/**
					 * Get the entity set representing this query result in the OData model
					 * @return The OData entity set
					 *          representing this query result
					 */
					getEntitySet(): EntitySet;
					/**
					 * Get the entity type defining the type of this query result in the OData
					 * model
					 * @return The OData entity type for
					 *          this query result
					 */
					getEntityType(): EntityType;
					/**
					 * Get the analytical model containing the entity set for this query result
					 * @return The analytical representation of the OData model
					 */
					getModel(): any;
					/**
					 * Get the name of the query result
					 * @return The fully qualified name of the query result, which is
					 *          identical with the name of the entity set representing the query
					 *          result in the OData service
					 */
					getName(): string;
					/**
					 * Get the parameterization of this query result
					 * @return The object for the
					 *          parameterization or null if the query result is not
					 *          parameterized
					 */
					getParameterization(): Parameterization;
					/**
					 * Get property holding the totaled property list
					 * @return The DataJS object representing this property
					 */
					getTotaledPropertiesListProperty(): any;
				}
			
				class QueryResultRequest  {
					/**
					 * Create a request object for interaction with a query result.
					 * @param oQueryResult Description of a query parameterization
					 * @param oParameterizationRequest Request object for
					 *            interactions with the parameterization of this query. Only
					 *            required if the query service includes parameters.(optional)
					 */
					constructor(oQueryResult: sap.ui.model.analytics.odata4analytics.QueryResult, oParameterizationRequest?: sap.ui.model.analytics.odata4analytics.ParameterizationRequest);
					/**
					 * Add one or more dimensions to the aggregation level
					 * @param aDimensionName Array of dimension names to be added to the already defined
					 *            aggregation level.
					 */
					addToAggregationLevel(aDimensionName: any);
					/**
					 * Get the names of the dimensions included in the aggregation level
					 * @return The dimension names included in the aggregation level
					 */
					getAggregationLevel(): any[];
					/**
					 * Get details about a dimensions included in the aggregation level
					 * @param sDImensionName Name of a dimension included in the aggregation level of this
					 *            request, for which details shall be returned
					 * @return An object with three properties named key and text,
					 *          both with Boolean values indicating whether the key and text of
					 *          this dimension are included in this request. The third property
					 *          named attributes is an array of attribute names of this
					 *          dimension included in this request, or null, if there are none.
					 */
					getAggregationLevelDetails(sDImensionName: any): any;
					/**
					 * Get the filter expression for this request.
					 * 
					 * Expressions are represented by separate objects. If none exists so far, a
					 * new expression object gets created.
					 * @return The filter object
					 *          associated to this request.
					 */
					getFilterExpression(): FilterExpression;
					/**
					 * Get the names of the measures included in the query result request
					 * @return The measure names included in the query result request
					 */
					getMeasureNames(): any[];
					/**
					 * Retrieves the current parametrization request
					 * @return 
					 */
					getParameterizationRequest(): any;
					/**
					 * Get the description of the query result on which this request operates on
					 * @return Description of a query
					 *          result
					 */
					getQueryResult(): QueryResult;
					/**
					 * Returns the current page boundaries as object with properties
					 * <code>start</code> and <code>end</code>. If the end of the page is
					 * unbounded, <code>end</code> is null.
					 * @return the current page boundaries as object
					 */
					getResultPageBoundaries(): any;
					/**
					 * Get the sort expression for this request.
					 * 
					 * Expressions are represented by separate objects. If none exists so far, a
					 * new expression object gets created.
					 * @return The sort object
					 *          associated to this request.
					 */
					getSortExpression(): SortExpression;
					/**
					 * Get the value of an query option for the OData request URI corresponding
					 * to this request.
					 * @param sQueryOptionName Identifies the query option: $select,
					 *            $filter,$orderby ... or any custom query option
					 * @return The value of the requested query option or null, if
					 *          this option is not used for the OData request.
					 */
					getURIQueryOptionValue(sQueryOptionName: string): string;
					/**
					 * Get the URI to locate the entity set for the query result.
					 * @param sServiceRootURI (optional) Identifies the root of the OData
					 *            service
					 * @return The resource path of the URI pointing to the entity
					 *          set. It is a relative URI unless a service root is given, which
					 *          would then prefixed in order to return a complete URL.
					 */
					getURIToQueryResultEntitySet(sServiceRootURI: string): string;
					/**
					 * Get the unescaped URI to fetch the query result.
					 * @param sServiceRootURI (optional) Identifies the root of the OData
					 *            service
					 * @param sResourcePath (optional) OData resource path to be considered.
					 *            If provided, it overwrites any parameterization object that
					 *            might have been specified separately.
					 * @return The unescaped URI that contains the OData resource path
					 *          and OData system query options to express the aggregation level,
					 *          filter expression and further options.
					 */
					getURIToQueryResultEntries(sServiceRootURI: string, sResourcePath: string): string;
					/**
					 * Specify which dimension components shall be included in the query result.
					 * The settings get applied to the currently defined aggregation level.
					 * @param sDimensionName Name of the dimension for which the settings get applied.
					 *            Specify null to apply the settings to all dimensions in the
					 *            aggregation level.
					 * @param bIncludeKey Indicator whether or not to include the dimension key in the
					 *            query result. Pass null to keep current setting.
					 * @param bIncludeText Indicator whether or not to include the dimension text (if
					 *            available) in the query result. Pass null to keep current
					 *            setting.
					 * @param aAttributeName Array of dimension attribute names to be included in the
					 *            result. Pass null to keep current setting. This argument is
					 *            ignored if sDimensionName is null.
					 */
					includeDimensionKeyTextAttributes(sDimensionName: any, bIncludeKey: any, bIncludeText: any, aAttributeName: any);
					/**
					 * Specify which measure components shall be included in the query result.
					 * The settings get applied to the currently set measures.
					 * @param sMeasureName Name of the measure for which the settings get applied.
					 *            Specify null to apply the settings to all currently set
					 *            measures.
					 * @param bIncludeRawValue Indicator whether or not to include the raw value in the query
					 *            result. Pass null to keep current setting.
					 * @param bIncludeFormattedValue Indicator whether or not to include the formatted value (if
					 *            available) in the query result. Pass null to keep current
					 *            setting.
					 * @param bIncludeUnit Indicator whether or not to include the unit (if available) in
					 *            the query result. Pass null to keep current setting.
					 */
					includeMeasureRawFormattedValueUnit(sMeasureName: any, bIncludeRawValue: any, bIncludeFormattedValue: any, bIncludeUnit: any);
					/**
					 * Remove one or more dimensions from the aggregation level. The method also
					 * removed a potential sort expression on the dimension.
					 * @param aDimensionName Array of dimension names to be removed from the already
					 *            defined aggregation level.
					 */
					removeFromAggregationLevel(aDimensionName: any);
					/**
					 * Set the aggregation level for the query result request. By default, the
					 * query result will include the properties holding the keys of the given
					 * dimensions. This setting can be changed using
					 * includeDimensionKeyTextAttributes.
					 * @param aDimensionName Array of dimension names to be part of the aggregation level.
					 *            If null, the aggregation level includes all dimensions, if
					 *            empty, no dimension is included.
					 */
					setAggregationLevel(aDimensionName: any);
					/**
					 * Set the filter expression for this request.
					 * 
					 * Expressions are represented by separate objects. Calling this method
					 * replaces the filter object maintained by this request.
					 * @param oFilter The filter object to be associated with this request.
					 */
					setFilterExpression(oFilter: FilterExpression);
					/**
					 * Set the measures to be included in the query result request. By default,
					 * the query result will include the properties holding the raw values of
					 * the given measures. This setting can be changed using
					 * includeMeasureRawFormattedValueUnit.
					 * @param aMeasureName Array of measure names to be part of the query result request.
					 *            If null, the request includes all measures, if empty, no
					 *            measure is included.
					 */
					setMeasures(aMeasureName: any);
					/**
					 * Set the parameterization request required for interactions with the query
					 * result of parameterized queries. This method provides an alternative way
					 * to assign a parameterization request to a query result request.
					 * @param oParameterizationRequest Request object for interactions with the parameterization of
					 *            this query
					 */
					setParameterizationRequest(oParameterizationRequest: any);
					/**
					 * Set further options to be applied for the OData request to fetch the
					 * query result
					 * @param bIncludeEntityKey Indicates whether or not the entity key
					 *            should be returned for every entry in the query result.
					 *            Default is not to include it. Pass null to keep current
					 *            setting.
					 * @param bIncludeCount Indicates whether or not the result shall
					 *            include a count for the returned entities. Default is not to
					 *            include it. Pass null to keep current setting.
					 * @param bReturnNoEntities Indicates whether or not the result shall
					 *            be empty. This will translate to $top=0 in the OData request and override
					 *            any setting done with setResultPageBoundaries. The default is not to
					 *            suppress entities in the result. Pass null to keep current setting.
					 *            The main use case for this option is to create a request
					 *            with $inlinecount returning an entity count.
					 */
					setRequestOptions(bIncludeEntityKey: boolean, bIncludeCount: boolean, bReturnNoEntities: boolean);
					/**
					 * Set the resource path to be considered for the OData request URI of this
					 * query request object. This method provides an alternative way to assign a
					 * path comprising a parameterization. If a path is provided, it overwrites
					 * any parameterization object that might have been specified separately.
					 * @param sResourcePath Resource path pointing to the entity set of the query result.
					 *            Must include a valid parameterization if query contains
					 *            parameters.
					 */
					setResourcePath(sResourcePath: any);
					/**
					 * Specify that only a page of the query result shall be returned. A page is
					 * described by its boundaries, that are row numbers for the first and last
					 * rows in the query result to be returned.
					 * @param start The first row of the query result to be returned.
					 *            Numbering starts at 1. Passing null is equivalent to start
					 *            with the first row.
					 * @param end The last row of the query result to be returned. Passing
					 *            null is equivalent to get all rows up to the end of the query
					 *            result.
					 */
					setResultPageBoundaries(start: number, end: number);
					/**
					 * Set the sort expression for this request.
					 * 
					 * Expressions are represented by separate objects. Calling this method
					 * replaces the sort object maintained by this request.
					 * @param oSorter The sort object to be associated with this request.
					 */
					setSortExpression(oSorter: SortExpression);
				}
			
				class RecursiveHierarchy  {
					/**
					 * Create a representation of a recursive hierarchy defined on one multiple
					 * properties in an OData entity type query. Do not create your own instances.
					 * @param oEntityType object for the entity type
					 * @param oNodeIDProperty DataJS object for the property holding the
					 *            hierarchy node ID identifying the hierarchy node to which the
					 *            OData entry belongs
					 * @param oParentNodeIDProperty DataJS object for the property holding the
					 *            node ID of the parent of the hierarchy node pointed to by the
					 *            value of oNodeIDProperty
					 * @param oNodeLevelProperty DataJS object for the property holding the
					 *            level number for the of the hierarchy node pointed to by the value
					 *            of oNodeIDProperty
					 * @param oNodeValueProperty DataJS object for the property holding the data
					 *            value for the of the hierarchy node pointed to by the value of
					 *            oNodeIDProperty
					 */
					constructor(oEntityType: any, oNodeIDProperty: any, oParentNodeIDProperty: any, oNodeLevelProperty: any, oNodeValueProperty: any);
					/**
					 * Get the property holding the node ID of the hierarchy node
					 * @return The DataJS object representing this property
					 */
					getNodeIDProperty(): any;
					/**
					 * Get the property holding the level of the hierarchy node
					 * @return The DataJS object representing this property
					 */
					getNodeLevelProperty(): any;
					/**
					 * Get the property holding the value that is structurally organized by the
					 * hierarchy
					 * @return The DataJS object representing this property
					 */
					getNodeValueProperty(): any;
					/**
					 * Get the property holding the parent node ID of the hierarchy node
					 * @return The DataJS object representing this property
					 */
					getParentNodeIDProperty(): any;
					/**
					 * Get indicator if this is a leveled hierarchy
					 * @return False
					 */
					isLeveledHierarchy(): boolean;
					/**
					 * Get indicator if this is a recursive hierarchy
					 * @return True
					 */
					isRecursiveHierarchy(): boolean;
				}
			
				class SortExpression  {
					/**
					 * Create a representation of an order by expression for a given entity type. It
					 * can be rendered as value for the $orderby system query option.
					 * @param oModel DataJS object for the OData model containing this entity
					 *            type
					 * @param oSchema DataJS object for the schema containing this entity type
					 * @param oEntityType object for the entity type
					 */
					constructor(oModel: any, oSchema: any, oEntityType: sap.ui.model.analytics.odata4analytics.EntityType);
					/**
					 * Add a condition to the order by expression. It replaces any previously specified
					 * sort order for the property.
					 * @param sPropertyName The name of the property bound in the condition
					 * @param sSortOrder sorting order used for the condition
					 * @return This object for method
					 *          chaining
					 */
					addSorter(sPropertyName: string, sSortOrder: SortOrder): SortExpression;
					/**
					 * Clear expression from any sort conditions that may have been set
					 * previously
					 */
					clear();
					/**
					 * Get description for this entity type
					 * @return The object representing the
					 *          entity type
					 */
					getEntityType(): EntityType;
					/**
					 * Get the first SAPUI5 Sorter object.
					 * @return first sorter object or null if empty
					 */
					getExpressionAsUI5Sorter(): sap.ui.model.Sorter;
					/**
					 * Get an array of SAPUI5 Sorter objects corresponding to this expression.
					 * @return List of sorter objects representing
					 *          this expression
					 */
					getExpressionsAsUI5SorterArray(): sap.ui.model.Sorter;
					/**
					 * Get the value for the OData system query option $orderby corresponding to
					 * this expression.
					 * @param oSelectedPropertyNames Object with properties requested for $select
					 * @return The $orderby value for the sort expressions
					 */
					getURIOrderByOptionValue(oSelectedPropertyNames: any): string;
					/**
					 * Removes the order by expression for the given property name from the list
					 * of order by expression. If no order by expression with this property name
					 * exists the method does nothing.
					 * @param sPropertyName The name of the property to be removed from the
					 *            condition
					 */
					removeSorter(sPropertyName: string);
				}
			
				class SortOrder {
				}
				/**
				 * Specify which components of the dimension shall be included in the value
				 * set.
				 * @param bIncludeText Indicator whether or not to include the dimension text (if
				 *            available) in the value set.
				 * @param bIncludeAttributes Indicator whether or not to include all dimension attributes
				 *            (if available) in the value set.
				 */
				function includeDimensionTextAttributes(bIncludeText: any, bIncludeAttributes: any);
			}
		
			class AnalyticalBinding extends sap.ui.model.TreeBinding {
				/**
				 * Creates a new subclass of class sap.ui.model.analytics.AnalyticalBinding with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.TreeBinding.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Sets filters for matching only a subset of the entities in the bound OData entity set.
				 * 
				 * Invoking this function resets the state of the binding. Subsequent data requests such as calls to getNodeContexts() will
				 * need to trigger OData requests in order to fetch the data that are in line with these filters.
				 * @param aFilter an Array of sap.ui.model.Filter objects or a single Filter instance.
				 * @param sFilterType Type of the filter which should be adjusted.(optional)
				 * @return returns <code>this</code> to facilitate method chaining
				 */
				filter(aFilter: sap.ui.model.Filter[]|sap.ui.model.Filter, sFilterType?: sap.ui.model.FilterType): AnalyticalBinding;
				/**
				 * Filters the tree according to the filter definitions.
				 * @note Overload from base type sap.ui.model.TreeBinding
				 * @param aFilters Array of sap.ui.model.Filter objects
				 * @param sFilterType Type of the filter which should be adjusted, if it is not given, the standard behaviour applies
				 */
				filter(aFilters: sap.ui.model.Filter[], sFilterType: sap.ui.model.FilterType);
				/**
				 * Gets the analytical information for a column with a given name.
				 * @param sColumnName the column name.
				 * @return analytical information for the column; see {@link #updateAnalyticalInfo}
				 *            for an explanation of the object structure
				 */
				getAnalyticalInfoForColumn(sColumnName: any): any;
				/**
				 * Gets analytical metadata for the bound OData entity set.
				 * @return analytical metadata for the bound OData entity set
				 */
				getAnalyticalQueryResult(): odata4analytics.QueryResult;
				/**
				 * Gets details about the dimension properties included in the bound OData entity set.
				 * @return details for every dimension property addressed by its name. The details object provides these properties: name of the dimension,
				 * keyPropertyName for the name of the property holding the dimension key, textPropertyName for the name of the property holding the
				 * text for the dimension, aAttributeName listing all properties holding dimension attributes, grouped as indicator whether or not this
				 * dimension is currently grouped, and analyticalInfo, which contains the binding information for this dimension passed from the
				 * AnalyticalBinding's consumer via call to function updateAnalyticalInfo.
				 */
				getDimensionDetails(): any;
				/**
				 * Get a download URL with the specified format considering the
				 * sort/filter/custom parameters.
				 * 
				 * The download URL also takes into account the selected dimensions and measures,
				 * depending on the given column definitions of the AnalyticalTable.
				 * This is based on the visible/inResult flags of the columns, as well as integrity dependencies,
				 * e.g. for mandatory Unit properties.
				 * @param sFormat Value for the $format Parameter
				 * @return URL which can be used for downloading
				 */
				getDownloadUrl(sFormat: string): string;
				/**
				 * Gets the names of the filterable properties in the bound OData entity set.
				 * @return names of properties that can be filtered.
				 */
				getFilterablePropertyNames(): any[];
				/**
				 * Gets a printable name for a group.
				 * 
				 * The printable name follows the pattern is <code>&lt;label&gt;:&lt;key-value&gt;[-&lt;text-value&gt;]</code>,
				 * where <code>label</code> is the label of the dimension property used at the aggregation level for the group,
				 * <code>key-value</code> is the key value of that dimension for the group, and <code>text-value</code> is the
				 * value of the associated text property, if it is also used in the binding.
				 * 
				 * Whenever a formatter function has been defined for a column displaying the key or text of this dimension, the return value
				 * of this function is applied for the group name instead of the respective key or text value.
				 * @param oContext the parent context identifying the requested group.
				 * @param iLevel the level number of oContext (because the context might occur at multiple levels)
				 * @return a printable name for the group.
				 */
				getGroupName(oContext: sap.ui.model.Context, iLevel: number): string;
				/**
				 * Gets the total number of contexts contained in a group, if known.
				 * 
				 * For a given group, be aware that the group size might vary over time. In principle, this can happen if the
				 * bound set of OData entities includes measure properties with amount or quantity values. The AnalyticalBinding
				 * recognizes situations where the OData service returns multiple entries for a single group entry due to the fact that a
				 * measure property cannot be aggregated properly, because an amount exists in multiple currencies or a quantity exists
				 * in multiple units. In such situations, the AnalyticalBinding substitutes these entries by a single representative, and
				 * the group size gets reduced by the count of duplicate entries. Finally, since the Binding does not always fetch all children of
				 * a group at once, but only a page with a certain range, such size changes might happen after every page access.
				 * @param oContext the parent context identifying the requested group of child contexts.
				 * @param iLevel the level number of oContext (because the context might occur at multiple levels)
				 * @return The currently known group size, or -1, if not yet determined
				 */
				getGroupSize(oContext: sap.ui.model.Context, iLevel: number): number;
				/**
				 * Gets details about the measure properties included in the bound OData entity set.
				 * @return details for every measure property addressed by its name. The details object provides these properties: name of the measure,
				 * rawValuePropertyName for the name of the property holding the raw value, unitPropertyName for the name of the property holding the related
				 * value unit or currency, if any, and analyticalInfo, which contains the binding information for this measure passed from the
				 * AnalyticalBinding's consumer via call to function updateAnalyticalInfo.
				 */
				getMeasureDetails(): any;
				/**
				 * Gets child contexts for a specified parent context.
				 * 
				 * Contexts are returned in a stable order imposed by the
				 * dimension property that defines this aggregation level beneath the parent context: Either a sort order has been specified for this property,
				 * or the entries are returned in ascending order of the values of this dimension property by default.
				 * 
				 * If any of the requested data is missing, an OData request will be triggered to load it.
				 * @param mParameters specifying the aggregation level for which contexts shall be fetched. Supported parameters are:
				 * <ul>
				 * <li>oContext: parent context identifying the requested group of child contexts</li>
				 * <li>level: level number for oContext, because it might occur at multiple levels; context with group ID <code>"/"</code> has level 0</li>
				 * <li>numberOfExpandedLevels: number of child levels that shall be fetched automatically</li>
				 * <li>startIndex: index of first child entry to return from the parent context (zero-based)</li>
				 * <li>length: number of entries to return; counting begins at the given start index</li>
				 * <li>threshold: number of additional entries that shall be locally available in the binding for subsequent
				 * accesses to child entries of the given parent context. </li>
				 * </ul>
				 * @return Array containing the requested contexts of class sap.ui.model.Context, limited by the number of entries contained
				 *            in the entity set at that aggregation level.
				 *            The array will contain less than the requested number of contexts, if some are not locally available and an OData request is
				 *            pending to fetch them. In this case, if the parameter numberOfExpandedLevels > 0, the array will be completely empty.
				 */
				getNodeContexts(mParameters: any): any[];
				/**
				 * Returns the current value of the bound target
				 * @note Overload from base type sap.ui.model.TreeBinding
				 * @param oContext the context element of the node
				 * @param iStartIndex the startIndex where to start the retrieval of contexts
				 * @param iLength determines how many contexts to retrieve beginning from the start index.
				 * @return the array of child contexts for the given node
				 */
				getNodeContexts(oContext: any, iStartIndex: number, iLength: number): any[];
				/**
				 * Gets the metadata of a property with a given name.
				 * @param sPropertyName The property name.
				 * @return OData metadata of this property or null if it does not exist.
				 */
				getProperty(sPropertyName: string): any;
				/**
				 * Gets the label of a property with a given name.
				 * @param sPropertyName The property name.
				 * @return The heading maintained for this property or null if it does not exist.
				 */
				getPropertyHeading(sPropertyName: string): string;
				/**
				 * Gets the label of a property with a given name.
				 * @param sPropertyName The property name.
				 * @return The label maintained for this property or null if it does not exist.
				 */
				getPropertyLabel(sPropertyName: string): string;
				/**
				 * Gets the quick info of a property with a given name.
				 * @param sPropertyName The property name.
				 * @return The quick info maintained for this property or null if it does not exist.
				 */
				getPropertyQuickInfo(sPropertyName: string): string;
				/**
				 * Gets the context for the root aggregation level representing the grand total for all bound measure properties.
				 * 
				 * The context is assigned to parent group ID <code>null</code>. If the binding is configured not to provide a grand total,
				 * this context is empty. If data for this context is not locally available yet, an OData request will be triggered to load it.
				 * 
				 * This function must be called whenever the bound set of OData entities changes, e.g., by changing selected dimensions,
				 * modifying filter conditions, etc.
				 * @param mParameters specifying how the top-most aggregation level shall be fetched. Supported parameters are:
				 * <ul>
				 * <li>numberOfExpandedLevels: number of child levels that shall be fetched automatically</li>
				 * <li>startIndex: index of first entry to return from parent group ID <code>"/"</code> (zero-based)</li>
				 * <li>length: number of entries to return at and after the given start index</li>
				 * <li>threshold: number of additional entries that shall be locally available in the binding for subsequent
				 * accesses to contexts of parent group ID <code>"/"</code> or below, if auto-expanding is selected</li>
				 * </ul>
				 * @return Array with a single object of class sap.ui.model.Context for the root context,
				 *            or an empty array if an OData request is pending to fetch requested contexts that are not yet locally available.
				 */
				getRootContexts(mParameters: any): any[];
				/**
				 * Returns the current value of the bound target
				 * @note Overload from base type sap.ui.model.TreeBinding
				 * @param iStartIndex the startIndex where to start the retrieval of contexts
				 * @param iLength determines how many contexts to retrieve beginning from the start index.
				 * @return the array of child contexts for the root node
				 */
				getRootContexts(iStartIndex: number, iLength: number): any[];
				/**
				 * Gets the names of the sortable properties in the bound OData entity set.
				 * @return names of properties that can be used for sorting the result entities.
				 */
				getSortablePropertyNames(): any[];
				/**
				 * Gets the total number of entities in the bound OData entity set.
				 * 
				 * Counting takes place at the lowest aggregation level defined by the possible value combinations for the complete set of
				 * dimension properties included in the bound entity set. This means that intermediate aggregate entities with
				 * sub-totals at higher aggregation levels are not counted.
				 * @return the total number of addressed entities in the OData entity set
				 */
				getTotalSize(): number;
				/**
				 * Determines if the binding has the entries of a given aggregation level locally available.
				 * 
				 * If so, no further OData request is required to fetch any of them.
				 * @param oContext the parent context identifying the aggregation level.
				 * @param iLevel the level number of oContext (because the context might occur at multiple levels).
				 * @return property of sap.ui.model.analytics.AnalyticalBinding.ContextsAvailabilityStatus,
				 * indicating whether all, some, or none of the entries are locally available.
				 */
				hasAvailableNodeContexts(oContext: sap.ui.model.Context, iLevel: number): boolean;
				/**
				 * Determines if the contexts in a specified group have further children. If so,
				 * any of these group contexts can be a parent context of a nested sub-group in
				 * a subsequent aggregation level.
				 * @param oContext the parent context identifying the requested group of child contexts.
				 * @param mParameters The only supported parameter is level as the level number of oContext (because the context might occur at multiple levels)
				 * @return true if and only if the contexts in the specified group have further children.
				 */
				hasChildren(oContext: sap.ui.model.Context, mParameters: any): boolean;
				/**
				 * Returns if the node has child nodes
				 * @note Overload from base type sap.ui.model.TreeBinding
				 * @param oContext the context element of the node
				 * @return true if node has children
				 */
				hasChildren(oContext: any): boolean;
				/**
				 * Determines if any of the properties included in the bound OData entity set is a measure property.
				 * @return true if and only one or more properties are measure properties.
				 */
				hasMeasures(): boolean;
				/**
				 * Determines if a given name refers to a measure property
				 * @param sPropertyName The property name.
				 * @return true if and only if the bound OData entity set includes a measure property with this name.
				 */
				isMeasure(sPropertyName: string): boolean;
				/**
				 * Loads child contexts of multiple groups.
				 * @param mGroupIdRanges specifies index ranges of child contexts to be loaded for multiple groups identified by their ID. A group index range is
				 *            given by an object consisting of startIndex, length, threshold. For every group ID, the map holds an array of such range objects.
				 */
				loadGroups(mGroupIdRanges: any);
				/**
				 * Determines if the binding has been configured to provide a grand total for the selected measure properties.
				 * @return true if and only if the binding provides a context for the grand totals of all selected measure properties.
				 */
				providesGrandTotal(): boolean;
				/**
				 * Refreshes the binding, check whether the model data has been changed and fire change event if this is the case. For service side models this should refetch
				 * the data from the service. To update a control, even if no data has been changed, e.g. to reset a control after failed validation, please use the parameter
				 * bForceUpdate.
				 * @param bForceUpdate Update the bound control even if no data has been changed(optional)
				 */
				refresh(bForceUpdate?: boolean);
				/**
				 * Refreshes the binding, check whether the model data has been changed and fire change event
				 * if this is the case. For server side models this should refetch the data from the server.
				 * To update a control, even if no data has been changed, e.g. to reset a control after failed
				 * validation, please use the parameter bForceUpdate.
				 * @note Overload from base type sap.ui.model.Binding
				 * @param bForceUpdate Update the bound control even if no data has been changed
				 */
				refresh(bForceUpdate: boolean);
				/**
				 * Sets sorters for retrieving the entities in the bound OData entity set in a specific order.
				 * 
				 * Invoking this function resets the state of the binding. Subsequent data requests such as calls to getNodeContexts() will
				 * need to trigger OData requests in order to fetch the data that are in line with these sorters.
				 * @param aSorter an sorter object or an array of sorter objects which define the sort order.
				 * @return returns <code>this</code> to facilitate method chaining.
				 */
				sort(aSorter: sap.ui.model.Sorter|any[]): AnalyticalBinding;
				/**
				 * Sorts the tree according to the sorter definitions.
				 * @note Overload from base type sap.ui.model.TreeBinding
				 * @param aSorters Array of sap.ui.model.Sorter objects
				 */
				sort(aSorters: sap.ui.model.Sorter[]);
				/**
				 * Updates the binding's structure with new analytical information.
				 * 
				 * Analytical information is the mapping of UI columns to properties in the bound OData entity set. Every column object contains
				 * the name of the bound property and in addition:
				 * <ol>
				 *   <li>A column bound to a dimension property has further boolean properties:
				 *     <ul>
				 *       <li>grouped: dimension will be used for building groups</li>
				 *       <li>visible: if the column is visible, values for the related property will be fetched from the OData service</li>
				 *       <li>inResult: if the column is not visible, but declared to be part of the result, values for the related property
				 *       will also be fetched from the OData service</li>
				 *     </ul>
				 *   </li>
				 *   <li>A column bound to a measure property has further boolean properties:
				 *     <ul>
				 *       <li>total: totals and sub-totals will be provided for the measure at all aggregation levels</li>
				 *     </ul>
				 *   </li>
				 * </ol>
				 * 
				 * Invoking this function resets the state of the binding and subsequent data requests such as calls to getNodeContexts() will
				 * need to trigger OData requests in order to fetch the data that are in line with this analytical information.
				 * 
				 * Please be aware that a call of this function might lead to additional back-end requests, as well as a control re-rendering later on.
				 * Whenever possible use the API of the analytical control, instead of relying on the binding.
				 * @param aColumns an array with objects holding the analytical information for every column, from left to right.
				 */
				updateAnalyticalInfo(aColumns: any[]);
			}
		
			class AnalyticalTreeBindingAdapter  {
				/**
				 * Retrieves the currently set number of expanded levels from the Binding (commonly an AnalyticalBinding).
				 * @return the number of expanded levels
				 */
				getNumberOfExpandedLevels(): number;
				/**
				 * Checks if the AnalyticalBinding has totaled measures available.
				 * Used for rendering sum rows.
				 * @return wether the binding has totaled measures or not
				 */
				hasTotaledMeasures(): boolean;
				/**
				 * Sets the number of expanded levels on the TreeBinding (commonly an AnalyticalBinding).
				 * This is NOT the same as AnalyticalTreeBindingAdapter#collapse or AnalyticalTreeBindingAdapter#expand.
				 * Setting the number of expanded levels leads to different requests.
				 * This function is used by the AnalyticalTable for the ungroup/ungroup-all feature.
				 * @param iLevels the number of levels which should be expanded, minimum is 0
				 */
				setNumberOfExpandedLevels(iLevels: number);
			}
		
			class BatchResponseCollector  {
				/**
				 * Constructor for a batch response collecting component.
				 * @param mParams optional Setup-Parameter, @see BatchResponseCollector#setup(optional)
				 */
				constructor(mParams?: any);
				/**
				 * Collects responses of type BatchResponseCollector.TYPE_SUCCESS and BatchResponseCollector.TYPE_ERROR.
				 * 
				 * Keeps track of all collected responses and fires the necessary events after all responses for the
				 * requests, given in the constructor, have returned.
				 * @param oResponse the response which should be collected
				 * @param sResponseType the type of the response, either BatchResponseCollector.TYPE_SUCCESS
				 * 									or BatchResponseCollector.TYPE_ERROR(optional)
				 */
				collect(oResponse: any, sResponseType?: string);
				/**
				 * Convenience function to collect an error response.
				 * 
				 * Internally BatchResponseCollector#collect is called, the second parameter is set to BatchResponseCollector.TYPE_ERROR
				 * @param oResponse the erroneous response object
				 */
				error(oResponse: any);
				/**
				 * Setup-Function to initialize/reset the BatchResponseCollector.
				 * @param mParams optional Setup-Parameter(optional)
				 */
				setup(mParams?: any);
				/**
				 * Convenience function to collect a success response.
				 * 
				 * Internally BatchResponseCollector#collect is called with second parameter BatchResponseCollector.TYPE_SUCCESS
				 * @param oResponse the successful response, which should be collected
				 */
				success(oResponse: any);
			}
			/**
			 * If called on an instance of an (v1/v2) ODataModel it will enrich it with analytics capabilities.
			 */
			function ODataModelAdapter();
		}
	
		/**
		 * Change Reason for Model/ListBinding/TreeBinding.
		 */
		namespace ChangeReason {
			/**
			 * A context was added to a binding.
			 */
			var Add: any;
			/**
			 * Binding changes a model property value
			 */
			var Binding: any;
			/**
			 * The list has changed
			 */
			var Change: any;
			/**
			 * The tree node was collapsed
			 */
			var Collapse: any;
			/**
			 * The list context has changed
			 */
			var Context: any;
			/**
			 * The tree node was expanded
			 */
			var Expand: any;
			/**
			 * The List was filtered
			 */
			var Filter: any;
			/**
			 * The list was refreshed
			 */
			var Refresh: any;
			/**
			 * The list was sorted
			 */
			var Sort: any;
		}
	
		/**
		 * Control-based DataBinding
		 */
		namespace control {
		}
	
		/**
		 * JSON-based DataBinding
		 */
		namespace json {
		
			class JSONModel extends sap.ui.model.ClientModel {
				/**
				 * Constructor for a new JSONModel.
				 * @param oData either the URL where to load the JSON from or a JS object
				 * @param bObserve whether to observe the JSON data for property changes (experimental)
				 */
				constructor(oData: any, bObserve: boolean);
				/**
				 * Creates a new subclass of class sap.ui.model.json.JSONModel with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.ClientModel.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Serializes the current JSON data of the model into a string.
				 * Note: May not work in Internet Explorer 8 because of lacking JSON support (works only if IE 8 mode is enabled)
				 * @return sJSON the JSON data serialized as string
				 */
				getJSON(): string;
				/**
				 * Returns the value for the property with the given <code>sPropertyName</code>
				 * @param sPath the path to the property
				 * @param oContext the context which will be used to retrieve the property(optional)
				 * @return the value of the property
				 */
				getProperty(sPath: string, oContext?: any): any;
				/**
				 * Implement in inheriting classes
				 * @note Overload from base type sap.ui.model.Model
				 * @param sPath the path to where to read the attribute value
				 * @param oContext the context with which the path should be resolved(optional)
				 */
				getProperty(sPath: string, oContext?: any);
				/**
				 * Load JSON-encoded data from the server using a GET HTTP request and store the resulting JSON data in the model.
				 * Note: Due to browser security restrictions, most "Ajax" requests are subject to the same origin policy,
				 * the request can not successfully retrieve data from a different domain, subdomain, or protocol.
				 * @param sURL A string containing the URL to which the request is sent.
				 * @param oParameters A map or string that is sent to the server with the request.
				 * Data that is sent to the server is appended to the URL as a query string.
				 * If the value of the data parameter is an object (map), it is converted to a string and
				 * url-encoded before it is appended to the URL.(optional)
				 * @param bAsync By default, all requests are sent asynchronous
				 * (i.e. this is set to true by default). If you need synchronous requests, set this option to false.
				 * Cross-domain requests do not support synchronous operation. Note that synchronous requests may
				 * temporarily lock the browser, disabling any actions while the request is active.(optional)
				 * @param sType The type of request to make ("POST" or "GET"), default is "GET".
				 * Note: Other HTTP request methods, such as PUT and DELETE, can also be used here, but
				 * they are not supported by all browsers.(optional)
				 * @param bMerge whether the data should be merged instead of replaced(optional)
				 * @param bCache force no caching if false. Default is false(optional)
				 * @param mHeaders An object of additional header key/value pairs to send along with the request(optional)
				 */
				loadData(sURL: string, oParameters?: any|string, bAsync?: boolean, sType?: string, bMerge?: boolean, bCache?: string, mHeaders?: any);
				/**
				 * Sets the JSON encoded data to the model.
				 * @param oData the data to set on the model
				 * @param bMerge whether to merge the data instead of replacing it(optional)
				 */
				setData(oData: any, bMerge?: boolean);
				/**
				 * Sets the JSON encoded string data to the model.
				 * @param sJSONText the string data to set on the model
				 * @param bMerge whether to merge the data instead of replacing it(optional)
				 */
				setJSON(sJSONText: string, bMerge?: boolean);
				/**
				 * Sets a new value for the given property <code>sPropertyName</code> in the model.
				 * If the model value changed all interested parties are informed.
				 * @param sPath path of the property to set
				 * @param oValue value to set the property to
				 * @param oContext the context which will be used to set the property(optional)
				 * @param bAsyncUpdate whether to update other bindings dependent on this property asynchronously(optional)
				 * @return true if the value was set correctly and false if errors occurred like the entry was not found.
				 */
				setProperty(sPath: string, oValue: any, oContext?: any, bAsyncUpdate?: boolean): boolean;
			}
		}
	
		/**
		 * Message DataBinding
		 */
		namespace message {
		
			class MessageModel extends sap.ui.model.ClientModel {
				/**
				 * Constructor for a new JSONModel.
				 * @param oMessageManager The MessageManager instance
				 */
				constructor(oMessageManager: sap.ui.core.message.MessageManager);
				/**
				 * Creates a new subclass of class sap.ui.model.message.MessageModel with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.ClientModel.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Returns the value for the property with the given <code>sPropertyName</code>
				 * @param sPath the path to the property
				 * @param oContext the context which will be used to retrieve the property(optional)
				 * @return the value of the property
				 */
				getProperty(sPath: string, oContext?: any): any;
				/**
				 * Implement in inheriting classes
				 * @note Overload from base type sap.ui.model.Model
				 * @param sPath the path to where to read the attribute value
				 * @param oContext the context with which the path should be resolved(optional)
				 */
				getProperty(sPath: string, oContext?: any);
				/**
				 * Sets the message data to the model.
				 * @param oData the data to set on the model
				 */
				setData(oData: any);
				/**
				 * Sets a new value for the given property <code>sPropertyName</code> in the model.
				 * If the model value changed all interested parties are informed.
				 * @param sPath path of the property to set
				 * @param oValue value to set the property to
				 * @param oContext the context which will be used to set the property(optional)
				 */
				setProperty(sPath: string, oValue: any, oContext?: any);
			}
		}
	
		/**
		 * OData-based DataBinding Utility Class
		 */
		namespace odata {
		
			/**
			 * A collection of methods which help to consume
			 * <a href="http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part3-csdl.html">
			 * OData V4 annotations</a> in XML template views. Every context argument must belong to a
			 * <code>sap.ui.model.odata.ODataMetaModel</code> instance.
			 * 
			 * Formatter functions like {@link #.format format} and {@link #.simplePath simplePath} can
			 * be used in complex bindings to turn OData V4 annotations into texts or data bindings,
			 * e.g. <code>&lt;sfi:SmartField value="{path : 'meta>Value', formatter :
			 * 'sap.ui.model.odata.AnnotationHelper.simplePath'}"/></code>.
			 * 
			 * Helper functions like {@link #.resolvePath resolvePath} can be used by template
			 * instructions in XML template views, e.g. <code>&lt;template:with path="meta>Value"
			 * helper="sap.ui.model.odata.AnnotationHelper.resolvePath" var="target"></code>.
			 * 
			 * Since 1.31.0, you DO NOT need to {@link jQuery.sap.require} this module before use.
			 */
			namespace AnnotationHelper {
				/**
				 * Creates a property setting (which is either a constant value or a binding info
				 * object) from the given parts and from the optional root formatter function.
				 * Each part can have one of the following types:
				 * <ul>
				 *   <li><code>boolean</code>, <code>number</code>, <code>undefined</code>: The part is
				 *   a constant value.
				 * 
				 *   <li><code>string</code>: The part is a data binding expression with complex
				 *   binding syntax (for example, as created by {@link #.format format}) and is parsed
				 *   accordingly to create either a constant value or a binding info object. Proper
				 *   backslash escaping must be used for constant values with curly braces.
				 * 
				 *   <li><code>object</code>: The part is a binding info object if it has a "path" or
				 *   "parts" property, otherwise it is a constant value.
				 * </ul>
				 * If a binding info object is not the only part and has a "parts" property itself,
				 * then it must have no other properties except "formatter"; this is the case for
				 * expression bindings and data binding expressions created by {@link #.format format}.
				 * 
				 * If all parts are constant values, the resulting property setting is also a constant
				 * value computed by applying the root formatter function to the constant parts once.
				 * If at least one part is a binding info object, the resulting property setting is
				 * also a binding info object and the root formatter function will be applied again and
				 * again to the current values of all parts, no matter whether constant or variable.
				 * 
				 * Note: The root formatter function should not rely on its <code>this</code> value
				 * because it depends on how the function is called.
				 * 
				 * Note: A single data binding expression can be given directly to
				 * {@link sap.ui.base.ManagedObject#applySettings applySettings}, no need to call this
				 * function first.
				 * 
				 * Example:
				 * <pre>
				 * function myRootFormatter(oValue1, oValue2, sFullName, sGreeting, iAnswer) {
				 *     return ...; //TODO compute something useful from the given values
				 * }
				 * 
				 * oSupplierContext = oMetaModel.getMetaContext("/ProductSet('HT-1021')/ToSupplier");
				 * oValueContext = oMetaModel.createBindingContext("com.sap.vocabularies.UI.v1.DataPoint/Value", oSupplierContext);
				 * 
				 * vPropertySetting =  sap.ui.model.odata.AnnotationHelper.createPropertySetting([
				 *     sap.ui.model.odata.AnnotationHelper.format(oValueContext),
				 *     "{path : 'meta>Value', formatter : 'sap.ui.model.odata.AnnotationHelper.simplePath'}",
				 *     "{:= 'Mr. ' + ${/FirstName} + ' ' + ${/LastName}}",
				 *     "hello, world!",
				 *     42
				 * ], myRootFormatter);
				 * 
				 * oControl.applySettings({"someProperty" : vPropertySetting});
				 * </pre>
				 * @param vParts array of parts
				 * @param fnRootFormatter root formatter function; default: <code>Array.prototype.join(., " ")</code>
				 *   in case of multiple parts, just like
				 *   {@link sap.ui.model.CompositeBinding#getExternalValue getExternalValue}(optional)
				 * @return constant value or binding info object for a property as expected by
				 *   {@link sap.ui.base.ManagedObject#applySettings applySettings}
				 */
				function createPropertySetting(vParts: any[], fnRootFormatter?: any): any;
				/**
				 * A formatter function to be used in a complex binding inside an XML template view
				 * in order to interpret OData V4 annotations. It knows about
				 * <ul>
				 *   <li> the "14.4 Constant Expressions" for "edm:Bool", "edm:Date",
				 *   "edm:DateTimeOffset", "edm:Decimal", "edm:Float", "edm:Guid", "edm:Int",
				 *   "edm:TimeOfDay".
				 *   <li> the constant "14.4.11 Expression edm:String": This is turned into a fixed
				 *   text (e.g. <code>"Width"</code>) or into a data binding expression (e.g. <code>
				 *   "{/##/dataServices/schema/0/entityType/1/com.sap.vocabularies.UI.v1.FieldGroup#Dimensions/Data/0/Label/String}"
				 *   </code>). Data binding expressions are used in case XML template processing has
				 *   been started with the setting <code>bindTexts : true</code>. The purpose is to
				 *   reference translatable texts from OData V4 annotations, especially for XML
				 *   template processing at design time. Since 1.31.0, string constants that contain a
				 *   simple binding <code>"{@i18n>...}"</code> to the hard-coded model name "@i18n"
				 *   with arbitrary path are not turned into a fixed text, but kept as a data binding
				 *   expression; this allows local annotation files to refer to a resource bundle for
				 *   internationalization.
				 *   <li> the dynamic "14.5.1 Comparison and Logical Operators": These are turned into
				 *   expression bindings to perform the operations at run-time.
				 *   <li> the dynamic "14.5.3 Expression edm:Apply":
				 *   <ul>
				 *     <li> "14.5.3.1.1 Function odata.concat": This is turned into a data binding
				 *     expression relative to an entity.
				 *     <li> "14.5.3.1.2 Function odata.fillUriTemplate": This is turned into an
				 *     expression binding to fill the template at run-time.
				 *     <li> "14.5.3.1.3 Function odata.uriEncode": This is turned into an expression
				 *     binding to encode the parameter at run-time.
				 *     <li> Apply functions may be nested arbitrarily.
				 *   </ul>
				 *   <li> the dynamic "14.5.6 Expression edm:If": This is turned into an expression
				 *   binding to be evaluated at run-time. The expression is a conditional expression
				 *   like <code>"{=condition ? expression1 : expression2}"</code>.
				 *   <li> the dynamic "14.5.10 Expression edm:Null": This is turned into a
				 *   <code>null</code> value. In <code>odata.concat</code> it is ignored.
				 *   <li> the dynamic "14.5.12 Expression edm:Path" and "14.5.13 Expression
				 *   edm:PropertyPath": This is turned into a data binding relative to an entity,
				 *   including type information and constraints as available from meta data,
				 *   e.g. <code>"{path : 'Name', type : 'sap.ui.model.odata.type.String',
				 *   constraints : {'maxLength':'255'}}"</code>.
				 *   Depending on the used type, some additional constraints of this type are set:
				 *   <ul>
				 *     <li>Edm.DateTime: The "displayFormat" constraint is set to the value of the
				 *     "sap:display-format" annotation of the referenced property.
				 *     <li>Edm.Decimal: The "precision" and "scale" constraints are set to the values
				 *     of the corresponding attributes of the referenced property.
				 *     <li>Edm.String: The "maxLength" constraint is set to the value of the
				 *     corresponding attribute of the referenced property and the "isDigitSequence"
				 *     constraint is set to the value of the
				 *     "com.sap.vocabularies.Common.v1.IsDigitSequence" annotation of the referenced
				 *     property.
				 *   </ul>
				 * </ul>
				 * Unsupported or incorrect values are turned into a string nevertheless, but indicated
				 * as such. Proper escaping is used to make sure that data binding syntax is not
				 * corrupted. An error describing the problem is logged to the console in such a case.
				 * 
				 * Example:
				 * <pre>
				 * &lt;Text text="{path: 'meta>Value', formatter: 'sap.ui.model.odata.AnnotationHelper.format'}" />
				 * </pre>
				 * @param oInterface the callback interface related to the current formatter call
				 * @param vRawValue the raw value from the meta model, which is embedded within an entity set or
				 *   entity type:
				 *   <ul>
				 *   <li>if this function is used as formatter the value
				 *   is provided by the framework</li>
				 *   <li>if this function is called directly, provide the parameter only if it is
				 *   already calculated</li>
				 *   <li>if the parameter is omitted, it is calculated automatically through
				 *   <code>oInterface.getObject("")</code></li>
				 *   </ul>(optional)
				 * @return the resulting string value to write into the processed XML
				 */
				function format(oInterface: sap.ui.core.util.XMLPreprocessor.IContext|sap.ui.model.Context, vRawValue?: any): string;
				/**
				 * A formatter function to be used in a complex binding inside an XML template view
				 * in order to interpret OData V4 annotations. It knows about the following dynamic
				 * expressions:
				 * <ul>
				 * <li>"14.5.2 Expression edm:AnnotationPath"</li>
				 * <li>"14.5.11 Expression edm:NavigationPropertyPath"</li>
				 * <li>"14.5.12 Expression edm:Path"</li>
				 * <li>"14.5.13 Expression edm:PropertyPath"</li>
				 * </ul>
				 * It returns a binding expression for a navigation path in an OData model, starting at
				 * an entity.
				 * Currently supports navigation properties. Term casts and annotations of
				 * navigation properties terminate the navigation path.
				 * 
				 * Examples:
				 * <pre>
				 * &lt;template:if test="{path: 'facet>Target', formatter: 'sap.ui.model.odata.AnnotationHelper.getNavigationPath'}">
				 *     &lt;form:SimpleForm binding="{path: 'facet>Target', formatter: 'sap.ui.model.odata.AnnotationHelper.getNavigationPath'}" />
				 * &lt;/template:if>
				 * </pre>
				 * @param oInterface the callback interface related to the current formatter call
				 * @param vRawValue the raw value from the meta model, e.g. <code>{AnnotationPath :
				 *   "ToSupplier/@com.sap.vocabularies.Communication.v1.Address"}</code> or <code>
				 *   {AnnotationPath : "@com.sap.vocabularies.UI.v1.FieldGroup#Dimensions"}</code>;
				 *   embedded within an entity set or entity type;
				 *   <ul>
				 *   <li>if this function is used as formatter the value
				 *   is provided by the framework</li>
				 *   <li>if this function is called directly, provide the parameter only if it is
				 *   already calculated</li>
				 *   <li>if the parameter is omitted, it is calculated automatically through
				 *   <code>oInterface.getObject("")</code></li>
				 *   </ul>(optional)
				 * @return the resulting string value to write into the processed XML, e.g. "{ToSupplier}"
				 *   or "{}" (in case no navigation is needed); returns "" in case the navigation path
				 *   cannot be determined (this is treated as falsy in <code>template:if</code>
				 *   statements!)
				 */
				function getNavigationPath(oInterface: sap.ui.core.util.XMLPreprocessor.IContext|sap.ui.model.Context, vRawValue?: any): string;
				/**
				 * Helper function for a <code>template:with</code> instruction that depending on how
				 * it is called goes to the entity set with the given name or to the one determined
				 * by the last navigation property. Supports the following dynamic expressions:
				 * <ul>
				 * <li>"14.5.2 Expression edm:AnnotationPath"</li>
				 * <li>"14.5.11 Expression edm:NavigationPropertyPath"</li>
				 * <li>"14.5.12 Expression edm:Path"</li>
				 * <li>"14.5.13 Expression edm:PropertyPath"</li>
				 * </ul>
				 * 
				 * Example:
				 * <pre>
				 *   &lt;template:with path="facet>Target" helper="sap.ui.model.odata.AnnotationHelper.gotoEntitySet" var="entitySet"/>
				 *   &lt;template:with path="associationSetEnd>entitySet" helper="sap.ui.model.odata.AnnotationHelper.gotoEntitySet" var="entitySet"/>
				 * </pre>
				 * @param oContext a context which must point to a simple string or to an annotation (or annotation
				 *   property) of type <code>Edm.AnnotationPath</code>,
				 *   <code>Edm.NavigationPropertyPath</code>, <code>Edm.Path</code>, or
				 *   <code>Edm.PropertyPath</code> embedded within an entity set or entity type;
				 *   the context's model must be an {@link sap.ui.model.odata.ODataMetaModel}
				 * @return the path to the entity set, or <code>undefined</code> if no such set is found. In
				 *   this case, a warning is logged to the console.
				 */
				function gotoEntitySet(oContext: sap.ui.model.Context): string;
				/**
				 * Helper function for a <code>template:with</code> instruction that goes to the
				 * entity type with the qualified name which <code>oContext</code> points at.
				 * 
				 * Example: Assume that "entitySet" refers to an entity set within an OData meta model;
				 * the helper function is then called on the "entityType" property of that entity set
				 * (which holds the qualified name of the entity type) and in turn the path of that
				 * entity type is assigned to the variable "entityType".
				 * <pre>
				 *   &lt;template:with path="entitySet>entityType" helper="sap.ui.model.odata.AnnotationHelper.gotoEntityType" var="entityType">
				 * </pre>
				 * @param oContext a context which must point to the qualified name of an entity type;
				 *   the context's model must be an {@link sap.ui.model.odata.ODataMetaModel}
				 * @return the path to the entity type with the given qualified name,
				 *   or <code>undefined</code> if no such type is found. In this case, a warning is
				 *   logged to the console.
				 */
				function gotoEntityType(oContext: sap.ui.model.Context): string;
				/**
				 * Helper function for a <code>template:with</code> instruction that goes to the
				 * function import with the name which <code>oContext</code> points at.
				 * 
				 * Example: Assume that "dataField" refers to a DataFieldForAction within an
				 * OData meta model;
				 * the helper function is then called on the "Action" property of that data field
				 * (which holds an object with the qualified name of the function import in the
				 * <code>String</code> property) and in turn the path of that function import
				 * is assigned to the variable "function".
				 * <pre>
				 *   &lt;template:with path="dataField>Action"
				 *   helper="sap.ui.model.odata.AnnotationHelper.gotoFunctionImport" var="function">
				 * </pre>
				 * @param oContext a context which must point to an object with a <code>String</code> property, which
				 *   holds the qualified name of the function import;
				 *   the context's model must be an {@link sap.ui.model.odata.ODataMetaModel}
				 * @return the path to the function import with the given qualified name,
				 *   or <code>undefined</code> if no function import is found. In this case, a warning
				 *   is logged to the console.
				 */
				function gotoFunctionImport(oContext: sap.ui.model.Context): string;
				/**
				 * A formatter function to be used in a complex binding inside an XML template view
				 * in order to interpret OData V4 annotations. It knows about the following dynamic
				 * expressions:
				 * <ul>
				 * <li>"14.5.2 Expression edm:AnnotationPath"</li>
				 * <li>"14.5.11 Expression edm:NavigationPropertyPath"</li>
				 * <li>"14.5.12 Expression edm:Path"</li>
				 * <li>"14.5.13 Expression edm:PropertyPath"</li>
				 * </ul>
				 * It returns the information whether the navigation path ends with an association end
				 * with multiplicity "*". It throws an error if the navigation path has an association
				 * end with multiplicity "*" which is not the last one.
				 * Currently supports navigation properties. Term casts and annotations of
				 * navigation properties terminate the navigation path.
				 * 
				 * Examples:
				 * <pre>
				 * &lt;template:if test="{path: 'facet>Target', formatter: 'sap.ui.model.odata.AnnotationHelper.isMultiple'}">
				 * </pre>
				 * @param oInterface the callback interface related to the current formatter call
				 * @param vRawValue the raw value from the meta model, e.g. <code>{AnnotationPath :
				 *   "ToSupplier/@com.sap.vocabularies.Communication.v1.Address"}</code> or <code>
				 *   {AnnotationPath : "@com.sap.vocabularies.UI.v1.FieldGroup#Dimensions"}</code>;
				 *   embedded within an entity set or entity type;
				 *   <ul>
				 *   <li>if this function is used as formatter the value
				 *   is provided by the framework</li>
				 *   <li>if this function is called directly, provide the parameter only if it is
				 *   already calculated</li>
				 *   <li>if the parameter is omitted, it is calculated automatically through
				 *   <code>oInterface.getObject("")</code></li>
				 *   </ul>(optional)
				 * @return <code>"true"</code> if the navigation path ends with an association end with
				 *    multiplicity "*", <code>""</code> in case the navigation path cannot be
				 *    determined, <code>"false"</code> otherwise (the latter are both treated as falsy
				 *    in <code>template:if</code> statements!)
				 */
				function isMultiple(oInterface: sap.ui.core.util.XMLPreprocessor.IContext|sap.ui.model.Context, vRawValue?: any): string;
				/**
				 * Helper function for a <code>template:with</code> instruction that resolves a dynamic
				 * "14.5.2 Expression edm:AnnotationPath",
				 * "14.5.11 Expression edm:NavigationPropertyPath", "14.5.12 Expression edm:Path" or
				 * "14.5.13 Expression edm:PropertyPath".
				 * Currently supports navigation properties and term casts.
				 * 
				 * Example:
				 * <pre>
				 *   &lt;template:with path="meta>Value" helper="sap.ui.model.odata.AnnotationHelper.resolvePath" var="target">
				 * </pre>
				 * @param oContext a context which must point to an annotation or annotation property of type
				 *   <code>Edm.AnnotationPath</code>, <code>Edm.NavigationPropertyPath</code>,
				 *   <code>Edm.Path</code> or <code>Edm.PropertyPath</code>, embedded within an entity
				 *   set or entity type;
				 *   the context's model must be an {@link sap.ui.model.odata.ODataMetaModel}
				 * @return the path to the target, or <code>undefined</code> in case the path cannot be
				 *   resolved. In this case, a warning is logged to the console.
				 */
				function resolvePath(oContext: sap.ui.model.Context): string;
				/**
				 * Formatter function that is used in a complex binding inside an XML template view.
				 * The function is used to interpret OData V4 annotations, supporting the same
				 * annotations as {@link #.format format} but with a simplified output aimed at
				 * design-time templating with smart controls.
				 * 
				 * In contrast to <code>format</code>, "14.5.12 Expression edm:Path" or
				 * "14.5.13 Expression edm:PropertyPath" is turned into a simple binding path without
				 * type or constraint information. In certain cases, a complex binding is required to
				 * allow for proper escaping of the path.
				 * 
				 * Example:
				 * <pre>
				 *   &lt;sfi:SmartField value="{path: 'meta>Value', formatter: 'sap.ui.model.odata.AnnotationHelper.simplePath'}"/>
				 * </pre>
				 * @param oInterface the callback interface related to the current formatter call
				 * @param vRawValue the raw value from the meta model, which is embedded within an entity set or
				 *   entity type:
				 *   <ul>
				 *   <li>if this function is used as formatter the value
				 *   is provided by the framework</li>
				 *   <li>if this function is called directly, provide the parameter only if it is
				 *   already calculated</li>
				 *   <li>if the parameter is omitted, it is calculated automatically through
				 *   <code>oInterface.getObject("")</code></li>
				 *   </ul>(optional)
				 * @return the resulting string value to write into the processed XML
				 */
				function simplePath(oInterface: sap.ui.core.util.XMLPreprocessor.IContext|sap.ui.model.Context, vRawValue?: any): string;
			}
		
			/**
			 * Different modes for retrieving the count of collections
			 */
			namespace BatchMode {
				/**
				 * Batch grouping enabled
				 */
				var Group: any;
				/**
				 * No batch requests
				 */
				var None: any;
			}
		
			/**
			 * Different modes for executing service operations (filtering, sorting)
			 */
			namespace OperationMode {
				/**
				 * With OperationMode "Auto", operations are either processed on the client or on the server, depending on the given binding threshold.
				 * Please be aware, that the combination of OperationMode.Auto and CountMode.None is not supported.
				 * 
				 * There are two possibilities which can happen, when using the "Auto" mode, depending on the configured "CountMode":
				 * 1. CountMode "Request" and "Both"
				 * Initially the binding will issue a $count request without any filters/sorters.
				 * a) If the count is lower or equal to the threshold, the binding will behave like in operation mode "Client", and a data request for all entries is issued.
				 * b) If the count exceeds the threshold, the binding will behave like in operation mode "Server".
				 * 
				 * 2. CountModes "Inline" or "InlineRepeat"
				 * The initial request tries to fetch as many entries as the configured threshold, without any filters/sorters. In addition a $inlinecount is added.
				 * The binding assumes, that the threshold given by the application can be met. If this is not the case additional data requests might be needed.
				 * So the application has to have the necessary confidence that the threshold is high enough to make sure, that the data is not requested twice.
				 * 
				 * a) If this request returns fewer (or just as many) entries as the threshold, the binding will behave exactly like when using
				 * the "Client" operation mode. Initially configured filters/sorters will be applied afterwards on the client.
				 * b) If the $inlinecount is higher than the threshold, the binding will behave like in operation mode "Server". In this case a new data request
				 * containing the initially set filters/sorters will be issued.
				 */
				var Auto: any;
				/**
				 * Operations are executed on the client, all entries must be avilable to be able to do so.
				 * The initial request fetches the complete collection, filtering and sorting does not trigger further requests
				 */
				var Client: any;
				/**
				 * Operations are executed on the Odata service, by appending corresponding URL parameters ($filter, $orderby).
				 * Each change in filtering or sorting is triggering a new request to the server.
				 */
				var Server: any;
			}
		
			/**
			 * The types in this namespace are {@link sap.ui.model.SimpleType simple types} corresponding
			 * to OData primitive types for both
			 * {@link http://www.odata.org/documentation/odata-version-2-0/overview#AbstractTypeSystem OData V2}
			 * and
			 * {@link http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part3-csdl.html OData V4} (see
			 * "4.4 Primitive Types").
			 * 
			 * They can be used in any place where simple types are allowed (and the model representation
			 * matches), but they are of course most valuable when used in bindings to a
			 * {@link sap.ui.model.odata.v2.ODataModel} or {@link sap.ui.model.odata.v4.ODataModel}.
			 * 
			 * <b>Example:</b>
			 * <pre>
			 *   &lt;Label text="ID"/&gt;
			 *   &lt;Input value="{path : 'id', type : 'sap.ui.model.odata.type.String',
			 *       constraints : {nullable : false, maxLength : 10}}"/&gt;
			 *   &lt;Label text="valid through"/&gt;
			 *   &lt;Input value="{path : 'validThrough', type : 'sap.ui.model.odata.type.DateTime',
			 *       constraints : {displayFormat : 'Date'}}"/&gt;
			 * </pre>
			 * 
			 * All types support formatting from the representation used in ODataModel ("model format") to
			 * various representations used by UI elements ("target type") and vice versa. Additionally they
			 * support validating a given value against the type's constraints.
			 * 
			 * The following target types may be supported:
			 * <table>
			 * <tr><th>Type</th><th>Description</th></tr>
			 * <tr><td><code>string</code></td><td>The value is converted to a <code>string</code>, so that it
			 * can be displayed in an input field. Supported by all types.</td></tr>
			 * <tr><td><code>boolean</code></td><td>The value is converted to a <code>Boolean</code>, so that
			 * it can be displayed in a checkbox. Only supported by
			 * {@link sap.ui.model.odata.type.Boolean}.</td></tr>
			 * <tr><td><code>int</code></td><td>The value is converted to an integer (as <code>number</code>).
			 * May cause truncation of decimals and overruns. Supported by all numeric types.</td></tr>
			 * <tr><td><code>float</code></td><td>The value is converted to a <code>number</code>. Supported by
			 * all numeric types.</td></tr>
			 * <tr><td><code>any</code></td><td>A technical format. The value is simply passed through. Only
			 * supported by <code>format</code>, not by <code>parse</code>. Supported by all types.</td></tr>
			 * </table>
			 * 
			 * All constraints relevant for OData V2 may be given as strings besides their natural types (e.g.
			 * <code>nullable : "false"</code> or <code>maxLength : "10"</code>). This makes the life of
			 * template processors easier, but is not needed for OData V4.
			 * 
			 * <b>Handling of <code>null</code></b>:
			 * 
			 * All types handle <code>null</code> in the same way. When formatting to <code>string</code>, it
			 * is simply passed through (and <code>undefined</code> becomes <code>null</code>, too). When
			 * parsing from <code>string</code>, it is also passed through.  Additionally,
			 * {@link sap.ui.model.type.odata.String String} and {@link sap.ui.model.type.odata.Guid Guid}
			 * convert the empty string to <code>null</code> when parsing. <code>validate</code> decides based
			 * on the constraint <code>nullable</code>: If <code>false</code>, <code>null</code> is not
			 * accepted and leads to a (locale-dependent) <code>ParseException</code>.
			 * 
			 * This ensures that the user cannot clear an input field bound to an attribute with non-nullable
			 * type. However it does not ensure that the user really entered something if the field was empty
			 * before.
			 */
			namespace type {
			
				class Boolean extends ODataType {
					/**
					 * Constructor for an OData primitive type <code>Edm.Boolean</code>.
					 * @param oFormatOptions format options as defined in the interface of {@link sap.ui.model.SimpleType}; this
					 *   type ignores them since it does not support any format options(optional)
					 * @param oConstraints constraints; {@link #validateValue validateValue} throws an error if any constraint is
					 *   violated(optional)
					 */
					constructor(oFormatOptions?: any, oConstraints?: any);
					/**
					 * Creates a new subclass of class sap.ui.model.odata.type.Boolean with name <code>sClassName</code>
					 * and enriches it with the information contained in <code>oClassInfo</code>.
					 * 
					 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
					 * @param sClassName Name of the class being created
					 * @param oClassInfo Object literal with information about the class(optional)
					 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
					 * @return Created class / constructor function
					 */
					extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
					/**
					 * Formats the given boolean value to the given target type.
					 * @param bValue the value to be formatted
					 * @param sTargetType the target type; may be "any", "boolean" or "string". If it is "string", the result is
					 *   "Yes" or "No" in the current {@link sap.ui.core.Configuration#getLanguage language}.
					 *   See {@link sap.ui.model.odata.type} for more information.
					 * @return the formatted output value in the target type; <code>undefined</code> or <code>null</code>
					 *   are formatted to <code>null</code>
					 */
					formatValue(bValue: boolean, sTargetType: string): boolean|string;
					/**
					 * Format the given value in model representation to an output value in the given
					 * internal type. This happens according to the format options, if target type is 'string'.
					 * If oValue is not defined or null, null will be returned.
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be formatted
					 * @param sInternalType the target type
					 * @return the formatted output value
					 */
					formatValue(oValue: any, sInternalType: string): any;
					/**
					 * Returns the type's name.
					 * @return the type's name
					 */
					getName(): string;
					/**
					 * Parses the given value from the given type to a boolean.
					 * @param vValue the value to be parsed; the empty string and <code>null</code> are parsed to
					 *   <code>null</code>
					 * @param sSourceType the source type (the expected type of <code>vValue</code>); may be "boolean" or "string".
					 *   See {@link sap.ui.model.odata.type} for more information.
					 * @return the parsed value
					 */
					parseValue(vValue: boolean|string, sSourceType: string): boolean;
					/**
					 * Parse a value of an internal type to the expected value of the model type.
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be parsed
					 * @param sInternalType the source type
					 * @return the parse result
					 */
					parseValue(oValue: any, sInternalType: string): any;
					/**
					 * Validates whether the given value in model representation is valid and meets the given
					 * constraints.
					 * @param bValue the value to be validated
					 */
					validateValue(bValue: boolean);
					/**
					 * Validate whether a given value in model representation is valid and meets the
					 * defined constraints (if any).
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be validated
					 */
					validateValue(oValue: any);
				}
			
				class Byte extends Int {
					/**
					 * Constructor for a primitive type <code>Edm.Byte</code>.
					 * @param oFormatOptions format options as defined in {@link sap.ui.core.format.NumberFormat}(optional)
					 * @param oConstraints constraints; {@link sap.ui.model.odata.type.Int#validateValue validateValue} throws an
					 *   error if any constraint is violated(optional)
					 */
					constructor(oFormatOptions?: any, oConstraints?: any);
					/**
					 * Creates a new subclass of class sap.ui.model.odata.type.Byte with name <code>sClassName</code>
					 * and enriches it with the information contained in <code>oClassInfo</code>.
					 * 
					 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.Int.extend}.
					 * @param sClassName Name of the class being created
					 * @param oClassInfo Object literal with information about the class(optional)
					 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
					 * @return Created class / constructor function
					 */
					extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
					/**
					 * Returns the type's name.
					 * @return the type's name
					 */
					getName(): string;
					/**
					 * Returns the type's supported range as object with properties <code>minimum</code> and
					 * <code>maximum</code>.
					 * @return the range
					 */
					getRange(): any;
				}
			
				class Date extends ODataType {
					/**
					 * Constructor for an OData primitive type <code>Edm.Date</code>.
					 * @param oFormatOptions format options as defined in {@link sap.ui.core.format.DateFormat}(optional)
					 * @param oConstraints constraints; {@link #validateValue validateValue} throws an error if any constraint is
					 *   violated(optional)
					 */
					constructor(oFormatOptions?: any, oConstraints?: any);
					/**
					 * Creates a new subclass of class sap.ui.model.odata.type.Date with name <code>sClassName</code>
					 * and enriches it with the information contained in <code>oClassInfo</code>.
					 * 
					 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
					 * @param sClassName Name of the class being created
					 * @param oClassInfo Object literal with information about the class(optional)
					 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
					 * @return Created class / constructor function
					 */
					extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
					/**
					 * Formats the given value to the given target type.
					 * @param sValue the value to be formatted
					 * @param sTargetType the target type; may be "any" or "string".
					 *   See {@link sap.ui.model.odata.type} for more information.
					 * @return the formatted output value in the target type; <code>undefined</code> or <code>null</code>
					 *   are formatted to <code>null</code>
					 */
					formatValue(sValue: string, sTargetType: string): string;
					/**
					 * Format the given value in model representation to an output value in the given
					 * internal type. This happens according to the format options, if target type is 'string'.
					 * If oValue is not defined or null, null will be returned.
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be formatted
					 * @param sInternalType the target type
					 * @return the formatted output value
					 */
					formatValue(oValue: any, sInternalType: string): any;
					/**
					 * Returns the type's name.
					 * @return the type's name
					 */
					getName(): string;
					/**
					 * Parses the given value to a date.
					 * @param sValue the value to be parsed, maps <code>""</code> to <code>null</code>
					 * @param sSourceType the source type (the expected type of <code>sValue</code>); must be "string"
					 *   See {@link sap.ui.model.odata.type} for more information.
					 * @return the parsed value
					 */
					parseValue(sValue: string, sSourceType: string): string;
					/**
					 * Parse a value of an internal type to the expected value of the model type.
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be parsed
					 * @param sInternalType the source type
					 * @return the parse result
					 */
					parseValue(oValue: any, sInternalType: string): any;
					/**
					 * Validates whether the given value in model representation is valid and meets the
					 * given constraints.
					 * @param sValue the value to be validated
					 */
					validateValue(sValue: string);
					/**
					 * Validate whether a given value in model representation is valid and meets the
					 * defined constraints (if any).
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be validated
					 */
					validateValue(oValue: any);
				}
			
				class DateTime extends DateTimeBase {
					/**
					 * Constructor for a primitive type <code>Edm.DateTime</code>.
					 * @param oFormatOptions format options as defined in {@link sap.ui.core.format.DateFormat}(optional)
					 * @param oConstraints constraints; {@link sap.ui.model.odata.type.DateTimeBase#validateValue validateValue}
					 *   throws an error if any constraint is violated(optional)
					 */
					constructor(oFormatOptions?: any, oConstraints?: any);
					/**
					 * Creates a new subclass of class sap.ui.model.odata.type.DateTime with name <code>sClassName</code>
					 * and enriches it with the information contained in <code>oClassInfo</code>.
					 * 
					 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.DateTimeBase.extend}.
					 * @param sClassName Name of the class being created
					 * @param oClassInfo Object literal with information about the class(optional)
					 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
					 * @return Created class / constructor function
					 */
					extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
					/**
					 * Returns the type's name.
					 * @return the type's name
					 */
					getName(): string;
				}
			
				class DateTimeBase extends ODataType {
					/**
					 * Base constructor for the primitive types <code>Edm.DateTime</code> and
					 * <code>Edm.DateTimeOffset</code>.
					 * @param oFormatOptions Type-specific format options; see subtypes(optional)
					 * @param oConstraints Constraints; {@link #validateValue validateValue} throws an error if any constraint is
					 *   violated(optional)
					 */
					constructor(oFormatOptions?: any, oConstraints?: any);
					/**
					 * Creates a new subclass of class sap.ui.model.odata.type.DateTimeBase with name <code>sClassName</code>
					 * and enriches it with the information contained in <code>oClassInfo</code>.
					 * 
					 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
					 * @param sClassName Name of the class being created
					 * @param oClassInfo Object literal with information about the class(optional)
					 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
					 * @return Created class / constructor function
					 */
					extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
					/**
					 * Formats the given value to the given target type.
					 * @param oValue The value to be formatted, which is represented in the model as a <code>Date</code>
					 *   instance (OData V2)
					 * @param sTargetType The target type, may be "any" or "string"; see {@link sap.ui.model.odata.type} for more
					 *   information
					 * @return The formatted output value in the target type; <code>undefined</code> or <code>null</code>
					 *   are formatted to <code>null</code>
					 */
					formatValue(oValue: any, sTargetType: string): any|string;
					/**
					 * Format the given value in model representation to an output value in the given
					 * internal type. This happens according to the format options, if target type is 'string'.
					 * If oValue is not defined or null, null will be returned.
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be formatted
					 * @param sInternalType the target type
					 * @return the formatted output value
					 */
					formatValue(oValue: any, sInternalType: string): any;
					/**
					 * Parses the given value to a <code>Date</code> instance (OData V2).
					 * @param sValue The value to be parsed; the empty string and <code>null</code> are parsed to
					 *   <code>null</code>
					 * @param sSourceType The source type (the expected type of <code>sValue</code>), must be "string"; see
					 *   {@link sap.ui.model.odata.type} for more information
					 * @return The parsed value
					 */
					parseValue(sValue: string, sSourceType: string): any;
					/**
					 * Parse a value of an internal type to the expected value of the model type.
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be parsed
					 * @param sInternalType the source type
					 * @return the parse result
					 */
					parseValue(oValue: any, sInternalType: string): any;
					/**
					 * Validates whether the given value in model representation is valid and meets the
					 * defined constraints.
					 * @param oValue The value to be validated
					 */
					validateValue(oValue: any);
				}
			
				class DateTimeOffset extends DateTimeBase {
					/**
					 * Constructor for a primitive type <code>Edm.DateTimeOffset</code>.
					 * @param oFormatOptions Format options as defined in {@link sap.ui.core.format.DateFormat}(optional)
					 * @param oConstraints Constraints; {@link sap.ui.model.odata.type.DateTimeBase#validateValue validateValue}
					 *   throws an error if any constraint is violated(optional)
					 */
					constructor(oFormatOptions?: any, oConstraints?: any);
					/**
					 * Formats the given value to the given target type.
					 * @param vValue The value to be formatted, which is represented in the model as a <code>Date</code>
					 *   instance (OData V2) or as a string like "2014-11-27T13:47:26Z" (OData V4); both
					 *   representations are accepted independent of the model's OData version
					 * @param sTargetType The target type, may be "any" or "string"; see {@link sap.ui.model.odata.type} for more
					 *   information
					 * @return The formatted output value in the target type; <code>undefined</code> or <code>null</code>
					 *   are formatted to <code>null</code>
					 */
					formatValue(vValue: any|string, sTargetType: string): any|string;
					/**
					 * Format the given value in model representation to an output value in the given
					 * internal type. This happens according to the format options, if target type is 'string'.
					 * If oValue is not defined or null, null will be returned.
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be formatted
					 * @param sInternalType the target type
					 * @return the formatted output value
					 */
					formatValue(oValue: any, sInternalType: string): any;
					/**
					 * Formats the given value to the given target type.
					 * @note Overload from base type sap.ui.model.odata.type.DateTimeBase
					 * @param oValue The value to be formatted, which is represented in the model as a <code>Date</code>
					 *   instance (OData V2)
					 * @param sTargetType The target type, may be "any" or "string"; see {@link sap.ui.model.odata.type} for more
					 *   information
					 * @return The formatted output value in the target type; <code>undefined</code> or <code>null</code>
					 *   are formatted to <code>null</code>
					 */
					formatValue(oValue: any, sTargetType: string): any|string;
					/**
					 * Returns the type's name.
					 * @return The type's name
					 */
					getName(): string;
					/**
					 * Parses the given value to a <code>Date</code> instance (OData V2) or a string like
					 * "2014-11-27T13:47:26Z" (OData V4), depending on the model's OData version.
					 * @param sValue The value to be parsed; the empty string and <code>null</code> are parsed to
					 *   <code>null</code>
					 * @param sSourceType The source type (the expected type of <code>sValue</code>), must be "string"; see
					 *   {@link sap.ui.model.odata.type} for more information
					 * @return The parsed value
					 */
					parseValue(sValue: string, sSourceType: string): any|string;
					/**
					 * Parse a value of an internal type to the expected value of the model type.
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be parsed
					 * @param sInternalType the source type
					 * @return the parse result
					 */
					parseValue(oValue: any, sInternalType: string): any;
					/**
					 * Parses the given value to a <code>Date</code> instance (OData V2).
					 * @note Overload from base type sap.ui.model.odata.type.DateTimeBase
					 * @param sValue The value to be parsed; the empty string and <code>null</code> are parsed to
					 *   <code>null</code>
					 * @param sSourceType The source type (the expected type of <code>sValue</code>), must be "string"; see
					 *   {@link sap.ui.model.odata.type} for more information
					 * @return The parsed value
					 */
					parseValue(sValue: string, sSourceType: string): any;
					/**
					 * Validates whether the given value in model representation is valid and meets the
					 * defined constraints, depending on the model's OData version.
					 * @param vValue The value to be validated
					 */
					validateValue(vValue: any);
					/**
					 * Validate whether a given value in model representation is valid and meets the
					 * defined constraints (if any).
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be validated
					 */
					validateValue(oValue: any);
				}
			
				class Decimal extends ODataType {
					/**
					 * Constructor for a primitive type <code>Edm.Decimal</code>.
					 * @param oFormatOptions format options as defined in {@link sap.ui.core.format.NumberFormat}. In contrast to
					 *   NumberFormat <code>groupingEnabled</code> defaults to <code>true</code>.
					 *   Note that <code>maxFractionDigits</code> and <code>minFractionDigits</code> are set to
					 *   the value of the constraint <code>scale</code> unless it is "variable". They can however
					 *   be overwritten.(optional)
					 * @param oConstraints constraints; {@link #validateValue validateValue} throws an error if any constraint is
					 *   violated(optional)
					 */
					constructor(oFormatOptions?: any, oConstraints?: any);
					/**
					 * Creates a new subclass of class sap.ui.model.odata.type.Decimal with name <code>sClassName</code>
					 * and enriches it with the information contained in <code>oClassInfo</code>.
					 * 
					 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
					 * @param sClassName Name of the class being created
					 * @param oClassInfo Object literal with information about the class(optional)
					 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
					 * @return Created class / constructor function
					 */
					extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
					/**
					 * Formats the given value to the given target type. When formatting to "string" the type's
					 * constraint <code>scale</code> is taken into account.
					 * @param sValue the value to be formatted, which is represented as a string in the model
					 * @param sTargetType the target type; may be "any", "float", "int" or "string".
					 *   See {@link sap.ui.model.odata.type} for more information.
					 * @return the formatted output value in the target type; <code>undefined</code> or <code>null</code>
					 *   are formatted to <code>null</code>
					 */
					formatValue(sValue: string, sTargetType: string): number|string;
					/**
					 * Format the given value in model representation to an output value in the given
					 * internal type. This happens according to the format options, if target type is 'string'.
					 * If oValue is not defined or null, null will be returned.
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be formatted
					 * @param sInternalType the target type
					 * @return the formatted output value
					 */
					formatValue(oValue: any, sInternalType: string): any;
					/**
					 * Returns the type's name.
					 * @return the type's name
					 */
					getName(): string;
					/**
					 * Parses the given value, which is expected to be of the given type, to a decimal in
					 * <code>string</code> representation.
					 * @param vValue the value to be parsed; the empty string and <code>null</code> are parsed to
					 *   <code>null</code>
					 * @param sSourceType the source type (the expected type of <code>vValue</code>); may be "float", "int" or
					 *   "string".
					 *   See {@link sap.ui.model.odata.type} for more information.
					 * @return the parsed value
					 */
					parseValue(vValue: string|number, sSourceType: string): string;
					/**
					 * Parse a value of an internal type to the expected value of the model type.
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be parsed
					 * @param sInternalType the source type
					 * @return the parse result
					 */
					parseValue(oValue: any, sInternalType: string): any;
					/**
					 * Validates whether the given value in model representation is valid and meets the
					 * defined constraints.
					 * @param sValue the value to be validated
					 */
					validateValue(sValue: string);
					/**
					 * Validate whether a given value in model representation is valid and meets the
					 * defined constraints (if any).
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be validated
					 */
					validateValue(oValue: any);
				}
			
				class Double extends ODataType {
					/**
					 * Constructor for a primitive type <code>Edm.Double</code>.
					 * @param oFormatOptions format options as defined in {@link sap.ui.core.format.NumberFormat}. In contrast to
					 *   NumberFormat <code>groupingEnabled</code> defaults to <code>true</code>.(optional)
					 * @param oConstraints constraints; {@link #validateValue validateValue} throws an error if any constraint is
					 *   violated(optional)
					 */
					constructor(oFormatOptions?: any, oConstraints?: any);
					/**
					 * Creates a new subclass of class sap.ui.model.odata.type.Double with name <code>sClassName</code>
					 * and enriches it with the information contained in <code>oClassInfo</code>.
					 * 
					 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
					 * @param sClassName Name of the class being created
					 * @param oClassInfo Object literal with information about the class(optional)
					 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
					 * @return Created class / constructor function
					 */
					extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
					/**
					 * Formats the given value to the given target type. When formatting to "string", very large
					 * or very small values are formatted to the exponential format (e.g. "-3.14 E+15").
					 * @param vValue the value to be formatted, which is represented as a number in the model
					 * @param sTargetType the target type; may be "any", "float", "int", "string".
					 *   See {@link sap.ui.model.odata.type} for more information.
					 * @return the formatted output value in the target type; <code>undefined</code> or <code>null</code>
					 *   are formatted to <code>null</code>
					 */
					formatValue(vValue: number|string, sTargetType: string): number|string;
					/**
					 * Format the given value in model representation to an output value in the given
					 * internal type. This happens according to the format options, if target type is 'string'.
					 * If oValue is not defined or null, null will be returned.
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be formatted
					 * @param sInternalType the target type
					 * @return the formatted output value
					 */
					formatValue(oValue: any, sInternalType: string): any;
					/**
					 * Returns the type's name.
					 * @return the type's name
					 */
					getName(): string;
					/**
					 * Parses the given value, which is expected to be of the given type, to an Edm.Double in
					 * <code>number</code> representation.
					 * @param vValue the value to be parsed; the empty string and <code>null</code> are parsed to
					 *   <code>null</code>; note that there is no way to enter <code>Infinity</code> or
					 *   <code>NaN</code> values
					 * @param sSourceType the source type (the expected type of <code>vValue</code>); may be "float", "int" or
					 *   "string".
					 *   See {@link sap.ui.model.odata.type} for more information.
					 * @return the parsed value
					 */
					parseValue(vValue: string|number, sSourceType: string): number;
					/**
					 * Parse a value of an internal type to the expected value of the model type.
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be parsed
					 * @param sInternalType the source type
					 * @return the parse result
					 */
					parseValue(oValue: any, sInternalType: string): any;
					/**
					 * Validates whether the given value in model representation is valid and meets the
					 * defined constraints.
					 * @param fValue the value to be validated
					 */
					validateValue(fValue: number);
					/**
					 * Validate whether a given value in model representation is valid and meets the
					 * defined constraints (if any).
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be validated
					 */
					validateValue(oValue: any);
				}
			
				class Guid extends ODataType {
					/**
					 * Constructor for an OData primitive type <code>Edm.Guid</code>.
					 * @param oFormatOptions format options as defined in the interface of {@link sap.ui.model.SimpleType}; this
					 *   type ignores them since it does not support any format options(optional)
					 * @param oConstraints constraints; {@link #validateValue validateValue} throws an error if any constraint is
					 *   violated(optional)
					 */
					constructor(oFormatOptions?: any, oConstraints?: any);
					/**
					 * Creates a new subclass of class sap.ui.model.odata.type.Guid with name <code>sClassName</code>
					 * and enriches it with the information contained in <code>oClassInfo</code>.
					 * 
					 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
					 * @param sClassName Name of the class being created
					 * @param oClassInfo Object literal with information about the class(optional)
					 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
					 * @return Created class / constructor function
					 */
					extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
					/**
					 * Formats the given value to the given target type.
					 * @param sValue the value to be formatted
					 * @param sTargetType the target type; may be "any" or "string".
					 *   See {@link sap.ui.model.odata.type} for more information.
					 * @return the formatted output value in the target type; <code>undefined</code> or <code>null</code>
					 *   are formatted to <code>null</code>
					 */
					formatValue(sValue: string, sTargetType: string): string;
					/**
					 * Format the given value in model representation to an output value in the given
					 * internal type. This happens according to the format options, if target type is 'string'.
					 * If oValue is not defined or null, null will be returned.
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be formatted
					 * @param sInternalType the target type
					 * @return the formatted output value
					 */
					formatValue(oValue: any, sInternalType: string): any;
					/**
					 * Returns the type's name.
					 * @return the type's name
					 */
					getName(): string;
					/**
					 * Parses the given value to a GUID.
					 * @param sValue the value to be parsed, maps <code>""</code> to <code>null</code>
					 * @param sSourceType the source type (the expected type of <code>sValue</code>); must be "string".
					 *   See {@link sap.ui.model.odata.type} for more information.
					 * @return the parsed value
					 */
					parseValue(sValue: string, sSourceType: string): string;
					/**
					 * Parse a value of an internal type to the expected value of the model type.
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be parsed
					 * @param sInternalType the source type
					 * @return the parse result
					 */
					parseValue(oValue: any, sInternalType: string): any;
					/**
					 * Validates whether the given value in model representation is valid and meets the
					 * given constraints.
					 * @param sValue the value to be validated
					 */
					validateValue(sValue: string);
					/**
					 * Validate whether a given value in model representation is valid and meets the
					 * defined constraints (if any).
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be validated
					 */
					validateValue(oValue: any);
				}
			
				class Int extends ODataType {
					/**
					 * Constructor for a new <code>Int</code>.
					 * @param oFormatOptions type-specific format options; see subtypes(optional)
					 * @param oConstraints constraints; {@link #validateValue validateValue} throws an error if any constraint is
					 *   violated(optional)
					 */
					constructor(oFormatOptions?: any, oConstraints?: any);
					/**
					 * Creates a new subclass of class sap.ui.model.odata.type.Int with name <code>sClassName</code>
					 * and enriches it with the information contained in <code>oClassInfo</code>.
					 * 
					 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
					 * @param sClassName Name of the class being created
					 * @param oClassInfo Object literal with information about the class(optional)
					 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
					 * @return Created class / constructor function
					 */
					extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
					/**
					 * Formats the given value to the given target type.
					 * When formatting to <code>string</code> the format options are used.
					 * @param iValue the value in model representation to be formatted
					 * @param sTargetType the target type; may be "any", "int", "float" or "string".
					 *   See {@link sap.ui.model.odata.type} for more information.
					 * @return the formatted output value in the target type; <code>undefined</code> or <code>null</code>
					 *   are formatted to <code>null</code>
					 */
					formatValue(iValue: number, sTargetType: string): number|string;
					/**
					 * Format the given value in model representation to an output value in the given
					 * internal type. This happens according to the format options, if target type is 'string'.
					 * If oValue is not defined or null, null will be returned.
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be formatted
					 * @param sInternalType the target type
					 * @return the formatted output value
					 */
					formatValue(oValue: any, sInternalType: string): any;
					/**
					 * Parses the given value, which is expected to be of the given source type, to an Int in
					 * number representation.
					 * @param vValue the value to be parsed. The empty string and <code>null</code> are parsed to
					 *   <code>null</code>.
					 * @param sSourceType the source type (the expected type of <code>vValue</code>); may be "float", "int" or
					 *   "string".
					 *   See {@link sap.ui.model.odata.type} for more information.
					 * @return the parsed value
					 */
					parseValue(vValue: number|string, sSourceType: string): number;
					/**
					 * Parse a value of an internal type to the expected value of the model type.
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be parsed
					 * @param sInternalType the source type
					 * @return the parse result
					 */
					parseValue(oValue: any, sInternalType: string): any;
					/**
					 * Validates whether the given value in model representation is valid and meets the
					 * defined constraints.
					 * @param iValue the value to be validated
					 */
					validateValue(iValue: number);
					/**
					 * Validate whether a given value in model representation is valid and meets the
					 * defined constraints (if any).
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be validated
					 */
					validateValue(oValue: any);
				}
			
				class Int16 extends Int {
					/**
					 * Constructor for a primitive type <code>Edm.Int16</code>.
					 * @param oFormatOptions format options as defined in {@link sap.ui.core.format.NumberFormat}. In contrast to
					 *   NumberFormat <code>groupingEnabled</code> defaults to <code>true</code>.(optional)
					 * @param oConstraints constraints; {@link sap.ui.model.odata.type.Int#validateValue validateValue} throws an
					 *   error if any constraint is violated(optional)
					 */
					constructor(oFormatOptions?: any, oConstraints?: any);
					/**
					 * Creates a new subclass of class sap.ui.model.odata.type.Int16 with name <code>sClassName</code>
					 * and enriches it with the information contained in <code>oClassInfo</code>.
					 * 
					 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.Int.extend}.
					 * @param sClassName Name of the class being created
					 * @param oClassInfo Object literal with information about the class(optional)
					 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
					 * @return Created class / constructor function
					 */
					extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
					/**
					 * Returns the type's name.
					 * @return the type's name
					 */
					getName(): string;
					/**
					 * Returns the type's supported range as object with properties <code>minimum</code> and
					 * <code>maximum</code>.
					 * @return the range
					 */
					getRange(): any;
				}
			
				class Int32 extends Int {
					/**
					 * Constructor for a primitive type <code>Edm.Int32</code>.
					 * @param oFormatOptions format options as defined in {@link sap.ui.core.format.NumberFormat}. In contrast to
					 *   NumberFormat <code>groupingEnabled</code> defaults to <code>true</code>.(optional)
					 * @param oConstraints constraints; {@link sap.ui.model.odata.type.Int#validateValue validateValue} throws an
					 *   error if any constraint is violated(optional)
					 */
					constructor(oFormatOptions?: any, oConstraints?: any);
					/**
					 * Creates a new subclass of class sap.ui.model.odata.type.Int32 with name <code>sClassName</code>
					 * and enriches it with the information contained in <code>oClassInfo</code>.
					 * 
					 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.Int.extend}.
					 * @param sClassName Name of the class being created
					 * @param oClassInfo Object literal with information about the class(optional)
					 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
					 * @return Created class / constructor function
					 */
					extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
					/**
					 * Returns the type's name.
					 * @return the type's name
					 */
					getName(): string;
					/**
					 * Returns the type's supported range as object with properties <code>minimum</code> and
					 * <code>maximum</code>.
					 * @return the range
					 */
					getRange(): any;
				}
			
				class Int64 extends ODataType {
					/**
					 * Constructor for a primitive type <code>Edm.Int64</code>.
					 * @param oFormatOptions format options as defined in {@link sap.ui.core.format.NumberFormat}. In contrast to
					 *   NumberFormat <code>groupingEnabled</code> defaults to <code>true</code>.
					 * @param oConstraints constraints; {@link #validateValue validateValue} throws an error if any constraint is
					 *   violated
					 */
					constructor(oFormatOptions: any, oConstraints: any);
					/**
					 * Creates a new subclass of class sap.ui.model.odata.type.Int64 with name <code>sClassName</code>
					 * and enriches it with the information contained in <code>oClassInfo</code>.
					 * 
					 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
					 * @param sClassName Name of the class being created
					 * @param oClassInfo Object literal with information about the class(optional)
					 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
					 * @return Created class / constructor function
					 */
					extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
					/**
					 * Formats the given value to the given target type.
					 * @param sValue the value to be formatted, which is represented as a string in the model
					 * @param sTargetType the target type; may be "any", "float", "int" or "string".
					 *   See {@link sap.ui.model.odata.type} for more information.
					 * @return the formatted output value in the target type; <code>undefined</code> or <code>null</code>
					 *   are formatted to <code>null</code>
					 */
					formatValue(sValue: string, sTargetType: string): number|string;
					/**
					 * Format the given value in model representation to an output value in the given
					 * internal type. This happens according to the format options, if target type is 'string'.
					 * If oValue is not defined or null, null will be returned.
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be formatted
					 * @param sInternalType the target type
					 * @return the formatted output value
					 */
					formatValue(oValue: any, sInternalType: string): any;
					/**
					 * Returns the type's name.
					 * @return the type's name
					 */
					getName(): string;
					/**
					 * Parses the given value, which is expected to be of the given type, to an Int64 in
					 * <code>string</code> representation.
					 * @param vValue the value to be parsed; the empty string and <code>null</code> are parsed to
					 *   <code>null</code>
					 * @param sSourceType the source type (the expected type of <code>vValue</code>); may be "float", "int" or
					 *   "string".
					 *   See {@link sap.ui.model.odata.type} for more information.
					 * @return the parsed value
					 */
					parseValue(vValue: string|number, sSourceType: string): string;
					/**
					 * Parse a value of an internal type to the expected value of the model type.
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be parsed
					 * @param sInternalType the source type
					 * @return the parse result
					 */
					parseValue(oValue: any, sInternalType: string): any;
					/**
					 * Validates whether the given value in model representation is valid and meets the
					 * defined constraints.
					 * @param sValue the value to be validated
					 */
					validateValue(sValue: string);
					/**
					 * Validate whether a given value in model representation is valid and meets the
					 * defined constraints (if any).
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be validated
					 */
					validateValue(oValue: any);
				}
			
				class ODataType extends sap.ui.model.SimpleType {
					/**
					 * Constructor for a new <code>ODataType</code>.
					 * @param oFormatOptions type-specific format options; see subtypes(optional)
					 * @param oConstraints type-specific constraints (e.g. <code>oConstraints.nullable</code>), see subtypes(optional)
					 */
					constructor(oFormatOptions?: any, oConstraints?: any);
					/**
					 * Creates a new subclass of class sap.ui.model.odata.type.ODataType with name <code>sClassName</code>
					 * and enriches it with the information contained in <code>oClassInfo</code>.
					 * 
					 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
					 * @param sClassName Name of the class being created
					 * @param oClassInfo Object literal with information about the class(optional)
					 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
					 * @return Created class / constructor function
					 */
					extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
					/**
					 * 
					 * @return this
					 */
					getInterface(): any;
					/**
					 * Returns the public interface of the object.
					 * @note Overload from base type sap.ui.base.Object
					 * @return the public interface of the object
					 */
					getInterface(): sap.ui.base.Interface;
				}
			
				class Raw extends ODataType {
					/**
					 * Constructor for a placeholder for all unsupported OData primitive types.
					 * @param oFormatOptions Must be <code>undefined</code>(optional)
					 * @param oConstraints Must be <code>undefined</code>(optional)
					 */
					constructor(oFormatOptions?: any, oConstraints?: any);
					/**
					 * Creates a new subclass of class sap.ui.model.odata.type.Raw with name <code>sClassName</code>
					 * and enriches it with the information contained in <code>oClassInfo</code>.
					 * 
					 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
					 * @param sClassName Name of the class being created
					 * @param oClassInfo Object literal with information about the class(optional)
					 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
					 * @return Created class / constructor function
					 */
					extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
					/**
					 * Formats the given value to the given target type.
					 * @param vValue The raw value to be retrieved "as is"
					 * @param sTargetType The target type; must be "any"
					 * @return The raw value "as is"
					 */
					formatValue(vValue: any, sTargetType: string): any;
					/**
					 * Format the given value in model representation to an output value in the given
					 * internal type. This happens according to the format options, if target type is 'string'.
					 * If oValue is not defined or null, null will be returned.
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be formatted
					 * @param sInternalType the target type
					 * @return the formatted output value
					 */
					formatValue(oValue: any, sInternalType: string): any;
					/**
					 * Returns the type's name.
					 * @return The type's name
					 */
					getName(): string;
					/**
					 * Method not supported
					 */
					parseValue();
					/**
					 * Parse a value of an internal type to the expected value of the model type.
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be parsed
					 * @param sInternalType the source type
					 * @return the parse result
					 */
					parseValue(oValue: any, sInternalType: string): any;
					/**
					 * Method not supported
					 */
					validateValue();
					/**
					 * Validate whether a given value in model representation is valid and meets the
					 * defined constraints (if any).
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be validated
					 */
					validateValue(oValue: any);
				}
			
				class SByte extends Int {
					/**
					 * Constructor for a primitive type <code>Edm.SByte</code>.
					 * @param oFormatOptions format options as defined in {@link sap.ui.core.format.NumberFormat}(optional)
					 * @param oConstraints constraints; {@link sap.ui.model.odata.type.Int#validateValue validateValue} throws an
					 *   error if any constraint is violated(optional)
					 */
					constructor(oFormatOptions?: any, oConstraints?: any);
					/**
					 * Creates a new subclass of class sap.ui.model.odata.type.SByte with name <code>sClassName</code>
					 * and enriches it with the information contained in <code>oClassInfo</code>.
					 * 
					 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.Int.extend}.
					 * @param sClassName Name of the class being created
					 * @param oClassInfo Object literal with information about the class(optional)
					 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
					 * @return Created class / constructor function
					 */
					extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
					/**
					 * Returns the type's name.
					 * @return the type's name
					 */
					getName(): string;
					/**
					 * Returns the type's supported range as object with properties <code>minimum</code> and
					 * <code>maximum</code>.
					 * @return the range
					 */
					getRange(): any;
				}
			
				class Single extends ODataType {
					/**
					 * Constructor for a primitive type <code>Edm.Single</code>.
					 * @param oFormatOptions format options as defined in {@link sap.ui.core.format.NumberFormat}. In contrast to
					 *   NumberFormat <code>groupingEnabled</code> defaults to <code>true</code>.(optional)
					 * @param oConstraints constraints; {@link #validateValue validateValue} throws an error if any constraint is
					 *   violated(optional)
					 */
					constructor(oFormatOptions?: any, oConstraints?: any);
					/**
					 * Creates a new subclass of class sap.ui.model.odata.type.Single with name <code>sClassName</code>
					 * and enriches it with the information contained in <code>oClassInfo</code>.
					 * 
					 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
					 * @param sClassName Name of the class being created
					 * @param oClassInfo Object literal with information about the class(optional)
					 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
					 * @return Created class / constructor function
					 */
					extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
					/**
					 * Formats the given value to the given target type.
					 * @param vValue the value to be formatted, which is represented as a number in the model
					 * @param sTargetType the target type; may be "any", "float", "int", "string".
					 *   See {@link sap.ui.model.odata.type} for more information.
					 * @return the formatted output value in the target type; <code>undefined</code> or <code>null</code>
					 *   are formatted to <code>null</code>
					 */
					formatValue(vValue: string|number, sTargetType: string): number|string;
					/**
					 * Format the given value in model representation to an output value in the given
					 * internal type. This happens according to the format options, if target type is 'string'.
					 * If oValue is not defined or null, null will be returned.
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be formatted
					 * @param sInternalType the target type
					 * @return the formatted output value
					 */
					formatValue(oValue: any, sInternalType: string): any;
					/**
					 * Returns the type's name.
					 * @return the type's name
					 */
					getName(): string;
					/**
					 * Parses the given value, which is expected to be of the given type, to an Edm.Single in
					 * <code>number</code> representation.
					 * @param vValue the value to be parsed; the empty string and <code>null</code> are parsed to
					 *   <code>null</code>; note that there is no way to enter <code>Infinity</code> or
					 *   <code>NaN</code> values
					 * @param sSourceType the source type (the expected type of <code>vValue</code>); may be "float", "int"
					 *   or "string".
					 *   See {@link sap.ui.model.odata.type} for more information.
					 * @return the parsed value
					 */
					parseValue(vValue: string|number, sSourceType: string): number;
					/**
					 * Parse a value of an internal type to the expected value of the model type.
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be parsed
					 * @param sInternalType the source type
					 * @return the parse result
					 */
					parseValue(oValue: any, sInternalType: string): any;
					/**
					 * Validates whether the given value in model representation is valid and meets the
					 * defined constraints.
					 * @param fValue the value to be validated
					 */
					validateValue(fValue: number);
					/**
					 * Validate whether a given value in model representation is valid and meets the
					 * defined constraints (if any).
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be validated
					 */
					validateValue(oValue: any);
				}
			
				class String extends ODataType {
					/**
					 * Constructor for an OData primitive type <code>Edm.String</code>.
					 * @param oFormatOptions format options as defined in the interface of {@link sap.ui.model.SimpleType}; this
					 *   type ignores them since it does not support any format options(optional)
					 * @param oConstraints constraints; {@link #validateValue validateValue} throws an error if any constraint is
					 *   violated(optional)
					 */
					constructor(oFormatOptions?: any, oConstraints?: any);
					/**
					 * Creates a new subclass of class sap.ui.model.odata.type.String with name <code>sClassName</code>
					 * and enriches it with the information contained in <code>oClassInfo</code>.
					 * 
					 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
					 * @param sClassName Name of the class being created
					 * @param oClassInfo Object literal with information about the class(optional)
					 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
					 * @return Created class / constructor function
					 */
					extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
					/**
					 * Formats the given value to the given target type.
					 * If <code>isDigitSequence</code> constraint of this type is set to <code>true</code> and the
					 * target type is any or string and the given value contains only digits, the leading zeros are
					 * truncated.
					 * @param sValue the value to be formatted
					 * @param sTargetType the target type; may be "any", "boolean", "float", "int" or "string".
					 *   See {@link sap.ui.model.odata.type} for more information.
					 * @return the formatted output value in the target type; <code>undefined</code> is always formatted
					 *   to <code>null</code>; <code>null</code> is formatted to "" if the target type is "string".
					 */
					formatValue(sValue: string, sTargetType: string): string|number|boolean;
					/**
					 * Format the given value in model representation to an output value in the given
					 * internal type. This happens according to the format options, if target type is 'string'.
					 * If oValue is not defined or null, null will be returned.
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be formatted
					 * @param sInternalType the target type
					 * @return the formatted output value
					 */
					formatValue(oValue: any, sInternalType: string): any;
					/**
					 * Returns the type's name.
					 * @return the type's name
					 */
					getName(): string;
					/**
					 * Parses the given value which is expected to be of the given type to a string.
					 * If <code>isDigitSequence</code> constraint of this type is set to <code>true</code> and
					 * the parsed string is a sequence of digits, then the parsed string is either enhanced with
					 * leading zeros, if <code>maxLength</code> constraint is given, or leading zeros are removed
					 * from parsed string.
					 * @param vValue the value to be parsed, maps <code>""</code> to <code>null</code>
					 * @param sSourceType the source type (the expected type of <code>vValue</code>).
					 *   See {@link sap.ui.model.odata.type} for more information.
					 * @return the parsed value
					 */
					parseValue(vValue: string|number|boolean, sSourceType: string): string;
					/**
					 * Parse a value of an internal type to the expected value of the model type.
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be parsed
					 * @param sInternalType the source type
					 * @return the parse result
					 */
					parseValue(oValue: any, sInternalType: string): any;
					/**
					 * Validates whether the given value in model representation is valid and meets the
					 * defined constraints.
					 * @param sValue the value to be validated
					 */
					validateValue(sValue: string);
					/**
					 * Validate whether a given value in model representation is valid and meets the
					 * defined constraints (if any).
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be validated
					 */
					validateValue(oValue: any);
				}
			
				class Time extends ODataType {
					/**
					 * Constructor for an OData primitive type <code>Edm.Time</code>.
					 * @param oFormatOptions format options as defined in {@link sap.ui.core.format.DateFormat}(optional)
					 * @param oConstraints constraints; {@link #validateValue validateValue} throws an error if any constraint is
					 *   violated(optional)
					 */
					constructor(oFormatOptions?: any, oConstraints?: any);
					/**
					 * Creates a new subclass of class sap.ui.model.odata.type.Time with name <code>sClassName</code>
					 * and enriches it with the information contained in <code>oClassInfo</code>.
					 * 
					 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
					 * @param sClassName Name of the class being created
					 * @param oClassInfo Object literal with information about the class(optional)
					 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
					 * @return Created class / constructor function
					 */
					extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
					/**
					 * Formats the given value to the given target type
					 * @param oValue the value in model representation to be formatted.
					 * @param sTargetType the target type; may be "any" or "string".
					 *   See {@link sap.ui.model.odata.type} for more information.
					 * @return the formatted output value in the target type; <code>undefined</code> or <code>null</code>
					 *   are formatted to <code>null</code>
					 */
					formatValue(oValue: any, sTargetType: string): string;
					/**
					 * Format the given value in model representation to an output value in the given
					 * internal type. This happens according to the format options, if target type is 'string'.
					 * If oValue is not defined or null, null will be returned.
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be formatted
					 * @param sInternalType the target type
					 * @return the formatted output value
					 */
					formatValue(oValue: any, sInternalType: string): any;
					/**
					 * Returns the type's name.
					 * @return the type's name
					 */
					getName(): string;
					/**
					 * Parses the given value, which is expected to be of the given type, to a time object.
					 * @param sValue the value to be parsed, maps <code>""</code> to <code>null</code>
					 * @param sSourceType the source type (the expected type of <code>sValue</code>); must be "string".
					 *   See {@link sap.ui.model.odata.type} for more information.
					 * @return the parsed value as described in {@link #formatValue formatValue}
					 */
					parseValue(sValue: string, sSourceType: string): any;
					/**
					 * Parse a value of an internal type to the expected value of the model type.
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be parsed
					 * @param sInternalType the source type
					 * @return the parse result
					 */
					parseValue(oValue: any, sInternalType: string): any;
					/**
					 * Validates whether the given value in model representation is valid and meets the
					 * defined constraints.
					 * @param oValue the value to be validated
					 */
					validateValue(oValue: any);
				}
			
				class TimeOfDay extends ODataType {
					/**
					 * Constructor for an OData primitive type <code>Edm.TimeOfDay</code>.
					 * @param oFormatOptions Format options as defined in {@link sap.ui.core.format.DateFormat}(optional)
					 * @param oConstraints Constraints; {@link #validateValue validateValue} throws an error if any constraint is
					 *   violated(optional)
					 */
					constructor(oFormatOptions?: any, oConstraints?: any);
					/**
					 * Creates a new subclass of class sap.ui.model.odata.type.TimeOfDay with name <code>sClassName</code>
					 * and enriches it with the information contained in <code>oClassInfo</code>.
					 * 
					 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.odata.type.ODataType.extend}.
					 * @param sClassName Name of the class being created
					 * @param oClassInfo Object literal with information about the class(optional)
					 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
					 * @return Created class / constructor function
					 */
					extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
					/**
					 * Formats the given value to the given target type.
					 * @param sValue The value to be formatted, which is represented as a string in the model
					 * @param sTargetType The target type, may be "any" or "string"; see {@link sap.ui.model.odata.type} for more
					 *   information
					 * @return The formatted output value in the target type; <code>undefined</code> or <code>null</code>
					 *   are formatted to <code>null</code>
					 */
					formatValue(sValue: string, sTargetType: string): string;
					/**
					 * Format the given value in model representation to an output value in the given
					 * internal type. This happens according to the format options, if target type is 'string'.
					 * If oValue is not defined or null, null will be returned.
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be formatted
					 * @param sInternalType the target type
					 * @return the formatted output value
					 */
					formatValue(oValue: any, sInternalType: string): any;
					/**
					 * Returns the type's name.
					 * @return The type's name
					 */
					getName(): string;
					/**
					 * Parses the given value, which is expected to be of the given type, to a string with an
					 * OData V4 Edm.TimeOfDay value.
					 * @param sValue The value to be parsed, maps <code>""</code> to <code>null</code>
					 * @param sSourceType The source type (the expected type of <code>sValue</code>), must be "string"; see
					 *   {@link sap.ui.model.odata.type} for more information.
					 * @return The parsed value
					 */
					parseValue(sValue: string, sSourceType: string): string;
					/**
					 * Parse a value of an internal type to the expected value of the model type.
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be parsed
					 * @param sInternalType the source type
					 * @return the parse result
					 */
					parseValue(oValue: any, sInternalType: string): any;
					/**
					 * Validates the given value in model representation and meets the type's constraints.
					 * @param sValue The value to be validated
					 */
					validateValue(sValue: string);
					/**
					 * Validate whether a given value in model representation is valid and meets the
					 * defined constraints (if any).
					 * @note Overload from base type sap.ui.model.SimpleType
					 * @param oValue the value to be validated
					 */
					validateValue(oValue: any);
				}
			}
		
			/**
			 * Different methods for update operations
			 */
			namespace UpdateMethod {
				/**
				 * MERGE method will send update requests in a MERGE request
				 */
				var Merge: any;
				/**
				 * PUT method will send update requests in a PUT request
				 */
				var Put: any;
			}
		
			/**
			 * OData-based DataBinding
			 */
			namespace v2 {
			
				class ODataAnnotations extends sap.ui.base.EventProvider {
					/**
					 * 
					 */
					constructor();
					/**
					 * This event exists for compatibility with the old Annotation loader
					 * Attaches the given callback to the <code>allFailed</code> event. This event is fired when no annotation from a group of
					 * sources was successfully (loaded,) parsed and merged.
					 * The parameter <code>result</code> will be set on the event argument and contains an array of Errors in the order in which
					 * the sources had been added.
					 * @param oData The object, that should be passed along with the event-object when firing the event.
					 * @param fnFunction The event callback. This function will be called in the context of the oListener
					 *        object if given as the next argument.
					 * @param oListener Object to use as context of the callback. If empty, the global context is used.(optional)
					 * @return <code>this</code>-reference to allow method chaining
					 */
					attachAllFailed(oData: any, fnFunction: any, oListener?: any): ODataAnnotations;
					/**
					 * Attaches the given callback to the <code>error</code> event, which is fired whenever a source cannot be loaded, parsed or
					 * merged into the annotation data.
					 * The following parameters will be set on the event object that is given to the callback function:
					 *   <code>source</code> - A map containing the properties <code>type</code> - containing either "url" or "xml" - and <code>data</code> containing
					 *              the data given as source, either an URL or an XML string depending on how the source was added.
					 *   <code>error</code>  - An Error object describing the problem that occurred
					 * @param oData The object, that should be passed along with the event-object when firing the event.
					 * @param fnFunction The event callback. This function will be called in the context of the oListener
					 *        object if given as the next argument.
					 * @param oListener Object to use as context of the callback. If empty, the global context is used.(optional)
					 * @return <code>this</code>-reference to allow method chaining
					 */
					attachError(oData: any, fnFunction: any, oListener?: any): ODataAnnotations;
					/**
					 * Attaches the given callback to the <code>failed</code> event. This event is fired when at least one annotation from a group
					 * of sources was not successfully (loaded,) parsed or merged.
					 * The parameter <code>result</code> will be set on the event argument and contains an array of Errors in the order in which
					 * the sources had been added.
					 * @param oData The object, that should be passed along with the event-object when firing the event.
					 * @param fnFunction The event callback. This function will be called in the context of the oListener
					 *        object if given as the next argument.
					 * @param oListener Object to use as context of the callback. If empty, the global context is used.(optional)
					 * @return <code>this</code>-reference to allow method chaining
					 */
					attachFailed(oData: any, fnFunction: any, oListener?: any): ODataAnnotations;
					/**
					 * Attaches the given callback to the <code>loaded</code> event. This event is fired when all annotations from a group of
					 * sources was successfully (loaded,) parsed and merged.
					 * The parameter <code>result</code> will be set on the event argument and contains an array of all loaded sources as well
					 * as Errors in the order in which they had been added.
					 * @param oData The object, that should be passed along with the event-object when firing the event.
					 * @param fnFunction The event callback. This function will be called in the context of the oListener
					 *        object if given as the next argument.
					 * @param oListener Object to use as context of the callback. If empty, the global context is used.(optional)
					 * @return <code>this</code>-reference to allow method chaining
					 */
					attachLoaded(oData: any, fnFunction: any, oListener?: any): ODataAnnotations;
					/**
					 * This event exists for compatibility with the old Annotation loader
					 * Attaches the given callback to the <code>someLoaded</code> event. This event is fired when at least one annotation from a
					 * group of sources was successfully (loaded,) parsed and merged.
					 * The parameter <code>result</code> will be set on the event argument and contains an array of all loaded sources as well
					 * as Errors in the order in which they had been added.
					 * @param oData The object, that should be passed along with the event-object when firing the event.
					 * @param fnFunction The event callback. This function will be called in the context of the oListener
					 *        object if given as the next argument.
					 * @param oListener Object to use as context of the callback. If empty, the global context is used.(optional)
					 * @return <code>this</code>-reference to allow method chaining
					 */
					attachSomeLoaded(oData: any, fnFunction: any, oListener?: any): ODataAnnotations;
					/**
					 * Attaches the given callback to the <code>success</code> event, which is fired whenever a source has been successfully
					 * (loaded,) parsed and merged into the annotation data.
					 * The following parameters will be set on the event object that is given to the callback function:
					 *   <code>source</code> - A map containing the properties <code>type</code> - containing either "url" or "xml" - and <code>data</code> containing
					 *              the data given as source, either an URL or an XML string depending on how the source was added.
					 * @param oData The object, that should be passed along with the event-object when firing the event.
					 * @param fnFunction The event callback. This function will be called in the context of the oListener
					 *        object if given as the next argument.
					 * @param oListener Object to use as context of the callback. If empty, the global context is used.(optional)
					 * @return <code>this</code>-reference to allow method chaining.
					 */
					attachSuccess(oData: any, fnFunction: any, oListener?: any): ODataAnnotations;
					/**
					 * Detaches the given callback from the <code>allFailed</code> event.
					 * The passed function and listener object must match the ones previously used for attaching to the event.
					 * @param fnFunction The event callback previously used with {@link sap.ui.model.odata.v2.ODataAnnotations#attachFailed}.
					 * @param oListener The same (if any) context object that was used when attaching to the <code>error</code> event.(optional)
					 * @return <code>this</code>-reference to allow method chaining.
					 */
					detachAllFailed(fnFunction: any, oListener?: any): ODataAnnotations;
					/**
					 * Detaches the given callback from the <code>error</code> event.
					 * The passed function and listener object must match the ones previously used for attaching to the event.
					 * @param fnFunction The event callback previously used with {@link sap.ui.model.odata.v2.ODataAnnotations#attachError}.
					 * @param oListener The same (if any) context object that was used when attaching to the <code>error</code> event.(optional)
					 * @return <code>this</code>-reference to allow method chaining.
					 */
					detachError(fnFunction: any, oListener?: any): ODataAnnotations;
					/**
					 * Detaches the given callback from the <code>failed</code> event.
					 * The passed function and listener object must match the ones previously used for attaching to the event.
					 * @param fnFunction The event callback previously used with {@link sap.ui.model.odata.v2.ODataAnnotations#attachFailed}.
					 * @param oListener The same (if any) context object that was used when attaching to the <code>error</code> event.(optional)
					 * @return <code>this</code>-reference to allow method chaining.
					 */
					detachFailed(fnFunction: any, oListener?: any): ODataAnnotations;
					/**
					 * Detaches the given callback from the <code>loaded</code> event.
					 * The passed function and listener object must match the ones previously used for attaching to the event.
					 * @param fnFunction The event callback previously used with {@link sap.ui.model.odata.v2.ODataAnnotations#attachLoaded}.
					 * @param oListener The same (if any) context object that was used when attaching to the <code>error</code> event.(optional)
					 * @return <code>this</code>-reference to allow method chaining.
					 */
					detachLoaded(fnFunction: any, oListener?: any): ODataAnnotations;
					/**
					 * Detaches the given callback from the <code>someLoaded</code> event.
					 * The passed function and listener object must match the ones previously used for attaching to the event.
					 * @param fnFunction The event callback previously used with {@link sap.ui.model.odata.v2.ODataAnnotations#attachSomeLoaded}.
					 * @param oListener The same (if any) context object that was used when attaching to the <code>error</code> event.(optional)
					 * @return <code>this</code>-reference to allow method chaining.
					 */
					detachSomeLoaded(fnFunction: any, oListener?: any): ODataAnnotations;
					/**
					 * Detaches the given callback from the <code>success</code> event.
					 * The passed function and listener object must match the ones previously used for attaching to the event.
					 * @param fnFunction The event callback previously used with {@link sap.ui.model.odata.v2.ODataAnnotations#attachSuccess}.
					 * @param oListener The same (if any) context object that was used when attaching to the <code>success</code> event.(optional)
					 * @return <code>this</code>-reference to allow method chaining.
					 */
					detachSuccess(fnFunction: any, oListener?: any): ODataAnnotations;
					/**
					 * Creates a new subclass of class sap.ui.model.odata.v2.ODataAnnotations with name <code>sClassName</code>
					 * and enriches it with the information contained in <code>oClassInfo</code>.
					 * 
					 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
					 * @param sClassName Name of the class being created
					 * @param oClassInfo Object literal with information about the class(optional)
					 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
					 * @return Created class / constructor function
					 */
					extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
					/**
					 * V1 API Compatibility method. @see sap.ui.model.odata.v2.ODataAnnotations#getData
					 * Returns the parsed and merged annotation data object
					 * @deprecated 
					 * @return returns annotations data
					 */
					getAnnotationsData(): any;
					/**
					 * Returns the parsed and merged annotation data object
					 * @return returns annotations data
					 */
					getData(): any;
					/**
					 * Returns a promise that resolves when the annotation sources that were added up to this point were successfully
					 * (loaded,) parsed and merged
					 * @return The Promise that resolves/rejects after the last added sources have been processed
					 */
					loaded(): any;
					/**
					 * Set custom headers which are provided in a key/value map. These headers are used for all requests.
					 * The "Accept-Language" header cannot be modified and is set using the core's language setting.
					 * 
					 * To remove these headers, simply set the <code>mHeaders</code> parameter to <code>{}</code>. Please also note that when calling this method
					 * again all previous custom headers are removed unless they are specified again in the <code>mCustomHeaders</code> parameter.
					 * @param mHeaders the header name/value map.
					 */
					setHeaders(mHeaders: any);
				}
			
				class ODataAnnotationsconstructor  {
					/**
					 * Creates a new instance of the ODataAnnotations annotation loader.
					 * @param oMetadata Metadata object with the metadata information needed to parse the annotations
					 * @param mOptions Obligatory options
					 */
					constructor(oMetadata: sap.ui.model.odata.ODataMetadata, mOptions: any);
				}
			
				class ODataContextBinding extends sap.ui.model.ContextBinding {
					/**
					 * Constructor for odata.ODataContextBinding
					 * @param oModel 
					 * @param sPath 
					 * @param oContext 
					 * @param mParameters a map which contains additional parameters for the binding.(optional)
					 */
					constructor(oModel: sap.ui.model.Model, sPath: string, oContext: any, mParameters?: any);
					/**
					 * Creates a new subclass of class sap.ui.model.odata.v2.ODataContextBinding with name <code>sClassName</code>
					 * and enriches it with the information contained in <code>oClassInfo</code>.
					 * 
					 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.ContextBinding.extend}.
					 * @param sClassName Name of the class being created
					 * @param oClassInfo Object literal with information about the class(optional)
					 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
					 * @return Created class / constructor function
					 */
					extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
					/**
					 * 
					 * @param bForceUpdate Update the bound control even if no data has been changed(optional)
					 * @param sGroupId The group Id for the refresh(optional)
					 */
					refresh(bForceUpdate?: boolean, sGroupId?: string);
					/**
					 * Refreshes the binding, check whether the model data has been changed and fire change event
					 * if this is the case. For server side models this should refetch the data from the server.
					 * To update a control, even if no data has been changed, e.g. to reset a control after failed
					 * validation, please use the parameter bForceUpdate.
					 * @note Overload from base type sap.ui.model.Binding
					 * @param bForceUpdate Update the bound control even if no data has been changed
					 */
					refresh(bForceUpdate: boolean);
				}
			
				class ODataListBinding extends sap.ui.model.ListBinding {
					/**
					 * 
					 * @param oModel 
					 * @param sPath 
					 * @param oContext 
					 * @param aSorters initial sort order (can be either a sorter or an array of sorters)(optional)
					 * @param aFilters predefined filter/s (can be either a filter or an array of filters)(optional)
					 * @param mParameters a map which contains additional parameters for the binding.(optional)
					 */
					constructor(oModel: sap.ui.model.Model, sPath: string, oContext: sap.ui.model.Context, aSorters?: any[], aFilters?: any[], mParameters?: any);
					/**
					 * Creates a new subclass of class sap.ui.model.odata.v2.ODataListBinding with name <code>sClassName</code>
					 * and enriches it with the information contained in <code>oClassInfo</code>.
					 * 
					 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.ListBinding.extend}.
					 * @param sClassName Name of the class being created
					 * @param oClassInfo Object literal with information about the class(optional)
					 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
					 * @return Created class / constructor function
					 */
					extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
					/**
					 * 
					 * Filters the list.
					 * 
					 * When using sap.ui.model.Filter the filters are first grouped according to their binding path.
					 * All filters belonging to a group are combined with OR and after that the
					 * results of all groups are combined with AND.
					 * Usually this means, all filters applied to a single table column
					 * are combined with OR, while filters on different table columns are combined with AND.
					 * Please note that a custom filter function is only supported with operation mode <code>sap.ui.model.odata.OperationMode.Client</code>.
					 * @param aFilters Array of filter objects
					 * @param sFilterType Type of the filter which should be adjusted, if it is not given, the standard behaviour applies
					 * @return returns <code>this</code> to facilitate method chaining
					 */
					filter(aFilters: sap.ui.model.Filter[], sFilterType: sap.ui.model.FilterType): sap.ui.model.ListBinding;
					/**
					 * Filters the list according to the filter definitions
					 * @note Overload from base type sap.ui.model.ListBinding
					 * @param aFilters Array of filter objects
					 * @param sFilterType Type of the filter which should be adjusted, if it is not given, the standard behaviour applies
					 * @return returns <code>this</code> to facilitate method chaining
					 */
					filter(aFilters: any[], sFilterType: sap.ui.model.FilterType): sap.ui.model.ListBinding;
					/**
					 * Return contexts for the list
					 * @param iStartIndex the start index of the requested contexts(optional)
					 * @param iLength the requested amount of contexts(optional)
					 * @param iThreshold The threshold value(optional)
					 * @return the array of contexts for each row of the bound list
					 */
					getContexts(iStartIndex?: number, iLength?: number, iThreshold?: number): sap.ui.model.Context[];
					/**
					 * Returns an array of binding contexts for the bound target list.
					 * 
					 * <strong>Note:</strong>The public usage of this method is deprecated, as calls from outside of controls will lead
					 * to unexpected side effects. For avoidance use {@link sap.ui.model.ListBinding.prototype.getCurrentContexts}
					 * instead.
					 * @note Overload from base type sap.ui.model.ListBinding
					 * @param iStartIndex the startIndex where to start the retrieval of contexts(optional)
					 * @param iLength determines how many contexts to retrieve beginning from the start index.(optional)
					 * @return the array of contexts for each row of the bound list
					 */
					getContexts(iStartIndex?: number, iLength?: number): sap.ui.model.Context[];
					/**
					 * Get a download URL with the specified format considering the
					 * sort/filter/custom parameters.
					 * @param sFormat Value for the $format Parameter
					 * @return URL which can be used for downloading
					 */
					getDownloadUrl(sFormat: string): string;
					/**
					 * Return the length of the list.
					 * 
					 * In case the final length is unknown (e.g. when searching on a large dataset), this will
					 * return an estimated length.
					 * @return the length
					 */
					getLength(): number;
					/**
					 * Initialize binding. Fires a change if data is already available ($expand) or a refresh.
					 * If metadata is not yet available, do nothing, method will be called again when
					 * metadata is loaded.
					 * @return oBinding The binding instance
					 */
					initialize(): sap.ui.model.odata.ODataListBinding;
					/**
					 * Initialize the binding. The message should be called when creating a binding.
					 * The default implementation calls checkUpdate(true).
					 * @note Overload from base type sap.ui.model.Binding
					 */
					initialize();
					/**
					 * Refreshes the binding, check whether the model data has been changed and fire change event
					 * if this is the case. For server side models this should refetch the data from the server.
					 * To update a control, even if no data has been changed, e.g. to reset a control after failed
					 * validation, please use the parameter bForceUpdate.
					 * @param bForceUpdate Update the bound control even if no data has been changed(optional)
					 * @param sGroupId The group Id for the refresh(optional)
					 */
					refresh(bForceUpdate?: boolean, sGroupId?: string);
					/**
					 * Refreshes the binding, check whether the model data has been changed and fire change event
					 * if this is the case. For server side models this should refetch the data from the server.
					 * To update a control, even if no data has been changed, e.g. to reset a control after failed
					 * validation, please use the parameter bForceUpdate.
					 * @note Overload from base type sap.ui.model.Binding
					 * @param bForceUpdate Update the bound control even if no data has been changed
					 */
					refresh(bForceUpdate: boolean);
					/**
					 * Sorts the list.
					 * @param aSorters the Sorter or an array of sorter objects object which define the sort order
					 * @return returns <code>this</code> to facilitate method chaining
					 */
					sort(aSorters: sap.ui.model.Sorter|any[]): sap.ui.model.ListBinding;
				}
			
				class ODataModel extends sap.ui.model.Model {
					/**
					 * Constructor for a new ODataModel.
					 * @param sServiceUrl base uri of the service to request data from; additional URL parameters appended here will be appended to every request
					 * 								can be passed with the mParameters object as well: [mParameters.serviceUrl] A serviceURl is required!(optional)
					 * @param mParameters (optional) a map which contains the following parameter properties:(optional)
					 */
					constructor(sServiceUrl?: string, mParameters?: any);
					/**
					 * Adds (a) new URL(s) to the be parsed for OData annotations, which are then merged into the annotations object
					 * which can be retrieved by calling the getServiceAnnotations()-method. If a $metadata url is passed the data will
					 * also be merged into the metadata object, which can be reached by calling the getServiceMetadata() method.
					 * @param vUrl Either one URL as string or an array or URL strings
					 * @return The Promise to load the given URL(s), resolved if all URLs have been loaded, rejected if at least one fails to load.
					 * 					 If this promise resolves it returns the following parameters:
					 * 					 annotations: The annotation object
					 * 					 entitySets: An array of EntitySet objects containing the newly merged EntitySets from a $metadata requests.
					 * 								 the structure is the same as in the metadata object reached by the getServiceMetadata() method.
					 * 								 For non $metadata requests the array will be empty.
					 */
					addAnnotationUrl(vUrl: string|string[]): any;
					/**
					 * Adds new xml content to be parsed for OData annotations, which are then merged into the annotations object which
					 * can be retrieved by calling the getServiceAnnotations()-method.
					 * @param sXMLContent The string that should be parsed as annotation XML
					 * @param bSuppressEvents Whether not to fire annotationsLoaded event on the annotationParser(optional)
					 * @return The Promise to parse the given XML-String, resolved if parsed without errors, rejected if errors occur
					 */
					addAnnotationXML(sXMLContent: string, bSuppressEvents?: boolean): any;
					/**
					 * Attach event-handler <code>fnFunction</code> to the 'annotationsFailed' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
					 * @param oData The object, that should be passed along with the event-object when firing the event.
					 * @param fnFunction The function to call, when the event occurs. This function will be called on the
					 *            oListener-instance (if present) or in a 'static way'.
					 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.(optional)
					 * @return <code>this</code> to allow method chaining
					 */
					attachAnnotationsFailed(oData: any, fnFunction: any, oListener?: any): ODataModel;
					/**
					 * Attach event-handler <code>fnFunction</code> to the 'annotationsLoaded' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
					 * @param oData The object, that should be passed along with the event-object when firing the event.
					 * @param fnFunction The function to call, when the event occurs. This function will be called on the
					 *            oListener-instance (if present) or in a 'static way'.
					 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.(optional)
					 * @return <code>this</code> to allow method chaining
					 */
					attachAnnotationsLoaded(oData: any, fnFunction: any, oListener?: any): ODataModel;
					/**
					 * Attach event-handler <code>fnFunction</code> to the 'batchRequestCompleted' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
					 * @param oData The object, that should be passed along with the event-object when firing the event.
					 * @param fnFunction The function to call, when the event occurs. This function will be called on the
					 *            oListener-instance (if present) or in a 'static way'.
					 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.(optional)
					 * @return <code>this</code> to allow method chaining
					 */
					attachBatchRequestCompleted(oData: any, fnFunction: any, oListener?: any): ODataModel;
					/**
					 * Attach event-handler <code>fnFunction</code> to the 'batchRequestFailed' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.<br/>
					 * @param oData The object, that should be passed along with the event-object when firing the event.
					 * @param fnFunction The function to call, when the event occurs. This function will be called on the
					 *            oListener-instance (if present) or in a 'static way'.
					 * @param oListener Object on which to call the given function. If empty, this Model is used.(optional)
					 * @return <code>this</code> to allow method chaining
					 */
					attachBatchRequestFailed(oData: any, fnFunction: any, oListener?: any): ODataModel;
					/**
					 * Attach event-handler <code>fnFunction</code> to the 'requestSent' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
					 * @param oData The object, that should be passed along with the event-object when firing the event.
					 * @param fnFunction The function to call, when the event occurs. This function will be called on the
					 *            oListener-instance (if present) or in a 'static way'.
					 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.(optional)
					 * @return <code>this</code> to allow method chaining
					 */
					attachBatchRequestSent(oData: any, fnFunction: any, oListener?: any): ODataModel;
					/**
					 * Attach event-handler <code>fnFunction</code> to the 'metadataFailed' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
					 * @param oData The object, that should be passed along with the event-object when firing the event.
					 * @param fnFunction The function to call, when the event occurs. This function will be called on the
					 *            oListener-instance (if present) or in a 'static way'.
					 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.(optional)
					 * @return <code>this</code> to allow method chaining
					 */
					attachMetadataFailed(oData: any, fnFunction: any, oListener?: any): ODataModel;
					/**
					 * Attach event-handler <code>fnFunction</code> to the 'metadataLoaded' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
					 * @param oData The object, that should be passed along with the event-object when firing the event.
					 * @param fnFunction The function to call, when the event occurs. This function will be called on the
					 *            oListener-instance (if present) or in a 'static way'.
					 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.(optional)
					 * @return <code>this</code> to allow method chaining
					 */
					attachMetadataLoaded(oData: any, fnFunction: any, oListener?: any): ODataModel;
					/**
					 * Trigger a request to the function import odata service that was specified in the model constructor.
					 * 
					 * If the ReturnType of the function import is either an EntityType or a collection of EntityType the
					 * changes are reflected in the model, otherwise they are ignored, and the <code>response</code> can
					 * be processed in the successHandler.
					 * @param sFunctionName A string containing the name of the function to call. The name is concatenated to the sServiceUrl which was
					 *        specified in the model constructor.
					 * @param mParameters Optional parameter map containing any of the following properties:(optional)
					 * @return oRequestHandle An object which has a <code>contextCreated</code> function that returns a <code>Promise</code>.
					 *         This resolves with the created {@link sap.ui.model.Context}.
					 *         In addition it has an <code>abort</code> function to abort the current request.
					 */
					callFunction(sFunctionName: string, mParameters?: any): any;
					/**
					 * Trigger a POST request to the odata service that was specified in the model constructor. Please note that deep creates are not supported
					 * and may not work.
					 * @param sPath A string containing the path to the collection where an entry
					 * 		should be created. The path is concatenated to the sServiceUrl
					 * 		which was specified in the model constructor.
					 * @param oData data of the entry that should be created.
					 * @param mParameters Optional parameter map containing any of the following properties:(optional)
					 * @return an object which has an <code>abort</code> function to abort the current request.
					 */
					create(sPath: string, oData: any, mParameters?: any): any;
					/**
					 * Creates a binding context for the given path
					 * If the data of the context is not yet available, it can not be created, but first the
					 * entity needs to be fetched from the server asynchronously. In case no callback function
					 * is provided, the request will not be triggered.
					 * @param sPath binding path
					 * @param oContext bindingContext(optional)
					 * @param mParameters a map which contains additional parameters for the binding(optional)
					 * @param fnCallBack function called when context is created(optional)
					 * @param bReload reload of data(optional)
					 * @return sap.ui.model.Context
					 */
					createBindingContext(sPath: string, oContext?: any, mParameters?: any, fnCallBack?: any, bReload?: boolean);
					/**
					 * Implement in inheriting classes
					 * @note Overload from base type sap.ui.model.Model
					 * @param sPath the path to create the new context from
					 * @param oContext the context which should be used to create the new binding context(optional)
					 * @param mParameters the parameters used to create the new binding context(optional)
					 * @param fnCallBack the function which should be called after the binding context has been created(optional)
					 * @param bReload force reload even if data is already available. For server side models this should
					 *                   refetch the data from the server(optional)
					 * @return the binding context, if it could be created synchronously
					 */
					createBindingContext(sPath: string, oContext?: any, mParameters?: any, fnCallBack?: any, bReload?: boolean): sap.ui.model.Context;
					/**
					 * Creates a new entry object which is described by the metadata of the entity type of the
					 * specified sPath Name. A context object is returned which can be used to bind
					 * against the newly created object.
					 * 
					 * For each created entry a request is created and stored in a request queue.
					 * The request queue can be submitted by calling submitChanges. To delete a created
					 * entry from the request queue call deleteCreatedEntry.
					 * 
					 * The optional properties parameter can be used as follows:
					 * 
					 *   - properties could be an array containing the property names which should be included
					 *     in the new entry. Other properties defined in the entity type are not included.
					 *   - properties could be an object which includes the desired properties and the values
					 *     which should be used for the created entry.
					 * 
					 * If properties is not specified, all properties in the entity type will be included in the
					 * created entry.
					 * 
					 * If there are no values specified the properties will have undefined values.
					 * 
					 * Please note that deep creates (including data defined by navigationproperties) are not supported
					 * @param sPath Name of the path to the EntitySet
					 * @param mParameters A map of the following parameters:
					 * @return oContext A Context object that point to the new created entry.
					 */
					createEntry(sPath: string, mParameters: any): sap.ui.model.Context;
					/**
					 * Creates the key from the given collection name and property map. Please make sure that the metadata document is loaded before using this function.
					 * @param sCollection The name of the collection
					 * @param oKeyProperties The object containing at least all the key properties of the entity type
					 * @return [sKey] key of the entry
					 */
					createKey(sCollection: string, oKeyProperties: any): string;
					/**
					 * Deletes a created entry from the request queue and the model.
					 * @param oContext The context object pointing to the created entry
					 */
					deleteCreatedEntry(oContext: sap.ui.model.Context);
					/**
					 * 
					 */
					destroy();
					/**
					 * Detach event-handler <code>fnFunction</code> from the 'annotationsFailed' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
					 * 
					 * The passed function and listener object must match the ones previously used for event registration.
					 * @param fnFunction The function to call, when the event occurs.
					 * @param oListener Object on which the given function had to be called.
					 * @return <code>this</code> to allow method chaining
					 */
					detachAnnotationsFailed(fnFunction: any, oListener: any): ODataModel;
					/**
					 * Detach event-handler <code>fnFunction</code> from the 'annotationsLoaded' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
					 * @param fnFunction The function to call, when the event occurs.
					 * @param oListener Object on which the given function had to be called.
					 * @return <code>this</code> to allow method chaining
					 */
					detachAnnotationsLoaded(fnFunction: any, oListener: any): ODataModel;
					/**
					 * Detach event-handler <code>fnFunction</code> from the 'batchRequestCompleted' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
					 * 
					 * The passed function and listener object must match the ones previously used for event registration.
					 * @param fnFunction The function to call, when the event occurs.
					 * @param oListener Object on which the given function had to be called.
					 * @return <code>this</code> to allow method chaining
					 */
					detachBatchRequestCompleted(fnFunction: any, oListener: any): ODataModel;
					/**
					 * Detach event-handler <code>fnFunction</code> from the 'batchRequestFailed' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.<br/>
					 * 
					 * The passed function and listener object must match the ones previously used for event registration.
					 * @param fnFunction The function to call, when the event occurs.
					 * @param oListener Object on which the given function had to be called.
					 * @return <code>this</code> to allow method chaining
					 */
					detachBatchRequestFailed(fnFunction: any, oListener: any): ODataModel;
					/**
					 * Detach event-handler <code>fnFunction</code> from the 'batchRequestSent' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
					 * 
					 * The passed function and listener object must match the ones previously used for event registration.
					 * @param fnFunction The function to call, when the event occurs.
					 * @param oListener Object on which the given function had to be called.
					 * @return <code>this</code> to allow method chaining
					 */
					detachBatchRequestSent(fnFunction: any, oListener: any): ODataModel;
					/**
					 * Detach event-handler <code>fnFunction</code> from the 'metadataFailed' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
					 * 
					 * The passed function and listener object must match the ones previously used for event registration.
					 * @param fnFunction The function to call, when the event occurs.
					 * @param oListener Object on which the given function had to be called.
					 * @return <code>this</code> to allow method chaining
					 */
					detachMetadataFailed(fnFunction: any, oListener: any): ODataModel;
					/**
					 * Detach event-handler <code>fnFunction</code> from the 'metadataLoaded' event of this <code>sap.ui.model.odata.v2.ODataModel</code>.
					 * 
					 * The passed function and listener object must match the ones previously used for event registration.
					 * @param fnFunction The function to call, when the event occurs.
					 * @param oListener Object on which the given function had to be called.
					 * @return <code>this</code> to allow method chaining
					 */
					detachMetadataLoaded(fnFunction: any, oListener: any): ODataModel;
					/**
					 * Creates a new subclass of class sap.ui.model.odata.v2.ODataModel with name <code>sClassName</code>
					 * and enriches it with the information contained in <code>oClassInfo</code>.
					 * 
					 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.
					 * @param sClassName Name of the class being created
					 * @param oClassInfo Object literal with information about the class(optional)
					 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
					 * @return Created class / constructor function
					 */
					extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
					/**
					 * Fire event annotationsFailed to attached listeners.
					 * @param mArguments the arguments to pass along with the event.(optional)
					 * @return <code>this</code> to allow method chaining
					 */
					fireAnnotationsFailed(mArguments?: any): ODataModel;
					/**
					 * Fire event annotationsLoaded to attached listeners.
					 * @param mArguments the arguments to pass along with the event.(optional)
					 * @return <code>this</code> to allow method chaining
					 */
					fireAnnotationsLoaded(mArguments?: any): ODataModel;
					/**
					 * Fire event batchRequestCompleted to attached listeners.
					 * @param mArguments parameters to add to the fired event
					 * @return <code>this</code> to allow method chaining
					 */
					fireBatchRequestCompleted(mArguments: any): ODataModel;
					/**
					 * Fire event batchRequestFailed to attached listeners.
					 * @param mArguments the arguments to pass along with the event.
					 * @return <code>this</code> to allow method chaining
					 */
					fireBatchRequestFailed(mArguments: any): ODataModel;
					/**
					 * Fire event batchRequestSent to attached listeners.
					 * @param mArguments the arguments to pass along with the event.(optional)
					 * @return <code>this</code> to allow method chaining
					 */
					fireBatchRequestSent(mArguments?: any): ODataModel;
					/**
					 * Fire event metadataFailed to attached listeners.
					 * @param mArguments the arguments to pass along with the event.(optional)
					 * @return <code>this</code> to allow method chaining
					 */
					fireMetadataFailed(mArguments?: any): ODataModel;
					/**
					 * Fire event metadataLoaded to attached listeners.
					 * @param mArguments the arguments to pass along with the event.(optional)
					 * @return <code>this</code> to allow method chaining
					 */
					fireMetadataLoaded(mArguments?: any): ODataModel;
					/**
					 * Force the update on the server of an entity by setting its ETag to '*'.
					 * ETag handling must be active so the force update will work.
					 * @param sKey The key to an Entity e.g.: Customer(4711)
					 */
					forceEntityUpdate(sKey: string);
					/**
					 * Returns the definition of groups per EntityType for TwoWay changes
					 * @return mChangeGroups Definition of Groups for "TwoWay" changes
					 */
					getChangeGroups(): any;
					/**
					 * Return requested data as object if the data has already been loaded and stored in the model.
					 * @param sPath A string containing the path to the data object that should be returned.
					 * @param oContext the optional context which is used with the sPath to retrieve the requested data.(optional)
					 * @param bIncludeExpandEntries This parameter should be set when a URI or custom parameter
					 * with a $expand System Query Option was used to retrieve associated entries embedded/inline.
					 * If true then the getProperty function returns a desired property value/entry and includes the associated expand entries (if any).
					 * If false the associated/expanded entry properties are removed and not included in the
					 * desired entry as properties at all. This is useful for performing updates on the base entry only. Note: A copy and not a reference of the entry will be returned.(optional)
					 * @deprecated please use {@link #getProperty} instead
					 * @return oData Object containing the requested data if the path is valid.
					 */
					getData(sPath: string, oContext?: any, bIncludeExpandEntries?: boolean): any;
					/**
					 * Returns the default count mode for retrieving the count of collections
					 * @return sCountMode returns defaultCountMode
					 */
					getDefaultCountMode(): sap.ui.model.odata.CountMode;
					/**
					 * Returns the array of GroupIds that are set as deferred
					 * @return aGroupIds The array of deferred GroupIds
					 */
					getDeferredGroups(): any[];
					/**
					 * Returns the ETag for a given binding path/context or data object
					 * @param sPath The binding path(optional)
					 * @param oContext The binding context(optional)
					 * @param oEntity The entity data(optional)
					 * @return The found ETag (or null if none could be found)
					 */
					getETag(sPath?: string, oContext?: sap.ui.model.Context, oEntity?: any): string;
					/**
					 * Returns all headers and custom headers which are stored in the OData model.
					 * @return the header map
					 */
					getHeaders(): any;
					/**
					 * Returns the key part from the entry URI or the given context or object
					 * @param vValue A string representation of an URI, the context or entry object
					 * @return [sKey] key of the entry
					 */
					getKey(vValue: string|any|sap.ui.model.Context): string;
					/**
					 * Returns an instance of an OData meta model which offers a unified access to both OData V2
					 * meta data and V4 annotations. It uses the existing {@link sap.ui.model.odata.ODataMetadata}
					 * as a foundation and merges V4 annotations from the existing
					 * {@link sap.ui.model.odata.v2.ODataAnnotations} directly into the corresponding model element.
					 * 
					 * <b>BEWARE:</b> Access to this OData meta model will fail before the promise returned by
					 * {@link sap.ui.model.odata.ODataMetaModel#loaded loaded} has been resolved!
					 * @return The meta model for this ODataModel
					 */
					getMetaModel(): sap.ui.model.odata.ODataMetaModel;
					/**
					 * Returns the meta model associated with this model if it is available for the concrete
					 * model type.
					 * @note Overload from base type sap.ui.model.Model
					 * @return The meta model or undefined if no meta model exists.
					 */
					getMetaModel(): sap.ui.model.MetaModel;
					/**
					 * Returns the original value for the property with the given path and context.
					 * The original value is the value that was last responded by the server.
					 * @param sPath the path/name of the property
					 * @param oContext the context if available to access the property value(optional)
					 * @return vValue the value of the property
					 */
					getOriginalProperty(sPath: string, oContext?: any): any;
					/**
					 * Returns the value for the property with the given <code>sPath</code>.
					 * If the path points to a navigation property which has been loaded via $expand then the <code>bIncludeExpandEntries</code>
					 * parameter determines if the navigation property should be included in the returned value or not.
					 * Please note that this currently works for 1..1 navigation properties only.
					 * @param sPath the path/name of the property
					 * @param oContext the context if available to access the property value(optional)
					 * @param bIncludeExpandEntries This parameter should be set when a URI or custom parameter
					 * with a $expand System Query Option was used to retrieve associated entries embedded/inline.
					 * If true then the getProperty function returns a desired property value/entry and includes the associated expand entries (if any).
					 * If false the associated/expanded entry properties are removed and not included in the
					 * desired entry as properties at all. This is useful for performing updates on the base entry only. Note: A copy and not a reference of the entry will be returned.(optional)
					 * @return vValue the value of the property
					 */
					getProperty(sPath: string, oContext?: any, bIncludeExpandEntries?: boolean): any;
					/**
					 * Implement in inheriting classes
					 * @note Overload from base type sap.ui.model.Model
					 * @param sPath the path to where to read the attribute value
					 * @param oContext the context with which the path should be resolved(optional)
					 */
					getProperty(sPath: string, oContext?: any);
					/**
					 * Returns the current security token. If the token has not been requested from the server it will be requested first.
					 * @return the CSRF security token
					 */
					getSecurityToken(): string;
					/**
					 * Return the annotation object. Please note that the metadata is loaded asynchronously and this function might return undefined because the
					 * metadata has not been loaded yet.
					 * In this case attach to the <code>annotationsLoaded</code> event to get notified when the annotations are available and then call this function.
					 * @return metdata object
					 */
					getServiceAnnotations(): any;
					/**
					 * Return the parsed XML metadata as a Javascript object. Please note that the metadata is loaded asynchronously and this function might return undefined because the
					 * metadata has not been loaded yet.
					 * In this case attach to the <code>metadataLoaded</code> event to get notified when the metadata is available and then call this function.
					 * @return metdata object
					 */
					getServiceMetadata(): any;
					/**
					 * Checks if there exist pending changes in the model created by the setProperty method.
					 * @return true/false
					 */
					hasPendingChanges(): boolean;
					/**
					 * Checks if there are pending requests, either ongoing or sequential
					 * @return true/false
					 */
					hasPendingRequests(): boolean;
					/**
					 * Checks whether metadata loading has failed in the past.
					 * @return returns whether metadata request has failed
					 */
					isMetadataLoadingFailed(): boolean;
					/**
					 * Returns a promise for the loaded state of the metadata. The promise won't get rejected in case the metadata loading failed but
					 * is only resolved if the metadata is loaded successfully.
					 * If <code>refreshMetadata</code> function is called after this promise is already resolved you should rely on the promise returned by
					 * <code>refreshMetadata</code> to get information about the refreshed metadata loaded state.
					 * @return returns a promise on metadata loaded state
					 */
					metadataLoaded(): any;
					/**
					 * Trigger a GET request to the odata service that was specified in the model constructor.
					 * The data will be stored in the model. The requested data is returned with the response.
					 * @param sPath A string containing the path to the data which should
					 * 		be retrieved. The path is concatenated to the sServiceUrl
					 * 		which was specified in the model constructor.
					 * @param mParameters Optional parameter map containing any of the following properties:(optional)
					 * @return an object which has an <code>abort</code> function to abort the current request.
					 */
					read(sPath: string, mParameters?: any): any;
					/**
					 * Refresh the model.
					 * This will check all bindings for updated data and update the controls if data has been changed.
					 * @param bForceUpdate Force update of controls(optional)
					 * @param bRemoveData If set to true then the model data will be removed/cleared.
					 * 					Please note that the data might not be there when calling e.g. getProperty too early before the refresh call returned.(optional)
					 * @param sGroupId The groupId. Requests belonging to the same groupId will be bundled in one batch request.(optional)
					 */
					refresh(bForceUpdate?: boolean, bRemoveData?: boolean, sGroupId?: string);
					/**
					 * Refresh the model.
					 * This will check all bindings for updated data and update the controls if data has been changed.
					 * @note Overload from base type sap.ui.model.Model
					 * @param bForceUpdate Update controls even if data has not been changed
					 */
					refresh(bForceUpdate: boolean);
					/**
					 * Refreshes the metadata for model, e.g. in case the request for metadata has failed.
					 * Returns a new promise which can be resolved or rejected depending on the metadata loading state.
					 * @return returns a promise on metadata loaded state or null if metadata is not initialized or currently refreshed.
					 */
					refreshMetadata(): any;
					/**
					 * refresh XSRF token by performing a GET request against the service root URL.
					 * @param fnSuccess a callback function which is called when the data has
					 *            					 been successfully retrieved.(optional)
					 * @param fnError a callback function which is called when the request failed. The handler can have the parameter: oError which contains
					 *  additional error information.(optional)
					 * @return an object which has an <code>abort</code> function to abort the current request.
					 */
					refreshSecurityToken(fnSuccess?: any, fnError?: any): any;
					/**
					 * Trigger a DELETE request to the odata service that was specified in the model constructor.
					 * @param sPath A string containing the path to the data that should be removed.
					 * 		The path is concatenated to the sServiceUrl which was specified in the model constructor.
					 * @param mParameters Optional, can contain the following attributes:(optional)
					 * @return an object which has an <code>abort</code> function to abort the current request.
					 */
					remove(sPath: string, mParameters?: any): any;
					/**
					 * 
					 * Resets the collected changes by the setProperty method.
					 * @param aPath Array of paths that should be resetted.
					 * 							If no array is passed all changes will be resetted.(optional)
					 */
					resetChanges(aPath?: any[]);
					/**
					 * Returns a promise, which will resolve with the security token as soon as it is available
					 * @return the CSRF security token
					 */
					securityTokenAvailable(): any;
					/**
					 * Definition of groups per EntityType for "TwoWay" changes
					 * @param mGroups A map containing the definition of bacthGroups for TwoWay changes. The Map has the
					 * following format:
					 * {
					 * 		"EntityTypeName": {
					 * 			groupId: "ID",
					 * 			[changeSetId: "ID",]
					 * 			[single: true/false,]
					 * 		}
					 * }
					 * GroupId: Defines the Group for changes of the defined EntityTypeName
					 * changeSetId: Defines a changeSetId wich bundles the changes for the EntityType.
					 * single: Defines if every change will get an own changeSet (true)
					 */
					setChangeGroups(mGroups: any);
					/**
					 * Sets the default way to retrieve the count of collections in this model.
					 * Count can be determined either by sending a separate $count request, including
					 * $inlinecount=allpages in data requests, both of them or not at all.
					 * @param sCountMode sets default count mode
					 */
					setDefaultCountMode(sCountMode: sap.ui.model.odata.CountMode);
					/**
					 * Setting request groups as deferred. Requests that belongs to a deferred group will be sent manually
					 * via a submitChanges call.
					 * @param aGroupIds Array of GroupIds that should be set as deferred
					 */
					setDeferredGroups(aGroupIds: any[]);
					/**
					 * Set custom headers which are provided in a key/value map. These headers are used for requests against the OData backend.
					 * Private headers which are set in the ODataModel cannot be modified.
					 * These private headers are: accept, accept-language, x-csrf-token, MaxDataServiceVersion, DataServiceVersion.
					 * 
					 * To remove these headers simply set the mCustomHeaders parameter to null. Please also note that when calling this method again all previous custom headers
					 * are removed unless they are specified again in the mCustomHeaders parameter.
					 * @param mHeaders the header name/value map.
					 */
					setHeaders(mHeaders: any);
					/**
					 * Sets a new value for the given property <code>sPropertyName</code> in the model.
					 * 
					 * If the changeBatchGroup for the changed EntityType is set to deferred changes could be submitted
					 * with submitChanges. Otherwise the change will be submitted directly.
					 * @param sPath path of the property to set
					 * @param oValue value to set the property to
					 * @param oContext the context which will be used to set the property(optional)
					 * @param bAsyncUpdate whether to update other bindings dependent on this property asynchronously(optional)
					 * @return true if the value was set correctly and false if errors occurred like the entry was not found or another entry was already updated.
					 */
					setProperty(sPath: string, oValue: any, oContext?: any, bAsyncUpdate?: boolean): boolean;
					/**
					 * Enable/Disable automatic updates of all Bindings after change operations
					 * @param bRefreshAfterChange Refresh after change
					 */
					setRefreshAfterChange(bRefreshAfterChange: boolean);
					/**
					 * Enable/Disable XCSRF-Token handling
					 * @param bTokenHandling whether to use token handling or not(optional)
					 */
					setTokenHandlingEnabled(bTokenHandling?: boolean);
					/**
					 * 
					 * @param bUseBatch whether the requests should be encapsulated in a batch request(optional)
					 */
					setUseBatch(bUseBatch?: boolean);
					/**
					 * Submits the collected changes which were collected by the setProperty method. The update method is defined by the global <code>defaultUpdateMethod</code>
					 * parameter which is sap.ui.model.odata.UpdateMethod.Merge by default. In case of a sap.ui.model.odata.UpdateMethod.Merge request only the changed properties will be updated.
					 * If a URI with a $expand System Query Option was used then the expand entries will be removed from the collected changes.
					 * Changes to this entries should be done on the entry itself. So no deep updates are supported.
					 * 
					 * Important: The success/error handler will only be called if batch support is enabled. If multiple batchGroups are submitted the handlers will be called for every batchGroup.
					 * @param mParameters a map which contains the following parameter properties:(optional)
					 * @return an object which has an <code>abort</code> function to abort the current request or requests
					 */
					submitChanges(mParameters?: any): any;
					/**
					 * Trigger a PUT/MERGE request to the odata service that was specified in the model constructor.
					 * The update method used is defined by the global <code>defaultUpdateMethod</code> parameter which is sap.ui.model.odata.UpdateMethod.Merge by default.
					 * Please note that deep updates are not supported and may not work. These should be done seperate on the entry directly.
					 * @param sPath A string containing the path to the data that should be updated.
					 * 		The path is concatenated to the sServiceUrl which was specified
					 * 		in the model constructor.
					 * @param oData data of the entry that should be updated.
					 * @param mParameters Optional, can contain the following attributes:(optional)
					 * @return an object which has an <code>abort</code> function to abort the current request.
					 */
					update(sPath: string, oData: any, mParameters?: any): any;
					/**
					 * update all bindings
					 * @param bForceUpdate If set to false an update  will only be done when the value of a binding changed.(optional)
					 */
					updateBindings(bForceUpdate?: boolean);
				}
			
				class ODataTreeBinding extends sap.ui.model.TreeBinding {
					/**
					 * 
					 * @param oModel 
					 * @param sPath 
					 * @param oContext 
					 * @param aApplicationFilters predefined filter/s (can be either a filter or an array of filters). All initial filters,
					 * 										   will be sent with every request. Filtering on the ODataTreeBinding is only supported with initial filters.(optional)
					 * @param mParameters Parameter Object(optional)
					 * @param aSorters predefined sorter/s (can be either a sorter or an array of sorters)(optional)
					 */
					constructor(oModel: sap.ui.model.Model, sPath: string, oContext: sap.ui.model.Context, aApplicationFilters?: sap.ui.model.Filter[], mParameters?: any, aSorters?: sap.ui.model.Sorter[]);
					/**
					 * Creates a new subclass of class sap.ui.model.odata.v2.ODataTreeBinding with name <code>sClassName</code>
					 * and enriches it with the information contained in <code>oClassInfo</code>.
					 * 
					 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.TreeBinding.extend}.
					 * @param sClassName Name of the class being created
					 * @param oClassInfo Object literal with information about the class(optional)
					 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
					 * @return Created class / constructor function
					 */
					extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
					/**
					 * Applies the given filters to the ODataTreeBinding.
					 * Please note that "Control" filters are not suported for OperationMode.Server, here only "Application" filters are allowed.
					 * Filters given via the constructor are always Application filters and will be send with every backend-request.
					 * Please see the constructor documentation for more information.
					 * 
					 * Since 1.34.0 complete clientside filtering is supported for OperationMode.Client and in OperationMode.Auto, in case the backend-count is lower than the threshold.
					 * In this case all control and application filters will be applied on the client.
					 * See also: {@link sap.ui.model.odata.OperationMode.Auto}, {@link sap.ui.model.FilterType}.
					 * 
					 * For the OperationMode.Client and OperationMode.Auto, you may also specify the "useServersideApplicationFilters" constructor binding parameter.
					 * If this is set, the Application filters will always be applied on the backend, and thus trigger an OData request.
					 * Please see the constructor documentation for more information.
					 * @param aFilters 
					 * @param sFilterType Type of the filter which should be adjusted, if it is not given, the standard behaviour FilterType.Client applies
					 * @return returns <code>this</code> to facilitate method chaining
					 */
					filter(aFilters: sap.ui.model.Filter[]|sap.ui.model.Filter, sFilterType: sap.ui.model.FilterType): ODataTreeBinding;
					/**
					 * Filters the tree according to the filter definitions.
					 * @note Overload from base type sap.ui.model.TreeBinding
					 * @param aFilters Array of sap.ui.model.Filter objects
					 * @param sFilterType Type of the filter which should be adjusted, if it is not given, the standard behaviour applies
					 */
					filter(aFilters: sap.ui.model.Filter[], sFilterType: sap.ui.model.FilterType);
					/**
					 * Returns the number of child nodes. This function is not available when the annotation "hierarchy-node-descendant-count-for"
					 * is exposed on the service.
					 * @param oContext the context element of the node
					 * @return the number of children
					 */
					getChildCount(oContext: any): number;
					/**
					 * Get a download URL with the specified format considering the
					 * sort/filter/custom parameters.
					 * @param sFormat Value for the $format Parameter
					 * @return URL which can be used for downloading
					 */
					getDownloadUrl(sFormat: string): string;
					/**
					 * Returns the contexts of the child nodes for the given context. This function is not available when the annotation "hierarchy-node-descendant-count-for"
					 * is exposed on the service.
					 * @param oContext the context for which the child nodes should be retrieved
					 * @param iStartIndex the start index of the requested contexts
					 * @param iLength the requested amount of contexts
					 * @param iThreshold 
					 * @return the contexts array
					 */
					getNodeContexts(oContext: sap.ui.model.Context, iStartIndex: number, iLength: number, iThreshold: number): sap.ui.model.Context[];
					/**
					 * Returns the current value of the bound target
					 * @note Overload from base type sap.ui.model.TreeBinding
					 * @param oContext the context element of the node
					 * @param iStartIndex the startIndex where to start the retrieval of contexts
					 * @param iLength determines how many contexts to retrieve beginning from the start index.
					 * @return the array of child contexts for the given node
					 */
					getNodeContexts(oContext: any, iStartIndex: number, iLength: number): any[];
					/**
					 * Returns root contexts for the tree. You can specify the start index and the length for paging requests.
					 * This function is not available when the annotation "hierarchy-node-descendant-count-for" is exposed on the service.
					 * @param iStartIndex the start index of the requested contexts(optional)
					 * @param iLength the requested amount of contexts. If none given, the default value is the size limit of the underlying
					 * 												 sap.ui.model.odata.v2.ODataModel instance.(optional)
					 * @param iThreshold the number of entities which should be retrieved in addition to the given length.
					 * 				  A higher threshold reduces the number of backend requests, yet these request blow up in size, since more data is loaded.(optional)
					 * @return an array containing the contexts for the entities returned by the backend, might be fewer than requested
					 * 								  if the backend does not have enough data.
					 */
					getRootContexts(iStartIndex?: number, iLength?: number, iThreshold?: number): sap.ui.model.Context[];
					/**
					 * Returns the current value of the bound target
					 * @note Overload from base type sap.ui.model.TreeBinding
					 * @param iStartIndex the startIndex where to start the retrieval of contexts
					 * @param iLength determines how many contexts to retrieve beginning from the start index.
					 * @return the array of child contexts for the root node
					 */
					getRootContexts(iStartIndex: number, iLength: number): any[];
					/**
					 * Returns the rootLevel
					 * @return 
					 */
					getRootLevel(): number;
					/**
					 * Returns if the node has child nodes.
					 * If the ODataTreeBinding is running with hierarchy annotations, a context with the property values "expanded" or "collapsed"
					 * for the drilldown state property, returns true. Entities with drilldown state "leaf" return false.
					 * 
					 * This function is not available when the annotation "hierarchy-node-descendant-count-for" is exposed on the service.
					 * @param oContext the context element of the node
					 * @return true if node has children
					 */
					hasChildren(oContext: sap.ui.model.Context): boolean;
					/**
					 * Returns if the node has child nodes
					 * @note Overload from base type sap.ui.model.TreeBinding
					 * @param oContext the context element of the node
					 * @return true if node has children
					 */
					hasChildren(oContext: any): boolean;
					/**
					 * Initialize binding. Fires a change if data is already available ($expand) or a refresh.
					 * If metadata is not yet available, do nothing, method will be called again when
					 * metadata is loaded.
					 * @return The binding instance
					 */
					initialize(): ODataTreeBinding;
					/**
					 * Initialize the binding. The message should be called when creating a binding.
					 * The default implementation calls checkUpdate(true).
					 * @note Overload from base type sap.ui.model.Binding
					 */
					initialize();
					/**
					 * Refreshes the binding, check whether the model data has been changed and fire change event
					 * if this is the case. For server side models this should refetch the data from the server.
					 * To update a control, even if no data has been changed, e.g. to reset a control after failed
					 * validation, please use the parameter bForceUpdate.
					 * @param bForceUpdate Update the bound control even if no data has been changed(optional)
					 * @param sGroupId The  group Id for the refresh(optional)
					 */
					refresh(bForceUpdate?: boolean, sGroupId?: string);
					/**
					 * Refreshes the binding, check whether the model data has been changed and fire change event
					 * if this is the case. For server side models this should refetch the data from the server.
					 * To update a control, even if no data has been changed, e.g. to reset a control after failed
					 * validation, please use the parameter bForceUpdate.
					 * @note Overload from base type sap.ui.model.Binding
					 * @param bForceUpdate Update the bound control even if no data has been changed
					 */
					refresh(bForceUpdate: boolean);
					/**
					 * Sets the rootLevel
					 * The root level is the level of the topmost tree nodes, which will be used as an entry point for OData services.
					 * This is only possible (and necessary) for OData services implementing the hierarchy annotation specification,
					 * or when providing the annotation information locally as a binding parameter. See the constructor for API documentation on this.
					 * @param iRootLevel 
					 */
					setRootLevel(iRootLevel: number);
					/**
					 * Sorts the Tree according to the given Sorter(s).
					 * In OperationMode.Client or OperationMode.Auto (if the given threshold is satisfied), the sorters are applied locally on the client.
					 * @param aSorters the Sorter or an Array of sap.ui.model.Sorter instances
					 * @return returns <code>this</code> to facilitate method chaining
					 */
					sort(aSorters: sap.ui.model.Sorter[]|sap.ui.model.Sorter): ODataTreeBinding;
					/**
					 * Sorts the tree according to the sorter definitions.
					 * @note Overload from base type sap.ui.model.TreeBinding
					 * @param aSorters Array of sap.ui.model.Sorter objects
					 */
					sort(aSorters: sap.ui.model.Sorter[]);
				}
			}
		
			/**
			 * Model and related classes like bindings for OData V4.
			 */
			namespace v4 {
			
				class Context extends sap.ui.model.Context {
					/**
					 * Do <strong>NOT</strong> call this private constructor for a new <code>Context</code>. In the
					 * OData V4 model you cannot create contexts at will: retrieve them from a binding or a view
					 * element instead.
					 * @param oModel The model
					 * @param oBinding A binding that belongs to the model
					 * @param sPath An absolute path without trailing slash
					 * @param iIndex Index of item (within the collection addressed by <code>sPath</code>) represented
					 *   by this context; used by list bindings, not context bindings(optional)
					 */
					constructor(oModel: sap.ui.model.odata.v4.ODataModel, oBinding: sap.ui.model.odata.v4.ODataContextBinding|sap.ui.model.odata.v4.ODataListBinding, sPath: string, iIndex?: number);
					/**
					 * Returns the "canonical path" of the entity for this context.
					 * According to "4.3.1 Canonical URL" of the specification "OData Version 4.0 Part 2: URL
					 * Conventions", this is the "name of the entity set associated with the entity followed by the
					 * key predicate identifying the entity within the collection".
					 * Use the canonical path in {@link sap.ui.core.Element#bindElement} to create an element
					 * binding.
					 */
					getCanonicalPath: any;
					/**
					 * Returns a promise for the "canonical path" of the entity for this context.
					 * According to "4.3.1 Canonical URL" of the specification "OData Version 4.0 Part 2: URL
					 * Conventions", this is the "name of the entity set associated with the entity followed by the
					 * key predicate identifying the entity within the collection".
					 * Use the canonical path in {@link sap.ui.core.Element#bindElement} to create an element
					 * binding.
					 */
					requestCanonicalPath: any;
					/**
					 * Creates a new subclass of class sap.ui.model.odata.v4.Context with name <code>sClassName</code>
					 * and enriches it with the information contained in <code>oClassInfo</code>.
					 * 
					 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Context.extend}.
					 * @param sClassName Name of the class being created
					 * @param oClassInfo Object literal with information about the class(optional)
					 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
					 * @return Created class / constructor function
					 */
					extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
					/**
					 * Returns the binding this context belongs to.
					 * @return The context's binding
					 */
					getBinding(): ODataContextBinding|ODataListBinding;
					/**
					 * Returns the context's index within the binding's collection.
					 * @return The context's index within the binding's collection or <code>undefined</code> if the
					 *   context does not belong to a list binding.
					 */
					getIndex(): number;
					/**
					 * Returns the value for the given path relative to this context. The function allows access to
					 * the complete data the context points to (when <code>sPath</code> is "") or any part thereof.
					 * The data is a JSON structure as described in
					 * <a href="http://docs.oasis-open.org/odata/odata-json-format/v4.0/odata-json-format-v4.0.html">"OData JSON Format Version 4.0"</a>.
					 * Note that the function clones the result. Modify values via
					 * {@link sap.ui.model.odata.v4.ODataPropertyBinding#setValue}.
					 * 
					 * Returns <code>undefined</code> if the data is not (yet) available. Use
					 * {@link #requestObject} for asynchronous access.
					 * @param sPath A relative path within the JSON structure(optional)
					 * @return The requested value
					 */
					getObject(sPath?: string): any;
					/**
					 * Gets the (model dependent) object the context points to or the object with the given relative binding path
					 * @note Overload from base type sap.ui.model.Context
					 * @param sPath the binding path
					 * @return the context object
					 */
					getObject(sPath: string): any;
					/**
					 * Returns the property value for the given path relative to this context. The path is expected
					 * to point to a structural property with primitive type. Returns <code>undefined</code>
					 * if the data is not (yet) available. Use {@link #requestProperty} for asynchronous access.
					 * @param sPath A relative path within the JSON structure
					 * @param bExternalFormat If <code>true</code>, the value is returned in external format using a UI5 type for the
					 *   given property path that formats corresponding to the property's EDM type and constraints.
					 *   If the type is not yet available, <code>undefined</code> is returned.(optional)
					 * @return The requested property value
					 */
					getProperty(sPath: string, bExternalFormat?: boolean): any;
					/**
					 * Gets the property with the given relative binding path
					 * @note Overload from base type sap.ui.model.Context
					 * @param sPath the binding path
					 * @return the property value
					 */
					getProperty(sPath: string): any;
					/**
					 * Returns a promise on the value for the given path relative to this context. The function
					 * allows access to the complete data the context points to (when <code>sPath</code> is "") or
					 * any part thereof. The data is a JSON structure as described in
					 * <a href="http://docs.oasis-open.org/odata/odata-json-format/v4.0/odata-json-format-v4.0.html">"OData JSON Format Version 4.0"</a>.
					 * Note that the function clones the result. Modify values via
					 * {@link sap.ui.model.odata.v4.ODataPropertyBinding#setValue}.
					 * @param sPath A relative path within the JSON structure(optional)
					 * @return A promise on the requested value
					 */
					requestObject(sPath?: string): any;
					/**
					 * Returns a promise on the property value for the given path relative to this context. The path
					 * is expected to point to a structural property with primitive type.
					 * @param sPath A relative path within the JSON structure(optional)
					 * @param bExternalFormat If <code>true</code>, the value is returned in external format using a UI5 type for the
					 *   given property path that formats corresponding to the property's EDM type and constraints.(optional)
					 * @return A promise on the requested value; it is rejected if the value is not primitive
					 */
					requestProperty(sPath?: string, bExternalFormat?: boolean): any;
					/**
					 * Returns a string representation of this object including the binding path.
					 * @return A string description of this binding
					 */
					toString(): string;
				}
			
				class ODataContextBinding extends sap.ui.model.ContextBinding {
					/**
					 * DO NOT CALL this private constructor for a new <code>ODataContextBinding</code>,
					 * but rather use {@link sap.ui.model.odata.v4.ODataModel#bindContext bindContext} instead!
					 * @param oModel The OData V4 model
					 * @param sPath The binding path in the model; must not end with a slash
					 * @param oContext The context which is required as base for a relative path(optional)
					 * @param mParameters Map of binding parameters which can be OData query options as specified in
					 *   "OData Version 4.0 Part 2: URL Conventions" or the binding-specific parameters "$$groupId"
					 *   and "$$updateGroupId".
					 *   Note: If parameters are provided for a relative binding path, the binding accesses data
					 *   with its own service requests instead of using its parent binding.
					 *   The following OData query options are allowed:
					 *   <ul>
					 *   <li> All "5.2 Custom Query Options" except for those with a name starting with "sap-"
					 *   <li> The $expand, $filter, $orderby and $select "5.1 System Query Options"; OData V4 only
					 *   allows $filter and $orderby inside resource paths that identify a collection. In our case
					 *   here, this means you can only use them inside $expand.
					 *   </ul>
					 *   All other query options lead to an error.
					 *   Query options specified for the binding overwrite model query options.(optional)
					 */
					constructor(oModel: sap.ui.model.odata.v4.ODataModel, sPath: string, oContext?: sap.ui.model.odata.v4.Context, mParameters?: any);
					/**
					 * Returns the bound context.
					 */
					getBoundContext: any;
					/**
					 * Destroys the object. The object must not be used anymore after this function was called.
					 */
					destroy();
					/**
					 * Calls the OData operation that corresponds to this operation binding.
					 * 
					 * Parameters for the operation must be set via {@link #setParameter} beforehand.
					 * 
					 * The value of this binding is the result of the operation. To access a result of primitive
					 * type, bind a control to the path "value", for example
					 * <code>&lt;Text text="{value}"/&gt;</code>. If the result has a complex or entity type, you
					 * can bind properties as usual, for example <code>&lt;Text text="{street}"/&gt;</code>.
					 * @param sGroupId The group ID to be used for the request; if not specified, the group ID for this binding is
					 *   used, see {@link sap.ui.model.odata.v4.ODataContextBinding#constructor}.
					 *   Valid values are <code>undefined</code>, <code>'$auto'</code>, <code>'$direct'</code> or
					 *   application group IDs as specified in {@link sap.ui.model.odata.v4.ODataModel#submitBatch}.(optional)
					 * @return A promise that is resolved without data when the operation call succeeded, or rejected
					 *   with an instance of <code>Error</code> in case of failure.
					 */
					execute(sGroupId?: string): any;
					/**
					 * Creates a new subclass of class sap.ui.model.odata.v4.ODataContextBinding with name <code>sClassName</code>
					 * and enriches it with the information contained in <code>oClassInfo</code>.
					 * 
					 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.ContextBinding.extend}.
					 * @param sClassName Name of the class being created
					 * @param oClassInfo Object literal with information about the class(optional)
					 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
					 * @return Created class / constructor function
					 */
					extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
					/**
					 * Returns <code>true</code> if the binding has pending changes, meaning updates via two-way
					 * binding that have not yet been sent to the server.
					 * @return <code>true</code> if the binding has pending changes
					 */
					hasPendingChanges(): boolean;
					/**
					 * Initializes the OData context binding. Fires a 'change' event in case the binding has a
					 * bound context.
					 */
					initialize();
					/**
					 * Method not supported
					 */
					isInitial();
					/**
					 * Returns whether the binding is initial, which means it did not get an initial value yet
					 * @note Overload from base type sap.ui.model.Binding
					 * @return whether binding is initial
					 */
					isInitial(): boolean;
					/**
					 * Refreshes the binding. Prompts the model to retrieve data from the server using the given
					 * group ID and notifies the control that new data is available.
					 * Refresh is supported for absolute bindings.
					 * 
					 * Note: When calling refresh multiple times, the result of the request triggered by the last
					 * call determines the binding's data; it is <b>independent</b>
					 * of the order of calls to {@link sap.ui.model.odata.v4.ODataModel#submitBatch} with the given
					 * group ID.
					 * @param sGroupId The group ID to be used for refresh; if not specified, the group ID for this binding is
					 *   used, see {@link sap.ui.model.odata.v4.ODataContextBinding#constructor}.
					 *   Valid values are <code>undefined</code>, <code>'$auto'</code>, <code>'$direct'</code> or
					 *   application group IDs as specified in {@link sap.ui.model.odata.v4.ODataModel#submitBatch}.(optional)
					 */
					refresh(sGroupId?: string);
					/**
					 * Refreshes the binding, check whether the model data has been changed and fire change event
					 * if this is the case. For server side models this should refetch the data from the server.
					 * To update a control, even if no data has been changed, e.g. to reset a control after failed
					 * validation, please use the parameter bForceUpdate.
					 * @note Overload from base type sap.ui.model.Binding
					 * @param bForceUpdate Update the bound control even if no data has been changed
					 */
					refresh(bForceUpdate: boolean);
					/**
					 * Resets all pending property changes of this binding, meaning updates via two-way binding that
					 * have not yet been sent to the server.
					 */
					resetChanges();
					/**
					 * Method not supported
					 */
					resume();
					/**
					 * Sets a parameter for an operation call.
					 * @param sParameterName The parameter name
					 * @param vValue The parameter value
					 * @return <code>this</code> to enable method chaining
					 */
					setParameter(sParameterName: string, vValue: any): ODataContextBinding;
					/**
					 * Method not supported
					 */
					suspend();
					/**
					 * Returns a string representation of this object including the binding path. If the binding is
					 * relative, the parent path is also given, separated by a '|'.
					 * @return A string description of this binding
					 */
					toString(): string;
				}
			
				class ODataListBinding extends sap.ui.model.ListBinding {
					/**
					 * DO NOT CALL this private constructor for a new <code>ODataListBinding</code>,
					 * but rather use {@link sap.ui.model.odata.v4.ODataModel#bindList bindList} instead!
					 * @param oModel The OData V4 model
					 * @param sPath The binding path in the model; must not be empty or end with a slash
					 * @param oContext The parent context which is required as base for a relative path(optional)
					 * @param vSorters The dynamic sorters to be used initially. Call {@link #sort} to replace them. Static
					 *   sorters, as defined in the '$orderby' binding parameter, are always executed after the
					 *   dynamic sorters.
					 *   Supported since 1.39.0.(optional)
					 * @param vFilters The dynamic application filters to be used initially. Call {@link #filter} to replace them.
					 *   Static filters, as defined in the '$filter' binding parameter, are always combined with the
					 *   dynamic filters using a logical <code>AND</code>.
					 *   Supported since 1.39.0.(optional)
					 * @param mParameters Map of binding parameters which can be OData query options as specified in
					 *   "OData Version 4.0 Part 2: URL Conventions" or the binding-specific parameters "$$groupId"
					 *   and "$$updateGroupId".
					 *   Note: If parameters are provided for a relative binding path, the binding accesses data
					 *   with its own service requests instead of using its parent binding.
					 *   The following OData query options are allowed:
					 *   <ul>
					 *   <li> All "5.2 Custom Query Options" except for those with a name starting with "sap-"
					 *   <li> The $expand, $filter, $orderby and $select "5.1 System Query Options"
					 *   </ul>
					 *   All other query options lead to an error.
					 *   Query options specified for the binding overwrite model query options.(optional)
					 */
					constructor(oModel: sap.ui.model.odata.v4.ODataModel, sPath: string, oContext?: sap.ui.model.odata.v4.Context, vSorters?: sap.ui.model.Sorter|sap.ui.model.Sorter[], vFilters?: sap.ui.model.Filter|sap.ui.model.Filter[], mParameters?: any);
					/**
					 * Destroys the object. The object must not be used anymore after this function was called.
					 */
					destroy();
					/**
					 * Creates a new subclass of class sap.ui.model.odata.v4.ODataListBinding with name <code>sClassName</code>
					 * and enriches it with the information contained in <code>oClassInfo</code>.
					 * 
					 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.ListBinding.extend}.
					 * @param sClassName Name of the class being created
					 * @param oClassInfo Object literal with information about the class(optional)
					 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
					 * @return Created class / constructor function
					 */
					extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
					/**
					 * Filters the list with the given filters.
					 * 
					 * If there are pending changes an error is thrown. Use {@link #hasPendingChanges} to check if
					 * there are pending changes. If there are changes, call
					 * {@link sap.ui.model.odata.v4.ODataModel#submitBatch} to submit the changes or
					 * {@link sap.ui.model.odata.v4.ODataModel#resetChanges} to reset the changes before calling
					 * 'filter'.
					 * @param vFilters The dynamic filters to be used; replaces the dynamic filters given in
					 *   {@link sap.ui.model.odata.v4.ODataModel#bindList}.
					 *   The filter executed on the list is created from the following parts, which are combined
					 *   with a logical 'and':
					 *   <ul>
					 *   <li> dynamic filters of type sap.ui.model.FilterType.Application
					 *   <li> dynamic filters of type sap.ui.model.FilterType.Control
					 *   <li> the static filters, as defined in the '$filter' binding parameter
					 *   </ul>(optional)
					 * @param sFilterType The filter type to use(optional)
					 * @return <code>this</code> to facilitate method chaining
					 */
					filter(vFilters?: sap.ui.model.Filter|sap.ui.model.Filter[], sFilterType?: sap.ui.model.FilterType): ODataListBinding;
					/**
					 * Filters the list according to the filter definitions
					 * @note Overload from base type sap.ui.model.ListBinding
					 * @param aFilters Array of filter objects
					 * @param sFilterType Type of the filter which should be adjusted, if it is not given, the standard behaviour applies
					 * @return returns <code>this</code> to facilitate method chaining
					 */
					filter(aFilters: any[], sFilterType: sap.ui.model.FilterType): sap.ui.model.ListBinding;
					/**
					 * Returns already created binding contexts for all entities in this list binding for the range
					 * determined by the given start index <code>iStart</code> and <code>iLength</code>.
					 * If at least one of the entities in the given range has not yet been loaded, fires a
					 * {@link sap.ui.model.Binding#attachChange 'change'} event on this list binding once these
					 * entities have been loaded <b>asynchronously</b>. A further call to this method in the
					 * 'change' event handler with the same index range then yields the updated array of contexts.
					 * @param iStart The index where to start the retrieval of contexts(optional)
					 * @param iLength The number of contexts to retrieve beginning from the start index; defaults to the model's
					 *   size limit, see {@link sap.ui.model.Model#setSizeLimit}(optional)
					 * @param iMaximumPrefetchSize The maximum number of contexts to read before and after the given range; with this,
					 *   controls can prefetch data that is likely to be needed soon, e.g. when scrolling down in a
					 *   table. Negative values will be treated as 0.(optional)
					 * @return The array of already created contexts with the first entry containing the context for
					 *   <code>iStart</code>
					 */
					getContexts(iStart?: number, iLength?: number, iMaximumPrefetchSize?: number): Context[];
					/**
					 * Returns an array of binding contexts for the bound target list.
					 * 
					 * <strong>Note:</strong>The public usage of this method is deprecated, as calls from outside of controls will lead
					 * to unexpected side effects. For avoidance use {@link sap.ui.model.ListBinding.prototype.getCurrentContexts}
					 * instead.
					 * @note Overload from base type sap.ui.model.ListBinding
					 * @param iStartIndex the startIndex where to start the retrieval of contexts(optional)
					 * @param iLength determines how many contexts to retrieve beginning from the start index.(optional)
					 * @return the array of contexts for each row of the bound list
					 */
					getContexts(iStartIndex?: number, iLength?: number): sap.ui.model.Context[];
					/**
					 * Returns the contexts that were requested by a control last time. Does not trigger a
					 * data request. In the time between the {@link #event:dataRequested dataRequested} event and
					 * the {@link #event:dataReceived dataReceived} event, the resulting array contains
					 * <code>undefined</code> at those indexes where the data is not yet available.
					 * @return The contexts
					 */
					getCurrentContexts(): Context[];
					/**
					 * Returns an array of currently used binding contexts of the bound control
					 * 
					 * This method does not trigger any data requests from the backend or delta calculation, but just returns the context
					 * array as last requested by the control. This can be used by the application to get access to the data currently
					 * displayed by a list control.
					 * @note Overload from base type sap.ui.model.ListBinding
					 * @return the array of contexts for each row of the bound list
					 */
					getCurrentContexts(): sap.ui.model.Context[];
					/**
					 * Method not supported
					 */
					getDistinctValues();
					/**
					 * Returns list of distinct values for the given relative binding path
					 * @note Overload from base type sap.ui.model.ListBinding
					 * @param sPath the relative binding path
					 * @return the array of distinct values.
					 */
					getDistinctValues(sPath: string): any[];
					/**
					 * Returns the number of entries in the list. As long as the client does not know the size on
					 * the server an estimated length is returned.
					 * @return The number of entries in the list
					 */
					getLength(): number;
					/**
					 * Returns <code>true</code> if the binding has pending changes, meaning updates via two-way
					 * binding that have not yet been sent to the server.
					 * @return <code>true</code> if the binding has pending changes
					 */
					hasPendingChanges(): boolean;
					/**
					 * Initializes the OData list binding. Fires a 'change' event in case the binding has a
					 * resolved path.
					 */
					initialize();
					/**
					 * Method not supported
					 */
					isInitial();
					/**
					 * Returns whether the binding is initial, which means it did not get an initial value yet
					 * @note Overload from base type sap.ui.model.Binding
					 * @return whether binding is initial
					 */
					isInitial(): boolean;
					/**
					 * Returns <code>true</code> if the length has been determined by the data returned from
					 * server. If the length is a client side estimation <code>false</code> is returned.
					 * @return If <code>true</true> the length is determined by server side data
					 */
					isLengthFinal(): boolean;
					/**
					 * Refreshes the binding. Prompts the model to retrieve data from the server using the given
					 * group ID and notifies the control that new data is available.
					 * Refresh is supported for absolute bindings.
					 * 
					 * Note: When calling refresh multiple times, the result of the request triggered by the last
					 * call determines the binding's data; it is <b>independent</b>
					 * of the order of calls to {@link sap.ui.model.odata.v4.ODataModel#submitBatch} with the given
					 * group ID.
					 * @param sGroupId The group ID to be used for refresh; if not specified, the group ID for this binding is
					 *   used, see {@link sap.ui.model.odata.v4.ODataListBinding#constructor}.
					 *   Valid values are <code>undefined</code>, <code>'$auto'</code>, <code>'$direct'</code> or
					 *   application group IDs as specified in {@link sap.ui.model.odata.v4.ODataModel#submitBatch}.(optional)
					 */
					refresh(sGroupId?: string);
					/**
					 * Refreshes the binding, check whether the model data has been changed and fire change event
					 * if this is the case. For server side models this should refetch the data from the server.
					 * To update a control, even if no data has been changed, e.g. to reset a control after failed
					 * validation, please use the parameter bForceUpdate.
					 * @note Overload from base type sap.ui.model.Binding
					 * @param bForceUpdate Update the bound control even if no data has been changed
					 */
					refresh(bForceUpdate: boolean);
					/**
					 * Resets all pending property changes of this binding, meaning updates via two-way binding that
					 * have not yet been sent to the server.
					 */
					resetChanges();
					/**
					 * Method not supported
					 */
					resume();
					/**
					 * Sort the entries represented by this list binding according to the given sorters.
					 * The sorters are stored at this list binding and they are used for each following data
					 * request.
					 * 
					 * If there are pending changes an error is thrown. Use {@link #hasPendingChanges} to check if
					 * there are pending changes. If there are changes, call
					 * {@link sap.ui.model.odata.v4.ODataModel#submitBatch) to submit the changes or
					 * {@link sap.ui.model.odata.v4.ODataModel#resetChanges} to reset the changes before calling
					 * 'sort'.
					 * @param vSorters The dynamic sorters to be used; they replace the dynamic sorters given in
					 *   {@link sap.ui.model.odata.v4.ODataModel#bindList}.
					 *   Static sorters, as defined in the '$orderby' binding parameter, are always executed after
					 *   the dynamic sorters.(optional)
					 * @return <code>this</code> to facilitate method chaining
					 */
					sort(vSorters?: sap.ui.model.Sorter|sap.ui.model.Sorter[]): ODataListBinding;
					/**
					 * Sorts the list according to the sorter object
					 * @note Overload from base type sap.ui.model.ListBinding
					 * @param aSorters the Sorter object or an array of sorters which defines the sort order
					 * @return returns <code>this</code> to facilitate method chaining
					 */
					sort(aSorters: sap.ui.model.Sorter|any[]): sap.ui.model.ListBinding;
					/**
					 * Method not supported
					 */
					suspend();
					/**
					 * Returns a string representation of this object including the binding path. If the binding is
					 * relative, the parent path is also given, separated by a '|'.
					 * @return A string description of this binding
					 */
					toString(): string;
				}
			
				class ODataMetaModel extends sap.ui.model.MetaModel {
					/**
					 * Do <strong>NOT</strong> call this private constructor for a new <code>ODataMetaModel</code>,
					 * but rather use {@link sap.ui.model.odata.v4.ODataModel#getMetaModel getMetaModel} instead.
					 * @param oRequestor The meta data requestor
					 * @param sUrl The URL to the $metadata document of the service
					 */
					constructor(oRequestor: any, sUrl: string);
					/**
					 * Creates a list binding for this meta data model which iterates content from the given path
					 * (relative to the given context), sorted and filtered as indicated.
					 * 
					 * By default, OData names are iterated and a trailing slash is implicitly added to the path
					 * (see {@link #requestObject requestObject} for the effects this has); technical properties
					 * and inline annotations are filtered out.
					 * 
					 * A path which ends with an "@" segment can be used to iterate all inline or external
					 * targeting annotations; no trailing slash is added implicitly; technical properties and OData
					 * names are filtered out.
					 * @param sPath A relative or absolute path within the meta data model, for example "/EMPLOYEES"
					 * @param oContext The context to be used as a starting point in case of a relative path(optional)
					 * @param aSorters Initial sort order, see {@link sap.ui.model.ListBinding#sort sort}(optional)
					 * @param aFilters Initial application filter(s), see {@link sap.ui.model.ListBinding#filter filter}(optional)
					 * @return A list binding for this meta data model
					 */
					bindList(sPath: string, oContext?: sap.ui.model.Context, aSorters?: sap.ui.model.Sorter|sap.ui.model.Sorter[], aFilters?: sap.ui.model.Filter|sap.ui.model.Filter[]): sap.ui.model.ListBinding;
					/**
					 * Implement in inheriting classes
					 * @note Overload from base type sap.ui.model.Model
					 * @param sPath the path pointing to the list / array that should be bound
					 * @param oContext the context object for this databinding (optional)(optional)
					 * @param aSorters initial sort order (can be either a sorter or an array of sorters) (optional)(optional)
					 * @param aFilters predefined filter/s (can be either a filter or an array of filters) (optional)(optional)
					 * @param mParameters additional model specific parameters (optional)(optional)
					 * @return 
					 */
					bindList(sPath: string, oContext?: any, aSorters?: sap.ui.model.Sorter, aFilters?: any[], mParameters?: any): sap.ui.model.ListBinding;
					/**
					 * Method not supported
					 */
					bindTree();
					/**
					 * Implement in inheriting classes
					 * @note Overload from base type sap.ui.model.Model
					 * @param sPath the path pointing to the tree / array that should be bound
					 * @param oContext the context object for this databinding (optional)(optional)
					 * @param aFilters predefined filter/s contained in an array (optional)(optional)
					 * @param mParameters additional model specific parameters (optional)(optional)
					 * @param aSorters predefined sap.ui.model.sorter/s contained in an array (optional)(optional)
					 * @return 
					 */
					bindTree(sPath: string, oContext?: any, aFilters?: any[], mParameters?: any, aSorters?: any[]): sap.ui.model.TreeBinding;
					/**
					 * Creates a new subclass of class sap.ui.model.odata.v4.ODataMetaModel with name <code>sClassName</code>
					 * and enriches it with the information contained in <code>oClassInfo</code>.
					 * 
					 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.MetaModel.extend}.
					 * @param sClassName Name of the class being created
					 * @param oClassInfo Object literal with information about the class(optional)
					 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
					 * @return Created class / constructor function
					 */
					extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
					/**
					 * Returns the OData meta data model context corresponding to the given OData data model path.
					 * @param sPath An absolute data path within the OData data model, for example
					 *   "/EMPLOYEES/0/ENTRYDATE"
					 * @return The corresponding meta data context within the OData meta data model, for example with
					 *   meta data path "/EMPLOYEES/ENTRYDATE"
					 */
					getMetaContext(sPath: string): sap.ui.model.Context;
					/**
					 * Returns the meta data object for the given path relative to the given context. Returns
					 * <code>undefined</code> in case the meta data is not (yet) available. Use
					 * {@link #requestObject requestObject} for asynchronous access.
					 * @param sPath A relative or absolute path within the meta data model
					 * @param oContext The context to be used as a starting point in case of a relative path(optional)
					 * @return The requested meta data object if it is already available, or <code>undefined</code>
					 */
					getObject(sPath: string, oContext?: sap.ui.model.Context): any;
					/**
					 * Implement in inheriting classes
					 * @note Overload from base type sap.ui.model.Model
					 * @param sPath the path to where to read the object
					 * @param oContext the context with which the path should be resolved(optional)
					 */
					getObject(sPath: string, oContext?: any);
					/**
					 * Method not supported
					 */
					getOriginalProperty();
					/**
					 * Returns the original value for the property with the given path and context.
					 * The original value is the value that was last responded by a server if using a server model implementation.
					 * @note Overload from base type sap.ui.model.Model
					 * @param sPath the path/name of the property
					 * @param oContext the context if available to access the property value(optional)
					 * @return vValue the value of the property
					 */
					getOriginalProperty(sPath: string, oContext?: any): any;
					/**
					 * 
					 * @deprecated since version 1.37.0:Use {@link #getObject getObject}.
					 */
					getProperty();
					/**
					 * Implement in inheriting classes
					 * @note Overload from base type sap.ui.model.Model
					 * @param sPath the path to where to read the attribute value
					 * @param oContext the context with which the path should be resolved(optional)
					 */
					getProperty(sPath: string, oContext?: any);
					/**
					 * Returns the UI5 type for the given property path that formats and parses corresponding to
					 * the property's EDM type and constraints. The property's type must be a primitive type. Use
					 * {@link #requestUI5Type requestUI5Type} for asynchronous access.
					 * @param sPath An absolute path to an OData property within the OData data model
					 * @return The corresponding UI5 type from <code>sap.ui.model.odata.type</code>, if all required meta
					 *   data to calculate this type is already available; if no specific type can be determined, a
					 *   warning is logged and <code>sap.ui.model.odata.type.Raw</code> is used
					 */
					getUI5Type(sPath: string): sap.ui.model.odata.type.ODataType;
					/**
					 * Method not supported
					 */
					isList();
					/**
					 * Method not supported
					 */
					refresh();
					/**
					 * Refresh the model.
					 * This will check all bindings for updated data and update the controls if data has been changed.
					 * @note Overload from base type sap.ui.model.Model
					 * @param bForceUpdate Update controls even if data has not been changed
					 */
					refresh(bForceUpdate: boolean);
					/**
					 * Requests the meta data value for the given path relative to the given context (see
					 * {@link #resolve resolve} on how this resolution happens and how slashes are inserted as a
					 * separator). Returns a <code>Promise</code> which is resolved with the requested meta data
					 * value or rejected with an error (only in case meta data cannot be loaded). An invalid path
					 * leads to an <code>undefined</code> result and a warning is logged. Use
					 * {@link #getObject getObject} for synchronous access.
					 * 
					 * The basic idea is that every path described in "14.2.1 Attribute Target" in specification
					 * "OData Version 4.0 Part 3: Common Schema Definition Language" is a valid absolute path
					 * within the meta data model if a leading slash is added; for example
					 * "/" + "MySchema.MyEntityContainer/MyEntitySet/MyComplexProperty/MyNavigationProperty". Also,
					 * every path described in "14.5.2 Expression edm:AnnotationPath",
					 * "14.5.11 Expression edm:NavigationPropertyPath", "14.5.12 Expression edm:Path", and
					 * "14.5.13 Expression edm:PropertyPath" is a valid relative path within the meta data model
					 * if a suitable prefix is added which addresses an entity container, entity set, singleton,
					 * complex type, entity type, or property; for example
					 * "/MySchema.MyEntityType/MyProperty" + "@vCard.Address#work/FullName".
					 * 
					 * The absolute path is split into segments and followed step-by-step, starting at the global
					 * scope of all known qualified OData names. There are two technical properties there:
					 * "$Version" (typically "4.0") and "$EntityContainer" with the name of the single entity
					 * container for this meta data model's service.
					 * 
					 * An empty segment in between is invalid. An empty segment at the end caused by a trailing
					 * slash differentiates between a name and the object it refers to. This way,
					 * "/$EntityContainer" refers to the name of the single entity container and
					 * "/$EntityContainer/" refers to the single entity container as an object.
					 * 
					 * The segment "@sapui.name" refers back to the last OData name (simple identifier or qualified
					 * name) or annotation name encountered during path traversal immediately before "@sapui.name":
					 * <ul>
					 * <li> "/EMPLOYEES@sapui.name" results in "EMPLOYEES" and "/EMPLOYEES/@sapui.name"
					 * results in the same as "/EMPLOYEES/$Type", that is, the qualified name of the entity set's
					 * type (see below how "$Type" is inserted implicitly). Note how the separating slash again
					 * makes a difference here.
					 * <li> "/EMPLOYEES/@com.sap.vocabularies.Common.v1.Label@sapui.name" results in
					 * "@com.sap.vocabularies.Common.v1.Label" and a slash does not make any difference as long as
					 * the annotation does not have a "$Type" property.
					 * <li> A technical property (that is, a numerical segment or one starting with a "$")
					 * immediately before "@sapui.name" is invalid, for example "/$EntityContainer@sapui.name".
					 * </ul>
					 * The path must not continue after "@sapui.name".
					 * 
					 * If the current object is a string value, that string value is treated as a relative path and
					 * followed step-by-step before the next segment is processed. Except for this, a path must
					 * not continue if it comes across a non-object value. Such a string value can be a qualified
					 * name (example path "/$EntityContainer/..."), a simple identifier (example path
					 * "/TEAMS/$NavigationPropertyBinding/TEAM_2_EMPLOYEES/...") or even a path according to
					 * "14.5.12 Expression edm:Path" etc. (example path
					 * "/TEAMS/$Type/@com.sap.vocabularies.UI.v1.LineItem/0/Value/$Path/...").
					 * 
					 * Segments starting with an "@" character, for example "@com.sap.vocabularies.Common.v1.Label",
					 * address annotations at the current object. As the first segment, they refer to the single
					 * entity container. For objects which can only be annotated inline (see "14.3 Element
					 * edm:Annotation" minus "14.2.1 Attribute Target"), the object already contains the
					 * annotations as a property. For objects which can (only or also) be annotated via external
					 * targeting, the object does not contain any annotation as a property. Such annotations MUST
					 * be accessed via a path. BEWARE of a special case: Actions, functions and their parameters
					 * can be annotated inline for a single overload or via external targeting for all overloads at
					 * the same time. In this case, the object contains all annotations for the single overload as
					 * a property, but annotations MUST nevertheless be accessed via a path in order to include
					 * also annotations for all overloads at the same time.
					 * 
					 * Segments starting with an OData name followed by an "@" character, for example
					 * "/TEAMS@Org.OData.Capabilities.V1.TopSupported", address annotations at an entity set,
					 * singleton, or property, not at the corresponding type. In contrast,
					 * "/TEAMS/@com.sap.vocabularies.Common.v1.Deletable" (note the separating slash) addresses an
					 * annotation at the entity set's type. This is in line with the special rule of
					 * "14.5.12 Expression edm:Path" regarding annotations at a navigation property itself.
					 * 
					 * "@" can be used as a segment to address a map of all annotations of the current object. This
					 * is useful for iteration, for example via
					 * <code>&lt;template:repeat list="{entityType>@}" ...></code>.
					 * 
					 * Annotations of an annotation are addressed not by two separate segments, but by a single
					 * segment like
					 * "@com.sap.vocabularies.Common.v1.Text@com.sap.vocabularies.Common.v1.TextArrangement". Each
					 * annotation can have a qualifier, for example "@first#foo@second#bar". Note: If the first
					 * annotation's value is a record, a separate segment addresses an annotation of that record,
					 * not an annotation of the first annotation itself.
					 * In a similar way, annotations of "7.2 Element edm:ReferentialConstraint",
					 * "7.3 Element edm:OnDelete", "10.2 Element edm:Member" and
					 * "14.5.14.2 Element edm:PropertyValue" are addressed by segments like
					 * "&lt;7.2.1 Attribute Property>@...", "$OnDelete@...", "&lt;10.2.1 Attribute Name>@..." and
					 * "&lt;14.5.14.2.1 Attribute Property>@..." (where angle brackets denote a variable part and
					 * sections refer to specification "OData Version 4.0 Part 3: Common Schema Definition
					 * Language").
					 * 
					 * A segment which represents an OData qualified name is looked up in the global scope ("scope
					 * lookup") and thus determines a schema child which is used later on. Unknown qualified names
					 * are invalid. This way, "/acme.DefaultContainer/EMPLOYEES" addresses the "EMPLOYEES" child of
					 * the schema child named "acme.DefaultContainer". This also works indirectly
					 * ("/$EntityContainer/EMPLOYEES") and implicitly ("/EMPLOYEES", see below).
					 * 
					 * A segment which represents an OData simple identifier needs special preparations. The same
					 * applies to the empty segment after a trailing slash.
					 * <ol>
					 * <li> If the current object has a "$Action", "$Function" or "$Type" property, it is used for
					 *    scope lookup first. This way, "/EMPLOYEES/ENTRYDATE" addresses the same object as
					 *    "/EMPLOYEES/$Type/ENTRYDATE", namely the "ENTRYDATE" child of the entity type
					 *    corresponding to the "EMPLOYEES" child of the entity container. The other cases jump from
					 *    an action or function import to the corresponding action or function overloads.
					 * <li> Else if the segment is the first one within its path, the last schema child addressed
					 *    via scope lookup is used instead of the current object. This can only happen indirectly as
					 *    in "/TEAMS/$NavigationPropertyBinding/TEAM_2_EMPLOYEES/..." where the schema child is the
					 *    entity container and the navigation property binding can contain the simple identifier of
					 *    another entity set within the same container.
					 * 
					 *    If the segment is the first one overall, "$EntityContainer" is inserted into the path
					 *    implicitly. In other words, the entity container is used as the initial schema child.
					 *    This way, "/EMPLOYEES" addresses the same object as "/$EntityContainer/EMPLOYEES", namely
					 *    the "EMPLOYEES" child of the entity container.
					 * <li> Afterwards, if the current object is an array, it represents overloads for an action or
					 *    function. Multiple overloads are invalid. The overload's "$ReturnType/$Type" is used for
					 *    scope lookup. This way, "/GetOldestWorker/AGE" addresses the same object as
					 *    "/GetOldestWorker/0/$ReturnType/$Type/AGE". For primitive return types, the special
					 *    segment "value" can be used to refer to the return type itself (see
					 *    {@link sap.ui.model.odata.v4.ODataContextBinding#execute}). This way,
					 *    "/GetOldestAge/value" addresses the same object as "/GetOldestAge/0/$ReturnType" (which
					 *    is needed for automatic type determination, see {@link #requestUI5Type}).
					 * </ol>
					 * 
					 * A trailing slash can be used to continue a path and thus force scope lookup or OData simple
					 * identifier preparations, but then stay at the current object. This way, "/EMPLOYEES/$Type/"
					 * addresses the entity type itself corresponding to the "EMPLOYEES" child of the entity
					 * container. Although the empty segment is not an OData simple identifier, it can be used as a
					 * placeholder for one. In this way, "/EMPLOYEES/" addresses the same entity type as
					 * "/EMPLOYEES/$Type/". That entity type in turn is a map of all its OData children (that is,
					 * structural and navigation properties) and determines the set of possible child names that
					 * might be used after the trailing slash.
					 * 
					 * Any other segment, including an OData simple identifier, is looked up as a property of the
					 * current object.
					 * @param sPath A relative or absolute path within the meta data model
					 * @param oContext The context to be used as a starting point in case of a relative path, see
					 *   {@link #resolve resolve}(optional)
					 * @return A promise which is resolved with the requested meta data value as soon as it is
					 *   available
					 */
					requestObject(sPath: string, oContext?: sap.ui.model.Context): any;
					/**
					 * Requests the UI5 type for the given property path that formats and parses corresponding to
					 * the property's EDM type and constraints. The property's type must be a primitive type. Use
					 * {@link #getUI5Type getUI5Type} for synchronous access.
					 * @param sPath An absolute path to an OData property within the OData data model
					 * @return A promise that gets resolved with the corresponding UI5 type from
					 *   <code>sap.ui.model.odata.type</code> or rejected with an error; if no specific type can be
					 *   determined, a warning is logged and <code>sap.ui.model.odata.type.Raw</code> is used
					 */
					requestUI5Type(sPath: string): any;
					/**
					 * Method not supported
					 */
					setLegacySyntax();
					/**
					 * Enables legacy path syntax handling
					 * 
					 * This defines, whether relative bindings, which do not have a defined
					 * binding context, should be compatible to earlier releases which means
					 * they are resolved relative to the root element or handled strict and
					 * stay unresolved until a binding context is set
					 * @note Overload from base type sap.ui.model.Model
					 * @param bLegacySyntax the path syntax to use
					 */
					setLegacySyntax(bLegacySyntax: boolean);
					/**
					 * Returns a string representation of this object including the URL to the $metadata document of
					 * the service.
					 * @return A string description of this model
					 */
					toString(): string;
				}
			
				class ODataModel extends sap.ui.model.Model {
					/**
					 * Constructor for a new ODataModel.
					 * @param mParameters The parameters
					 */
					constructor(mParameters: any);
					/**
					 * Creates a new context binding for the given path, context and parameters.
					 * 
					 * This binding is inactive and will not know the bound context initially.
					 * You have to call {@link sap.ui.model.Binding#initialize initialize()} to get it updated
					 * asynchronously and register a change listener at the binding to be informed when the bound
					 * context is available.
					 * @param sPath The binding path in the model; must not end with a slash
					 * @param oContext The context which is required as base for a relative path(optional)
					 * @param mParameters Map of binding parameters which can be OData query options as specified in
					 *   "OData Version 4.0 Part 2: URL Conventions" or the binding-specific parameters "$$groupId"
					 *   and "$$updateGroupId".
					 *   Note: If parameters are provided for a relative binding path, the binding accesses data
					 *   with its own service requests instead of using its parent binding.
					 *   The following OData query options are allowed:
					 *   <ul>
					 *   <li> All "5.2 Custom Query Options" except for those with a name starting with "sap-"
					 *   <li> The $expand, $filter, $orderby and $select "5.1 System Query Options"; OData V4 only
					 *   allows $filter and $orderby inside resource paths that identify a collection. In our case
					 *   here, this means you can only use them inside $expand.
					 *   </ul>
					 *   All other query options lead to an error.
					 *   Query options specified for the binding overwrite model query options.(optional)
					 * @return The context binding
					 */
					bindContext(sPath: string, oContext?: Context, mParameters?: any): ODataContextBinding;
					/**
					 * Create ContextBinding
					 * @note Overload from base type sap.ui.model.Model
					 * @param sPath the path pointing to the property that should be bound or an object
					 *         which contains the following parameter properties: path, context, parameters
					 * @param oContext the context object for this databinding (optional)(optional)
					 * @param mParameters additional model specific parameters (optional)(optional)
					 * @param oEvents event handlers can be passed to the binding ({change:myHandler})(optional)
					 * @return 
					 */
					bindContext(sPath: string|any, oContext?: any, mParameters?: any, oEvents?: any): sap.ui.model.ContextBinding;
					/**
					 * Creates a new list binding for the given path and optional context which must
					 * resolve to an absolute OData path for an entity set.
					 * @param sPath The binding path in the model; must not be empty or end with a slash
					 * @param oContext The context which is required as base for a relative path(optional)
					 * @param vSorters The dynamic sorters to be used initially. Call
					 *   {@link sap.ui.model.odata.v4.ODataListBinding#sort} to replace them. Static sorters, as
					 *   defined in the '$orderby' binding parameter, are always executed after the dynamic sorters.
					 *   Supported since 1.39.0.(optional)
					 * @param vFilters The dynamic application filters to be used initially. Call
					 *   {@link sap.ui.model.odata.v4.ODataListBinding#filter} to replace them. Static filters,
					 *   as defined in the '$filter' binding parameter, are always combined with the dynamic
					 *   filters using a logical <code>AND</code>.
					 *   Supported since 1.39.0.(optional)
					 * @param mParameters Map of binding parameters which can be OData query options as specified in
					 *   "OData Version 4.0 Part 2: URL Conventions" or the binding-specific parameters "$$groupId"
					 *   and "$$updateGroupId".
					 *   Note: If parameters are provided for a relative binding path, the binding accesses data
					 *   with its own service requests instead of using its parent binding.
					 *   The following OData query options are allowed:
					 *   <ul>
					 *   <li> All "5.2 Custom Query Options" except for those with a name starting with "sap-"
					 *   <li> The $expand, $filter, $orderby and $select "5.1 System Query Options"
					 *   </ul>
					 *   All other query options lead to an error.
					 *   Query options specified for the binding overwrite model query options.(optional)
					 * @return The list binding
					 */
					bindList(sPath: string, oContext?: Context, vSorters?: sap.ui.model.Sorter|sap.ui.model.Sorter[], vFilters?: sap.ui.model.Filter|sap.ui.model.Filter[], mParameters?: any): ODataListBinding;
					/**
					 * Implement in inheriting classes
					 * @note Overload from base type sap.ui.model.Model
					 * @param sPath the path pointing to the list / array that should be bound
					 * @param oContext the context object for this databinding (optional)(optional)
					 * @param aSorters initial sort order (can be either a sorter or an array of sorters) (optional)(optional)
					 * @param aFilters predefined filter/s (can be either a filter or an array of filters) (optional)(optional)
					 * @param mParameters additional model specific parameters (optional)(optional)
					 * @return 
					 */
					bindList(sPath: string, oContext?: any, aSorters?: sap.ui.model.Sorter, aFilters?: any[], mParameters?: any): sap.ui.model.ListBinding;
					/**
					 * Creates a new property binding for the given path. This binding is inactive and will not
					 * know the property value initially. You have to call {@link sap.ui.model.Binding#initialize
					 * initialize()} to get it updated asynchronously and register a change listener at the binding
					 * to be informed when the value is available.
					 * @param sPath The binding path in the model; must not be empty or end with a slash
					 * @param oContext The context which is required as base for a relative path(optional)
					 * @param mParameters Map of binding parameters which can be OData query options as specified in
					 *   "OData Version 4.0 Part 2: URL Conventions" or the binding-specific parameters "$$groupId"
					 *   and "$$updateGroupId".
					 *   Note: Binding parameters may only be provided for absolute binding paths as only those
					 *   lead to a data service request.
					 *   All "5.2 Custom Query Options" are allowed except for those with a name starting with
					 *   "sap-". All other query options lead to an error.
					 *   Query options specified for the binding overwrite model query options.(optional)
					 * @return The property binding
					 */
					bindProperty(sPath: string, oContext?: Context, mParameters?: any): ODataPropertyBinding;
					/**
					 * Implement in inheriting classes
					 * @note Overload from base type sap.ui.model.Model
					 * @param sPath the path pointing to the property that should be bound
					 * @param oContext the context object for this databinding (optional)(optional)
					 * @param mParameters additional model specific parameters (optional)(optional)
					 * @return 
					 */
					bindProperty(sPath: string, oContext?: any, mParameters?: any): sap.ui.model.PropertyBinding;
					/**
					 * Method not supported
					 */
					bindTree();
					/**
					 * Implement in inheriting classes
					 * @note Overload from base type sap.ui.model.Model
					 * @param sPath the path pointing to the tree / array that should be bound
					 * @param oContext the context object for this databinding (optional)(optional)
					 * @param aFilters predefined filter/s contained in an array (optional)(optional)
					 * @param mParameters additional model specific parameters (optional)(optional)
					 * @param aSorters predefined sap.ui.model.sorter/s contained in an array (optional)(optional)
					 * @return 
					 */
					bindTree(sPath: string, oContext?: any, aFilters?: any[], mParameters?: any, aSorters?: any[]): sap.ui.model.TreeBinding;
					/**
					 * Cannot create contexts at this model at will; retrieve them from a binding instead.
					 */
					createBindingContext();
					/**
					 * Implement in inheriting classes
					 * @note Overload from base type sap.ui.model.Model
					 * @param sPath the path to create the new context from
					 * @param oContext the context which should be used to create the new binding context(optional)
					 * @param mParameters the parameters used to create the new binding context(optional)
					 * @param fnCallBack the function which should be called after the binding context has been created(optional)
					 * @param bReload force reload even if data is already available. For server side models this should
					 *                   refetch the data from the server(optional)
					 * @return the binding context, if it could be created synchronously
					 */
					createBindingContext(sPath: string, oContext?: any, mParameters?: any, fnCallBack?: any, bReload?: boolean): sap.ui.model.Context;
					/**
					 * Destroys this model and its meta model.
					 */
					destroy();
					/**
					 * Method not supported
					 */
					destroyBindingContext();
					/**
					 * Implement in inheriting classes
					 * @note Overload from base type sap.ui.model.Model
					 * @param oContext to destroy
					 */
					destroyBindingContext(oContext: any);
					/**
					 * Returns the meta model for this ODataModel.
					 * @return The meta model for this ODataModel
					 */
					getMetaModel(): ODataMetaModel;
					/**
					 * Returns the meta model associated with this model if it is available for the concrete
					 * model type.
					 * @note Overload from base type sap.ui.model.Model
					 * @return The meta model or undefined if no meta model exists.
					 */
					getMetaModel(): sap.ui.model.MetaModel;
					/**
					 * Method not supported
					 */
					getObject();
					/**
					 * Implement in inheriting classes
					 * @note Overload from base type sap.ui.model.Model
					 * @param sPath the path to where to read the object
					 * @param oContext the context with which the path should be resolved(optional)
					 */
					getObject(sPath: string, oContext?: any);
					/**
					 * Method not supported
					 */
					getOriginalProperty();
					/**
					 * Returns the original value for the property with the given path and context.
					 * The original value is the value that was last responded by a server if using a server model implementation.
					 * @note Overload from base type sap.ui.model.Model
					 * @param sPath the path/name of the property
					 * @param oContext the context if available to access the property value(optional)
					 * @return vValue the value of the property
					 */
					getOriginalProperty(sPath: string, oContext?: any): any;
					/**
					 * Method not supported
					 */
					getProperty();
					/**
					 * Implement in inheriting classes
					 * @note Overload from base type sap.ui.model.Model
					 * @param sPath the path to where to read the attribute value
					 * @param oContext the context with which the path should be resolved(optional)
					 */
					getProperty(sPath: string, oContext?: any);
					/**
					 * Returns <code>true</code> if there are pending changes that would be reset by
					 * {@link #refresh}.
					 * @return <code>true</code> if there are pending changes
					 */
					hasPendingChanges(): boolean;
					/**
					 * Method not supported
					 */
					isList();
					/**
					 * Refreshes the model by calling refresh on all bindings which have a change event handler
					 * attached.
					 * 
					 * Note: When calling refresh multiple times, the result of the request triggered by the last
					 * call determines the model's data; it is <b>independent</b>
					 * of the order of calls to {@link #submitBatch} with the given group ID.
					 * @param sGroupId The group ID to be used for refresh; valid values are <code>undefined</code>,
					 *   <code>'$auto'</code>, <code>'$direct'</code> or application group IDs as specified in
					 *   {@link #submitBatch}(optional)
					 */
					refresh(sGroupId?: string);
					/**
					 * Refresh the model.
					 * This will check all bindings for updated data and update the controls if data has been changed.
					 * @note Overload from base type sap.ui.model.Model
					 * @param bForceUpdate Update controls even if data has not been changed
					 */
					refresh(bForceUpdate: boolean);
					/**
					 * Resets all property changes associated with the given application group ID which have not
					 * yet been submitted via {@link #submitBatch}.
					 * @param sGroupId The application group ID, which is a non-empty string consisting of alphanumeric
					 *   characters from the basic Latin alphabet, including the underscore. If it is
					 *   <code>undefined</code>, the model's <code>updateGroupId</code> is used. Note that the
					 *   default <code>updateGroupId</code> is "$auto", which is invalid here.(optional)
					 */
					resetChanges(sGroupId?: string);
					/**
					 * Method not supported
					 */
					setLegacySyntax();
					/**
					 * Enables legacy path syntax handling
					 * 
					 * This defines, whether relative bindings, which do not have a defined
					 * binding context, should be compatible to earlier releases which means
					 * they are resolved relative to the root element or handled strict and
					 * stay unresolved until a binding context is set
					 * @note Overload from base type sap.ui.model.Model
					 * @param bLegacySyntax the path syntax to use
					 */
					setLegacySyntax(bLegacySyntax: boolean);
					/**
					 * Submits the requests associated with the given application group ID in one batch request.
					 * @param sGroupId The application group ID, which is a non-empty string consisting of alphanumeric
					 *   characters from the basic Latin alphabet, including the underscore.
					 * @return A promise on the outcome of the HTTP request resolving with <code>undefined</code>; it is
					 *   rejected with an error if the batch request itself fails
					 */
					submitBatch(sGroupId: string): any;
					/**
					 * Returns a string representation of this object including the service URL.
					 * @return A string description of this model
					 */
					toString(): string;
				}
			
				class ODataPropertyBinding extends sap.ui.model.PropertyBinding {
					/**
					 * DO NOT CALL this private constructor for a new <code>ODataPropertyBinding</code>,
					 * but rather use {@link sap.ui.model.odata.v4.ODataModel#bindProperty bindProperty} instead!
					 * @param oModel The OData V4 model
					 * @param sPath The binding path in the model; must not be empty or end with a slash
					 * @param oContext The context which is required as base for a relative path(optional)
					 * @param mParameters Map of binding parameters which can be OData query options as specified in
					 *   "OData Version 4.0 Part 2: URL Conventions" or the binding-specific parameters "$$groupId"
					 *   and "$$updateGroupId".
					 *   Note: Binding parameters may only be provided for absolute binding paths as only those
					 *   lead to a data service request.
					 *   All "5.2 Custom Query Options" are allowed except for those with a name starting with
					 *   "sap-". All other query options lead to an error.
					 *   Query options specified for the binding overwrite model query options.(optional)
					 */
					constructor(oModel: sap.ui.model.odata.v4.ODataModel, sPath: string, oContext?: sap.ui.model.odata.v4.Context, mParameters?: any);
					/**
					 * Destroys the object. The object must not be used anymore after this function was called.
					 */
					destroy();
					/**
					 * Returns the current value.
					 * @return The current value
					 */
					getValue(): any;
					/**
					 * Returns <code>true</code> if the binding has pending changes, that is updates via two-way
					 * binding that have not yet been sent to the server.
					 * @return <code>true</code> if the binding has pending changes
					 */
					hasPendingChanges(): boolean;
					/**
					 * Method not supported
					 */
					isInitial();
					/**
					 * Returns whether the binding is initial, which means it did not get an initial value yet
					 * @note Overload from base type sap.ui.model.Binding
					 * @return whether binding is initial
					 */
					isInitial(): boolean;
					/**
					 * Refreshes this binding; refresh is supported for absolute bindings only.
					 * A refresh retrieves data from the server using the given group ID and fires a change event
					 * when new data is available.
					 * 
					 * Note: When calling refresh multiple times, the result of the request triggered by the last
					 * call determines the binding's data; it is <b>independent</b>
					 * of the order of calls to {@link sap.ui.model.odata.v4.ODataModel#submitBatch} with the given
					 * group ID.
					 * @param sGroupId The group ID to be used for refresh; if not specified, the group ID for this binding is
					 *   used, see {@link sap.ui.model.odata.v4.ODataPropertyBinding#constructor}.
					 *   Valid values are <code>undefined</code>, <code>'$auto'</code>, <code>'$direct'</code> or
					 *   application group IDs as specified in {@link sap.ui.model.odata.v4.ODataModel#submitBatch}.(optional)
					 */
					refresh(sGroupId?: string);
					/**
					 * Refreshes the binding, check whether the model data has been changed and fire change event
					 * if this is the case. For server side models this should refetch the data from the server.
					 * To update a control, even if no data has been changed, e.g. to reset a control after failed
					 * validation, please use the parameter bForceUpdate.
					 * @note Overload from base type sap.ui.model.Binding
					 * @param bForceUpdate Update the bound control even if no data has been changed
					 */
					refresh(bForceUpdate: boolean);
					/**
					 * Method not supported
					 */
					resume();
					/**
					 * Sets the optional type and internal type for this binding; used for formatting and parsing.
					 * Fires a change event if the type has changed.
					 * @param oType The type for this binding
					 * @param sInternalType The internal type of the element property which owns this binding, for example "any",
					 *   "boolean", "float", "int", "string"; see {@link sap.ui.model.odata.type} for more
					 *   information
					 */
					setType(oType: sap.ui.model.Type, sInternalType: string);
					/**
					 * Sets the new current value and updates the cache.
					 * @param vValue The new value which must be primitive
					 * @param sGroupId The group ID to be used for this update call; if not specified, the update group ID for
					 *   this binding (or its relevant parent binding) is used, see
					 *   {@link sap.ui.model.odata.v4.ODataPropertyBinding#constructor}.
					 *   Valid values are <code>undefined</code>, <code>'$auto'</code>, <code>'$direct'</code> or
					 *   application group IDs as specified in {@link sap.ui.model.odata.v4.ODataModel#submitBatch}.(optional)
					 */
					setValue(vValue: any, sGroupId?: string);
					/**
					 * Sets the value for this binding. A model implementation should check if the current default binding mode permits
					 * setting the binding value and if so set the new value also in the model.
					 * @note Overload from base type sap.ui.model.PropertyBinding
					 * @param oValue the value to set for this binding
					 */
					setValue(oValue: any);
					/**
					 * Method not supported
					 */
					suspend();
					/**
					 * Returns a string representation of this object including the binding path. If the binding is
					 * relative, the parent path is also given, separated by a '|'.
					 * @return A string description of this binding
					 */
					toString(): string;
				}
			}
		
			class CountMode {
				/**
				 * Count is retrieved by a separate request upfront and inline with each data request
				 */
				static Both: any;
				/**
				 * Count is retrieved by adding $inlinecount=allpages and is included in the data request
				 */
				static Inline: any;
				/**
				 * Count is retrieved by adding $inlinecount=allpages and is included in every data request
				 */
				static InlineRepeat: any;
				/**
				 * Count is not requested from the server
				 */
				static None: any;
				/**
				 * Count is retrieved by sending a separate $count request, before requesting data
				 */
				static Request: any;
			}
		
			class ODataAnnotations extends sap.ui.base.EventProvider {
				/**
				 * 
				 * @param aAnnotationURI The annotation-URL or an array of URLS that should be parsed and merged
				 * @param oMetadata 
				 * @param mParams 
				 */
				constructor(aAnnotationURI: string|string[], oMetadata: sap.ui.model.odata.ODataMetadata, mParams: any);
				/**
				 * Adds either one URL or an array of URLs to be loaded and parsed. The result will be merged into the annotations
				 * data which can be retrieved using the getAnnotations-method.
				 * @param vUrl Either one URL as string or an array of URL strings
				 * @return The Promise to load the given URL(s), resolved if all URLs have been loaded, rejected if at
				 *         least one failed to load. The argument is an object containing the annotations object, success (an array
				 *         of sucessfully loaded URLs), fail (an array ob of failed URLs).
				 */
				addUrl(vUrl: string|string[]): any;
				/**
				 * Attach event-handler <code>fnFunction</code> to the 'failed' event of this <code>sap.ui.model.odata.ODataAnnotations</code>.
				 * @param oData The object, that should be passed along with the event-object when firing the event.
				 * @param fnFunction The function to call, when the event occurs. This function will be called on the
				 *            oListener-instance (if present) or in a 'static way'.
				 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				attachFailed(oData: any, fnFunction: any, oListener?: any): ODataAnnotations;
				/**
				 * Attach event-handler <code>fnFunction</code> to the 'loaded' event of this <code>sap.ui.model.odata.ODataAnnotations</code>.
				 * @param oData The object, that should be passed along with the event-object when firing the event.
				 * @param fnFunction The function to call, when the event occurs. This function will be called on the
				 *            oListener-instance (if present) or in a 'static way'.
				 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				attachLoaded(oData: any, fnFunction: any, oListener?: any): ODataAnnotations;
				/**
				 * Detach event-handler <code>fnFunction</code> from the 'failed' event of this <code>sap.ui.model.odata.ODataAnnotations</code>.
				 * 
				 * The passed function and listener object must match the ones previously used for event registration.
				 * @param fnFunction The function to call, when the event occurs.
				 * @param oListener Object on which the given function had to be called.
				 * @return <code>this</code> to allow method chaining
				 */
				detachFailed(fnFunction: any, oListener: any): ODataAnnotations;
				/**
				 * Detach event-handler <code>fnFunction</code> from the 'loaded' event of this <code>sap.ui.model.odata.ODataAnnotations</code>.
				 * 
				 * The passed function and listener object must match the ones previously used for event registration.
				 * @param fnFunction The function to call, when the event occurs.
				 * @param oListener Object on which the given function had to be called.
				 * @return <code>this</code> to allow method chaining
				 */
				detachLoaded(fnFunction: any, oListener: any): ODataAnnotations;
				/**
				 * Creates a new subclass of class sap.ui.model.odata.ODataAnnotations with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Fire event failed to attached listeners.
				 * @param mArguments the arguments to pass along with the event.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				fireFailed(mArguments?: any): ODataAnnotations;
				/**
				 * Fire event loaded to attached listeners.
				 * @param mArguments Map of arguments that will be given as parameters to teh event handler(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				fireLoaded(mArguments?: any): ODataAnnotations;
				/**
				 * returns the raw annotation data
				 * @return returns annotations data
				 */
				getAnnotationsData(): any;
				/**
				 * Checks whether annotations loading of at least one of the given URLs has already failed.
				 * Note: For asynchronous annotations {@link #attachFailed} has to be used.
				 * @return whether annotations request has failed
				 */
				isFailed(): boolean;
				/**
				 * Checks whether annotations from at least one source are available
				 * @return returns whether annotations is already loaded
				 */
				isLoaded(): boolean;
				/**
				 * Set custom headers which are provided in a key/value map. These headers are used for all requests.
				 * The Accept-Language header cannot be modified and is set using the Core's language setting.
				 * 
				 * To remove these headers simply set the mHeaders parameter to {}. Please also note that when calling this method
				 * again all previous custom headers are removed unless they are specified again in the mCustomHeaders parameter.
				 * @param mHeaders the header name/value map.
				 */
				setHeaders(mHeaders: any);
				/**
				 * Sets an XML document
				 * @param oXMLDocument The XML document to parse for annotations
				 * @param sXMLContent The XML content as string to parse for annotations
				 * @param mOptions Additional options(optional)
				 * @return Whether or not parsing was successful
				 */
				setXML(oXMLDocument: any, sXMLContent: string, mOptions?: any): boolean;
			}
		
			class ODataContextBinding extends sap.ui.model.ContextBinding {
				/**
				 * Constructor for odata.ODataContextBinding
				 * @param oModel 
				 * @param sPath 
				 * @param oContext 
				 * @param mParameters (optional)
				 */
				constructor(oModel: sap.ui.model.Model, sPath: string, oContext: any, mParameters?: any);
				/**
				 * Creates a new subclass of class sap.ui.model.odata.ODataContextBinding with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.ContextBinding.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			}
		
			class ODataListBinding extends sap.ui.model.ListBinding {
				/**
				 * 
				 * @param oModel 
				 * @param sPath 
				 * @param oContext 
				 * @param aSorters initial sort order (can be either a sorter or an array of sorters)(optional)
				 * @param aFilters predefined filter/s (can be either a filter or an array of filters)(optional)
				 * @param mParameters (optional)
				 */
				constructor(oModel: sap.ui.model.Model, sPath: string, oContext: sap.ui.model.Context, aSorters?: any[], aFilters?: any[], mParameters?: any);
				/**
				 * Creates a new subclass of class sap.ui.model.odata.ODataListBinding with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.ListBinding.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * 
				 * Filters the list.
				 * 
				 * When using sap.ui.model.Filter the filters are first grouped according to their binding path.
				 * All filters belonging to a group are combined with OR and after that the
				 * results of all groups are combined with AND.
				 * Usually this means, all filters applied to a single table column
				 * are combined with OR, while filters on different table columns are combined with AND.
				 * Please note that a custom filter function is not supported.
				 * @param aFilters Array of filter objects
				 * @param sFilterType Type of the filter which should be adjusted, if it is not given, the standard behaviour applies
				 * @return returns <code>this</code> to facilitate method chaining
				 */
				filter(aFilters: sap.ui.model.Filter[], sFilterType: sap.ui.model.FilterType): sap.ui.model.ListBinding;
				/**
				 * Filters the list according to the filter definitions
				 * @note Overload from base type sap.ui.model.ListBinding
				 * @param aFilters Array of filter objects
				 * @param sFilterType Type of the filter which should be adjusted, if it is not given, the standard behaviour applies
				 * @return returns <code>this</code> to facilitate method chaining
				 */
				filter(aFilters: any[], sFilterType: sap.ui.model.FilterType): sap.ui.model.ListBinding;
				/**
				 * Return contexts for the list
				 * @param iStartIndex the start index of the requested contexts(optional)
				 * @param iLength the requested amount of contexts(optional)
				 * @param iThreshold (optional)
				 * @return the array of contexts for each row of the bound list
				 */
				getContexts(iStartIndex?: number, iLength?: number, iThreshold?: number): sap.ui.model.Context[];
				/**
				 * Returns an array of binding contexts for the bound target list.
				 * 
				 * <strong>Note:</strong>The public usage of this method is deprecated, as calls from outside of controls will lead
				 * to unexpected side effects. For avoidance use {@link sap.ui.model.ListBinding.prototype.getCurrentContexts}
				 * instead.
				 * @note Overload from base type sap.ui.model.ListBinding
				 * @param iStartIndex the startIndex where to start the retrieval of contexts(optional)
				 * @param iLength determines how many contexts to retrieve beginning from the start index.(optional)
				 * @return the array of contexts for each row of the bound list
				 */
				getContexts(iStartIndex?: number, iLength?: number): sap.ui.model.Context[];
				/**
				 * Get a download URL with the specified format considering the
				 * sort/filter/custom parameters.
				 * @param sFormat Value for the $format Parameter
				 * @return URL which can be used for downloading
				 */
				getDownloadUrl(sFormat: string): string;
				/**
				 * Initialize binding. Fires a change if data is already available ($expand) or a refresh.
				 * If metadata is not yet available, do nothing, method will be called again when
				 * metadata is loaded.
				 */
				initialize();
				/**
				 * Refreshes the binding, check whether the model data has been changed and fire change event
				 * if this is the case. For server side models this should refetch the data from the server.
				 * To update a control, even if no data has been changed, e.g. to reset a control after failed
				 * validation, please use the parameter bForceUpdate.
				 * @param bForceUpdate Update the bound control even if no data has been changed(optional)
				 */
				refresh(bForceUpdate?: boolean);
				/**
				 * Refreshes the binding, check whether the model data has been changed and fire change event
				 * if this is the case. For server side models this should refetch the data from the server.
				 * To update a control, even if no data has been changed, e.g. to reset a control after failed
				 * validation, please use the parameter bForceUpdate.
				 * @note Overload from base type sap.ui.model.Binding
				 * @param bForceUpdate Update the bound control even if no data has been changed
				 */
				refresh(bForceUpdate: boolean);
				/**
				 * Sorts the list.
				 * @param aSorters the Sorter or an array of sorter objects object which define the sort order
				 * @return returns <code>this</code> to facilitate method chaining
				 */
				sort(aSorters: sap.ui.model.Sorter|any[]): sap.ui.model.ListBinding;
			}
		
			class ODataMessageParser extends sap.ui.core.message.MessageParser {
				/**
				 * OData implementation of the sap.ui.core.message.MessageParser class. Parses message responses from the back-end.
				 */
				constructor();
				/**
				 * Creates a new subclass of class sap.ui.model.odata.ODataMessageParser with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.message.MessageParser.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Returns the name of the header field that is used to parse the server messages
				 * @return The name of the header field
				 */
				getHeaderField(): string;
				/**
				 * Parses the given response for messages, calculates the delta and fires the messageChange-event
				 * on the MessageProcessor if messages are found.
				 * @param oResponse The response from the server containing body and headers
				 * @param oRequest The original request that lead to this response
				 * @param mGetEntities A map containing the entities requested from the back-end as keys
				 * @param mChangeEntities A map containing the entities changed on the back-end as keys
				 */
				parse(oResponse: any, oRequest: any, mGetEntities: any, mChangeEntities: any);
				/**
				 * Abstract parse method must be implemented in the inheriting class.
				 * @note Overload from base type sap.ui.core.message.MessageParser
				 */
				parse();
				/**
				 * Sets the header field name that should be used for parsing the JSON messages
				 * @param sFieldName The name of the header field that should be used as source of the message object
				 * @return Instance reference for method chaining
				 */
				setHeaderField(sFieldName: string): ODataMessageParser;
			}
		
			class ODataMetadata extends sap.ui.base.EventProvider {
				/**
				 * Constructor for a new ODataMetadata.
				 * @param sMetadataURI needs the correct metadata uri including $metadata
				 * @param mParams optional map of parameters.(optional)
				 */
				constructor(sMetadataURI: string, mParams?: any);
				/**
				 * Attach event-handler <code>fnFunction</code> to the 'failed' event of this <code>sap.ui.model.odata.ODataMetadata</code>.
				 * @param oData The object, that should be passed along with the event-object when firing the event.
				 * @param fnFunction The function to call, when the event occurs. This function will be called on the
				 *            oListener-instance (if present) or in a 'static way'.
				 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				attachFailed(oData: any, fnFunction: any, oListener?: any): ODataMetadata;
				/**
				 * Attach event-handler <code>fnFunction</code> to the 'loaded' event of this <code>sap.ui.model.odata.ODataMetadata</code>.
				 * @param oData The object, that should be passed along with the event-object when firing the event.
				 * @param fnFunction The function to call, when the event occurs. This function will be called on the
				 *            oListener-instance (if present) or in a 'static way'.
				 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				attachLoaded(oData: any, fnFunction: any, oListener?: any): ODataMetadata;
				/**
				 * Detach event-handler <code>fnFunction</code> from the 'failed' event of this <code>sap.ui.model.odata.ODataMetadata</code>.
				 * 
				 * The passed function and listener object must match the ones previously used for event registration.
				 * @param fnFunction The function to call, when the event occurs.
				 * @param oListener Object on which the given function had to be called.
				 * @return <code>this</code> to allow method chaining
				 */
				detachFailed(fnFunction: any, oListener: any): ODataMetadata;
				/**
				 * Detach event-handler <code>fnFunction</code> from the 'loaded' event of this <code>sap.ui.model.odata.ODataMetadata</code>.
				 * 
				 * The passed function and listener object must match the ones previously used for event registration.
				 * @param fnFunction The function to call, when the event occurs.
				 * @param oListener Object on which the given function had to be called.
				 * @return <code>this</code> to allow method chaining
				 */
				detachLoaded(fnFunction: any, oListener: any): ODataMetadata;
				/**
				 * Creates a new subclass of class sap.ui.model.odata.ODataMetadata with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Fire event failed to attached listeners.
				 * @param mArguments the arguments to pass along with the event.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				fireFailed(mArguments?: any): ODataMetadata;
				/**
				 * Fire event loaded to attached listeners.
				 * @return <code>this</code> to allow method chaining
				 */
				fireLoaded(): ODataMetadata;
				/**
				 * Return the metadata object
				 * @return metdata object
				 */
				getServiceMetadata(): any;
				/**
				 * Get the the use-batch extension value if any
				 * @return true/false
				 */
				getUseBatch(): boolean;
				/**
				 * Checks whether metadata loading has already failed
				 * @return returns whether metadata request has failed
				 */
				isFailed(): boolean;
				/**
				 * Checks whether metadata is available
				 * @return returns whether metadata is already loaded
				 */
				isLoaded(): boolean;
				/**
				 * Returns a promise for the loaded state of the metadata
				 * @return returns a promise on metadata loaded state
				 */
				loaded(): any;
				/**
				 * Refreshes the metadata creating a new request to the server.
				 * Returns a new promise which can be resolved or rejected depending on the metadata loading state.
				 * @return returns a promise on metadata loaded state
				 */
				refresh(): any;
			}
		
			class ODataMetaModel extends sap.ui.model.MetaModel {
				/**
				 * DO NOT CALL this private constructor for a new <code>ODataMetaModel</code>,
				 * but rather use {@link sap.ui.model.odata.ODataModel#getMetaModel getMetaModel} instead!
				 * @param oMetadata the OData model's meta data object
				 * @param oAnnotations the OData model's annotations object(optional)
				 * @param oODataModelInterface the private interface object of the OData model which provides friend access to
				 *   selected methods(optional)
				 */
				constructor(oMetadata: sap.ui.model.odata.ODataMetadata, oAnnotations?: sap.ui.model.odata.ODataAnnotations, oODataModelInterface?: any);
				/**
				 * Creates a new subclass of class sap.ui.model.odata.ODataMetaModel with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.MetaModel.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Returns the OData meta model context corresponding to the given OData model path.
				 * @param sPath an absolute path pointing to an entity or property, e.g.
				 *   "/ProductSet(1)/ToSupplier/BusinessPartnerID"; this equals the
				 *   <a href="http://www.odata.org/documentation/odata-version-2-0/uri-conventions#ResourcePath">
				 *   resource path</a> component of a URI according to OData V2 URI conventions(optional)
				 * @return the context for the corresponding meta data object, i.e. an entity type or its property,
				 *   or <code>null</code> in case no path is given
				 */
				getMetaContext(sPath?: string): sap.ui.model.Context;
				/**
				 * Returns the OData association end corresponding to the given entity type's navigation
				 * property of given name.
				 * @param oEntityType an entity type as returned by {@link #getODataEntityType getODataEntityType}
				 * @param sName the name of a navigation property within this entity type
				 * @return the OData association end or <code>null</code> if no such association end is found
				 */
				getODataAssociationEnd(oEntityType: any, sName: string): any;
				/**
				 * Returns the OData association <em>set</em> end corresponding to the given entity type's
				 * navigation property of given name.
				 * @param oEntityType an entity type as returned by {@link #getODataEntityType getODataEntityType}
				 * @param sName the name of a navigation property within this entity type
				 * @return the OData association set end or <code>null</code> if no such association set end is found
				 */
				getODataAssociationSetEnd(oEntityType: any, sName: string): any;
				/**
				 * Returns the OData complex type with the given qualified name, either as a path or as an
				 * object, as indicated.
				 * @param sQualifiedName a qualified name, e.g. "ACME.Address"
				 * @param bAsPath determines whether the complex type is returned as a path or as an object(optional)
				 * @return (the path to) the complex type with the given qualified name; <code>undefined</code> (for
				 *   a path) or <code>null</code> (for an object) if no such type is found
				 */
				getODataComplexType(sQualifiedName: string, bAsPath?: boolean): any|string;
				/**
				 * Returns the OData default entity container.
				 * @param bAsPath determines whether the entity container is returned as a path or as an object(optional)
				 * @return (the path to) the default entity container; <code>undefined</code> (for a path) or
				 *   <code>null</code> (for an object) if no such container is found
				 */
				getODataEntityContainer(bAsPath?: boolean): any|string;
				/**
				 * Returns the OData entity set with the given simple name from the default entity container.
				 * @param sName a simple name, e.g. "ProductSet"
				 * @param bAsPath determines whether the entity set is returned as a path or as an object(optional)
				 * @return (the path to) the entity set with the given simple name; <code>undefined</code> (for a
				 *   path) or <code>null</code> (for an object) if no such set is found
				 */
				getODataEntitySet(sName: string, bAsPath?: boolean): any|string;
				/**
				 * Returns the OData entity type with the given qualified name, either as a path or as an
				 * object, as indicated.
				 * @param sQualifiedName a qualified name, e.g. "ACME.Product"
				 * @param bAsPath determines whether the entity type is returned as a path or as an object(optional)
				 * @return (the path to) the entity type with the given qualified name; <code>undefined</code> (for a
				 *   path) or <code>null</code> (for an object) if no such type is found
				 */
				getODataEntityType(sQualifiedName: string, bAsPath?: boolean): any|string;
				/**
				 * Returns the OData function import with the given simple or qualified name from the default
				 * entity container or the respective entity container specified in the qualified name.
				 * @param sName a simple or qualified name, e.g. "Save" or "MyService.Entities/Save"
				 * @param bAsPath determines whether the function import is returned as a path or as an object(optional)
				 * @return (the path to) the function import with the given simple name; <code>undefined</code> (for
				 *   a path) or <code>null</code> (for an object) if no such function import is found
				 */
				getODataFunctionImport(sName: string, bAsPath?: boolean): any|string;
				/**
				 * Returns the given OData type's property (not navigation property!) of given name.
				 * 
				 * If an array is given instead of a single name, it is consumed (via
				 * <code>Array.prototype.shift</code>) piece by piece. Each element is interpreted as a
				 * property name of the current type, and the current type is replaced by that property's type.
				 * This is repeated until an element is encountered which cannot be resolved as a property name
				 * of the current type anymore; in this case, the last property found is returned and
				 * <code>vName</code> contains only the remaining names, with <code>vName[0]</code> being the
				 * one which was not found.
				 * 
				 * Examples:
				 * <ul>
				 * <li> Get address property of business partner:
				 * <pre>
				 * var oEntityType = oMetaModel.getODataEntityType("GWSAMPLE_BASIC.BusinessPartner"),
				 *     oAddressProperty = oMetaModel.getODataProperty(oEntityType, "Address");
				 * oAddressProperty.name === "Address";
				 * oAddressProperty.type === "GWSAMPLE_BASIC.CT_Address";
				 * </pre>
				 * </li>
				 * <li> Get street property of address type:
				 * <pre>
				 * var oComplexType = oMetaModel.getODataComplexType("GWSAMPLE_BASIC.CT_Address"),
				 *     oStreetProperty = oMetaModel.getODataProperty(oComplexType, "Street");
				 * oStreetProperty.name === "Street";
				 * oStreetProperty.type === "Edm.String";
				 * </pre>
				 * </li>
				 * <li> Get address' street property directly from business partner:
				 * <pre>
				 * var aParts = ["Address", "Street"];
				 * oMetaModel.getODataProperty(oEntityType, aParts) === oStreetProperty;
				 * aParts.length === 0;
				 * </pre>
				 * </li>
				 * <li> Trying to get address' foo property directly from business partner:
				 * <pre>
				 * aParts = ["Address", "foo"];
				 * oMetaModel.getODataProperty(oEntityType, aParts) === oAddressProperty;
				 * aParts.length === 1;
				 * aParts[0] === "foo";
				 * </pre>
				 * </li>
				 * </ul>
				 * @param oType a complex type as returned by {@link #getODataComplexType getODataComplexType}, or
				 *   an entity type as returned by {@link #getODataEntityType getODataEntityType}
				 * @param vName the name of a property within this type (e.g. "Address"), or an array of such names (e.g.
				 *   <code>["Address", "Street"]</code>) in order to drill-down into complex types;
				 *   <b>BEWARE</b> that this array is modified by removing each part which is understood!
				 * @param bAsPath determines whether the property is returned as a path or as an object(optional)
				 * @return (the path to) the last OData property found; <code>undefined</code> (for a path) or
				 *   <code>null</code> (for an object) if no property was found at all
				 */
				getODataProperty(oType: any, vName: string|string[], bAsPath?: boolean): any|string;
				/**
				 * Returns a <code>Promise</code> which is resolved with a map representing the
				 * <code>com.sap.vocabularies.Common.v1.ValueList</code> annotations of the given property or
				 * rejected with an error.
				 * The key in the map provided on successful resolution is the qualifier of the annotation or
				 * the empty string if no qualifier is defined. The value in the map is the JSON object for
				 * the annotation. The map is empty if the property has no
				 * <code>com.sap.vocabularies.Common.v1.ValueList</code> annotations.
				 * @param oPropertyContext a model context for a structural property of an entity type or a complex type, as
				 *   returned by {@link #getMetaContext getMetaContext}
				 * @return a Promise that gets resolved as soon as the value lists as well as the required model
				 *   elements have been loaded
				 */
				getODataValueLists(oPropertyContext: sap.ui.model.Context): any;
				/**
				 * Returns a promise which is fulfilled once the meta model data is loaded and can be used.
				 * @return a Promise
				 */
				loaded(): any;
				/**
				 * Refresh not supported by OData meta model!
				 */
				refresh();
				/**
				 * Refresh the model.
				 * This will check all bindings for updated data and update the controls if data has been changed.
				 * @note Overload from base type sap.ui.model.Model
				 * @param bForceUpdate Update controls even if data has not been changed
				 */
				refresh(bForceUpdate: boolean);
				/**
				 * Legacy syntax not supported by OData meta model!
				 * @param bLegacySyntax must not be true!
				 */
				setLegacySyntax(bLegacySyntax: boolean);
			}
		
			class ODataModel extends sap.ui.model.Model {
				/**
				 * Constructor for a new ODataModel.
				 * @param sServiceUrl base uri of the service to request data from; additional URL parameters appended here will be appended to every request
				 * 								can be passed with the mParameters object as well: [mParameters.serviceUrl] A serviceURl is required!(optional)
				 * @param mParameters (optional) a map which contains the following parameter properties:(optional)
				 */
				constructor(sServiceUrl?: string, mParameters?: any);
				/**
				 * Adds (a) new URL(s) to the be parsed for OData annotations, which are then merged into the annotations object
				 * which can be retrieved by calling the getServiceAnnotations()-method. If a $metadata url is passed the data will
				 * also be merged into the metadata object, which can be reached by calling the getServiceMetadata() method.
				 * @param vUrl Either one URL as string or an array or URL strings
				 * @return The Promise to load the given URL(s), resolved if all URLs have been loaded, rejected if at least one fails to load.
				 * 					 If this promise resolves it returns the following parameters:
				 * 					 annotations: The annotation object
				 * 					 entitySets: An array of EntitySet objects containing the newly merged EntitySets from a $metadata requests.
				 * 								 the structure is the same as in the metadata object reached by the getServiceMetadata() method.
				 * 								 For non $metadata requests the array will be empty.
				 */
				addAnnotationUrl(vUrl: string|string[]): any;
				/**
				 * Adds new xml content to be parsed for OData annotations, which are then merged into the annotations object which
				 * can be retrieved by calling the getServiceAnnotations()-method.
				 * @param sXMLContent The string that should be parsed as annotation XML
				 * @param bSuppressEvents Whether not to fire annotationsLoaded event on the annotationParser(optional)
				 * @return The Promise to parse the given XML-String, resolved if parsed without errors, rejected if errors occur
				 */
				addAnnotationXML(sXMLContent: string, bSuppressEvents?: boolean): any;
				/**
				 * Appends the change batch operations to the end of the batch stack. Only PUT, POST or DELETE batch operations should be included in the specified array.
				 * The operations in the array will be included in a single changeset. To embed change operations in different change sets call this method with the corresponding change operations again.
				 * If an illegal batch operation is added to the change set nothing will be performed and false will be returned.
				 * @param aChangeOperations an array of change batch operations created via <code>createBatchOperation</code> and <code>sMethod</code> = POST, PUT, MERGE or DELETE
				 */
				addBatchChangeOperations(aChangeOperations: any[]);
				/**
				 * Appends the read batch operations to the end of the batch stack. Only GET batch operations should be included in the specified array.
				 * If an illegal batch operation is added to the batch nothing will be performed and false will be returned.
				 * @param aReadOperations an array of read batch operations created via <code>createBatchOperation</code> and <code>sMethod</code> = GET
				 */
				addBatchReadOperations(aReadOperations: any[]);
				/**
				 * Attach event-handler <code>fnFunction</code> to the 'annotationsFailed' event of this <code>sap.ui.model.odata.ODataModel</code>.
				 * @param oData The object, that should be passed along with the event-object when firing the event.
				 * @param fnFunction The function to call, when the event occurs. This function will be called on the
				 *            oListener-instance (if present) or in a 'static way'.
				 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				attachAnnotationsFailed(oData: any, fnFunction: any, oListener?: any): ODataModel;
				/**
				 * Attach event-handler <code>fnFunction</code> to the 'annotationsLoaded' event of this <code>sap.ui.model.odata.ODataModel</code>.
				 * @param oData The object, that should be passed along with the event-object when firing the event.
				 * @param fnFunction The function to call, when the event occurs. This function will be called on the
				 *            oListener-instance (if present) or in a 'static way'.
				 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				attachAnnotationsLoaded(oData: any, fnFunction: any, oListener?: any): ODataModel;
				/**
				 * Attach event-handler <code>fnFunction</code> to the 'metadataFailed' event of this <code>sap.ui.model.odata.ODataModel</code>.
				 * @param oData The object, that should be passed along with the event-object when firing the event.
				 * @param fnFunction The function to call, when the event occurs. This function will be called on the
				 *            oListener-instance (if present) or in a 'static way'.
				 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				attachMetadataFailed(oData: any, fnFunction: any, oListener?: any): ODataModel;
				/**
				 * Attach event-handler <code>fnFunction</code> to the 'metadataLoaded' event of this <code>sap.ui.model.odata.ODataModel</code>.
				 * @param oData The object, that should be passed along with the event-object when firing the event.
				 * @param fnFunction The function to call, when the event occurs. This function will be called on the
				 *            oListener-instance (if present) or in a 'static way'.
				 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				attachMetadataLoaded(oData: any, fnFunction: any, oListener?: any): ODataModel;
				/**
				 * Trigger a request to the function import odata service that was specified in the model constructor.
				 * @param sFunctionName A string containing the name of the function to call.
				 * 		The name is concatenated to the sServiceUrl which was specified in the model constructor.
				 * @param mParameters Optional parameter map containing any of the following properties:(optional)
				 * @return an object which has an <code>abort</code> function to abort the current request.
				 */
				callFunction(sFunctionName: string, mParameters?: any): any;
				/**
				 * Removes all operations in the current batch.
				 */
				clearBatch();
				/**
				 * Trigger a POST request to the odata service that was specified in the model constructor. Please note that deep creates are not supported
				 * and may not work.
				 * @param sPath A string containing the path to the collection where an entry
				 * 		should be created. The path is concatenated to the sServiceUrl
				 * 		which was specified in the model constructor.
				 * @param oData data of the entry that should be created.
				 * @param mParameters Optional parameter map containing any of the following properties:(optional)
				 * @return an object which has an <code>abort</code> function to abort the current request.
				 */
				create(sPath: string, oData: any, mParameters?: any): any;
				/**
				 * Creates a single batch operation (read or change operation) which can be used in a batch request.
				 * @param sPath A string containing the path to the collection or entry where the batch operation should be performed.
				 * 						The path is concatenated to the sServiceUrl which was specified in the model constructor.
				 * @param sMethod for the batch operation. Possible values are GET, PUT, MERGE, POST, DELETE
				 * @param oData optional data payload which should be created, updated, deleted in a change batch operation.(optional)
				 * @param oParameters optional parameter for additional information introduced in SAPUI5 1.9.1,(optional)
				 */
				createBatchOperation(sPath: string, sMethod: string, oData?: any, oParameters?: any);
				/**
				 * Creates a new entry object which is described by the metadata of the entity type of the
				 * specified sPath Name. A context object is returned which can be used to bind
				 * against the newly created object.
				 * 
				 * For each created entry a request is created and stored in a request queue.
				 * The request queue can be submitted by calling submitChanges. To delete a created
				 * entry from the request queue call deleteCreateEntry.
				 * 
				 * The optional vProperties parameter can be used as follows:
				 * 
				 *   - vProperties could be an array containing the property names which should be included
				 *     in the new entry. Other properties defined in the entity type are not included.
				 *   - vProperties could be an object which includes the desired properties and the values
				 *     which should be used for the created entry.
				 * 
				 * If vProperties is not specified, all properties in the entity type will be included in the
				 * created entry.
				 * 
				 * If there are no values specified the properties will have undefined values.
				 * 
				 * Please note that deep creates (including data defined by navigationproperties) are not supported
				 * @param sPath Name of the path to the collection
				 * @param vProperties An array that specifies a set of properties or the entry
				 * @return oContext A Context object that point to the new created entry.
				 */
				createEntry(sPath: string, vProperties: any[]|any): sap.ui.model.Context;
				/**
				 * Creates the key from the given collection name and property map
				 * @param sCollection The name of the collection
				 * @param oKeyParameters The object containing at least all the key properties of the entity type
				 * @param bDecode Whether the URI decoding should be applied on the key
				 */
				createKey(sCollection: string, oKeyParameters: any, bDecode: boolean);
				/**
				 * Deletes a created entry from the request queue and the model.
				 * @param oContext The context object pointing to the created entry
				 */
				deleteCreatedEntry(oContext: sap.ui.model.Context);
				/**
				 * 
				 */
				destroy();
				/**
				 * Detach event-handler <code>fnFunction</code> from the 'annotationsFailed' event of this <code>sap.ui.model.odata.ODataModel</code>.
				 * 
				 * The passed function and listener object must match the ones previously used for event registration.
				 * @param fnFunction The function to call, when the event occurs.
				 * @param oListener Object on which the given function had to be called.
				 * @return <code>this</code> to allow method chaining
				 */
				detachAnnotationsFailed(fnFunction: any, oListener: any): ODataModel;
				/**
				 * Detach event-handler <code>fnFunction</code> from the 'annotationsLoaded' event of this <code>sap.ui.model.odata.ODataModel</code>.
				 * @param fnFunction The function to call, when the event occurs.
				 * @param oListener Object on which the given function had to be called.
				 * @return <code>this</code> to allow method chaining
				 */
				detachAnnotationsLoaded(fnFunction: any, oListener: any): ODataModel;
				/**
				 * Detach event-handler <code>fnFunction</code> from the 'metadataFailed' event of this <code>sap.ui.model.odata.ODataModel</code>.
				 * 
				 * The passed function and listener object must match the ones previously used for event registration.
				 * @param fnFunction The function to call, when the event occurs.
				 * @param oListener Object on which the given function had to be called.
				 * @return <code>this</code> to allow method chaining
				 */
				detachMetadataFailed(fnFunction: any, oListener: any): ODataModel;
				/**
				 * Detach event-handler <code>fnFunction</code> from the 'metadataLoaded' event of this <code>sap.ui.model.odata.ODataModel</code>.
				 * 
				 * The passed function and listener object must match the ones previously used for event registration.
				 * @param fnFunction The function to call, when the event occurs.
				 * @param oListener Object on which the given function had to be called.
				 * @return <code>this</code> to allow method chaining
				 */
				detachMetadataLoaded(fnFunction: any, oListener: any): ODataModel;
				/**
				 * Creates a new subclass of class sap.ui.model.odata.ODataModel with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Fire event annotationsFailed to attached listeners.
				 * @param mArguments the arguments to pass along with the event.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				fireAnnotationsFailed(mArguments?: any): ODataModel;
				/**
				 * Fire event annotationsLoaded to attached listeners.
				 * @param mArguments the arguments to pass along with the event.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				fireAnnotationsLoaded(mArguments?: any): ODataModel;
				/**
				 * Fire event metadataFailed to attached listeners.
				 * @param mArguments the arguments to pass along with the event.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				fireMetadataFailed(mArguments?: any): ODataModel;
				/**
				 * Fire event metadataLoaded to attached listeners.
				 * @param mArguments the arguments to pass along with the event.(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				fireMetadataLoaded(mArguments?: any): ODataModel;
				/**
				 * Force no caching
				 * @param bForceNoCache whether to force no caching(optional)
				 * @deprecated The caching should be controlled by the backend by setting the correct cache control header
				 */
				forceNoCache(bForceNoCache?: boolean);
				/**
				 * Return requested data as object if the data has already been loaded and stored in the model.
				 * @param sPath A string containing the path to the data object that should be returned.
				 * @param oContext the optional context which is used with the sPath to retrieve the requested data.(optional)
				 * @param bIncludeExpandEntries This parameter should be set when a URI or custom parameter
				 * with a $expand System Query Option was used to retrieve associated entries embedded/inline.
				 * If true then the getProperty function returns a desired property value/entry and includes the associated expand entries (if any).
				 * If false the associated/expanded entry properties are removed and not included in the
				 * desired entry as properties at all. This is useful for performing updates on the base entry only. Note: A copy and not a reference of the entry will be returned.(optional)
				 * @deprecated please use {@link #getProperty} instead
				 * @return oData Object containing the requested data if the path is valid.
				 */
				getData(sPath: string, oContext?: any, bIncludeExpandEntries?: boolean): any;
				/**
				 * Returns the default count mode for retrieving the count of collections
				 * @return 
				 */
				getDefaultCountMode(): CountMode;
				/**
				 * Returns all headers and custom headers which are stored in the OData model.
				 * @return the header map
				 */
				getHeaders(): any;
				/**
				 * Returns the key part from the entry URI or the given context or object
				 * @param oObject The context or object
				 * @param bDecode Whether the URI decoding should be applied on the key
				 */
				getKey(oObject: any|sap.ui.model.Context, bDecode: boolean);
				/**
				 * Returns an instance of an OData meta model which offers a unified access to both OData V2
				 * meta data and V4 annotations. It uses the existing {@link sap.ui.model.odata.ODataMetadata}
				 * as a foundation and merges V4 annotations from the existing
				 * {@link sap.ui.model.odata.ODataAnnotations} directly into the corresponding model element.
				 * 
				 * <b>BEWARE:</b> Access to this OData meta model will fail before the promise returned by
				 * {@link sap.ui.model.odata.ODataMetaModel#loaded loaded} has been resolved!
				 * @return The meta model for this ODataModel
				 */
				getMetaModel(): ODataMetaModel;
				/**
				 * Returns the meta model associated with this model if it is available for the concrete
				 * model type.
				 * @note Overload from base type sap.ui.model.Model
				 * @return The meta model or undefined if no meta model exists.
				 */
				getMetaModel(): sap.ui.model.MetaModel;
				/**
				 * Returns the value for the property with the given <code>sPath</code>.
				 * If the path points to a navigation property which has been loaded via $expand then the <code>bIncludeExpandEntries</code>
				 * parameter determines if the navigation property should be included in the returned value or not.
				 * Please note that this currently works for 1..1 navigation properties only.
				 * @param sPath the path/name of the property
				 * @param oContext the context if available to access the property value(optional)
				 * @param bIncludeExpandEntries This parameter should be set when a URI or custom parameter
				 * with a $expand System Query Option was used to retrieve associated entries embedded/inline.
				 * If true then the getProperty function returns a desired property value/entry and includes the associated expand entries (if any).
				 * If false the associated/expanded entry properties are removed and not included in the
				 * desired entry as properties at all. This is useful for performing updates on the base entry only. Note: A copy and not a reference of the entry will be returned.(optional)
				 * @return the value of the property
				 */
				getProperty(sPath: string, oContext?: any, bIncludeExpandEntries?: boolean): any;
				/**
				 * Implement in inheriting classes
				 * @note Overload from base type sap.ui.model.Model
				 * @param sPath the path to where to read the attribute value
				 * @param oContext the context with which the path should be resolved(optional)
				 */
				getProperty(sPath: string, oContext?: any);
				/**
				 * Returns the current security token. If the token has not been requested from the server it will be requested first.
				 * @return the CSRF security token
				 */
				getSecurityToken(): string;
				/**
				 * Return the annotation object. Please note that when using the model with bLoadMetadataAsync = true then this function might return undefined because the
				 * metadata has not been loaded yet.
				 * In this case attach to the <code>annotationsLoaded</code> event to get notified when the annotations are available and then call this function.
				 * @return metdata object
				 */
				getServiceAnnotations(): any;
				/**
				 * Return the metadata object. Please note that when using the model with bLoadMetadataAsync = true then this function might return undefined because the
				 * metadata has not been loaded yet.
				 * In this case attach to the <code>metadataLoaded</code> event to get notified when the metadata is available and then call this function.
				 * @return metdata object
				 */
				getServiceMetadata(): any;
				/**
				 * Checks if there exist pending changes in the model created by the setProperty method.
				 * @return true/false
				 */
				hasPendingChanges(): boolean;
				/**
				 * Returns whether this model supports the $count on its collections
				 * This method is deprecated, please use getDefaultCountMode instead.
				 * @deprecated 
				 * @return 
				 */
				isCountSupported(): boolean;
				/**
				 * Trigger a GET request to the odata service that was specified in the model constructor.
				 * The data will not be stored in the model. The requested data is returned with the response.
				 * @param sPath A string containing the path to the data which should
				 * 		be retrieved. The path is concatenated to the sServiceUrl
				 * 		which was specified in the model constructor.
				 * @param mParameters Optional parameter map containing any of the following properties:(optional)
				 * @return an object which has an <code>abort</code> function to abort the current request.
				 */
				read(sPath: string, mParameters?: any): any;
				/**
				 * Refresh the model.
				 * This will check all bindings for updated data and update the controls if data has been changed.
				 * @param bForceUpdate Force update of controls(optional)
				 * @param bRemoveData If set to true then the model data will be removed/cleared.
				 * 					Please note that the data might not be there when calling e.g. getProperty too early before the refresh call returned.(optional)
				 */
				refresh(bForceUpdate?: boolean, bRemoveData?: boolean);
				/**
				 * Refresh the model.
				 * This will check all bindings for updated data and update the controls if data has been changed.
				 * @note Overload from base type sap.ui.model.Model
				 * @param bForceUpdate Update controls even if data has not been changed
				 */
				refresh(bForceUpdate: boolean);
				/**
				 * refreshes the metadata for model, e.g. in case the first request for metadata has failed
				 */
				refreshMetadata();
				/**
				 * refresh XSRF token by performing a GET request against the service root URL.
				 * @param fnSuccess a callback function which is called when the data has
				 *            					 been successfully retrieved.(optional)
				 * @param fnError a callback function which is called when the request failed. The handler can have the parameter: oError which contains
				 *  additional error information.(optional)
				 * @param bAsync true for asynchronous requests.(optional)
				 * @return an object which has an <code>abort</code> function to abort the current request.
				 */
				refreshSecurityToken(fnSuccess?: any, fnError?: any, bAsync?: boolean): any;
				/**
				 * Trigger a DELETE request to the odata service that was specified in the model constructor.
				 * @param sPath A string containing the path to the data that should be removed.
				 * 		The path is concatenated to the sServiceUrl which was specified in the model constructor.
				 * @param mParameters Optional, can contain the following attributes: oContext, fnSuccess, fnError, sETag:(optional)
				 * @return an object which has an <code>abort</code> function to abort the current request.
				 */
				remove(sPath: string, mParameters?: any): any;
				/**
				 * 
				 * Resets the collected changes by the setProperty method and reloads the data from the server.
				 * @param fnSuccess a callback function which is called when the data has
				 *            					 been successfully resetted. The handler can have the
				 *            	                 following parameters: oData and response.(optional)
				 * @param fnError a callback function which is called when the request failed(optional)
				 */
				resetChanges(fnSuccess?: any, fnError?: any);
				/**
				 * Sets whether this OData service supports $count on its collections.
				 * This method is deprecated, please use setDefaultCountMode instead.
				 * @param bCountSupported 
				 * @deprecated 
				 */
				setCountSupported(bCountSupported: boolean);
				/**
				 * Sets the default way to retrieve the count of collections in this model.
				 * Count can be determined either by sending a separate $count request, including
				 * $inlinecount=allpages in data requests, both of them or not at all.
				 * @param sCountMode 
				 */
				setDefaultCountMode(sCountMode: CountMode);
				/**
				 * Set custom headers which are provided in a key/value map. These headers are used for requests against the OData backend.
				 * Private headers which are set in the ODataModel cannot be modified.
				 * These private headers are: accept, accept-language, x-csrf-token, MaxDataServiceVersion, DataServiceVersion.
				 * 
				 * To remove these headers simply set the mCustomHeaders parameter to null. Please also note that when calling this method again all previous custom headers
				 * are removed unless they are specified again in the mCustomHeaders parameter.
				 * @param mHeaders the header name/value map.
				 */
				setHeaders(mHeaders: any);
				/**
				 * Sets a new value for the given property <code>sPropertyName</code> in the model without triggering a server request.
				 *  This can be done by the submitChanges method.
				 * 
				 *  Note: Only one entry of one collection can be updated at once. Otherwise a fireRejectChange event is fired.
				 * 
				 *  Before updating a different entry the existing changes of the current entry have to be submitted or resetted by the
				 *  corresponding methods: submitChanges, resetChanges.
				 * 
				 *  IMPORTANT: All pending changes are resetted in the model if the application triggeres any kind of refresh
				 *  on that entry. Make sure to submit the pending changes first. To determine if there are any pending changes call the hasPendingChanges method.
				 * @param sPath path of the property to set
				 * @param oValue value to set the property to
				 * @param oContext the context which will be used to set the property(optional)
				 * @param bAsyncUpdate whether to update other bindings dependent on this property asynchronously(optional)
				 * @return true if the value was set correctly and false if errors occurred like the entry was not found or another entry was already updated.
				 */
				setProperty(sPath: string, oValue: any, oContext?: any, bAsyncUpdate?: boolean): boolean;
				/**
				 * Enable/Disable automatic updates of all Bindings after change operations
				 * @param bRefreshAfterChange 
				 */
				setRefreshAfterChange(bRefreshAfterChange: boolean);
				/**
				 * Enable/Disable XCSRF-Token handling
				 * @param bTokenHandling whether to use token handling or not(optional)
				 */
				setTokenHandlingEnabled(bTokenHandling?: boolean);
				/**
				 * Enable/Disable batch for all requests
				 * @param bUseBatch whether the requests should be encapsulated in a batch request(optional)
				 */
				setUseBatch(bUseBatch?: boolean);
				/**
				 * Submits the collected changes in the batch which were collected via <code>addBatchReadOperations</code> or <code>addBatchChangeOperations</code>.
				 * The batch will be cleared afterwards. If the batch is empty no request will be performed and false will be returned.
				 * Note: No data will be stored in the model.
				 * @param fnSuccess a callback function which is called when the batch request has
				 *            					 been successfully sent. Note: There might have errors occured in the single batch operations. These errors can be accessed in the
				 *            aErrorResponses parameter in the callback handler.
				 *            The handler can have the
				 *            	                 following parameters: oData, oResponse and aErrorResponses.
				 * @param fnError a callback function which is called when the batch request failed. The handler can have the parameter: oError which contains
				 * additional error information.
				 * @param bAsync true for asynchronous request. Default is true.
				 * @param bImportData 
				 * @return an object which has an <code>abort</code> function to abort the current request. Returns false if no request will be performed because the batch is empty.
				 */
				submitBatch(fnSuccess: any, fnError: any, bAsync: boolean, bImportData: boolean): any;
				/**
				 * Submits the collected changes which were collected by the setProperty method. A MERGE request will be triggered to only update the changed properties.
				 * If a URI with a $expand System Query Option was used then the expand entries will be removed from the collected changes.
				 * Changes to this entries should be done on the entry itself. So no deep updates are supported.
				 * @param fnSuccess a callback function which is called when the data has
				 *            					 been successfully updated. The handler can have the
				 *            	                 following parameters: oData and response.(optional)
				 * @param fnError a callback function which is called when the request failed. The handler can have the parameter: oError which contains
				 * additional error information(optional)
				 * @param oParameters optional parameter for additional information introduced in SAPUI5 1.9.1(optional)
				 * @return an object which has an <code>abort</code> function to abort the current request.
				 */
				submitChanges(fnSuccess?: any, fnError?: any, oParameters?: any): any;
				/**
				 * Trigger a PUT/MERGE request to the odata service that was specified in the model constructor. Please note that deep updates are not supported
				 * and may not work. These should be done seperate on the entry directly.
				 * @param sPath A string containing the path to the data that should be updated.
				 * 		The path is concatenated to the sServiceUrl which was specified
				 * 		in the model constructor.
				 * @param oData data of the entry that should be updated.
				 * @param mParameters Optional, can contain the following attributes:(optional)
				 * @return an object which has an <code>abort</code> function to abort the current request.
				 */
				update(sPath: string, oData: any, mParameters?: any): any;
				/**
				 * update all bindings
				 * @param bForceUpdate If set to false an update  will only be done when the value of a binding changed.(optional)
				 */
				updateBindings(bForceUpdate?: boolean);
			}
		
			class ODataPropertyBinding extends sap.ui.model.PropertyBinding {
				/**
				 * 
				 * @param oModel 
				 * @param sPath 
				 * @param oContext 
				 * @param mParameters (optional)
				 */
				constructor(oModel: sap.ui.model.Model, sPath: string, oContext: sap.ui.model.Context, mParameters?: any);
				/**
				 * Creates a new subclass of class sap.ui.model.odata.ODataPropertyBinding with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.PropertyBinding.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Returns the current value of the bound target
				 * @return the current value of the bound target
				 */
				getValue(): any;
				/**
				 * Initialize the binding. The message should be called when creating a binding.
				 * If metadata is not yet available, do nothing, method will be called again when
				 * metadata is loaded.
				 */
				initialize();
			}
		
			class ODataUtils {
			}
			/**
			 * Adapter for TreeBindings to add the ListBinding functionality and use the
			 * tree structure in list based controls.
			 */
			function ODataTreeBindingAdapter();
			/**
			 * Adapter for TreeBindings to add the ListBinding functionality and use the
			 * tree structure in list based controls.
			 */
			function ODataTreeBindingFlat();
		}
	
		/**
		 * ResourceBundle-based DataBinding
		 */
		namespace resource {
		
			class ResourceModel extends sap.ui.model.Model {
				/**
				 * Constructor for a new ResourceModel.
				 * @param oData parameters used to initialize the ResourceModel; at least either bundleUrl or bundleName must be set on this object; if both are set, bundleName wins
				 */
				constructor(oData: any);
				/**
				 * Enhances the resource model with a custom resource bundle. The resource model
				 * can be enhanced with multiple resource bundles. The last enhanced resource
				 * bundle wins against the previous ones and the original ones. This function
				 * can be called several times.
				 * @param oData parameters used to initialize the ResourceModel; at least either bundleUrl or bundleName must be set on this object; if both are set, bundleName wins - or an instance of an existing {@link jQuery.sap.util.ResourceBundle}
				 * @return Promise in async case (async ResourceModel) which is resolved when the the enhancement is finished
				 */
				enhance(oData: any|jQuery.sap.util.ResourceBundle): any;
				/**
				 * Creates a new subclass of class sap.ui.model.resource.ResourceModel with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Returns the value for the property with the given <code>sPropertyName</code>
				 * @param sPath the path to the property
				 * @return the value of the property
				 */
				getProperty(sPath: string): string;
				/**
				 * Implement in inheriting classes
				 * @note Overload from base type sap.ui.model.Model
				 * @param sPath the path to where to read the attribute value
				 * @param oContext the context with which the path should be resolved(optional)
				 */
				getProperty(sPath: string, oContext?: any);
				/**
				 * Returns the resource bundle of this model
				 * @return loaded resource bundle or ECMA Script 6 Promise in asynchronous case
				 */
				getResourceBundle(): jQuery.sap.util.ResourceBundle|any;
			}
		}
	
		/**
		 * XML-based DataBinding
		 */
		namespace xml {
		
			class XMLModel extends sap.ui.model.ClientModel {
				/**
				 * Constructor for a new XMLModel.
				 * @param oData either the URL where to load the XML from or a XML
				 */
				constructor(oData: any);
				/**
				 * Creates a new subclass of class sap.ui.model.xml.XMLModel with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.ClientModel.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Returns the object for the given <code>path</code>
				 * @param sPath the path to the object
				 * @param oContext the context which will be used to retrieve the object(optional)
				 * @return the object
				 */
				getObject(sPath: string, oContext?: any): any;
				/**
				 * Implement in inheriting classes
				 * @note Overload from base type sap.ui.model.Model
				 * @param sPath the path to where to read the object
				 * @param oContext the context with which the path should be resolved(optional)
				 */
				getObject(sPath: string, oContext?: any);
				/**
				 * Returns the value for the property with the given <code>sPropertyName</code>
				 * @param sPath the path to the property
				 * @param oContext the context which will be used to retrieve the property(optional)
				 * @return the value of the property
				 */
				getProperty(sPath: string, oContext?: any): any;
				/**
				 * Implement in inheriting classes
				 * @note Overload from base type sap.ui.model.Model
				 * @param sPath the path to where to read the attribute value
				 * @param oContext the context with which the path should be resolved(optional)
				 */
				getProperty(sPath: string, oContext?: any);
				/**
				 * Serializes the current XML data of the model into a string.
				 * @return the XML document serialized as string
				 */
				getXML();
				/**
				 * Load XML-encoded data from the server using a GET HTTP request and store the resulting XML data in the model.
				 * Note: Due to browser security restrictions, most "Ajax" requests are subject to the same origin policy,
				 * the request can not successfully retrieve data from a different domain, subdomain, or protocol.
				 * @param sURL A string containing the URL to which the request is sent.
				 * @param oParameters A map or string that is sent to the server with the request.
				 * @param bAsync if the request should be asynchron or not. Default is true.
				 * @param sType of request. Default is 'GET'
				 * @param bCache force no caching if false. Default is false
				 * @param mHeaders An object of additional header key/value pairs to send along with the request
				 */
				loadData(sURL: string, oParameters: any|string, bAsync: boolean, sType: string, bCache: string, mHeaders: any);
				/**
				 * Sets the provided XML encoded data object to the model
				 * @param oData the data to set to the model
				 */
				setData(oData: any);
				/**
				 * Sets an XML namespace to use in the binding path
				 * @param sNameSpace the namespace URI
				 * @param sPrefix the prefix for the namespace (optional)(optional)
				 */
				setNameSpace(sNameSpace: string, sPrefix?: string);
				/**
				 * Sets a new value for the given property <code>sPropertyName</code> in the model.
				 * If the model value changed all interested parties are informed.
				 * @param sPath path of the property to set
				 * @param oValue value to set the property to
				 * @param oContext the context which will be used to set the property(optional)
				 * @param bAsyncUpdate whether to update other bindings dependent on this property asynchronously(optional)
				 * @return true if the value was set correctly and false if errors occurred like the entry was not found.
				 */
				setProperty(sPath: string, oValue: any, oContext?: any, bAsyncUpdate?: boolean): boolean;
				/**
				 * Sets the specified XML formatted string text to the model
				 * @param sXMLText the XML data as string
				 */
				setXML(sXMLText: string);
			}
		}
	
		class Binding extends sap.ui.base.EventProvider {
			/**
			 * Constructor for Binding class.
			 * @param oModel the model
			 * @param sPath the path
			 * @param oContext the context object
			 * @param mParameters (optional)
			 */
			constructor(oModel: sap.ui.model.Model, sPath: string, oContext: sap.ui.model.Context, mParameters?: any);
			/**
			 * Attach event-handler <code>fnFunction</code> to the 'AggregatedDataStateChange' event of this <code>sap.ui.model.Binding</code>.<br/>
			 * @param fnFunction The function to call, when the event occurs.
			 * @param oListener object on which to call the given function.(optional)
			 */
			attachAggregatedDataStateChange(fnFunction: any, oListener?: any);
			/**
			 * Attach event-handler <code>fnFunction</code> to the 'change' event of this <code>sap.ui.model.Model</code>.<br/>
			 * @param fnFunction The function to call, when the event occurs.
			 * @param oListener object on which to call the given function.(optional)
			 */
			attachChange(fnFunction: any, oListener?: any);
			/**
			 * Attach event-handler <code>fnFunction</code> to the 'dataReceived' event of this <code>sap.ui.model.Binding</code>.<br/>
			 * @param fnFunction The function to call, when the event occurs.
			 * @param oListener object on which to call the given function.(optional)
			 */
			attachDataReceived(fnFunction: any, oListener?: any);
			/**
			 * Attach event-handler <code>fnFunction</code> to the 'dataRequested' event of this <code>sap.ui.model.Binding</code>.<br/>
			 * @param fnFunction The function to call, when the event occurs.
			 * @param oListener object on which to call the given function.(optional)
			 */
			attachDataRequested(fnFunction: any, oListener?: any);
			/**
			 * Attach event-handler <code>fnFunction</code> to the 'DataStateChange' event of this <code>sap.ui.model.Binding</code>.<br/>
			 * @param fnFunction The function to call, when the event occurs.
			 * @param oListener object on which to call the given function.(optional)
			 */
			attachDataStateChange(fnFunction: any, oListener?: any);
			/**
			 * Attach multiple events.
			 * @param oEvents 
			 */
			attachEvents(oEvents: any);
			/**
			 * Attach event-handler <code>fnFunction</code> to the 'refresh' event of this <code>sap.ui.model.Binding</code>.<br/>
			 * @param fnFunction The function to call, when the event occurs.
			 * @param oListener object on which to call the given function.(optional)
			 */
			attachRefresh(fnFunction: any, oListener?: any);
			/**
			 * Removes all control messages for this binding from the MessageManager in addition to the standard clean-up tasks.
			 */
			destroy();
			/**
			 * Detach event-handler <code>fnFunction</code> from the 'AggregatedDataStateChange' event of this <code>sap.ui.model.Binding</code>.<br/>
			 * @param fnFunction The function to call, when the event occurs.
			 * @param oListener object on which to call the given function.(optional)
			 */
			detachAggregatedDataStateChange(fnFunction: any, oListener?: any);
			/**
			 * Detach event-handler <code>fnFunction</code> from the 'change' event of this <code>sap.ui.model.Model</code>.<br/>
			 * @param fnFunction The function to call, when the event occurs.
			 * @param oListener object on which to call the given function.(optional)
			 */
			detachChange(fnFunction: any, oListener?: any);
			/**
			 * Detach event-handler <code>fnFunction</code> from the 'dataReceived' event of this <code>sap.ui.model.Binding</code>.<br/>
			 * @param fnFunction The function to call, when the event occurs.
			 * @param oListener object on which to call the given function.(optional)
			 */
			detachDataReceived(fnFunction: any, oListener?: any);
			/**
			 * Detach event-handler <code>fnFunction</code> from the 'dataRequested' event of this <code>sap.ui.model.Binding</code>.<br/>
			 * @param fnFunction The function to call, when the event occurs.
			 * @param oListener object on which to call the given function.(optional)
			 */
			detachDataRequested(fnFunction: any, oListener?: any);
			/**
			 * Detach event-handler <code>fnFunction</code> from the 'DataStateChange' event of this <code>sap.ui.model.Binding</code>.<br/>
			 * @param fnFunction The function to call, when the event occurs.
			 * @param oListener object on which to call the given function.(optional)
			 */
			detachDataStateChange(fnFunction: any, oListener?: any);
			/**
			 * Detach multiple events-
			 * @param oEvents 
			 */
			detachEvents(oEvents: any);
			/**
			 * Detach event-handler <code>fnFunction</code> from the 'refresh' event of this <code>sap.ui.model.Binding</code>.<br/>
			 * @param fnFunction The function to call, when the event occurs.
			 * @param oListener object on which to call the given function.(optional)
			 */
			detachRefresh(fnFunction: any, oListener?: any);
			/**
			 * Creates a new subclass of class sap.ui.model.Binding with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Fire event dataReceived to attached listeners. This event may also be fired when an error occured.
			 * @param mArguments the arguments to pass along with the event.
			 */
			fireDataReceived(mArguments: any);
			/**
			 * Fire event dataRequested to attached listeners.
			 * @param mArguments the arguments to pass along with the event.
			 */
			fireDataRequested(mArguments: any);
			/**
			 * Initialize the binding. The message should be called when creating a binding.
			 * The default implementation calls checkUpdate(true).
			 */
			initialize();
			/**
			 * Returns whether the binding is initial, which means it did not get an initial value yet
			 * @return whether binding is initial
			 */
			isInitial(): boolean;
			/**
			 * Returns whether the binding is relative, which means it did not start with a /
			 * @return whether binding is relative
			 */
			isRelative(): boolean;
			/**
			 * Returns true if the binding is suspended or false if not.
			 * @return whether binding is suspended
			 */
			isSuspended(): boolean;
			/**
			 * Refreshes the binding, check whether the model data has been changed and fire change event
			 * if this is the case. For server side models this should refetch the data from the server.
			 * To update a control, even if no data has been changed, e.g. to reset a control after failed
			 * validation, please use the parameter bForceUpdate.
			 * @param bForceUpdate Update the bound control even if no data has been changed
			 */
			refresh(bForceUpdate: boolean);
			/**
			 * Resumes the binding update. Change events will be fired again.
			 * 
			 * When the binding is resumed, a change event will be fired immediately, if the data has changed while the binding
			 * was suspended. For serverside models, a request to the server will be triggered, if a refresh was requested
			 * while the binding was suspended.
			 */
			resume();
			/**
			 * Suspends the binding update. No change events will be fired.
			 * 
			 * A refresh call with bForceUpdate set to true will also update the binding and fire a change in suspended mode.
			 * Special operations on bindings, which require updates to work properly (as paging or filtering in list bindings)
			 * will also update and cause a change event although the binding is suspended.
			 */
			suspend();
			/**
			 * Determines if the binding should be updated by comparing the current model against a specified model.
			 * @param oModel The model instance to compare against
			 * @return true if this binding should be updated
			 */
			updateRequired(oModel: any): boolean;
		}
	
		class BindingMode {
			/**
			 * BindingMode default means that the binding mode of the model is used
			 */
			static Default: any;
			/**
			 * BindingMode one time means value is only read from the model once
			 */
			static OneTime: any;
			/**
			 * BindingMode one way means from model to view
			 */
			static OneWay: any;
			/**
			 * BindingMode two way means from model to view and vice versa
			 */
			static TwoWay: any;
		}
	
		class ClientContextBinding extends ContextBinding {
			/**
			 * Constructor for ClientContextBinding
			 * @param oModel 
			 * @param sPath 
			 * @param oContext 
			 * @param mParameters (optional)
			 */
			constructor(oModel: sap.ui.model.Model, sPath: string, oContext: any, mParameters?: any);
			/**
			 * Creates a new subclass of class sap.ui.model.ClientContextBinding with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.ContextBinding.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		}
	
		class ClientModel extends Model {
			/**
			 * Constructor for a new ClientModel.
			 * @param oData URL where to load the data from
			 */
			constructor(oData: any);
			/**
			 * 
			 */
			destroy();
			/**
			 * Creates a new subclass of class sap.ui.model.ClientModel with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Force no caching.
			 * @param bForceNoCache whether to force not to cache(optional)
			 */
			forceNoCache(bForceNoCache?: boolean);
			/**
			 * Returns the current data of the model.
			 * Be aware that the returned object is a reference to the model data so all changes to that data will also change the model data.
			 * @return the data object
			 */
			getData();
			/**
			 * update all bindings
			 * @param bForceUpdate true/false: Default = false. If set to false an update
			 * 					will only be done when the value of a binding changed.
			 */
			updateBindings(bForceUpdate: boolean);
		}
	
		class ClientTreeBindingAdapter  {
		}
	
		class CompositeBinding extends PropertyBinding {
			/**
			 * Constructor for CompositeBinding
			 */
			constructor();
			/**
			 * Attach event-handler <code>fnFunction</code> to the 'AggregatedDataStateChange' event of this
			 * <code>sap.ui.model.CompositeBinding</code>. The CombinedDataStateChange event is fired asynchronously, meaning
			 * that the datastate object given as parameter of the event contains all changes that were applied to the datastate
			 * in the running thread.
			 * @param fnFunction The function to call, when the event occurs.
			 * @param oListener object on which to call the given function.(optional)
			 */
			attachAggregatedDataStateChange(fnFunction: any, oListener?: any);
			/**
			 * Attach event-handler <code>fnFunction</code> to the '_change' event of this <code>sap.ui.model.CompositeBinding</code>.<br/>
			 * @param fnFunction The function to call, when the event occurs.
			 * @param oListener object on which to call the given function.(optional)
			 */
			attachChange(fnFunction: any, oListener?: any);
			/**
			 * Attach event-handler <code>fnFunction</code> to the 'DataStateChange' event of this <code>sap.ui.model.CompositeBinding</code>.<br/>
			 * @param fnFunction The function to call, when the event occurs.
			 * @param oListener object on which to call the given function.(optional)
			 */
			attachDataStateChange(fnFunction: any, oListener?: any);
			/**
			 * Detach event-handler <code>fnFunction</code> from the 'AggregatedDataStateChange' event of this <code>sap.ui.model.CompositeBinding</code>.<br/>
			 * @param fnFunction The function to call, when the event occurs.
			 * @param oListener object on which to call the given function.(optional)
			 */
			detachAggregatedDataStateChange(fnFunction: any, oListener?: any);
			/**
			 * Detach event-handler <code>fnFunction</code> from the '_change' event of this <code>sap.ui.model.CompositeBinding</code>.<br/>
			 * @param fnFunction The function to call, when the event occurs.
			 * @param oListener object on which to call the given function.(optional)
			 */
			detachChange(fnFunction: any, oListener?: any);
			/**
			 * Detach event-handler <code>fnFunction</code> from the 'DataStateChange' event of this <code>sap.ui.model.CompositeBinding</code>.<br/>
			 * @param fnFunction The function to call, when the event occurs.
			 * @param oListener object on which to call the given function.(optional)
			 */
			detachDataStateChange(fnFunction: any, oListener?: any);
			/**
			 * Creates a new subclass of class sap.ui.model.CompositeBinding with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.PropertyBinding.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Returns the property bindings contained in this composite binding.
			 * @return the property bindings in this composite binding
			 */
			getBindings(): any[];
			/**
			 * Returns the current external value of the bound target which is formatted via a type or formatter function.
			 * @return the current value of the bound target
			 */
			getExternalValue(): any;
			/**
			 * Returns the raw values of the property bindings in an array.
			 * @return the values of the internal property bindings in an array
			 */
			getValue(): any;
			/**
			 * Initialize the binding. The message should be called when creating a binding.
			 * The default implementation calls checkUpdate(true).
			 * Prevent checkUpdate to be triggered while initializing nestend bindings, it is
			 * sufficient to call checkUpdate when all nested bindings are initialized.
			 */
			initialize();
			/**
			 * Suspends the binding update. No change events will be fired.
			 * 
			 * A refresh call with bForceUpdate set to true will also update the binding and fire a change in suspended mode.
			 * Special operations on bindings, which require updates to work properly (as paging or filtering in list bindings)
			 * will also update and cause a change event although the binding is suspended.
			 */
			resume();
			/**
			 * Sets the external value of a composite binding. If no CompositeType is assigned to the binding, the default
			 * implementation assumes a space separated list of values. This will cause the setValue to be called for each
			 * nested binding, except for undefined values in the array.
			 * @param oValue the value to set for this binding
			 */
			setExternalValue(oValue: any);
			/**
			 * Sets the optional type and internal type for the binding. The type and internal type are used to do the parsing/formatting correctly.
			 * The internal type is the property type of the element which the value is formatted to.
			 * @param oType the type for the binding
			 * @param sInternalType the internal type of the element property which this binding is bound against.
			 */
			setType(oType: CompositeType, sInternalType: string);
			/**
			 * Sets the optional type and internal type for the binding. The type and internal type are used to do the parsing/formatting correctly.
			 * The internal type is the property type of the element which the value is formatted to.
			 * @note Overload from base type sap.ui.model.PropertyBinding
			 * @param oType the type for the binding
			 * @param sInternalType the internal type of the element property which this binding is bound against.
			 */
			setType(oType: Type, sInternalType: string);
			/**
			 * Sets the values. This will cause the setValue to be called for each nested binding, except
			 * for undefined values in the array.
			 * @param aValues the values to set for this binding
			 */
			setValue(aValues: any[]);
			/**
			 * Sets the value for this binding. A model implementation should check if the current default binding mode permits
			 * setting the binding value and if so set the new value also in the model.
			 * @note Overload from base type sap.ui.model.PropertyBinding
			 * @param oValue the value to set for this binding
			 */
			setValue(oValue: any);
			/**
			 * Suspends the binding update. No change events will be fired.
			 * 
			 * A refresh call with bForceUpdate set to true will also update the binding and fire a change in suspended mode.
			 * Special operations on bindings, which require updates to work properly (as paging or filtering in list bindings)
			 * will also update and cause a change event although the binding is suspended.
			 */
			suspend();
			/**
			 * Determines if the property bindings in the composite binding should be updated by calling updateRequired on all property bindings with the specified model.
			 * @param oModel The model instance to compare against
			 * @return true if this binding should be updated
			 */
			updateRequired(oModel: any): boolean;
		}
	
		class CompositeDataState extends DataState {
			/**
			 * 
			 */
			constructor();
			/**
			 * Returns or sets whether the data state is changed.
			 * As long as changed was not set to false the data state is dirty
			 * and the corresponding binding will fire data state change events.
			 * @param bNewState the optional new state(optional)
			 * @return whether the data state was changed.
			 */
			changed(bNewState?: boolean): boolean;
			/**
			 * Creates a new subclass of class sap.ui.model.CompositeDataState with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.DataState.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Returns the changes of the data state in a map that the control can use in the
			 * <code>refreshDataState</code> method.
			 * The changed property's name is the key in the map. Each element in the map contains an object of below structure.
			 * <pre>
			 *    {
			 *        oldValue : The old value of the property,
			 *        value    : The new value of the property
			 *    }
			 * </pre>
			 * The map only contains the changed properties.
			 * @return the changed of the data state
			 */
			getChanges(): any;
			/**
			 * Sets an array of control state messages.
			 * @param the control messages
			 * @return <code>this</code> to allow method chaining
			 */
			getControlMessages(the: sap.ui.core.Message[]): DataState;
			/**
			 * Returns the array of state messages of the control or undefined.
			 * @note Overload from base type sap.ui.model.DataState
			 * @return the array of messages of the control or null if no {link:sap.ui.core.messages.ModelManager ModelManager} is used.
			 */
			getControlMessages(): sap.ui.core.Message[];
			/**
			 * Returns an array of the properties set on the inner datastates
			 */
			getInternalProperty();
			/**
			 * Returns the dirty value of a binding that was rejected by a type validation.
			 * This value was of an incorrect type and could not be applied to the model. If the
			 * value was not rejected it will return null. In this case the current
			 * model value can be accessed using the <code>getValue</code> method.
			 * @return the value that was rejected or null
			 */
			getInvalidValue(): any;
			/**
			 * Returns the array of all state messages or null.
			 * This combines the model and control messages.
			 * @return the array of all messages or null if no {link:sap.ui.core.messages.ModelManager ModelManager} is used.
			 */
			getMessages(): sap.ui.core.Message[];
			/**
			 * Returns the array of state messages of the model or undefined
			 * @return the array of messages of the model or null if no {link:sap.ui.core.messages.ModelManager ModelManager} is used.
			 */
			getModelMessages(): sap.ui.core.Message[];
			/**
			 * Returns whether the data state is dirty in the UI control.
			 * A data state is dirty in the UI control if the entered value did not yet pass the type validation.
			 * @return true if the data state is dirty
			 */
			isControlDirty(): boolean;
			/**
			 * Returns whether the data state is dirty.
			 * A data state is dirty if the value was changed
			 * but is not yet confirmed by a server or the entered value did not yet pass the type validation.
			 * @return true if the data state is dirty
			 */
			isDirty(): boolean;
			/**
			 * Returns whether the data state is in laundering.
			 * If data is send to the server the data state becomes laundering until the
			 * data was accepted or rejected.
			 * @return true if the data is laundering
			 */
			isLaundering(): boolean;
		}
	
		class CompositeType extends SimpleType {
			/**
			 * Constructor for a new CompositeType.
			 * @param oFormatOptions options as provided by concrete subclasses(optional)
			 * @param oConstraints constraints as supported by concrete subclasses(optional)
			 */
			constructor(oFormatOptions?: any, oConstraints?: any);
			/**
			 * Creates a new subclass of class sap.ui.model.CompositeType with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Format the given set of values in model representation to an output value in the given
			 * internal type. This happens according to the format options, if target type is 'string'.
			 * If aValues is not defined or null, null will be returned.
			 * @param aValues the values to be formatted
			 * @param sInternalType the target type
			 * @return the formatted output value
			 */
			formatValue(aValues: any[], sInternalType: string): any;
			/**
			 * Format the given value in model representation to an output value in the given
			 * internal type. This happens according to the format options, if target type is 'string'.
			 * If oValue is not defined or null, null will be returned.
			 * @note Overload from base type sap.ui.model.SimpleType
			 * @param oValue the value to be formatted
			 * @param sInternalType the target type
			 * @return the formatted output value
			 */
			formatValue(oValue: any, sInternalType: string): any;
			/**
			 * Parse a value of an internal type to the expected set of values of the model type.
			 * @param oValue the value to be parsed
			 * @param sInternalType the source type
			 * @param aCurrentValues the current values of all binding parts
			 * @return the parse result array
			 */
			parseValue(oValue: any, sInternalType: string, aCurrentValues: any[]): any[];
			/**
			 * Parse a value of an internal type to the expected value of the model type.
			 * @note Overload from base type sap.ui.model.SimpleType
			 * @param oValue the value to be parsed
			 * @param sInternalType the source type
			 * @return the parse result
			 */
			parseValue(oValue: any, sInternalType: string): any;
			/**
			 * Validate whether a given value in model representation is valid and meets the
			 * defined constraints (if any).
			 * @param aValues the set of values to be validated
			 */
			validateValue(aValues: any[]);
			/**
			 * Validate whether a given value in model representation is valid and meets the
			 * defined constraints (if any).
			 * @note Overload from base type sap.ui.model.SimpleType
			 * @param oValue the value to be validated
			 */
			validateValue(oValue: any);
		}
	
		class Context extends sap.ui.base.Object {
			/**
			 * Constructor for Context class.
			 * @param oModel the model
			 * @param sPath the path
			 * @param oContext the context object
			 */
			constructor(oModel: sap.ui.model.Model, sPath: string, oContext: any);
			/**
			 * Creates a new subclass of class sap.ui.model.Context with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Getter for model
			 * @return the model
			 */
			getModel(): Model;
			/**
			 * Gets the (model dependent) object the context points to or the object with the given relative binding path
			 * @param sPath the binding path
			 * @return the context object
			 */
			getObject(sPath: string): any;
			/**
			 * Getter for path of the context itself or a subpath
			 * @param sPath the binding path
			 * @return the binding path
			 */
			getPath(sPath: string): string;
			/**
			 * Gets the property with the given relative binding path
			 * @param sPath the binding path
			 * @return the property value
			 */
			getProperty(sPath: string): any;
		}
	
		class ContextBinding extends Binding {
			/**
			 * Constructor for ContextBinding
			 * @param oModel 
			 * @param sPath 
			 * @param oContext 
			 * @param mParameters (optional)
			 * @param oEvents object defining event handlers(optional)
			 */
			constructor(oModel: sap.ui.model.Model, sPath: string, oContext: any, mParameters?: any, oEvents?: any);
			/**
			 * Creates a new subclass of class sap.ui.model.ContextBinding with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Binding.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		}
	
		class DataState extends sap.ui.base.Object {
			/**
			 * 
			 */
			constructor();
			/**
			 * Returns or sets whether the data state is changed.
			 * As long as changed was not set to false the data state is dirty
			 * and the corresponding binding will fire data state change events.
			 * @param bNewState the optional new state(optional)
			 * @return whether the data state was changed.
			 */
			changed(bNewState?: boolean): boolean;
			/**
			 * Creates a new subclass of class sap.ui.model.DataState with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Returns the changes of the data state in a map that the control can use in the
			 * <code>refreshDataState</code> method.
			 * The changed property's name is the key in the map. Each element in the map contains an object of below structure.
			 * <pre>
			 *    {
			 *        oldValue : The old value of the property,
			 *        value    : The new value of the property
			 *    }
			 * </pre>
			 * The map only contains the changed properties.
			 * @return the changed of the data state
			 */
			getChanges(): any;
			/**
			 * Returns the array of state messages of the control or undefined.
			 * @return the array of messages of the control or null if no {link:sap.ui.core.messages.ModelManager ModelManager} is used.
			 */
			getControlMessages(): sap.ui.core.Message[];
			/**
			 * Returns the dirty value of a binding that was rejected by a type validation.
			 * This value was of an incorrect type and could not be applied to the model. If the
			 * value was not rejected it will return null. In this case the current
			 * model value can be accessed using the <code>getValue</code> method.
			 * @return the value that was rejected or null
			 */
			getInvalidValue(): any;
			/**
			 * Returns the array of all state messages or null.
			 * This combines the model and control messages.
			 * @return the array of all messages or null if no {link:sap.ui.core.messages.ModelManager ModelManager} is used.
			 */
			getMessages(): sap.ui.core.Message[];
			/**
			 * Returns the array of state messages of the model or undefined
			 * @return the array of messages of the model or null if no {link:sap.ui.core.messages.ModelManager ModelManager} is used.
			 */
			getModelMessages(): sap.ui.core.Message[];
			/**
			 * Returns the formatted original value of the data.
			 * The original value is the last confirmed value.
			 * @return the original confirmed value of the server
			 */
			getOriginalValue(): any;
			/**
			 * Returns the formatted value of the data state.
			 * @return The value of the data.
			 */
			getValue(): any;
			/**
			 * Returns whether the data state is dirty in the UI control.
			 * A data state is dirty in the UI control if the entered value did not yet pass the type validation.
			 * @return true if the data state is dirty
			 */
			isControlDirty(): boolean;
			/**
			 * Returns whether the data state is dirty.
			 * A data state is dirty if the value was changed
			 * but is not yet confirmed by a server or the entered value did not yet pass the type validation.
			 * @return true if the data state is dirty
			 */
			isDirty(): boolean;
			/**
			 * Returns whether the data state is in laundering.
			 * If data is send to the server the data state becomes laundering until the
			 * data was accepted or rejected.
			 * @return true if the data is laundering
			 */
			isLaundering(): boolean;
			/**
			 * Sets an array of control state messages.
			 * @param the control messages
			 * @return <code>this</code> to allow method chaining
			 */
			setControlMessages(the: sap.ui.core.Message[]): DataState;
			/**
			 * Sets the dirty value that was rejected by the type validation.
			 * @param vInvalidValue the value that was rejected by the type validation or null if the value was valid
			 * @return <code>this</code> to allow method chaining
			 */
			setInvalidValue(vInvalidValue: any): DataState;
			/**
			 * Sets the laundering state of the data state.
			 * @param bLaundering true if the state is laundering
			 * @return <code>this</code> to allow method chaining
			 */
			setLaundering(bLaundering: boolean): DataState;
			/**
			 * Sets an array of model state messages.
			 * @param the model messages for this data state.
			 * @return <code>this</code> to allow method chaining
			 */
			setModelMessages(the: any[]): DataState;
			/**
			 * Sets the formatted original value of the data.
			 * @param vOriginalValue the original value
			 * @return <code>this</code> to allow method chaining
			 */
			setOriginalValue(vOriginalValue: boolean): DataState;
			/**
			 * Sets the formatted value of the data state,
			 * @param vValue the value
			 * @return <code>this</code> to allow method chaining
			 */
			setValue(vValue: any): DataState;
		}
	
		class Filter extends sap.ui.base.Object {
			/**
			 * Constructor for Filter.
			 * 
			 * You either pass a single object literal with the filter parameters or use the individual constructor arguments.
			 * No matter which variant is used, only certain combinations of parameters are supported
			 * (the following list uses the names from the object literal):
			 * <ul>
			 * <li>A <code>path</code>, <code>operator</code> and one or two values (<code>value1</code>, <code>value2</code>), depending on the operator</li>
			 * <li>A <code>path</code> and a custom filter function <code>test</code></li>
			 * <li>An array of other filters named <code>filters</code> and a Boolean flag <code>and</code> that specifies whether to combine
			 *     the filters with an AND (<code>true</code>) or an OR (<code>false</code>) operator.</li>
			 * </ul>
			 * An error will be logged to the console if an invalid combination of parameters is provided.
			 * Please note that a model implementation may not support a custom filter function, e.g. if the model does not perform client side filtering.
			 * It also depends on the model implementation if the filtering is case sensitive or not.
			 * See particular model documentation for details.
			 * @param vFilterInfo Filter info object or a path or an array of filters
			 * @param vOperator Either a filter operator or a custom filter function or a Boolean flag that defines how to combine multiple filters(optional)
			 * @param oValue1 First value to use with the given filter operator(optional)
			 * @param oValue2 Second value to use with the given filter operator (only for some operators)(optional)
			 */
			constructor(vFilterInfo: any|string|sap.ui.model.Filter[], vOperator?: sap.ui.model.FilterOperator|any|boolean, oValue1?: any, oValue2?: any);
			/**
			 * Creates a new subclass of class sap.ui.model.Filter with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		}
	
		class FilterOperator {
			/**
			 * FilterOperator between.
			 * When used on strings, the BT operator might not behave intuitively. For example,
			 * when filtering a list of Names with BT "A", "B", all Names starting with "A" will be
			 * included as well as the name "B" itself, but no other name starting with "B".
			 */
			static BT: any;
			/**
			 * FilterOperator contains
			 */
			static Contains: any;
			/**
			 * FilterOperator ends with
			 */
			static EndsWith: any;
			/**
			 * FilterOperator equals
			 */
			static EQ: any;
			/**
			 * FilterOperator greater or equals
			 */
			static GE: any;
			/**
			 * FilterOperator greater than
			 */
			static GT: any;
			/**
			 * FilterOperator less or equals
			 */
			static LE: any;
			/**
			 * FilterOperator less than
			 */
			static LT: any;
			/**
			 * FilterOperator not equals
			 */
			static NE: any;
			/**
			 * FilterOperator starts with
			 */
			static StartsWith: any;
		}
	
		class FilterType {
			/**
			 * Filters which are changed by the application
			 */
			static Application: any;
			/**
			 * Filters which are set by the different controls
			 */
			static Control: any;
		}
	
		class ListBinding extends Binding {
			/**
			 * Constructor for ListBinding
			 * @param oModel 
			 * @param sPath 
			 * @param oContext 
			 * @param aSorters initial sort order (can be either a sorter or an array of sorters)(optional)
			 * @param aFilters predefined filter/s (can be either a filter or an array of filters)(optional)
			 * @param mParameters (optional)
			 */
			constructor(oModel: sap.ui.model.Model, sPath: string, oContext: sap.ui.model.Context, aSorters?: any[], aFilters?: any[], mParameters?: any);
			/**
			 * Attach event-handler <code>fnFunction</code> to the 'filter' event of this <code>sap.ui.model.ListBinding</code>.<br/>
			 * @param fnFunction The function to call, when the event occurs.
			 * @param oListener object on which to call the given function.(optional)
			 * @deprecated use the change event. It now contains a parameter (reason : "filter") when a filter event is fired.
			 */
			attachFilter(fnFunction: any, oListener?: any);
			/**
			 * Attach event-handler <code>fnFunction</code> to the 'sort' event of this <code>sap.ui.model.ListBinding</code>.<br/>
			 * @param fnFunction The function to call, when the event occurs.
			 * @param oListener object on which to call the given function.(optional)
			 * @deprecated use the change event. It now contains a parameter (reason : "sort") when a sorter event is fired.
			 */
			attachSort(fnFunction: any, oListener?: any);
			/**
			 * Detach event-handler <code>fnFunction</code> from the 'filter' event of this <code>sap.ui.model.ListBinding</code>.<br/>
			 * @param fnFunction The function to call, when the event occurs.
			 * @param oListener object on which to call the given function.(optional)
			 * @deprecated use the change event.
			 */
			detachFilter(fnFunction: any, oListener?: any);
			/**
			 * Detach event-handler <code>fnFunction</code> from the 'sort' event of this <code>sap.ui.model.ListBinding</code>.<br/>
			 * @param fnFunction The function to call, when the event occurs.
			 * @param oListener object on which to call the given function.(optional)
			 * @deprecated use the change event.
			 */
			detachSort(fnFunction: any, oListener?: any);
			/**
			 * Creates a new subclass of class sap.ui.model.ListBinding with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Binding.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Filters the list according to the filter definitions
			 * @param aFilters Array of filter objects
			 * @param sFilterType Type of the filter which should be adjusted, if it is not given, the standard behaviour applies
			 * @return returns <code>this</code> to facilitate method chaining
			 */
			filter(aFilters: any[], sFilterType: FilterType): ListBinding;
			/**
			 * Returns an array of binding contexts for the bound target list.
			 * 
			 * <strong>Note:</strong>The public usage of this method is deprecated, as calls from outside of controls will lead
			 * to unexpected side effects. For avoidance use {@link sap.ui.model.ListBinding.prototype.getCurrentContexts}
			 * instead.
			 * @param iStartIndex the startIndex where to start the retrieval of contexts(optional)
			 * @param iLength determines how many contexts to retrieve beginning from the start index.(optional)
			 * @return the array of contexts for each row of the bound list
			 */
			getContexts(iStartIndex?: number, iLength?: number): Context[];
			/**
			 * Returns an array of currently used binding contexts of the bound control
			 * 
			 * This method does not trigger any data requests from the backend or delta calculation, but just returns the context
			 * array as last requested by the control. This can be used by the application to get access to the data currently
			 * displayed by a list control.
			 * @return the array of contexts for each row of the bound list
			 */
			getCurrentContexts(): Context[];
			/**
			 * Returns list of distinct values for the given relative binding path
			 * @param sPath the relative binding path
			 * @return the array of distinct values.
			 */
			getDistinctValues(sPath: string): any[];
			/**
			 * Gets the group for the given context.
			 * Must only be called if isGrouped() returns that grouping is enabled for this binding. The grouping will be
			 * performed using the first sorter (in case multiple sorters are defined).
			 * @param oContext the binding context
			 * @return the group object containing a key property and optional custom properties
			 */
			getGroup(oContext: Context): any;
			/**
			 * Returns the number of entries in the list. This might be an estimated or preliminary length, in case
			 * the full length is not known yet, see method isLengthFinal().
			 * @return returns the number of entries in the list
			 */
			getLength(): number;
			/**
			 * Indicates whether grouping is enabled for the binding.
			 * Grouping is enabled for a list binding, if at least one sorter exists on the binding and the first sorter
			 * is a grouping sorter.
			 * @return whether grouping is enabled
			 */
			isGrouped(): boolean;
			/**
			 * Returns whether the length which can be retrieved using getLength() is a known, final length,
			 * or an preliminary or estimated length which may change if further data is requested.
			 * @return returns whether the length is final
			 */
			isLengthFinal(): boolean;
			/**
			 * Sorts the list according to the sorter object
			 * @param aSorters the Sorter object or an array of sorters which defines the sort order
			 * @return returns <code>this</code> to facilitate method chaining
			 */
			sort(aSorters: Sorter|any[]): ListBinding;
		}
	
		class MetaModel extends Model {
			/**
			 * Constructor for a new MetaModel.
			 */
			constructor();
			/**
			 * Creates a new subclass of class sap.ui.model.MetaModel with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Model.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		}
	
		class Model extends sap.ui.core.message.MessageProcessor {
			/**
			 * Constructor for a new Model.
			 * 
			 * Every Model is a MessageProcessor that is able to handle Messages with the normal binding path syntax in the target.
			 */
			constructor();
			/**
			 * Attach event-handler <code>fnFunction</code> to the 'parseError' event of this <code>sap.ui.model.Model</code>.<br/>
			 * @param oData The object, that should be passed along with the event-object when firing the event.
			 * @param fnFunction The function to call, when the event occurs. This function will be called on the
			 *            oListener-instance (if present) or in a 'static way'.
			 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.(optional)
			 * @return <code>this</code> to allow method chaining
			 */
			attachParseError(oData: any, fnFunction: any, oListener?: any): Model;
			/**
			 * Attach event-handler <code>fnFunction</code> to the 'propertyChange' event of this <code>sap.ui.model.Model</code>.
			 * @param oData The object, that should be passed along with the event-object when firing the event.
			 * @param fnFunction The function to call, when the event occurs. This function will be called on the
			 *            oListener-instance (if present) or in a 'static way'.
			 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.(optional)
			 * @return <code>this</code> to allow method chaining
			 */
			attachPropertyChange(oData: any, fnFunction: any, oListener?: any): Model;
			/**
			 * Attach event-handler <code>fnFunction</code> to the 'requestCompleted' event of this <code>sap.ui.model.Model</code>.
			 * @param oData The object, that should be passed along with the event-object when firing the event.
			 * @param fnFunction The function to call, when the event occurs. This function will be called on the
			 *            oListener-instance (if present) or in a 'static way'.
			 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.(optional)
			 * @return <code>this</code> to allow method chaining
			 */
			attachRequestCompleted(oData: any, fnFunction: any, oListener?: any): Model;
			/**
			 * Attach event-handler <code>fnFunction</code> to the 'requestFailed' event of this <code>sap.ui.model.Model</code>.<br/>
			 * @param oData The object, that should be passed along with the event-object when firing the event.
			 * @param fnFunction The function to call, when the event occurs. This function will be called on the
			 *            oListener-instance (if present) or in a 'static way'.
			 * @param oListener Object on which to call the given function. If empty, this Model is used.(optional)
			 * @return <code>this</code> to allow method chaining
			 */
			attachRequestFailed(oData: any, fnFunction: any, oListener?: any): Model;
			/**
			 * Attach event-handler <code>fnFunction</code> to the 'requestSent' event of this <code>sap.ui.model.Model</code>.
			 * @param oData The object, that should be passed along with the event-object when firing the event.
			 * @param fnFunction The function to call, when the event occurs. This function will be called on the
			 *            oListener-instance (if present) or in a 'static way'.
			 * @param oListener Object on which to call the given function. If empty, the global context (window) is used.(optional)
			 * @return <code>this</code> to allow method chaining
			 */
			attachRequestSent(oData: any, fnFunction: any, oListener?: any): Model;
			/**
			 * Create ContextBinding
			 * @param sPath the path pointing to the property that should be bound or an object
			 *         which contains the following parameter properties: path, context, parameters
			 * @param oContext the context object for this databinding (optional)(optional)
			 * @param mParameters additional model specific parameters (optional)(optional)
			 * @param oEvents event handlers can be passed to the binding ({change:myHandler})(optional)
			 * @return 
			 */
			bindContext(sPath: string|any, oContext?: any, mParameters?: any, oEvents?: any): ContextBinding;
			/**
			 * Implement in inheriting classes
			 * @param sPath the path pointing to the list / array that should be bound
			 * @param oContext the context object for this databinding (optional)(optional)
			 * @param aSorters initial sort order (can be either a sorter or an array of sorters) (optional)(optional)
			 * @param aFilters predefined filter/s (can be either a filter or an array of filters) (optional)(optional)
			 * @param mParameters additional model specific parameters (optional)(optional)
			 * @return 
			 */
			bindList(sPath: string, oContext?: any, aSorters?: Sorter, aFilters?: any[], mParameters?: any): ListBinding;
			/**
			 * Implement in inheriting classes
			 * @param sPath the path pointing to the property that should be bound
			 * @param oContext the context object for this databinding (optional)(optional)
			 * @param mParameters additional model specific parameters (optional)(optional)
			 * @return 
			 */
			bindProperty(sPath: string, oContext?: any, mParameters?: any): PropertyBinding;
			/**
			 * Implement in inheriting classes
			 * @param sPath the path pointing to the tree / array that should be bound
			 * @param oContext the context object for this databinding (optional)(optional)
			 * @param aFilters predefined filter/s contained in an array (optional)(optional)
			 * @param mParameters additional model specific parameters (optional)(optional)
			 * @param aSorters predefined sap.ui.model.sorter/s contained in an array (optional)(optional)
			 * @return 
			 */
			bindTree(sPath: string, oContext?: any, aFilters?: any[], mParameters?: any, aSorters?: any[]): TreeBinding;
			/**
			 * Implement in inheriting classes
			 * @param sPath the path to create the new context from
			 * @param oContext the context which should be used to create the new binding context(optional)
			 * @param mParameters the parameters used to create the new binding context(optional)
			 * @param fnCallBack the function which should be called after the binding context has been created(optional)
			 * @param bReload force reload even if data is already available. For server side models this should
			 *                   refetch the data from the server(optional)
			 * @return the binding context, if it could be created synchronously
			 */
			createBindingContext(sPath: string, oContext?: any, mParameters?: any, fnCallBack?: any, bReload?: boolean): Context;
			/**
			 * Destroys the model and clears the model data.
			 * A model implementation may override this function and perform model specific cleanup tasks e.g.
			 * abort requests, prevent new requests, etc.
			 */
			destroy();
			/**
			 * Implement in inheriting classes
			 * @param oContext to destroy
			 */
			destroyBindingContext(oContext: any);
			/**
			 * Detach event-handler <code>fnFunction</code> from the 'parseError' event of this <code>sap.ui.model.Model</code>.<br/>
			 * 
			 * The passed function and listener object must match the ones previously used for event registration.
			 * @param fnFunction The function to call, when the event occurs.
			 * @param oListener Object on which the given function had to be called.
			 * @return <code>this</code> to allow method chaining
			 */
			detachParseError(fnFunction: any, oListener: any): Model;
			/**
			 * Detach event-handler <code>fnFunction</code> from the 'propertyChange' event of this <code>sap.ui.model.Model</code>.
			 * 
			 * The passed function and listener object must match the ones previously used for event registration.
			 * @param fnFunction The function to call, when the event occurs.
			 * @param oListener Object on which the given function had to be called.
			 * @return <code>this</code> to allow method chaining
			 */
			detachPropertyChange(fnFunction: any, oListener: any): Model;
			/**
			 * Detach event-handler <code>fnFunction</code> from the 'requestCompleted' event of this <code>sap.ui.model.Model</code>.
			 * 
			 * The passed function and listener object must match the ones previously used for event registration.
			 * @param fnFunction The function to call, when the event occurs.
			 * @param oListener Object on which the given function had to be called.
			 * @return <code>this</code> to allow method chaining
			 */
			detachRequestCompleted(fnFunction: any, oListener: any): Model;
			/**
			 * Detach event-handler <code>fnFunction</code> from the 'requestFailed' event of this <code>sap.ui.model.Model</code>.<br/>
			 * 
			 * The passed function and listener object must match the ones previously used for event registration.
			 * @param fnFunction The function to call, when the event occurs.
			 * @param oListener Object on which the given function had to be called.
			 * @return <code>this</code> to allow method chaining
			 */
			detachRequestFailed(fnFunction: any, oListener: any): Model;
			/**
			 * Detach event-handler <code>fnFunction</code> from the 'requestSent' event of this <code>sap.ui.model.Model</code>.
			 * 
			 * The passed function and listener object must match the ones previously used for event registration.
			 * @param fnFunction The function to call, when the event occurs.
			 * @param oListener Object on which the given function had to be called.
			 * @return <code>this</code> to allow method chaining
			 */
			detachRequestSent(fnFunction: any, oListener: any): Model;
			/**
			 * Creates a new subclass of class sap.ui.model.Model with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.message.MessageProcessor.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Fire event parseError to attached listeners.
			 * @param mArguments the arguments to pass along with the event.(optional)
			 * @return <code>this</code> to allow method chaining
			 */
			fireParseError(mArguments?: any): Model;
			/**
			 * Fire event propertyChange to attached listeners.
			 * @param mArguments the arguments to pass along with the event.(optional)
			 * @return <code>this</code> to allow method chaining
			 */
			firePropertyChange(mArguments?: any): Model;
			/**
			 * Fire event requestCompleted to attached listeners.
			 * @param mArguments the arguments to pass along with the event.(optional)
			 * @return <code>this</code> to allow method chaining
			 */
			fireRequestCompleted(mArguments?: any): Model;
			/**
			 * Fire event requestFailed to attached listeners.
			 * @param mArguments the arguments to pass along with the event.(optional)
			 * @return <code>this</code> to allow method chaining
			 */
			fireRequestFailed(mArguments?: any): Model;
			/**
			 * Fire event requestSent to attached listeners.
			 * @param mArguments the arguments to pass along with the event.(optional)
			 * @return <code>this</code> to allow method chaining
			 */
			fireRequestSent(mArguments?: any): Model;
			/**
			 * Get the default binding mode for the model
			 * @return default binding mode of the model
			 */
			getDefaultBindingMode(): BindingMode;
			/**
			 * Get messages for path
			 * @param sPath The binding path
			 */
			getMessagesByPath(sPath: string);
			/**
			 * Returns the meta model associated with this model if it is available for the concrete
			 * model type.
			 * @return The meta model or undefined if no meta model exists.
			 */
			getMetaModel(): MetaModel;
			/**
			 * Implement in inheriting classes
			 * @param sPath the path to where to read the object
			 * @param oContext the context with which the path should be resolved(optional)
			 */
			getObject(sPath: string, oContext?: any);
			/**
			 * Returns the original value for the property with the given path and context.
			 * The original value is the value that was last responded by a server if using a server model implementation.
			 * @param sPath the path/name of the property
			 * @param oContext the context if available to access the property value(optional)
			 * @return vValue the value of the property
			 */
			getOriginalProperty(sPath: string, oContext?: any): any;
			/**
			 * Implement in inheriting classes
			 * @param sPath the path to where to read the attribute value
			 * @param oContext the context with which the path should be resolved(optional)
			 */
			getProperty(sPath: string, oContext?: any);
			/**
			 * Check if the specified binding mode is supported by the model.
			 * @param sMode the binding mode to check
			 */
			isBindingModeSupported(sMode: BindingMode);
			/**
			 * Returns whether legacy path syntax is used
			 * @return 
			 */
			isLegacySyntax(): boolean;
			/**
			 * Refresh the model.
			 * This will check all bindings for updated data and update the controls if data has been changed.
			 * @param bForceUpdate Update controls even if data has not been changed
			 */
			refresh(bForceUpdate: boolean);
			/**
			 * Set the default binding mode for the model. If the default binding mode should be changed,
			 * this method should be called directly after model instance creation and before any binding creation.
			 * Otherwise it is not guaranteed that the existing bindings will be updated with the new binding mode.
			 * @param sMode the default binding mode to set for the model
			 * @return this pointer for chaining
			 */
			setDefaultBindingMode(sMode: BindingMode): Model;
			/**
			 * Enables legacy path syntax handling
			 * 
			 * This defines, whether relative bindings, which do not have a defined
			 * binding context, should be compatible to earlier releases which means
			 * they are resolved relative to the root element or handled strict and
			 * stay unresolved until a binding context is set
			 * @param bLegacySyntax the path syntax to use
			 */
			setLegacySyntax(bLegacySyntax: boolean);
			/**
			 * Sets messages
			 * @param mMessages Messages for this model
			 */
			setMessages(mMessages: any);
			/**
			 * Implement in inheriting classes
			 * @note Overload from base type sap.ui.core.message.MessageProcessor
			 * @param vMessages map of messages: {'target': [array of messages],...}
			 */
			setMessages(vMessages: any);
			/**
			 * Set the maximum number of entries which are used for list bindings.
			 * @param iSizeLimit collection size limit
			 */
			setSizeLimit(iSizeLimit: number);
		}
	
		class PropertyBinding extends Binding {
			/**
			 * Constructor for PropertyBinding
			 * @param oModel 
			 * @param sPath 
			 * @param oContext 
			 * @param mParameters (optional)
			 */
			constructor(oModel: sap.ui.model.Model, sPath: string, oContext: sap.ui.model.Context, mParameters?: any);
			/**
			 * Creates a new subclass of class sap.ui.model.PropertyBinding with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Binding.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Returns the binding mode
			 * @return the binding mode
			 */
			getBindingMode(): BindingMode;
			/**
			 * Returns the current external value of the bound target which is formatted via a type or formatter function.
			 * @return the current value of the bound target
			 */
			getExternalValue(): any;
			/**
			 * Returns the formatter function
			 * @return the formatter function
			 */
			getFormatter(): any;
			/**
			 * Returns the type if any for the binding.
			 * @return the binding type
			 */
			getType(): Type;
			/**
			 * Returns the current value of the bound target
			 * @return the current value of the bound target
			 */
			getValue(): any;
			/**
			 * Resumes the binding update. Change events will be fired again.
			 * 
			 * When the binding is resumed and the control value was changed in the meantime, the control value will be set to the
			 * current value from the model and a change event will be fired.
			 */
			resume();
			/**
			 * Sets the binding mode
			 * @param sBindingMode the binding mode
			 */
			setBindingMode(sBindingMode: BindingMode);
			/**
			 * Sets the value for this binding. The value is parsed and validated against its type and then set to the binding.
			 * A model implementation should check if the current default binding mode permits
			 * setting the binding value and if so set the new value also in the model.
			 * @param oValue the value to set for this binding
			 */
			setExternalValue(oValue: any);
			/**
			 * Sets the optional formatter function for the binding.
			 * @param fnFormatter the formatter function for the binding
			 */
			setFormatter(fnFormatter: any);
			/**
			 * Sets the optional type and internal type for the binding. The type and internal type are used to do the parsing/formatting correctly.
			 * The internal type is the property type of the element which the value is formatted to.
			 * @param oType the type for the binding
			 * @param sInternalType the internal type of the element property which this binding is bound against.
			 */
			setType(oType: Type, sInternalType: string);
			/**
			 * Sets the value for this binding. A model implementation should check if the current default binding mode permits
			 * setting the binding value and if so set the new value also in the model.
			 * @param oValue the value to set for this binding
			 */
			setValue(oValue: any);
		}
	
		class SelectionModel extends sap.ui.base.EventProvider {
			/**
			 * Constructs an instance of a sap.ui.model.SelectionModel.
			 * @param iSelectionMode <code>sap.ui.model.SelectionModel.SINGLE_SELECTION</code> or <code>sap.ui.model.SelectionModel.MULTI_SELECTION</code>
			 */
			constructor(iSelectionMode: number);
			/**
			 * SelectionMode: Multi Selection
			 */
			MULTI_SELECTION: any;
			/**
			 * SelectionMode: Single Selection
			 */
			SINGLE_SELECTION: any;
			/**
			 * Changes the selection to be the union of the current selection
			 * and the range between <code>iFromIndex</code> and <code>iToIndex</code> inclusive.
			 * If <code>iFromIndex</code> is smaller than <code>iToIndex</code>, both parameters are swapped.
			 * 
			 * In <code>SINGLE_SELECTION</code> selection mode, this is equivalent
			 * to calling <code>setSelectionInterval</code>, and only the second index
			 * is used.
			 * 
			 * If this call results in a change to the current selection or lead selection, then a
			 * <code>SelectionChanged</code> event is fired.
			 * @param iFromIndex one end of the interval.
			 * @param iToIndex other end of the interval
			 * @return <code>this</code> to allow method chaining
			 */
			addSelectionInterval(iFromIndex: number, iToIndex: number): SelectionModel;
			/**
			 * Attach event-handler <code>fnFunction</code> to the 'selectionChanged' event of this <code>sap.ui.model.SelectionModel</code>.<br/>
			 * @param oData The object, that should be passed along with the event-object when firing the event.
			 * @param fnFunction The function to call, when the event occurs. This function will be called on the
			 *            oListener-instance (if present) or in a 'static way'.
			 * @param oListener Object on which to call the given function. If empty, this Model is used.(optional)
			 * @return <code>this</code> to allow method chaining
			 */
			attachSelectionChanged(oData: any, fnFunction: any, oListener?: any): SelectionModel;
			/**
			 * Change the selection to the empty set and clears the lead selection.
			 * 
			 * If this call results in a change to the current selection or lead selection, then a
			 * <code>SelectionChanged</code> event is fired.
			 * @return <code>this</code> to allow method chaining
			 */
			clearSelection(): SelectionModel;
			/**
			 * Detach event-handler <code>fnFunction</code> from the 'selectionChanged' event of this <code>sap.ui.model.SelectionModel</code>.<br/>
			 * 
			 * The passed function and listener object must match the ones previously used for event registration.
			 * @param fnFunction The function to call, when the event occurs.
			 * @param oListener Object on which the given function had to be called.
			 * @return <code>this</code> to allow method chaining
			 */
			detachSelectionChanged(fnFunction: any, oListener: any): SelectionModel;
			/**
			 * Creates a new subclass of class sap.ui.model.SelectionModel with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.EventProvider.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Fire event 'selectionChanged' to attached listeners.
			 * 
			 * Expects following event parameters:
			 * <ul>
			 * <li>'leadIndex' of type <code>int</code> Lead selection index.</li>
			 * <li>'rowIndices' of type <code>int[]</code> Other selected indices (if available)</li>
			 * </ul>
			 * @param mArguments the arguments to pass along with the event.
			 * @return <code>this</code> to allow method chaining
			 */
			fireSelectionChanged(mArguments: any): SelectionModel;
			/**
			 * Return the second index argument from the most recent call to
			 * setSelectionInterval(), addSelectionInterval() or removeSelectionInterval().
			 * @return lead selected index
			 */
			getLeadSelectedIndex(): number;
			/**
			 * Returns the selected indices as array.
			 * @return array of selected indices
			 */
			getSelectedIndices(): number[];
			/**
			 * Returns the current selection mode.
			 * @return the current selection mode
			 */
			getSelectionMode(): number;
			/**
			 * Returns true if the specified index is selected.
			 * @param iIndex 
			 * @return true if the specified index is selected.
			 */
			isSelectedIndex(iIndex: number): boolean;
			/**
			 * Moves all selected indices starting at the position <code>iStartIndex</code> <code>iMove</code>
			 * items.
			 * 
			 * This can be used if new items are inserted to the item set and you want to keep the selection.
			 * To handle a deletion of items use <code>sliceSelectionInterval</code>.
			 * 
			 * If this call results in a change to the current selection or lead selection, then a
			 * <code>SelectionChanged</code> event is fired.
			 * @param iStartIndex start at this position
			 * @param iMove 
			 * @return <code>this</code> to allow method chaining
			 */
			moveSelectionInterval(iStartIndex: number, iMove: number): SelectionModel;
			/**
			 * Changes the selection to be the set difference of the current selection
			 * and the indices between <code>iFromIndex</code> and <code>iToIndex</code> inclusive.
			 * If <code>iFromIndex</code> is smaller than <code>iToIndex</code>, both parameters are swapped.
			 * 
			 * If the range of removed selection indices includes the current lead selection,
			 * then the lead selection will be unset (set to -1).
			 * 
			 * If this call results in a change to the current selection or lead selection, then a
			 * <code>SelectionChanged</code> event is fired.
			 * @param iFromIndex one end of the interval.
			 * @param iToIndex other end of the interval
			 * @return <code>this</code> to allow method chaining
			 */
			removeSelectionInterval(iFromIndex: number, iToIndex: number): SelectionModel;
			/**
			 * Selects all rows up to the <code>iToIndex</iToIndex>.
			 * 
			 * If this call results in a change to the current selection, then a
			 * <code>SelectionChanged</code> event is fired.
			 * @param iToIndex end of the interval
			 * @return <code>this</code> to allow method chaining
			 */
			selectAll(iToIndex: number): SelectionModel;
			/**
			 * Changes the selection to be equal to the range <code>iFromIndex</code> and <code>iToIndex</code>
			 * inclusive. If <code>iFromIndex</code> is smaller than <code>iToIndex</code>, both parameters are swapped.
			 * 
			 * In <code>SINGLE_SELECTION</code> selection mode, only <code>iToIndex</iToIndex> is used.
			 * 
			 * If this call results in a change to the current selection, then a
			 * <code>SelectionChanged</code> event is fired.
			 * @param iFromIndex one end of the interval.
			 * @param iToIndex other end of the interval
			 * @return <code>this</code> to allow method chaining
			 */
			setSelectionInterval(iFromIndex: number, iToIndex: number): SelectionModel;
			/**
			 * Sets the selection mode. The following list describes the accepted
			 * selection modes:
			 * <ul>
			 * <li><code>sap.ui.model.SelectionModel.SINGLE_SELECTION</code> -
			 *   Only one list index can be selected at a time. In this mode,
			 *   <code>setSelectionInterval</code> and <code>addSelectionInterval</code> are
			 *   equivalent, both replacing the current selection with the index
			 *   represented by the second argument (the "lead").
			 * <li><code>sap.ui.model.SelectionModel.MULTI_SELECTION</code> -
			 *   In this mode, there's no restriction on what can be selected.
			 * </ul>
			 * @param iSelectionMode selection mode
			 */
			setSelectionMode(iSelectionMode: number);
			/**
			 * Slices a the indices between the two indices from the selection.
			 * If <code>iFromIndex</code> is smaller than <code>iToIndex</code>, both parameters are swapped.
			 * 
			 * If the range of removed selection indices includes the current lead selection,
			 * then the lead selection will be unset (set to -1).
			 * 
			 * If this call results in a change to the current selection or lead selection, then a
			 * <code>SelectionChanged</code> event is fired.
			 * @param iFromIndex one end of the interval.
			 * @param iToIndex other end of the interval
			 * @return <code>this</code> to allow method chaining
			 */
			sliceSelectionInterval(iFromIndex: number, iToIndex: number): SelectionModel;
		}
	
		class SimpleType extends Type {
			/**
			 * Constructor for a new SimpleType.
			 * @param oFormatOptions options as provided by concrete subclasses(optional)
			 * @param oConstraints constraints as supported by concrete subclasses(optional)
			 */
			constructor(oFormatOptions?: any, oConstraints?: any);
			/**
			 * Creates a new subclass of class sap.ui.model.SimpleType with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Type.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Format the given value in model representation to an output value in the given
			 * internal type. This happens according to the format options, if target type is 'string'.
			 * If oValue is not defined or null, null will be returned.
			 * @param oValue the value to be formatted
			 * @param sInternalType the target type
			 * @return the formatted output value
			 */
			formatValue(oValue: any, sInternalType: string): any;
			/**
			 * Parse a value of an internal type to the expected value of the model type.
			 * @param oValue the value to be parsed
			 * @param sInternalType the source type
			 * @return the parse result
			 */
			parseValue(oValue: any, sInternalType: string): any;
			/**
			 * Validate whether a given value in model representation is valid and meets the
			 * defined constraints (if any).
			 * @param oValue the value to be validated
			 */
			validateValue(oValue: any);
		}
	
		class Sorter extends sap.ui.base.Object {
			/**
			 * 
			 * Constructor for Sorter
			 * @param sPath the binding path used for sorting
			 * @param bDescending whether the sort order should be descending(optional)
			 * @param vGroup configure grouping of the content, can either be true to enable grouping
			 *        based on the raw model property value, or a function which calculates the group value out of the
			 *        context (e.g. oContext.getProperty("date").getYear() for year grouping). The control needs to
			 *        implement the grouping behaviour for the aggregation which you want to group. In case a function
			 *        is provided it must either return a primitive type value as the group key or an object containing
			 *        a "key" property an may contain additional properties needed for group visualization.(optional)
			 * @param fnComparator a custom comparator function, which is used for clientside sorting instead
			 *        of the default comparator method.(optional)
			 */
			constructor(sPath: string, bDescending?: boolean, vGroup?: boolean|any, fnComparator?: any);
			/**
			 * Compares two values
			 * 
			 * This is the default comparator function used for clientside sorting, if no custom comparator is given in the
			 * constructor. It does compare just by using equal/less than/greater than with automatic type casting, except
			 * for null values, which are always last, and string values where localeCompare is used.
			 * 
			 * The comparator method returns -1, 0 or 1, depending on the order of the two items and is
			 * suitable to be used as a comparator method for Array.sort.
			 * @param a the first value to compare
			 * @param b the second value to compare
			 * @return -1, 0 or 1 depending on the compare result
			 */
			defaultComparator(a: any, b: any): number;
			/**
			 * Creates a new subclass of class sap.ui.model.Sorter with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Returns a group object, at least containing a key property for group detection.
			 * May contain additional properties as provided by a custom group function.
			 * @param oContext the binding context
			 * @return An object containing a key property and optional custom properties
			 */
			getGroup(oContext: Context): any;
		}
	
		class TreeBinding extends Binding {
			/**
			 * Constructor for TreeBinding
			 * @param oModel 
			 * @param sPath the path pointing to the tree / array that should be bound
			 * @param oContext the context object for this databinding (optional)(optional)
			 * @param aFilters predefined filter/s contained in an array (optional)(optional)
			 * @param mParameters additional model specific parameters (optional)(optional)
			 * @param aSorters predefined sap.ui.model.sorter/s contained in an array (optional)(optional)
			 */
			constructor(oModel: sap.ui.model.Model, sPath: string, oContext?: any, aFilters?: any[], mParameters?: any, aSorters?: any[]);
			/**
			 * Attach event-handler <code>fnFunction</code> to the '_filter' event of this <code>sap.ui.model.TreeBinding</code>.<br/>
			 * @param fnFunction The function to call, when the event occurs.
			 * @param oListener object on which to call the given function.(optional)
			 * @deprecated use the change event. It now contains a parameter (reason : "filter") when a filter event is fired.
			 */
			attachFilter(fnFunction: any, oListener?: any);
			/**
			 * Detach event-handler <code>fnFunction</code> from the '_filter' event of this <code>sap.ui.model.TreeBinding</code>.<br/>
			 * @param fnFunction The function to call, when the event occurs.
			 * @param oListener object on which to call the given function.(optional)
			 * @deprecated use the change event.
			 */
			detachFilter(fnFunction: any, oListener?: any);
			/**
			 * Creates a new subclass of class sap.ui.model.TreeBinding with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.Binding.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Filters the tree according to the filter definitions.
			 * @param aFilters Array of sap.ui.model.Filter objects
			 * @param sFilterType Type of the filter which should be adjusted, if it is not given, the standard behaviour applies
			 */
			filter(aFilters: Filter[], sFilterType: FilterType);
			/**
			 * Returns the number of child nodes of a specific context
			 * @param oContext the context element of the node
			 * @return the number of children
			 */
			getChildCount(oContext: any): number;
			/**
			 * Returns the current value of the bound target
			 * @param oContext the context element of the node
			 * @param iStartIndex the startIndex where to start the retrieval of contexts
			 * @param iLength determines how many contexts to retrieve beginning from the start index.
			 * @return the array of child contexts for the given node
			 */
			getNodeContexts(oContext: any, iStartIndex: number, iLength: number): any[];
			/**
			 * Returns the current value of the bound target
			 * @param iStartIndex the startIndex where to start the retrieval of contexts
			 * @param iLength determines how many contexts to retrieve beginning from the start index.
			 * @return the array of child contexts for the root node
			 */
			getRootContexts(iStartIndex: number, iLength: number): any[];
			/**
			 * Returns if the node has child nodes
			 * @param oContext the context element of the node
			 * @return true if node has children
			 */
			hasChildren(oContext: any): boolean;
			/**
			 * Sorts the tree according to the sorter definitions.
			 * @param aSorters Array of sap.ui.model.Sorter objects
			 */
			sort(aSorters: Sorter[]);
		}
	
		class TreeBindingAdapter  {
			/**
			 * Calculate the request length based on the given information
			 * @param iMaxGroupSize the maximum group size
			 * @param oSection the information of the current section
			 */
			_calculateRequestLength(iMaxGroupSize: number, oSection: any);
			/**
			 * Attach event-handler <code>fnFunction</code> to the 'selectionChanged' event of this <code>sap.ui.model.SelectionModel</code>.<br/>
			 * Event is fired if the selection of tree nodes is changed in any way.
			 * @param oData The object, that should be passed along with the event-object when firing the event.
			 * @param fnFunction The function to call, when the event occurs. This function will be called on the
			 *            oListener-instance (if present) or in a 'static way'.
			 * @param oListener Object on which to call the given function. If empty, this Model is used.(optional)
			 * @return <code>this</code> to allow method chaining
			 */
			attachSelectionChanged(oData: any, fnFunction: any, oListener?: any): SelectionModel;
			/**
			 * Detach event-handler <code>fnFunction</code> from the 'selectionChanged' event of this <code>sap.ui.model.SelectionModel</code>.<br/>
			 * 
			 * The passed function and listener object must match the ones previously used for event registration.
			 * @param fnFunction The function to call, when the event occurs.
			 * @param oListener Object on which the given function had to be called.
			 * @return <code>this</code> to allow method chaining
			 */
			detachSelectionChanged(fnFunction: any, oListener: any): SelectionModel;
			/**
			 * Fire event 'selectionChanged' to attached listeners.
			 * 
			 * Expects following event parameters:
			 * <ul>
			 * <li>'leadIndex' of type <code>int</code> Lead selection index.</li>
			 * <li>'rowIndices' of type <code>int[]</code> Other selected indices (if available)</li>
			 * </ul>
			 * @param mArguments the arguments to pass along with the event.
			 * @return <code>this</code> to allow method chaining
			 */
			fireSelectionChanged(mArguments: any): SelectionModel;
			/**
			 * Retrieves the requested part from the tree and returns node objects.
			 * @param iStartIndex 
			 * @param iLength 
			 * @param iThreshold 
			 * @return Tree Node
			 */
			getNodes(iStartIndex: any, iLength: any, iThreshold: any): any;
		}
	
		class TreeBindingCompatibilityAdapter  {
		}
	
		class TreeBindingUtils {
		}
	
		class Type extends sap.ui.base.Object {
			/**
			 * Constructor for a new Type.
			 */
			constructor();
			/**
			 * Creates a new subclass of class sap.ui.model.Type with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Returns the name of this type.
			 * @return the name of this type
			 */
			getName(): string;
		}
	
		namespace type {
		
			class Boolean extends sap.ui.model.SimpleType {
				/**
				 * Constructor for a Boolean type.
				 * @param oFormatOptions formatting options. Boolean doesn't support any specific format options(optional)
				 * @param oConstraints value constraints. Boolean doesn't support additional constraints(optional)
				 */
				constructor(oFormatOptions?: any, oConstraints?: any);
				/**
				 * Creates a new subclass of class sap.ui.model.type.Boolean with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			}
		
			class Currency extends sap.ui.model.CompositeType {
				/**
				 * Constructor for a Currency type.
				 * @param oFormatOptions formatting options. Supports the same options as {@link sap.ui.core.format.NumberFormat.getCurrencyInstance NumberFormat.getCurrencyInstance}(optional)
				 * @param oConstraints value constraints.(optional)
				 */
				constructor(oFormatOptions?: any, oConstraints?: any);
				/**
				 * Creates a new subclass of class sap.ui.model.type.Currency with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.CompositeType.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Format the given array containing amount and currency code to an output value of type string.
				 * Other internal types than 'string' are not supported by the Currency type.
				 * If an source format is has been defined for this type, the formatValue does also accept
				 * a string value as input, which will be parsed into an array using the source format.
				 * If aValues is not defined or null, null will be returned.
				 * @param vValue the array of values or string value to be formatted
				 * @param sInternalType the target type
				 * @return the formatted output value
				 */
				formatValue(vValue: any[]|string, sInternalType: string): any;
				/**
				 * Format the given value in model representation to an output value in the given
				 * internal type. This happens according to the format options, if target type is 'string'.
				 * If oValue is not defined or null, null will be returned.
				 * @note Overload from base type sap.ui.model.SimpleType
				 * @param oValue the value to be formatted
				 * @param sInternalType the target type
				 * @return the formatted output value
				 */
				formatValue(oValue: any, sInternalType: string): any;
				/**
				 * Format the given set of values in model representation to an output value in the given
				 * internal type. This happens according to the format options, if target type is 'string'.
				 * If aValues is not defined or null, null will be returned.
				 * @note Overload from base type sap.ui.model.CompositeType
				 * @param aValues the values to be formatted
				 * @param sInternalType the target type
				 * @return the formatted output value
				 */
				formatValue(aValues: any[], sInternalType: string): any;
				/**
				 * Parse a string value to an array containing amount and currency. Parsing of other
				 * internal types than 'string' is not supported by the Currency type.
				 * In case a source format has been defined, after parsing the currency is formatted
				 * using the source format and a string value is returned instead.
				 * @param vValue the value to be parsed
				 * @param sInternalType the source type
				 * @param aCurrentValues the current values of all binding parts
				 * @return the parse result array
				 */
				parseValue(vValue: any, sInternalType: string, aCurrentValues: any[]): any[]|string;
				/**
				 * Parse a value of an internal type to the expected value of the model type.
				 * @note Overload from base type sap.ui.model.SimpleType
				 * @param oValue the value to be parsed
				 * @param sInternalType the source type
				 * @return the parse result
				 */
				parseValue(oValue: any, sInternalType: string): any;
				/**
				 * Parse a value of an internal type to the expected set of values of the model type.
				 * @note Overload from base type sap.ui.model.CompositeType
				 * @param oValue the value to be parsed
				 * @param sInternalType the source type
				 * @param aCurrentValues the current values of all binding parts
				 * @return the parse result array
				 */
				parseValue(oValue: any, sInternalType: string, aCurrentValues: any[]): any[];
			}
		
			class Date extends sap.ui.model.SimpleType {
				/**
				 * Constructor for a Date type.
				 * @param oFormatOptions options used to create a DateFormat for formatting / parsing. Supports the same options as {@link sap.ui.core.format.DateFormat.getDateInstance DateFormat.getDateInstance}(optional)
				 * @param oConstraints value constraints.(optional)
				 */
				constructor(oFormatOptions?: any, oConstraints?: any);
				/**
				 * Creates a new subclass of class sap.ui.model.type.Date with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * 
				 */
				getOutputPattern();
			}
		
			class DateTime extends Date {
				/**
				 * Constructor for a DateTime type.
				 * @param oFormatOptions options used to create a DateFormat for formatting / parsing to/from external values and
				 *           optionally for a second DateFormat to convert between the data source format (Model) and the internally used JavaScript Date.format.
				 *           For both DateFormat objects, the same options are supported as for {@link sap.ui.core.format.DateFormat.getDateTimeInstance DateFormat.getDateTimeInstance}.
				 *           Note that this differs from the base type.(optional)
				 * @param oConstraints value constraints. Supports the same kind of constraints as its base type Date, but note the different format options (Date vs. DateTime)(optional)
				 */
				constructor(oFormatOptions?: any, oConstraints?: any);
				/**
				 * Creates a new subclass of class sap.ui.model.type.DateTime with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.type.Date.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			}
		
			class FileSize extends sap.ui.model.SimpleType {
				/**
				 * Constructor for a FileSize type.
				 * @param oFormatOptions formatting options. Supports the same options as {@link sap.ui.core.format.FileSizeFormat.getInstance FileSizeFormat.getInstance}(optional)
				 * @param oConstraints value constraints.(optional)
				 */
				constructor(oFormatOptions?: any, oConstraints?: any);
				/**
				 * Creates a new subclass of class sap.ui.model.type.FileSize with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			}
		
			class Float extends sap.ui.model.SimpleType {
				/**
				 * Constructor for a Float type.
				 * @param oFormatOptions formatting options. Supports the same options as {@link sap.ui.core.format.NumberFormat.getFloatInstance NumberFormat.getFloatInstance}(optional)
				 * @param oConstraints value constraints.(optional)
				 */
				constructor(oFormatOptions?: any, oConstraints?: any);
				/**
				 * Creates a new subclass of class sap.ui.model.type.Float with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			}
		
			class Integer extends sap.ui.model.SimpleType {
				/**
				 * Constructor for a Integer type.
				 * @param oFormatOptions formatting options. Supports the same options as {@link sap.ui.core.format.NumberFormat.getIntegerInstance NumberFormat.getIntegerInstance}(optional)
				 * @param oConstraints value constraints.(optional)
				 */
				constructor(oFormatOptions?: any, oConstraints?: any);
				/**
				 * Creates a new subclass of class sap.ui.model.type.Integer with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			}
		
			class String extends sap.ui.model.SimpleType {
				/**
				 * Constructor for a String type.
				 * @param oFormatOptions formatting options. String doesn't support any formatting options(optional)
				 * @param oConstraints value constraints. All given constraints must be fulfilled by a value to be valid(optional)
				 */
				constructor(oFormatOptions?: any, oConstraints?: any);
				/**
				 * Creates a new subclass of class sap.ui.model.type.String with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.SimpleType.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			}
		
			class Time extends Date {
				/**
				 * Constructor for a Time type.
				 * @param oFormatOptions options used to create a DateFormat for formatting / parsing to/from external values and
				 *           optionally for a second DateFormat to convert between the data source format (Model) and the internally used JavaScript Date.format.
				 *           For both DateFormat objects, the same options are supported as for {@link sap.ui.core.format.DateFormat.getTimeInstance DateFormat.getTimeInstance}.
				 *           Note that this differs from the base type.(optional)
				 * @param oConstraints value constraints. Supports the same kind of constraints as its base type Date, but note the different format options (Date vs. Time)(optional)
				 */
				constructor(oFormatOptions?: any, oConstraints?: any);
				/**
				 * Creates a new subclass of class sap.ui.model.type.Time with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.model.type.Date.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			}
		}
		/**
		 * FormatException class
		 * 
		 * This exception is thrown, when an error occurs while trying to convert a value of the model to
		 * a specific property value in the UI.
		 */
		function FormatException();
		/**
		 * ParseException class
		 * 
		 * This exception is thrown, when a parse error occurs while converting a
		 * string value to a specific property type in the model.
		 */
		function ParseException();
		/**
		 * ValidateException class
		 * 
		 * This exception is thrown, when a validation error occurs while checking the
		 * defined constraints for a type.
		 */
		function ValidateException();
	}

	/**
	 * SAPUI5 library with non-public controls, used in the UI5 demokit (SDK)
	 */
	namespace demokit {
	
		class CodeSampleContainer extends sap.ui.core.Control {
			/**
			 * Constructor for a new CodeSampleContainer.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.demokit.CodeSampleContainerMetadata);
			/**
			 * Constructor for a new CodeSampleContainer.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>apply</code> event of this <code>sap.ui.demokit.CodeSampleContainer</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.demokit.CodeSampleContainer</code> itself.
			 * 
			 * Fired when the user decides to apply his/her changes to the sample code
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.demokit.CodeSampleContainer</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachApply(oData: any, fnFunction: any, oListener?: any): CodeSampleContainer;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>apply</code> event of this <code>sap.ui.demokit.CodeSampleContainer</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachApply(fnFunction: any, oListener: any): CodeSampleContainer;
			/**
			 * Creates a new subclass of class sap.ui.demokit.CodeSampleContainer with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Fires event <code>apply</code> to attached listeners.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>code</code> of type <code>string</code>the current code that will be applied</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireApply(mArguments?: any): CodeSampleContainer;
			/**
			 * Gets current value of property <code>scriptElementId</code>.
			 * 
			 * Id of the script element that contains the initial sample code for this code sample.
			 * @return Value of property <code>scriptElementId</code>
			 */
			getScriptElementId(): string;
			/**
			 * Gets current value of property <code>sourceVisible</code>.
			 * 
			 * Whether the source code is visible or not.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>sourceVisible</code>
			 */
			getSourceVisible(): boolean;
			/**
			 * Gets current value of property <code>title</code>.
			 * 
			 * A title to be displayed above the code.
			 * @return Value of property <code>title</code>
			 */
			getTitle(): string;
			/**
			 * Gets current value of property <code>uiAreaId</code>.
			 * 
			 * Id of the container for the running code. This Id can be used in calls to sap.ui.setRoot as if it would be a normal UIArea. Internally, a container UIElement is created with that Id.
			 * @return Value of property <code>uiAreaId</code>
			 */
			getUiAreaId(): string;
			/**
			 * Gets current value of property <code>width</code>.
			 * 
			 * Width of the CodeSample container.
			 * 
			 * Default value is <code>90%</code>.
			 * @return Value of property <code>width</code>
			 */
			getWidth(): sap.ui.core.CSSSize;
			/**
			 * Sets a new value for property <code>scriptElementId</code>.
			 * 
			 * Id of the script element that contains the initial sample code for this code sample.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sScriptElementId New value for property <code>scriptElementId</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setScriptElementId(sScriptElementId: string): CodeSampleContainer;
			/**
			 * Sets a new value for property <code>sourceVisible</code>.
			 * 
			 * Whether the source code is visible or not.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bSourceVisible New value for property <code>sourceVisible</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSourceVisible(bSourceVisible: boolean): CodeSampleContainer;
			/**
			 * Sets a new value for property <code>title</code>.
			 * 
			 * A title to be displayed above the code.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sTitle New value for property <code>title</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setTitle(sTitle: string): CodeSampleContainer;
			/**
			 * Sets a new value for property <code>uiAreaId</code>.
			 * 
			 * Id of the container for the running code. This Id can be used in calls to sap.ui.setRoot as if it would be a normal UIArea. Internally, a container UIElement is created with that Id.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sUiAreaId New value for property <code>uiAreaId</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setUiAreaId(sUiAreaId: string): CodeSampleContainer;
			/**
			 * Sets a new value for property <code>width</code>.
			 * 
			 * Width of the CodeSample container.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>90%</code>.
			 * @param sWidth New value for property <code>width</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setWidth(sWidth: sap.ui.core.CSSSize): CodeSampleContainer;
		}
	
		class CodeViewer extends sap.ui.core.Control {
			/**
			 * Constructor for a new CodeViewer.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.demokit.CodeViewerMetadata);
			/**
			 * Constructor for a new CodeViewer.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this <code>sap.ui.demokit.CodeViewer</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.demokit.CodeViewer</code> itself.
			 * 
			 * Called when the mouse button is clicked over the non-editable(!) control
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.demokit.CodeViewer</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachPress(oData: any, fnFunction: any, oListener?: any): CodeViewer;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>save</code> event of this <code>sap.ui.demokit.CodeViewer</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.demokit.CodeViewer</code> itself.
			 * 
			 * Called when the editor is active and should be saved
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.demokit.CodeViewer</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachSave(oData: any, fnFunction: any, oListener?: any): CodeViewer;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this <code>sap.ui.demokit.CodeViewer</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachPress(fnFunction: any, oListener: any): CodeViewer;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>save</code> event of this <code>sap.ui.demokit.CodeViewer</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachSave(fnFunction: any, oListener: any): CodeViewer;
			/**
			 * Creates a new subclass of class sap.ui.demokit.CodeViewer with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Fires event <code>press</code> to attached listeners.
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			firePress(mArguments?: any): CodeViewer;
			/**
			 * Fires event <code>save</code> to attached listeners.
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireSave(mArguments?: any): CodeViewer;
			/**
			 * Gets current value of property <code>editable</code>.
			 * 
			 * Whether the code can be edited or not
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>editable</code>
			 */
			getEditable(): boolean;
			/**
			 * Gets current value of property <code>height</code>.
			 * 
			 * The CSS height property
			 * @return Value of property <code>height</code>
			 */
			getHeight(): sap.ui.core.CSSSize;
			/**
			 * Gets current value of property <code>lineNumbering</code>.
			 * 
			 * Whether the code to have line numbering or not
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>lineNumbering</code>
			 */
			getLineNumbering(): boolean;
			/**
			 * Gets current value of property <code>source</code>.
			 * 
			 * The source code to display.
			 * @return Value of property <code>source</code>
			 */
			getSource(): string;
			/**
			 * Gets current value of property <code>visible</code>.
			 * 
			 * Whether the code viewer should be visible
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>visible</code>
			 */
			getVisible(): boolean;
			/**
			 * Gets current value of property <code>width</code>.
			 * 
			 * The CSS width property
			 * @return Value of property <code>width</code>
			 */
			getWidth(): sap.ui.core.CSSSize;
			/**
			 * Sets a new value for property <code>editable</code>.
			 * 
			 * Whether the code can be edited or not
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bEditable New value for property <code>editable</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setEditable(bEditable: boolean): CodeViewer;
			/**
			 * Sets a new value for property <code>height</code>.
			 * 
			 * The CSS height property
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sHeight New value for property <code>height</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setHeight(sHeight: sap.ui.core.CSSSize): CodeViewer;
			/**
			 * Sets a new value for property <code>lineNumbering</code>.
			 * 
			 * Whether the code to have line numbering or not
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bLineNumbering New value for property <code>lineNumbering</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setLineNumbering(bLineNumbering: boolean): CodeViewer;
			/**
			 * Sets a new value for property <code>source</code>.
			 * 
			 * The source code to display.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sSource New value for property <code>source</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSource(sSource: string): CodeViewer;
			/**
			 * Sets a new value for property <code>visible</code>.
			 * 
			 * Whether the code viewer should be visible
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bVisible New value for property <code>visible</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setVisible(bVisible: boolean): CodeViewer;
			/**
			 * Sets a new value for property <code>visible</code>.
			 * 
			 * Whether the control should be visible on the screen. If set to false, a placeholder is rendered instead of the real control
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @note Overload from base type sap.ui.core.Control
			 * @param bVisible New value for property <code>visible</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setVisible(bVisible: boolean): sap.ui.core.Control;
			/**
			 * Sets a new value for property <code>width</code>.
			 * 
			 * The CSS width property
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sWidth New value for property <code>width</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setWidth(sWidth: sap.ui.core.CSSSize): CodeViewer;
		}
	
		class FileUploadIntrospector extends sap.ui.core.Control {
			/**
			 * Constructor for a new FileUploadIntrospector.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.demokit.FileUploadIntrospectorMetadata);
			/**
			 * Constructor for a new FileUploadIntrospector.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.ui.demokit.FileUploadIntrospector with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets current value of property <code>autoRefreshInterval</code>.
			 * 
			 * Interval in milliseconds after which the content is checked again. values lower or equal to 0 mean 'no automatic refresh'.
			 * 
			 * Default value is <code>0</code>.
			 * @return Value of property <code>autoRefreshInterval</code>
			 */
			getAutoRefreshInterval(): string;
			/**
			 * Gets current value of property <code>height</code>.
			 * 
			 * (CSS) Height of the control
			 * @return Value of property <code>height</code>
			 */
			getHeight(): sap.ui.core.CSSSize;
			/**
			 * Gets current value of property <code>uploadUrl</code>.
			 * 
			 * The URL to check the upload content with....
			 * @return Value of property <code>uploadUrl</code>
			 */
			getUploadUrl(): string;
			/**
			 * Gets current value of property <code>width</code>.
			 * 
			 * Width of the file list
			 * @return Value of property <code>width</code>
			 */
			getWidth(): sap.ui.core.CSSSize;
			/**
			 * Trigger an explicit refresh of the displayed information
			 */
			refresh();
			/**
			 * Sets a new value for property <code>autoRefreshInterval</code>.
			 * 
			 * Interval in milliseconds after which the content is checked again. values lower or equal to 0 mean 'no automatic refresh'.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>0</code>.
			 * @param sAutoRefreshInterval New value for property <code>autoRefreshInterval</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setAutoRefreshInterval(sAutoRefreshInterval: string): FileUploadIntrospector;
			/**
			 * Sets a new value for property <code>height</code>.
			 * 
			 * (CSS) Height of the control
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sHeight New value for property <code>height</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setHeight(sHeight: sap.ui.core.CSSSize): FileUploadIntrospector;
			/**
			 * Sets a new value for property <code>uploadUrl</code>.
			 * 
			 * The URL to check the upload content with....
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sUploadUrl New value for property <code>uploadUrl</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setUploadUrl(sUploadUrl: string): FileUploadIntrospector;
			/**
			 * Sets a new value for property <code>width</code>.
			 * 
			 * Width of the file list
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sWidth New value for property <code>width</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setWidth(sWidth: sap.ui.core.CSSSize): FileUploadIntrospector;
		}
	
		class HexagonButton extends sap.ui.core.Control {
			/**
			 * Constructor for a new HexagonButton.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.demokit.HexagonButtonMetadata);
			/**
			 * Constructor for a new HexagonButton.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this <code>sap.ui.demokit.HexagonButton</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.demokit.HexagonButton</code> itself.
			 * 
			 * Fired when the user clicks the hex button
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.demokit.HexagonButton</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachPress(oData: any, fnFunction: any, oListener?: any): HexagonButton;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this <code>sap.ui.demokit.HexagonButton</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachPress(fnFunction: any, oListener: any): HexagonButton;
			/**
			 * Creates a new subclass of class sap.ui.demokit.HexagonButton with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Fires event <code>press</code> to attached listeners.
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			firePress(mArguments?: any): HexagonButton;
			/**
			 * Gets current value of property <code>color</code>.
			 * 
			 * The color of the hexagon
			 * 
			 * Default value is <code>blue</code>.
			 * @return Value of property <code>color</code>
			 */
			getColor(): string;
			/**
			 * Gets current value of property <code>enabled</code>.
			 * 
			 * Whether the button is enabled or not.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>enabled</code>
			 */
			getEnabled(): boolean;
			/**
			 * Gets current value of property <code>icon</code>.
			 * 
			 * Icon to display
			 * @return Value of property <code>icon</code>
			 */
			getIcon(): string;
			/**
			 * Gets current value of property <code>imagePosition</code>.
			 * 
			 * The position of the contained image. If not set the image is rendered with a fixed relative position.
			 * @return Value of property <code>imagePosition</code>
			 */
			getImagePosition(): string;
			/**
			 * Gets current value of property <code>position</code>.
			 * 
			 * The position. If set, the button is rendered with an absolute position.
			 * @return Value of property <code>position</code>
			 */
			getPosition(): string;
			/**
			 * Sets a new value for property <code>color</code>.
			 * 
			 * The color of the hexagon
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>blue</code>.
			 * @param sColor New value for property <code>color</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setColor(sColor: string): HexagonButton;
			/**
			 * Sets a new value for property <code>enabled</code>.
			 * 
			 * Whether the button is enabled or not.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bEnabled New value for property <code>enabled</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setEnabled(bEnabled: boolean): HexagonButton;
			/**
			 * Sets a new value for property <code>icon</code>.
			 * 
			 * Icon to display
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sIcon New value for property <code>icon</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setIcon(sIcon: string): HexagonButton;
			/**
			 * Sets a new value for property <code>imagePosition</code>.
			 * 
			 * The position of the contained image. If not set the image is rendered with a fixed relative position.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sImagePosition New value for property <code>imagePosition</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setImagePosition(sImagePosition: string): HexagonButton;
			/**
			 * Sets a new value for property <code>position</code>.
			 * 
			 * The position. If set, the button is rendered with an absolute position.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sPosition New value for property <code>position</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setPosition(sPosition: string): HexagonButton;
		}
	
		class HexagonButtonGroup extends sap.ui.core.Control {
			/**
			 * Constructor for a new HexagonButtonGroup.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.demokit.HexagonButtonGroupMetadata);
			/**
			 * Constructor for a new HexagonButtonGroup.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some button to the aggregation <code>buttons</code>.
			 * @param oButton the button to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addButton(oButton: HexagonButton): HexagonButtonGroup;
			/**
			 * Destroys all the buttons in the aggregation <code>buttons</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyButtons(): HexagonButtonGroup;
			/**
			 * Creates a new subclass of class sap.ui.demokit.HexagonButtonGroup with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets content of aggregation <code>buttons</code>.
			 * 
			 * The buttons to layout in a grid
			 * @return 
			 */
			getButtons(): HexagonButton[];
			/**
			 * Gets current value of property <code>colspan</code>.
			 * 
			 * How many buttons might be placed in the same row of the grid
			 * 
			 * Default value is <code>3</code>.
			 * @return Value of property <code>colspan</code>
			 */
			getColspan(): number;
			/**
			 * Checks for the provided <code>sap.ui.demokit.HexagonButton</code> in the aggregation <code>buttons</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oButton The button whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfButton(oButton: HexagonButton): number;
			/**
			 * Inserts a button into the aggregation <code>buttons</code>.
			 * @param oButton the button to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the button should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the button is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the button is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertButton(oButton: HexagonButton, iIndex: number): HexagonButtonGroup;
			/**
			 * Removes all the controls from the aggregation <code>buttons</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllButtons(): HexagonButton[];
			/**
			 * Removes a button from the aggregation <code>buttons</code>.
			 * @param vButton The button to remove or its index or id
			 * @return The removed button or <code>null</code>
			 */
			removeButton(vButton: number|string|HexagonButton): HexagonButton;
			/**
			 * Sets a new value for property <code>colspan</code>.
			 * 
			 * How many buttons might be placed in the same row of the grid
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>3</code>.
			 * @param iColspan New value for property <code>colspan</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setColspan(iColspan: number): HexagonButtonGroup;
		}
	
		class IndexLayout extends sap.ui.core.Control {
			/**
			 * Constructor for a new IndexLayout.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.demokit.IndexLayoutMetadata);
			/**
			 * Constructor for a new IndexLayout.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some content to the aggregation <code>content</code>.
			 * @param oContent the content to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addContent(oContent: sap.ui.core.Control): IndexLayout;
			/**
			 * Destroys all the content in the aggregation <code>content</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyContent(): IndexLayout;
			/**
			 * Creates a new subclass of class sap.ui.demokit.IndexLayout with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets content of aggregation <code>content</code>.
			 * 
			 * The content items
			 * @return 
			 */
			getContent(): sap.ui.core.Control[];
			/**
			 * Gets current value of property <code>enableScaling</code>.
			 * 
			 * Whether the given item width/height should be scaled according to the screen size.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>enableScaling</code>
			 */
			getEnableScaling(): boolean;
			/**
			 * Gets current value of property <code>itemHeight</code>.
			 * 
			 * The height of a content item. Only px values are allowed.
			 * 
			 * Default value is <code>200px</code>.
			 * @return Value of property <code>itemHeight</code>
			 */
			getItemHeight(): sap.ui.core.CSSSize;
			/**
			 * Gets current value of property <code>itemWidth</code>.
			 * 
			 * The width of a content item. Only px values are allowed.
			 * 
			 * Default value is <code>200px</code>.
			 * @return Value of property <code>itemWidth</code>
			 */
			getItemWidth(): sap.ui.core.CSSSize;
			/**
			 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oContent The content whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfContent(oContent: sap.ui.core.Control): number;
			/**
			 * Inserts a content into the aggregation <code>content</code>.
			 * @param oContent the content to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the content should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the content is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertContent(oContent: sap.ui.core.Control, iIndex: number): IndexLayout;
			/**
			 * Removes all the controls from the aggregation <code>content</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllContent(): sap.ui.core.Control[];
			/**
			 * Removes a content from the aggregation <code>content</code>.
			 * @param vContent The content to remove or its index or id
			 * @return The removed content or <code>null</code>
			 */
			removeContent(vContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
			/**
			 * Sets a new value for property <code>enableScaling</code>.
			 * 
			 * Whether the given item width/height should be scaled according to the screen size.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bEnableScaling New value for property <code>enableScaling</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setEnableScaling(bEnableScaling: boolean): IndexLayout;
			/**
			 * Sets a new value for property <code>itemHeight</code>.
			 * 
			 * The height of a content item. Only px values are allowed.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>200px</code>.
			 * @param sItemHeight New value for property <code>itemHeight</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setItemHeight(sItemHeight: sap.ui.core.CSSSize): IndexLayout;
			/**
			 * Sets a new value for property <code>itemWidth</code>.
			 * 
			 * The width of a content item. Only px values are allowed.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>200px</code>.
			 * @param sItemWidth New value for property <code>itemWidth</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setItemWidth(sItemWidth: sap.ui.core.CSSSize): IndexLayout;
		}
	
		class Tag extends sap.ui.core.Element {
			/**
			 * Constructor for a new Tag.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.demokit.TagMetadata);
			/**
			 * Constructor for a new Tag.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.ui.demokit.Tag with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets current value of property <code>text</code>.
			 * 
			 * The text to be disaplyed for this tag.
			 * @return Value of property <code>text</code>
			 */
			getText(): string;
			/**
			 * Gets current value of property <code>weight</code>.
			 * 
			 * The weight for this tag. Can be any integer value.
			 * 
			 * Default value is <code>1</code>.
			 * @return Value of property <code>weight</code>
			 */
			getWeight(): number;
			/**
			 * Sets a new value for property <code>text</code>.
			 * 
			 * The text to be disaplyed for this tag.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sText New value for property <code>text</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setText(sText: string): Tag;
			/**
			 * Sets a new value for property <code>weight</code>.
			 * 
			 * The weight for this tag. Can be any integer value.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>1</code>.
			 * @param iWeight New value for property <code>weight</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setWeight(iWeight: number): Tag;
		}
	
		class TagCloud extends sap.ui.core.Control {
			/**
			 * Constructor for a new TagCloud.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.demokit.TagCloudMetadata);
			/**
			 * Constructor for a new TagCloud.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some tag to the aggregation <code>tags</code>.
			 * @param oTag the tag to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addTag(oTag: Tag): TagCloud;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this <code>sap.ui.demokit.TagCloud</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.demokit.TagCloud</code> itself.
			 * 
			 * Fired when a Tag is clicked.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.demokit.TagCloud</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachPress(oData: any, fnFunction: any, oListener?: any): TagCloud;
			/**
			 * Destroys all the tags in the aggregation <code>tags</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyTags(): TagCloud;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this <code>sap.ui.demokit.TagCloud</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachPress(fnFunction: any, oListener: any): TagCloud;
			/**
			 * Creates a new subclass of class sap.ui.demokit.TagCloud with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Fires event <code>press</code> to attached listeners.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>tagId</code> of type <code>string</code>Id of the selected Tag.</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			firePress(mArguments?: any): TagCloud;
			/**
			 * Gets current value of property <code>maxFontSize</code>.
			 * 
			 * Maximum font size that may be chosen for a tag in this cloud
			 * 
			 * Default value is <code>30</code>.
			 * @return Value of property <code>maxFontSize</code>
			 */
			getMaxFontSize(): number;
			/**
			 * Gets current value of property <code>minFontSize</code>.
			 * 
			 * Minimum font size that must be used for a tag in this cloud
			 * 
			 * Default value is <code>10</code>.
			 * @return Value of property <code>minFontSize</code>
			 */
			getMinFontSize(): number;
			/**
			 * Gets content of aggregation <code>tags</code>.
			 * 
			 * The tags displayed in this tag cloud
			 * @return 
			 */
			getTags(): Tag[];
			/**
			 * Checks for the provided <code>sap.ui.demokit.Tag</code> in the aggregation <code>tags</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oTag The tag whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfTag(oTag: Tag): number;
			/**
			 * Inserts a tag into the aggregation <code>tags</code>.
			 * @param oTag the tag to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the tag should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the tag is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the tag is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertTag(oTag: Tag, iIndex: number): TagCloud;
			/**
			 * Removes all the controls from the aggregation <code>tags</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllTags(): Tag[];
			/**
			 * Removes a tag from the aggregation <code>tags</code>.
			 * @param vTag The tag to remove or its index or id
			 * @return The removed tag or <code>null</code>
			 */
			removeTag(vTag: number|string|Tag): Tag;
			/**
			 * Sets a new value for property <code>maxFontSize</code>.
			 * 
			 * Maximum font size that may be chosen for a tag in this cloud
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>30</code>.
			 * @param iMaxFontSize New value for property <code>maxFontSize</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setMaxFontSize(iMaxFontSize: number): TagCloud;
			/**
			 * Sets a new value for property <code>minFontSize</code>.
			 * 
			 * Minimum font size that must be used for a tag in this cloud
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>10</code>.
			 * @param iMinFontSize New value for property <code>minFontSize</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setMinFontSize(iMinFontSize: number): TagCloud;
		}
	
		class UI5EntityCueCard extends sap.ui.core.Control {
			/**
			 * Constructor for a new UI5EntityCueCard.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.demokit.UI5EntityCueCardMetadata);
			/**
			 * Constructor for a new UI5EntityCueCard.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>navigate</code> event of this <code>sap.ui.demokit.UI5EntityCueCard</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.demokit.UI5EntityCueCard</code> itself.
			 * 
			 * Fired when a link for a type is activated (clicked) by the user.
			 * 
			 * When property "navigable" is set to true, type links are created for the types of properties, aggregations and associations, for the types of event or method parameters and for the return types of methods (if not void).
			 * 
			 * The default behavior for this event is to set the entityName property to the clicked entityName. Applications can prevent the default by calling the corresponding method on the event object.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.demokit.UI5EntityCueCard</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachNavigate(oData: any, fnFunction: any, oListener?: any): UI5EntityCueCard;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>navigate</code> event of this <code>sap.ui.demokit.UI5EntityCueCard</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachNavigate(fnFunction: any, oListener: any): UI5EntityCueCard;
			/**
			 * Creates a new subclass of class sap.ui.demokit.UI5EntityCueCard with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Fires event <code>navigate</code> to attached listeners.
			 * 
			 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>entityName</code> of type <code>string</code>Name of the entity (control or type) that has been clicked.</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Whether or not to prevent the default action
			 */
			fireNavigate(mArguments?: any): boolean;
			/**
			 * Gets current value of property <code>collapsible</code>.
			 * 
			 * Whether the cue card can be collapsed at all. When set to true, the value of property expanded determines the current collapsed/expanded state. When false, the control is always expanded.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>collapsible</code>
			 */
			getCollapsible(): boolean;
			/**
			 * Gets current value of property <code>entityName</code>.
			 * 
			 * Qualified name of the control or type to show the documentation for. The name can be specified in the metamodel notation ('sap.ui.core/Control' or in the UI5 resource notation (sap.ui.core.Control).
			 * @return Value of property <code>entityName</code>
			 */
			getEntityName(): string;
			/**
			 * Gets current value of property <code>expanded</code>.
			 * 
			 * Whether the cue card is currently expanded.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>expanded</code>
			 */
			getExpanded(): boolean;
			/**
			 * Gets current value of property <code>navigable</code>.
			 * 
			 * Whether type information is navigable. Also see event 'navigate'.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>navigable</code>
			 */
			getNavigable(): boolean;
			/**
			 * Gets current value of property <code>style</code>.
			 * 
			 * Style of the cue card.
			 * @return Value of property <code>style</code>
			 */
			getStyle(): any;
			/**
			 * Sets a new value for property <code>collapsible</code>.
			 * 
			 * Whether the cue card can be collapsed at all. When set to true, the value of property expanded determines the current collapsed/expanded state. When false, the control is always expanded.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bCollapsible New value for property <code>collapsible</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setCollapsible(bCollapsible: boolean): UI5EntityCueCard;
			/**
			 * Sets a new value for property <code>entityName</code>.
			 * 
			 * Qualified name of the control or type to show the documentation for. The name can be specified in the metamodel notation ('sap.ui.core/Control' or in the UI5 resource notation (sap.ui.core.Control).
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sEntityName New value for property <code>entityName</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setEntityName(sEntityName: string): UI5EntityCueCard;
			/**
			 * Sets a new value for property <code>expanded</code>.
			 * 
			 * Whether the cue card is currently expanded.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bExpanded New value for property <code>expanded</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setExpanded(bExpanded: boolean): UI5EntityCueCard;
			/**
			 * Sets a new value for property <code>navigable</code>.
			 * 
			 * Whether type information is navigable. Also see event 'navigate'.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bNavigable New value for property <code>navigable</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setNavigable(bNavigable: boolean): UI5EntityCueCard;
			/**
			 * Sets a new value for property <code>style</code>.
			 * 
			 * Style of the cue card.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sStyle New value for property <code>style</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setStyle(sStyle: any): UI5EntityCueCard;
		}
	
		class UIAreaSubstitute extends sap.ui.core.Element {
			/**
			 * Constructor for a new UIAreaSubstitute.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some content to the aggregation <code>content</code>.
			 * @param oContent the content to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addContent(oContent: sap.ui.core.Control): UIAreaSubstitute;
			/**
			 * Destroys all the content in the aggregation <code>content</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyContent(): UIAreaSubstitute;
			/**
			 * Creates a new subclass of class sap.ui.demokit.UIAreaSubstitute with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets content of aggregation <code>content</code>.
			 * 
			 * Content Area used for the running sample code
			 * @return 
			 */
			getContent(): sap.ui.core.Control[];
			/**
			 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oContent The content whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfContent(oContent: sap.ui.core.Control): number;
			/**
			 * Inserts a content into the aggregation <code>content</code>.
			 * @param oContent the content to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the content should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the content is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertContent(oContent: sap.ui.core.Control, iIndex: number): UIAreaSubstitute;
			/**
			 * Removes all the controls from the aggregation <code>content</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllContent(): sap.ui.core.Control[];
			/**
			 * Removes a content from the aggregation <code>content</code>.
			 * @param vContent The content to remove or its index or id
			 * @return The removed content or <code>null</code>
			 */
			removeContent(vContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
		}
	
		interface CodeSampleContainerMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * Id of the script element that contains the initial sample code for this code sample.
			 */
			scriptElementId?: string;
			/**
			 * Id of the container for the running code. This Id can be used in calls to sap.ui.setRoot as if it would be a normal UIArea. Internally, a container UIElement is created with that Id.
			 */
			uiAreaId?: string;
			/**
			 * A title to be displayed above the code.
			 */
			title?: string;
			/**
			 * Whether the source code is visible or not.
			 * @default false
			 */
			sourceVisible?: boolean;
			/**
			 * Width of the CodeSample container.
			 * @default 90%
			 */
			width?: sap.ui.core.CSSSize;
		}
	
		interface CodeViewerMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * The source code to display.
			 */
			source?: string;
			/**
			 * The CSS width property
			 */
			width?: sap.ui.core.CSSSize;
			/**
			 * The CSS height property
			 */
			height?: sap.ui.core.CSSSize;
			/**
			 * Whether the code can be edited or not
			 * @default false
			 */
			editable?: boolean;
			/**
			 * Whether the code to have line numbering or not
			 * @default false
			 */
			lineNumbering?: boolean;
			/**
			 * Whether the code viewer should be visible
			 * @default true
			 */
			visible?: boolean;
		}
	
		interface FileUploadIntrospectorMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * The URL to check the upload content with....
			 */
			uploadUrl?: string;
			/**
			 * Interval in milliseconds after which the content is checked again. values lower or equal to 0 mean 'no automatic refresh'.
			 * @default 0
			 */
			autoRefreshInterval?: string;
			/**
			 * (CSS) Height of the control
			 */
			height?: sap.ui.core.CSSSize;
			/**
			 * Width of the file list
			 */
			width?: sap.ui.core.CSSSize;
		}
	
		interface HexagonButtonMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * Icon to display
			 */
			icon?: string;
			/**
			 * The color of the hexagon
			 * @default blue
			 */
			color?: string;
			/**
			 * The position. If set, the button is rendered with an absolute position.
			 */
			position?: string;
			/**
			 * Whether the button is enabled or not.
			 * @default true
			 */
			enabled?: boolean;
			/**
			 * The position of the contained image. If not set the image is rendered with a fixed relative position.
			 */
			imagePosition?: string;
		}
	
		interface HexagonButtonGroupMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * How many buttons might be placed in the same row of the grid
			 * @default 3
			 */
			colspan?: number;
		}
	
		interface IndexLayoutMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * The width of a content item. Only px values are allowed.
			 * @default 200px
			 */
			itemWidth?: sap.ui.core.CSSSize;
			/**
			 * The height of a content item. Only px values are allowed.
			 * @default 200px
			 */
			itemHeight?: sap.ui.core.CSSSize;
			/**
			 * Whether the given item width/height should be scaled according to the screen size.
			 * @default true
			 */
			enableScaling?: boolean;
		}
	
		interface TagMetadata {
			/**
			 * The text to be disaplyed for this tag.
			 */
			text?: string;
			/**
			 * The weight for this tag. Can be any integer value.
			 * @default 1
			 */
			weight?: number;
		}
	
		interface TagCloudMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * Maximum font size that may be chosen for a tag in this cloud
			 * @default 30
			 */
			maxFontSize?: number;
			/**
			 * Minimum font size that must be used for a tag in this cloud
			 * @default 10
			 */
			minFontSize?: number;
		}
	
		interface UI5EntityCueCardMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * Whether the cue card can be collapsed at all. When set to true, the value of property expanded determines the current collapsed/expanded state. When false, the control is always expanded.
			 * @default true
			 */
			collapsible?: boolean;
			/**
			 * Whether the cue card is currently expanded.
			 * @default false
			 */
			expanded?: boolean;
			/**
			 * Whether type information is navigable. Also see event 'navigate'.
			 * @default false
			 */
			navigable?: boolean;
			/**
			 * Qualified name of the control or type to show the documentation for. The name can be specified in the metamodel notation ('sap.ui.core/Control' or in the UI5 resource notation (sap.ui.core.Control).
			 */
			entityName?: string;
			/**
			 * Style of the cue card.
			 */
			style?: any;
		}
	}

	/**
	 * SAPUI5 library with layout controls.
	 */
	namespace layout {
	
		namespace form {
		
			class Form extends sap.ui.core.Control {
				/**
				 * Constructor for a new sap.ui.layout.form.Form.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: sap.ui.layout.form.FormMetadata);
				/**
				 * Constructor for a new sap.ui.layout.form.Form.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @note Any overloads to support not documented metadata
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
				 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): Form;
				/**
				 * Adds some formContainer to the aggregation <code>formContainers</code>.
				 * @param oFormContainer the formContainer to add; if empty, nothing is inserted
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				addFormContainer(oFormContainer: FormContainer): Form;
				/**
				 * Destroys all the formContainers in the aggregation <code>formContainers</code>.
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				destroyFormContainers(): Form;
				/**
				 * Destroys the layout in the aggregation <code>layout</code>.
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				destroyLayout(): Form;
				/**
				 * Destroys the title in the aggregation <code>title</code>.
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				destroyTitle(): Form;
				/**
				 * Destroys the toolbar in the aggregation <code>toolbar</code>.
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				destroyToolbar(): Form;
				/**
				 * Creates a new subclass of class sap.ui.layout.form.Form with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
				 * @return 
				 */
				getAriaLabelledBy(): sap.ui.core.ID[];
				/**
				 * Gets current value of property <code>editable</code>.
				 * 
				 * Applies a device and theme specific line-height to the form rows if the form has editable content.
				 * If set, all (not only the editable) rows of the form will get the line height of editable fields.
				 * The accessibility aria-readonly attribute is set according to this property.
				 * <b>Note:</b> The setting of the property has no influence on the editable functionality of the form's content.
				 * 
				 * Default value is <code>false</code>.
				 * @return Value of property <code>editable</code>
				 */
				getEditable(): boolean;
				/**
				 * Gets content of aggregation <code>formContainers</code>.
				 * 
				 * Containers with the content of the form. A <code>FormContainer</code> represents a group inside the <code>Form</code>.
				 * @return 
				 */
				getFormContainers(): FormContainer[];
				/**
				 * Gets content of aggregation <code>layout</code>.
				 * 
				 * Layout of the <code>Form</code>. The assigned <code>Layout</code> renders the <code>Form</code>.
				 * We suggest using the <code>ResponsiveGridLayout</code> for rendering a <code>Form</code>, as its responsiveness allows the available space to be used in the best way possible.
				 * @return 
				 */
				getLayout(): FormLayout;
				/**
				 * Gets content of aggregation <code>title</code>.
				 * 
				 * Title of the <code>Form</code>. Can either be a <code>Title</code> object, or a string.
				 * If a <code>Title</code> object it used, the style of the title can be set.
				 * 
				 * <b>Note:</b> If a <code>Toolbar</code> is used, the <code>Title</code> is ignored.
				 * @return 
				 */
				getTitle(): sap.ui.core.Title|string;
				/**
				 * Gets content of aggregation <code>toolbar</code>.
				 * 
				 * Toolbar of the <code>Form</code>.
				 * 
				 * <b>Note:</b> If a <code>Toolbar</code> is used, the <code>Title</code> is ignored.
				 * If a title is needed inside the <code>Toolbar</code> it must be added at content to the <code>Toolbar</code>.
				 * In this case add the <code>Title</code> to the <code>ariaLabelledBy</code> association.
				 * @return 
				 */
				getToolbar(): sap.ui.core.Toolbar;
				/**
				 * Gets current value of property <code>width</code>.
				 * 
				 * Width of the <code>Form</code>.
				 * @return Value of property <code>width</code>
				 */
				getWidth(): sap.ui.core.CSSSize;
				/**
				 * Checks for the provided <code>sap.ui.layout.form.FormContainer</code> in the aggregation <code>formContainers</code>.
				 * and returns its index if found or -1 otherwise.
				 * @param oFormContainer The formContainer whose index is looked for
				 * @return The index of the provided control in the aggregation if found, or -1 otherwise
				 */
				indexOfFormContainer(oFormContainer: FormContainer): number;
				/**
				 * Inserts a formContainer into the aggregation <code>formContainers</code>.
				 * @param oFormContainer the formContainer to insert; if empty, nothing is inserted
				 * @param iIndex the <code>0</code>-based index the formContainer should be inserted at; for
				 *              a negative value of <code>iIndex</code>, the formContainer is inserted at position 0; for a value
				 *              greater than the current size of the aggregation, the formContainer is inserted at
				 *              the last position
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				insertFormContainer(oFormContainer: FormContainer, iIndex: number): Form;
				/**
				 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
				 * @return An array of the removed elements (might be empty)
				 */
				removeAllAriaLabelledBy(): sap.ui.core.ID[];
				/**
				 * Removes all the controls from the aggregation <code>formContainers</code>.
				 * 
				 * Additionally, it unregisters them from the hosting UIArea.
				 * @return An array of the removed elements (might be empty)
				 */
				removeAllFormContainers(): FormContainer[];
				/**
				 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
				 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
				 * @return The removed ariaLabelledBy or <code>null</code>
				 */
				removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
				/**
				 * Removes a formContainer from the aggregation <code>formContainers</code>.
				 * @param vFormContainer The formContainer to remove or its index or id
				 * @return The removed formContainer or <code>null</code>
				 */
				removeFormContainer(vFormContainer: number|string|FormContainer): FormContainer;
				/**
				 * Sets a new value for property <code>editable</code>.
				 * 
				 * Applies a device and theme specific line-height to the form rows if the form has editable content.
				 * If set, all (not only the editable) rows of the form will get the line height of editable fields.
				 * The accessibility aria-readonly attribute is set according to this property.
				 * <b>Note:</b> The setting of the property has no influence on the editable functionality of the form's content.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>false</code>.
				 * @param bEditable New value for property <code>editable</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setEditable(bEditable: boolean): Form;
				/**
				 * Sets the aggregated <code>layout</code>.
				 * @param oLayout The layout to set
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setLayout(oLayout: FormLayout): Form;
				/**
				 * Sets the aggregated <code>title</code>.
				 * @param vTitle The title to set
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setTitle(vTitle: sap.ui.core.Title|string): Form;
				/**
				 * Sets the aggregated <code>toolbar</code>.
				 * @param oToolbar The toolbar to set
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setToolbar(oToolbar: sap.ui.core.Toolbar): Form;
				/**
				 * Sets a new value for property <code>width</code>.
				 * 
				 * Width of the <code>Form</code>.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sWidth New value for property <code>width</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setWidth(sWidth: sap.ui.core.CSSSize): Form;
			}
		
			class FormContainer extends sap.ui.core.Element {
				/**
				 * Constructor for a new sap.ui.layout.form.FormContainer.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param sId Id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: sap.ui.layout.form.FormContainerMetadata);
				/**
				 * Constructor for a new sap.ui.layout.form.FormContainer.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @note Any overloads to support not documented metadata
				 * @param sId Id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
				 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): FormContainer;
				/**
				 * Adds some formElement to the aggregation <code>formElements</code>.
				 * @param oFormElement the formElement to add; if empty, nothing is inserted
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				addFormElement(oFormElement: FormElement): FormContainer;
				/**
				 * Destroys all the formElements in the aggregation <code>formElements</code>.
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				destroyFormElements(): FormContainer;
				/**
				 * Destroys the title in the aggregation <code>title</code>.
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				destroyTitle(): FormContainer;
				/**
				 * Destroys the toolbar in the aggregation <code>toolbar</code>.
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				destroyToolbar(): FormContainer;
				/**
				 * Creates a new subclass of class sap.ui.layout.form.FormContainer with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
				 * @return 
				 */
				getAriaLabelledBy(): sap.ui.core.ID[];
				/**
				 * Gets current value of property <code>expandable</code>.
				 * 
				 * Defines if the <code>FormContainer</code> is expandable.
				 * <b>Note:</b> The expander icon will only be shown if a <code>title</code> is set for the <code>FormContainer</code>.
				 * 
				 * Default value is <code>false</code>.
				 * @return Value of property <code>expandable</code>
				 */
				getExpandable(): boolean;
				/**
				 * Gets current value of property <code>expanded</code>.
				 * 
				 * Container is expanded.
				 * <b>Note:</b> This property only works if <code>expandable</code> is set to <code>true</code>.
				 * 
				 * Default value is <code>true</code>.
				 * @return Value of property <code>expanded</code>
				 */
				getExpanded(): boolean;
				/**
				 * Gets content of aggregation <code>formElements</code>.
				 * 
				 * The <code>FormElements</code> contain the content (labels and fields) of the <code>FormContainers</code>.
				 * @return 
				 */
				getFormElements(): FormElement[];
				/**
				 * Gets content of aggregation <code>title</code>.
				 * 
				 * Title of the <code>FormContainer</code>. Can either be a <code>Title</code> object, or a string.
				 * If a <code>Title</code> object is used, the style of the title can be set.
				 * 
				 * <b>Note:</b> If a <code>Toolbar</code> is used, the <code>Title</code> is ignored.
				 * @return 
				 */
				getTitle(): sap.ui.core.Title|string;
				/**
				 * Gets content of aggregation <code>toolbar</code>.
				 * 
				 * Toolbar of the <code>FormContainer</code>.
				 * 
				 * <b>Note:</b> If a <code>Toolbar</code> is used, the <code>Title</code> is ignored.
				 * If a title is needed inside the <code>Toolbar</code> it must be added at content to the <code>Toolbar</code>.
				 * In this case add the <code>Title</code> to the <code>ariaLabelledBy</code> association.
				 * @return 
				 */
				getToolbar(): sap.ui.core.Toolbar;
				/**
				 * Gets current value of property <code>visible</code>.
				 * 
				 * If set to <code>false</code>, the <code>FormContainer</code> is not rendered.
				 * 
				 * Default value is <code>true</code>.
				 * @return Value of property <code>visible</code>
				 */
				getVisible(): boolean;
				/**
				 * Checks for the provided <code>sap.ui.layout.form.FormElement</code> in the aggregation <code>formElements</code>.
				 * and returns its index if found or -1 otherwise.
				 * @param oFormElement The formElement whose index is looked for
				 * @return The index of the provided control in the aggregation if found, or -1 otherwise
				 */
				indexOfFormElement(oFormElement: FormElement): number;
				/**
				 * Inserts a formElement into the aggregation <code>formElements</code>.
				 * @param oFormElement the formElement to insert; if empty, nothing is inserted
				 * @param iIndex the <code>0</code>-based index the formElement should be inserted at; for
				 *              a negative value of <code>iIndex</code>, the formElement is inserted at position 0; for a value
				 *              greater than the current size of the aggregation, the formElement is inserted at
				 *              the last position
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				insertFormElement(oFormElement: FormElement, iIndex: number): FormContainer;
				/**
				 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
				 * @return An array of the removed elements (might be empty)
				 */
				removeAllAriaLabelledBy(): sap.ui.core.ID[];
				/**
				 * Removes all the controls from the aggregation <code>formElements</code>.
				 * 
				 * Additionally, it unregisters them from the hosting UIArea.
				 * @return An array of the removed elements (might be empty)
				 */
				removeAllFormElements(): FormElement[];
				/**
				 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
				 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
				 * @return The removed ariaLabelledBy or <code>null</code>
				 */
				removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
				/**
				 * Removes a formElement from the aggregation <code>formElements</code>.
				 * @param vFormElement The formElement to remove or its index or id
				 * @return The removed formElement or <code>null</code>
				 */
				removeFormElement(vFormElement: number|string|FormElement): FormElement;
				/**
				 * Sets a new value for property <code>expandable</code>.
				 * 
				 * Defines if the <code>FormContainer</code> is expandable.
				 * <b>Note:</b> The expander icon will only be shown if a <code>title</code> is set for the <code>FormContainer</code>.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>false</code>.
				 * @param bExpandable New value for property <code>expandable</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setExpandable(bExpandable: boolean): FormContainer;
				/**
				 * Sets a new value for property <code>expanded</code>.
				 * 
				 * Container is expanded.
				 * <b>Note:</b> This property only works if <code>expandable</code> is set to <code>true</code>.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>true</code>.
				 * @param bExpanded New value for property <code>expanded</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setExpanded(bExpanded: boolean): FormContainer;
				/**
				 * Sets the aggregated <code>title</code>.
				 * @param vTitle The title to set
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setTitle(vTitle: sap.ui.core.Title|string): FormContainer;
				/**
				 * Sets the aggregated <code>toolbar</code>.
				 * @param oToolbar The toolbar to set
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setToolbar(oToolbar: sap.ui.core.Toolbar): FormContainer;
				/**
				 * Sets a new value for property <code>visible</code>.
				 * 
				 * If set to <code>false</code>, the <code>FormContainer</code> is not rendered.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>true</code>.
				 * @param bVisible New value for property <code>visible</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setVisible(bVisible: boolean): FormContainer;
			}
		
			class FormElement extends sap.ui.core.Element {
				/**
				 * Constructor for a new sap.ui.layout.form.FormElement.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param sId Id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: sap.ui.layout.form.FormElementMetadata);
				/**
				 * Constructor for a new sap.ui.layout.form.FormElement.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @note Any overloads to support not documented metadata
				 * @param sId Id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Adds some field to the aggregation <code>fields</code>.
				 * @param oField the field to add; if empty, nothing is inserted
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				addField(oField: sap.ui.core.Control): FormElement;
				/**
				 * Destroys all the fields in the aggregation <code>fields</code>.
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				destroyFields(): FormElement;
				/**
				 * Destroys the label in the aggregation <code>label</code>.
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				destroyLabel(): FormElement;
				/**
				 * Creates a new subclass of class sap.ui.layout.form.FormElement with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Gets content of aggregation <code>fields</code>.
				 * 
				 * Formular controls that belong together to be displayed in one row of a <code>Form</code>.
				 * 
				 * <b>Note:</b> Do not put any layout controls in here. This could destroy the visual layout,
				 * keyboard support and screen-reader support.
				 * @return 
				 */
				getFields(): sap.ui.core.Control[];
				/**
				 * Gets content of aggregation <code>label</code>.
				 * 
				 * Label of the fields. Can either be a <code>Label</code> object, or a string.
				 * If a <code>Label</code> object is used, the properties of the <code>Label</code> can be set.
				 * If no assignment between <code>Label</code> and the fields is set, it will be done automatically by the
				 * <code>FormElement</code>. In this case the <code>Label</code> is assigned to the fields of the <code>FormElement</code>.
				 * @return 
				 */
				getLabel(): sap.ui.core.Label|string;
				/**
				 * Returns the <code>Label</code> of the <code>FormElement</code>, even if the <code>Label</code> is assigned as string.
				 * The <code>FormLayout</code> needs the information of the label to render the <code>Form</code>.
				 * @return <code>Label</code> control used to render the label
				 */
				getLabelControl(): sap.ui.core.Label;
				/**
				 * Gets current value of property <code>visible</code>.
				 * 
				 * If set to <code>false</code>, the <code>FormElement</code> is not rendered.
				 * 
				 * Default value is <code>true</code>.
				 * @return Value of property <code>visible</code>
				 */
				getVisible(): boolean;
				/**
				 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>fields</code>.
				 * and returns its index if found or -1 otherwise.
				 * @param oField The field whose index is looked for
				 * @return The index of the provided control in the aggregation if found, or -1 otherwise
				 */
				indexOfField(oField: sap.ui.core.Control): number;
				/**
				 * Inserts a field into the aggregation <code>fields</code>.
				 * @param oField the field to insert; if empty, nothing is inserted
				 * @param iIndex the <code>0</code>-based index the field should be inserted at; for
				 *              a negative value of <code>iIndex</code>, the field is inserted at position 0; for a value
				 *              greater than the current size of the aggregation, the field is inserted at
				 *              the last position
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				insertField(oField: sap.ui.core.Control, iIndex: number): FormElement;
				/**
				 * Removes all the controls from the aggregation <code>fields</code>.
				 * 
				 * Additionally, it unregisters them from the hosting UIArea.
				 * @return An array of the removed elements (might be empty)
				 */
				removeAllFields(): sap.ui.core.Control[];
				/**
				 * Removes a field from the aggregation <code>fields</code>.
				 * @param vField The field to remove or its index or id
				 * @return The removed field or <code>null</code>
				 */
				removeField(vField: number|string|sap.ui.core.Control): sap.ui.core.Control;
				/**
				 * Sets the aggregated <code>label</code>.
				 * @param vLabel The label to set
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setLabel(vLabel: sap.ui.core.Label|string): FormElement;
				/**
				 * Sets a new value for property <code>visible</code>.
				 * 
				 * If set to <code>false</code>, the <code>FormElement</code> is not rendered.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>true</code>.
				 * @param bVisible New value for property <code>visible</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setVisible(bVisible: boolean): FormElement;
			}
		
			class FormLayout extends sap.ui.core.Control {
				/**
				 * Constructor for a new sap.ui.layout.form.FormLayout.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param sId Id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: sap.ui.layout.form.FormLayoutMetadata);
				/**
				 * Constructor for a new sap.ui.layout.form.FormLayout.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @note Any overloads to support not documented metadata
				 * @param sId Id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Creates a new subclass of class sap.ui.layout.form.FormLayout with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Gets current value of property <code>backgroundDesign</code>.
				 * 
				 * Specifies the background color of the <code>Form</code> content.
				 * 
				 * The visualization of the different options depends on the used theme.
				 * 
				 * Default value is <code>Translucent</code>.
				 * @return Value of property <code>backgroundDesign</code>
				 */
				getBackgroundDesign(): sap.ui.layout.BackgroundDesign;
				/**
				 * Sets a new value for property <code>backgroundDesign</code>.
				 * 
				 * Specifies the background color of the <code>Form</code> content.
				 * 
				 * The visualization of the different options depends on the used theme.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>Translucent</code>.
				 * @param sBackgroundDesign New value for property <code>backgroundDesign</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setBackgroundDesign(sBackgroundDesign: sap.ui.layout.BackgroundDesign): FormLayout;
			}
		
			class GridContainerData extends sap.ui.core.LayoutData {
				/**
				 * Constructor for a new sap.ui.layout.form.GridContainerData.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param sId Id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: sap.ui.layout.form.GridContainerDataMetadata);
				/**
				 * Constructor for a new sap.ui.layout.form.GridContainerData.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @note Any overloads to support not documented metadata
				 * @param sId Id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Creates a new subclass of class sap.ui.layout.form.GridContainerData with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Gets current value of property <code>halfGrid</code>.
				 * 
				 * If set, the container takes half the width of the <code>Form</code> (8 cells), if not it takes the full width (16 cells).
				 * If the <code>GridLayout</code> is set to <code>singleColumn</code>, the full width of the grid is only 8 cells. So containers are rendered only once per row.
				 * 
				 * Default value is <code>false</code>.
				 * @return Value of property <code>halfGrid</code>
				 */
				getHalfGrid(): boolean;
				/**
				 * Sets a new value for property <code>halfGrid</code>.
				 * 
				 * If set, the container takes half the width of the <code>Form</code> (8 cells), if not it takes the full width (16 cells).
				 * If the <code>GridLayout</code> is set to <code>singleColumn</code>, the full width of the grid is only 8 cells. So containers are rendered only once per row.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>false</code>.
				 * @param bHalfGrid New value for property <code>halfGrid</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setHalfGrid(bHalfGrid: boolean): GridContainerData;
			}
		
			class GridElementData extends sap.ui.core.LayoutData {
				/**
				 * Constructor for a new sap.ui.layout.form.GridElementData.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param sId Id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: sap.ui.layout.form.GridElementDataMetadata);
				/**
				 * Constructor for a new sap.ui.layout.form.GridElementData.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @note Any overloads to support not documented metadata
				 * @param sId Id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Creates a new subclass of class sap.ui.layout.form.GridElementData with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Gets current value of property <code>hCells</code>.
				 * 
				 * Number of cells in horizontal direction.
				 * If set to "auto" the size is determined by the number of fields and the available cells. For labels the auto size is 3 cells.
				 * If set to "full" only one field is allowed within the <code>FormElement</code>. It gets the full width of the row and the label is displayed above. <b>Note:</b> For labels full size has no effect.
				 * 
				 * Default value is <code>auto</code>.
				 * @return Value of property <code>hCells</code>
				 */
				getHCells(): GridElementCells;
				/**
				 * Gets current value of property <code>vCells</code>.
				 * 
				 * Number of cells in vertical direction.
				 * <b>Note:</b> This property has no effect for labels.
				 * 
				 * Default value is <code>1</code>.
				 * @return Value of property <code>vCells</code>
				 */
				getVCells(): number;
				/**
				 * Sets a new value for property <code>hCells</code>.
				 * 
				 * Number of cells in horizontal direction.
				 * If set to "auto" the size is determined by the number of fields and the available cells. For labels the auto size is 3 cells.
				 * If set to "full" only one field is allowed within the <code>FormElement</code>. It gets the full width of the row and the label is displayed above. <b>Note:</b> For labels full size has no effect.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>auto</code>.
				 * @param sHCells New value for property <code>hCells</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setHCells(sHCells: GridElementCells): GridElementData;
				/**
				 * Sets a new value for property <code>vCells</code>.
				 * 
				 * Number of cells in vertical direction.
				 * <b>Note:</b> This property has no effect for labels.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>1</code>.
				 * @param iVCells New value for property <code>vCells</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setVCells(iVCells: number): GridElementData;
			}
		
			class GridLayout extends FormLayout {
				/**
				 * Constructor for a new sap.ui.layout.form.GridLayout.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param sId Id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: sap.ui.layout.form.GridLayoutMetadata);
				/**
				 * Constructor for a new sap.ui.layout.form.GridLayout.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @note Any overloads to support not documented metadata
				 * @param sId Id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Creates a new subclass of class sap.ui.layout.form.GridLayout with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.layout.form.FormLayout.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Gets current value of property <code>singleColumn</code>.
				 * 
				 * If set, the grid renders only one <code>FormContainer</code> per column. That means one <code>FormContainer</code> is below the other. The whole grid has 8 cells per row.
				 * 
				 * If not set, <code>FormContainer</code> can use the full width of the grid or two <code>FormContainers</code> can be placed beside each other. In this case the whole grid has 16 cells per row.
				 * 
				 * Default value is <code>false</code>.
				 * @return Value of property <code>singleColumn</code>
				 */
				getSingleColumn(): boolean;
				/**
				 * Sets a new value for property <code>singleColumn</code>.
				 * 
				 * If set, the grid renders only one <code>FormContainer</code> per column. That means one <code>FormContainer</code> is below the other. The whole grid has 8 cells per row.
				 * 
				 * If not set, <code>FormContainer</code> can use the full width of the grid or two <code>FormContainers</code> can be placed beside each other. In this case the whole grid has 16 cells per row.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>false</code>.
				 * @param bSingleColumn New value for property <code>singleColumn</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setSingleColumn(bSingleColumn: boolean): GridLayout;
			}
		
			class ResponsiveGridLayout extends FormLayout {
				/**
				 * Constructor for a new <code>sap.ui.layout.form.ResponsiveGridLayout</code>.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param sId ID for the new control, generated automatically if no ID is given(optional)
				 * @param mSettings Initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: sap.ui.layout.form.ResponsiveGridLayoutMetadata);
				/**
				 * Constructor for a new <code>sap.ui.layout.form.ResponsiveGridLayout</code>.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @note Any overloads to support not documented metadata
				 * @param sId ID for the new control, generated automatically if no ID is given(optional)
				 * @param mSettings Initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Creates a new subclass of class sap.ui.layout.form.ResponsiveGridLayout with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.layout.form.FormLayout.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Gets current value of property <code>adjustLabelSpan</code>.
				 * 
				 * If set, the usage of <code>labelSpanL</code> and <code>labelSpanM</code> are dependent on the number of <code>FormContainers</code> in one row.
				 * If only one <code>FormContainer</code> is displayed in one row, <code>labelSpanM</code> is used to define the size of the label.
				 * This is the same for medium and large <code>Forms</code>.
				 * This is done to align the labels on forms where full-size <code>FormContainers</code> and multiple-column rows are used in the same <code>Form</code>
				 * (because every <code>FormContainer</code> has its own grid inside).
				 * 
				 * If not set, the usage of <code>labelSpanL</code> and <code>labelSpanM</code> are dependent on the <code>Form</code> size.
				 * The number of <code>FormContainers</code> doesn't matter in this case.
				 * 
				 * Default value is <code>true</code>.
				 * @return Value of property <code>adjustLabelSpan</code>
				 */
				getAdjustLabelSpan(): boolean;
				/**
				 * Gets current value of property <code>breakpointL</code>.
				 * 
				 * Breakpoint (in pixel) between Medium size and Large size.
				 * 
				 * Default value is <code>1024</code>.
				 * @return Value of property <code>breakpointL</code>
				 */
				getBreakpointL(): number;
				/**
				 * Gets current value of property <code>breakpointM</code>.
				 * 
				 * Breakpoint (in pixel) between Small size and Medium size.
				 * 
				 * Default value is <code>600</code>.
				 * @return Value of property <code>breakpointM</code>
				 */
				getBreakpointM(): number;
				/**
				 * Gets current value of property <code>breakpointXL</code>.
				 * 
				 * Breakpoint (in pixel) between large size and extra large (XL) size.
				 * 
				 * Default value is <code>1440</code>.
				 * @return Value of property <code>breakpointXL</code>
				 */
				getBreakpointXL(): number;
				/**
				 * Gets current value of property <code>columnsL</code>.
				 * 
				 * Number of columns for large size.
				 * 
				 * The number of columns for large size must not be smaller than the number of columns for medium size.
				 * 
				 * Default value is <code>2</code>.
				 * @return Value of property <code>columnsL</code>
				 */
				getColumnsL(): number;
				/**
				 * Gets current value of property <code>columnsM</code>.
				 * 
				 * Number of columns for medium size.
				 * 
				 * Default value is <code>1</code>.
				 * @return Value of property <code>columnsM</code>
				 */
				getColumnsM(): number;
				/**
				 * Gets current value of property <code>columnsXL</code>.
				 * 
				 * Number of columns for extra large size.
				 * 
				 * The number of columns for extra large size must not be smaller than the number of columns for large size.
				 * <b>Note:</b> If the default value -1 is not overwritten with the meaningful one then the <code>columnsL</code> value is used (from the backward compatibility reasons).
				 * 
				 * Default value is <code>-1</code>.
				 * @return Value of property <code>columnsXL</code>
				 */
				getColumnsXL(): number;
				/**
				 * Gets current value of property <code>emptySpanL</code>.
				 * 
				 * Number of grid cells that are empty at the end of each line on large size.
				 * 
				 * Default value is <code>0</code>.
				 * @return Value of property <code>emptySpanL</code>
				 */
				getEmptySpanL(): number;
				/**
				 * Gets current value of property <code>emptySpanM</code>.
				 * 
				 * Number of grid cells that are empty at the end of each line on medium size.
				 * 
				 * Default value is <code>0</code>.
				 * @return Value of property <code>emptySpanM</code>
				 */
				getEmptySpanM(): number;
				/**
				 * Gets current value of property <code>emptySpanS</code>.
				 * 
				 * Number of grid cells that are empty at the end of each line on small size.
				 * 
				 * Default value is <code>0</code>.
				 * @return Value of property <code>emptySpanS</code>
				 */
				getEmptySpanS(): number;
				/**
				 * Gets current value of property <code>emptySpanXL</code>.
				 * 
				 * Number of grid cells that are empty at the end of each line on extra large size.
				 * 
				 * <b>Note:</b> If the default value -1 is not overwritten with the meaningful one then the <code>emptySpanL</code> value is used.
				 * 
				 * Default value is <code>-1</code>.
				 * @return Value of property <code>emptySpanXL</code>
				 */
				getEmptySpanXL(): number;
				/**
				 * Gets current value of property <code>labelSpanL</code>.
				 * 
				 * Default span for labels in large size.
				 * 
				 * <b>Note:</b> If <code>adjustLabelSpanThis</code> is set, this property is only used if more than 1 <code>FormContainer</code> is in one line. If only 1 <code>FormContainer</code> is in the line, then the <code>labelSpanM</code> value is used.
				 * 
				 * Default value is <code>4</code>.
				 * @return Value of property <code>labelSpanL</code>
				 */
				getLabelSpanL(): number;
				/**
				 * Gets current value of property <code>labelSpanM</code>.
				 * 
				 * Default span for labels in medium size.
				 * 
				 * <b>Note:</b> If <code>adjustLabelSpanThis</code> is set this property is used for full-size <code>FormContainers</code>. If more than one <code>FormContainer</code> is in one line, <code>labelSpanL</code> is used.
				 * 
				 * Default value is <code>2</code>.
				 * @return Value of property <code>labelSpanM</code>
				 */
				getLabelSpanM(): number;
				/**
				 * Gets current value of property <code>labelSpanS</code>.
				 * 
				 * Default span for labels in small size.
				 * 
				 * Default value is <code>12</code>.
				 * @return Value of property <code>labelSpanS</code>
				 */
				getLabelSpanS(): number;
				/**
				 * Gets current value of property <code>labelSpanXL</code>.
				 * 
				 * Default span for labels in extra large size.
				 * 
				 * <b>Note:</b> If the default value -1 is not overwritten with the meaningful one then the <code>labelSpanL</code> value is used.
				 * 
				 * Default value is <code>-1</code>.
				 * @return Value of property <code>labelSpanXL</code>
				 */
				getLabelSpanXL(): number;
				/**
				 * Gets current value of property <code>singleContainerFullSize</code>.
				 * 
				 * If the <code>Form</code> contains only one single <code>FormContainer</code> and this property is set,
				 * the <code>FormContainer</code> is displayed using the full size of the <code>Form</code>.
				 * In this case the properties <code>columnsXL</code>, <code>columnsL</code> and <code>columnsM</code> are ignored.
				 * 
				 * In all other cases the <code>FormContainer</code> is displayed in the size of one column.
				 * 
				 * Default value is <code>true</code>.
				 * @return Value of property <code>singleContainerFullSize</code>
				 */
				getSingleContainerFullSize(): boolean;
				/**
				 * Sets a new value for property <code>adjustLabelSpan</code>.
				 * 
				 * If set, the usage of <code>labelSpanL</code> and <code>labelSpanM</code> are dependent on the number of <code>FormContainers</code> in one row.
				 * If only one <code>FormContainer</code> is displayed in one row, <code>labelSpanM</code> is used to define the size of the label.
				 * This is the same for medium and large <code>Forms</code>.
				 * This is done to align the labels on forms where full-size <code>FormContainers</code> and multiple-column rows are used in the same <code>Form</code>
				 * (because every <code>FormContainer</code> has its own grid inside).
				 * 
				 * If not set, the usage of <code>labelSpanL</code> and <code>labelSpanM</code> are dependent on the <code>Form</code> size.
				 * The number of <code>FormContainers</code> doesn't matter in this case.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>true</code>.
				 * @param bAdjustLabelSpan New value for property <code>adjustLabelSpan</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setAdjustLabelSpan(bAdjustLabelSpan: boolean): ResponsiveGridLayout;
				/**
				 * Sets a new value for property <code>breakpointL</code>.
				 * 
				 * Breakpoint (in pixel) between Medium size and Large size.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>1024</code>.
				 * @param iBreakpointL New value for property <code>breakpointL</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setBreakpointL(iBreakpointL: number): ResponsiveGridLayout;
				/**
				 * Sets a new value for property <code>breakpointM</code>.
				 * 
				 * Breakpoint (in pixel) between Small size and Medium size.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>600</code>.
				 * @param iBreakpointM New value for property <code>breakpointM</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setBreakpointM(iBreakpointM: number): ResponsiveGridLayout;
				/**
				 * Sets a new value for property <code>breakpointXL</code>.
				 * 
				 * Breakpoint (in pixel) between large size and extra large (XL) size.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>1440</code>.
				 * @param iBreakpointXL New value for property <code>breakpointXL</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setBreakpointXL(iBreakpointXL: number): ResponsiveGridLayout;
				/**
				 * Sets a new value for property <code>columnsL</code>.
				 * 
				 * Number of columns for large size.
				 * 
				 * The number of columns for large size must not be smaller than the number of columns for medium size.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>2</code>.
				 * @param iColumnsL New value for property <code>columnsL</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setColumnsL(iColumnsL: number): ResponsiveGridLayout;
				/**
				 * Sets a new value for property <code>columnsM</code>.
				 * 
				 * Number of columns for medium size.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>1</code>.
				 * @param iColumnsM New value for property <code>columnsM</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setColumnsM(iColumnsM: number): ResponsiveGridLayout;
				/**
				 * Sets a new value for property <code>columnsXL</code>.
				 * 
				 * Number of columns for extra large size.
				 * 
				 * The number of columns for extra large size must not be smaller than the number of columns for large size.
				 * <b>Note:</b> If the default value -1 is not overwritten with the meaningful one then the <code>columnsL</code> value is used (from the backward compatibility reasons).
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>-1</code>.
				 * @param iColumnsXL New value for property <code>columnsXL</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setColumnsXL(iColumnsXL: number): ResponsiveGridLayout;
				/**
				 * Sets a new value for property <code>emptySpanL</code>.
				 * 
				 * Number of grid cells that are empty at the end of each line on large size.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>0</code>.
				 * @param iEmptySpanL New value for property <code>emptySpanL</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setEmptySpanL(iEmptySpanL: number): ResponsiveGridLayout;
				/**
				 * Sets a new value for property <code>emptySpanM</code>.
				 * 
				 * Number of grid cells that are empty at the end of each line on medium size.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>0</code>.
				 * @param iEmptySpanM New value for property <code>emptySpanM</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setEmptySpanM(iEmptySpanM: number): ResponsiveGridLayout;
				/**
				 * Sets a new value for property <code>emptySpanS</code>.
				 * 
				 * Number of grid cells that are empty at the end of each line on small size.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>0</code>.
				 * @param iEmptySpanS New value for property <code>emptySpanS</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setEmptySpanS(iEmptySpanS: number): ResponsiveGridLayout;
				/**
				 * Sets a new value for property <code>emptySpanXL</code>.
				 * 
				 * Number of grid cells that are empty at the end of each line on extra large size.
				 * 
				 * <b>Note:</b> If the default value -1 is not overwritten with the meaningful one then the <code>emptySpanL</code> value is used.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>-1</code>.
				 * @param iEmptySpanXL New value for property <code>emptySpanXL</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setEmptySpanXL(iEmptySpanXL: number): ResponsiveGridLayout;
				/**
				 * Sets a new value for property <code>labelSpanL</code>.
				 * 
				 * Default span for labels in large size.
				 * 
				 * <b>Note:</b> If <code>adjustLabelSpanThis</code> is set, this property is only used if more than 1 <code>FormContainer</code> is in one line. If only 1 <code>FormContainer</code> is in the line, then the <code>labelSpanM</code> value is used.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>4</code>.
				 * @param iLabelSpanL New value for property <code>labelSpanL</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setLabelSpanL(iLabelSpanL: number): ResponsiveGridLayout;
				/**
				 * Sets a new value for property <code>labelSpanM</code>.
				 * 
				 * Default span for labels in medium size.
				 * 
				 * <b>Note:</b> If <code>adjustLabelSpanThis</code> is set this property is used for full-size <code>FormContainers</code>. If more than one <code>FormContainer</code> is in one line, <code>labelSpanL</code> is used.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>2</code>.
				 * @param iLabelSpanM New value for property <code>labelSpanM</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setLabelSpanM(iLabelSpanM: number): ResponsiveGridLayout;
				/**
				 * Sets a new value for property <code>labelSpanS</code>.
				 * 
				 * Default span for labels in small size.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>12</code>.
				 * @param iLabelSpanS New value for property <code>labelSpanS</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setLabelSpanS(iLabelSpanS: number): ResponsiveGridLayout;
				/**
				 * Sets a new value for property <code>labelSpanXL</code>.
				 * 
				 * Default span for labels in extra large size.
				 * 
				 * <b>Note:</b> If the default value -1 is not overwritten with the meaningful one then the <code>labelSpanL</code> value is used.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>-1</code>.
				 * @param iLabelSpanXL New value for property <code>labelSpanXL</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setLabelSpanXL(iLabelSpanXL: number): ResponsiveGridLayout;
				/**
				 * Sets a new value for property <code>singleContainerFullSize</code>.
				 * 
				 * If the <code>Form</code> contains only one single <code>FormContainer</code> and this property is set,
				 * the <code>FormContainer</code> is displayed using the full size of the <code>Form</code>.
				 * In this case the properties <code>columnsXL</code>, <code>columnsL</code> and <code>columnsM</code> are ignored.
				 * 
				 * In all other cases the <code>FormContainer</code> is displayed in the size of one column.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>true</code>.
				 * @param bSingleContainerFullSize New value for property <code>singleContainerFullSize</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setSingleContainerFullSize(bSingleContainerFullSize: boolean): ResponsiveGridLayout;
			}
		
			class ResponsiveLayout extends FormLayout {
				/**
				 * Constructor for a new sap.ui.layout.form.ResponsiveLayout.
				 * @param sId Id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Creates a new subclass of class sap.ui.layout.form.ResponsiveLayout with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.layout.form.FormLayout.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			}
		
			class SimpleForm extends sap.ui.core.Control {
				/**
				 * Constructor for a new sap.ui.layout.form.SimpleForm.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param sId ID for the new control, generated automatically if no ID is given(optional)
				 * @param mSettings Initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: sap.ui.layout.form.SimpleFormMetadata);
				/**
				 * Constructor for a new sap.ui.layout.form.SimpleForm.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @note Any overloads to support not documented metadata
				 * @param sId ID for the new control, generated automatically if no ID is given(optional)
				 * @param mSettings Initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
				 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): SimpleForm;
				/**
				 * Adds some content to the aggregation <code>content</code>.
				 * @param oContent the content to add; if empty, nothing is inserted
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				addContent(oContent: sap.ui.core.Element): SimpleForm;
				/**
				 * Destroys all the content in the aggregation <code>content</code>.
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				destroyContent(): SimpleForm;
				/**
				 * Destroys the title in the aggregation <code>title</code>.
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				destroyTitle(): SimpleForm;
				/**
				 * Destroys the toolbar in the aggregation <code>toolbar</code>.
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				destroyToolbar(): SimpleForm;
				/**
				 * Creates a new subclass of class sap.ui.layout.form.SimpleForm with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Gets current value of property <code>adjustLabelSpan</code>.
				 * 
				 * If set, the usage of <code>labelSpanL</code> and <code>labelSpanM</code> are dependent on the number of <code>FormContainers</code> in one row.
				 * If only one <code>FormContainer</code> is displayed in one row, <code>labelSpanM</code> is used to define the size of the label.
				 * This is the same for medium and large <code>Forms</code>.
				 * This is done to align the labels on forms where full-size <code>FormContainers</code> and multiple-column rows are used in the same <code>Form</code>
				 * (because every <code>FormContainer</code> has its own grid inside).
				 * 
				 * If not set, the usage of <code>labelSpanL</code> and <code>labelSpanM</code> are dependent on the <code>Form</code> size.
				 * The number of <code>FormContainers</code> doesn't matter in this case.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * 
				 * Default value is <code>true</code>.
				 * @return Value of property <code>adjustLabelSpan</code>
				 */
				getAdjustLabelSpan(): boolean;
				/**
				 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
				 * @return 
				 */
				getAriaLabelledBy(): sap.ui.core.ID[];
				/**
				 * Gets current value of property <code>backgroundDesign</code>.
				 * 
				 * Specifies the background color of the <code>SimpleForm</code> content.
				 * 
				 * The visualization of the different options depends on the used theme.
				 * 
				 * Default value is <code>Translucent</code>.
				 * @return Value of property <code>backgroundDesign</code>
				 */
				getBackgroundDesign(): sap.ui.layout.BackgroundDesign;
				/**
				 * Gets current value of property <code>breakpointL</code>.
				 * 
				 * Breakpoint between Medium size and Large size.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * 
				 * Default value is <code>1024</code>.
				 * @return Value of property <code>breakpointL</code>
				 */
				getBreakpointL(): number;
				/**
				 * Gets current value of property <code>breakpointM</code>.
				 * 
				 * Breakpoint between Small size and Medium size.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * 
				 * Default value is <code>600</code>.
				 * @return Value of property <code>breakpointM</code>
				 */
				getBreakpointM(): number;
				/**
				 * Gets current value of property <code>breakpointXL</code>.
				 * 
				 * Breakpoint between Medium size and Large size.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * 
				 * Default value is <code>1440</code>.
				 * @return Value of property <code>breakpointXL</code>
				 */
				getBreakpointXL(): number;
				/**
				 * Gets current value of property <code>columnsL</code>.
				 * 
				 * Form columns for large size.
				 * The number of columns for large size must not be smaller than the number of columns for medium size.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * 
				 * Default value is <code>2</code>.
				 * @return Value of property <code>columnsL</code>
				 */
				getColumnsL(): number;
				/**
				 * Gets current value of property <code>columnsM</code>.
				 * 
				 * Form columns for medium size.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * 
				 * Default value is <code>1</code>.
				 * @return Value of property <code>columnsM</code>
				 */
				getColumnsM(): number;
				/**
				 * Gets current value of property <code>columnsXL</code>.
				 * 
				 * Form columns for extra large size.
				 * The number of columns for extra large size must not be smaller than the number of columns for large size.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.If the default value -1 is not overwritten with the meaningful one then the <code>columnsL</code> value is used (from the backward compatibility reasons).
				 * 
				 * Default value is <code>-1</code>.
				 * @return Value of property <code>columnsXL</code>
				 */
				getColumnsXL(): number;
				/**
				 * Gets content of aggregation <code>content</code>.
				 * 
				 * The content of the form is structured in the following way:
				 * <ul>
				 * <li>Add a <code>Title</code> or <code>Toolbar</code> control to start a new group (<code>FormContainer</code>).</li>
				 * <li>Add a <code>Label</code> control to start a new row (<code>FormElement</code>).</li>
				 * <li>Add controls as input fields, text fields or other as needed.</li>
				 * <li>Use <code>LayoutData</code> to influence the layout for special cases in the single controls.
				 * For example, if a <code>ResponsiveLayout</code> is used as a layout, the form content is weighted using weight 3 for the labels and weight 5 for the fields part. By default the label column is 192 pixels wide.
				 * If your input controls should influence their width, you can add <code>sap.ui.layout.ResponsiveFlowLayoutData</code> to them via <code>setLayoutData</code> method.
				 * Ensure that the sum of the weights in the <code>ResponsiveFlowLayoutData</code> is not more than 5, as this is the total width of the input control part of each form row.</li>
				 * </ul>
				 * Example for a row where the <code>TextField</code> takes 4 and the <code>TextView</code> takes 1 weight (using <code>ResponsiveLayout</code>):
				 * <pre>
				 * new sap.ui.commons.Label({text:"Label"});
				 * new sap.ui.commons.TextField({value:"Weight 4",
				 * layoutData:new sap.ui.layout.ResponsiveFlowLayoutData({weight:4})}),
				 * new sap.ui.commons.TextView({text:"Weight 1",
				 * layoutData: new sap.ui.layout.ResponsiveFlowLayoutData({weight:1})}),
				 * </pre>
				 * 
				 * <b>Note:</b> Do not put any layout controls in here. This could destroy the visual layout,
				 * keyboard support and screen-reader support.
				 * @return 
				 */
				getContent(): sap.ui.core.Element[];
				/**
				 * Gets current value of property <code>editable</code>.
				 * 
				 * Applies a device-specific and theme-specific line-height to the form rows if the form has editable content.
				 * If set, all (not only the editable) rows of the form will get the line height of editable fields.
				 * The accessibility aria-readonly attribute is set according to this property.
				 * <b>Note:</b> The setting of the property has no influence on the editable functionality of the form's content.
				 * @return Value of property <code>editable</code>
				 */
				getEditable(): boolean;
				/**
				 * Gets current value of property <code>emptySpanL</code>.
				 * 
				 * Number of grid cells that are empty at the end of each line on large size.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * 
				 * Default value is <code>0</code>.
				 * @return Value of property <code>emptySpanL</code>
				 */
				getEmptySpanL(): number;
				/**
				 * Gets current value of property <code>emptySpanM</code>.
				 * 
				 * Number of grid cells that are empty at the end of each line on medium size.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * 
				 * Default value is <code>0</code>.
				 * @return Value of property <code>emptySpanM</code>
				 */
				getEmptySpanM(): number;
				/**
				 * Gets current value of property <code>emptySpanS</code>.
				 * 
				 * Number of grid cells that are empty at the end of each line on small size.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * 
				 * Default value is <code>0</code>.
				 * @return Value of property <code>emptySpanS</code>
				 */
				getEmptySpanS(): number;
				/**
				 * Gets current value of property <code>emptySpanXL</code>.
				 * 
				 * Number of grid cells that are empty at the end of each line on extra large size.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout. If the default value -1 is not overwritten with the meaningful one then the <code>emptySpanL</code> value is used (from the backward compatibility reasons).
				 * 
				 * Default value is <code>-1</code>.
				 * @return Value of property <code>emptySpanXL</code>
				 */
				getEmptySpanXL(): number;
				/**
				 * Gets current value of property <code>labelMinWidth</code>.
				 * 
				 * Specifies the min-width in pixels of the label in all form containers.
				 * <b>Note:</b> This property is only used if a <code>ResponsiveLayout</code> is used as a layout.
				 * 
				 * Default value is <code>192</code>.
				 * @return Value of property <code>labelMinWidth</code>
				 */
				getLabelMinWidth(): number;
				/**
				 * Gets current value of property <code>labelSpanL</code>.
				 * 
				 * Default span for labels in large size.
				 * 
				 * <b>Note:</b> If <code>adjustLabelSpanThis</code> is set, this property is only used if more than 1 <code>FormContainer</code> is in one line. If only 1 <code>FormContainer</code> is in the line, then the <code>labelSpanM</code> value is used.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * 
				 * Default value is <code>4</code>.
				 * @return Value of property <code>labelSpanL</code>
				 */
				getLabelSpanL(): number;
				/**
				 * Gets current value of property <code>labelSpanM</code>.
				 * 
				 * Default span for labels in medium size.
				 * 
				 * <b>Note:</b> If <code>adjustLabelSpanThis</code> is set, this property is used for full-size <code>FormContainers</code>. If more than one <code>FormContainer</code> is in one line, <code>labelSpanL</code> is used.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * 
				 * Default value is <code>2</code>.
				 * @return Value of property <code>labelSpanM</code>
				 */
				getLabelSpanM(): number;
				/**
				 * Gets current value of property <code>labelSpanS</code>.
				 * 
				 * Default span for labels in small size.
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * 
				 * Default value is <code>12</code>.
				 * @return Value of property <code>labelSpanS</code>
				 */
				getLabelSpanS(): number;
				/**
				 * Gets current value of property <code>labelSpanXL</code>.
				 * 
				 * Default span for labels in extra large size.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout. If the default value -1 is not overwritten with the meaningful one then the <code>labelSpanL</code> value is used (from the backward compatibility reasons).
				 * 
				 * Default value is <code>-1</code>.
				 * @return Value of property <code>labelSpanXL</code>
				 */
				getLabelSpanXL(): number;
				/**
				 * Gets current value of property <code>layout</code>.
				 * 
				 * The <code>FormLayout</code> that is used to render the <code>SimpleForm</code>.
				 * We suggest using the <code>ResponsiveGridLayout</code> for rendering a <code>SimpleForm</code>, as its responsiveness uses the space available in the best way possible.
				 * 
				 * Default value is <code>ResponsiveLayout</code>.
				 * @return Value of property <code>layout</code>
				 */
				getLayout(): SimpleFormLayout;
				/**
				 * Gets current value of property <code>maxContainerCols</code>.
				 * 
				 * The maximum amount of groups (<code>FormContainers</code>) per row that is used before a new row is started.
				 * <b>Note:</b> If a <code>ResponsiveGridLayout</code> is used as a layout, this property is not used. Please use the properties <code>ColumnsL</code> and <code>ColumnsM</code> in this case.
				 * 
				 * Default value is <code>2</code>.
				 * @return Value of property <code>maxContainerCols</code>
				 */
				getMaxContainerCols(): number;
				/**
				 * Gets current value of property <code>minWidth</code>.
				 * 
				 * The overall minimum width in pixels that is used for the <code>SimpleForm</code>. If the available width is below the given minWidth the SimpleForm will create a new row for the next group (<code>FormContainer</code>).
				 * The default value is -1, meaning that inner groups (<code>FormContainers</code>) will be stacked until maxCols is reached, irrespective of whether a maxWidth is reached or the available parents width is reached.
				 * <b>Note:</b> This property is only used if a <code>ResponsiveLayout</code> is used as a layout.
				 * 
				 * Default value is <code>-1</code>.
				 * @return Value of property <code>minWidth</code>
				 */
				getMinWidth(): number;
				/**
				 * Gets current value of property <code>singleContainerFullSize</code>.
				 * 
				 * If the <code>Form</code> contains only one single <code>FormContainer</code> and this property is set,
				 * the <code>FormContainer</code> is displayed using the full size of the <code>Form</code>.
				 * In this case the properties <code>columnsL</code> and <code>columnsM</code> are ignored.
				 * 
				 * In all other cases the <code>FormContainer</code> is displayed in the size of one column.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * 
				 * Default value is <code>true</code>.
				 * @return Value of property <code>singleContainerFullSize</code>
				 */
				getSingleContainerFullSize(): boolean;
				/**
				 * Gets content of aggregation <code>title</code>.
				 * 
				 * Title element of the <code>SimpleForm</code>. Can either be a <code>Title</code> control, or a string.
				 * @return 
				 */
				getTitle(): sap.ui.core.Title|string;
				/**
				 * Gets content of aggregation <code>toolbar</code>.
				 * 
				 * Toolbar of the <code>SimpleForm</code>.
				 * 
				 * <b>Note:</b> If a <code>Toolbar</code> is used, the <code>Title</code> is ignored.
				 * If a title is needed inside the <code>Toolbar</code> it must be added at content to the <code>Toolbar</code>.
				 * In this case add the <code>Title</code> to the <code>ariaLabelledBy</code> association.
				 * @return 
				 */
				getToolbar(): sap.ui.core.Toolbar;
				/**
				 * Gets current value of property <code>width</code>.
				 * 
				 * Width of the form.
				 * @return Value of property <code>width</code>
				 */
				getWidth(): sap.ui.core.CSSSize;
				/**
				 * Checks for the provided <code>sap.ui.core.Element</code> in the aggregation <code>content</code>.
				 * and returns its index if found or -1 otherwise.
				 * @param oContent The content whose index is looked for
				 * @return The index of the provided control in the aggregation if found, or -1 otherwise
				 */
				indexOfContent(oContent: sap.ui.core.Element): number;
				/**
				 * Inserts a content into the aggregation <code>content</code>.
				 * @param oContent the content to insert; if empty, nothing is inserted
				 * @param iIndex the <code>0</code>-based index the content should be inserted at; for
				 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
				 *              greater than the current size of the aggregation, the content is inserted at
				 *              the last position
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				insertContent(oContent: sap.ui.core.Element, iIndex: number): SimpleForm;
				/**
				 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
				 * @return An array of the removed elements (might be empty)
				 */
				removeAllAriaLabelledBy(): sap.ui.core.ID[];
				/**
				 * Removes all the controls from the aggregation <code>content</code>.
				 * 
				 * Additionally, it unregisters them from the hosting UIArea.
				 * @return An array of the removed elements (might be empty)
				 */
				removeAllContent(): sap.ui.core.Element[];
				/**
				 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
				 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
				 * @return The removed ariaLabelledBy or <code>null</code>
				 */
				removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
				/**
				 * Removes a content from the aggregation <code>content</code>.
				 * @param vContent The content to remove or its index or id
				 * @return The removed content or <code>null</code>
				 */
				removeContent(vContent: number|string|sap.ui.core.Element): sap.ui.core.Element;
				/**
				 * Sets a new value for property <code>adjustLabelSpan</code>.
				 * 
				 * If set, the usage of <code>labelSpanL</code> and <code>labelSpanM</code> are dependent on the number of <code>FormContainers</code> in one row.
				 * If only one <code>FormContainer</code> is displayed in one row, <code>labelSpanM</code> is used to define the size of the label.
				 * This is the same for medium and large <code>Forms</code>.
				 * This is done to align the labels on forms where full-size <code>FormContainers</code> and multiple-column rows are used in the same <code>Form</code>
				 * (because every <code>FormContainer</code> has its own grid inside).
				 * 
				 * If not set, the usage of <code>labelSpanL</code> and <code>labelSpanM</code> are dependent on the <code>Form</code> size.
				 * The number of <code>FormContainers</code> doesn't matter in this case.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>true</code>.
				 * @param bAdjustLabelSpan New value for property <code>adjustLabelSpan</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setAdjustLabelSpan(bAdjustLabelSpan: boolean): SimpleForm;
				/**
				 * Sets a new value for property <code>backgroundDesign</code>.
				 * 
				 * Specifies the background color of the <code>SimpleForm</code> content.
				 * 
				 * The visualization of the different options depends on the used theme.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>Translucent</code>.
				 * @param sBackgroundDesign New value for property <code>backgroundDesign</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setBackgroundDesign(sBackgroundDesign: sap.ui.layout.BackgroundDesign): SimpleForm;
				/**
				 * Sets a new value for property <code>breakpointL</code>.
				 * 
				 * Breakpoint between Medium size and Large size.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>1024</code>.
				 * @param iBreakpointL New value for property <code>breakpointL</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setBreakpointL(iBreakpointL: number): SimpleForm;
				/**
				 * Sets a new value for property <code>breakpointM</code>.
				 * 
				 * Breakpoint between Small size and Medium size.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>600</code>.
				 * @param iBreakpointM New value for property <code>breakpointM</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setBreakpointM(iBreakpointM: number): SimpleForm;
				/**
				 * Sets a new value for property <code>breakpointXL</code>.
				 * 
				 * Breakpoint between Medium size and Large size.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>1440</code>.
				 * @param iBreakpointXL New value for property <code>breakpointXL</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setBreakpointXL(iBreakpointXL: number): SimpleForm;
				/**
				 * Sets a new value for property <code>columnsL</code>.
				 * 
				 * Form columns for large size.
				 * The number of columns for large size must not be smaller than the number of columns for medium size.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>2</code>.
				 * @param iColumnsL New value for property <code>columnsL</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setColumnsL(iColumnsL: number): SimpleForm;
				/**
				 * Sets a new value for property <code>columnsM</code>.
				 * 
				 * Form columns for medium size.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>1</code>.
				 * @param iColumnsM New value for property <code>columnsM</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setColumnsM(iColumnsM: number): SimpleForm;
				/**
				 * Sets a new value for property <code>columnsXL</code>.
				 * 
				 * Form columns for extra large size.
				 * The number of columns for extra large size must not be smaller than the number of columns for large size.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.If the default value -1 is not overwritten with the meaningful one then the <code>columnsL</code> value is used (from the backward compatibility reasons).
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>-1</code>.
				 * @param iColumnsXL New value for property <code>columnsXL</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setColumnsXL(iColumnsXL: number): SimpleForm;
				/**
				 * Sets a new value for property <code>editable</code>.
				 * 
				 * Applies a device-specific and theme-specific line-height to the form rows if the form has editable content.
				 * If set, all (not only the editable) rows of the form will get the line height of editable fields.
				 * The accessibility aria-readonly attribute is set according to this property.
				 * <b>Note:</b> The setting of the property has no influence on the editable functionality of the form's content.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param bEditable New value for property <code>editable</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setEditable(bEditable: boolean): SimpleForm;
				/**
				 * Sets a new value for property <code>emptySpanL</code>.
				 * 
				 * Number of grid cells that are empty at the end of each line on large size.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>0</code>.
				 * @param iEmptySpanL New value for property <code>emptySpanL</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setEmptySpanL(iEmptySpanL: number): SimpleForm;
				/**
				 * Sets a new value for property <code>emptySpanM</code>.
				 * 
				 * Number of grid cells that are empty at the end of each line on medium size.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>0</code>.
				 * @param iEmptySpanM New value for property <code>emptySpanM</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setEmptySpanM(iEmptySpanM: number): SimpleForm;
				/**
				 * Sets a new value for property <code>emptySpanS</code>.
				 * 
				 * Number of grid cells that are empty at the end of each line on small size.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>0</code>.
				 * @param iEmptySpanS New value for property <code>emptySpanS</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setEmptySpanS(iEmptySpanS: number): SimpleForm;
				/**
				 * Sets a new value for property <code>emptySpanXL</code>.
				 * 
				 * Number of grid cells that are empty at the end of each line on extra large size.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout. If the default value -1 is not overwritten with the meaningful one then the <code>emptySpanL</code> value is used (from the backward compatibility reasons).
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>-1</code>.
				 * @param iEmptySpanXL New value for property <code>emptySpanXL</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setEmptySpanXL(iEmptySpanXL: number): SimpleForm;
				/**
				 * Sets a new value for property <code>labelMinWidth</code>.
				 * 
				 * Specifies the min-width in pixels of the label in all form containers.
				 * <b>Note:</b> This property is only used if a <code>ResponsiveLayout</code> is used as a layout.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>192</code>.
				 * @param iLabelMinWidth New value for property <code>labelMinWidth</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setLabelMinWidth(iLabelMinWidth: number): SimpleForm;
				/**
				 * Sets a new value for property <code>labelSpanL</code>.
				 * 
				 * Default span for labels in large size.
				 * 
				 * <b>Note:</b> If <code>adjustLabelSpanThis</code> is set, this property is only used if more than 1 <code>FormContainer</code> is in one line. If only 1 <code>FormContainer</code> is in the line, then the <code>labelSpanM</code> value is used.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>4</code>.
				 * @param iLabelSpanL New value for property <code>labelSpanL</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setLabelSpanL(iLabelSpanL: number): SimpleForm;
				/**
				 * Sets a new value for property <code>labelSpanM</code>.
				 * 
				 * Default span for labels in medium size.
				 * 
				 * <b>Note:</b> If <code>adjustLabelSpanThis</code> is set, this property is used for full-size <code>FormContainers</code>. If more than one <code>FormContainer</code> is in one line, <code>labelSpanL</code> is used.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>2</code>.
				 * @param iLabelSpanM New value for property <code>labelSpanM</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setLabelSpanM(iLabelSpanM: number): SimpleForm;
				/**
				 * Sets a new value for property <code>labelSpanS</code>.
				 * 
				 * Default span for labels in small size.
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>12</code>.
				 * @param iLabelSpanS New value for property <code>labelSpanS</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setLabelSpanS(iLabelSpanS: number): SimpleForm;
				/**
				 * Sets a new value for property <code>labelSpanXL</code>.
				 * 
				 * Default span for labels in extra large size.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout. If the default value -1 is not overwritten with the meaningful one then the <code>labelSpanL</code> value is used (from the backward compatibility reasons).
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>-1</code>.
				 * @param iLabelSpanXL New value for property <code>labelSpanXL</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setLabelSpanXL(iLabelSpanXL: number): SimpleForm;
				/**
				 * Sets a new value for property <code>layout</code>.
				 * 
				 * The <code>FormLayout</code> that is used to render the <code>SimpleForm</code>.
				 * We suggest using the <code>ResponsiveGridLayout</code> for rendering a <code>SimpleForm</code>, as its responsiveness uses the space available in the best way possible.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>ResponsiveLayout</code>.
				 * @param sLayout New value for property <code>layout</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setLayout(sLayout: SimpleFormLayout): SimpleForm;
				/**
				 * Sets a new value for property <code>maxContainerCols</code>.
				 * 
				 * The maximum amount of groups (<code>FormContainers</code>) per row that is used before a new row is started.
				 * <b>Note:</b> If a <code>ResponsiveGridLayout</code> is used as a layout, this property is not used. Please use the properties <code>ColumnsL</code> and <code>ColumnsM</code> in this case.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>2</code>.
				 * @param iMaxContainerCols New value for property <code>maxContainerCols</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setMaxContainerCols(iMaxContainerCols: number): SimpleForm;
				/**
				 * Sets a new value for property <code>minWidth</code>.
				 * 
				 * The overall minimum width in pixels that is used for the <code>SimpleForm</code>. If the available width is below the given minWidth the SimpleForm will create a new row for the next group (<code>FormContainer</code>).
				 * The default value is -1, meaning that inner groups (<code>FormContainers</code>) will be stacked until maxCols is reached, irrespective of whether a maxWidth is reached or the available parents width is reached.
				 * <b>Note:</b> This property is only used if a <code>ResponsiveLayout</code> is used as a layout.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>-1</code>.
				 * @param iMinWidth New value for property <code>minWidth</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setMinWidth(iMinWidth: number): SimpleForm;
				/**
				 * Sets a new value for property <code>singleContainerFullSize</code>.
				 * 
				 * If the <code>Form</code> contains only one single <code>FormContainer</code> and this property is set,
				 * the <code>FormContainer</code> is displayed using the full size of the <code>Form</code>.
				 * In this case the properties <code>columnsL</code> and <code>columnsM</code> are ignored.
				 * 
				 * In all other cases the <code>FormContainer</code> is displayed in the size of one column.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>true</code>.
				 * @param bSingleContainerFullSize New value for property <code>singleContainerFullSize</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setSingleContainerFullSize(bSingleContainerFullSize: boolean): SimpleForm;
				/**
				 * Sets the aggregated <code>title</code>.
				 * @param vTitle The title to set
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setTitle(vTitle: sap.ui.core.Title|string): SimpleForm;
				/**
				 * Sets the aggregated <code>toolbar</code>.
				 * @param oToolbar The toolbar to set
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setToolbar(oToolbar: sap.ui.core.Toolbar): SimpleForm;
				/**
				 * Sets a new value for property <code>width</code>.
				 * 
				 * Width of the form.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sWidth New value for property <code>width</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setWidth(sWidth: sap.ui.core.CSSSize): SimpleForm;
			}
		
			class SimpleFormLayout {
				/**
				 * Uses the <code>GridLayout</code> to render the <code>SimpleForm</code>
				 */
				static GridLayout: string;
				/**
				 * Uses the <code>ResponsiveGridLayout</code> to render the <code>SimpleForm</code>
				 */
				static ResponsiveGridLayout: string;
				/**
				 * Uses the <code>ResponsiveLayout</code> to render the <code>SimpleForm</code>
				 */
				static ResponsiveLayout: string;
			}
		
			interface FormMetadata extends sap.ui.core.ControlMetadata {
				/**
				 * Width of the <code>Form</code>.
				 */
				width?: sap.ui.core.CSSSize;
				/**
				 * Applies a device and theme specific line-height to the form rows if the form has editable content.
				 * If set, all (not only the editable) rows of the form will get the line height of editable fields.
				 * The accessibility aria-readonly attribute is set according to this property.
				 * <b>Note:</b> The setting of the property has no influence on the editable functionality of the form's content.
				 * @default false
				 */
				editable?: boolean;
			}
		
			interface FormContainerMetadata {
				/**
				 * Container is expanded.
				 * <b>Note:</b> This property only works if <code>expandable</code> is set to <code>true</code>.
				 * @default true
				 */
				expanded?: boolean;
				/**
				 * Defines if the <code>FormContainer</code> is expandable.
				 * <b>Note:</b> The expander icon will only be shown if a <code>title</code> is set for the <code>FormContainer</code>.
				 * @default false
				 */
				expandable?: boolean;
				/**
				 * If set to <code>false</code>, the <code>FormContainer</code> is not rendered.
				 * @default true
				 */
				visible?: boolean;
			}
		
			interface FormElementMetadata {
				/**
				 * If set to <code>false</code>, the <code>FormElement</code> is not rendered.
				 * @default true
				 */
				visible?: boolean;
			}
		
			interface FormLayoutMetadata extends sap.ui.core.ControlMetadata {
				/**
				 * Specifies the background color of the <code>Form</code> content.
				 * 
				 * The visualization of the different options depends on the used theme.
				 * @default Translucent
				 */
				backgroundDesign?: sap.ui.layout.BackgroundDesign;
			}
		
			interface GridContainerDataMetadata {
				/**
				 * If set, the container takes half the width of the <code>Form</code> (8 cells), if not it takes the full width (16 cells).
				 * If the <code>GridLayout</code> is set to <code>singleColumn</code>, the full width of the grid is only 8 cells. So containers are rendered only once per row.
				 * @default false
				 */
				halfGrid?: boolean;
			}
		
			interface GridElementDataMetadata {
				/**
				 * Number of cells in horizontal direction.
				 * If set to "auto" the size is determined by the number of fields and the available cells. For labels the auto size is 3 cells.
				 * If set to "full" only one field is allowed within the <code>FormElement</code>. It gets the full width of the row and the label is displayed above. <b>Note:</b> For labels full size has no effect.
				 * @default auto
				 */
				hCells?: sap.ui.layout.form.GridElementCells;
				/**
				 * Number of cells in vertical direction.
				 * <b>Note:</b> This property has no effect for labels.
				 * @default 1
				 */
				vCells?: number;
			}
		
			interface GridLayoutMetadata extends sap.ui.layout.form.FormLayoutMetadata {
				/**
				 * If set, the grid renders only one <code>FormContainer</code> per column. That means one <code>FormContainer</code> is below the other. The whole grid has 8 cells per row.
				 * 
				 * If not set, <code>FormContainer</code> can use the full width of the grid or two <code>FormContainers</code> can be placed beside each other. In this case the whole grid has 16 cells per row.
				 * @default false
				 */
				singleColumn?: boolean;
			}
		
			interface ResponsiveGridLayoutMetadata extends sap.ui.layout.form.FormLayoutMetadata {
				/**
				 * Default span for labels in extra large size.
				 * 
				 * <b>Note:</b> If the default value -1 is not overwritten with the meaningful one then the <code>labelSpanL</code> value is used.
				 * @default -1
				 */
				labelSpanXL?: number;
				/**
				 * Default span for labels in large size.
				 * 
				 * <b>Note:</b> If <code>adjustLabelSpanThis</code> is set, this property is only used if more than 1 <code>FormContainer</code> is in one line. If only 1 <code>FormContainer</code> is in the line, then the <code>labelSpanM</code> value is used.
				 * @default 4
				 */
				labelSpanL?: number;
				/**
				 * Default span for labels in medium size.
				 * 
				 * <b>Note:</b> If <code>adjustLabelSpanThis</code> is set this property is used for full-size <code>FormContainers</code>. If more than one <code>FormContainer</code> is in one line, <code>labelSpanL</code> is used.
				 * @default 2
				 */
				labelSpanM?: number;
				/**
				 * Default span for labels in small size.
				 * @default 12
				 */
				labelSpanS?: number;
				/**
				 * If set, the usage of <code>labelSpanL</code> and <code>labelSpanM</code> are dependent on the number of <code>FormContainers</code> in one row.
				 * If only one <code>FormContainer</code> is displayed in one row, <code>labelSpanM</code> is used to define the size of the label.
				 * This is the same for medium and large <code>Forms</code>.
				 * This is done to align the labels on forms where full-size <code>FormContainers</code> and multiple-column rows are used in the same <code>Form</code>
				 * (because every <code>FormContainer</code> has its own grid inside).
				 * 
				 * If not set, the usage of <code>labelSpanL</code> and <code>labelSpanM</code> are dependent on the <code>Form</code> size.
				 * The number of <code>FormContainers</code> doesn't matter in this case.
				 * @default true
				 */
				adjustLabelSpan?: boolean;
				/**
				 * Number of grid cells that are empty at the end of each line on extra large size.
				 * 
				 * <b>Note:</b> If the default value -1 is not overwritten with the meaningful one then the <code>emptySpanL</code> value is used.
				 * @default -1
				 */
				emptySpanXL?: number;
				/**
				 * Number of grid cells that are empty at the end of each line on large size.
				 * @default 0
				 */
				emptySpanL?: number;
				/**
				 * Number of grid cells that are empty at the end of each line on medium size.
				 * @default 0
				 */
				emptySpanM?: number;
				/**
				 * Number of grid cells that are empty at the end of each line on small size.
				 * @default 0
				 */
				emptySpanS?: number;
				/**
				 * Number of columns for extra large size.
				 * 
				 * The number of columns for extra large size must not be smaller than the number of columns for large size.
				 * <b>Note:</b> If the default value -1 is not overwritten with the meaningful one then the <code>columnsL</code> value is used (from the backward compatibility reasons).
				 * @default -1
				 */
				columnsXL?: number;
				/**
				 * Number of columns for large size.
				 * 
				 * The number of columns for large size must not be smaller than the number of columns for medium size.
				 * @default 2
				 */
				columnsL?: number;
				/**
				 * Number of columns for medium size.
				 * @default 1
				 */
				columnsM?: number;
				/**
				 * If the <code>Form</code> contains only one single <code>FormContainer</code> and this property is set,
				 * the <code>FormContainer</code> is displayed using the full size of the <code>Form</code>.
				 * In this case the properties <code>columnsXL</code>, <code>columnsL</code> and <code>columnsM</code> are ignored.
				 * 
				 * In all other cases the <code>FormContainer</code> is displayed in the size of one column.
				 * @default true
				 */
				singleContainerFullSize?: boolean;
				/**
				 * Breakpoint (in pixel) between large size and extra large (XL) size.
				 * @default 1440
				 */
				breakpointXL?: number;
				/**
				 * Breakpoint (in pixel) between Medium size and Large size.
				 * @default 1024
				 */
				breakpointL?: number;
				/**
				 * Breakpoint (in pixel) between Small size and Medium size.
				 * @default 600
				 */
				breakpointM?: number;
			}
		
			interface SimpleFormMetadata extends sap.ui.core.ControlMetadata {
				/**
				 * The maximum amount of groups (<code>FormContainers</code>) per row that is used before a new row is started.
				 * <b>Note:</b> If a <code>ResponsiveGridLayout</code> is used as a layout, this property is not used. Please use the properties <code>ColumnsL</code> and <code>ColumnsM</code> in this case.
				 * @default 2
				 */
				maxContainerCols?: number;
				/**
				 * The overall minimum width in pixels that is used for the <code>SimpleForm</code>. If the available width is below the given minWidth the SimpleForm will create a new row for the next group (<code>FormContainer</code>).
				 * The default value is -1, meaning that inner groups (<code>FormContainers</code>) will be stacked until maxCols is reached, irrespective of whether a maxWidth is reached or the available parents width is reached.
				 * <b>Note:</b> This property is only used if a <code>ResponsiveLayout</code> is used as a layout.
				 * @default -1
				 */
				minWidth?: number;
				/**
				 * Width of the form.
				 */
				width?: sap.ui.core.CSSSize;
				/**
				 * Applies a device-specific and theme-specific line-height to the form rows if the form has editable content.
				 * If set, all (not only the editable) rows of the form will get the line height of editable fields.
				 * The accessibility aria-readonly attribute is set according to this property.
				 * <b>Note:</b> The setting of the property has no influence on the editable functionality of the form's content.
				 */
				editable?: boolean;
				/**
				 * Specifies the min-width in pixels of the label in all form containers.
				 * <b>Note:</b> This property is only used if a <code>ResponsiveLayout</code> is used as a layout.
				 * @default 192
				 */
				labelMinWidth?: number;
				/**
				 * The <code>FormLayout</code> that is used to render the <code>SimpleForm</code>.
				 * We suggest using the <code>ResponsiveGridLayout</code> for rendering a <code>SimpleForm</code>, as its responsiveness uses the space available in the best way possible.
				 * @default ResponsiveLayout
				 */
				layout?: sap.ui.layout.form.SimpleFormLayout;
				/**
				 * Default span for labels in extra large size.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout. If the default value -1 is not overwritten with the meaningful one then the <code>labelSpanL</code> value is used (from the backward compatibility reasons).
				 * @default -1
				 */
				labelSpanXL?: number;
				/**
				 * Default span for labels in large size.
				 * 
				 * <b>Note:</b> If <code>adjustLabelSpanThis</code> is set, this property is only used if more than 1 <code>FormContainer</code> is in one line. If only 1 <code>FormContainer</code> is in the line, then the <code>labelSpanM</code> value is used.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * @default 4
				 */
				labelSpanL?: number;
				/**
				 * Default span for labels in medium size.
				 * 
				 * <b>Note:</b> If <code>adjustLabelSpanThis</code> is set, this property is used for full-size <code>FormContainers</code>. If more than one <code>FormContainer</code> is in one line, <code>labelSpanL</code> is used.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * @default 2
				 */
				labelSpanM?: number;
				/**
				 * Default span for labels in small size.
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * @default 12
				 */
				labelSpanS?: number;
				/**
				 * If set, the usage of <code>labelSpanL</code> and <code>labelSpanM</code> are dependent on the number of <code>FormContainers</code> in one row.
				 * If only one <code>FormContainer</code> is displayed in one row, <code>labelSpanM</code> is used to define the size of the label.
				 * This is the same for medium and large <code>Forms</code>.
				 * This is done to align the labels on forms where full-size <code>FormContainers</code> and multiple-column rows are used in the same <code>Form</code>
				 * (because every <code>FormContainer</code> has its own grid inside).
				 * 
				 * If not set, the usage of <code>labelSpanL</code> and <code>labelSpanM</code> are dependent on the <code>Form</code> size.
				 * The number of <code>FormContainers</code> doesn't matter in this case.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * @default true
				 */
				adjustLabelSpan?: boolean;
				/**
				 * Number of grid cells that are empty at the end of each line on extra large size.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout. If the default value -1 is not overwritten with the meaningful one then the <code>emptySpanL</code> value is used (from the backward compatibility reasons).
				 * @default -1
				 */
				emptySpanXL?: number;
				/**
				 * Number of grid cells that are empty at the end of each line on large size.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * @default 0
				 */
				emptySpanL?: number;
				/**
				 * Number of grid cells that are empty at the end of each line on medium size.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * @default 0
				 */
				emptySpanM?: number;
				/**
				 * Number of grid cells that are empty at the end of each line on small size.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * @default 0
				 */
				emptySpanS?: number;
				/**
				 * Form columns for extra large size.
				 * The number of columns for extra large size must not be smaller than the number of columns for large size.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.If the default value -1 is not overwritten with the meaningful one then the <code>columnsL</code> value is used (from the backward compatibility reasons).
				 * @default -1
				 */
				columnsXL?: number;
				/**
				 * Form columns for large size.
				 * The number of columns for large size must not be smaller than the number of columns for medium size.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * @default 2
				 */
				columnsL?: number;
				/**
				 * Form columns for medium size.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * @default 1
				 */
				columnsM?: number;
				/**
				 * If the <code>Form</code> contains only one single <code>FormContainer</code> and this property is set,
				 * the <code>FormContainer</code> is displayed using the full size of the <code>Form</code>.
				 * In this case the properties <code>columnsL</code> and <code>columnsM</code> are ignored.
				 * 
				 * In all other cases the <code>FormContainer</code> is displayed in the size of one column.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * @default true
				 */
				singleContainerFullSize?: boolean;
				/**
				 * Breakpoint between Medium size and Large size.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * @default 1440
				 */
				breakpointXL?: number;
				/**
				 * Breakpoint between Medium size and Large size.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * @default 1024
				 */
				breakpointL?: number;
				/**
				 * Breakpoint between Small size and Medium size.
				 * 
				 * <b>Note:</b> This property is only used if a <code>ResponsiveGridLayout</code> is used as a layout.
				 * @default 600
				 */
				breakpointM?: number;
				/**
				 * Specifies the background color of the <code>SimpleForm</code> content.
				 * 
				 * The visualization of the different options depends on the used theme.
				 * @default Translucent
				 */
				backgroundDesign?: sap.ui.layout.BackgroundDesign;
			}
			/**
			 * A string that defines the number of used cells in a <code>GridLayout</code>. This can be a number from 1 to 16, "auto" or "full".
			 * If set to "auto" the size is determined by the number of fields and the available cells. For labels the auto size is 3 cells.
			 * If set to "full" only one field is allowed within the <code>FormElement</code>. It gets the full width of the row and the label is displayed above. <b>Note:</b> For labels full size has no effect.
			 */
			type GridElementCells = string|number;
		}
	
		class BackgroundDesign {
			/**
			 * A solid background color dependent on the theme.
			 */
			static Solid: string;
			/**
			 * A translucent background depending on the opacity value of the theme.
			 */
			static Translucent: string;
			/**
			 * Transparent background.
			 */
			static Transparent: string;
		}
	
		class BlockBackgroundType {
			/**
			 * Background is transparent
			 */
			static Default: any;
			/**
			 * Background is with predefined light colors
			 */
			static Light: any;
		}
	
		class BlockLayout extends sap.ui.core.Control {
			/**
			 * Constructor for a new BlockLayout.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.layout.BlockLayoutMetadata);
			/**
			 * Constructor for a new BlockLayout.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some content to the aggregation <code>content</code>.
			 * @param oContent the content to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addContent(oContent: BlockLayoutRow): BlockLayout;
			/**
			 * Destroys all the content in the aggregation <code>content</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyContent(): BlockLayout;
			/**
			 * Creates a new subclass of class sap.ui.layout.BlockLayout with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets current value of property <code>background</code>.
			 * 
			 * Determines the background used for the Layout
			 * 
			 * Default value is <code>Default</code>.
			 * @return Value of property <code>background</code>
			 */
			getBackground(): BlockBackgroundType;
			/**
			 * Gets content of aggregation <code>content</code>.
			 * 
			 * The Rows to be included in the content of the control
			 * @return 
			 */
			getContent(): BlockLayoutRow[];
			/**
			 * Checks for the provided <code>sap.ui.layout.BlockLayoutRow</code> in the aggregation <code>content</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oContent The content whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfContent(oContent: BlockLayoutRow): number;
			/**
			 * Inserts a content into the aggregation <code>content</code>.
			 * @param oContent the content to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the content should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the content is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertContent(oContent: BlockLayoutRow, iIndex: number): BlockLayout;
			/**
			 * Removes all the controls from the aggregation <code>content</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllContent(): BlockLayoutRow[];
			/**
			 * Removes a content from the aggregation <code>content</code>.
			 * @param vContent The content to remove or its index or id
			 * @return The removed content or <code>null</code>
			 */
			removeContent(vContent: number|string|BlockLayoutRow): BlockLayoutRow;
			/**
			 * Sets a new value for property <code>background</code>.
			 * 
			 * Determines the background used for the Layout
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>Default</code>.
			 * @param sBackground New value for property <code>background</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setBackground(sBackground: BlockBackgroundType): BlockLayout;
		}
	
		class BlockLayoutCell extends sap.ui.core.Control {
			/**
			 * Constructor for a new BlockLayoutCell.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.layout.BlockLayoutCellMetadata);
			/**
			 * Constructor for a new BlockLayoutCell.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some content to the aggregation <code>content</code>.
			 * @param oContent the content to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addContent(oContent: sap.ui.core.Control): BlockLayoutCell;
			/**
			 * Destroys all the content in the aggregation <code>content</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyContent(): BlockLayoutCell;
			/**
			 * Creates a new subclass of class sap.ui.layout.BlockLayoutCell with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets content of aggregation <code>content</code>.
			 * 
			 * The content to be included inside the cell
			 * @return 
			 */
			getContent(): sap.ui.core.Control[];
			/**
			 * Gets current value of property <code>title</code>.
			 * 
			 * Defines the title of the cell
			 * @return Value of property <code>title</code>
			 */
			getTitle(): string;
			/**
			 * Gets current value of property <code>titleAlignment</code>.
			 * 
			 * Defines the alignment of the cell title
			 * 
			 * Default value is <code>Begin</code>.
			 * @return Value of property <code>titleAlignment</code>
			 */
			getTitleAlignment(): sap.ui.core.HorizontalAlign;
			/**
			 * Gets current value of property <code>titleLevel</code>.
			 * 
			 * Defines the aria level of the title
			 * This information is e.g. used by assistive technologies like screenreaders to create a hierarchical site map for faster navigation.
			 * 
			 * Default value is <code>Auto</code>.
			 * @return Value of property <code>titleLevel</code>
			 */
			getTitleLevel(): sap.ui.core.TitleLevel;
			/**
			 * Gets current value of property <code>width</code>.
			 * 
			 * Defines the width of the cell. Depending on the context of the cell - whether it's in scrollable,
			 * or non scrollable row, this property is interpreted in two different ways.
			 * If the cell is placed inside a scrollable row - this property defines the width of the cell in
			 * percentages. If no value is provided - the default is 40%.
			 * If the cell is placed inside a non scrollable row - this property defines the grow factor of the cell
			 * compared to the whole row.
			 * <b>For example:</b> If you have 2 cells, each with width of 1, this means that they should be of equal size,
			 * and they need to fill the whole row. This results in 50% width for each cell. If you have 2 cells,
			 * one with width of 1, the other with width of 3, this means that the whole row width is 4, so the first
			 * cell will have a width of 25%, the second - 75%.
			 * According to the visual guidelines, it is suggested that you only use 25%, 50%, 75% or 100% cells in
			 * you applications. For example, 12,5% width is not desirable (1 cell with width 1, and another with width 7)
			 * 
			 * Default value is <code>0</code>.
			 * @return Value of property <code>width</code>
			 */
			getWidth(): number;
			/**
			 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oContent The content whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfContent(oContent: sap.ui.core.Control): number;
			/**
			 * Inserts a content into the aggregation <code>content</code>.
			 * @param oContent the content to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the content should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the content is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertContent(oContent: sap.ui.core.Control, iIndex: number): BlockLayoutCell;
			/**
			 * Removes all the controls from the aggregation <code>content</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllContent(): sap.ui.core.Control[];
			/**
			 * Removes a content from the aggregation <code>content</code>.
			 * @param vContent The content to remove or its index or id
			 * @return The removed content or <code>null</code>
			 */
			removeContent(vContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
			/**
			 * Sets a new value for property <code>title</code>.
			 * 
			 * Defines the title of the cell
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sTitle New value for property <code>title</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setTitle(sTitle: string): BlockLayoutCell;
			/**
			 * Sets a new value for property <code>titleAlignment</code>.
			 * 
			 * Defines the alignment of the cell title
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>Begin</code>.
			 * @param sTitleAlignment New value for property <code>titleAlignment</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setTitleAlignment(sTitleAlignment: sap.ui.core.HorizontalAlign): BlockLayoutCell;
			/**
			 * Sets a new value for property <code>titleLevel</code>.
			 * 
			 * Defines the aria level of the title
			 * This information is e.g. used by assistive technologies like screenreaders to create a hierarchical site map for faster navigation.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>Auto</code>.
			 * @param sTitleLevel New value for property <code>titleLevel</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setTitleLevel(sTitleLevel: sap.ui.core.TitleLevel): BlockLayoutCell;
		}
	
		class BlockLayoutRow extends sap.ui.core.Control {
			/**
			 * Constructor for a new BlockLayoutRow.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.layout.BlockLayoutRowMetadata);
			/**
			 * Constructor for a new BlockLayoutRow.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some content to the aggregation <code>content</code>.
			 * @param oContent the content to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addContent(oContent: BlockLayoutCell): BlockLayoutRow;
			/**
			 * Destroys all the content in the aggregation <code>content</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyContent(): BlockLayoutRow;
			/**
			 * Creates a new subclass of class sap.ui.layout.BlockLayoutRow with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets content of aggregation <code>content</code>.
			 * 
			 * The content cells to be included in the row.
			 * @return 
			 */
			getContent(): BlockLayoutCell[];
			/**
			 * Gets current value of property <code>scrollable</code>.
			 * 
			 * Sets the rendering mode of the BlockLayoutRow to scrollable. In scrollable mode, the cells get
			 * aligned side by side, with horizontal scroll bar for the row.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>scrollable</code>
			 */
			getScrollable(): boolean;
			/**
			 * Checks for the provided <code>sap.ui.layout.BlockLayoutCell</code> in the aggregation <code>content</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oContent The content whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfContent(oContent: BlockLayoutCell): number;
			/**
			 * Inserts a content into the aggregation <code>content</code>.
			 * @param oContent the content to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the content should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the content is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertContent(oContent: BlockLayoutCell, iIndex: number): BlockLayoutRow;
			/**
			 * Removes all the controls from the aggregation <code>content</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllContent(): BlockLayoutCell[];
			/**
			 * Removes a content from the aggregation <code>content</code>.
			 * @param vContent The content to remove or its index or id
			 * @return The removed content or <code>null</code>
			 */
			removeContent(vContent: number|string|BlockLayoutCell): BlockLayoutCell;
			/**
			 * Sets a new value for property <code>scrollable</code>.
			 * 
			 * Sets the rendering mode of the BlockLayoutRow to scrollable. In scrollable mode, the cells get
			 * aligned side by side, with horizontal scroll bar for the row.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bScrollable New value for property <code>scrollable</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setScrollable(bScrollable: boolean): BlockLayoutRow;
		}
	
		class DynamicSideContent extends sap.ui.core.Control {
			/**
			 * Constructor for a new DynamicSideContent.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.layout.DynamicSideContentMetadata);
			/**
			 * Constructor for a new DynamicSideContent.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds a control to the main content area.
			 * Only the main content part in the aggregation is re-rendered.
			 * @param oControl Object to be added in the aggregation
			 * @return this pointer for chaining
			 */
			addMainContent(oControl: any): DynamicSideContent;
			/**
			 * Adds a control to the side content area.
			 * Only the side content part in the aggregation is re-rendered.
			 * @param oControl Object to be added in the aggregation
			 * @return this pointer for chaining
			 */
			addSideContent(oControl: any): DynamicSideContent;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>breakpointChanged</code> event of this <code>sap.ui.layout.DynamicSideContent</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.layout.DynamicSideContent</code> itself.
			 * 
			 * Fires when the current breakpoint has been changed.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.layout.DynamicSideContent</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachBreakpointChanged(oData: any, fnFunction: any, oListener?: any): DynamicSideContent;
			/**
			 * Destroys all the mainContent in the aggregation <code>mainContent</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyMainContent(): DynamicSideContent;
			/**
			 * Destroys all the sideContent in the aggregation <code>sideContent</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroySideContent(): DynamicSideContent;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>breakpointChanged</code> event of this <code>sap.ui.layout.DynamicSideContent</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachBreakpointChanged(fnFunction: any, oListener: any): DynamicSideContent;
			/**
			 * Creates a new subclass of class sap.ui.layout.DynamicSideContent with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Fires event <code>breakpointChanged</code> to attached listeners.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>currentBreakpoint</code> of type <code>string</code></li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireBreakpointChanged(mArguments?: any): DynamicSideContent;
			/**
			 * Gets current value of property <code>containerQuery</code>.
			 * 
			 * If set to TRUE, then not the media Query (device screen size) but the size of the container, surrounding the control, defines the current range.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>containerQuery</code>
			 */
			getContainerQuery(): boolean;
			/**
			 * Returns the breakpoint for the current state of the control.
			 * @return currentBreakpoint
			 */
			getCurrentBreakpoint(): string;
			/**
			 * Gets current value of property <code>equalSplit</code>.
			 * 
			 * Defines whether the control is in equal split mode. In this mode, the side and the main content
			 * take 50:50 percent of the container on all screen sizes except for phone, where the main and
			 * side contents are switching visibility using the toggle method.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>equalSplit</code>
			 */
			getEqualSplit(): boolean;
			/**
			 * Gets content of aggregation <code>mainContent</code>.
			 * 
			 * Main content controls.
			 * @return 
			 */
			getMainContent(): sap.ui.core.Control[];
			/**
			 * Gets the value of showMainContent property.
			 * @return Side content visibility state
			 */
			getShowMainContent(): boolean;
			/**
			 * Gets the value of showSideContent property.
			 * @return Side content visibility state
			 */
			getShowSideContent(): boolean;
			/**
			 * Gets content of aggregation <code>sideContent</code>.
			 * 
			 * Side content controls.
			 * @return 
			 */
			getSideContent(): sap.ui.core.Control[];
			/**
			 * Gets current value of property <code>sideContentFallDown</code>.
			 * 
			 * Determines on which breakpoints the side content falls down below the main content.
			 * 
			 * Default value is <code>OnMinimumWidth</code>.
			 * @return Value of property <code>sideContentFallDown</code>
			 */
			getSideContentFallDown(): SideContentFallDown;
			/**
			 * Gets current value of property <code>sideContentPosition</code>.
			 * 
			 * Determines whether the side content is on the left or on the right side of the main content.
			 * 
			 * Default value is <code>End</code>.
			 * @return Value of property <code>sideContentPosition</code>
			 */
			getSideContentPosition(): SideContentPosition;
			/**
			 * Gets current value of property <code>sideContentVisibility</code>.
			 * 
			 * Determines on which breakpoints the side content is visible.
			 * 
			 * Default value is <code>ShowAboveS</code>.
			 * @return Value of property <code>sideContentVisibility</code>
			 */
			getSideContentVisibility(): SideContentVisibility;
			/**
			 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>mainContent</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oMainContent The mainContent whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfMainContent(oMainContent: sap.ui.core.Control): number;
			/**
			 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>sideContent</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oSideContent The sideContent whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfSideContent(oSideContent: sap.ui.core.Control): number;
			/**
			 * Inserts a mainContent into the aggregation <code>mainContent</code>.
			 * @param oMainContent the mainContent to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the mainContent should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the mainContent is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the mainContent is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertMainContent(oMainContent: sap.ui.core.Control, iIndex: number): DynamicSideContent;
			/**
			 * Inserts a sideContent into the aggregation <code>sideContent</code>.
			 * @param oSideContent the sideContent to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the sideContent should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the sideContent is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the sideContent is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertSideContent(oSideContent: sap.ui.core.Control, iIndex: number): DynamicSideContent;
			/**
			 * Removes all the controls from the aggregation <code>mainContent</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllMainContent(): sap.ui.core.Control[];
			/**
			 * Removes all the controls from the aggregation <code>sideContent</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllSideContent(): sap.ui.core.Control[];
			/**
			 * Removes a mainContent from the aggregation <code>mainContent</code>.
			 * @param vMainContent The mainContent to remove or its index or id
			 * @return The removed mainContent or <code>null</code>
			 */
			removeMainContent(vMainContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
			/**
			 * Removes a sideContent from the aggregation <code>sideContent</code>.
			 * @param vSideContent The sideContent to remove or its index or id
			 * @return The removed sideContent or <code>null</code>
			 */
			removeSideContent(vSideContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
			/**
			 * Sets a new value for property <code>containerQuery</code>.
			 * 
			 * If set to TRUE, then not the media Query (device screen size) but the size of the container, surrounding the control, defines the current range.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bContainerQuery New value for property <code>containerQuery</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setContainerQuery(bContainerQuery: boolean): DynamicSideContent;
			/**
			 * Sets or unsets the page in equalSplit mode.
			 * @param bState Determines if the page is set to equalSplit mode(optional)
			 * @return this pointer for chaining
			 */
			setEqualSplit(bState?: boolean): DynamicSideContent;
			/**
			 * Sets the showMainContent property.
			 * @param bVisible Determines if the main content part is visible
			 * @param bSuppressVisualUpdate Determines if the visual state is updated
			 * @return this pointer for chaining
			 */
			setShowMainContent(bVisible: boolean, bSuppressVisualUpdate: boolean): DynamicSideContent;
			/**
			 * Sets the showSideContent property.
			 * @param bVisible Determines if the side content part is visible
			 * @param bSuppressVisualUpdate Determines if the visual state is updated
			 * @return this pointer for chaining
			 */
			setShowSideContent(bVisible: boolean, bSuppressVisualUpdate: boolean): DynamicSideContent;
			/**
			 * Sets a new value for property <code>sideContentFallDown</code>.
			 * 
			 * Determines on which breakpoints the side content falls down below the main content.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>OnMinimumWidth</code>.
			 * @param sSideContentFallDown New value for property <code>sideContentFallDown</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSideContentFallDown(sSideContentFallDown: SideContentFallDown): DynamicSideContent;
			/**
			 * Sets a new value for property <code>sideContentPosition</code>.
			 * 
			 * Determines whether the side content is on the left or on the right side of the main content.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>End</code>.
			 * @param sSideContentPosition New value for property <code>sideContentPosition</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSideContentPosition(sSideContentPosition: SideContentPosition): DynamicSideContent;
			/**
			 * Sets a new value for property <code>sideContentVisibility</code>.
			 * 
			 * Determines on which breakpoints the side content is visible.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>ShowAboveS</code>.
			 * @param sSideContentVisibility New value for property <code>sideContentVisibility</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSideContentVisibility(sSideContentVisibility: SideContentVisibility): DynamicSideContent;
			/**
			 * Used for the toggle button functionality.
			 * When the control is on a phone screen size only, one control area is visible.
			 * This helper method is used to implement a button/switch for changing
			 * between the main and side content areas.
			 * Only works if the current breakpoint is "S".
			 * @return this pointer for chaining
			 */
			toggle(): DynamicSideContent;
		}
	
		class FixFlex extends sap.ui.core.Control {
			/**
			 * Constructor for a new FixFlex.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.layout.FixFlexMetadata);
			/**
			 * Constructor for a new FixFlex.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some fixContent to the aggregation <code>fixContent</code>.
			 * @param oFixContent the fixContent to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addFixContent(oFixContent: sap.ui.core.Control): FixFlex;
			/**
			 * Destroys all the fixContent in the aggregation <code>fixContent</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyFixContent(): FixFlex;
			/**
			 * Destroys the flexContent in the aggregation <code>flexContent</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyFlexContent(): FixFlex;
			/**
			 * Creates a new subclass of class sap.ui.layout.FixFlex with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets content of aggregation <code>fixContent</code>.
			 * 
			 * Controls in the fixed part of the layout.
			 * @return 
			 */
			getFixContent(): sap.ui.core.Control[];
			/**
			 * Gets current value of property <code>fixContentSize</code>.
			 * 
			 * Determines the height (if the vertical property is "true") or the width (if the vertical property is "false") of the fixed area. If left at the default value "auto", the fixed-size area will be as large as its content. In this case the content cannot use percentage sizes.
			 * 
			 * Default value is <code>auto</code>.
			 * @return Value of property <code>fixContentSize</code>
			 */
			getFixContentSize(): sap.ui.core.CSSSize;
			/**
			 * Gets current value of property <code>fixFirst</code>.
			 * 
			 * Determines whether the fixed-size area should be on the beginning/top ( if the value is "true") or beginning/bottom ( if the value is "false").
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>fixFirst</code>
			 */
			getFixFirst(): boolean;
			/**
			 * Gets content of aggregation <code>flexContent</code>.
			 * 
			 * Control in the stretching part of the layout.
			 * @return 
			 */
			getFlexContent(): sap.ui.core.Control;
			/**
			 * Gets current value of property <code>minFlexSize</code>.
			 * 
			 * Enables scrolling inside the flexible part. The given size is calculated in "px". If the child control in the flexible part is larger then the available flexible size on the screen and if the available size for the flexible part is smaller or equal to the minFlexSize value, the scroll will be for the entire FixFlex control.
			 * 
			 * Default value is <code>0</code>.
			 * @return Value of property <code>minFlexSize</code>
			 */
			getMinFlexSize(): number;
			/**
			 * Gets current value of property <code>vertical</code>.
			 * 
			 * Determines the direction of the layout of child elements. True for vertical and false for horizontal layout.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>vertical</code>
			 */
			getVertical(): boolean;
			/**
			 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>fixContent</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oFixContent The fixContent whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfFixContent(oFixContent: sap.ui.core.Control): number;
			/**
			 * Inserts a fixContent into the aggregation <code>fixContent</code>.
			 * @param oFixContent the fixContent to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the fixContent should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the fixContent is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the fixContent is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertFixContent(oFixContent: sap.ui.core.Control, iIndex: number): FixFlex;
			/**
			 * Removes all the controls from the aggregation <code>fixContent</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllFixContent(): sap.ui.core.Control[];
			/**
			 * Removes a fixContent from the aggregation <code>fixContent</code>.
			 * @param vFixContent The fixContent to remove or its index or id
			 * @return The removed fixContent or <code>null</code>
			 */
			removeFixContent(vFixContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
			/**
			 * Sets a new value for property <code>fixContentSize</code>.
			 * 
			 * Determines the height (if the vertical property is "true") or the width (if the vertical property is "false") of the fixed area. If left at the default value "auto", the fixed-size area will be as large as its content. In this case the content cannot use percentage sizes.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>auto</code>.
			 * @param sFixContentSize New value for property <code>fixContentSize</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setFixContentSize(sFixContentSize: sap.ui.core.CSSSize): FixFlex;
			/**
			 * Sets a new value for property <code>fixFirst</code>.
			 * 
			 * Determines whether the fixed-size area should be on the beginning/top ( if the value is "true") or beginning/bottom ( if the value is "false").
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bFixFirst New value for property <code>fixFirst</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setFixFirst(bFixFirst: boolean): FixFlex;
			/**
			 * Sets the aggregated <code>flexContent</code>.
			 * @param oFlexContent The flexContent to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setFlexContent(oFlexContent: sap.ui.core.Control): FixFlex;
			/**
			 * Sets a new value for property <code>minFlexSize</code>.
			 * 
			 * Enables scrolling inside the flexible part. The given size is calculated in "px". If the child control in the flexible part is larger then the available flexible size on the screen and if the available size for the flexible part is smaller or equal to the minFlexSize value, the scroll will be for the entire FixFlex control.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>0</code>.
			 * @param iMinFlexSize New value for property <code>minFlexSize</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setMinFlexSize(iMinFlexSize: number): FixFlex;
			/**
			 * Sets a new value for property <code>vertical</code>.
			 * 
			 * Determines the direction of the layout of child elements. True for vertical and false for horizontal layout.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bVertical New value for property <code>vertical</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setVertical(bVertical: boolean): FixFlex;
		}
	
		class Grid extends sap.ui.core.Control {
			/**
			 * Constructor for a new Grid.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.layout.GridMetadata);
			/**
			 * Constructor for a new Grid.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some content to the aggregation <code>content</code>.
			 * @param oContent the content to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addContent(oContent: sap.ui.core.Control): Grid;
			/**
			 * Destroys all the content in the aggregation <code>content</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyContent(): Grid;
			/**
			 * Creates a new subclass of class sap.ui.layout.Grid with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * 
			 */
			getAccessibilityInfo();
			/**
			 * This function (if available on the concrete control) provides
			 * the current accessibility state of the control.
			 * 
			 * Applications must not call this hook method directly, it is called by the framework.
			 * 
			 * Subclasses of Control should implement this hook to provide any necessary accessibility information:
			 * 
			 * <pre>
			 * MyControl.prototype.getAccessibilityInfo = function() {
			 *    return {
			 *      role: "textbox",      // String which represents the WAI-ARIA role which is implemented by the control.
			 *      type: "date input",   // String which represents the control type (Must be a translated text). Might correlate with
			 *                            // the role.
			 *      description: "value", // String which describes the most relevant control state (e.g. the inputs value). Must be a
			 *                            // translated text.
			 *                            // Note: The type and the enabled/editable state must not be handled here.
			 *      focusable: true,      // Boolean which describes whether the control can get the focus.
			 *      enabled: true,        // Boolean which describes whether the control is enabled. If not relevant it must not be set or
			 *                            // <code>null</code> can be provided.
			 *      editable: true,       // Boolean which describes whether the control is editable. If not relevant it must not be set or
			 *                            // <code>null</code> can be provided.
			 *      children: []          // Array of accessibility info objects of children of the given control (e.g. when the control is a layout).
			 *                            // Note: Children should only be provided when it is helpful to understand the accessibility context
			 *                            //       (e.g. a form control must not provide details of its internals (fields, labels, ...) but a
			 *                            //       layout should).
			 *    };
			 * };
			 * </pre>
			 * 
			 * Note: The returned object provides the accessibility state of the control at the point in time when this function is called.
			 * @note Overload from base type sap.ui.core.Control
			 * @return Current accessibility state of the control.
			 */
			getAccessibilityInfo(): any;
			/**
			 * Gets current value of property <code>containerQuery</code>.
			 * 
			 * If true then not the media Query ( device screen size), but the size of the container surrounding the grid defines the current range (large, medium or small).
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>containerQuery</code>
			 */
			getContainerQuery(): boolean;
			/**
			 * Gets content of aggregation <code>content</code>.
			 * 
			 * Controls that are placed into Grid layout.
			 * @return 
			 */
			getContent(): sap.ui.core.Control[];
			/**
			 * Gets current value of property <code>defaultIndent</code>.
			 * 
			 * Optional. Defines default for the whole Grid numbers of empty columns before the current span begins. It can be defined for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 0 to 11 that the container has to take, for example: "L2 M4 S6", "M11", "s10" or "l4 m4". Note that the parameters has to be provided in the order large medium small.
			 * 
			 * Default value is <code>XL0 L0 M0 S0</code>.
			 * @return Value of property <code>defaultIndent</code>
			 */
			getDefaultIndent(): GridIndent;
			/**
			 * Gets current value of property <code>defaultSpan</code>.
			 * 
			 * Optional. A string type that represents Grid's default span values for large, medium and small screens for the whole Grid. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: "L2 M4 S6", "M12", "s10" or "l4 m4". Note that the parameters has to be provided in the order large medium small.
			 * 
			 * Default value is <code>XL3 L3 M6 S12</code>.
			 * @return Value of property <code>defaultSpan</code>
			 */
			getDefaultSpan(): GridSpan;
			/**
			 * Gets current value of property <code>hSpacing</code>.
			 * 
			 * Optional. Horizontal spacing between the content in the Grid. In rem, allowed values are 0, 0.5 , 1 or 2.
			 * 
			 * Default value is <code>1</code>.
			 * @return Value of property <code>hSpacing</code>
			 */
			getHSpacing(): number;
			/**
			 * Gets current value of property <code>position</code>.
			 * 
			 * Optional. Position of the Grid in the window or surrounding container. Possible values are "Center", "Left" and "Right".
			 * 
			 * Default value is <code>Left</code>.
			 * @return Value of property <code>position</code>
			 */
			getPosition(): GridPosition;
			/**
			 * Gets current value of property <code>vSpacing</code>.
			 * 
			 * Optional. Vertical spacing between the rows in the Grid. In rem, allowed values are 0, 0.5, 1 and 2.
			 * 
			 * Default value is <code>1</code>.
			 * @return Value of property <code>vSpacing</code>
			 */
			getVSpacing(): number;
			/**
			 * Gets current value of property <code>width</code>.
			 * 
			 * Optional. Width of the Grid. If not specified, then 100%.
			 * 
			 * Default value is <code>100%</code>.
			 * @return Value of property <code>width</code>
			 */
			getWidth(): sap.ui.core.CSSSize;
			/**
			 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oContent The content whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfContent(oContent: sap.ui.core.Control): number;
			/**
			 * Inserts a content into the aggregation <code>content</code>.
			 * @param oContent the content to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the content should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the content is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertContent(oContent: sap.ui.core.Control, iIndex: number): Grid;
			/**
			 * Removes all the controls from the aggregation <code>content</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllContent(): sap.ui.core.Control[];
			/**
			 * Removes a content from the aggregation <code>content</code>.
			 * @param vContent The content to remove or its index or id
			 * @return The removed content or <code>null</code>
			 */
			removeContent(vContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
			/**
			 * Sets a new value for property <code>containerQuery</code>.
			 * 
			 * If true then not the media Query ( device screen size), but the size of the container surrounding the grid defines the current range (large, medium or small).
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bContainerQuery New value for property <code>containerQuery</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setContainerQuery(bContainerQuery: boolean): Grid;
			/**
			 * Sets a new value for property <code>defaultIndent</code>.
			 * 
			 * Optional. Defines default for the whole Grid numbers of empty columns before the current span begins. It can be defined for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 0 to 11 that the container has to take, for example: "L2 M4 S6", "M11", "s10" or "l4 m4". Note that the parameters has to be provided in the order large medium small.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>XL0 L0 M0 S0</code>.
			 * @param sDefaultIndent New value for property <code>defaultIndent</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setDefaultIndent(sDefaultIndent: GridIndent): Grid;
			/**
			 * Sets a new value for property <code>defaultSpan</code>.
			 * 
			 * Optional. A string type that represents Grid's default span values for large, medium and small screens for the whole Grid. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: "L2 M4 S6", "M12", "s10" or "l4 m4". Note that the parameters has to be provided in the order large medium small.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>XL3 L3 M6 S12</code>.
			 * @param sDefaultSpan New value for property <code>defaultSpan</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setDefaultSpan(sDefaultSpan: GridSpan): Grid;
			/**
			 * Sets a new value for property <code>hSpacing</code>.
			 * 
			 * Optional. Horizontal spacing between the content in the Grid. In rem, allowed values are 0, 0.5 , 1 or 2.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>1</code>.
			 * @param fHSpacing New value for property <code>hSpacing</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setHSpacing(fHSpacing: number): Grid;
			/**
			 * Sets a new value for property <code>position</code>.
			 * 
			 * Optional. Position of the Grid in the window or surrounding container. Possible values are "Center", "Left" and "Right".
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>Left</code>.
			 * @param sPosition New value for property <code>position</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setPosition(sPosition: GridPosition): Grid;
			/**
			 * Sets a new value for property <code>vSpacing</code>.
			 * 
			 * Optional. Vertical spacing between the rows in the Grid. In rem, allowed values are 0, 0.5, 1 and 2.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>1</code>.
			 * @param fVSpacing New value for property <code>vSpacing</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setVSpacing(fVSpacing: number): Grid;
			/**
			 * Sets a new value for property <code>width</code>.
			 * 
			 * Optional. Width of the Grid. If not specified, then 100%.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>100%</code>.
			 * @param sWidth New value for property <code>width</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setWidth(sWidth: sap.ui.core.CSSSize): Grid;
		}
	
		class GridData extends sap.ui.core.LayoutData {
			/**
			 * Constructor for a new GridData.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.layout.GridDataMetadata);
			/**
			 * Constructor for a new GridData.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.ui.layout.GridData with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets current value of property <code>indent</code>.
			 * 
			 * A string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: "L2 M4 S6", "M12", "s10" or "l4 m4". Note that the parameters has to be provided in the order large medium small.
			 * @return Value of property <code>indent</code>
			 */
			getIndent(): GridIndent;
			/**
			 * Gets current value of property <code>indentL</code>.
			 * 
			 * Optional. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter "indent".
			 * @return Value of property <code>indentL</code>
			 */
			getIndentL(): number;
			/**
			 * Gets current value of property <code>indentM</code>.
			 * 
			 * Optional. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter "indent".
			 * @return Value of property <code>indentM</code>
			 */
			getIndentM(): number;
			/**
			 * Gets current value of property <code>indentS</code>.
			 * 
			 * Optional. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter "indent".
			 * @return Value of property <code>indentS</code>
			 */
			getIndentS(): number;
			/**
			 * Gets current value of property <code>indentXL</code>.
			 * 
			 * Optional. Defines a span value for extra large screens. This value overwrites the value for extra large screens defined in the parameter "indent".
			 * @return Value of property <code>indentXL</code>
			 */
			getIndentXL(): number;
			/**
			 * Gets current value of property <code>linebreak</code>.
			 * 
			 * Optional. If this property is set to true, the control on all-size screens causes a line break within the Grid and becomes the first within the next line.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>linebreak</code>
			 */
			getLinebreak(): boolean;
			/**
			 * Gets current value of property <code>linebreakL</code>.
			 * 
			 * Optional. If this property is set to true, the control on large screens causes a line break within the Grid and becomes the first within the next line.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>linebreakL</code>
			 */
			getLinebreakL(): boolean;
			/**
			 * Gets current value of property <code>linebreakM</code>.
			 * 
			 * Optional. If this property is set to true, the control on medium sized screens causes a line break within the Grid and becomes the first within the next line.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>linebreakM</code>
			 */
			getLinebreakM(): boolean;
			/**
			 * Gets current value of property <code>linebreakS</code>.
			 * 
			 * Optional. If this property is set to true, the control on small screens causes a line break within the Grid and becomes the first within the next line.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>linebreakS</code>
			 */
			getLinebreakS(): boolean;
			/**
			 * Gets current value of property <code>linebreakXL</code>.
			 * 
			 * Optional. If this property is set to true, the control on extra large screens causes a line break within the Grid and becomes the first within the next line.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>linebreakXL</code>
			 */
			getLinebreakXL(): boolean;
			/**
			 * Gets current value of property <code>moveBackwards</code>.
			 * 
			 * Optional. Moves a cell backwards so many columns as specified.
			 * @return Value of property <code>moveBackwards</code>
			 */
			getMoveBackwards(): GridIndent;
			/**
			 * Gets current value of property <code>moveForward</code>.
			 * 
			 * Optional. Moves a cell forwards so many columns as specified.
			 * @return Value of property <code>moveForward</code>
			 */
			getMoveForward(): GridIndent;
			/**
			 * Gets current value of property <code>span</code>.
			 * 
			 * A string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: "L2 M4 S6", "M12", "s10" or "l4 m4". Note that the parameters has to be provided in the order large medium small.
			 * @return Value of property <code>span</code>
			 */
			getSpan(): GridSpan;
			/**
			 * Gets current value of property <code>spanL</code>.
			 * 
			 * Optional. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter "span".
			 * @return Value of property <code>spanL</code>
			 */
			getSpanL(): number;
			/**
			 * Gets current value of property <code>spanM</code>.
			 * 
			 * Optional. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter "span".
			 * @return Value of property <code>spanM</code>
			 */
			getSpanM(): number;
			/**
			 * Gets current value of property <code>spanS</code>.
			 * 
			 * Optional. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter "span".
			 * @return Value of property <code>spanS</code>
			 */
			getSpanS(): number;
			/**
			 * Gets current value of property <code>spanXL</code>.
			 * 
			 * Optional. Defines a span value for extra large screens. This value overwrites the value for extra large screens defined in the parameter "span".
			 * @return Value of property <code>spanXL</code>
			 */
			getSpanXL(): number;
			/**
			 * Gets current value of property <code>visibleL</code>.
			 * 
			 * Defines if this Control is visible on Large screens.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>visibleL</code>
			 */
			getVisibleL(): boolean;
			/**
			 * Gets current value of property <code>visibleM</code>.
			 * 
			 * Defines if this Control is visible on Medium size screens.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>visibleM</code>
			 */
			getVisibleM(): boolean;
			/**
			 * Gets current value of property <code>visibleS</code>.
			 * 
			 * Defines if this Control is visible on small screens.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>visibleS</code>
			 */
			getVisibleS(): boolean;
			/**
			 * Gets current value of property <code>visibleXL</code>.
			 * 
			 * Defines if this Control is visible on XL - extra Large screens.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>visibleXL</code>
			 */
			getVisibleXL(): boolean;
			/**
			 * Sets a new value for property <code>indent</code>.
			 * 
			 * A string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: "L2 M4 S6", "M12", "s10" or "l4 m4". Note that the parameters has to be provided in the order large medium small.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sIndent New value for property <code>indent</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setIndent(sIndent: GridIndent): GridData;
			/**
			 * Sets a new value for property <code>indentL</code>.
			 * 
			 * Optional. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter "indent".
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param iIndentL New value for property <code>indentL</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setIndentL(iIndentL: number): GridData;
			/**
			 * Sets a new value for property <code>indentM</code>.
			 * 
			 * Optional. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter "indent".
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param iIndentM New value for property <code>indentM</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setIndentM(iIndentM: number): GridData;
			/**
			 * Sets a new value for property <code>indentS</code>.
			 * 
			 * Optional. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter "indent".
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param iIndentS New value for property <code>indentS</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setIndentS(iIndentS: number): GridData;
			/**
			 * Sets a new value for property <code>indentXL</code>.
			 * 
			 * Optional. Defines a span value for extra large screens. This value overwrites the value for extra large screens defined in the parameter "indent".
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param iIndentXL New value for property <code>indentXL</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setIndentXL(iIndentXL: number): GridData;
			/**
			 * Sets a new value for property <code>linebreak</code>.
			 * 
			 * Optional. If this property is set to true, the control on all-size screens causes a line break within the Grid and becomes the first within the next line.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bLinebreak New value for property <code>linebreak</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setLinebreak(bLinebreak: boolean): GridData;
			/**
			 * Sets a new value for property <code>linebreakL</code>.
			 * 
			 * Optional. If this property is set to true, the control on large screens causes a line break within the Grid and becomes the first within the next line.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bLinebreakL New value for property <code>linebreakL</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setLinebreakL(bLinebreakL: boolean): GridData;
			/**
			 * Sets a new value for property <code>linebreakM</code>.
			 * 
			 * Optional. If this property is set to true, the control on medium sized screens causes a line break within the Grid and becomes the first within the next line.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bLinebreakM New value for property <code>linebreakM</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setLinebreakM(bLinebreakM: boolean): GridData;
			/**
			 * Sets a new value for property <code>linebreakS</code>.
			 * 
			 * Optional. If this property is set to true, the control on small screens causes a line break within the Grid and becomes the first within the next line.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bLinebreakS New value for property <code>linebreakS</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setLinebreakS(bLinebreakS: boolean): GridData;
			/**
			 * Sets a new value for property <code>linebreakXL</code>.
			 * 
			 * Optional. If this property is set to true, the control on extra large screens causes a line break within the Grid and becomes the first within the next line.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bLinebreakXL New value for property <code>linebreakXL</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setLinebreakXL(bLinebreakXL: boolean): GridData;
			/**
			 * Sets a new value for property <code>moveBackwards</code>.
			 * 
			 * Optional. Moves a cell backwards so many columns as specified.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sMoveBackwards New value for property <code>moveBackwards</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setMoveBackwards(sMoveBackwards: GridIndent): GridData;
			/**
			 * Sets a new value for property <code>moveForward</code>.
			 * 
			 * Optional. Moves a cell forwards so many columns as specified.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sMoveForward New value for property <code>moveForward</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setMoveForward(sMoveForward: GridIndent): GridData;
			/**
			 * Sets a new value for property <code>span</code>.
			 * 
			 * A string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: "L2 M4 S6", "M12", "s10" or "l4 m4". Note that the parameters has to be provided in the order large medium small.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sSpan New value for property <code>span</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSpan(sSpan: GridSpan): GridData;
			/**
			 * Sets a new value for property <code>spanL</code>.
			 * 
			 * Optional. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter "span".
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param iSpanL New value for property <code>spanL</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSpanL(iSpanL: number): GridData;
			/**
			 * Sets a new value for property <code>spanM</code>.
			 * 
			 * Optional. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter "span".
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param iSpanM New value for property <code>spanM</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSpanM(iSpanM: number): GridData;
			/**
			 * Sets a new value for property <code>spanS</code>.
			 * 
			 * Optional. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter "span".
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param iSpanS New value for property <code>spanS</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSpanS(iSpanS: number): GridData;
			/**
			 * Sets a new value for property <code>spanXL</code>.
			 * 
			 * Optional. Defines a span value for extra large screens. This value overwrites the value for extra large screens defined in the parameter "span".
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param iSpanXL New value for property <code>spanXL</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSpanXL(iSpanXL: number): GridData;
			/**
			 * Sets a new value for property <code>visibleL</code>.
			 * 
			 * Defines if this Control is visible on Large screens.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bVisibleL New value for property <code>visibleL</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setVisibleL(bVisibleL: boolean): GridData;
			/**
			 * Sets a new value for property <code>visibleM</code>.
			 * 
			 * Defines if this Control is visible on Medium size screens.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bVisibleM New value for property <code>visibleM</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setVisibleM(bVisibleM: boolean): GridData;
			/**
			 * Sets a new value for property <code>visibleS</code>.
			 * 
			 * Defines if this Control is visible on small screens.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bVisibleS New value for property <code>visibleS</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setVisibleS(bVisibleS: boolean): GridData;
			/**
			 * Sets a new value for property <code>visibleXL</code>.
			 * 
			 * Defines if this Control is visible on XL - extra Large screens.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bVisibleXL New value for property <code>visibleXL</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setVisibleXL(bVisibleXL: boolean): GridData;
		}
	
		class GridPosition {
			/**
			 * Grid is centered on the screen.
			 */
			static Center: string;
			/**
			 * Grid is aligned left.
			 */
			static Left: string;
			/**
			 * Grid is aligned to the right.
			 */
			static Right: string;
		}
	
		class HorizontalLayout extends sap.ui.core.Control {
			/**
			 * Constructor for a new HorizontalLayout.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.layout.HorizontalLayoutMetadata);
			/**
			 * Constructor for a new HorizontalLayout.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some content to the aggregation <code>content</code>.
			 * @param oContent the content to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addContent(oContent: sap.ui.core.Control): HorizontalLayout;
			/**
			 * Destroys all the content in the aggregation <code>content</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyContent(): HorizontalLayout;
			/**
			 * Creates a new subclass of class sap.ui.layout.HorizontalLayout with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * 
			 */
			getAccessibilityInfo();
			/**
			 * This function (if available on the concrete control) provides
			 * the current accessibility state of the control.
			 * 
			 * Applications must not call this hook method directly, it is called by the framework.
			 * 
			 * Subclasses of Control should implement this hook to provide any necessary accessibility information:
			 * 
			 * <pre>
			 * MyControl.prototype.getAccessibilityInfo = function() {
			 *    return {
			 *      role: "textbox",      // String which represents the WAI-ARIA role which is implemented by the control.
			 *      type: "date input",   // String which represents the control type (Must be a translated text). Might correlate with
			 *                            // the role.
			 *      description: "value", // String which describes the most relevant control state (e.g. the inputs value). Must be a
			 *                            // translated text.
			 *                            // Note: The type and the enabled/editable state must not be handled here.
			 *      focusable: true,      // Boolean which describes whether the control can get the focus.
			 *      enabled: true,        // Boolean which describes whether the control is enabled. If not relevant it must not be set or
			 *                            // <code>null</code> can be provided.
			 *      editable: true,       // Boolean which describes whether the control is editable. If not relevant it must not be set or
			 *                            // <code>null</code> can be provided.
			 *      children: []          // Array of accessibility info objects of children of the given control (e.g. when the control is a layout).
			 *                            // Note: Children should only be provided when it is helpful to understand the accessibility context
			 *                            //       (e.g. a form control must not provide details of its internals (fields, labels, ...) but a
			 *                            //       layout should).
			 *    };
			 * };
			 * </pre>
			 * 
			 * Note: The returned object provides the accessibility state of the control at the point in time when this function is called.
			 * @note Overload from base type sap.ui.core.Control
			 * @return Current accessibility state of the control.
			 */
			getAccessibilityInfo(): any;
			/**
			 * Gets current value of property <code>allowWrapping</code>.
			 * 
			 * Specifies whether the content inside the Layout shall be line-wrapped in the case that there is less horizontal space available than required.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>allowWrapping</code>
			 */
			getAllowWrapping(): boolean;
			/**
			 * Gets content of aggregation <code>content</code>.
			 * 
			 * The controls inside this layout
			 * @return 
			 */
			getContent(): sap.ui.core.Control[];
			/**
			 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oContent The content whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfContent(oContent: sap.ui.core.Control): number;
			/**
			 * Inserts a content into the aggregation <code>content</code>.
			 * @param oContent the content to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the content should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the content is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertContent(oContent: sap.ui.core.Control, iIndex: number): HorizontalLayout;
			/**
			 * Removes all the controls from the aggregation <code>content</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllContent(): sap.ui.core.Control[];
			/**
			 * Removes a content from the aggregation <code>content</code>.
			 * @param vContent The content to remove or its index or id
			 * @return The removed content or <code>null</code>
			 */
			removeContent(vContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
			/**
			 * Sets a new value for property <code>allowWrapping</code>.
			 * 
			 * Specifies whether the content inside the Layout shall be line-wrapped in the case that there is less horizontal space available than required.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bAllowWrapping New value for property <code>allowWrapping</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setAllowWrapping(bAllowWrapping: boolean): HorizontalLayout;
		}
	
		class PaneContainer extends sap.ui.core.Element {
			/**
			 * Constructor for a new PaneContainer.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.layout.PaneContainerMetadata);
			/**
			 * Constructor for a new PaneContainer.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some pane to the aggregation <code>panes</code>.
			 * @param oPane the pane to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addPane(oPane: sap.ui.core.Element): PaneContainer;
			/**
			 * Destroys all the panes in the aggregation <code>panes</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyPanes(): PaneContainer;
			/**
			 * Creates a new subclass of class sap.ui.layout.PaneContainer with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets current value of property <code>orientation</code>.
			 * 
			 * The orientation of the Splitter
			 * 
			 * Default value is <code>Horizontal</code>.
			 * @return Value of property <code>orientation</code>
			 */
			getOrientation(): sap.ui.core.Orientation;
			/**
			 * Gets content of aggregation <code>panes</code>.
			 * 
			 * The Pane that will be shown when there is no suitable pane for ResponsiveSplitter's current width.
			 * @return 
			 */
			getPanes(): sap.ui.core.Element[];
			/**
			 * Checks for the provided <code>sap.ui.core.Element</code> in the aggregation <code>panes</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oPane The pane whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfPane(oPane: sap.ui.core.Element): number;
			/**
			 * Inserts a pane into the aggregation <code>panes</code>.
			 * @param oPane the pane to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the pane should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the pane is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the pane is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertPane(oPane: sap.ui.core.Element, iIndex: number): PaneContainer;
			/**
			 * Removes all the controls from the aggregation <code>panes</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllPanes(): sap.ui.core.Element[];
			/**
			 * Removes a pane from the aggregation <code>panes</code>.
			 * @param vPane The pane to remove or its index or id
			 * @return The removed pane or <code>null</code>
			 */
			removePane(vPane: number|string|sap.ui.core.Element): sap.ui.core.Element;
			/**
			 * Setter for property layoutData.
			 * @param oLayoutData The LayoutData object.
			 * @return this to allow method chaining.
			 */
			setLayoutData(oLayoutData: sap.ui.core.LayoutData): PaneContainer;
			/**
			 * Sets the {@link sap.ui.core.LayoutData} defining the layout constraints
			 * for this control when it is used inside a layout.
			 * @note Overload from base type sap.ui.core.Element
			 * @param oLayoutData 
			 */
			setLayoutData(oLayoutData: sap.ui.core.LayoutData);
			/**
			 * Setter for property orientation.
			 * Default value is sap.ui.core.Orientation.Horizontal
			 * @param sOrientation The Orientation type.
			 * @return this to allow method chaining.
			 */
			setOrientation(sOrientation: sap.ui.core.Orientation): PaneContainer;
		}
	
		class ResponsiveFlowLayout extends sap.ui.core.Control {
			/**
			 * Constructor for a new ResponsiveFlowLayout.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.layout.ResponsiveFlowLayoutMetadata);
			/**
			 * Constructor for a new ResponsiveFlowLayout.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds content.
			 * This function needs to be overridden to prevent any rendering while some
			 * content is still being added.
			 * @param oContent The content that should be added to the layout
			 */
			addContent(oContent: sap.ui.core.Control);
			/**
			 * Destroys all the content in the aggregation <code>content</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyContent(): ResponsiveFlowLayout;
			/**
			 * Creates a new subclass of class sap.ui.layout.ResponsiveFlowLayout with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets content of aggregation <code>content</code>.
			 * 
			 * Added content that should be positioned. Every content item should have a ResponsiveFlowLayoutData attached, or otherwise, the default values are used.
			 * @return 
			 */
			getContent(): sap.ui.core.Control[];
			/**
			 * Gets current value of property <code>responsive</code>.
			 * 
			 * If set to false, all added controls will keep their width, or otherwise, the controls will be stretched to the possible width of a row.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>responsive</code>
			 */
			getResponsive(): boolean;
			/**
			 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oContent The content whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfContent(oContent: sap.ui.core.Control): number;
			/**
			 * Inserts content.
			 * This function needs to be overridden to prevent any rendering while some
			 * content is still being added.
			 * @param oContent The content that should be inserted to the layout
			 * @param iIndex The index where the content should be inserted into
			 */
			insertContent(oContent: sap.ui.core.Control, iIndex: number);
			/**
			 * Removes all the controls from the aggregation <code>content</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllContent(): sap.ui.core.Control[];
			/**
			 * Removes content.
			 * This function needs to be overridden to prevent any rendering while some
			 * content is still being added.
			 * @param oContent The content that should be removed from the layout
			 * @return The <code>this</code> pointer for chaining
			 */
			removeContent(oContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
			/**
			 * Sets a new value for property <code>responsive</code>.
			 * 
			 * If set to false, all added controls will keep their width, or otherwise, the controls will be stretched to the possible width of a row.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bResponsive New value for property <code>responsive</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setResponsive(bResponsive: boolean): ResponsiveFlowLayout;
		}
	
		class ResponsiveFlowLayoutData extends sap.ui.core.LayoutData {
			/**
			 * Constructor for a new ResponsiveFlowLayoutData.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.layout.ResponsiveFlowLayoutDataMetadata);
			/**
			 * Constructor for a new ResponsiveFlowLayoutData.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.ui.layout.ResponsiveFlowLayoutData with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets current value of property <code>linebreak</code>.
			 * 
			 * If this property is set, the control in which the LayoutData is added, will always cause a line break within the ResponsiveFlowLayout.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>linebreak</code>
			 */
			getLinebreak(): boolean;
			/**
			 * Gets current value of property <code>linebreakable</code>.
			 * 
			 * Shows if an element can be wrapped into a new row. If this value is set to false, the min-width will be set to 0 and the wrapping is up to the previous element.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>linebreakable</code>
			 */
			getLinebreakable(): boolean;
			/**
			 * Gets current value of property <code>margin</code>.
			 * 
			 * Prevents any margin of the element if set to false.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>margin</code>
			 */
			getMargin(): boolean;
			/**
			 * Gets current value of property <code>minWidth</code>.
			 * 
			 * Defines the minimal size in px of an ResponsiveFlowLayout element. The element will be shrunk down to this value.
			 * 
			 * Default value is <code>100</code>.
			 * @return Value of property <code>minWidth</code>
			 */
			getMinWidth(): number;
			/**
			 * Gets current value of property <code>weight</code>.
			 * 
			 * Defines the weight of the element, that influences the resulting width. If there are several elements within a row of the ResponsiveFlowLayout, each element could have another weight. The bigger the weight of a single element, the wider it will be stretched, i.e. a bigger weight results in a larger width.
			 * 
			 * Default value is <code>1</code>.
			 * @return Value of property <code>weight</code>
			 */
			getWeight(): number;
			/**
			 * Sets a new value for property <code>linebreak</code>.
			 * 
			 * If this property is set, the control in which the LayoutData is added, will always cause a line break within the ResponsiveFlowLayout.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bLinebreak New value for property <code>linebreak</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setLinebreak(bLinebreak: boolean): ResponsiveFlowLayoutData;
			/**
			 * Sets a new value for property <code>linebreakable</code>.
			 * 
			 * Shows if an element can be wrapped into a new row. If this value is set to false, the min-width will be set to 0 and the wrapping is up to the previous element.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bLinebreakable New value for property <code>linebreakable</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setLinebreakable(bLinebreakable: boolean): ResponsiveFlowLayoutData;
			/**
			 * Sets a new value for property <code>margin</code>.
			 * 
			 * Prevents any margin of the element if set to false.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bMargin New value for property <code>margin</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setMargin(bMargin: boolean): ResponsiveFlowLayoutData;
			/**
			 * Sets a new value for property <code>minWidth</code>.
			 * 
			 * Defines the minimal size in px of an ResponsiveFlowLayout element. The element will be shrunk down to this value.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>100</code>.
			 * @param iMinWidth New value for property <code>minWidth</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setMinWidth(iMinWidth: number): ResponsiveFlowLayoutData;
			/**
			 * Sets a new value for property <code>weight</code>.
			 * 
			 * Defines the weight of the element, that influences the resulting width. If there are several elements within a row of the ResponsiveFlowLayout, each element could have another weight. The bigger the weight of a single element, the wider it will be stretched, i.e. a bigger weight results in a larger width.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>1</code>.
			 * @param iWeight New value for property <code>weight</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setWeight(iWeight: number): ResponsiveFlowLayoutData;
		}
	
		class ResponsiveSplitter extends sap.ui.core.Control {
			/**
			 * Constructor for a new ResponsiveSplitter.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.layout.ResponsiveSplitterMetadata);
			/**
			 * Constructor for a new ResponsiveSplitter.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Destroys the rootPaneContainer in the aggregation <code>rootPaneContainer</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyRootPaneContainer(): ResponsiveSplitter;
			/**
			 * Creates a new subclass of class sap.ui.layout.ResponsiveSplitter with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * ID of the element which is the current target of the association <code>defaultPane</code>, or <code>null</code>.
			 * @return 
			 */
			getDefaultPane(): sap.ui.core.ID;
			/**
			 * Gets current value of property <code>height</code>.
			 * 
			 * The height of the control
			 * 
			 * Default value is <code>100%</code>.
			 * @return Value of property <code>height</code>
			 */
			getHeight(): sap.ui.core.CSSSize;
			/**
			 * Gets content of aggregation <code>rootPaneContainer</code>.
			 * 
			 * The root PaneContainer of the ResponsiveSplitter
			 * @return 
			 */
			getRootPaneContainer(): PaneContainer;
			/**
			 * Gets current value of property <code>width</code>.
			 * 
			 * The width of the control
			 * 
			 * Default value is <code>100%</code>.
			 * @return Value of property <code>width</code>
			 */
			getWidth(): sap.ui.core.CSSSize;
			/**
			 * Sets the associated <code>defaultPane</code>.
			 * @param oDefaultPane ID of an element which becomes the new target of this defaultPane association; alternatively, an element instance may be given
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setDefaultPane(oDefaultPane: sap.ui.core.ID|SplitPane): ResponsiveSplitter;
			/**
			 * Sets a new value for property <code>height</code>.
			 * 
			 * The height of the control
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>100%</code>.
			 * @param sHeight New value for property <code>height</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setHeight(sHeight: sap.ui.core.CSSSize): ResponsiveSplitter;
			/**
			 * Sets the aggregated <code>rootPaneContainer</code>.
			 * @param oRootPaneContainer The rootPaneContainer to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setRootPaneContainer(oRootPaneContainer: PaneContainer): ResponsiveSplitter;
			/**
			 * Sets a new value for property <code>width</code>.
			 * 
			 * The width of the control
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>100%</code>.
			 * @param sWidth New value for property <code>width</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setWidth(sWidth: sap.ui.core.CSSSize): ResponsiveSplitter;
		}
	
		class SideContentFallDown {
			/**
			 * Side content falls down on breakpoints below L
			 */
			static BelowL: string;
			/**
			 * Side content falls down on breakpoints below M
			 */
			static BelowM: string;
			/**
			 * Side content falls down on breakpoints below XL
			 */
			static BelowXL: string;
			/**
			 * Side content falls down on breakpoint M and the minimum width for the side content
			 */
			static OnMinimumWidth: string;
		}
	
		class SideContentPosition {
			/**
			 * The side content is on the left side of the main container in left-to-right mode and on the right side in right-to-left mode.
			 */
			static Begin: string;
			/**
			 * The side content is on the right side of the main container in left-to-right mode and on the left side in right-to-left mode.
			 */
			static End: string;
		}
	
		class SideContentVisibility {
			/**
			 * Show the side content on any breakpoint
			 */
			static AlwaysShow: string;
			/**
			 * Don't show the side content on any breakpoints
			 */
			static NeverShow: string;
			/**
			 * Show the side content on XL breakpoint
			 */
			static ShowAboveL: string;
			/**
			 * Show the side content on L and XL breakpoints
			 */
			static ShowAboveM: string;
			/**
			 * Show the side content on M, L and XL breakpoints
			 */
			static ShowAboveS: string;
		}
	
		class SplitPane extends sap.ui.core.Element {
			/**
			 * Constructor for a new SplitPane.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.layout.SplitPaneMetadata);
			/**
			 * Constructor for a new SplitPane.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Destroys the content in the aggregation <code>content</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyContent(): SplitPane;
			/**
			 * Creates a new subclass of class sap.ui.layout.SplitPane with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets content of aggregation <code>content</code>.
			 * 
			 * Content of the SplitPane
			 * @return 
			 */
			getContent(): sap.ui.core.Control;
			/**
			 * Gets current value of property <code>demandPane</code>.
			 * 
			 * Determines whether the pane will be moved to the pagination
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>demandPane</code>
			 */
			getDemandPane(): boolean;
			/**
			 * Gets current value of property <code>requiredParentWidth</code>.
			 * 
			 * Determines the minimum width of the ResponsiveSplitter(in pixels). When it is reached the pane will be hidden from the screen.
			 * 
			 * Default value is <code>800</code>.
			 * @return Value of property <code>requiredParentWidth</code>
			 */
			getRequiredParentWidth(): number;
			/**
			 * Sets the aggregated <code>content</code>.
			 * @param oContent The content to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setContent(oContent: sap.ui.core.Control): SplitPane;
			/**
			 * Sets a new value for property <code>demandPane</code>.
			 * 
			 * Determines whether the pane will be moved to the pagination
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bDemandPane New value for property <code>demandPane</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setDemandPane(bDemandPane: boolean): SplitPane;
			/**
			 * Sets a new value for property <code>requiredParentWidth</code>.
			 * 
			 * Determines the minimum width of the ResponsiveSplitter(in pixels). When it is reached the pane will be hidden from the screen.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>800</code>.
			 * @param iRequiredParentWidth New value for property <code>requiredParentWidth</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setRequiredParentWidth(iRequiredParentWidth: number): SplitPane;
		}
	
		class Splitter extends sap.ui.core.Control {
			/**
			 * Constructor for a new Splitter.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.layout.SplitterMetadata);
			/**
			 * Constructor for a new Splitter.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some contentArea to the aggregation <code>contentAreas</code>.
			 * @param oContentArea the contentArea to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addContentArea(oContentArea: sap.ui.core.Control): Splitter;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>resize</code> event of this <code>sap.ui.layout.Splitter</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.layout.Splitter</code> itself.
			 * 
			 * Event is fired when contents are resized.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.layout.Splitter</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachResize(oData: any, fnFunction: any, oListener?: any): Splitter;
			/**
			 * Destroys all the contentAreas in the aggregation <code>contentAreas</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyContentAreas(): Splitter;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>resize</code> event of this <code>sap.ui.layout.Splitter</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachResize(fnFunction: any, oListener: any): Splitter;
			/**
			 * Disables the resize handler for this control, this leads to an automatic resize of
			 * the contents whenever the control changes its size. The resize handler is enabled
			 * in every control instance by default.
			 * For performance reasons this behavior can be disabled by calling disableAutoResize()
			 * @param bTemporarily Only disable autoResize temporarily (used for live resize), so that the previous status can be restored afterwards(optional)
			 * @deprecated This method is declared as protected in order to assess the need for this feature. It is declared as deprecated because the API might change in case the need for this is high enough to make it part of the official Splitter interface
			 */
			disableAutoResize(bTemporarily?: boolean);
			/**
			 * Disables the resizing of the Splitter contents via keyboard. This changes the Splitter bars
			 * to non-focussable elements.
			 */
			disableKeyboardSupport();
			/**
			 * Disables recalculation and resize of the splitter contents while dragging the splitter bar.
			 * This means that the contents are resized only once after moving the splitter bar.
			 * @deprecated This method is declared as protected in order to assess the need for this feature. It is declared as deprecated because the API might change in case the need for this is high enough to make it part of the official Splitter interface
			 */
			disableLiveResize();
			/**
			 * Enables the resize handler for this control, this leads to an automatic resize of
			 * the contents whenever the control changes its size. The resize handler is enabled
			 * in every control instance by default.
			 * For performance reasons this behavior can be disabled by calling disableAutoResize()
			 * @param bTemporarily Only enables autoResize if it was previously disabled temporarily (used for live resize)(optional)
			 * @deprecated This method is declared as protected in order to assess the need for this feature. It is declared as deprecated because the API might change in case the need for this is high enough to make it part of the official Splitter interface
			 */
			enableAutoResize(bTemporarily?: boolean);
			/**
			 * Enables the resizing of the Splitter contents via keyboard. This makes the Splitter bars
			 * focussable elements.
			 */
			enableKeyboardSupport();
			/**
			 * Enables recalculation and resize of the splitter contents while dragging the splitter bar.
			 * This means that the contents are resized several times per second when moving the splitter bar.
			 * @deprecated This method is declared as protected in order to assess the need for this feature. It is declared as deprecated because the API might change in case the need for this is high enough to make it part of the official Splitter interface
			 */
			enableLiveResize();
			/**
			 * Creates a new subclass of class sap.ui.layout.Splitter with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Fires event <code>resize</code> to attached listeners.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>id</code> of type <code>string</code>The ID of the splitter control. The splitter control can also be accessed by calling getSource() on the event.</li>
			 * <li><code>oldSizes</code> of type <code>int[]</code>An array of values representing the old (pixel-)sizes of the splitter contents</li>
			 * <li><code>newSizes</code> of type <code>int[]</code>An array of values representing the new (pixel-)sizes of the splitter contents</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireResize(mArguments?: any): Splitter;
			/**
			 * Returns the current actual content sizes as pixel value - these values can change with every
			 * resize.
			 * @deprecated This method is declared as protected in order to assess the need for this feature. It is declared as deprecated because the API might change in case the need for this is high enough to make it part of the official Splitter interface
			 * @return Array of px values that correspond to the content area sizes
			 */
			getCalculatedSizes(): number[];
			/**
			 * Gets content of aggregation <code>contentAreas</code>.
			 * 
			 * The content areas to be split. The control will show n-1 splitter bars between n controls in this aggregation.
			 * @return 
			 */
			getContentAreas(): sap.ui.core.Control[];
			/**
			 * Gets current value of property <code>height</code>.
			 * 
			 * The height of the control
			 * 
			 * Default value is <code>100%</code>.
			 * @return Value of property <code>height</code>
			 */
			getHeight(): sap.ui.core.CSSSize;
			/**
			 * Gets current value of property <code>orientation</code>.
			 * 
			 * Whether to split the contents horizontally (default) or vertically.
			 * 
			 * Default value is <code>Horizontal</code>.
			 * @return Value of property <code>orientation</code>
			 */
			getOrientation(): sap.ui.core.Orientation;
			/**
			 * Gets current value of property <code>width</code>.
			 * 
			 * The width of the control
			 * 
			 * Default value is <code>100%</code>.
			 * @return Value of property <code>width</code>
			 */
			getWidth(): sap.ui.core.CSSSize;
			/**
			 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>contentAreas</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oContentArea The contentArea whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfContentArea(oContentArea: sap.ui.core.Control): number;
			/**
			 * Inserts a contentArea into the aggregation <code>contentAreas</code>.
			 * @param oContentArea the contentArea to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the contentArea should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the contentArea is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the contentArea is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertContentArea(oContentArea: sap.ui.core.Control, iIndex: number): Splitter;
			/**
			 * Removes all the controls from the aggregation <code>contentAreas</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllContentAreas(): sap.ui.core.Control[];
			/**
			 * Removes a contentArea from the aggregation <code>contentAreas</code>.
			 * @param vContentArea The contentArea to remove or its index or id
			 * @return The removed contentArea or <code>null</code>
			 */
			removeContentArea(vContentArea: number|string|sap.ui.core.Control): sap.ui.core.Control;
			/**
			 * Sets a new value for property <code>height</code>.
			 * 
			 * The height of the control
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>100%</code>.
			 * @param sHeight New value for property <code>height</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setHeight(sHeight: sap.ui.core.CSSSize): Splitter;
			/**
			 * Sets a new value for property <code>orientation</code>.
			 * 
			 * Whether to split the contents horizontally (default) or vertically.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>Horizontal</code>.
			 * @param sOrientation New value for property <code>orientation</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setOrientation(sOrientation: sap.ui.core.Orientation): Splitter;
			/**
			 * Sets a new value for property <code>width</code>.
			 * 
			 * The width of the control
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>100%</code>.
			 * @param sWidth New value for property <code>width</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setWidth(sWidth: sap.ui.core.CSSSize): Splitter;
			/**
			 * This method  triggers a resize on the Splitter - meaning it forces the Splitter to recalculate
			 * all sizes.
			 * This method should only be used in rare cases, for example when the CSS that defines the sizes
			 * of the splitter bars changes without triggering a rerendering of the splitter.
			 * @param forceDirectly Do not delay the resize, trigger it right now.(optional)
			 */
			triggerResize(forceDirectly?: boolean);
		}
	
		class SplitterLayoutData extends sap.ui.core.LayoutData {
			/**
			 * Constructor for a new SplitterLayoutData.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.layout.SplitterLayoutDataMetadata);
			/**
			 * Constructor for a new SplitterLayoutData.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.ui.layout.SplitterLayoutData with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.LayoutData.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets current value of property <code>minSize</code>.
			 * 
			 * Sets the minimum size of the splitter content in px.
			 * 
			 * Default value is <code>0</code>.
			 * @return Value of property <code>minSize</code>
			 */
			getMinSize(): number;
			/**
			 * Gets current value of property <code>resizable</code>.
			 * 
			 * Determines whether the control in the splitter can be resized or not.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>resizable</code>
			 */
			getResizable(): boolean;
			/**
			 * Gets current value of property <code>size</code>.
			 * 
			 * Sets the size of the splitter content.
			 * 
			 * Default value is <code>auto</code>.
			 * @return Value of property <code>size</code>
			 */
			getSize(): sap.ui.core.CSSSize;
			/**
			 * Sets a new value for property <code>minSize</code>.
			 * 
			 * Sets the minimum size of the splitter content in px.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>0</code>.
			 * @param iMinSize New value for property <code>minSize</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setMinSize(iMinSize: number): SplitterLayoutData;
			/**
			 * Sets a new value for property <code>resizable</code>.
			 * 
			 * Determines whether the control in the splitter can be resized or not.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bResizable New value for property <code>resizable</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setResizable(bResizable: boolean): SplitterLayoutData;
			/**
			 * Sets a new value for property <code>size</code>.
			 * 
			 * Sets the size of the splitter content.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>auto</code>.
			 * @param sSize New value for property <code>size</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSize(sSize: sap.ui.core.CSSSize): SplitterLayoutData;
		}
	
		class VerticalLayout extends sap.ui.core.Control {
			/**
			 * Constructor for a new VerticalLayout.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId Id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.layout.VerticalLayoutMetadata);
			/**
			 * Constructor for a new VerticalLayout.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId Id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some content to the aggregation <code>content</code>.
			 * @param oContent the content to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addContent(oContent: sap.ui.core.Control): VerticalLayout;
			/**
			 * Destroys all the content in the aggregation <code>content</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyContent(): VerticalLayout;
			/**
			 * Creates a new subclass of class sap.ui.layout.VerticalLayout with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * 
			 */
			getAccessibilityInfo();
			/**
			 * This function (if available on the concrete control) provides
			 * the current accessibility state of the control.
			 * 
			 * Applications must not call this hook method directly, it is called by the framework.
			 * 
			 * Subclasses of Control should implement this hook to provide any necessary accessibility information:
			 * 
			 * <pre>
			 * MyControl.prototype.getAccessibilityInfo = function() {
			 *    return {
			 *      role: "textbox",      // String which represents the WAI-ARIA role which is implemented by the control.
			 *      type: "date input",   // String which represents the control type (Must be a translated text). Might correlate with
			 *                            // the role.
			 *      description: "value", // String which describes the most relevant control state (e.g. the inputs value). Must be a
			 *                            // translated text.
			 *                            // Note: The type and the enabled/editable state must not be handled here.
			 *      focusable: true,      // Boolean which describes whether the control can get the focus.
			 *      enabled: true,        // Boolean which describes whether the control is enabled. If not relevant it must not be set or
			 *                            // <code>null</code> can be provided.
			 *      editable: true,       // Boolean which describes whether the control is editable. If not relevant it must not be set or
			 *                            // <code>null</code> can be provided.
			 *      children: []          // Array of accessibility info objects of children of the given control (e.g. when the control is a layout).
			 *                            // Note: Children should only be provided when it is helpful to understand the accessibility context
			 *                            //       (e.g. a form control must not provide details of its internals (fields, labels, ...) but a
			 *                            //       layout should).
			 *    };
			 * };
			 * </pre>
			 * 
			 * Note: The returned object provides the accessibility state of the control at the point in time when this function is called.
			 * @note Overload from base type sap.ui.core.Control
			 * @return Current accessibility state of the control.
			 */
			getAccessibilityInfo(): any;
			/**
			 * Gets content of aggregation <code>content</code>.
			 * 
			 * Content controls within the layout.
			 * @return 
			 */
			getContent(): sap.ui.core.Control[];
			/**
			 * Gets current value of property <code>enabled</code>.
			 * 
			 * If not enabled, all controls inside are not enabled automatically.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>enabled</code>
			 */
			getEnabled(): boolean;
			/**
			 * Gets current value of property <code>width</code>.
			 * 
			 * Width of the <code>VerticalLayout</code>. If no width is set, the width of the content is used.
			 * If the content of the layout has a larger width than the layout, it is cut off.
			 * There is no scrolling inside the layout.
			 * @return Value of property <code>width</code>
			 */
			getWidth(): sap.ui.core.CSSSize;
			/**
			 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oContent The content whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfContent(oContent: sap.ui.core.Control): number;
			/**
			 * Inserts a content into the aggregation <code>content</code>.
			 * @param oContent the content to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the content should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the content is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertContent(oContent: sap.ui.core.Control, iIndex: number): VerticalLayout;
			/**
			 * Removes all the controls from the aggregation <code>content</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllContent(): sap.ui.core.Control[];
			/**
			 * Removes a content from the aggregation <code>content</code>.
			 * @param vContent The content to remove or its index or id
			 * @return The removed content or <code>null</code>
			 */
			removeContent(vContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
			/**
			 * Sets a new value for property <code>enabled</code>.
			 * 
			 * If not enabled, all controls inside are not enabled automatically.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bEnabled New value for property <code>enabled</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setEnabled(bEnabled: boolean): VerticalLayout;
		}
	
		interface BlockLayoutMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * Determines the background used for the Layout
			 * @default Default
			 */
			background?: sap.ui.layout.BlockBackgroundType;
		}
	
		interface BlockLayoutCellMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * Defines the title of the cell
			 */
			title?: string;
			/**
			 * Defines the alignment of the cell title
			 * @default Begin
			 */
			titleAlignment?: sap.ui.core.HorizontalAlign;
			/**
			 * Defines the aria level of the title
			 * This information is e.g. used by assistive technologies like screenreaders to create a hierarchical site map for faster navigation.
			 * @default Auto
			 */
			titleLevel?: sap.ui.core.TitleLevel;
			/**
			 * Defines the width of the cell. Depending on the context of the cell - whether it's in scrollable,
			 * or non scrollable row, this property is interpreted in two different ways.
			 * If the cell is placed inside a scrollable row - this property defines the width of the cell in
			 * percentages. If no value is provided - the default is 40%.
			 * If the cell is placed inside a non scrollable row - this property defines the grow factor of the cell
			 * compared to the whole row.
			 * <b>For example:</b> If you have 2 cells, each with width of 1, this means that they should be of equal size,
			 * and they need to fill the whole row. This results in 50% width for each cell. If you have 2 cells,
			 * one with width of 1, the other with width of 3, this means that the whole row width is 4, so the first
			 * cell will have a width of 25%, the second - 75%.
			 * According to the visual guidelines, it is suggested that you only use 25%, 50%, 75% or 100% cells in
			 * you applications. For example, 12,5% width is not desirable (1 cell with width 1, and another with width 7)
			 * @default 0
			 */
			width?: number;
		}
	
		interface BlockLayoutRowMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * Sets the rendering mode of the BlockLayoutRow to scrollable. In scrollable mode, the cells get
			 * aligned side by side, with horizontal scroll bar for the row.
			 * @default false
			 */
			scrollable?: boolean;
		}
	
		interface DynamicSideContentMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * Determines whether the side content is visible or hidden.
			 * @default true
			 */
			showSideContent?: boolean;
			/**
			 * Determines whether the main content is visible or hidden.
			 * @default true
			 */
			showMainContent?: boolean;
			/**
			 * Determines on which breakpoints the side content is visible.
			 * @default ShowAboveS
			 */
			sideContentVisibility?: sap.ui.layout.SideContentVisibility;
			/**
			 * Determines on which breakpoints the side content falls down below the main content.
			 * @default OnMinimumWidth
			 */
			sideContentFallDown?: sap.ui.layout.SideContentFallDown;
			/**
			 * Defines whether the control is in equal split mode. In this mode, the side and the main content
			 * take 50:50 percent of the container on all screen sizes except for phone, where the main and
			 * side contents are switching visibility using the toggle method.
			 * @default false
			 */
			equalSplit?: boolean;
			/**
			 * If set to TRUE, then not the media Query (device screen size) but the size of the container, surrounding the control, defines the current range.
			 * @default false
			 */
			containerQuery?: boolean;
			/**
			 * Determines whether the side content is on the left or on the right side of the main content.
			 * @default End
			 */
			sideContentPosition?: sap.ui.layout.SideContentPosition;
		}
	
		interface FixFlexMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * Determines the direction of the layout of child elements. True for vertical and false for horizontal layout.
			 * @default true
			 */
			vertical?: boolean;
			/**
			 * Determines whether the fixed-size area should be on the beginning/top ( if the value is "true") or beginning/bottom ( if the value is "false").
			 * @default true
			 */
			fixFirst?: boolean;
			/**
			 * Determines the height (if the vertical property is "true") or the width (if the vertical property is "false") of the fixed area. If left at the default value "auto", the fixed-size area will be as large as its content. In this case the content cannot use percentage sizes.
			 * @default auto
			 */
			fixContentSize?: sap.ui.core.CSSSize;
			/**
			 * Enables scrolling inside the flexible part. The given size is calculated in "px". If the child control in the flexible part is larger then the available flexible size on the screen and if the available size for the flexible part is smaller or equal to the minFlexSize value, the scroll will be for the entire FixFlex control.
			 * @default 0
			 */
			minFlexSize?: number;
		}
	
		interface GridMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * Optional. Width of the Grid. If not specified, then 100%.
			 * @default 100%
			 */
			width?: sap.ui.core.CSSSize;
			/**
			 * Optional. Vertical spacing between the rows in the Grid. In rem, allowed values are 0, 0.5, 1 and 2.
			 * @default 1
			 */
			vSpacing?: number;
			/**
			 * Optional. Horizontal spacing between the content in the Grid. In rem, allowed values are 0, 0.5 , 1 or 2.
			 * @default 1
			 */
			hSpacing?: number;
			/**
			 * Optional. Position of the Grid in the window or surrounding container. Possible values are "Center", "Left" and "Right".
			 * @default Left
			 */
			position?: sap.ui.layout.GridPosition;
			/**
			 * Optional. A string type that represents Grid's default span values for large, medium and small screens for the whole Grid. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: "L2 M4 S6", "M12", "s10" or "l4 m4". Note that the parameters has to be provided in the order large medium small.
			 * @default XL3 L3 M6 S12
			 */
			defaultSpan?: sap.ui.layout.GridSpan;
			/**
			 * Optional. Defines default for the whole Grid numbers of empty columns before the current span begins. It can be defined for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 0 to 11 that the container has to take, for example: "L2 M4 S6", "M11", "s10" or "l4 m4". Note that the parameters has to be provided in the order large medium small.
			 * @default XL0 L0 M0 S0
			 */
			defaultIndent?: sap.ui.layout.GridIndent;
			/**
			 * If true then not the media Query ( device screen size), but the size of the container surrounding the grid defines the current range (large, medium or small).
			 * @default false
			 */
			containerQuery?: boolean;
		}
	
		interface GridDataMetadata {
			/**
			 * A string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: "L2 M4 S6", "M12", "s10" or "l4 m4". Note that the parameters has to be provided in the order large medium small.
			 */
			span?: sap.ui.layout.GridSpan;
			/**
			 * Optional. Defines a span value for extra large screens. This value overwrites the value for extra large screens defined in the parameter "span".
			 */
			spanXL?: number;
			/**
			 * Optional. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter "span".
			 */
			spanL?: number;
			/**
			 * Optional. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter "span".
			 */
			spanM?: number;
			/**
			 * Optional. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter "span".
			 */
			spanS?: number;
			/**
			 * A string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: "L2 M4 S6", "M12", "s10" or "l4 m4". Note that the parameters has to be provided in the order large medium small.
			 */
			indent?: sap.ui.layout.GridIndent;
			/**
			 * Optional. Defines a span value for extra large screens. This value overwrites the value for extra large screens defined in the parameter "indent".
			 */
			indentXL?: number;
			/**
			 * Optional. Defines a span value for large screens. This value overwrites the value for large screens defined in the parameter "indent".
			 */
			indentL?: number;
			/**
			 * Optional. Defines a span value for medium size screens. This value overwrites the value for medium screens defined in the parameter "indent".
			 */
			indentM?: number;
			/**
			 * Optional. Defines a span value for small screens. This value overwrites the value for small screens defined in the parameter "indent".
			 */
			indentS?: number;
			/**
			 * Defines if this Control is visible on XL - extra Large screens.
			 * @default true
			 */
			visibleXL?: boolean;
			/**
			 * Defines if this Control is visible on Large screens.
			 * @default true
			 */
			visibleL?: boolean;
			/**
			 * Defines if this Control is visible on Medium size screens.
			 * @default true
			 */
			visibleM?: boolean;
			/**
			 * Defines if this Control is visible on small screens.
			 * @default true
			 */
			visibleS?: boolean;
			/**
			 * Optional. Moves a cell backwards so many columns as specified.
			 */
			moveBackwards?: sap.ui.layout.GridIndent;
			/**
			 * Optional. Moves a cell forwards so many columns as specified.
			 */
			moveForward?: sap.ui.layout.GridIndent;
			/**
			 * Optional. If this property is set to true, the control on all-size screens causes a line break within the Grid and becomes the first within the next line.
			 * @default false
			 */
			linebreak?: boolean;
			/**
			 * Optional. If this property is set to true, the control on extra large screens causes a line break within the Grid and becomes the first within the next line.
			 * @default false
			 */
			linebreakXL?: boolean;
			/**
			 * Optional. If this property is set to true, the control on large screens causes a line break within the Grid and becomes the first within the next line.
			 * @default false
			 */
			linebreakL?: boolean;
			/**
			 * Optional. If this property is set to true, the control on medium sized screens causes a line break within the Grid and becomes the first within the next line.
			 * @default false
			 */
			linebreakM?: boolean;
			/**
			 * Optional. If this property is set to true, the control on small screens causes a line break within the Grid and becomes the first within the next line.
			 * @default false
			 */
			linebreakS?: boolean;
		}
	
		interface HorizontalLayoutMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * Specifies whether the content inside the Layout shall be line-wrapped in the case that there is less horizontal space available than required.
			 * @default false
			 */
			allowWrapping?: boolean;
		}
	
		interface PaneContainerMetadata {
			/**
			 * The orientation of the Splitter
			 * @default Horizontal
			 */
			orientation?: sap.ui.core.Orientation;
		}
	
		interface ResponsiveFlowLayoutMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * If set to false, all added controls will keep their width, or otherwise, the controls will be stretched to the possible width of a row.
			 * @default true
			 */
			responsive?: boolean;
		}
	
		interface ResponsiveFlowLayoutDataMetadata {
			/**
			 * Defines the minimal size in px of an ResponsiveFlowLayout element. The element will be shrunk down to this value.
			 * @default 100
			 */
			minWidth?: number;
			/**
			 * Defines the weight of the element, that influences the resulting width. If there are several elements within a row of the ResponsiveFlowLayout, each element could have another weight. The bigger the weight of a single element, the wider it will be stretched, i.e. a bigger weight results in a larger width.
			 * @default 1
			 */
			weight?: number;
			/**
			 * If this property is set, the control in which the LayoutData is added, will always cause a line break within the ResponsiveFlowLayout.
			 * @default false
			 */
			linebreak?: boolean;
			/**
			 * Prevents any margin of the element if set to false.
			 * @default true
			 */
			margin?: boolean;
			/**
			 * Shows if an element can be wrapped into a new row. If this value is set to false, the min-width will be set to 0 and the wrapping is up to the previous element.
			 * @default true
			 */
			linebreakable?: boolean;
		}
	
		interface ResponsiveSplitterMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * The width of the control
			 * @default 100%
			 */
			width?: sap.ui.core.CSSSize;
			/**
			 * The height of the control
			 * @default 100%
			 */
			height?: sap.ui.core.CSSSize;
		}
	
		interface SplitPaneMetadata {
			/**
			 * Determines whether the pane will be moved to the pagination
			 * @default true
			 */
			demandPane?: boolean;
			/**
			 * Determines the minimum width of the ResponsiveSplitter(in pixels). When it is reached the pane will be hidden from the screen.
			 * @default 800
			 */
			requiredParentWidth?: number;
		}
	
		interface SplitterMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * Whether to split the contents horizontally (default) or vertically.
			 * @default Horizontal
			 */
			orientation?: sap.ui.core.Orientation;
			/**
			 * The width of the control
			 * @default 100%
			 */
			width?: sap.ui.core.CSSSize;
			/**
			 * The height of the control
			 * @default 100%
			 */
			height?: sap.ui.core.CSSSize;
		}
	
		interface SplitterLayoutDataMetadata {
			/**
			 * Determines whether the control in the splitter can be resized or not.
			 * @default true
			 */
			resizable?: boolean;
			/**
			 * Sets the size of the splitter content.
			 * @default auto
			 */
			size?: sap.ui.core.CSSSize;
			/**
			 * Sets the minimum size of the splitter content in px.
			 * @default 0
			 */
			minSize?: number;
		}
	
		interface VerticalLayoutMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * Width of the <code>VerticalLayout</code>. If no width is set, the width of the content is used.
			 * If the content of the layout has a larger width than the layout, it is cut off.
			 * There is no scrolling inside the layout.
			 */
			width?: sap.ui.core.CSSSize;
			/**
			 * If not enabled, all controls inside are not enabled automatically.
			 * @default true
			 */
			enabled?: boolean;
		}
		/**
		 * A string type that represents Grid's indent values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 11 that the container has to take, for example: "L2 M4 S6", "M11", "s10" or "l4 m4". Note that the parameters have to be provided in the order large  medium  small.
		 */
		type GridIndent = string;
		/**
		 * A string type that represents Grid's span values for large, medium and small screens. Allowed values are separated by space Letters L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: "L2 M4 S6", "M12", "s10" or "l4 m4". Note that the parameters have to be provided in the order large  medium  small.
		 */
		type GridSpan = string;
	}

	/**
	 * Suite controls library.
	 */
	namespace suite {
	
		class TaskCircle extends sap.ui.core.Control {
			/**
			 * Constructor for a new TaskCircle.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.suite.TaskCircleMetadata);
			/**
			 * Constructor for a new TaskCircle.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
			 * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID|sap.ui.core.Control): TaskCircle;
			/**
			 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
			 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): TaskCircle;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this <code>sap.ui.suite.TaskCircle</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.suite.TaskCircle</code> itself.
			 * 
			 * Event is fired when the user clicks the control.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.suite.TaskCircle</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachPress(oData: any, fnFunction: any, oListener?: any): TaskCircle;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this <code>sap.ui.suite.TaskCircle</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachPress(fnFunction: any, oListener: any): TaskCircle;
			/**
			 * Creates a new subclass of class sap.ui.suite.TaskCircle with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Fires event <code>press</code> to attached listeners.
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			firePress(mArguments?: any): TaskCircle;
			/**
			 * Puts the focus to the control.
			 */
			focus();
			/**
			 * Returns array of IDs of the elements which are the current targets of the association <code>ariaDescribedBy</code>.
			 * @return 
			 */
			getAriaDescribedBy(): sap.ui.core.ID[];
			/**
			 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
			 * @return 
			 */
			getAriaLabelledBy(): sap.ui.core.ID[];
			/**
			 * Gets current value of property <code>color</code>.
			 * 
			 * Color of the circle. The default color is red.
			 * 
			 * Default value is <code>Gray</code>.
			 * @return Value of property <code>color</code>
			 */
			getColor(): any;
			/**
			 * Gets current value of property <code>maxValue</code>.
			 * 
			 * Upper limit of the displayed values. Default is 100.
			 * 
			 * Default value is <code>100</code>.
			 * @return Value of property <code>maxValue</code>
			 */
			getMaxValue(): number;
			/**
			 * Gets current value of property <code>minValue</code>.
			 * 
			 * Lower limit of the displayed values. Default is 0.
			 * 
			 * Default value is <code>0</code>.
			 * @return Value of property <code>minValue</code>
			 */
			getMinValue(): number;
			/**
			 * Gets current value of property <code>value</code>.
			 * 
			 * Current value of the task circle to be displayed. In dependency of the parameters maxValue and minValue it controls the size of the circle.
			 * 
			 * Default value is <code>0</code>.
			 * @return Value of property <code>value</code>
			 */
			getValue(): number;
			/**
			 * Removes all the controls in the association named <code>ariaDescribedBy</code>.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllAriaDescribedBy(): sap.ui.core.ID[];
			/**
			 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllAriaLabelledBy(): sap.ui.core.ID[];
			/**
			 * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
			 * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
			 * @return The removed ariaDescribedBy or <code>null</code>
			 */
			removeAriaDescribedBy(vAriaDescribedBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
			/**
			 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
			 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
			 * @return The removed ariaLabelledBy or <code>null</code>
			 */
			removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
			/**
			 * Sets a new value for property <code>color</code>.
			 * 
			 * Color of the circle. The default color is red.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>Gray</code>.
			 * @param sColor New value for property <code>color</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setColor(sColor: any): TaskCircle;
			/**
			 * Sets a new value for property <code>maxValue</code>.
			 * 
			 * Upper limit of the displayed values. Default is 100.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>100</code>.
			 * @param iMaxValue New value for property <code>maxValue</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setMaxValue(iMaxValue: number): TaskCircle;
			/**
			 * Sets a new value for property <code>minValue</code>.
			 * 
			 * Lower limit of the displayed values. Default is 0.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>0</code>.
			 * @param iMinValue New value for property <code>minValue</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setMinValue(iMinValue: number): TaskCircle;
			/**
			 * Sets a new value for property <code>value</code>.
			 * 
			 * Current value of the task circle to be displayed. In dependency of the parameters maxValue and minValue it controls the size of the circle.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>0</code>.
			 * @param iValue New value for property <code>value</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setValue(iValue: number): TaskCircle;
		}
	
		class VerticalProgressIndicator extends sap.ui.core.Control {
			/**
			 * Constructor for a new VerticalProgressIndicator.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.suite.VerticalProgressIndicatorMetadata);
			/**
			 * Constructor for a new VerticalProgressIndicator.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some ariaDescribedBy into the association <code>ariaDescribedBy</code>.
			 * @param vAriaDescribedBy the ariaDescribedBy to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addAriaDescribedBy(vAriaDescribedBy: sap.ui.core.ID|sap.ui.core.Control): VerticalProgressIndicator;
			/**
			 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
			 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): VerticalProgressIndicator;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this <code>sap.ui.suite.VerticalProgressIndicator</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.suite.VerticalProgressIndicator</code> itself.
			 * 
			 * Event is fired when the user clicks the control.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.suite.VerticalProgressIndicator</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachPress(oData: any, fnFunction: any, oListener?: any): VerticalProgressIndicator;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this <code>sap.ui.suite.VerticalProgressIndicator</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachPress(fnFunction: any, oListener: any): VerticalProgressIndicator;
			/**
			 * Creates a new subclass of class sap.ui.suite.VerticalProgressIndicator with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Fires event <code>press</code> to attached listeners.
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			firePress(mArguments?: any): VerticalProgressIndicator;
			/**
			 * Puts the focus to the control.
			 */
			focus();
			/**
			 * Returns array of IDs of the elements which are the current targets of the association <code>ariaDescribedBy</code>.
			 * @return 
			 */
			getAriaDescribedBy(): sap.ui.core.ID[];
			/**
			 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
			 * @return 
			 */
			getAriaLabelledBy(): sap.ui.core.ID[];
			/**
			 * Gets current value of property <code>percentage</code>.
			 * 
			 * The numerical value between 0 and 100 which determines the height of the vertical bar. Values higher than 100 will be displayed as 100%, values lower than zero will be displayed as 0%.
			 * @return Value of property <code>percentage</code>
			 */
			getPercentage(): number;
			/**
			 * Removes all the controls in the association named <code>ariaDescribedBy</code>.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllAriaDescribedBy(): sap.ui.core.ID[];
			/**
			 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllAriaLabelledBy(): sap.ui.core.ID[];
			/**
			 * Removes an ariaDescribedBy from the association named <code>ariaDescribedBy</code>.
			 * @param vAriaDescribedBy The ariaDescribedBy to be removed or its index or ID
			 * @return The removed ariaDescribedBy or <code>null</code>
			 */
			removeAriaDescribedBy(vAriaDescribedBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
			/**
			 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
			 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
			 * @return The removed ariaLabelledBy or <code>null</code>
			 */
			removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
			/**
			 * Property setter for the Percentage, which determines the height of the vertical bar.
			 * Values higher than 100 will be displayed as 100%, values lower than zero will be displayed as 0%.
			 * A new rendering is not necessary, only the bar will be moved
			 * @param iPercentage 
			 * @return <code>this</code> to allow method chaining
			 */
			setPercentage(iPercentage: number): VerticalProgressIndicator;
		}
	
		interface TaskCircleMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * Current value of the task circle to be displayed. In dependency of the parameters maxValue and minValue it controls the size of the circle.
			 * @default 0
			 */
			value?: number;
			/**
			 * Upper limit of the displayed values. Default is 100.
			 * @default 100
			 */
			maxValue?: number;
			/**
			 * Lower limit of the displayed values. Default is 0.
			 * @default 0
			 */
			minValue?: number;
			/**
			 * Color of the circle. The default color is red.
			 * @default Gray
			 */
			color?: any;
		}
	
		interface VerticalProgressIndicatorMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * The numerical value between 0 and 100 which determines the height of the vertical bar. Values higher than 100 will be displayed as 100%, values lower than zero will be displayed as 0%.
			 */
			percentage?: number;
		}
	}

	/**
	 * Table-like controls, mainly for desktop scenarios.
	 */
	namespace table {
	
		/**
		 * Different modes for setting the auto expand mode on different tables (Analytical-, TreeTable, ...)
		 */
		namespace TreeAutoExpandMode {
			/**
			 * If supported by a backend provider with analytical capabilities, the requests needed for an automatic node expansion are bundled.
			 */
			var Bundled: any;
			/**
			 * Tree nodes will be expanded in sequence, level by level (Single requests are sent)
			 */
			var Sequential: any;
		}
	
		class AnalyticalColumn extends Column {
			/**
			 * Constructor for a new AnalyticalColumn.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.table.AnalyticalColumnMetadata);
			/**
			 * Constructor for a new AnalyticalColumn.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.ui.table.AnalyticalColumn with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.table.Column.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets current value of property <code>groupHeaderFormatter</code>.
			 * 
			 * If the column is grouped, this formatter is used to format the value in the group header
			 * @return Value of property <code>groupHeaderFormatter</code>
			 */
			getGroupHeaderFormatter(): any;
			/**
			 * Gets current value of property <code>inResult</code>.
			 * 
			 * Specifies that the dimension referred to by the column shall be included in the granularity of the data result. It allows a finer distinction between a visible/grouped/(included)inResult column.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>inResult</code>
			 */
			getInResult(): boolean;
			/**
			 * Gets current value of property <code>leadingProperty</code>.
			 * 
			 * Defines the primary model property which is used inside the Column. In case of the analytical extension this means the property which is grouped by for dimensions or the property which is summed for measures.
			 * @return Value of property <code>leadingProperty</code>
			 */
			getLeadingProperty(): string;
			/**
			 * Gets current value of property <code>showIfGrouped</code>.
			 * 
			 * Specifies whether the column is displayed within the table even if it is grouped or not. A grouped column has the same value for every rows within the group.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>showIfGrouped</code>
			 */
			getShowIfGrouped(): boolean;
			/**
			 * Gets current value of property <code>summed</code>.
			 * 
			 * If defined a sum for this column is calculated
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>summed</code>
			 */
			getSummed(): boolean;
			/**
			 * Sets a new value for property <code>groupHeaderFormatter</code>.
			 * 
			 * If the column is grouped, this formatter is used to format the value in the group header
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param oGroupHeaderFormatter New value for property <code>groupHeaderFormatter</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setGroupHeaderFormatter(oGroupHeaderFormatter: any): AnalyticalColumn;
			/**
			 * Sets a new value for property <code>inResult</code>.
			 * 
			 * Specifies that the dimension referred to by the column shall be included in the granularity of the data result. It allows a finer distinction between a visible/grouped/(included)inResult column.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bInResult New value for property <code>inResult</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setInResult(bInResult: boolean): AnalyticalColumn;
			/**
			 * Sets a new value for property <code>leadingProperty</code>.
			 * 
			 * Defines the primary model property which is used inside the Column. In case of the analytical extension this means the property which is grouped by for dimensions or the property which is summed for measures.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sLeadingProperty New value for property <code>leadingProperty</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setLeadingProperty(sLeadingProperty: string): AnalyticalColumn;
			/**
			 * Sets a new value for property <code>showIfGrouped</code>.
			 * 
			 * Specifies whether the column is displayed within the table even if it is grouped or not. A grouped column has the same value for every rows within the group.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bShowIfGrouped New value for property <code>showIfGrouped</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setShowIfGrouped(bShowIfGrouped: boolean): AnalyticalColumn;
			/**
			 * Sets a new value for property <code>summed</code>.
			 * 
			 * If defined a sum for this column is calculated
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bSummed New value for property <code>summed</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSummed(bSummed: boolean): AnalyticalColumn;
		}
	
		class AnalyticalColumnMenu extends ColumnMenu {
			/**
			 * Constructor for a new AnalyticalColumnMenu.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.ui.table.AnalyticalColumnMenu with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.table.ColumnMenu.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		}
	
		class AnalyticalTable extends Table {
			/**
			 * Constructor for a new AnalyticalTable.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.table.AnalyticalTableMetadata);
			/**
			 * Constructor for a new AnalyticalTable.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Marks a range of tree nodes as selected, starting with iFromIndex going to iToIndex.
			 * The TreeNodes are referenced via their absolute row index.
			 * Please be aware, that the absolute row index only applies to the the tree which is visualized by the TreeTable.
			 * Invisible nodes (collapsed child nodes) will not be regarded.
			 * 
			 * Please also take notice of the fact, that "addSelectionInterval" does not change any other selection.
			 * To override the current selection, please use "setSelctionInterval" or for a single entry use "setSelectedIndex".
			 * @param iFromIndex The starting index of the range which will be selected.
			 * @param iToIndex The starting index of the range which will be selected.
			 * @return a reference on the TreeTable control, can be used for chaining
			 */
			addSelectionInterval(iFromIndex: number, iToIndex: number): TreeTable;
			/**
			 * Adds the given selection interval to the selection. In case of single selection the "indexTo" value will be used for as selected index.
			 * @note Overload from base type sap.ui.table.Table
			 * @param iIndexFrom Index from which .
			 * @param iIndexTo Indices of the items that shall additionally be selected.
			 * @return 
			 */
			addSelectionInterval(iIndexFrom: number, iIndexTo: number): Table;
			/**
			 * Clears the complete selection (all tree table rows/nodes will lose their selection)
			 * @return a reference on the TreeTable control, can be used for chaining
			 */
			clearSelection(): TreeTable;
			/**
			 * Removes complete selection.
			 * @note Overload from base type sap.ui.table.Table
			 * @return 
			 */
			clearSelection(): Table;
			/**
			 * Collapses all nodes (and lower if collapseRecursive is activated)
			 * @return a reference on the TreeTable control, can be used for chaining
			 */
			collapseAll(): TreeTable;
			/**
			 * Creates a new subclass of class sap.ui.table.AnalyticalTable with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.table.Table.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets current value of property <code>autoExpandMode</code>.
			 * 
			 * The kind of auto expansion algorithm, e.g. optimised filter conditions, per level requests, ...
			 * sap.ui.table.TreeAutoExpandMode
			 * 
			 * Default value is <code>Bundled</code>.
			 * @return Value of property <code>autoExpandMode</code>
			 */
			getAutoExpandMode(): string;
			/**
			 * Gets current value of property <code>collapseRecursive</code>.
			 * 
			 * Setting collapseRecursive to true means, that when collapsing a node all subsequent child nodes will also be collapsed.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>collapseRecursive</code>
			 */
			getCollapseRecursive(): boolean;
			/**
			 * Gets current value of property <code>columnVisibilityMenuSorter</code>.
			 * 
			 * Functions which is used to sort the column visibility menu entries e.g.: function(ColumnA, ColumnB) { return 0 = equals, <0 lower, >0 greater }; Other values than functions will be ignored.
			 * @return Value of property <code>columnVisibilityMenuSorter</code>
			 */
			getColumnVisibilityMenuSorter(): any;
			/**
			 * Returns the context of a row by its index.
			 * @param iIndex Index of the row to return the context from.
			 * @return 
			 */
			getContextByIndex(iIndex: number): any;
			/**
			 * Gets current value of property <code>numberOfExpandedLevels</code>.
			 * 
			 * Number of levels, which should be opened initially (on first load of data).
			 * 
			 * Default value is <code>0</code>.
			 * @return Value of property <code>numberOfExpandedLevels</code>
			 */
			getNumberOfExpandedLevels(): number;
			/**
			 * Retrieves the lead selection index. The lead selection index is, among other things, used to determine the
			 * start/end of a selection range, when using Shift-Click to select multiple entries at once.
			 * @return an array containing all selected indices (ascending ordered integers)
			 */
			getSelectedIndex(): number[];
			/**
			 * Gets current value of property <code>selectedIndex</code>.
			 * 
			 * Zero-based index of selected item. Index value for no selection is -1.
			 * When multi-selection is enabled and multiple items are selected, the method returns
			 * the lead selected item. Sets the zero-based index of the currently selected item. This method
			 * removes any previous selections. When the given index is invalid, the call is ignored.
			 * 
			 * Default value is <code>-1</code>.
			 * @note Overload from base type sap.ui.table.Table
			 * @return Value of property <code>selectedIndex</code>
			 */
			getSelectedIndex(): number;
			/**
			 * Returns an array containing the row indices of all selected tree nodes (ordered ascending).
			 * 
			 * Please be aware of the following:
			 * Due to performance/network traffic reasons, the getSelectedIndices function returns only all indices
			 * of actually selected rows/tree nodes. Unknown rows/nodes (as in "not yet loaded" to the client), will not be
			 * returned.
			 * @return an array containing all selected indices
			 */
			getSelectedIndices(): number[];
			/**
			 * Zero-based indices of selected items, wrapped in an array. An empty array means "no selection".
			 * @note Overload from base type sap.ui.table.Table
			 * @return int[]
			 */
			getSelectedIndices();
			/**
			 * Gets current value of property <code>sumOnTop</code>.
			 * 
			 * Specifies if the total values should be displayed in the group headers or on bottom of the row. Does not affact the total sum.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>sumOnTop</code>
			 */
			getSumOnTop(): boolean;
			/**
			 * Returns the total size of the data entries.
			 * @return 
			 */
			getTotalSize(): number;
			/**
			 * Checks if the row at the given index is selected.
			 * @param iRowIndex The row index for which the selection state should be retrieved
			 * @return true if the index is selected, false otherwise
			 */
			isIndexSelected(iRowIndex: number): boolean;
			/**
			 * Returns whether the given index is selected.
			 * @note Overload from base type sap.ui.table.Table
			 * @param iIndex Index which is checked for selection state.
			 * @return 
			 */
			isIndexSelected(iIndex: number): boolean;
			/**
			 * All rows/tree nodes inside the range (including boundaries) will be deselected.
			 * Tree nodes are referenced with theit absolute row index inside the tree-
			 * Please be aware, that the absolute row index only applies to the the tree which is visualized by the TreeTable.
			 * Invisible nodes (collapsed child nodes) will not be regarded.
			 * @param iFromIndex The starting index of the range which will be deselected.
			 * @param iToIndex The starting index of the range which will be deselected.
			 * @return a reference on the TreeTable control, can be used for chaining
			 */
			removeSelectionInterval(iFromIndex: number, iToIndex: number): TreeTable;
			/**
			 * Removes the given selection interval from the selection. In case of single selection this call removeSelectedIndex with the "indexTo" value.
			 * @note Overload from base type sap.ui.table.Table
			 * @param iIndexFrom Index from which .
			 * @param iIndexTo Indices of the items that shall additionally be selected.
			 * @return 
			 */
			removeSelectionInterval(iIndexFrom: number, iIndexTo: number): Table;
			/**
			 * This function is used by some composite controls to force updating the AnalyticalInfo
			 * @param bSuppressRefresh binding shall not refresh data
			 * @param bForceChange forces the binding to fire a change event
			 */
			resumeUpdateAnalyticalInfo(bSuppressRefresh: boolean, bForceChange: boolean);
			/**
			 * Selects all available nodes/rows.
			 * 
			 * Explanation of the SelectAll function and what to expect from its behavior:
			 * All rows/tree nodes locally stored on the client are selected.
			 * In addition all subsequent rows/tree nodes, which will be paged into view are also immediatly selected.
			 * However, due to obvious performance/network traffic reasons, the SelectAll function will NOT retrieve any data from the backend.
			 * @return a reference on the TreeTable control, can be used for chaining
			 */
			selectAll(): TreeTable;
			/**
			 * Add all rows to the selection.
			 * Please note that for server based models like OData the indices which are considered to be selected might not
			 * be available at the client yet. Calling getContextByIndex might not return a result but trigger a roundtrip
			 * to request this single entity.
			 * @note Overload from base type sap.ui.table.Table
			 * @return sap.ui.table.Table
			 */
			selectAll();
			/**
			 * Sets a new value for property <code>autoExpandMode</code>.
			 * 
			 * The kind of auto expansion algorithm, e.g. optimised filter conditions, per level requests, ...
			 * sap.ui.table.TreeAutoExpandMode
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>Bundled</code>.
			 * @param sAutoExpandMode New value for property <code>autoExpandMode</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setAutoExpandMode(sAutoExpandMode: string): AnalyticalTable;
			/**
			 * Sets a new value for property <code>columnVisibilityMenuSorter</code>.
			 * 
			 * Functions which is used to sort the column visibility menu entries e.g.: function(ColumnA, ColumnB) { return 0 = equals, <0 lower, >0 greater }; Other values than functions will be ignored.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param oColumnVisibilityMenuSorter New value for property <code>columnVisibilityMenuSorter</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setColumnVisibilityMenuSorter(oColumnVisibilityMenuSorter: any): AnalyticalTable;
			/**
			 * Sets a new value for property <code>numberOfExpandedLevels</code>.
			 * 
			 * Number of levels, which should be opened initially (on first load of data).
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>0</code>.
			 * @param iNumberOfExpandedLevels New value for property <code>numberOfExpandedLevels</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setNumberOfExpandedLevels(iNumberOfExpandedLevels: number): AnalyticalTable;
			/**
			 * Overriden from Table.js base class.
			 * In a TreeTable you can only select indices, which correspond to the currently visualized tree.
			 * Invisible tree nodes (e.g. collapsed child nodes) can not be selected via Index, because they do not
			 * correspond to a TreeTable row.
			 * @param iRowIndex The row index which will be selected (if existing)
			 * @return a reference on the TreeTable control, can be used for chaining
			 */
			setSelectedIndex(iRowIndex: number): TreeTable;
			/**
			 * Sets a new value for property <code>selectedIndex</code>.
			 * 
			 * Zero-based index of selected item. Index value for no selection is -1.
			 * When multi-selection is enabled and multiple items are selected, the method returns
			 * the lead selected item. Sets the zero-based index of the currently selected item. This method
			 * removes any previous selections. When the given index is invalid, the call is ignored.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>-1</code>.
			 * @note Overload from base type sap.ui.table.Table
			 * @param iSelectedIndex New value for property <code>selectedIndex</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSelectedIndex(iSelectedIndex: number): Table;
			/**
			 * Sets the selection behavior.
			 * Since the AnalyticalTable relies on the RowSelector for rendering the group headers the SelectionBehavior "RowOnly" is
			 * not supported and must not be used.
			 * @param sBehavior the selection behavior, see sap.ui.table.SelectionBehavior
			 * @return this for chaining
			 */
			setSelectionBehavior(sBehavior: string): Table;
			/**
			 * Sets a new value for property <code>selectionBehavior</code>.
			 * 
			 * Selection behavior of the Table. This property defines whether the row selector is displayed and whether the row, the row selector or both
			 * can be clicked to select a row.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>RowSelector</code>.
			 * @note Overload from base type sap.ui.table.Table
			 * @param sSelectionBehavior New value for property <code>selectionBehavior</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSelectionBehavior(sSelectionBehavior: SelectionBehavior): Table;
			/**
			 * Sets the selection of the TreeTable to the given range (including boundaries).
			 * Beware: The previous selection will be lost/overriden. If this is not wanted, please use "addSelectionInterval" and
			 * "removeSelectionIntervall".
			 * @param iFromIndex the start index of the selection range
			 * @param iToIndex the end index of the selection range
			 * @return a reference on the TreeTable control, can be used for chaining
			 */
			setSelectionInterval(iFromIndex: number, iToIndex: number): TreeTable;
			/**
			 * Sets the given selection interval as selection. In case of single selection the "indexTo" value will be used for as selected index.
			 * @note Overload from base type sap.ui.table.Table
			 * @param iIndexFrom Index from which .
			 * @param iIndexTo Indices of the items that shall additionally be selected.
			 * @return 
			 */
			setSelectionInterval(iIndexFrom: number, iIndexTo: number): Table;
			/**
			 * Sets the selection mode, the current selection is lost.
			 * Since the AnalyticalTable relies on the RowSelector for rendering the group headers the SelectionMode "None" is
			 * not supported and must not be used.
			 * @param sSelectionMode the selection mode, see sap.ui.table.SelectionMode
			 * @return a reference on the table for chaining
			 */
			setSelectionMode(sSelectionMode: string): Table;
			/**
			 * Sets the selection mode. The current selection is lost.
			 * @note Overload from base type sap.ui.table.Table
			 * @param sSelectionMode the selection mode, see sap.ui.table.SelectionMode
			 * @return a reference on the table for chaining
			 */
			setSelectionMode(sSelectionMode: string);
			/**
			 * Sets a new value for property <code>sumOnTop</code>.
			 * 
			 * Specifies if the total values should be displayed in the group headers or on bottom of the row. Does not affact the total sum.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bSumOnTop New value for property <code>sumOnTop</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSumOnTop(bSumOnTop: boolean): AnalyticalTable;
			/**
			 * This function is used by some composite controls to avoid updating the AnalyticalInfo when several column are added to the table.
			 * In order to finally update the AnalyticalInfo and request data, resumeUpdateAnalyticalInfo must be called.
			 */
			suspendUpdateAnalyticalInfo();
		}
	
		class Column extends sap.ui.core.Element {
			/**
			 * Constructor for a new Column.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.table.ColumnMetadata);
			/**
			 * Constructor for a new Column.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some multiLabel to the aggregation <code>multiLabels</code>.
			 * @param oMultiLabel the multiLabel to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addMultiLabel(oMultiLabel: sap.ui.core.Control): Column;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>columnMenuOpen</code> event of this <code>sap.ui.table.Column</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.table.Column</code> itself.
			 * 
			 * Fires before the column menu is opened.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.table.Column</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachColumnMenuOpen(oData: any, fnFunction: any, oListener?: any): Column;
			/**
			 * Destroys the label in the aggregation <code>label</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyLabel(): Column;
			/**
			 * Destroys the menu in the aggregation <code>menu</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyMenu(): Column;
			/**
			 * Destroys all the multiLabels in the aggregation <code>multiLabels</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyMultiLabels(): Column;
			/**
			 * Destroys the template in the aggregation <code>template</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyTemplate(): Column;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>columnMenuOpen</code> event of this <code>sap.ui.table.Column</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachColumnMenuOpen(fnFunction: any, oListener: any): Column;
			/**
			 * Creates a new subclass of class sap.ui.table.Column with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Fires event <code>columnMenuOpen</code> to attached listeners.
			 * 
			 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>menu</code> of type <code>sap.ui.unified.Menu</code>Refence to the selected <code>menu</code> instance to be opened.</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Whether or not to prevent the default action
			 */
			fireColumnMenuOpen(mArguments?: any): boolean;
			/**
			 * Gets current value of property <code>autoResizable</code>.
			 * 
			 * Enables auto-resizing of the column on double-clicking the resizer. The width is determined on the widest
			 * currently displayed content. It does not consider rows which are currently not scrolled into view.
			 * Currently only implemented to work with the following controls:
			 * <code>sap.m.Text, sap.m.Label, sap.m.Link, sap.m.Input,
			 * sap.ui.commons.TextView, sap.ui.commons.Label, sap.ui.commons.Link and sap.ui.commons.TextField,
			 * sap.ui.commons.Checkbox, sap.m.Checkbox</code>
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>autoResizable</code>
			 */
			getAutoResizable(): boolean;
			/**
			 * Gets current value of property <code>defaultFilterOperator</code>.
			 * 
			 * If this property is set, the default filter operator of the column is overridden.
			 * By default <code>Contains</code> is used for string and <code>EQ</code> for other types. A valid <code>sap.ui.model.FilterOperator</code> needs to be passed.
			 * @return Value of property <code>defaultFilterOperator</code>
			 */
			getDefaultFilterOperator(): string;
			/**
			 * Gets current value of property <code>filtered</code>.
			 * 
			 * Indicates if the column is filtered. This property only controls if a filter indicator is displayed in the
			 * column header - it does not trigger the filter function. The column has to be filtered by calling <code>Column.sort()</code>
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>filtered</code>
			 */
			getFiltered(): boolean;
			/**
			 * Gets current value of property <code>filterOperator</code>.
			 * 
			 * Filter operator to use when filtering this column.
			 * @return Value of property <code>filterOperator</code>
			 */
			getFilterOperator(): string;
			/**
			 * Gets current value of property <code>filterProperty</code>.
			 * 
			 * Specifies the binding property on which the column shall be filtered.
			 * Since the column template may have composite bindings, it's not possible to figure out on which binding
			 * property the filter shall be applied. Therefore the binding property for filtering must be specified.
			 * For example, if the first name and last name are displayed in the same column, only one of the two can be defined as
			 * <code>filterProperty</code>.
			 * 
			 * A column menu entry for filtering can only be generated if the <code>filterProperty</code> is set. The
			 * default menu entry is a text input field.
			 * @return Value of property <code>filterProperty</code>
			 */
			getFilterProperty(): string;
			/**
			 * Gets current value of property <code>filterType</code>.
			 * 
			 * Type of Filter. This is used to transform the search term to the specified type,
			 * to make sure that the right columns are displayed. This should be the same as defined
			 * in binding for this column. As an alternative you can pass a function which does the conversion.
			 * The function receives the entered filter value as parameter and returns the proper
			 * value for the filter expression. Another option is to pass the class name of the type,
			 * e.g.: <code>sap.ui.model.type.Date</code> or an expression similar to the binding syntax,
			 * e.g.: <code>"\{type: 'sap.ui.model.type.Date', formatOptions: \{UTC: true\}, constraints: {} \}"</code>.
			 * Here the escaping is mandatory to avoid handling by the binding parser.
			 * By default the filter type is <code>sap.ui.model.type.String</code>.
			 * @return Value of property <code>filterType</code>
			 */
			getFilterType(): any;
			/**
			 * Gets current value of property <code>filterValue</code>.
			 * 
			 * Specifies the value of the filter as string (will be converted into the proper data type). It is possible
			 * to provide a filterOperator as string, as shown here:
			 * <pre>
			 * &gt; 50
			 * &lt; 100
			 * &gt;= 150
			 * &lt;= 200
			 * = 250
			 * != 300
			 * something    ends with
			 * something*    starts with
			 * something*   contains
			 * some..thing   between
			 * 50..100       between
			 * </pre>
			 * @return Value of property <code>filterValue</code>
			 */
			getFilterValue(): string;
			/**
			 * Gets current value of property <code>flexible</code>.
			 * 
			 * If the table is wider than the sum of widths of the visible columns, the columns will be
			 * resized proportionally to their widths that were set originally. If set to false, the column will be displayed in the
			 * original width. If all columns are set to not be flexible, an extra "dummy" column will be
			 * created at the end of the table.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>flexible</code>
			 */
			getFlexible(): boolean;
			/**
			 * Gets current value of property <code>grouped</code>.
			 * 
			 * Indicates if the column is grouped.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>grouped</code>
			 */
			getGrouped(): boolean;
			/**
			 * Gets current value of property <code>hAlign</code>.
			 * 
			 * Horizontal alignment of the column content. Controls with a text align do not inherit
			 * the horizontal alignment. You have to set the text align directly on the template.
			 * 
			 * Default value is <code>Begin</code>.
			 * @return Value of property <code>hAlign</code>
			 */
			getHAlign(): sap.ui.core.HorizontalAlign;
			/**
			 * Gets current value of property <code>headerSpan</code>.
			 * 
			 * If this property is set, a span is applied for the header. When moving columns, all columns
			 * which are part of the header will be moved. The <code>headerSpan</code> can be either an integer or an array of
			 * integers (if you use the multi header feature of the table). If you only specify an integer, this span is
			 * applied for all header rows, with multiple integers you can specify a separate span for each header row.
			 * 
			 * Default value is <code>1</code>.
			 * @return Value of property <code>headerSpan</code>
			 */
			getHeaderSpan(): any;
			/**
			 * Gets content of aggregation <code>label</code>.
			 * 
			 * Label of the column which is displayed in the column header. This aggregation is for the standard behavior,
			 * where you only want to display one single row header. If a string is supplied, a default label control will be
			 * created. Which control this is depends on the loaded libraries.
			 * @return 
			 */
			getLabel(): sap.ui.core.Control|string;
			/**
			 * Gets content of aggregation <code>menu</code>.
			 * 
			 * The menu used by the column. By default the {@link sap.ui.table.ColumnMenu} is used.
			 * 
			 * <b>Note:</b> Applications must not use or change the default <code>sap.ui.table.ColumnMenu</code> of
			 * a column in any way or create own instances of <code>sap.ui.table.ColumnMenu</code>.
			 * To add a custom menu to a column, use the aggregation <code>menu</code> with a new instance of
			 * <code>sap.ui.unified.Menu</code>.
			 * @return 
			 */
			getMenu(): sap.ui.unified.Menu;
			/**
			 * Gets content of aggregation <code>multiLabels</code>.
			 * 
			 * Labels of the column which are displayed in the column header. Define a control for
			 * each header row in the table. Use this aggregation if you want to use multiple headers per column.
			 * @return 
			 */
			getMultiLabels(): sap.ui.core.Control[];
			/**
			 * Gets current value of property <code>name</code>.
			 * 
			 * The name of the column which is used in the column visibility menu item as text.
			 * If not set as a fallback the column menu tries to get the text from the nested Label.
			 * @return Value of property <code>name</code>
			 */
			getName(): string;
			/**
			 * Gets current value of property <code>resizable</code>.
			 * 
			 * If set to true, the column can be resized either using the resize-handle (by mouse) or using
			 * the keyboard (SHIFT + Left/Right Arrow keys)
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>resizable</code>
			 */
			getResizable(): boolean;
			/**
			 * Gets current value of property <code>showFilterMenuEntry</code>.
			 * 
			 * Defines if the filter menu entry is displayed
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>showFilterMenuEntry</code>
			 */
			getShowFilterMenuEntry(): boolean;
			/**
			 * Gets current value of property <code>showSortMenuEntry</code>.
			 * 
			 * Defines if the sort menu entries are displayed
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>showSortMenuEntry</code>
			 */
			getShowSortMenuEntry(): boolean;
			/**
			 * Gets current value of property <code>sorted</code>.
			 * 
			 * Indicates if the column is sorted. This property only controls if a sort indicator is displayed in the
			 * column header - it does not trigger the sort function. The column has to be sorted by calling <code>Column.sort()</code>
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>sorted</code>
			 */
			getSorted(): boolean;
			/**
			 * Gets current value of property <code>sortOrder</code>.
			 * 
			 * This property indicates the sort direction (Ascending or Descending). The corresponding icon will be
			 * rendered if the property <code>sorted</code> is <code>true</code>
			 * 
			 * Default value is <code>Ascending</code>.
			 * @return Value of property <code>sortOrder</code>
			 */
			getSortOrder(): SortOrder;
			/**
			 * Gets current value of property <code>sortProperty</code>.
			 * 
			 * Specifies the binding property on which the column will sort.
			 * Since the column template may have composite bindings, it's not possible to figure out on which binding
			 * property the sort shall be applied. Therefore the binding property for sorting must be specified.
			 * For example, if the first name and last name are displayed in the same column, only one of the two can be defined as
			 * <code>sortProperty</code>.
			 * 
			 * A column menu entry for sorting can only be generated if the <code>sortProperty</code> is set.
			 * @return Value of property <code>sortProperty</code>
			 */
			getSortProperty(): string;
			/**
			 * Gets content of aggregation <code>template</code>.
			 * 
			 * Template (cell renderer) of this column. A template is decoupled from the column, which means after
			 * changing the templates' properties or aggregations an explicit invalidation of the column or table is
			 * required. The default depends on the loaded libraries.
			 * @return 
			 */
			getTemplate(): sap.ui.core.Control;
			/**
			 * Gets current value of property <code>visible</code>.
			 * 
			 * Invisible controls are not rendered.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>visible</code>
			 */
			getVisible(): boolean;
			/**
			 * Gets current value of property <code>width</code>.
			 * 
			 * Width of the column. Works only with px/em/rem values. Em are handled like rem values.
			 * @return Value of property <code>width</code>
			 */
			getWidth(): sap.ui.core.CSSSize;
			/**
			 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>multiLabels</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oMultiLabel The multiLabel whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfMultiLabel(oMultiLabel: sap.ui.core.Control): number;
			/**
			 * Inserts a multiLabel into the aggregation <code>multiLabels</code>.
			 * @param oMultiLabel the multiLabel to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the multiLabel should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the multiLabel is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the multiLabel is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertMultiLabel(oMultiLabel: sap.ui.core.Control, iIndex: number): Column;
			/**
			 * Removes all the controls from the aggregation <code>multiLabels</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllMultiLabels(): sap.ui.core.Control[];
			/**
			 * Removes a multiLabel from the aggregation <code>multiLabels</code>.
			 * @param vMultiLabel The multiLabel to remove or its index or id
			 * @return The removed multiLabel or <code>null</code>
			 */
			removeMultiLabel(vMultiLabel: number|string|sap.ui.core.Control): sap.ui.core.Control;
			/**
			 * Sets a new value for property <code>autoResizable</code>.
			 * 
			 * Enables auto-resizing of the column on double-clicking the resizer. The width is determined on the widest
			 * currently displayed content. It does not consider rows which are currently not scrolled into view.
			 * Currently only implemented to work with the following controls:
			 * <code>sap.m.Text, sap.m.Label, sap.m.Link, sap.m.Input,
			 * sap.ui.commons.TextView, sap.ui.commons.Label, sap.ui.commons.Link and sap.ui.commons.TextField,
			 * sap.ui.commons.Checkbox, sap.m.Checkbox</code>
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bAutoResizable New value for property <code>autoResizable</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setAutoResizable(bAutoResizable: boolean): Column;
			/**
			 * Sets a new value for property <code>defaultFilterOperator</code>.
			 * 
			 * If this property is set, the default filter operator of the column is overridden.
			 * By default <code>Contains</code> is used for string and <code>EQ</code> for other types. A valid <code>sap.ui.model.FilterOperator</code> needs to be passed.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sDefaultFilterOperator New value for property <code>defaultFilterOperator</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setDefaultFilterOperator(sDefaultFilterOperator: string): Column;
			/**
			 * Sets a new value for property <code>filtered</code>.
			 * 
			 * Indicates if the column is filtered. This property only controls if a filter indicator is displayed in the
			 * column header - it does not trigger the filter function. The column has to be filtered by calling <code>Column.sort()</code>
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bFiltered New value for property <code>filtered</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setFiltered(bFiltered: boolean): Column;
			/**
			 * Sets a new value for property <code>filterOperator</code>.
			 * 
			 * Filter operator to use when filtering this column.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sFilterOperator New value for property <code>filterOperator</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setFilterOperator(sFilterOperator: string): Column;
			/**
			 * Sets a new value for property <code>filterProperty</code>.
			 * 
			 * Specifies the binding property on which the column shall be filtered.
			 * Since the column template may have composite bindings, it's not possible to figure out on which binding
			 * property the filter shall be applied. Therefore the binding property for filtering must be specified.
			 * For example, if the first name and last name are displayed in the same column, only one of the two can be defined as
			 * <code>filterProperty</code>.
			 * 
			 * A column menu entry for filtering can only be generated if the <code>filterProperty</code> is set. The
			 * default menu entry is a text input field.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sFilterProperty New value for property <code>filterProperty</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setFilterProperty(sFilterProperty: string): Column;
			/**
			 * Sets a new value for property <code>filterType</code>.
			 * 
			 * Type of Filter. This is used to transform the search term to the specified type,
			 * to make sure that the right columns are displayed. This should be the same as defined
			 * in binding for this column. As an alternative you can pass a function which does the conversion.
			 * The function receives the entered filter value as parameter and returns the proper
			 * value for the filter expression. Another option is to pass the class name of the type,
			 * e.g.: <code>sap.ui.model.type.Date</code> or an expression similar to the binding syntax,
			 * e.g.: <code>"\{type: 'sap.ui.model.type.Date', formatOptions: \{UTC: true\}, constraints: {} \}"</code>.
			 * Here the escaping is mandatory to avoid handling by the binding parser.
			 * By default the filter type is <code>sap.ui.model.type.String</code>.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param oFilterType New value for property <code>filterType</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setFilterType(oFilterType: any): Column;
			/**
			 * Sets a new value for property <code>filterValue</code>.
			 * 
			 * Specifies the value of the filter as string (will be converted into the proper data type). It is possible
			 * to provide a filterOperator as string, as shown here:
			 * <pre>
			 * &gt; 50
			 * &lt; 100
			 * &gt;= 150
			 * &lt;= 200
			 * = 250
			 * != 300
			 * something    ends with
			 * something*    starts with
			 * something*   contains
			 * some..thing   between
			 * 50..100       between
			 * </pre>
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sFilterValue New value for property <code>filterValue</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setFilterValue(sFilterValue: string): Column;
			/**
			 * Sets a new value for property <code>flexible</code>.
			 * 
			 * If the table is wider than the sum of widths of the visible columns, the columns will be
			 * resized proportionally to their widths that were set originally. If set to false, the column will be displayed in the
			 * original width. If all columns are set to not be flexible, an extra "dummy" column will be
			 * created at the end of the table.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bFlexible New value for property <code>flexible</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setFlexible(bFlexible: boolean): Column;
			/**
			 * Sets a new value for property <code>grouped</code>.
			 * 
			 * Indicates if the column is grouped.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bGrouped New value for property <code>grouped</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setGrouped(bGrouped: boolean): Column;
			/**
			 * Sets a new value for property <code>hAlign</code>.
			 * 
			 * Horizontal alignment of the column content. Controls with a text align do not inherit
			 * the horizontal alignment. You have to set the text align directly on the template.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>Begin</code>.
			 * @param sHAlign New value for property <code>hAlign</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setHAlign(sHAlign: sap.ui.core.HorizontalAlign): Column;
			/**
			 * Sets a new value for property <code>headerSpan</code>.
			 * 
			 * If this property is set, a span is applied for the header. When moving columns, all columns
			 * which are part of the header will be moved. The <code>headerSpan</code> can be either an integer or an array of
			 * integers (if you use the multi header feature of the table). If you only specify an integer, this span is
			 * applied for all header rows, with multiple integers you can specify a separate span for each header row.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>1</code>.
			 * @param oHeaderSpan New value for property <code>headerSpan</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setHeaderSpan(oHeaderSpan: any): Column;
			/**
			 * Sets the aggregated <code>label</code>.
			 * @param vLabel The label to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setLabel(vLabel: sap.ui.core.Control|string): Column;
			/**
			 * Sets the aggregated <code>menu</code>.
			 * @param oMenu The menu to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setMenu(oMenu: sap.ui.unified.Menu): Column;
			/**
			 * Sets a new value for property <code>name</code>.
			 * 
			 * The name of the column which is used in the column visibility menu item as text.
			 * If not set as a fallback the column menu tries to get the text from the nested Label.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sName New value for property <code>name</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setName(sName: string): Column;
			/**
			 * Sets a new value for property <code>resizable</code>.
			 * 
			 * If set to true, the column can be resized either using the resize-handle (by mouse) or using
			 * the keyboard (SHIFT + Left/Right Arrow keys)
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bResizable New value for property <code>resizable</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setResizable(bResizable: boolean): Column;
			/**
			 * Sets a new value for property <code>showFilterMenuEntry</code>.
			 * 
			 * Defines if the filter menu entry is displayed
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bShowFilterMenuEntry New value for property <code>showFilterMenuEntry</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setShowFilterMenuEntry(bShowFilterMenuEntry: boolean): Column;
			/**
			 * Sets a new value for property <code>showSortMenuEntry</code>.
			 * 
			 * Defines if the sort menu entries are displayed
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bShowSortMenuEntry New value for property <code>showSortMenuEntry</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setShowSortMenuEntry(bShowSortMenuEntry: boolean): Column;
			/**
			 * Sets a new value for property <code>sorted</code>.
			 * 
			 * Indicates if the column is sorted. This property only controls if a sort indicator is displayed in the
			 * column header - it does not trigger the sort function. The column has to be sorted by calling <code>Column.sort()</code>
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bSorted New value for property <code>sorted</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSorted(bSorted: boolean): Column;
			/**
			 * Sets a new value for property <code>sortOrder</code>.
			 * 
			 * This property indicates the sort direction (Ascending or Descending). The corresponding icon will be
			 * rendered if the property <code>sorted</code> is <code>true</code>
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>Ascending</code>.
			 * @param sSortOrder New value for property <code>sortOrder</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSortOrder(sSortOrder: SortOrder): Column;
			/**
			 * Sets a new value for property <code>sortProperty</code>.
			 * 
			 * Specifies the binding property on which the column will sort.
			 * Since the column template may have composite bindings, it's not possible to figure out on which binding
			 * property the sort shall be applied. Therefore the binding property for sorting must be specified.
			 * For example, if the first name and last name are displayed in the same column, only one of the two can be defined as
			 * <code>sortProperty</code>.
			 * 
			 * A column menu entry for sorting can only be generated if the <code>sortProperty</code> is set.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sSortProperty New value for property <code>sortProperty</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSortProperty(sSortProperty: string): Column;
			/**
			 * Sets the aggregated <code>template</code>.
			 * @param oTemplate The template to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setTemplate(oTemplate: sap.ui.core.Control): Column;
			/**
			 * Sets a new value for property <code>visible</code>.
			 * 
			 * Invisible controls are not rendered.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bVisible New value for property <code>visible</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setVisible(bVisible: boolean): Column;
			/**
			 * Sets a new value for property <code>width</code>.
			 * 
			 * Width of the column. Works only with px/em/rem values. Em are handled like rem values.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sWidth New value for property <code>width</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setWidth(sWidth: sap.ui.core.CSSSize): Column;
			/**
			 * Returns whether the column should be rendered or not.
			 * @return true, if the column should be rendered
			 */
			shouldRender(): boolean;
		}
	
		class ColumnMenu extends sap.ui.unified.Menu {
			/**
			 * Constructor for a new ColumnMenu.
			 * 
			 * <b>Note:</b> Applications must not use or change the default <code>sap.ui.table.ColumnMenu</code> of
			 * a column in any way or create own instances of <code>sap.ui.table.ColumnMenu</code>.
			 * To add a custom menu to a column, use the aggregation <code>menu</code> with a new instance of
			 * <code>sap.ui.unified.Menu</code>.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.ui.table.ColumnMenu with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.unified.Menu.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
		}
	
		class GroupEventType {
			/**
			 * Group Column
			 */
			static group: string;
			/**
			 * Show grouped column only as group header
			 */
			static hideGroupedColumn: string;
			/**
			 * Change the group order of the columns. Move column one position down in the group sequence
			 */
			static moveDown: string;
			/**
			 * Change the group order of the columns. Move column one position up in the group sequence
			 */
			static moveUp: string;
			/**
			 * Show grouped column also as a column, not just as group header
			 */
			static showGroupedColumn: string;
			/**
			 * Ungroup Column
			 */
			static ungroup: string;
			/**
			 * Ungroup All Columns
			 */
			static ungroupAll: string;
		}
	
		class NavigationMode {
			/**
			 * Uses the scrollbar control.
			 */
			static Scrollbar: string;
		}
	
		class Row extends sap.ui.core.Element {
			/**
			 * Constructor for a new Row.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some cell to the aggregation <code>cells</code>.
			 * @param oCell the cell to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addCell(oCell: sap.ui.core.Control): Row;
			/**
			 * Destroys all the cells in the aggregation <code>cells</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyCells(): Row;
			/**
			 * Creates a new subclass of class sap.ui.table.Row with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets content of aggregation <code>cells</code>.
			 * 
			 * The controls for the cells.
			 * @return 
			 */
			getCells(): sap.ui.core.Control[];
			/**
			 * Returns the index of the row in the table or -1 if not added to a table. This
			 * function considers the scroll position of the table and also takes fixed rows and
			 * fixed bottom rows into account.
			 * @return index of the row (considers scroll position and fixed rows)
			 */
			getIndex(): number;
			/**
			 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>cells</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oCell The cell whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfCell(oCell: sap.ui.core.Control): number;
			/**
			 * Inserts a cell into the aggregation <code>cells</code>.
			 * @param oCell the cell to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the cell should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the cell is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the cell is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertCell(oCell: sap.ui.core.Control, iIndex: number): Row;
			/**
			 * Removes all the controls from the aggregation <code>cells</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllCells(): sap.ui.core.Control[];
			/**
			 * Removes a cell from the aggregation <code>cells</code>.
			 * @param vCell The cell to remove or its index or id
			 * @return The removed cell or <code>null</code>
			 */
			removeCell(vCell: number|string|sap.ui.core.Control): sap.ui.core.Control;
		}
	
		class SelectionBehavior {
			/**
			 * Rows can be selected on the complete row.
			 */
			static Row: string;
			/**
			 * Rows can only be selected on the row (and the selector is hidden).
			 */
			static RowOnly: string;
			/**
			 * Rows can only be selected on the row selector.
			 */
			static RowSelector: string;
		}
	
		class SelectionMode {
			/**
			 * Select multiple rows at a time (toggle behavior).
			 */
			static MultiToggle: string;
			/**
			 * No rows can be selected.
			 */
			static None: string;
			/**
			 * Select one row at a time.
			 */
			static Single: string;
		}
	
		class SharedDomRef {
			/**
			 * The element id of the Horizontal Scroll Bar of the sap.ui.table.Table.
			 */
			static HorizontalScrollBar: string;
			/**
			 * The element id of the Vertical Scroll Bar of the sap.ui.table.Table.
			 */
			static VerticalScrollBar: string;
		}
	
		class SortOrder {
			/**
			 * Sort Order: ascending.
			 */
			static Ascending: string;
			/**
			 * Sort Order: descending.
			 */
			static Descending: string;
		}
	
		class Table extends sap.ui.core.Control {
			/**
			 * Constructor for a new Table.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.table.TableMetadata);
			/**
			 * Constructor for a new Table.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
			 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): Table;
			/**
			 * Adds some column to the aggregation <code>columns</code>.
			 * @param oColumn the column to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addColumn(oColumn: Column): Table;
			/**
			 * Adds some extension to the aggregation <code>extension</code>.
			 * @param oExtension the extension to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addExtension(oExtension: sap.ui.core.Control): Table;
			/**
			 * Adds some row to the aggregation <code>rows</code>.
			 * @param oRow the row to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addRow(oRow: Row): Table;
			/**
			 * Adds the given selection interval to the selection. In case of single selection the "indexTo" value will be used for as selected index.
			 * @param iIndexFrom Index from which .
			 * @param iIndexTo Indices of the items that shall additionally be selected.
			 * @return 
			 */
			addSelectionInterval(iIndexFrom: number, iIndexTo: number): Table;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>busyStateChanged</code> event of this <code>sap.ui.table.Table</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.table.Table</code> itself.
			 * 
			 * This event gets fired when the busy state of the table changes. It should only be used by composite controls.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachBusyStateChanged(oData: any, fnFunction: any, oListener?: any): Table;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>cellClick</code> event of this <code>sap.ui.table.Table</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.table.Table</code> itself.
			 * 
			 * fired when the user clicks a cell of the table (experimental!).
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachCellClick(oData: any, fnFunction: any, oListener?: any): Table;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>cellContextmenu</code> event of this <code>sap.ui.table.Table</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.table.Table</code> itself.
			 * 
			 * fired when the user clicks a cell of the table.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachCellContextmenu(oData: any, fnFunction: any, oListener?: any): Table;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>columnFreeze</code> event of this <code>sap.ui.table.Table</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.table.Table</code> itself.
			 * 
			 * fired when a column of the table should be freezed
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachColumnFreeze(oData: any, fnFunction: any, oListener?: any): Table;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>columnMove</code> event of this <code>sap.ui.table.Table</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.table.Table</code> itself.
			 * 
			 * fired when a table column is moved.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachColumnMove(oData: any, fnFunction: any, oListener?: any): Table;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>columnResize</code> event of this <code>sap.ui.table.Table</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.table.Table</code> itself.
			 * 
			 * fired when a table column is resized.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachColumnResize(oData: any, fnFunction: any, oListener?: any): Table;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>columnSelect</code> event of this <code>sap.ui.table.Table</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.table.Table</code> itself.
			 * 
			 * fired when a column of the table has been selected
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachColumnSelect(oData: any, fnFunction: any, oListener?: any): Table;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>columnVisibility</code> event of this <code>sap.ui.table.Table</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.table.Table</code> itself.
			 * 
			 * fired when the visibility of a table column is changed.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachColumnVisibility(oData: any, fnFunction: any, oListener?: any): Table;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>customFilter</code> event of this <code>sap.ui.table.Table</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.table.Table</code> itself.
			 * 
			 * This event is triggered when the custom filter item of the column menu is pressed. The column on which the event was triggered is passed as parameter.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachCustomFilter(oData: any, fnFunction: any, oListener?: any): Table;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>filter</code> event of this <code>sap.ui.table.Table</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.table.Table</code> itself.
			 * 
			 * fired when the table is filtered.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachFilter(oData: any, fnFunction: any, oListener?: any): Table;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>firstVisibleRowChanged</code> event of this <code>sap.ui.table.Table</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.table.Table</code> itself.
			 * 
			 * This event gets fired when the first visible row is changed. It should only be used by composite controls.
			 * The event even is fired when setFirstVisibleRow is called programmatically.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachFirstVisibleRowChanged(oData: any, fnFunction: any, oListener?: any): Table;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>group</code> event of this <code>sap.ui.table.Table</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.table.Table</code> itself.
			 * 
			 * fired when the table is grouped (experimental!).
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachGroup(oData: any, fnFunction: any, oListener?: any): Table;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>rowSelectionChange</code> event of this <code>sap.ui.table.Table</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.table.Table</code> itself.
			 * 
			 * fired when the row selection of the table has been changed (the event parameters can be used to determine
			 * selection changes - to find out the selected rows you should better use the table selection API)
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachRowSelectionChange(oData: any, fnFunction: any, oListener?: any): Table;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>sort</code> event of this <code>sap.ui.table.Table</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.table.Table</code> itself.
			 * 
			 * fired when the table is sorted.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.table.Table</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachSort(oData: any, fnFunction: any, oListener?: any): Table;
			/**
			 * Triggers automatic resizing of a column to the widest content.
			 * @param iColIndex The index of the column in the list of visible columns.
			 */
			autoResizeColumn(iColIndex: number);
			/**
			 * Binds aggregation <code>columns</code> to model data.
			 * 
			 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
			 * detailed description of the possible properties of <code>oBindingInfo</code>.
			 * @param oBindingInfo The binding information
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			bindColumns(oBindingInfo: any): Table;
			/**
			 * Binds aggregation <code>rows</code> to model data.
			 * 
			 * See {@link sap.ui.base.ManagedObject#bindAggregation ManagedObject.bindAggregation} for a 
			 * detailed description of the possible properties of <code>oBindingInfo</code>.
			 * @param oBindingInfo The binding information
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			bindRows(oBindingInfo: any): Table;
			/**
			 * Removes complete selection.
			 * @return 
			 */
			clearSelection(): Table;
			/**
			 * Destroys all the columns in the aggregation <code>columns</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyColumns(): Table;
			/**
			 * Destroys all the extension in the aggregation <code>extension</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyExtension(): Table;
			/**
			 * Destroys the footer in the aggregation <code>footer</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyFooter(): Table;
			/**
			 * Destroys the noData in the aggregation <code>noData</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyNoData(): Table;
			/**
			 * Destroys all the rows in the aggregation <code>rows</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyRows(): Table;
			/**
			 * Destroys the title in the aggregation <code>title</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyTitle(): Table;
			/**
			 * Destroys the toolbar in the aggregation <code>toolbar</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyToolbar(): Table;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>busyStateChanged</code> event of this <code>sap.ui.table.Table</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachBusyStateChanged(fnFunction: any, oListener: any): Table;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>cellClick</code> event of this <code>sap.ui.table.Table</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachCellClick(fnFunction: any, oListener: any): Table;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>cellContextmenu</code> event of this <code>sap.ui.table.Table</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachCellContextmenu(fnFunction: any, oListener: any): Table;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>columnFreeze</code> event of this <code>sap.ui.table.Table</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachColumnFreeze(fnFunction: any, oListener: any): Table;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>columnMove</code> event of this <code>sap.ui.table.Table</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachColumnMove(fnFunction: any, oListener: any): Table;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>columnResize</code> event of this <code>sap.ui.table.Table</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachColumnResize(fnFunction: any, oListener: any): Table;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>columnSelect</code> event of this <code>sap.ui.table.Table</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachColumnSelect(fnFunction: any, oListener: any): Table;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>columnVisibility</code> event of this <code>sap.ui.table.Table</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachColumnVisibility(fnFunction: any, oListener: any): Table;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>customFilter</code> event of this <code>sap.ui.table.Table</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachCustomFilter(fnFunction: any, oListener: any): Table;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>filter</code> event of this <code>sap.ui.table.Table</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachFilter(fnFunction: any, oListener: any): Table;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>firstVisibleRowChanged</code> event of this <code>sap.ui.table.Table</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachFirstVisibleRowChanged(fnFunction: any, oListener: any): Table;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>group</code> event of this <code>sap.ui.table.Table</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachGroup(fnFunction: any, oListener: any): Table;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>rowSelectionChange</code> event of this <code>sap.ui.table.Table</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachRowSelectionChange(fnFunction: any, oListener: any): Table;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>sort</code> event of this <code>sap.ui.table.Table</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachSort(fnFunction: any, oListener: any): Table;
			/**
			 * Creates a new {@link sap.ui.core.util.Export} object and fills row/column information from the table if not provided. For the cell content, the column's "sortProperty" will be used (experimental!)
			 * 
			 * <p><b>Please note: The return value was changed from jQuery Promises to standard ES6 Promises.
			 * jQuery specific Promise methods ('done', 'fail', 'always', 'pipe' and 'state') are still available but should not be used.
			 * Please use only the standard methods 'then' and 'catch'!</b></p>
			 * @param mSettings settings for the new Export, see {@link sap.ui.core.util.Export} <code>constructor</code>(optional)
			 * @return Promise object
			 */
			exportData(mSettings?: any): any;
			/**
			 * Creates a new subclass of class sap.ui.table.Table with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * filter the given column by the given value
			 * @param oColumn column to be filtered
			 * @param sValue filter value as string (will be converted)
			 * @return 
			 */
			filter(oColumn: Column, sValue: string): Table;
			/**
			 * Fires event <code>busyStateChanged</code> to attached listeners.
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireBusyStateChanged(mArguments?: any): Table;
			/**
			 * Fires event <code>cellClick</code> to attached listeners.
			 * 
			 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>cellControl</code> of type <code>sap.ui.core.Control</code>The control of the cell.</li>
			 * <li><code>cellDomRef</code> of type <code>Object</code>DOM reference of the clicked cell. Can be used to position the context menu.</li>
			 * <li><code>rowIndex</code> of type <code>int</code>Row index of the selected cell.</li>
			 * <li><code>columnIndex</code> of type <code>int</code>Column index of the selected cell. This is the index of visible columns and might differ from
			 * the index maintained in the column aggregation.</li>
			 * <li><code>columnId</code> of type <code>string</code>Column ID of the selected cell.</li>
			 * <li><code>rowBindingContext</code> of type <code>sap.ui.model.Context</code>Row binding context of the selected cell.</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Whether or not to prevent the default action
			 */
			fireCellClick(mArguments?: any): boolean;
			/**
			 * Fires event <code>cellContextmenu</code> to attached listeners.
			 * 
			 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>cellControl</code> of type <code>sap.ui.core.Control</code>The control of the cell.</li>
			 * <li><code>cellDomRef</code> of type <code>Object</code>DOM reference of the clicked cell. Can be used to position the context menu.</li>
			 * <li><code>rowIndex</code> of type <code>int</code>Row index of the selected cell.</li>
			 * <li><code>columnIndex</code> of type <code>int</code>Column index of the selected cell. This is the index of visible columns and might differ from
			 * the index maintained in the column aggregation.</li>
			 * <li><code>columnId</code> of type <code>string</code>Column ID of the selected cell.</li>
			 * <li><code>rowBindingContext</code> of type <code>sap.ui.model.Context</code>Row binding context of the selected cell.</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Whether or not to prevent the default action
			 */
			fireCellContextmenu(mArguments?: any): boolean;
			/**
			 * Fires event <code>columnFreeze</code> to attached listeners.
			 * 
			 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>column</code> of type <code>sap.ui.table.Column</code>reference to the column to freeze</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Whether or not to prevent the default action
			 */
			fireColumnFreeze(mArguments?: any): boolean;
			/**
			 * Fires event <code>columnMove</code> to attached listeners.
			 * 
			 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>column</code> of type <code>sap.ui.table.Column</code>moved column.</li>
			 * <li><code>newPos</code> of type <code>int</code>new position of the column.</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Whether or not to prevent the default action
			 */
			fireColumnMove(mArguments?: any): boolean;
			/**
			 * Fires event <code>columnResize</code> to attached listeners.
			 * 
			 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>column</code> of type <code>sap.ui.table.Column</code>resized column.</li>
			 * <li><code>width</code> of type <code>sap.ui.core.CSSSize</code>new width of the table column as CSS Size definition.</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Whether or not to prevent the default action
			 */
			fireColumnResize(mArguments?: any): boolean;
			/**
			 * Fires event <code>columnSelect</code> to attached listeners.
			 * 
			 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>column</code> of type <code>sap.ui.table.Column</code>reference to the selected column</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Whether or not to prevent the default action
			 */
			fireColumnSelect(mArguments?: any): boolean;
			/**
			 * Fires event <code>columnVisibility</code> to attached listeners.
			 * 
			 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>column</code> of type <code>sap.ui.table.Column</code>affected column.</li>
			 * <li><code>visible</code> of type <code>boolean</code>new value of the visible property.</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Whether or not to prevent the default action
			 */
			fireColumnVisibility(mArguments?: any): boolean;
			/**
			 * Fires event <code>customFilter</code> to attached listeners.
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireCustomFilter(mArguments?: any): Table;
			/**
			 * Fires event <code>filter</code> to attached listeners.
			 * 
			 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>column</code> of type <code>sap.ui.table.Column</code>filtered column.</li>
			 * <li><code>value</code> of type <code>string</code>filter value.</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Whether or not to prevent the default action
			 */
			fireFilter(mArguments?: any): boolean;
			/**
			 * Fires event <code>firstVisibleRowChanged</code> to attached listeners.
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireFirstVisibleRowChanged(mArguments?: any): Table;
			/**
			 * Fires event <code>group</code> to attached listeners.
			 * 
			 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>column</code> of type <code>sap.ui.table.Column</code>grouped column.</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Whether or not to prevent the default action
			 */
			fireGroup(mArguments?: any): boolean;
			/**
			 * Fires event <code>rowSelectionChange</code> to attached listeners.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>rowIndex</code> of type <code>int</code>row index which has been clicked so that the selection has been changed (either selected or deselected)</li>
			 * <li><code>rowContext</code> of type <code>object</code>binding context of the row which has been clicked so that selection has been changed</li>
			 * <li><code>rowIndices</code> of type <code>int[]</code>array of row indices which selection has been changed (either selected or deselected)</li>
			 * <li><code>selectAll</code> of type <code>boolean</code>indicator if "select all" function is used to select rows</li>
			 * <li><code>userInteraction</code> of type <code>boolean</code>indicates that the event was fired due to an explicit user interaction like clicking the row header
			 * or using the keyboard (SPACE or ENTER) to select a row or a range of rows.</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireRowSelectionChange(mArguments?: any): Table;
			/**
			 * Fires event <code>sort</code> to attached listeners.
			 * 
			 * Listeners may prevent the default action of this event by using the <code>preventDefault</code>-method on the event object.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>column</code> of type <code>sap.ui.table.Column</code>sorted column.</li>
			 * <li><code>sortOrder</code> of type <code>sap.ui.table.SortOrder</code>Sort Order</li>
			 * <li><code>columnAdded</code> of type <code>boolean</code>If column was added to sorter this is true. If new sort is started this is set to false</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Whether or not to prevent the default action
			 */
			fireSort(mArguments?: any): boolean;
			/**
			 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
			 * @return 
			 */
			getAriaLabelledBy(): sap.ui.core.ID[];
			/**
			 * Gets current value of property <code>columnHeaderHeight</code>.
			 * 
			 * Height of the column header of the Table in pixel.
			 * @return Value of property <code>columnHeaderHeight</code>
			 */
			getColumnHeaderHeight(): number;
			/**
			 * Gets current value of property <code>columnHeaderVisible</code>.
			 * 
			 * Flag whether the column header is visible or not.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>columnHeaderVisible</code>
			 */
			getColumnHeaderVisible(): boolean;
			/**
			 * Gets content of aggregation <code>columns</code>.
			 * 
			 * Columns of the Table
			 * @return 
			 */
			getColumns(): Column[];
			/**
			 * Returns the context of a row by its index. Please note that for server-based models like OData,
			 * the supplied index might not have been loaded yet. If the context is not available at the client,
			 * the binding will trigger a backend request and request this single context. Although this API
			 * looks synchronous it may not return a context but load it and fire a change event on the binding.
			 * 
			 * For server-based models you should consider to only make this API call when the index is within
			 * the currently visible scroll area.
			 * @param iIndex Index of the row to return the context from.
			 * @return 
			 */
			getContextByIndex(iIndex: number): any;
			/**
			 * Gets current value of property <code>editable</code>.
			 * 
			 * Flag whether the controls of the Table are editable or not (currently this only controls the background color in certain themes!)
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>editable</code>
			 */
			getEditable(): boolean;
			/**
			 * Gets current value of property <code>enableBusyIndicator</code>.
			 * 
			 * Set this parameter to true to make the table handle the busy indicator by its own.
			 * The table will switch to busy as soon as it scrolls into an unpaged area. This feature can only
			 * be used when the navigation mode is set to scrolling.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>enableBusyIndicator</code>
			 */
			getEnableBusyIndicator(): boolean;
			/**
			 * Gets current value of property <code>enableCellFilter</code>.
			 * 
			 * Flag whether to enable or disable the context menu on cells to trigger a filtering with the cell value.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>enableCellFilter</code>
			 */
			getEnableCellFilter(): boolean;
			/**
			 * Gets current value of property <code>enableColumnFreeze</code>.
			 * 
			 * Flag whether to show or hide the column menu item to freeze or unfreeze a column.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>enableColumnFreeze</code>
			 */
			getEnableColumnFreeze(): boolean;
			/**
			 * Gets current value of property <code>enableColumnReordering</code>.
			 * 
			 * Flag to enable or disable column reordering
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>enableColumnReordering</code>
			 */
			getEnableColumnReordering(): boolean;
			/**
			 * Gets current value of property <code>enableCustomFilter</code>.
			 * 
			 * Set this parameter to true to implement your own filter behaviour. Instead of the filter input box a button
			 * will be rendered for which' press event (customFilter) you can register an event handler.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>enableCustomFilter</code>
			 */
			getEnableCustomFilter(): boolean;
			/**
			 * Gets current value of property <code>enableGrouping</code>.
			 * 
			 * Flag to enable or disable column grouping. (experimental!)
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>enableGrouping</code>
			 */
			getEnableGrouping(): boolean;
			/**
			 * Gets current value of property <code>enableSelectAll</code>.
			 * 
			 * Specifies if a select all button should be displayed in the top left corner. This button is only displayed
			 * if the row selector is visible and the selection mode is set to any kind of multi selection.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>enableSelectAll</code>
			 */
			getEnableSelectAll(): boolean;
			/**
			 * Gets content of aggregation <code>extension</code>.
			 * 
			 * Extension section of the Table (if not set it will be hidden)
			 * @return 
			 */
			getExtension(): sap.ui.core.Control[];
			/**
			 * Gets current value of property <code>firstVisibleRow</code>.
			 * 
			 * First visible row.
			 * 
			 * Default value is <code>0</code>.
			 * @return Value of property <code>firstVisibleRow</code>
			 */
			getFirstVisibleRow(): number;
			/**
			 * Gets current value of property <code>fixedBottomRowCount</code>.
			 * 
			 * Number of rows that are fix on the bottom. When you use a vertical scroll bar, only the rows which are not fixed, will scroll.
			 * 
			 * Default value is <code>0</code>.
			 * @return Value of property <code>fixedBottomRowCount</code>
			 */
			getFixedBottomRowCount(): number;
			/**
			 * Gets current value of property <code>fixedColumnCount</code>.
			 * 
			 * Number of columns that are fix on the left. When you use a horizontal scroll bar, only
			 * the columns which are not fixed, will scroll. Fixed columns need a defined width for the feature to work.
			 * Please note that the aggregated width of all fixed columns must not exceed the table width since there
			 * will be no scrollbar for fixed columns.
			 * 
			 * Default value is <code>0</code>.
			 * @return Value of property <code>fixedColumnCount</code>
			 */
			getFixedColumnCount(): number;
			/**
			 * Gets current value of property <code>fixedRowCount</code>.
			 * 
			 * Number of rows that are fix on the top. When you use a vertical scroll bar, only the rows which are not fixed, will scroll.
			 * 
			 * Default value is <code>0</code>.
			 * @return Value of property <code>fixedRowCount</code>
			 */
			getFixedRowCount(): number;
			/**
			 * Gets content of aggregation <code>footer</code>.
			 * 
			 * Control or text of footer section of the Table (if not set it will be hidden)
			 * @return 
			 */
			getFooter(): sap.ui.core.Control|string;
			/**
			 * ID of the element which is the current target of the association <code>groupBy</code>, or <code>null</code>.
			 * @return 
			 */
			getGroupBy(): sap.ui.core.ID;
			/**
			 * Gets current value of property <code>minAutoRowCount</code>.
			 * 
			 * This property is used to set the minimum count of visible rows when the property visibleRowCountMode is set to Auto or Interactive.
			 * For any other visibleRowCountMode, it is ignored.
			 * 
			 * Default value is <code>5</code>.
			 * @return Value of property <code>minAutoRowCount</code>
			 */
			getMinAutoRowCount(): number;
			/**
			 * Gets content of aggregation <code>noData</code>.
			 * 
			 * The value for the noData aggregation can be either a string value or a control instance.
			 * The control is shown, in case there is no data for the Table available. In case of a string
			 * value this will simply replace the no data text.
			 * @return 
			 */
			getNoData(): sap.ui.core.Control|string;
			/**
			 * Gets current value of property <code>rowHeight</code>.
			 * 
			 * Height of a row of the Table in pixel.
			 * @return Value of property <code>rowHeight</code>
			 */
			getRowHeight(): number;
			/**
			 * Gets content of aggregation <code>rows</code>.
			 * 
			 * Rows of the Table
			 * @return 
			 */
			getRows(): Row[];
			/**
			 * Gets current value of property <code>selectedIndex</code>.
			 * 
			 * Zero-based index of selected item. Index value for no selection is -1.
			 * When multi-selection is enabled and multiple items are selected, the method returns
			 * the lead selected item. Sets the zero-based index of the currently selected item. This method
			 * removes any previous selections. When the given index is invalid, the call is ignored.
			 * 
			 * Default value is <code>-1</code>.
			 * @return Value of property <code>selectedIndex</code>
			 */
			getSelectedIndex(): number;
			/**
			 * Zero-based indices of selected items, wrapped in an array. An empty array means "no selection".
			 * @return int[]
			 */
			getSelectedIndices();
			/**
			 * Gets current value of property <code>selectionBehavior</code>.
			 * 
			 * Selection behavior of the Table. This property defines whether the row selector is displayed and whether the row, the row selector or both
			 * can be clicked to select a row.
			 * 
			 * Default value is <code>RowSelector</code>.
			 * @return Value of property <code>selectionBehavior</code>
			 */
			getSelectionBehavior(): SelectionBehavior;
			/**
			 * Gets current value of property <code>selectionMode</code>.
			 * 
			 * Selection mode of the Table. This property controls whether single or multiple rows can be selected and
			 * how the selection can be extended. It may also influence the visual appearance.
			 * 
			 * Default value is <code>MultiToggle</code>.
			 * @return Value of property <code>selectionMode</code>
			 */
			getSelectionMode(): SelectionMode;
			/**
			 * Gets current value of property <code>showColumnVisibilityMenu</code>.
			 * 
			 * Flag to show or hide the column visibility menu. This menu will get displayed in each
			 * generated column header menu. It allows to show or hide columns
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>showColumnVisibilityMenu</code>
			 */
			getShowColumnVisibilityMenu(): boolean;
			/**
			 * Gets current value of property <code>showNoData</code>.
			 * 
			 * Flag whether to show the no data overlay or not once the table is empty. If set to false
			 * the table will just show a grid of empty cells
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>showNoData</code>
			 */
			getShowNoData(): boolean;
			/**
			 * Gets current value of property <code>showOverlay</code>.
			 * 
			 * Setting this property to true will show an overlay on top of the Table content and users cannot click anymore on the Table content.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>showOverlay</code>
			 */
			getShowOverlay(): boolean;
			/**
			 * gets sorted columns
			 * @return Array of sorted columns
			 */
			getSortedColumns();
			/**
			 * Gets current value of property <code>threshold</code>.
			 * 
			 * The <code>threshold</code> defines how many additional (not yet visible records) shall be pre-fetched to enable smooth
			 * scrolling. The threshold is always added to the <code>visibleRowCount</code>. If the <code>visibleRowCount</code> is 10 and the
			 * <code>threshold</code> is 100, there will be 110 records fetched with the initial load.
			 * If the <code>threshold</code> is lower than the <code>visibleRowCount</code>, the <code>visibleRowCount</code> will be used as
			 * the <code>threshold</code>. If the value is 0 then the thresholding is disabled.
			 * 
			 * Default value is <code>100</code>.
			 * @return Value of property <code>threshold</code>
			 */
			getThreshold(): number;
			/**
			 * Gets content of aggregation <code>title</code>.
			 * 
			 * Control or text of title section of the Table (if not set it will be hidden)
			 * @return 
			 */
			getTitle(): sap.ui.core.Control|string;
			/**
			 * Gets content of aggregation <code>toolbar</code>.
			 * 
			 * Toolbar of the Table (if not set it will be hidden)
			 * @return 
			 */
			getToolbar(): sap.ui.core.Toolbar;
			/**
			 * Gets current value of property <code>visibleRowCount</code>.
			 * 
			 * Number of visible rows of the table.
			 * 
			 * Default value is <code>10</code>.
			 * @return Value of property <code>visibleRowCount</code>
			 */
			getVisibleRowCount(): number;
			/**
			 * Gets current value of property <code>visibleRowCountMode</code>.
			 * 
			 * This defines how the table handles the visible rows in the table. The default behavior is,
			 * that a fixed row count is defined. If you change it to auto the visibleRowCount property is
			 * changed by the table automatically. It will then adjust its maximum row count to the space it is
			 * allowed to cover (limited by the surrounding container) and its minimum row count to the value of
			 * the property minAutoRowCount (default value : 5) In manual mode the user can change
			 * the visibleRowCount interactively.
			 * 
			 * Default value is <code>Fixed</code>.
			 * @return Value of property <code>visibleRowCountMode</code>
			 */
			getVisibleRowCountMode(): VisibleRowCountMode;
			/**
			 * Gets current value of property <code>width</code>.
			 * 
			 * Width of the Table.
			 * 
			 * Default value is <code>auto</code>.
			 * @return Value of property <code>width</code>
			 */
			getWidth(): sap.ui.core.CSSSize;
			/**
			 * Checks for the provided <code>sap.ui.table.Column</code> in the aggregation <code>columns</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oColumn The column whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfColumn(oColumn: Column): number;
			/**
			 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>extension</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oExtension The extension whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfExtension(oExtension: sap.ui.core.Control): number;
			/**
			 * Checks for the provided <code>sap.ui.table.Row</code> in the aggregation <code>rows</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oRow The row whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfRow(oRow: Row): number;
			/**
			 * Inserts a column into the aggregation <code>columns</code>.
			 * @param oColumn the column to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the column should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the column is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the column is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertColumn(oColumn: Column, iIndex: number): Table;
			/**
			 * Inserts a extension into the aggregation <code>extension</code>.
			 * @param oExtension the extension to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the extension should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the extension is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the extension is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertExtension(oExtension: sap.ui.core.Control, iIndex: number): Table;
			/**
			 * Inserts a row into the aggregation <code>rows</code>.
			 * @param oRow the row to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the row should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the row is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the row is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertRow(oRow: Row, iIndex: number): Table;
			/**
			 * Returns whether the given index is selected.
			 * @param iIndex Index which is checked for selection state.
			 * @return 
			 */
			isIndexSelected(iIndex: number): boolean;
			/**
			 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllAriaLabelledBy(): sap.ui.core.ID[];
			/**
			 * Removes all the controls from the aggregation <code>columns</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllColumns(): Column[];
			/**
			 * Removes all the controls from the aggregation <code>extension</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllExtension(): sap.ui.core.Control[];
			/**
			 * Removes all the controls from the aggregation <code>rows</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllRows(): Row[];
			/**
			 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
			 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
			 * @return The removed ariaLabelledBy or <code>null</code>
			 */
			removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
			/**
			 * Removes a column from the aggregation <code>columns</code>.
			 * @param vColumn The column to remove or its index or id
			 * @return The removed column or <code>null</code>
			 */
			removeColumn(vColumn: number|string|Column): Column;
			/**
			 * Removes a extension from the aggregation <code>extension</code>.
			 * @param vExtension The extension to remove or its index or id
			 * @return The removed extension or <code>null</code>
			 */
			removeExtension(vExtension: number|string|sap.ui.core.Control): sap.ui.core.Control;
			/**
			 * Removes a row from the aggregation <code>rows</code>.
			 * @param vRow The row to remove or its index or id
			 * @return The removed row or <code>null</code>
			 */
			removeRow(vRow: number|string|Row): Row;
			/**
			 * Removes the given selection interval from the selection. In case of single selection this call removeSelectedIndex with the "indexTo" value.
			 * @param iIndexFrom Index from which .
			 * @param iIndexTo Indices of the items that shall additionally be selected.
			 * @return 
			 */
			removeSelectionInterval(iIndexFrom: number, iIndexTo: number): Table;
			/**
			 * Add all rows to the selection.
			 * Please note that for server based models like OData the indices which are considered to be selected might not
			 * be available at the client yet. Calling getContextByIndex might not return a result but trigger a roundtrip
			 * to request this single entity.
			 * @return sap.ui.table.Table
			 */
			selectAll();
			/**
			 * Sets a new value for property <code>columnHeaderHeight</code>.
			 * 
			 * Height of the column header of the Table in pixel.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param iColumnHeaderHeight New value for property <code>columnHeaderHeight</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setColumnHeaderHeight(iColumnHeaderHeight: number): Table;
			/**
			 * Sets a new value for property <code>columnHeaderVisible</code>.
			 * 
			 * Flag whether the column header is visible or not.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bColumnHeaderVisible New value for property <code>columnHeaderVisible</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setColumnHeaderVisible(bColumnHeaderVisible: boolean): Table;
			/**
			 * Sets a new value for property <code>editable</code>.
			 * 
			 * Flag whether the controls of the Table are editable or not (currently this only controls the background color in certain themes!)
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bEditable New value for property <code>editable</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setEditable(bEditable: boolean): Table;
			/**
			 * Sets a new value for property <code>enableBusyIndicator</code>.
			 * 
			 * Set this parameter to true to make the table handle the busy indicator by its own.
			 * The table will switch to busy as soon as it scrolls into an unpaged area. This feature can only
			 * be used when the navigation mode is set to scrolling.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bEnableBusyIndicator New value for property <code>enableBusyIndicator</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setEnableBusyIndicator(bEnableBusyIndicator: boolean): Table;
			/**
			 * Sets a new value for property <code>enableCellFilter</code>.
			 * 
			 * Flag whether to enable or disable the context menu on cells to trigger a filtering with the cell value.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bEnableCellFilter New value for property <code>enableCellFilter</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setEnableCellFilter(bEnableCellFilter: boolean): Table;
			/**
			 * Sets a new value for property <code>enableColumnFreeze</code>.
			 * 
			 * Flag whether to show or hide the column menu item to freeze or unfreeze a column.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bEnableColumnFreeze New value for property <code>enableColumnFreeze</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setEnableColumnFreeze(bEnableColumnFreeze: boolean): Table;
			/**
			 * Sets a new value for property <code>enableColumnReordering</code>.
			 * 
			 * Flag to enable or disable column reordering
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bEnableColumnReordering New value for property <code>enableColumnReordering</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setEnableColumnReordering(bEnableColumnReordering: boolean): Table;
			/**
			 * Sets a new value for property <code>enableCustomFilter</code>.
			 * 
			 * Set this parameter to true to implement your own filter behaviour. Instead of the filter input box a button
			 * will be rendered for which' press event (customFilter) you can register an event handler.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bEnableCustomFilter New value for property <code>enableCustomFilter</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setEnableCustomFilter(bEnableCustomFilter: boolean): Table;
			/**
			 * Sets a new value for property <code>enableSelectAll</code>.
			 * 
			 * Specifies if a select all button should be displayed in the top left corner. This button is only displayed
			 * if the row selector is visible and the selection mode is set to any kind of multi selection.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bEnableSelectAll New value for property <code>enableSelectAll</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setEnableSelectAll(bEnableSelectAll: boolean): Table;
			/**
			 * Sets a new value for property <code>firstVisibleRow</code>.
			 * 
			 * First visible row.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>0</code>.
			 * @param iFirstVisibleRow New value for property <code>firstVisibleRow</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setFirstVisibleRow(iFirstVisibleRow: number): Table;
			/**
			 * Sets a new value for property <code>fixedBottomRowCount</code>.
			 * 
			 * Number of rows that are fix on the bottom. When you use a vertical scroll bar, only the rows which are not fixed, will scroll.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>0</code>.
			 * @param iFixedBottomRowCount New value for property <code>fixedBottomRowCount</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setFixedBottomRowCount(iFixedBottomRowCount: number): Table;
			/**
			 * Sets a new value for property <code>fixedColumnCount</code>.
			 * 
			 * Number of columns that are fix on the left. When you use a horizontal scroll bar, only
			 * the columns which are not fixed, will scroll. Fixed columns need a defined width for the feature to work.
			 * Please note that the aggregated width of all fixed columns must not exceed the table width since there
			 * will be no scrollbar for fixed columns.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>0</code>.
			 * @param iFixedColumnCount New value for property <code>fixedColumnCount</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setFixedColumnCount(iFixedColumnCount: number): Table;
			/**
			 * Sets a new value for property <code>fixedRowCount</code>.
			 * 
			 * Number of rows that are fix on the top. When you use a vertical scroll bar, only the rows which are not fixed, will scroll.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>0</code>.
			 * @param iFixedRowCount New value for property <code>fixedRowCount</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setFixedRowCount(iFixedRowCount: number): Table;
			/**
			 * Sets the aggregated <code>footer</code>.
			 * @param vFooter The footer to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setFooter(vFooter: sap.ui.core.Control|string): Table;
			/**
			 * Sets the associated <code>groupBy</code>.
			 * @param oGroupBy ID of an element which becomes the new target of this groupBy association; alternatively, an element instance may be given
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setGroupBy(oGroupBy: sap.ui.core.ID|Column): Table;
			/**
			 * Sets a new value for property <code>minAutoRowCount</code>.
			 * 
			 * This property is used to set the minimum count of visible rows when the property visibleRowCountMode is set to Auto or Interactive.
			 * For any other visibleRowCountMode, it is ignored.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>5</code>.
			 * @param iMinAutoRowCount New value for property <code>minAutoRowCount</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setMinAutoRowCount(iMinAutoRowCount: number): Table;
			/**
			 * Sets the aggregated <code>noData</code>.
			 * @param vNoData The noData to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setNoData(vNoData: sap.ui.core.Control|string): Table;
			/**
			 * Sets a new value for property <code>rowHeight</code>.
			 * 
			 * Height of a row of the Table in pixel.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param iRowHeight New value for property <code>rowHeight</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setRowHeight(iRowHeight: number): Table;
			/**
			 * Sets a new value for property <code>selectedIndex</code>.
			 * 
			 * Zero-based index of selected item. Index value for no selection is -1.
			 * When multi-selection is enabled and multiple items are selected, the method returns
			 * the lead selected item. Sets the zero-based index of the currently selected item. This method
			 * removes any previous selections. When the given index is invalid, the call is ignored.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>-1</code>.
			 * @param iSelectedIndex New value for property <code>selectedIndex</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSelectedIndex(iSelectedIndex: number): Table;
			/**
			 * Sets a new value for property <code>selectionBehavior</code>.
			 * 
			 * Selection behavior of the Table. This property defines whether the row selector is displayed and whether the row, the row selector or both
			 * can be clicked to select a row.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>RowSelector</code>.
			 * @param sSelectionBehavior New value for property <code>selectionBehavior</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSelectionBehavior(sSelectionBehavior: SelectionBehavior): Table;
			/**
			 * Sets the given selection interval as selection. In case of single selection the "indexTo" value will be used for as selected index.
			 * @param iIndexFrom Index from which .
			 * @param iIndexTo Indices of the items that shall additionally be selected.
			 * @return 
			 */
			setSelectionInterval(iIndexFrom: number, iIndexTo: number): Table;
			/**
			 * Sets the selection mode. The current selection is lost.
			 * @param sSelectionMode the selection mode, see sap.ui.table.SelectionMode
			 * @return a reference on the table for chaining
			 */
			setSelectionMode(sSelectionMode: string);
			/**
			 * Sets a new value for property <code>showColumnVisibilityMenu</code>.
			 * 
			 * Flag to show or hide the column visibility menu. This menu will get displayed in each
			 * generated column header menu. It allows to show or hide columns
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bShowColumnVisibilityMenu New value for property <code>showColumnVisibilityMenu</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setShowColumnVisibilityMenu(bShowColumnVisibilityMenu: boolean): Table;
			/**
			 * Sets a new value for property <code>showNoData</code>.
			 * 
			 * Flag whether to show the no data overlay or not once the table is empty. If set to false
			 * the table will just show a grid of empty cells
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bShowNoData New value for property <code>showNoData</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setShowNoData(bShowNoData: boolean): Table;
			/**
			 * Sets a new value for property <code>showOverlay</code>.
			 * 
			 * Setting this property to true will show an overlay on top of the Table content and users cannot click anymore on the Table content.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bShowOverlay New value for property <code>showOverlay</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setShowOverlay(bShowOverlay: boolean): Table;
			/**
			 * Sets the threshold value, which will be added to all data requests in
			 * case the Table is bound against an OData service.
			 */
			setThreshold();
			/**
			 * Sets the aggregated <code>title</code>.
			 * @param vTitle The title to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setTitle(vTitle: sap.ui.core.Control|string): Table;
			/**
			 * Sets the aggregated <code>toolbar</code>.
			 * @param oToolbar The toolbar to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setToolbar(oToolbar: sap.ui.core.Toolbar): Table;
			/**
			 * Sets a new tooltip for this object. The tooltip can either be a simple string
			 * (which in most cases will be rendered as the <code>title</code> attribute of this
			 * Element) or an instance of {@link sap.ui.core.TooltipBase}.
			 * 
			 * If a new tooltip is set, any previously set tooltip is deactivated.
			 * 
			 * Please note that tooltips are not rendered for the table. The tooltip property will be set
			 * but it won't effect the DOM.
			 * @param vTooltip 
			 * @return This-reference for chaining
			 */
			setTooltip(vTooltip: string|sap.ui.core.TooltipBase): Table;
			/**
			 * Sets a new tooltip for this object. The tooltip can either be a simple string
			 * (which in most cases will be rendered as the <code>title</code> attribute of this
			 * Element) or an instance of {@link sap.ui.core.TooltipBase}.
			 * 
			 * If a new tooltip is set, any previously set tooltip is deactivated.
			 * @note Overload from base type sap.ui.core.Element
			 * @param vTooltip 
			 */
			setTooltip(vTooltip: string|sap.ui.core.TooltipBase);
			/**
			 * Sets a new value for property <code>visibleRowCount</code>.
			 * 
			 * Number of visible rows of the table.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>10</code>.
			 * @param iVisibleRowCount New value for property <code>visibleRowCount</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setVisibleRowCount(iVisibleRowCount: number): Table;
			/**
			 * Sets a new value for property <code>visibleRowCountMode</code>.
			 * 
			 * This defines how the table handles the visible rows in the table. The default behavior is,
			 * that a fixed row count is defined. If you change it to auto the visibleRowCount property is
			 * changed by the table automatically. It will then adjust its maximum row count to the space it is
			 * allowed to cover (limited by the surrounding container) and its minimum row count to the value of
			 * the property minAutoRowCount (default value : 5) In manual mode the user can change
			 * the visibleRowCount interactively.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>Fixed</code>.
			 * @param sVisibleRowCountMode New value for property <code>visibleRowCountMode</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setVisibleRowCountMode(sVisibleRowCountMode: VisibleRowCountMode): Table;
			/**
			 * Sets a new value for property <code>width</code>.
			 * 
			 * Width of the Table.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>auto</code>.
			 * @param sWidth New value for property <code>width</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setWidth(sWidth: sap.ui.core.CSSSize): Table;
			/**
			 * sorts the given column ascending or descending
			 * @param oColumn column to be sorted
			 * @param oSortOrder sort order of the column (if undefined the default will be ascending)
			 * @param bAdd Set to true to add the new sort criterion to the existing sort criteria
			 * @return 
			 */
			sort(oColumn: Column, oSortOrder: SortOrder, bAdd: boolean): Table;
			/**
			 * Unbinds aggregation <code>columns</code> from model data.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			unbindColumns(): Table;
			/**
			 * Unbinds aggregation <code>rows</code> from model data.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			unbindRows(): Table;
		}
	
		class TablePersoController extends sap.ui.base.ManagedObject {
			/**
			 * Constructor for a new TablePersoController.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.table.TablePersoControllerMetadata);
			/**
			 * Constructor for a new TablePersoController.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.ui.table.TablePersoController with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets current value of property <code>autoSave</code>.
			 * 
			 * Auto save state
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>autoSave</code>
			 */
			getAutoSave(): boolean;
			/**
			 * Gets current value of property <code>customDataKey</code>.
			 * 
			 * By defining a custom data key the <code>TablePersoController</code>
			 * will try to get the key for saving the perso data from the custom
			 * data of the Table and Column instead of creating it by concatenating
			 * the ID of the Table and the Column. Basically this will be more stable
			 * than using the auto IDs.
			 * 
			 * Default value is <code>persoKey</code>.
			 * @return Value of property <code>customDataKey</code>
			 */
			getCustomDataKey(): string;
			/**
			 * Gets current value of property <code>persoService</code>.
			 * 
			 * Personalization Service object. Needs to have the following methods:
			 * <ul>
			 * <li>getPersData() : <code>jQuery Promise</code> (http://api.jquery.com/promise/)</li>
			 * <li>setPersData(oBundle) : <code>jQuery Promise</code> (http://api.jquery.com/promise/)</li>
			 * <li>delPersData() : <code>jQuery Promise</code> (http://api.jquery.com/promise/)</li>
			 * </ul>
			 * @return Value of property <code>persoService</code>
			 */
			getPersoService(): any;
			/**
			 * ID of the element which is the current target of the association <code>table</code>, or <code>null</code>.
			 * @return 
			 */
			getTable(): sap.ui.core.ID;
			/**
			 * Opens the personalization dialog for the Table to modify the visibility and
			 * the order of the columns.
			 * 
			 * <i>Using this functionality will require to load the sap.m library because the
			 * personalization dialog is only available in this library for now.</i>
			 * @param mSettings 
			 */
			openDialog(mSettings: any);
			/**
			 * Refresh the personalizations (reloads data from service).
			 * @return <code>jQuery Promise</code> which is resolved once the refresh is finished
			 */
			refresh(): any;
			/**
			 * Saves the current personalization state.
			 * @return <code>jQuery Promise</code> which is resolved once the save is finished
			 */
			savePersonalizations(): any;
			/**
			 * Sets a new value for property <code>autoSave</code>.
			 * 
			 * Auto save state
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bAutoSave New value for property <code>autoSave</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setAutoSave(bAutoSave: boolean): TablePersoController;
			/**
			 * Sets a new value for property <code>customDataKey</code>.
			 * 
			 * By defining a custom data key the <code>TablePersoController</code>
			 * will try to get the key for saving the perso data from the custom
			 * data of the Table and Column instead of creating it by concatenating
			 * the ID of the Table and the Column. Basically this will be more stable
			 * than using the auto IDs.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>persoKey</code>.
			 * @param sCustomDataKey New value for property <code>customDataKey</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setCustomDataKey(sCustomDataKey: string): TablePersoController;
			/**
			 * Sets a new value for property <code>persoService</code>.
			 * 
			 * Personalization Service object. Needs to have the following methods:
			 * <ul>
			 * <li>getPersData() : <code>jQuery Promise</code> (http://api.jquery.com/promise/)</li>
			 * <li>setPersData(oBundle) : <code>jQuery Promise</code> (http://api.jquery.com/promise/)</li>
			 * <li>delPersData() : <code>jQuery Promise</code> (http://api.jquery.com/promise/)</li>
			 * </ul>
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param oPersoService New value for property <code>persoService</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setPersoService(oPersoService: any): TablePersoController;
			/**
			 * Sets the associated <code>table</code>.
			 * @param oTable ID of an element which becomes the new target of this table association; alternatively, an element instance may be given
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setTable(oTable: sap.ui.core.ID|Table): TablePersoController;
		}
	
		class TreeTable extends Table {
			/**
			 * Constructor for a new TreeTable.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.table.TreeTableMetadata);
			/**
			 * Constructor for a new TreeTable.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Marks a range of tree nodes as selected, starting with iFromIndex going to iToIndex.
			 * The TreeNodes are referenced via their absolute row index.
			 * Please be aware, that the absolute row index only applies to the the tree which is visualized by the TreeTable.
			 * Invisible nodes (collapsed child nodes) will not be regarded.
			 * 
			 * Please also take notice of the fact, that "addSelectionInterval" does not change any other selection.
			 * To override the current selection, please use "setSelctionInterval" or for a single entry use "setSelectedIndex".
			 * @param iFromIndex The starting index of the range which will be selected.
			 * @param iToIndex The starting index of the range which will be selected.
			 * @return a reference on the TreeTable control, can be used for chaining
			 */
			addSelectionInterval(iFromIndex: number, iToIndex: number): TreeTable;
			/**
			 * Adds the given selection interval to the selection. In case of single selection the "indexTo" value will be used for as selected index.
			 * @note Overload from base type sap.ui.table.Table
			 * @param iIndexFrom Index from which .
			 * @param iIndexTo Indices of the items that shall additionally be selected.
			 * @return 
			 */
			addSelectionInterval(iIndexFrom: number, iIndexTo: number): Table;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>toggleOpenState</code> event of this <code>sap.ui.table.TreeTable</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.table.TreeTable</code> itself.
			 * 
			 * fired when a node has been expanded or collapsed (only available in hierachical mode)
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.table.TreeTable</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachToggleOpenState(oData: any, fnFunction: any, oListener?: any): TreeTable;
			/**
			 * Clears the complete selection (all tree table rows/nodes will lose their selection)
			 * @return a reference on the TreeTable control, can be used for chaining
			 */
			clearSelection(): TreeTable;
			/**
			 * Removes complete selection.
			 * @note Overload from base type sap.ui.table.Table
			 * @return 
			 */
			clearSelection(): Table;
			/**
			 * collapses the row for the given row index
			 * @param iRowIndex index of the row to collapse
			 * @return a reference on the TreeTable control, can be used for chaining
			 */
			collapse(iRowIndex: number): TreeTable;
			/**
			 * Collapses all nodes (and lower if collapseRecursive is activated)
			 * @return a reference on the TreeTable control, can be used for chaining
			 */
			collapseAll(): TreeTable;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>toggleOpenState</code> event of this <code>sap.ui.table.TreeTable</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachToggleOpenState(fnFunction: any, oListener: any): TreeTable;
			/**
			 * expands the row for the given row index
			 * @param iRowIndex index of the row to expand
			 * @return a reference on the TreeTable control, can be used for chaining
			 */
			expand(iRowIndex: number): TreeTable;
			/**
			 * Expands all nodes starting from the root level to the given level 'iLevel'.
			 * 
			 * Only supported with ODataModel v2, when running in OperationMode.Client or OperationMode.Auto.
			 * Fully supported for <code>sap.ui.model.ClientTreeBinding</code>, e.g. if you are using a <code>sap.ui.model.json.JSONModel</code>.
			 * 
			 * Please also see <code>sap.ui.model.odata.OperationMode</code>.
			 * @param iLevel the level to which the trees shall be expanded
			 * @return a reference on the TreeTable control, can be used for chaining
			 */
			expandToLevel(iLevel: number): TreeTable;
			/**
			 * Creates a new subclass of class sap.ui.table.TreeTable with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.table.Table.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Fires event <code>toggleOpenState</code> to attached listeners.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>rowIndex</code> of type <code>int</code>index of the expanded/collapsed row</li>
			 * <li><code>rowContext</code> of type <code>object</code>binding context of the selected row</li>
			 * <li><code>expanded</code> of type <code>boolean</code>flag whether the node has been expanded or collapsed</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireToggleOpenState(mArguments?: any): TreeTable;
			/**
			 * Gets current value of property <code>collapseRecursive</code>.
			 * 
			 * Setting collapseRecursive to true means, that when collapsing a node all subsequent child nodes will also be collapsed.
			 * This property is only supported with sap.ui.model.odata.v2.ODataModel
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>collapseRecursive</code>
			 */
			getCollapseRecursive(): boolean;
			/**
			 * Gets current value of property <code>expandFirstLevel</code>.
			 * 
			 * Flag to enable or disable expanding of first level.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>expandFirstLevel</code>
			 */
			getExpandFirstLevel(): boolean;
			/**
			 * Gets current value of property <code>groupHeaderProperty</code>.
			 * 
			 * The property name of the rows data which will be displayed as a group header if the group mode is enabled
			 * @return Value of property <code>groupHeaderProperty</code>
			 */
			getGroupHeaderProperty(): string;
			/**
			 * Gets current value of property <code>rootLevel</code>.
			 * 
			 * The root level is the level of the topmost tree nodes, which will be used as an entry point for OData services.
			 * This property is only supported when the TreeTable uses an underlying odata services with hierarchy annotations.
			 * This property is only supported with sap.ui.model.odata.v2.ODataModel
			 * The hierarchy annotations may also be provided locally as a parameter for the ODataTreeBinding.
			 * 
			 * Default value is <code>0</code>.
			 * @return Value of property <code>rootLevel</code>
			 */
			getRootLevel(): number;
			/**
			 * Retrieves the lead selection index. The lead selection index is, among other things, used to determine the
			 * start/end of a selection range, when using Shift-Click to select multiple entries at once.
			 * @return an array containing all selected indices (ascending ordered integers)
			 */
			getSelectedIndex(): number[];
			/**
			 * Gets current value of property <code>selectedIndex</code>.
			 * 
			 * Zero-based index of selected item. Index value for no selection is -1.
			 * When multi-selection is enabled and multiple items are selected, the method returns
			 * the lead selected item. Sets the zero-based index of the currently selected item. This method
			 * removes any previous selections. When the given index is invalid, the call is ignored.
			 * 
			 * Default value is <code>-1</code>.
			 * @note Overload from base type sap.ui.table.Table
			 * @return Value of property <code>selectedIndex</code>
			 */
			getSelectedIndex(): number;
			/**
			 * Returns an array containing the row indices of all selected tree nodes (ordered ascending).
			 * 
			 * Please be aware of the following:
			 * Due to performance/network traffic reasons, the getSelectedIndices function returns only all indices
			 * of actually selected rows/tree nodes. Unknown rows/nodes (as in "not yet loaded" to the client), will not be
			 * returned.
			 * @return an array containing all selected indices
			 */
			getSelectedIndices(): number[];
			/**
			 * Zero-based indices of selected items, wrapped in an array. An empty array means "no selection".
			 * @note Overload from base type sap.ui.table.Table
			 * @return int[]
			 */
			getSelectedIndices();
			/**
			 * Gets current value of property <code>useGroupMode</code>.
			 * 
			 * If group mode is enable nodes with subitems are rendered as if they were group headers.
			 * This can be used to do the grouping for an OData service on the backend and visualize this in a table.
			 * This mode only makes sense if the tree has a depth of exacly 1 (group headers and entries)
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>useGroupMode</code>
			 */
			getUseGroupMode(): boolean;
			/**
			 * Returns whether the row is expanded or collapsed.
			 * @param iRowIndex index of the row to check
			 * @return true if the node at "iRowIndex" is expanded, false otherwise (meaning it is collapsed)
			 */
			isExpanded(iRowIndex: number): boolean;
			/**
			 * Checks if the row at the given index is selected.
			 * @param iRowIndex The row index for which the selection state should be retrieved
			 * @return true if the index is selected, false otherwise
			 */
			isIndexSelected(iRowIndex: number): boolean;
			/**
			 * Returns whether the given index is selected.
			 * @note Overload from base type sap.ui.table.Table
			 * @param iIndex Index which is checked for selection state.
			 * @return 
			 */
			isIndexSelected(iIndex: number): boolean;
			/**
			 * All rows/tree nodes inside the range (including boundaries) will be deselected.
			 * Tree nodes are referenced with theit absolute row index inside the tree-
			 * Please be aware, that the absolute row index only applies to the the tree which is visualized by the TreeTable.
			 * Invisible nodes (collapsed child nodes) will not be regarded.
			 * @param iFromIndex The starting index of the range which will be deselected.
			 * @param iToIndex The starting index of the range which will be deselected.
			 * @return a reference on the TreeTable control, can be used for chaining
			 */
			removeSelectionInterval(iFromIndex: number, iToIndex: number): TreeTable;
			/**
			 * Removes the given selection interval from the selection. In case of single selection this call removeSelectedIndex with the "indexTo" value.
			 * @note Overload from base type sap.ui.table.Table
			 * @param iIndexFrom Index from which .
			 * @param iIndexTo Indices of the items that shall additionally be selected.
			 * @return 
			 */
			removeSelectionInterval(iIndexFrom: number, iIndexTo: number): Table;
			/**
			 * Selects all available nodes/rows.
			 * 
			 * Explanation of the SelectAll function and what to expect from its behavior:
			 * All rows/tree nodes locally stored on the client are selected.
			 * In addition all subsequent rows/tree nodes, which will be paged into view are also immediatly selected.
			 * However, due to obvious performance/network traffic reasons, the SelectAll function will NOT retrieve any data from the backend.
			 * @return a reference on the TreeTable control, can be used for chaining
			 */
			selectAll(): TreeTable;
			/**
			 * Add all rows to the selection.
			 * Please note that for server based models like OData the indices which are considered to be selected might not
			 * be available at the client yet. Calling getContextByIndex might not return a result but trigger a roundtrip
			 * to request this single entity.
			 * @note Overload from base type sap.ui.table.Table
			 * @return sap.ui.table.Table
			 */
			selectAll();
			/**
			 * Sets a new value for property <code>expandFirstLevel</code>.
			 * 
			 * Flag to enable or disable expanding of first level.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bExpandFirstLevel New value for property <code>expandFirstLevel</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setExpandFirstLevel(bExpandFirstLevel: boolean): TreeTable;
			/**
			 * Setter for property <code>fixedRowCount</code>.
			 * 
			 * <b>This property is not supportd for the TreeTable and will be ignored!</b>
			 * 
			 * Default value is <code>0</code>
			 * @param iFixedRowCount new value for property <code>fixedRowCount</code>
			 * @return <code>this</code> to allow method chaining
			 */
			setFixedRowCount(iFixedRowCount: number): TreeTable;
			/**
			 * Sets a new value for property <code>fixedRowCount</code>.
			 * 
			 * Number of rows that are fix on the top. When you use a vertical scroll bar, only the rows which are not fixed, will scroll.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>0</code>.
			 * @note Overload from base type sap.ui.table.Table
			 * @param iFixedRowCount New value for property <code>fixedRowCount</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setFixedRowCount(iFixedRowCount: number): Table;
			/**
			 * Sets a new value for property <code>groupHeaderProperty</code>.
			 * 
			 * The property name of the rows data which will be displayed as a group header if the group mode is enabled
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sGroupHeaderProperty New value for property <code>groupHeaderProperty</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setGroupHeaderProperty(sGroupHeaderProperty: string): TreeTable;
			/**
			 * Overriden from Table.js base class.
			 * In a TreeTable you can only select indices, which correspond to the currently visualized tree.
			 * Invisible tree nodes (e.g. collapsed child nodes) can not be selected via Index, because they do not
			 * correspond to a TreeTable row.
			 * @param iRowIndex The row index which will be selected (if existing)
			 * @return a reference on the TreeTable control, can be used for chaining
			 */
			setSelectedIndex(iRowIndex: number): TreeTable;
			/**
			 * Sets a new value for property <code>selectedIndex</code>.
			 * 
			 * Zero-based index of selected item. Index value for no selection is -1.
			 * When multi-selection is enabled and multiple items are selected, the method returns
			 * the lead selected item. Sets the zero-based index of the currently selected item. This method
			 * removes any previous selections. When the given index is invalid, the call is ignored.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>-1</code>.
			 * @note Overload from base type sap.ui.table.Table
			 * @param iSelectedIndex New value for property <code>selectedIndex</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSelectedIndex(iSelectedIndex: number): Table;
			/**
			 * Sets the selection of the TreeTable to the given range (including boundaries).
			 * Beware: The previous selection will be lost/overriden. If this is not wanted, please use "addSelectionInterval" and
			 * "removeSelectionIntervall".
			 * @param iFromIndex the start index of the selection range
			 * @param iToIndex the end index of the selection range
			 * @return a reference on the TreeTable control, can be used for chaining
			 */
			setSelectionInterval(iFromIndex: number, iToIndex: number): TreeTable;
			/**
			 * Sets the given selection interval as selection. In case of single selection the "indexTo" value will be used for as selected index.
			 * @note Overload from base type sap.ui.table.Table
			 * @param iIndexFrom Index from which .
			 * @param iIndexTo Indices of the items that shall additionally be selected.
			 * @return 
			 */
			setSelectionInterval(iIndexFrom: number, iIndexTo: number): Table;
			/**
			 * Sets the selection mode. The current selection is lost.
			 * @param sSelectionMode the selection mode, see sap.ui.table.SelectionMode
			 * @return a reference on the table for chaining
			 */
			setSelectionMode(sSelectionMode: string);
			/**
			 * Sets a new value for property <code>useGroupMode</code>.
			 * 
			 * If group mode is enable nodes with subitems are rendered as if they were group headers.
			 * This can be used to do the grouping for an OData service on the backend and visualize this in a table.
			 * This mode only makes sense if the tree has a depth of exacly 1 (group headers and entries)
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bUseGroupMode New value for property <code>useGroupMode</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setUseGroupMode(bUseGroupMode: boolean): TreeTable;
		}
	
		class VisibleRowCountMode {
			/**
			 * The table automatically fills the height of the surrounding container.
			 * The visibleRowCount property is automatically changed accordingly.
			 * All rows need the same height, otherwise the auto mode doesn't always work as expected.
			 * The height of all siblings within the same layout container of the table will be subtracted from the available height.
			 * For performance reasons, it is recommended to add no siblings in the table's parent container.
			 */
			static Auto: string;
			/**
			 * The table always has as many rows as defined in the visibleRowCount property.
			 */
			static Fixed: string;
			/**
			 * After rendering the table has as many rows as defined in visibleRowCount property. The user is able to change the visible rows by moving a grip with the mouse. The visibleRowCount property is changed accordingly.
			 */
			static Interactive: string;
		}
	
		interface AnalyticalColumnMetadata extends sap.ui.table.ColumnMetadata {
			/**
			 * Defines the primary model property which is used inside the Column. In case of the analytical extension this means the property which is grouped by for dimensions or the property which is summed for measures.
			 */
			leadingProperty?: string;
			/**
			 * If defined a sum for this column is calculated
			 * @default false
			 */
			summed?: boolean;
			/**
			 * Specifies that the dimension referred to by the column shall be included in the granularity of the data result. It allows a finer distinction between a visible/grouped/(included)inResult column.
			 * @default false
			 */
			inResult?: boolean;
			/**
			 * Specifies whether the column is displayed within the table even if it is grouped or not. A grouped column has the same value for every rows within the group.
			 * @default false
			 */
			showIfGrouped?: boolean;
			/**
			 * If the column is grouped, this formatter is used to format the value in the group header
			 */
			groupHeaderFormatter?: any;
		}
	
		interface AnalyticalTableMetadata extends sap.ui.table.TableMetadata {
			/**
			 * Specifies if the total values should be displayed in the group headers or on bottom of the row. Does not affact the total sum.
			 * @default false
			 */
			sumOnTop?: boolean;
			/**
			 * Number of levels, which should be opened initially (on first load of data).
			 * @default 0
			 */
			numberOfExpandedLevels?: number;
			/**
			 * The kind of auto expansion algorithm, e.g. optimised filter conditions, per level requests, ...
			 * sap.ui.table.TreeAutoExpandMode
			 * @default Bundled
			 */
			autoExpandMode?: string;
			/**
			 * Functions which is used to sort the column visibility menu entries e.g.: function(ColumnA, ColumnB) { return 0 = equals, <0 lower, >0 greater }; Other values than functions will be ignored.
			 */
			columnVisibilityMenuSorter?: any;
			/**
			 * Setting collapseRecursive to true means, that when collapsing a node all subsequent child nodes will also be collapsed.
			 * @default true
			 */
			collapseRecursive?: boolean;
		}
	
		interface ColumnMetadata {
			/**
			 * Width of the column. Works only with px/em/rem values. Em are handled like rem values.
			 */
			width?: sap.ui.core.CSSSize;
			/**
			 * If the table is wider than the sum of widths of the visible columns, the columns will be
			 * resized proportionally to their widths that were set originally. If set to false, the column will be displayed in the
			 * original width. If all columns are set to not be flexible, an extra "dummy" column will be
			 * created at the end of the table.
			 * @default true
			 */
			flexible?: boolean;
			/**
			 * If set to true, the column can be resized either using the resize-handle (by mouse) or using
			 * the keyboard (SHIFT + Left/Right Arrow keys)
			 * @default true
			 */
			resizable?: boolean;
			/**
			 * Horizontal alignment of the column content. Controls with a text align do not inherit
			 * the horizontal alignment. You have to set the text align directly on the template.
			 * @default Begin
			 */
			hAlign?: sap.ui.core.HorizontalAlign;
			/**
			 * Indicates if the column is sorted. This property only controls if a sort indicator is displayed in the
			 * column header - it does not trigger the sort function. The column has to be sorted by calling <code>Column.sort()</code>
			 * @default false
			 */
			sorted?: boolean;
			/**
			 * This property indicates the sort direction (Ascending or Descending). The corresponding icon will be
			 * rendered if the property <code>sorted</code> is <code>true</code>
			 * @default Ascending
			 */
			sortOrder?: sap.ui.table.SortOrder;
			/**
			 * Specifies the binding property on which the column will sort.
			 * Since the column template may have composite bindings, it's not possible to figure out on which binding
			 * property the sort shall be applied. Therefore the binding property for sorting must be specified.
			 * For example, if the first name and last name are displayed in the same column, only one of the two can be defined as
			 * <code>sortProperty</code>.
			 * 
			 * A column menu entry for sorting can only be generated if the <code>sortProperty</code> is set.
			 */
			sortProperty?: string;
			/**
			 * Indicates if the column is filtered. This property only controls if a filter indicator is displayed in the
			 * column header - it does not trigger the filter function. The column has to be filtered by calling <code>Column.sort()</code>
			 * @default false
			 */
			filtered?: boolean;
			/**
			 * Specifies the binding property on which the column shall be filtered.
			 * Since the column template may have composite bindings, it's not possible to figure out on which binding
			 * property the filter shall be applied. Therefore the binding property for filtering must be specified.
			 * For example, if the first name and last name are displayed in the same column, only one of the two can be defined as
			 * <code>filterProperty</code>.
			 * 
			 * A column menu entry for filtering can only be generated if the <code>filterProperty</code> is set. The
			 * default menu entry is a text input field.
			 */
			filterProperty?: string;
			/**
			 * Specifies the value of the filter as string (will be converted into the proper data type). It is possible
			 * to provide a filterOperator as string, as shown here:
			 * <pre>
			 * &gt; 50
			 * &lt; 100
			 * &gt;= 150
			 * &lt;= 200
			 * = 250
			 * != 300
			 * *something    ends with
			 * something*    starts with
			 * *something*   contains
			 * some..thing   between
			 * 50..100       between
			 * </pre>
			 */
			filterValue?: string;
			/**
			 * Filter operator to use when filtering this column.
			 */
			filterOperator?: string;
			/**
			 * If this property is set, the default filter operator of the column is overridden.
			 * By default <code>Contains</code> is used for string and <code>EQ</code> for other types. A valid <code>sap.ui.model.FilterOperator</code> needs to be passed.
			 */
			defaultFilterOperator?: string;
			/**
			 * Type of Filter. This is used to transform the search term to the specified type,
			 * to make sure that the right columns are displayed. This should be the same as defined
			 * in binding for this column. As an alternative you can pass a function which does the conversion.
			 * The function receives the entered filter value as parameter and returns the proper
			 * value for the filter expression. Another option is to pass the class name of the type,
			 * e.g.: <code>sap.ui.model.type.Date</code> or an expression similar to the binding syntax,
			 * e.g.: <code>"\{type: 'sap.ui.model.type.Date', formatOptions: \{UTC: true\}, constraints: {} \}"</code>.
			 * Here the escaping is mandatory to avoid handling by the binding parser.
			 * By default the filter type is <code>sap.ui.model.type.String</code>.
			 */
			filterType?: any;
			/**
			 * Indicates if the column is grouped.
			 * @default false
			 */
			grouped?: boolean;
			/**
			 * Invisible controls are not rendered.
			 * @default true
			 */
			visible?: boolean;
			/**
			 * The name of the column which is used in the column visibility menu item as text.
			 * If not set as a fallback the column menu tries to get the text from the nested Label.
			 */
			name?: string;
			/**
			 * Defines if the filter menu entry is displayed
			 * @default true
			 */
			showFilterMenuEntry?: boolean;
			/**
			 * Defines if the sort menu entries are displayed
			 * @default true
			 */
			showSortMenuEntry?: boolean;
			/**
			 * If this property is set, a span is applied for the header. When moving columns, all columns
			 * which are part of the header will be moved. The <code>headerSpan</code> can be either an integer or an array of
			 * integers (if you use the multi header feature of the table). If you only specify an integer, this span is
			 * applied for all header rows, with multiple integers you can specify a separate span for each header row.
			 * @default 1
			 */
			headerSpan?: any;
			/**
			 * Enables auto-resizing of the column on double-clicking the resizer. The width is determined on the widest
			 * currently displayed content. It does not consider rows which are currently not scrolled into view.
			 * Currently only implemented to work with the following controls:
			 * <code>sap.m.Text, sap.m.Label, sap.m.Link, sap.m.Input,
			 * sap.ui.commons.TextView, sap.ui.commons.Label, sap.ui.commons.Link and sap.ui.commons.TextField,
			 * sap.ui.commons.Checkbox, sap.m.Checkbox</code>
			 * @default false
			 */
			autoResizable?: boolean;
		}
	
		interface TableMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * Width of the Table.
			 * @default auto
			 */
			width?: sap.ui.core.CSSSize;
			/**
			 * Height of a row of the Table in pixel.
			 */
			rowHeight?: number;
			/**
			 * Height of the column header of the Table in pixel.
			 */
			columnHeaderHeight?: number;
			/**
			 * Flag whether the column header is visible or not.
			 * @default true
			 */
			columnHeaderVisible?: boolean;
			/**
			 * Number of visible rows of the table.
			 * @default 10
			 */
			visibleRowCount?: number;
			/**
			 * First visible row.
			 * @default 0
			 */
			firstVisibleRow?: number;
			/**
			 * Selection mode of the Table. This property controls whether single or multiple rows can be selected and
			 * how the selection can be extended. It may also influence the visual appearance.
			 * @default MultiToggle
			 */
			selectionMode?: sap.ui.table.SelectionMode;
			/**
			 * Selection behavior of the Table. This property defines whether the row selector is displayed and whether the row, the row selector or both
			 * can be clicked to select a row.
			 * @default RowSelector
			 */
			selectionBehavior?: sap.ui.table.SelectionBehavior;
			/**
			 * Zero-based index of selected item. Index value for no selection is -1.
			 * When multi-selection is enabled and multiple items are selected, the method returns
			 * the lead selected item. Sets the zero-based index of the currently selected item. This method
			 * removes any previous selections. When the given index is invalid, the call is ignored.
			 * @default -1
			 */
			selectedIndex?: number;
			/**
			 * Flag whether the controls of the Table are editable or not (currently this only controls the background color in certain themes!)
			 * @default true
			 */
			editable?: boolean;
			/**
			 * The <code>threshold</code> defines how many additional (not yet visible records) shall be pre-fetched to enable smooth
			 * scrolling. The threshold is always added to the <code>visibleRowCount</code>. If the <code>visibleRowCount</code> is 10 and the
			 * <code>threshold</code> is 100, there will be 110 records fetched with the initial load.
			 * If the <code>threshold</code> is lower than the <code>visibleRowCount</code>, the <code>visibleRowCount</code> will be used as
			 * the <code>threshold</code>. If the value is 0 then the thresholding is disabled.
			 * @default 100
			 */
			threshold?: number;
			/**
			 * Flag to enable or disable column reordering
			 * @default true
			 */
			enableColumnReordering?: boolean;
			/**
			 * Flag to enable or disable column grouping. (experimental!)
			 * @default false
			 */
			enableGrouping?: boolean;
			/**
			 * Flag to show or hide the column visibility menu. This menu will get displayed in each
			 * generated column header menu. It allows to show or hide columns
			 * @default false
			 */
			showColumnVisibilityMenu?: boolean;
			/**
			 * Flag whether to show the no data overlay or not once the table is empty. If set to false
			 * the table will just show a grid of empty cells
			 * @default true
			 */
			showNoData?: boolean;
			/**
			 * This defines how the table handles the visible rows in the table. The default behavior is,
			 * that a fixed row count is defined. If you change it to auto the visibleRowCount property is
			 * changed by the table automatically. It will then adjust its maximum row count to the space it is
			 * allowed to cover (limited by the surrounding container) and its minimum row count to the value of
			 * the property minAutoRowCount (default value : 5) In manual mode the user can change
			 * the visibleRowCount interactively.
			 * @default Fixed
			 */
			visibleRowCountMode?: sap.ui.table.VisibleRowCountMode;
			/**
			 * This property is used to set the minimum count of visible rows when the property visibleRowCountMode is set to Auto or Interactive.
			 * For any other visibleRowCountMode, it is ignored.
			 * @default 5
			 */
			minAutoRowCount?: number;
			/**
			 * Number of columns that are fix on the left. When you use a horizontal scroll bar, only
			 * the columns which are not fixed, will scroll. Fixed columns need a defined width for the feature to work.
			 * Please note that the aggregated width of all fixed columns must not exceed the table width since there
			 * will be no scrollbar for fixed columns.
			 * @default 0
			 */
			fixedColumnCount?: number;
			/**
			 * Number of rows that are fix on the top. When you use a vertical scroll bar, only the rows which are not fixed, will scroll.
			 * @default 0
			 */
			fixedRowCount?: number;
			/**
			 * Number of rows that are fix on the bottom. When you use a vertical scroll bar, only the rows which are not fixed, will scroll.
			 * @default 0
			 */
			fixedBottomRowCount?: number;
			/**
			 * Flag whether to show or hide the column menu item to freeze or unfreeze a column.
			 * @default false
			 */
			enableColumnFreeze?: boolean;
			/**
			 * Flag whether to enable or disable the context menu on cells to trigger a filtering with the cell value.
			 * @default false
			 */
			enableCellFilter?: boolean;
			/**
			 * Setting this property to true will show an overlay on top of the Table content and users cannot click anymore on the Table content.
			 * @default false
			 */
			showOverlay?: boolean;
			/**
			 * Specifies if a select all button should be displayed in the top left corner. This button is only displayed
			 * if the row selector is visible and the selection mode is set to any kind of multi selection.
			 * @default true
			 */
			enableSelectAll?: boolean;
			/**
			 * Set this parameter to true to implement your own filter behaviour. Instead of the filter input box a button
			 * will be rendered for which' press event (customFilter) you can register an event handler.
			 * @default false
			 */
			enableCustomFilter?: boolean;
			/**
			 * Set this parameter to true to make the table handle the busy indicator by its own.
			 * The table will switch to busy as soon as it scrolls into an unpaged area. This feature can only
			 * be used when the navigation mode is set to scrolling.
			 * @default false
			 */
			enableBusyIndicator?: boolean;
		}
	
		interface TablePersoControllerMetadata {
			/**
			 * Auto save state
			 * @default true
			 */
			autoSave?: boolean;
			/**
			 * Personalization Service object. Needs to have the following methods:
			 * <ul>
			 * <li>getPersData() : <code>jQuery Promise</code> (http://api.jquery.com/promise/)</li>
			 * <li>setPersData(oBundle) : <code>jQuery Promise</code> (http://api.jquery.com/promise/)</li>
			 * <li>delPersData() : <code>jQuery Promise</code> (http://api.jquery.com/promise/)</li>
			 * </ul>
			 */
			persoService?: any;
			/**
			 * By defining a custom data key the <code>TablePersoController</code>
			 * will try to get the key for saving the perso data from the custom
			 * data of the Table and Column instead of creating it by concatenating
			 * the ID of the Table and the Column. Basically this will be more stable
			 * than using the auto IDs.
			 * @default persoKey
			 */
			customDataKey?: string;
		}
	
		interface TreeTableMetadata extends sap.ui.table.TableMetadata {
			/**
			 * Flag to enable or disable expanding of first level.
			 * @default false
			 */
			expandFirstLevel?: boolean;
			/**
			 * If group mode is enable nodes with subitems are rendered as if they were group headers.
			 * This can be used to do the grouping for an OData service on the backend and visualize this in a table.
			 * This mode only makes sense if the tree has a depth of exacly 1 (group headers and entries)
			 * @default false
			 */
			useGroupMode?: boolean;
			/**
			 * The property name of the rows data which will be displayed as a group header if the group mode is enabled
			 */
			groupHeaderProperty?: string;
			/**
			 * Setting collapseRecursive to true means, that when collapsing a node all subsequent child nodes will also be collapsed.
			 * This property is only supported with sap.ui.model.odata.v2.ODataModel
			 * @default true
			 */
			collapseRecursive?: boolean;
			/**
			 * The root level is the level of the topmost tree nodes, which will be used as an entry point for OData services.
			 * This property is only supported when the TreeTable uses an underlying odata services with hierarchy annotations.
			 * This property is only supported with sap.ui.model.odata.v2.ODataModel
			 * The hierarchy annotations may also be provided locally as a parameter for the ODataTreeBinding.
			 * @default 0
			 */
			rootLevel?: number;
		}
	}

	/**
	 * Unified controls intended for both, mobile and desktop scenarios
	 */
	namespace unified {
	
		/**
		 * Calendar Utility Class
		 */
		namespace calendar {
		
			class DatesRow extends Month {
				/**
				 * Constructor for a new calendar/DatesRow.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: sap.ui.unified.calendar.DatesRowMetadata);
				/**
				 * Constructor for a new calendar/DatesRow.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @note Any overloads to support not documented metadata
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * displays the a given date without setting the focus
				 * 
				 * Property <code>date</code> date to be focused or displayed. It must be in the displayed date range
				 * beginning with <code>startDate</code> and <code>days</code> days
				 * So set this properties before setting the date.
				 * @param oDate JavaScript date object for focused date.
				 * @return <code>this</code> to allow method chaining
				 */
				displayDate(oDate: any): DatesRow;
				/**
				 * displays the month of a given date without setting the focus
				 * @note Overload from base type sap.ui.unified.calendar.Month
				 * @param oDate JavaScript date object for focused date.
				 * @return <code>this</code> to allow method chaining
				 */
				displayDate(oDate: any): Month;
				/**
				 * Creates a new subclass of class sap.ui.unified.calendar.DatesRow with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.unified.calendar.Month.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Gets current value of property <code>days</code>.
				 * 
				 * number of days displayed
				 * 
				 * Default value is <code>7</code>.
				 * @return Value of property <code>days</code>
				 */
				getDays(): number;
				/**
				 * Gets current value of property <code>showDayNamesLine</code>.
				 * 
				 * If set the day names are shown in a separate line.
				 * If not set the day names are shown inside the single days.
				 * 
				 * Default value is <code>true</code>.
				 * @return Value of property <code>showDayNamesLine</code>
				 */
				getShowDayNamesLine(): boolean;
				/**
				 * Gets current value of property <code>startDate</code>.
				 * 
				 * Start date of the row
				 * If in rendering phase the date property is not in the range startDate + days,
				 * it is set to the start date
				 * So after setting the start date the date should be set to be in the range of the start date
				 * @return Value of property <code>startDate</code>
				 */
				getStartDate(): any;
				/**
				 * Setter for property <code>date</code>.
				 * 
				 * Property <code>date</code> date to be focused or displayed. It must be in the displayed date range
				 * beginning with <code>startDate</code> and <code>days</code> days
				 * So set this properties before setting the date.
				 * @param oDate JavaScript date object for start date.
				 * @return <code>this</code> to allow method chaining
				 */
				setDate(oDate: any): DatesRow;
				/**
				 * Sets a new value for property <code>date</code>.
				 * 
				 * the month including this date is rendered and this date is initial focused (if no other focus set)
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @note Overload from base type sap.ui.unified.calendar.Month
				 * @param oDate New value for property <code>date</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setDate(oDate: any): Month;
				/**
				 * Sets a new value for property <code>days</code>.
				 * 
				 * number of days displayed
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>7</code>.
				 * @param iDays New value for property <code>days</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setDays(iDays: number): DatesRow;
				/**
				 * Setter for property <code>firstDayOfWeek</code>.
				 * 
				 * Property <code>firstDayOfWeek</code> is not supported in <code>sap.ui.unified.calendar.DatesRow</code> control.
				 * @param iFirstDayOfWeek first day of the week(optional)
				 */
				setFirstDayOfWeek(iFirstDayOfWeek?: number);
				/**
				 * Sets a new value for property <code>firstDayOfWeek</code>.
				 * 
				 * If set, the first day of the displayed week is this day. Valid values are 0 to 6.
				 * If not a valid value is set, the default of the used locale is used.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>-1</code>.
				 * @note Overload from base type sap.ui.unified.calendar.Month
				 * @param iFirstDayOfWeek New value for property <code>firstDayOfWeek</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setFirstDayOfWeek(iFirstDayOfWeek: number): Month;
				/**
				 * Sets a new value for property <code>showDayNamesLine</code>.
				 * 
				 * If set the day names are shown in a separate line.
				 * If not set the day names are shown inside the single days.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>true</code>.
				 * @param bShowDayNamesLine New value for property <code>showDayNamesLine</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setShowDayNamesLine(bShowDayNamesLine: boolean): DatesRow;
				/**
				 * Sets a new value for property <code>startDate</code>.
				 * 
				 * Start date of the row
				 * If in rendering phase the date property is not in the range startDate + days,
				 * it is set to the start date
				 * So after setting the start date the date should be set to be in the range of the start date
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param oStartDate New value for property <code>startDate</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setStartDate(oStartDate: any): DatesRow;
			}
		
			class Header extends sap.ui.core.Control {
				/**
				 * Constructor for a new Header.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param sId ID for the new control, generated automatically if no ID is given(optional)
				 * @param mSettings Initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: sap.ui.unified.calendar.HeaderMetadata);
				/**
				 * Constructor for a new Header.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @note Any overloads to support not documented metadata
				 * @param sId ID for the new control, generated automatically if no ID is given(optional)
				 * @param mSettings Initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Attaches event handler <code>fnFunction</code> to the <code>pressButton0</code> event of this <code>sap.ui.unified.calendar.Header</code>.
				 * 
				 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
				 * otherwise it will be bound to this <code>sap.ui.unified.calendar.Header</code> itself.
				 * 
				 * First button pressed (normally day)
				 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
				 * @param fnFunction The function to be called when the event occurs
				 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.calendar.Header</code> itself(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				attachPressButton0(oData: any, fnFunction: any, oListener?: any): Header;
				/**
				 * Attaches event handler <code>fnFunction</code> to the <code>pressButton1</code> event of this <code>sap.ui.unified.calendar.Header</code>.
				 * 
				 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
				 * otherwise it will be bound to this <code>sap.ui.unified.calendar.Header</code> itself.
				 * 
				 * Second button pressed (normally month)
				 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
				 * @param fnFunction The function to be called when the event occurs
				 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.calendar.Header</code> itself(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				attachPressButton1(oData: any, fnFunction: any, oListener?: any): Header;
				/**
				 * Attaches event handler <code>fnFunction</code> to the <code>pressButton2</code> event of this <code>sap.ui.unified.calendar.Header</code>.
				 * 
				 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
				 * otherwise it will be bound to this <code>sap.ui.unified.calendar.Header</code> itself.
				 * 
				 * Third button pressed (normally year)
				 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
				 * @param fnFunction The function to be called when the event occurs
				 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.calendar.Header</code> itself(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				attachPressButton2(oData: any, fnFunction: any, oListener?: any): Header;
				/**
				 * Attaches event handler <code>fnFunction</code> to the <code>pressNext</code> event of this <code>sap.ui.unified.calendar.Header</code>.
				 * 
				 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
				 * otherwise it will be bound to this <code>sap.ui.unified.calendar.Header</code> itself.
				 * 
				 * Next button pressed
				 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
				 * @param fnFunction The function to be called when the event occurs
				 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.calendar.Header</code> itself(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				attachPressNext(oData: any, fnFunction: any, oListener?: any): Header;
				/**
				 * Attaches event handler <code>fnFunction</code> to the <code>pressPrevious</code> event of this <code>sap.ui.unified.calendar.Header</code>.
				 * 
				 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
				 * otherwise it will be bound to this <code>sap.ui.unified.calendar.Header</code> itself.
				 * 
				 * Previous button pressed
				 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
				 * @param fnFunction The function to be called when the event occurs
				 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.calendar.Header</code> itself(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				attachPressPrevious(oData: any, fnFunction: any, oListener?: any): Header;
				/**
				 * Detaches event handler <code>fnFunction</code> from the <code>pressButton0</code> event of this <code>sap.ui.unified.calendar.Header</code>.
				 * 
				 * The passed function and listener object must match the ones used for event registration.
				 * @param fnFunction The function to be called, when the event occurs
				 * @param oListener Context object on which the given function had to be called
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				detachPressButton0(fnFunction: any, oListener: any): Header;
				/**
				 * Detaches event handler <code>fnFunction</code> from the <code>pressButton1</code> event of this <code>sap.ui.unified.calendar.Header</code>.
				 * 
				 * The passed function and listener object must match the ones used for event registration.
				 * @param fnFunction The function to be called, when the event occurs
				 * @param oListener Context object on which the given function had to be called
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				detachPressButton1(fnFunction: any, oListener: any): Header;
				/**
				 * Detaches event handler <code>fnFunction</code> from the <code>pressButton2</code> event of this <code>sap.ui.unified.calendar.Header</code>.
				 * 
				 * The passed function and listener object must match the ones used for event registration.
				 * @param fnFunction The function to be called, when the event occurs
				 * @param oListener Context object on which the given function had to be called
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				detachPressButton2(fnFunction: any, oListener: any): Header;
				/**
				 * Detaches event handler <code>fnFunction</code> from the <code>pressNext</code> event of this <code>sap.ui.unified.calendar.Header</code>.
				 * 
				 * The passed function and listener object must match the ones used for event registration.
				 * @param fnFunction The function to be called, when the event occurs
				 * @param oListener Context object on which the given function had to be called
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				detachPressNext(fnFunction: any, oListener: any): Header;
				/**
				 * Detaches event handler <code>fnFunction</code> from the <code>pressPrevious</code> event of this <code>sap.ui.unified.calendar.Header</code>.
				 * 
				 * The passed function and listener object must match the ones used for event registration.
				 * @param fnFunction The function to be called, when the event occurs
				 * @param oListener Context object on which the given function had to be called
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				detachPressPrevious(fnFunction: any, oListener: any): Header;
				/**
				 * Creates a new subclass of class sap.ui.unified.calendar.Header with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Fires event <code>pressButton0</code> to attached listeners.
				 * @param mArguments The arguments to pass along with the event(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				firePressButton0(mArguments?: any): Header;
				/**
				 * Fires event <code>pressButton1</code> to attached listeners.
				 * @param mArguments The arguments to pass along with the event(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				firePressButton1(mArguments?: any): Header;
				/**
				 * Fires event <code>pressButton2</code> to attached listeners.
				 * @param mArguments The arguments to pass along with the event(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				firePressButton2(mArguments?: any): Header;
				/**
				 * Fires event <code>pressNext</code> to attached listeners.
				 * @param mArguments The arguments to pass along with the event(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				firePressNext(mArguments?: any): Header;
				/**
				 * Fires event <code>pressPrevious</code> to attached listeners.
				 * @param mArguments The arguments to pass along with the event(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				firePressPrevious(mArguments?: any): Header;
				/**
				 * Gets current value of property <code>additionalTextButton0</code>.
				 * 
				 * Additional text of the first button (normally day)
				 * @return Value of property <code>additionalTextButton0</code>
				 */
				getAdditionalTextButton0(): string;
				/**
				 * Gets current value of property <code>additionalTextButton1</code>.
				 * 
				 * Additional text of the second button (normally month)
				 * @return Value of property <code>additionalTextButton1</code>
				 */
				getAdditionalTextButton1(): string;
				/**
				 * Gets current value of property <code>additionalTextButton2</code>.
				 * 
				 * Additional text of the third button (normally year)
				 * @return Value of property <code>additionalTextButton2</code>
				 */
				getAdditionalTextButton2(): string;
				/**
				 * Gets current value of property <code>ariaLabelButton0</code>.
				 * 
				 * aria-label of the first button (normally day)
				 * @return Value of property <code>ariaLabelButton0</code>
				 */
				getAriaLabelButton0(): string;
				/**
				 * Gets current value of property <code>ariaLabelButton1</code>.
				 * 
				 * aria-label of the second button (normally month)
				 * @return Value of property <code>ariaLabelButton1</code>
				 */
				getAriaLabelButton1(): string;
				/**
				 * Gets current value of property <code>ariaLabelButton2</code>.
				 * 
				 * aria-label of the third button (normally year)
				 * @return Value of property <code>ariaLabelButton2</code>
				 */
				getAriaLabelButton2(): string;
				/**
				 * Gets current value of property <code>enabledNext</code>.
				 * 
				 * Enables the Next button
				 * 
				 * Default value is <code>true</code>.
				 * @return Value of property <code>enabledNext</code>
				 */
				getEnabledNext(): boolean;
				/**
				 * Gets current value of property <code>enabledPrevious</code>.
				 * 
				 * Enables the previous button
				 * 
				 * Default value is <code>true</code>.
				 * @return Value of property <code>enabledPrevious</code>
				 */
				getEnabledPrevious(): boolean;
				/**
				 * Gets current value of property <code>textButton0</code>.
				 * 
				 * Text of the first button (normally day)
				 * @return Value of property <code>textButton0</code>
				 */
				getTextButton0(): string;
				/**
				 * Gets current value of property <code>textButton1</code>.
				 * 
				 * Text of the second button (normally month)
				 * @return Value of property <code>textButton1</code>
				 */
				getTextButton1(): string;
				/**
				 * Gets current value of property <code>textButton2</code>.
				 * 
				 * Text of the third button (normally year)
				 * @return Value of property <code>textButton2</code>
				 */
				getTextButton2(): string;
				/**
				 * Gets current value of property <code>visibleButton0</code>.
				 * 
				 * If set, the first button will be displayed
				 * 
				 * <b>Note:</b> The default is set to false to be compatible to older versions
				 * 
				 * Default value is <code>false</code>.
				 * @return Value of property <code>visibleButton0</code>
				 */
				getVisibleButton0(): boolean;
				/**
				 * Gets current value of property <code>visibleButton1</code>.
				 * 
				 * If set, the second button will be displayed
				 * 
				 * Default value is <code>true</code>.
				 * @return Value of property <code>visibleButton1</code>
				 */
				getVisibleButton1(): boolean;
				/**
				 * Gets current value of property <code>visibleButton2</code>.
				 * 
				 * If set, the third button will be displayed
				 * 
				 * Default value is <code>true</code>.
				 * @return Value of property <code>visibleButton2</code>
				 */
				getVisibleButton2(): boolean;
				/**
				 * Sets a new value for property <code>additionalTextButton0</code>.
				 * 
				 * Additional text of the first button (normally day)
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sAdditionalTextButton0 New value for property <code>additionalTextButton0</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setAdditionalTextButton0(sAdditionalTextButton0: string): Header;
				/**
				 * Sets a new value for property <code>additionalTextButton1</code>.
				 * 
				 * Additional text of the second button (normally month)
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sAdditionalTextButton1 New value for property <code>additionalTextButton1</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setAdditionalTextButton1(sAdditionalTextButton1: string): Header;
				/**
				 * Sets a new value for property <code>additionalTextButton2</code>.
				 * 
				 * Additional text of the third button (normally year)
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sAdditionalTextButton2 New value for property <code>additionalTextButton2</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setAdditionalTextButton2(sAdditionalTextButton2: string): Header;
				/**
				 * Sets a new value for property <code>ariaLabelButton0</code>.
				 * 
				 * aria-label of the first button (normally day)
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sAriaLabelButton0 New value for property <code>ariaLabelButton0</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setAriaLabelButton0(sAriaLabelButton0: string): Header;
				/**
				 * Sets a new value for property <code>ariaLabelButton1</code>.
				 * 
				 * aria-label of the second button (normally month)
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sAriaLabelButton1 New value for property <code>ariaLabelButton1</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setAriaLabelButton1(sAriaLabelButton1: string): Header;
				/**
				 * Sets a new value for property <code>ariaLabelButton2</code>.
				 * 
				 * aria-label of the third button (normally year)
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sAriaLabelButton2 New value for property <code>ariaLabelButton2</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setAriaLabelButton2(sAriaLabelButton2: string): Header;
				/**
				 * Sets a new value for property <code>enabledNext</code>.
				 * 
				 * Enables the Next button
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>true</code>.
				 * @param bEnabledNext New value for property <code>enabledNext</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setEnabledNext(bEnabledNext: boolean): Header;
				/**
				 * Sets a new value for property <code>enabledPrevious</code>.
				 * 
				 * Enables the previous button
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>true</code>.
				 * @param bEnabledPrevious New value for property <code>enabledPrevious</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setEnabledPrevious(bEnabledPrevious: boolean): Header;
				/**
				 * Sets a new value for property <code>textButton0</code>.
				 * 
				 * Text of the first button (normally day)
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sTextButton0 New value for property <code>textButton0</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setTextButton0(sTextButton0: string): Header;
				/**
				 * Sets a new value for property <code>textButton1</code>.
				 * 
				 * Text of the second button (normally month)
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sTextButton1 New value for property <code>textButton1</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setTextButton1(sTextButton1: string): Header;
				/**
				 * Sets a new value for property <code>textButton2</code>.
				 * 
				 * Text of the third button (normally year)
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sTextButton2 New value for property <code>textButton2</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setTextButton2(sTextButton2: string): Header;
				/**
				 * Sets a new value for property <code>visibleButton0</code>.
				 * 
				 * If set, the first button will be displayed
				 * 
				 * <b>Note:</b> The default is set to false to be compatible to older versions
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>false</code>.
				 * @param bVisibleButton0 New value for property <code>visibleButton0</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setVisibleButton0(bVisibleButton0: boolean): Header;
				/**
				 * Sets a new value for property <code>visibleButton1</code>.
				 * 
				 * If set, the second button will be displayed
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>true</code>.
				 * @param bVisibleButton1 New value for property <code>visibleButton1</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setVisibleButton1(bVisibleButton1: boolean): Header;
				/**
				 * Sets a new value for property <code>visibleButton2</code>.
				 * 
				 * If set, the third button will be displayed
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>true</code>.
				 * @param bVisibleButton2 New value for property <code>visibleButton2</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setVisibleButton2(bVisibleButton2: boolean): Header;
			}
		
			class Month extends sap.ui.core.Control {
				/**
				 * Constructor for a new calendar/Month.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: sap.ui.unified.calendar.MonthMetadata);
				/**
				 * Constructor for a new calendar/Month.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @note Any overloads to support not documented metadata
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
				 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): Month;
				/**
				 * Adds some disabledDate to the aggregation <code>disabledDates</code>.
				 * @param oDisabledDate the disabledDate to add; if empty, nothing is inserted
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				addDisabledDate(oDisabledDate: sap.ui.unified.DateRange): Month;
				/**
				 * Adds some selectedDate to the aggregation <code>selectedDates</code>.
				 * @param oSelectedDate the selectedDate to add; if empty, nothing is inserted
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				addSelectedDate(oSelectedDate: sap.ui.unified.DateRange): Month;
				/**
				 * Adds some specialDate to the aggregation <code>specialDates</code>.
				 * @param oSpecialDate the specialDate to add; if empty, nothing is inserted
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				addSpecialDate(oSpecialDate: sap.ui.unified.DateTypeRange): Month;
				/**
				 * Attaches event handler <code>fnFunction</code> to the <code>focus</code> event of this <code>sap.ui.unified.calendar.Month</code>.
				 * 
				 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
				 * otherwise it will be bound to this <code>sap.ui.unified.calendar.Month</code> itself.
				 * 
				 * Date focus changed
				 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
				 * @param fnFunction The function to be called when the event occurs
				 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.calendar.Month</code> itself(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				attachFocus(oData: any, fnFunction: any, oListener?: any): Month;
				/**
				 * Attaches event handler <code>fnFunction</code> to the <code>select</code> event of this <code>sap.ui.unified.calendar.Month</code>.
				 * 
				 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
				 * otherwise it will be bound to this <code>sap.ui.unified.calendar.Month</code> itself.
				 * 
				 * Date selection changed
				 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
				 * @param fnFunction The function to be called when the event occurs
				 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.calendar.Month</code> itself(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				attachSelect(oData: any, fnFunction: any, oListener?: any): Month;
				/**
				 * checks if a date is focusable in the current rendered output.
				 * So if not rendered or in other month it is not focusable.
				 * @param oDate JavaScript date object for focused date.
				 * @return flag if focusable
				 */
				checkDateFocusable(oDate: any): boolean;
				/**
				 * Destroys all the disabledDates in the aggregation <code>disabledDates</code>.
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				destroyDisabledDates(): Month;
				/**
				 * Destroys all the selectedDates in the aggregation <code>selectedDates</code>.
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				destroySelectedDates(): Month;
				/**
				 * Destroys all the specialDates in the aggregation <code>specialDates</code>.
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				destroySpecialDates(): Month;
				/**
				 * Detaches event handler <code>fnFunction</code> from the <code>focus</code> event of this <code>sap.ui.unified.calendar.Month</code>.
				 * 
				 * The passed function and listener object must match the ones used for event registration.
				 * @param fnFunction The function to be called, when the event occurs
				 * @param oListener Context object on which the given function had to be called
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				detachFocus(fnFunction: any, oListener: any): Month;
				/**
				 * Detaches event handler <code>fnFunction</code> from the <code>select</code> event of this <code>sap.ui.unified.calendar.Month</code>.
				 * 
				 * The passed function and listener object must match the ones used for event registration.
				 * @param fnFunction The function to be called, when the event occurs
				 * @param oListener Context object on which the given function had to be called
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				detachSelect(fnFunction: any, oListener: any): Month;
				/**
				 * displays the month of a given date without setting the focus
				 * @param oDate JavaScript date object for focused date.
				 * @return <code>this</code> to allow method chaining
				 */
				displayDate(oDate: any): Month;
				/**
				 * Creates a new subclass of class sap.ui.unified.calendar.Month with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Fires event <code>focus</code> to attached listeners.
				 * 
				 * Expects the following event parameters:
				 * <ul>
				 * <li><code>date</code> of type <code>object</code>focused date</li>
				 * <li><code>otherMonth</code> of type <code>boolean</code>focused date is in an other month that the displayed one</li>
				 * <li><code>restoreOldDate</code> of type <code>boolean</code>focused date is set to the same as before (date in other month clicked)</li>
				 * </ul>
				 * @param mArguments The arguments to pass along with the event(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				fireFocus(mArguments?: any): Month;
				/**
				 * Fires event <code>select</code> to attached listeners.
				 * @param mArguments The arguments to pass along with the event(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				fireSelect(mArguments?: any): Month;
				/**
				 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
				 * @return 
				 */
				getAriaLabelledBy(): sap.ui.core.ID[];
				/**
				 * Gets current value of property <code>date</code>.
				 * 
				 * the month including this date is rendered and this date is initial focused (if no other focus set)
				 * @return Value of property <code>date</code>
				 */
				getDate(): any;
				/**
				 * Gets content of aggregation <code>disabledDates</code>.
				 * 
				 * Date Ranges for disabled dates
				 * @return 
				 */
				getDisabledDates(): sap.ui.unified.DateRange[];
				/**
				 * Gets current value of property <code>firstDayOfWeek</code>.
				 * 
				 * If set, the first day of the displayed week is this day. Valid values are 0 to 6.
				 * If not a valid value is set, the default of the used locale is used.
				 * 
				 * Default value is <code>-1</code>.
				 * @return Value of property <code>firstDayOfWeek</code>
				 */
				getFirstDayOfWeek(): number;
				/**
				 * Gets current value of property <code>intervalSelection</code>.
				 * 
				 * If set, interval selection is allowed
				 * 
				 * Default value is <code>false</code>.
				 * @return Value of property <code>intervalSelection</code>
				 */
				getIntervalSelection(): boolean;
				/**
				 * ID of the element which is the current target of the association <code>legend</code>, or <code>null</code>.
				 * @return 
				 */
				getLegend(): sap.ui.core.ID;
				/**
				 * Gets current value of property <code>nonWorkingDays</code>.
				 * 
				 * If set, the provided weekdays are displayed as non-working days.
				 * Valid values inside the array are 0 to 6.
				 * If not set, the weekend defined in the locale settings is displayed as non-working days.
				 * @return Value of property <code>nonWorkingDays</code>
				 */
				getNonWorkingDays(): number[];
				/**
				 * Gets current value of property <code>primaryCalendarType</code>.
				 * 
				 * If set, the calendar type is used for display.
				 * If not set, the calendar type of the global configuration is used.
				 * @return Value of property <code>primaryCalendarType</code>
				 */
				getPrimaryCalendarType(): sap.ui.core.CalendarType;
				/**
				 * Gets current value of property <code>secondaryCalendarType</code>.
				 * 
				 * If set, the days are also displayed in this calendar type
				 * If not set, the dates are only displayed in the primary calendar type
				 * @return Value of property <code>secondaryCalendarType</code>
				 */
				getSecondaryCalendarType(): sap.ui.core.CalendarType;
				/**
				 * Gets content of aggregation <code>selectedDates</code>.
				 * 
				 * Date Ranges for selected dates of the DatePicker
				 * @return 
				 */
				getSelectedDates(): sap.ui.unified.DateRange[];
				/**
				 * Gets current value of property <code>showHeader</code>.
				 * 
				 * If set, a header with the month name is shown
				 * 
				 * Default value is <code>false</code>.
				 * @return Value of property <code>showHeader</code>
				 */
				getShowHeader(): boolean;
				/**
				 * Gets current value of property <code>singleSelection</code>.
				 * 
				 * If set, only a single date or interval, if intervalSelection is enabled, can be selected
				 * 
				 * Default value is <code>true</code>.
				 * @return Value of property <code>singleSelection</code>
				 */
				getSingleSelection(): boolean;
				/**
				 * Gets content of aggregation <code>specialDates</code>.
				 * 
				 * Date Range with type to visualize special days in the Calendar.
				 * If one day is assigned to more than one Type, only the first one will be used.
				 * @return 
				 */
				getSpecialDates(): sap.ui.unified.DateTypeRange[];
				/**
				 * Gets current value of property <code>width</code>.
				 * 
				 * Width of Month
				 * @return Value of property <code>width</code>
				 */
				getWidth(): sap.ui.core.CSSSize;
				/**
				 * Checks for the provided <code>sap.ui.unified.DateRange</code> in the aggregation <code>disabledDates</code>.
				 * and returns its index if found or -1 otherwise.
				 * @param oDisabledDate The disabledDate whose index is looked for
				 * @return The index of the provided control in the aggregation if found, or -1 otherwise
				 */
				indexOfDisabledDate(oDisabledDate: sap.ui.unified.DateRange): number;
				/**
				 * Checks for the provided <code>sap.ui.unified.DateRange</code> in the aggregation <code>selectedDates</code>.
				 * and returns its index if found or -1 otherwise.
				 * @param oSelectedDate The selectedDate whose index is looked for
				 * @return The index of the provided control in the aggregation if found, or -1 otherwise
				 */
				indexOfSelectedDate(oSelectedDate: sap.ui.unified.DateRange): number;
				/**
				 * Checks for the provided <code>sap.ui.unified.DateTypeRange</code> in the aggregation <code>specialDates</code>.
				 * and returns its index if found or -1 otherwise.
				 * @param oSpecialDate The specialDate whose index is looked for
				 * @return The index of the provided control in the aggregation if found, or -1 otherwise
				 */
				indexOfSpecialDate(oSpecialDate: sap.ui.unified.DateTypeRange): number;
				/**
				 * Inserts a disabledDate into the aggregation <code>disabledDates</code>.
				 * @param oDisabledDate the disabledDate to insert; if empty, nothing is inserted
				 * @param iIndex the <code>0</code>-based index the disabledDate should be inserted at; for
				 *              a negative value of <code>iIndex</code>, the disabledDate is inserted at position 0; for a value
				 *              greater than the current size of the aggregation, the disabledDate is inserted at
				 *              the last position
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				insertDisabledDate(oDisabledDate: sap.ui.unified.DateRange, iIndex: number): Month;
				/**
				 * Inserts a selectedDate into the aggregation <code>selectedDates</code>.
				 * @param oSelectedDate the selectedDate to insert; if empty, nothing is inserted
				 * @param iIndex the <code>0</code>-based index the selectedDate should be inserted at; for
				 *              a negative value of <code>iIndex</code>, the selectedDate is inserted at position 0; for a value
				 *              greater than the current size of the aggregation, the selectedDate is inserted at
				 *              the last position
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				insertSelectedDate(oSelectedDate: sap.ui.unified.DateRange, iIndex: number): Month;
				/**
				 * Inserts a specialDate into the aggregation <code>specialDates</code>.
				 * @param oSpecialDate the specialDate to insert; if empty, nothing is inserted
				 * @param iIndex the <code>0</code>-based index the specialDate should be inserted at; for
				 *              a negative value of <code>iIndex</code>, the specialDate is inserted at position 0; for a value
				 *              greater than the current size of the aggregation, the specialDate is inserted at
				 *              the last position
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				insertSpecialDate(oSpecialDate: sap.ui.unified.DateTypeRange, iIndex: number): Month;
				/**
				 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
				 * @return An array of the removed elements (might be empty)
				 */
				removeAllAriaLabelledBy(): sap.ui.core.ID[];
				/**
				 * Removes all the controls from the aggregation <code>disabledDates</code>.
				 * 
				 * Additionally, it unregisters them from the hosting UIArea.
				 * @return An array of the removed elements (might be empty)
				 */
				removeAllDisabledDates(): sap.ui.unified.DateRange[];
				/**
				 * Removes all the controls from the aggregation <code>selectedDates</code>.
				 * 
				 * Additionally, it unregisters them from the hosting UIArea.
				 * @return An array of the removed elements (might be empty)
				 */
				removeAllSelectedDates(): sap.ui.unified.DateRange[];
				/**
				 * Removes all the controls from the aggregation <code>specialDates</code>.
				 * 
				 * Additionally, it unregisters them from the hosting UIArea.
				 * @return An array of the removed elements (might be empty)
				 */
				removeAllSpecialDates(): sap.ui.unified.DateTypeRange[];
				/**
				 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
				 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
				 * @return The removed ariaLabelledBy or <code>null</code>
				 */
				removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
				/**
				 * Removes a disabledDate from the aggregation <code>disabledDates</code>.
				 * @param vDisabledDate The disabledDate to remove or its index or id
				 * @return The removed disabledDate or <code>null</code>
				 */
				removeDisabledDate(vDisabledDate: number|string|sap.ui.unified.DateRange): sap.ui.unified.DateRange;
				/**
				 * Removes a selectedDate from the aggregation <code>selectedDates</code>.
				 * @param vSelectedDate The selectedDate to remove or its index or id
				 * @return The removed selectedDate or <code>null</code>
				 */
				removeSelectedDate(vSelectedDate: number|string|sap.ui.unified.DateRange): sap.ui.unified.DateRange;
				/**
				 * Removes a specialDate from the aggregation <code>specialDates</code>.
				 * @param vSpecialDate The specialDate to remove or its index or id
				 * @return The removed specialDate or <code>null</code>
				 */
				removeSpecialDate(vSpecialDate: number|string|sap.ui.unified.DateTypeRange): sap.ui.unified.DateTypeRange;
				/**
				 * Sets a new value for property <code>date</code>.
				 * 
				 * the month including this date is rendered and this date is initial focused (if no other focus set)
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param oDate New value for property <code>date</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setDate(oDate: any): Month;
				/**
				 * Sets a new value for property <code>firstDayOfWeek</code>.
				 * 
				 * If set, the first day of the displayed week is this day. Valid values are 0 to 6.
				 * If not a valid value is set, the default of the used locale is used.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>-1</code>.
				 * @param iFirstDayOfWeek New value for property <code>firstDayOfWeek</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setFirstDayOfWeek(iFirstDayOfWeek: number): Month;
				/**
				 * Sets a new value for property <code>intervalSelection</code>.
				 * 
				 * If set, interval selection is allowed
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>false</code>.
				 * @param bIntervalSelection New value for property <code>intervalSelection</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setIntervalSelection(bIntervalSelection: boolean): Month;
				/**
				 * Sets the associated <code>legend</code>.
				 * @param oLegend ID of an element which becomes the new target of this legend association; alternatively, an element instance may be given
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setLegend(oLegend: sap.ui.core.ID|sap.ui.unified.CalendarLegend): Month;
				/**
				 * Sets a new value for property <code>nonWorkingDays</code>.
				 * 
				 * If set, the provided weekdays are displayed as non-working days.
				 * Valid values inside the array are 0 to 6.
				 * If not set, the weekend defined in the locale settings is displayed as non-working days.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sNonWorkingDays New value for property <code>nonWorkingDays</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setNonWorkingDays(sNonWorkingDays: number[]): Month;
				/**
				 * Sets a new value for property <code>primaryCalendarType</code>.
				 * 
				 * If set, the calendar type is used for display.
				 * If not set, the calendar type of the global configuration is used.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sPrimaryCalendarType New value for property <code>primaryCalendarType</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setPrimaryCalendarType(sPrimaryCalendarType: sap.ui.core.CalendarType): Month;
				/**
				 * Sets a new value for property <code>secondaryCalendarType</code>.
				 * 
				 * If set, the days are also displayed in this calendar type
				 * If not set, the dates are only displayed in the primary calendar type
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sSecondaryCalendarType New value for property <code>secondaryCalendarType</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setSecondaryCalendarType(sSecondaryCalendarType: sap.ui.core.CalendarType): Month;
				/**
				 * Sets a new value for property <code>showHeader</code>.
				 * 
				 * If set, a header with the month name is shown
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>false</code>.
				 * @param bShowHeader New value for property <code>showHeader</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setShowHeader(bShowHeader: boolean): Month;
				/**
				 * Sets a new value for property <code>singleSelection</code>.
				 * 
				 * If set, only a single date or interval, if intervalSelection is enabled, can be selected
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>true</code>.
				 * @param bSingleSelection New value for property <code>singleSelection</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setSingleSelection(bSingleSelection: boolean): Month;
				/**
				 * Sets a new value for property <code>width</code>.
				 * 
				 * Width of Month
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sWidth New value for property <code>width</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setWidth(sWidth: sap.ui.core.CSSSize): Month;
			}
		
			class MonthPicker extends sap.ui.core.Control {
				/**
				 * Constructor for a new MonthPicker.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: sap.ui.unified.calendar.MonthPickerMetadata);
				/**
				 * Constructor for a new MonthPicker.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @note Any overloads to support not documented metadata
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Attaches event handler <code>fnFunction</code> to the <code>pageChange</code> event of this <code>sap.ui.unified.calendar.MonthPicker</code>.
				 * 
				 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
				 * otherwise it will be bound to this <code>sap.ui.unified.calendar.MonthPicker</code> itself.
				 * 
				 * If less than 12 months are displayed the <code>pageChange</code> event is fired
				 * if the displayed months are changed by user navigation.
				 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
				 * @param fnFunction The function to be called when the event occurs
				 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.calendar.MonthPicker</code> itself(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				attachPageChange(oData: any, fnFunction: any, oListener?: any): MonthPicker;
				/**
				 * Attaches event handler <code>fnFunction</code> to the <code>select</code> event of this <code>sap.ui.unified.calendar.MonthPicker</code>.
				 * 
				 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
				 * otherwise it will be bound to this <code>sap.ui.unified.calendar.MonthPicker</code> itself.
				 * 
				 * Month selection changed
				 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
				 * @param fnFunction The function to be called when the event occurs
				 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.calendar.MonthPicker</code> itself(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				attachSelect(oData: any, fnFunction: any, oListener?: any): MonthPicker;
				/**
				 * Detaches event handler <code>fnFunction</code> from the <code>pageChange</code> event of this <code>sap.ui.unified.calendar.MonthPicker</code>.
				 * 
				 * The passed function and listener object must match the ones used for event registration.
				 * @param fnFunction The function to be called, when the event occurs
				 * @param oListener Context object on which the given function had to be called
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				detachPageChange(fnFunction: any, oListener: any): MonthPicker;
				/**
				 * Detaches event handler <code>fnFunction</code> from the <code>select</code> event of this <code>sap.ui.unified.calendar.MonthPicker</code>.
				 * 
				 * The passed function and listener object must match the ones used for event registration.
				 * @param fnFunction The function to be called, when the event occurs
				 * @param oListener Context object on which the given function had to be called
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				detachSelect(fnFunction: any, oListener: any): MonthPicker;
				/**
				 * Creates a new subclass of class sap.ui.unified.calendar.MonthPicker with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Fires event <code>pageChange</code> to attached listeners.
				 * @param mArguments The arguments to pass along with the event(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				firePageChange(mArguments?: any): MonthPicker;
				/**
				 * Fires event <code>select</code> to attached listeners.
				 * @param mArguments The arguments to pass along with the event(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				fireSelect(mArguments?: any): MonthPicker;
				/**
				 * Gets current value of property <code>columns</code>.
				 * 
				 * number of months in each row
				 * The value must be between 0 and 12 (0 means just to have all months in one row, independent of the number)
				 * 
				 * Default value is <code>3</code>.
				 * @return Value of property <code>columns</code>
				 */
				getColumns(): number;
				/**
				 * Gets current value of property <code>month</code>.
				 * 
				 * The month is initial focused and selected
				 * The value must be between 0 and 11
				 * 
				 * Default value is <code>0</code>.
				 * @return Value of property <code>month</code>
				 */
				getMonth(): number;
				/**
				 * Gets current value of property <code>months</code>.
				 * 
				 * number of displayed months
				 * The value must be between 1 and 12
				 * 
				 * Default value is <code>12</code>.
				 * @return Value of property <code>months</code>
				 */
				getMonths(): number;
				/**
				 * Gets current value of property <code>primaryCalendarType</code>.
				 * 
				 * If set, the calendar type is used for display.
				 * If not set, the calendar type of the global configuration is used.
				 * @return Value of property <code>primaryCalendarType</code>
				 */
				getPrimaryCalendarType(): sap.ui.core.CalendarType;
				/**
				 * displays the next page
				 * @return <code>this</code> to allow method chaining
				 */
				nextPage(): MonthPicker;
				/**
				 * displays the previous page
				 * @return <code>this</code> to allow method chaining
				 */
				previousPage(): MonthPicker;
				/**
				 * Sets a new value for property <code>columns</code>.
				 * 
				 * number of months in each row
				 * The value must be between 0 and 12 (0 means just to have all months in one row, independent of the number)
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>3</code>.
				 * @param iColumns New value for property <code>columns</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setColumns(iColumns: number): MonthPicker;
				/**
				 * sets a minimum an maximum month
				 * @param iMin minimum month as integer (starting with 0)(optional)
				 * @param iMax maximum month as integer (starting with 0)(optional)
				 * @return <code>this</code> to allow method chaining
				 */
				setMinMax(iMin?: number, iMax?: number): MonthPicker;
				/**
				 * Sets a new value for property <code>month</code>.
				 * 
				 * The month is initial focused and selected
				 * The value must be between 0 and 11
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>0</code>.
				 * @param iMonth New value for property <code>month</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setMonth(iMonth: number): MonthPicker;
				/**
				 * Sets a new value for property <code>months</code>.
				 * 
				 * number of displayed months
				 * The value must be between 1 and 12
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>12</code>.
				 * @param iMonths New value for property <code>months</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setMonths(iMonths: number): MonthPicker;
				/**
				 * Sets a new value for property <code>primaryCalendarType</code>.
				 * 
				 * If set, the calendar type is used for display.
				 * If not set, the calendar type of the global configuration is used.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sPrimaryCalendarType New value for property <code>primaryCalendarType</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setPrimaryCalendarType(sPrimaryCalendarType: sap.ui.core.CalendarType): MonthPicker;
			}
		
			class MonthsRow extends sap.ui.core.Control {
				/**
				 * Constructor for a new <code>MonthsRow</code>.
				 * It shows a calendar with month granularity
				 * 
				 * <b>Note:</b> This is used inside the CalendarMonthInterval, not for standalone usage.
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param sId ID for the new control, generated automatically if no ID is given(optional)
				 * @param mSettings Initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: sap.ui.unified.calendar.MonthsRowMetadata);
				/**
				 * Constructor for a new <code>MonthsRow</code>.
				 * It shows a calendar with month granularity
				 * 
				 * <b>Note:</b> This is used inside the CalendarMonthInterval, not for standalone usage.
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @note Any overloads to support not documented metadata
				 * @param sId ID for the new control, generated automatically if no ID is given(optional)
				 * @param mSettings Initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
				 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): MonthsRow;
				/**
				 * Adds some selectedDate to the aggregation <code>selectedDates</code>.
				 * @param oSelectedDate the selectedDate to add; if empty, nothing is inserted
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				addSelectedDate(oSelectedDate: sap.ui.unified.DateRange): MonthsRow;
				/**
				 * Adds some specialDate to the aggregation <code>specialDates</code>.
				 * @param oSpecialDate the specialDate to add; if empty, nothing is inserted
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				addSpecialDate(oSpecialDate: sap.ui.unified.DateTypeRange): MonthsRow;
				/**
				 * Attaches event handler <code>fnFunction</code> to the <code>focus</code> event of this <code>sap.ui.unified.calendar.MonthsRow</code>.
				 * 
				 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
				 * otherwise it will be bound to this <code>sap.ui.unified.calendar.MonthsRow</code> itself.
				 * 
				 * Month focus changed
				 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
				 * @param fnFunction The function to be called when the event occurs
				 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.calendar.MonthsRow</code> itself(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				attachFocus(oData: any, fnFunction: any, oListener?: any): MonthsRow;
				/**
				 * Attaches event handler <code>fnFunction</code> to the <code>select</code> event of this <code>sap.ui.unified.calendar.MonthsRow</code>.
				 * 
				 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
				 * otherwise it will be bound to this <code>sap.ui.unified.calendar.MonthsRow</code> itself.
				 * 
				 * Month selection changed
				 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
				 * @param fnFunction The function to be called when the event occurs
				 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.calendar.MonthsRow</code> itself(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				attachSelect(oData: any, fnFunction: any, oListener?: any): MonthsRow;
				/**
				 * Checks if a date is focusable in the current rendered output.
				 * This means that if it is not rendered, it is not focusable.
				 * @param oDate JavaScript Date object for focused date.
				 * @return flag if focusable
				 */
				checkDateFocusable(oDate: any): boolean;
				/**
				 * Destroys all the selectedDates in the aggregation <code>selectedDates</code>.
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				destroySelectedDates(): MonthsRow;
				/**
				 * Destroys all the specialDates in the aggregation <code>specialDates</code>.
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				destroySpecialDates(): MonthsRow;
				/**
				 * Detaches event handler <code>fnFunction</code> from the <code>focus</code> event of this <code>sap.ui.unified.calendar.MonthsRow</code>.
				 * 
				 * The passed function and listener object must match the ones used for event registration.
				 * @param fnFunction The function to be called, when the event occurs
				 * @param oListener Context object on which the given function had to be called
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				detachFocus(fnFunction: any, oListener: any): MonthsRow;
				/**
				 * Detaches event handler <code>fnFunction</code> from the <code>select</code> event of this <code>sap.ui.unified.calendar.MonthsRow</code>.
				 * 
				 * The passed function and listener object must match the ones used for event registration.
				 * @param fnFunction The function to be called, when the event occurs
				 * @param oListener Context object on which the given function had to be called
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				detachSelect(fnFunction: any, oListener: any): MonthsRow;
				/**
				 * Displays the month of a given date without setting the focus
				 * @param oDate JavaScript Date object for focused date.
				 * @return <code>this</code> to allow method chaining
				 */
				displayDate(oDate: any): MonthsRow;
				/**
				 * Creates a new subclass of class sap.ui.unified.calendar.MonthsRow with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Fires event <code>focus</code> to attached listeners.
				 * 
				 * Expects the following event parameters:
				 * <ul>
				 * <li><code>date</code> of type <code>object</code>First date, as JavaScript Date object, of the month that is focused.</li>
				 * <li><code>notVisible</code> of type <code>boolean</code>If set, the focused date is not rendered yet. (This happens by navigating out of the visible area.)</li>
				 * </ul>
				 * @param mArguments The arguments to pass along with the event(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				fireFocus(mArguments?: any): MonthsRow;
				/**
				 * Fires event <code>select</code> to attached listeners.
				 * @param mArguments The arguments to pass along with the event(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				fireSelect(mArguments?: any): MonthsRow;
				/**
				 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
				 * @return 
				 */
				getAriaLabelledBy(): sap.ui.core.ID[];
				/**
				 * Gets current value of property <code>date</code>.
				 * 
				 * A date as JavaScript Date object. The month including this date is rendered and this date is focused initially (if no other focus is set).
				 * If the date property is not in the range <code>startDate</code> + <code>months</code> in the rendering phase,
				 * it is set to the <code>startDate</code>.
				 * So after setting the <code>startDate</code> the date should be set to be in the visible range.
				 * @return Value of property <code>date</code>
				 */
				getDate(): any;
				/**
				 * Gets current value of property <code>intervalSelection</code>.
				 * 
				 * If set, interval selection is allowed
				 * 
				 * Default value is <code>false</code>.
				 * @return Value of property <code>intervalSelection</code>
				 */
				getIntervalSelection(): boolean;
				/**
				 * ID of the element which is the current target of the association <code>legend</code>, or <code>null</code>.
				 * @return 
				 */
				getLegend(): sap.ui.core.ID;
				/**
				 * Gets current value of property <code>months</code>.
				 * 
				 * Number of months displayed
				 * 
				 * Default value is <code>12</code>.
				 * @return Value of property <code>months</code>
				 */
				getMonths(): number;
				/**
				 * Gets content of aggregation <code>selectedDates</code>.
				 * 
				 * Date ranges for selected dates.
				 * If <code>singleSelection</code> is set, only the first entry is used.
				 * 
				 * <b>Note:</b> Even if only one day is selected, the whole corresponding month is selected.
				 * @return 
				 */
				getSelectedDates(): sap.ui.unified.DateRange[];
				/**
				 * Gets current value of property <code>showHeader</code>.
				 * 
				 * If set, a header with the years is shown to visualize what month belongs to what year.
				 * 
				 * Default value is <code>false</code>.
				 * @return Value of property <code>showHeader</code>
				 */
				getShowHeader(): boolean;
				/**
				 * Gets current value of property <code>singleSelection</code>.
				 * 
				 * If set, only a single month or interval, if intervalSelection is enabled, can be selected
				 * 
				 * <b>Note:</b> Selection of multiple intervals is not supported in the current version.
				 * 
				 * Default value is <code>true</code>.
				 * @return Value of property <code>singleSelection</code>
				 */
				getSingleSelection(): boolean;
				/**
				 * Gets content of aggregation <code>specialDates</code>.
				 * 
				 * Date ranges with type to visualize special months in the row.
				 * If one day is assigned to more than one type, only the first one will be used.
				 * 
				 * <b>Note:</b> Even if only one day is set as a special day, the whole corresponding month is displayed in this way.
				 * @return 
				 */
				getSpecialDates(): sap.ui.unified.DateTypeRange[];
				/**
				 * Gets current value of property <code>startDate</code>.
				 * 
				 * Start date, as JavaScript Date object, of the row. The month of this date is the first month of the displayed row.
				 * @return Value of property <code>startDate</code>
				 */
				getStartDate(): any;
				/**
				 * Checks for the provided <code>sap.ui.unified.DateRange</code> in the aggregation <code>selectedDates</code>.
				 * and returns its index if found or -1 otherwise.
				 * @param oSelectedDate The selectedDate whose index is looked for
				 * @return The index of the provided control in the aggregation if found, or -1 otherwise
				 */
				indexOfSelectedDate(oSelectedDate: sap.ui.unified.DateRange): number;
				/**
				 * Checks for the provided <code>sap.ui.unified.DateTypeRange</code> in the aggregation <code>specialDates</code>.
				 * and returns its index if found or -1 otherwise.
				 * @param oSpecialDate The specialDate whose index is looked for
				 * @return The index of the provided control in the aggregation if found, or -1 otherwise
				 */
				indexOfSpecialDate(oSpecialDate: sap.ui.unified.DateTypeRange): number;
				/**
				 * Inserts a selectedDate into the aggregation <code>selectedDates</code>.
				 * @param oSelectedDate the selectedDate to insert; if empty, nothing is inserted
				 * @param iIndex the <code>0</code>-based index the selectedDate should be inserted at; for
				 *              a negative value of <code>iIndex</code>, the selectedDate is inserted at position 0; for a value
				 *              greater than the current size of the aggregation, the selectedDate is inserted at
				 *              the last position
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				insertSelectedDate(oSelectedDate: sap.ui.unified.DateRange, iIndex: number): MonthsRow;
				/**
				 * Inserts a specialDate into the aggregation <code>specialDates</code>.
				 * @param oSpecialDate the specialDate to insert; if empty, nothing is inserted
				 * @param iIndex the <code>0</code>-based index the specialDate should be inserted at; for
				 *              a negative value of <code>iIndex</code>, the specialDate is inserted at position 0; for a value
				 *              greater than the current size of the aggregation, the specialDate is inserted at
				 *              the last position
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				insertSpecialDate(oSpecialDate: sap.ui.unified.DateTypeRange, iIndex: number): MonthsRow;
				/**
				 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
				 * @return An array of the removed elements (might be empty)
				 */
				removeAllAriaLabelledBy(): sap.ui.core.ID[];
				/**
				 * Removes all the controls from the aggregation <code>selectedDates</code>.
				 * 
				 * Additionally, it unregisters them from the hosting UIArea.
				 * @return An array of the removed elements (might be empty)
				 */
				removeAllSelectedDates(): sap.ui.unified.DateRange[];
				/**
				 * Removes all the controls from the aggregation <code>specialDates</code>.
				 * 
				 * Additionally, it unregisters them from the hosting UIArea.
				 * @return An array of the removed elements (might be empty)
				 */
				removeAllSpecialDates(): sap.ui.unified.DateTypeRange[];
				/**
				 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
				 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
				 * @return The removed ariaLabelledBy or <code>null</code>
				 */
				removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
				/**
				 * Removes a selectedDate from the aggregation <code>selectedDates</code>.
				 * @param vSelectedDate The selectedDate to remove or its index or id
				 * @return The removed selectedDate or <code>null</code>
				 */
				removeSelectedDate(vSelectedDate: number|string|sap.ui.unified.DateRange): sap.ui.unified.DateRange;
				/**
				 * Removes a specialDate from the aggregation <code>specialDates</code>.
				 * @param vSpecialDate The specialDate to remove or its index or id
				 * @return The removed specialDate or <code>null</code>
				 */
				removeSpecialDate(vSpecialDate: number|string|sap.ui.unified.DateTypeRange): sap.ui.unified.DateTypeRange;
				/**
				 * Sets a new value for property <code>date</code>.
				 * 
				 * A date as JavaScript Date object. The month including this date is rendered and this date is focused initially (if no other focus is set).
				 * If the date property is not in the range <code>startDate</code> + <code>months</code> in the rendering phase,
				 * it is set to the <code>startDate</code>.
				 * So after setting the <code>startDate</code> the date should be set to be in the visible range.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param oDate New value for property <code>date</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setDate(oDate: any): MonthsRow;
				/**
				 * Sets a new value for property <code>intervalSelection</code>.
				 * 
				 * If set, interval selection is allowed
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>false</code>.
				 * @param bIntervalSelection New value for property <code>intervalSelection</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setIntervalSelection(bIntervalSelection: boolean): MonthsRow;
				/**
				 * Sets the associated <code>legend</code>.
				 * @param oLegend ID of an element which becomes the new target of this legend association; alternatively, an element instance may be given
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setLegend(oLegend: sap.ui.core.ID|sap.ui.unified.CalendarLegend): MonthsRow;
				/**
				 * Sets a new value for property <code>months</code>.
				 * 
				 * Number of months displayed
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>12</code>.
				 * @param iMonths New value for property <code>months</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setMonths(iMonths: number): MonthsRow;
				/**
				 * Sets a new value for property <code>showHeader</code>.
				 * 
				 * If set, a header with the years is shown to visualize what month belongs to what year.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>false</code>.
				 * @param bShowHeader New value for property <code>showHeader</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setShowHeader(bShowHeader: boolean): MonthsRow;
				/**
				 * Sets a new value for property <code>singleSelection</code>.
				 * 
				 * If set, only a single month or interval, if intervalSelection is enabled, can be selected
				 * 
				 * <b>Note:</b> Selection of multiple intervals is not supported in the current version.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>true</code>.
				 * @param bSingleSelection New value for property <code>singleSelection</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setSingleSelection(bSingleSelection: boolean): MonthsRow;
				/**
				 * Sets a new value for property <code>startDate</code>.
				 * 
				 * Start date, as JavaScript Date object, of the row. The month of this date is the first month of the displayed row.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param oStartDate New value for property <code>startDate</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setStartDate(oStartDate: any): MonthsRow;
			}
		
			class TimesRow extends sap.ui.core.Control {
				/**
				 * Constructor for a new <code>TimesRow</code>.
				 * It shows a calendar with time granularity (normally hours)
				 * 
				 * <b>Note:</b> This is used inside the CalendarTimeInterval, not for standalone usage.
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param sId ID for the new control, generated automatically if no ID is given(optional)
				 * @param mSettings Initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: sap.ui.unified.calendar.TimesRowMetadata);
				/**
				 * Constructor for a new <code>TimesRow</code>.
				 * It shows a calendar with time granularity (normally hours)
				 * 
				 * <b>Note:</b> This is used inside the CalendarTimeInterval, not for standalone usage.
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @note Any overloads to support not documented metadata
				 * @param sId ID for the new control, generated automatically if no ID is given(optional)
				 * @param mSettings Initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
				 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): TimesRow;
				/**
				 * Adds some selectedDate to the aggregation <code>selectedDates</code>.
				 * @param oSelectedDate the selectedDate to add; if empty, nothing is inserted
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				addSelectedDate(oSelectedDate: sap.ui.unified.DateRange): TimesRow;
				/**
				 * Adds some specialDate to the aggregation <code>specialDates</code>.
				 * @param oSpecialDate the specialDate to add; if empty, nothing is inserted
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				addSpecialDate(oSpecialDate: sap.ui.unified.DateTypeRange): TimesRow;
				/**
				 * Attaches event handler <code>fnFunction</code> to the <code>focus</code> event of this <code>sap.ui.unified.calendar.TimesRow</code>.
				 * 
				 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
				 * otherwise it will be bound to this <code>sap.ui.unified.calendar.TimesRow</code> itself.
				 * 
				 * Time focus changed
				 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
				 * @param fnFunction The function to be called when the event occurs
				 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.calendar.TimesRow</code> itself(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				attachFocus(oData: any, fnFunction: any, oListener?: any): TimesRow;
				/**
				 * Attaches event handler <code>fnFunction</code> to the <code>select</code> event of this <code>sap.ui.unified.calendar.TimesRow</code>.
				 * 
				 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
				 * otherwise it will be bound to this <code>sap.ui.unified.calendar.TimesRow</code> itself.
				 * 
				 * Time selection changed
				 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
				 * @param fnFunction The function to be called when the event occurs
				 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.calendar.TimesRow</code> itself(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				attachSelect(oData: any, fnFunction: any, oListener?: any): TimesRow;
				/**
				 * Checks if a date is focusable in the current rendered output.
				 * This means that if it is not rendered, it is not focusable.
				 * @param oDate JavaScript Date object for focused date.
				 * @return flag if focusable
				 */
				checkDateFocusable(oDate: any): boolean;
				/**
				 * Destroys all the selectedDates in the aggregation <code>selectedDates</code>.
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				destroySelectedDates(): TimesRow;
				/**
				 * Destroys all the specialDates in the aggregation <code>specialDates</code>.
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				destroySpecialDates(): TimesRow;
				/**
				 * Detaches event handler <code>fnFunction</code> from the <code>focus</code> event of this <code>sap.ui.unified.calendar.TimesRow</code>.
				 * 
				 * The passed function and listener object must match the ones used for event registration.
				 * @param fnFunction The function to be called, when the event occurs
				 * @param oListener Context object on which the given function had to be called
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				detachFocus(fnFunction: any, oListener: any): TimesRow;
				/**
				 * Detaches event handler <code>fnFunction</code> from the <code>select</code> event of this <code>sap.ui.unified.calendar.TimesRow</code>.
				 * 
				 * The passed function and listener object must match the ones used for event registration.
				 * @param fnFunction The function to be called, when the event occurs
				 * @param oListener Context object on which the given function had to be called
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				detachSelect(fnFunction: any, oListener: any): TimesRow;
				/**
				 * Displays the given date without setting the focus
				 * @param oDate JavaScript Date object for focused date.
				 * @return <code>this</code> to allow method chaining
				 */
				displayDate(oDate: any): TimesRow;
				/**
				 * Creates a new subclass of class sap.ui.unified.calendar.TimesRow with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Fires event <code>focus</code> to attached listeners.
				 * 
				 * Expects the following event parameters:
				 * <ul>
				 * <li><code>date</code> of type <code>object</code>date, as JavaScript Date object, of the focused time.</li>
				 * <li><code>notVisible</code> of type <code>boolean</code>If set, the focused date is not rendered yet. (This happens by navigating out of the visible area.)</li>
				 * </ul>
				 * @param mArguments The arguments to pass along with the event(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				fireFocus(mArguments?: any): TimesRow;
				/**
				 * Fires event <code>select</code> to attached listeners.
				 * @param mArguments The arguments to pass along with the event(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				fireSelect(mArguments?: any): TimesRow;
				/**
				 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
				 * @return 
				 */
				getAriaLabelledBy(): sap.ui.core.ID[];
				/**
				 * Gets current value of property <code>date</code>.
				 * 
				 * A date as JavaScript Date object. The month including this date is rendered and this date is focused initially (if no other focus is set).
				 * If the date property is not in the range <code>startDate</code> + <code>items</code> in the rendering phase,
				 * it is set to the <code>startDate</code>.
				 * So after setting the <code>startDate</code> the date should be set to be in the visible range.
				 * @return Value of property <code>date</code>
				 */
				getDate(): any;
				/**
				 * Gets current value of property <code>intervalMinutes</code>.
				 * 
				 * Size of on time interval in minutes, default is 60 minutes.
				 * 
				 * <b>Note:</b> the start of the interval calculation is always <code>startDat</code> at 00:00.
				 * 
				 * A interval longer then 720 minutes is not allowed. Please use the <code>DatesRow</code> instead.
				 * 
				 * A day must be divisible by this interval size. One interval must not include more than one day.
				 * 
				 * Default value is <code>60</code>.
				 * @return Value of property <code>intervalMinutes</code>
				 */
				getIntervalMinutes(): number;
				/**
				 * Gets current value of property <code>intervalSelection</code>.
				 * 
				 * If set, interval selection is allowed
				 * 
				 * Default value is <code>false</code>.
				 * @return Value of property <code>intervalSelection</code>
				 */
				getIntervalSelection(): boolean;
				/**
				 * Gets current value of property <code>items</code>.
				 * 
				 * Number of time items displayed
				 * 
				 * Default value is <code>12</code>.
				 * @return Value of property <code>items</code>
				 */
				getItems(): number;
				/**
				 * ID of the element which is the current target of the association <code>legend</code>, or <code>null</code>.
				 * @return 
				 */
				getLegend(): sap.ui.core.ID;
				/**
				 * Gets content of aggregation <code>selectedDates</code>.
				 * 
				 * Date ranges for selected dates.
				 * If <code>singleSelection</code> is set, only the first entry is used.
				 * @return 
				 */
				getSelectedDates(): sap.ui.unified.DateRange[];
				/**
				 * Gets current value of property <code>showHeader</code>.
				 * 
				 * If set, a header with the years is shown to visualize what month belongs to what year.
				 * 
				 * Default value is <code>false</code>.
				 * @return Value of property <code>showHeader</code>
				 */
				getShowHeader(): boolean;
				/**
				 * Gets current value of property <code>singleSelection</code>.
				 * 
				 * If set, only a single month or interval, if intervalSelection is enabled, can be selected
				 * 
				 * <b>Note:</b> Selection of multiple intervals is not supported in the current version.
				 * 
				 * Default value is <code>true</code>.
				 * @return Value of property <code>singleSelection</code>
				 */
				getSingleSelection(): boolean;
				/**
				 * Gets content of aggregation <code>specialDates</code>.
				 * 
				 * Date ranges with type to visualize special item in the row.
				 * If one day is assigned to more than one type, only the first one will be used.
				 * @return 
				 */
				getSpecialDates(): sap.ui.unified.DateTypeRange[];
				/**
				 * Gets current value of property <code>startDate</code>.
				 * 
				 * Start date, as JavaScript Date object, of the row.
				 * @return Value of property <code>startDate</code>
				 */
				getStartDate(): any;
				/**
				 * Checks for the provided <code>sap.ui.unified.DateRange</code> in the aggregation <code>selectedDates</code>.
				 * and returns its index if found or -1 otherwise.
				 * @param oSelectedDate The selectedDate whose index is looked for
				 * @return The index of the provided control in the aggregation if found, or -1 otherwise
				 */
				indexOfSelectedDate(oSelectedDate: sap.ui.unified.DateRange): number;
				/**
				 * Checks for the provided <code>sap.ui.unified.DateTypeRange</code> in the aggregation <code>specialDates</code>.
				 * and returns its index if found or -1 otherwise.
				 * @param oSpecialDate The specialDate whose index is looked for
				 * @return The index of the provided control in the aggregation if found, or -1 otherwise
				 */
				indexOfSpecialDate(oSpecialDate: sap.ui.unified.DateTypeRange): number;
				/**
				 * Inserts a selectedDate into the aggregation <code>selectedDates</code>.
				 * @param oSelectedDate the selectedDate to insert; if empty, nothing is inserted
				 * @param iIndex the <code>0</code>-based index the selectedDate should be inserted at; for
				 *              a negative value of <code>iIndex</code>, the selectedDate is inserted at position 0; for a value
				 *              greater than the current size of the aggregation, the selectedDate is inserted at
				 *              the last position
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				insertSelectedDate(oSelectedDate: sap.ui.unified.DateRange, iIndex: number): TimesRow;
				/**
				 * Inserts a specialDate into the aggregation <code>specialDates</code>.
				 * @param oSpecialDate the specialDate to insert; if empty, nothing is inserted
				 * @param iIndex the <code>0</code>-based index the specialDate should be inserted at; for
				 *              a negative value of <code>iIndex</code>, the specialDate is inserted at position 0; for a value
				 *              greater than the current size of the aggregation, the specialDate is inserted at
				 *              the last position
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				insertSpecialDate(oSpecialDate: sap.ui.unified.DateTypeRange, iIndex: number): TimesRow;
				/**
				 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
				 * @return An array of the removed elements (might be empty)
				 */
				removeAllAriaLabelledBy(): sap.ui.core.ID[];
				/**
				 * Removes all the controls from the aggregation <code>selectedDates</code>.
				 * 
				 * Additionally, it unregisters them from the hosting UIArea.
				 * @return An array of the removed elements (might be empty)
				 */
				removeAllSelectedDates(): sap.ui.unified.DateRange[];
				/**
				 * Removes all the controls from the aggregation <code>specialDates</code>.
				 * 
				 * Additionally, it unregisters them from the hosting UIArea.
				 * @return An array of the removed elements (might be empty)
				 */
				removeAllSpecialDates(): sap.ui.unified.DateTypeRange[];
				/**
				 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
				 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
				 * @return The removed ariaLabelledBy or <code>null</code>
				 */
				removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
				/**
				 * Removes a selectedDate from the aggregation <code>selectedDates</code>.
				 * @param vSelectedDate The selectedDate to remove or its index or id
				 * @return The removed selectedDate or <code>null</code>
				 */
				removeSelectedDate(vSelectedDate: number|string|sap.ui.unified.DateRange): sap.ui.unified.DateRange;
				/**
				 * Removes a specialDate from the aggregation <code>specialDates</code>.
				 * @param vSpecialDate The specialDate to remove or its index or id
				 * @return The removed specialDate or <code>null</code>
				 */
				removeSpecialDate(vSpecialDate: number|string|sap.ui.unified.DateTypeRange): sap.ui.unified.DateTypeRange;
				/**
				 * Sets a new value for property <code>date</code>.
				 * 
				 * A date as JavaScript Date object. The month including this date is rendered and this date is focused initially (if no other focus is set).
				 * If the date property is not in the range <code>startDate</code> + <code>items</code> in the rendering phase,
				 * it is set to the <code>startDate</code>.
				 * So after setting the <code>startDate</code> the date should be set to be in the visible range.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param oDate New value for property <code>date</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setDate(oDate: any): TimesRow;
				/**
				 * Sets a new value for property <code>intervalMinutes</code>.
				 * 
				 * Size of on time interval in minutes, default is 60 minutes.
				 * 
				 * <b>Note:</b> the start of the interval calculation is always <code>startDat</code> at 00:00.
				 * 
				 * A interval longer then 720 minutes is not allowed. Please use the <code>DatesRow</code> instead.
				 * 
				 * A day must be divisible by this interval size. One interval must not include more than one day.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>60</code>.
				 * @param iIntervalMinutes New value for property <code>intervalMinutes</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setIntervalMinutes(iIntervalMinutes: number): TimesRow;
				/**
				 * Sets a new value for property <code>intervalSelection</code>.
				 * 
				 * If set, interval selection is allowed
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>false</code>.
				 * @param bIntervalSelection New value for property <code>intervalSelection</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setIntervalSelection(bIntervalSelection: boolean): TimesRow;
				/**
				 * Sets a new value for property <code>items</code>.
				 * 
				 * Number of time items displayed
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>12</code>.
				 * @param iItems New value for property <code>items</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setItems(iItems: number): TimesRow;
				/**
				 * Sets the associated <code>legend</code>.
				 * @param oLegend ID of an element which becomes the new target of this legend association; alternatively, an element instance may be given
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setLegend(oLegend: sap.ui.core.ID|sap.ui.unified.CalendarLegend): TimesRow;
				/**
				 * Sets a new value for property <code>showHeader</code>.
				 * 
				 * If set, a header with the years is shown to visualize what month belongs to what year.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>false</code>.
				 * @param bShowHeader New value for property <code>showHeader</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setShowHeader(bShowHeader: boolean): TimesRow;
				/**
				 * Sets a new value for property <code>singleSelection</code>.
				 * 
				 * If set, only a single month or interval, if intervalSelection is enabled, can be selected
				 * 
				 * <b>Note:</b> Selection of multiple intervals is not supported in the current version.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>true</code>.
				 * @param bSingleSelection New value for property <code>singleSelection</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setSingleSelection(bSingleSelection: boolean): TimesRow;
				/**
				 * Sets a new value for property <code>startDate</code>.
				 * 
				 * Start date, as JavaScript Date object, of the row.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param oStartDate New value for property <code>startDate</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setStartDate(oStartDate: any): TimesRow;
			}
		
			class YearPicker extends sap.ui.core.Control {
				/**
				 * Constructor for a new YearPicker.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: sap.ui.unified.calendar.YearPickerMetadata);
				/**
				 * Constructor for a new YearPicker.
				 * 
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @note Any overloads to support not documented metadata
				 * @param sId id for the new control, generated automatically if no id is given(optional)
				 * @param mSettings initial settings for the new control(optional)
				 */
				constructor(sId?: string, mSettings?: any);
				/**
				 * Attaches event handler <code>fnFunction</code> to the <code>pageChange</code> event of this <code>sap.ui.unified.calendar.YearPicker</code>.
				 * 
				 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
				 * otherwise it will be bound to this <code>sap.ui.unified.calendar.YearPicker</code> itself.
				 * 
				 * The <code>pageChange</code> event is fired if the displayed years are changed by user navigation.
				 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
				 * @param fnFunction The function to be called when the event occurs
				 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.calendar.YearPicker</code> itself(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				attachPageChange(oData: any, fnFunction: any, oListener?: any): YearPicker;
				/**
				 * Attaches event handler <code>fnFunction</code> to the <code>select</code> event of this <code>sap.ui.unified.calendar.YearPicker</code>.
				 * 
				 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
				 * otherwise it will be bound to this <code>sap.ui.unified.calendar.YearPicker</code> itself.
				 * 
				 * Month selection changed
				 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
				 * @param fnFunction The function to be called when the event occurs
				 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.calendar.YearPicker</code> itself(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				attachSelect(oData: any, fnFunction: any, oListener?: any): YearPicker;
				/**
				 * Detaches event handler <code>fnFunction</code> from the <code>pageChange</code> event of this <code>sap.ui.unified.calendar.YearPicker</code>.
				 * 
				 * The passed function and listener object must match the ones used for event registration.
				 * @param fnFunction The function to be called, when the event occurs
				 * @param oListener Context object on which the given function had to be called
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				detachPageChange(fnFunction: any, oListener: any): YearPicker;
				/**
				 * Detaches event handler <code>fnFunction</code> from the <code>select</code> event of this <code>sap.ui.unified.calendar.YearPicker</code>.
				 * 
				 * The passed function and listener object must match the ones used for event registration.
				 * @param fnFunction The function to be called, when the event occurs
				 * @param oListener Context object on which the given function had to be called
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				detachSelect(fnFunction: any, oListener: any): YearPicker;
				/**
				 * Creates a new subclass of class sap.ui.unified.calendar.YearPicker with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Fires event <code>pageChange</code> to attached listeners.
				 * @param mArguments The arguments to pass along with the event(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				firePageChange(mArguments?: any): YearPicker;
				/**
				 * Fires event <code>select</code> to attached listeners.
				 * @param mArguments The arguments to pass along with the event(optional)
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				fireSelect(mArguments?: any): YearPicker;
				/**
				 * Gets current value of property <code>columns</code>.
				 * 
				 * number of years in each row
				 * 0 means just to have all years in one row, independent of the number
				 * 
				 * Default value is <code>4</code>.
				 * @return Value of property <code>columns</code>
				 */
				getColumns(): number;
				/**
				 * Gets current value of property <code>date</code>.
				 * 
				 * Date as JavaScript Date object. For this date a <code>YearPicker</code> is rendered. If a Year is selected the
				 * date is updated with the start date of the selected year (depending on the calendar type).
				 * @return Value of property <code>date</code>
				 */
				getDate(): any;
				/**
				 * return the first date of the first rendered year
				 * <b>Note:</b> If the YearPicker is not rendered no date is returned
				 * @return JavaScript Date Object
				 */
				getFirstRenderedDate(): any;
				/**
				 * Gets current value of property <code>primaryCalendarType</code>.
				 * 
				 * If set, the calendar type is used for display.
				 * If not set, the calendar type of the global configuration is used.
				 * @return Value of property <code>primaryCalendarType</code>
				 */
				getPrimaryCalendarType(): sap.ui.core.CalendarType;
				/**
				 * Gets current value of property <code>years</code>.
				 * 
				 * number of displayed years
				 * 
				 * Default value is <code>20</code>.
				 * @return Value of property <code>years</code>
				 */
				getYears(): number;
				/**
				 * displays the next page
				 * @return <code>this</code> to allow method chaining
				 */
				nextPage(): YearPicker;
				/**
				 * displays the previous page
				 * @return <code>this</code> to allow method chaining
				 */
				previousPage(): YearPicker;
				/**
				 * Sets a new value for property <code>columns</code>.
				 * 
				 * number of years in each row
				 * 0 means just to have all years in one row, independent of the number
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>4</code>.
				 * @param iColumns New value for property <code>columns</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setColumns(iColumns: number): YearPicker;
				/**
				 * Sets a new value for property <code>date</code>.
				 * 
				 * Date as JavaScript Date object. For this date a <code>YearPicker</code> is rendered. If a Year is selected the
				 * date is updated with the start date of the selected year (depending on the calendar type).
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param oDate New value for property <code>date</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setDate(oDate: any): YearPicker;
				/**
				 * Sets a new value for property <code>primaryCalendarType</code>.
				 * 
				 * If set, the calendar type is used for display.
				 * If not set, the calendar type of the global configuration is used.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sPrimaryCalendarType New value for property <code>primaryCalendarType</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setPrimaryCalendarType(sPrimaryCalendarType: sap.ui.core.CalendarType): YearPicker;
				/**
				 * Sets a new value for property <code>years</code>.
				 * 
				 * number of displayed years
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>20</code>.
				 * @param iYears New value for property <code>years</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setYears(iYears: number): YearPicker;
			}
		
			interface DatesRowMetadata extends sap.ui.unified.calendar.MonthMetadata {
				/**
				 * Start date of the row
				 * If in rendering phase the date property is not in the range startDate + days,
				 * it is set to the start date
				 * So after setting the start date the date should be set to be in the range of the start date
				 */
				startDate?: any;
				/**
				 * number of days displayed
				 * @default 7
				 */
				days?: number;
				/**
				 * If set the day names are shown in a separate line.
				 * If not set the day names are shown inside the single days.
				 * @default true
				 */
				showDayNamesLine?: boolean;
			}
		
			interface HeaderMetadata extends sap.ui.core.ControlMetadata {
				/**
				 * Text of the first button (normally day)
				 */
				textButton0?: string;
				/**
				 * Additional text of the first button (normally day)
				 */
				additionalTextButton0?: string;
				/**
				 * aria-label of the first button (normally day)
				 */
				ariaLabelButton0?: string;
				/**
				 * If set, the first button will be displayed
				 * 
				 * <b>Note:</b> The default is set to false to be compatible to older versions
				 * @default false
				 */
				visibleButton0?: boolean;
				/**
				 * Text of the second button (normally month)
				 */
				textButton1?: string;
				/**
				 * Additional text of the second button (normally month)
				 */
				additionalTextButton1?: string;
				/**
				 * aria-label of the second button (normally month)
				 */
				ariaLabelButton1?: string;
				/**
				 * If set, the second button will be displayed
				 * @default true
				 */
				visibleButton1?: boolean;
				/**
				 * Text of the third button (normally year)
				 */
				textButton2?: string;
				/**
				 * Additional text of the third button (normally year)
				 */
				additionalTextButton2?: string;
				/**
				 * aria-label of the third button (normally year)
				 */
				ariaLabelButton2?: string;
				/**
				 * If set, the third button will be displayed
				 * @default true
				 */
				visibleButton2?: boolean;
				/**
				 * Enables the previous button
				 * @default true
				 */
				enabledPrevious?: boolean;
				/**
				 * Enables the Next button
				 * @default true
				 */
				enabledNext?: boolean;
			}
		
			interface MonthMetadata extends sap.ui.core.ControlMetadata {
				/**
				 * the month including this date is rendered and this date is initial focused (if no other focus set)
				 */
				date?: any;
				/**
				 * If set, interval selection is allowed
				 * @default false
				 */
				intervalSelection?: boolean;
				/**
				 * If set, only a single date or interval, if intervalSelection is enabled, can be selected
				 * @default true
				 */
				singleSelection?: boolean;
				/**
				 * If set, a header with the month name is shown
				 * @default false
				 */
				showHeader?: boolean;
				/**
				 * If set, the first day of the displayed week is this day. Valid values are 0 to 6.
				 * If not a valid value is set, the default of the used locale is used.
				 * @default -1
				 */
				firstDayOfWeek?: number;
				/**
				 * If set, the provided weekdays are displayed as non-working days.
				 * Valid values inside the array are 0 to 6.
				 * If not set, the weekend defined in the locale settings is displayed as non-working days.
				 */
				nonWorkingDays?: number[];
				/**
				 * If set, the calendar type is used for display.
				 * If not set, the calendar type of the global configuration is used.
				 */
				primaryCalendarType?: sap.ui.core.CalendarType;
				/**
				 * If set, the days are also displayed in this calendar type
				 * If not set, the dates are only displayed in the primary calendar type
				 */
				secondaryCalendarType?: sap.ui.core.CalendarType;
				/**
				 * Width of Month
				 */
				width?: sap.ui.core.CSSSize;
			}
		
			interface MonthPickerMetadata extends sap.ui.core.ControlMetadata {
				/**
				 * The month is initial focused and selected
				 * The value must be between 0 and 11
				 * @default 0
				 */
				month?: number;
				/**
				 * number of displayed months
				 * The value must be between 1 and 12
				 * @default 12
				 */
				months?: number;
				/**
				 * number of months in each row
				 * The value must be between 0 and 12 (0 means just to have all months in one row, independent of the number)
				 * @default 3
				 */
				columns?: number;
				/**
				 * If set, the calendar type is used for display.
				 * If not set, the calendar type of the global configuration is used.
				 */
				primaryCalendarType?: sap.ui.core.CalendarType;
			}
		
			interface MonthsRowMetadata extends sap.ui.core.ControlMetadata {
				/**
				 * A date as JavaScript Date object. The month including this date is rendered and this date is focused initially (if no other focus is set).
				 * If the date property is not in the range <code>startDate</code> + <code>months</code> in the rendering phase,
				 * it is set to the <code>startDate</code>.
				 * So after setting the <code>startDate</code> the date should be set to be in the visible range.
				 */
				date?: any;
				/**
				 * Start date, as JavaScript Date object, of the row. The month of this date is the first month of the displayed row.
				 */
				startDate?: any;
				/**
				 * Number of months displayed
				 * @default 12
				 */
				months?: number;
				/**
				 * If set, interval selection is allowed
				 * @default false
				 */
				intervalSelection?: boolean;
				/**
				 * If set, only a single month or interval, if intervalSelection is enabled, can be selected
				 * 
				 * <b>Note:</b> Selection of multiple intervals is not supported in the current version.
				 * @default true
				 */
				singleSelection?: boolean;
				/**
				 * If set, a header with the years is shown to visualize what month belongs to what year.
				 * @default false
				 */
				showHeader?: boolean;
			}
		
			interface TimesRowMetadata extends sap.ui.core.ControlMetadata {
				/**
				 * A date as JavaScript Date object. The month including this date is rendered and this date is focused initially (if no other focus is set).
				 * If the date property is not in the range <code>startDate</code> + <code>items</code> in the rendering phase,
				 * it is set to the <code>startDate</code>.
				 * So after setting the <code>startDate</code> the date should be set to be in the visible range.
				 */
				date?: any;
				/**
				 * Start date, as JavaScript Date object, of the row.
				 */
				startDate?: any;
				/**
				 * Number of time items displayed
				 * @default 12
				 */
				items?: number;
				/**
				 * Size of on time interval in minutes, default is 60 minutes.
				 * 
				 * <b>Note:</b> the start of the interval calculation is always <code>startDat</code> at 00:00.
				 * 
				 * A interval longer then 720 minutes is not allowed. Please use the <code>DatesRow</code> instead.
				 * 
				 * A day must be divisible by this interval size. One interval must not include more than one day.
				 * @default 60
				 */
				intervalMinutes?: number;
				/**
				 * If set, interval selection is allowed
				 * @default false
				 */
				intervalSelection?: boolean;
				/**
				 * If set, only a single month or interval, if intervalSelection is enabled, can be selected
				 * 
				 * <b>Note:</b> Selection of multiple intervals is not supported in the current version.
				 * @default true
				 */
				singleSelection?: boolean;
				/**
				 * If set, a header with the years is shown to visualize what month belongs to what year.
				 * @default false
				 */
				showHeader?: boolean;
			}
		
			interface YearPickerMetadata extends sap.ui.core.ControlMetadata {
				/**
				 * number of displayed years
				 * @default 20
				 */
				years?: number;
				/**
				 * number of years in each row
				 * 0 means just to have all years in one row, independent of the number
				 * @default 4
				 */
				columns?: number;
				/**
				 * Date as JavaScript Date object. For this date a <code>YearPicker</code> is rendered. If a Year is selected the
				 * date is updated with the start date of the selected year (depending on the calendar type).
				 */
				date?: any;
				/**
				 * If set, the calendar type is used for display.
				 * If not set, the calendar type of the global configuration is used.
				 */
				primaryCalendarType?: sap.ui.core.CalendarType;
			}
		}
	
		class Calendar extends sap.ui.core.Control {
			/**
			 * Constructor for a new Calendar.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.unified.CalendarMetadata);
			/**
			 * Constructor for a new Calendar.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
			 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): Calendar;
			/**
			 * Adds some disabledDate to the aggregation <code>disabledDates</code>.
			 * @param oDisabledDate the disabledDate to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addDisabledDate(oDisabledDate: DateRange): Calendar;
			/**
			 * Adds some selectedDate to the aggregation <code>selectedDates</code>.
			 * @param oSelectedDate the selectedDate to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addSelectedDate(oSelectedDate: DateRange): Calendar;
			/**
			 * Adds some specialDate to the aggregation <code>specialDates</code>.
			 * @param oSpecialDate the specialDate to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addSpecialDate(oSpecialDate: DateTypeRange): Calendar;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>cancel</code> event of this <code>sap.ui.unified.Calendar</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.unified.Calendar</code> itself.
			 * 
			 * Date selection was cancelled
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.Calendar</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachCancel(oData: any, fnFunction: any, oListener?: any): Calendar;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>select</code> event of this <code>sap.ui.unified.Calendar</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.unified.Calendar</code> itself.
			 * 
			 * Date selection changed
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.Calendar</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachSelect(oData: any, fnFunction: any, oListener?: any): Calendar;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>startDateChange</code> event of this <code>sap.ui.unified.Calendar</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.unified.Calendar</code> itself.
			 * 
			 * <code>startDate</code> was changed while navigation in <code>Calendar</code>
			 * 
			 * Use <code>getStartDate</code> function to determine the current start date
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.Calendar</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachStartDateChange(oData: any, fnFunction: any, oListener?: any): Calendar;
			/**
			 * Destroys all the disabledDates in the aggregation <code>disabledDates</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyDisabledDates(): Calendar;
			/**
			 * Destroys all the selectedDates in the aggregation <code>selectedDates</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroySelectedDates(): Calendar;
			/**
			 * Destroys all the specialDates in the aggregation <code>specialDates</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroySpecialDates(): Calendar;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>cancel</code> event of this <code>sap.ui.unified.Calendar</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachCancel(fnFunction: any, oListener: any): Calendar;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>select</code> event of this <code>sap.ui.unified.Calendar</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachSelect(fnFunction: any, oListener: any): Calendar;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>startDateChange</code> event of this <code>sap.ui.unified.Calendar</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachStartDateChange(fnFunction: any, oListener: any): Calendar;
			/**
			 * Displays a date in the calendar but don't set the focus.
			 * @param oDate JavaScript date object for focused date.
			 * @return <code>this</code> to allow method chaining
			 */
			displayDate(oDate: any): Calendar;
			/**
			 * Creates a new subclass of class sap.ui.unified.Calendar with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Fires event <code>cancel</code> to attached listeners.
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireCancel(mArguments?: any): Calendar;
			/**
			 * Fires event <code>select</code> to attached listeners.
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireSelect(mArguments?: any): Calendar;
			/**
			 * Fires event <code>startDateChange</code> to attached listeners.
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireStartDateChange(mArguments?: any): Calendar;
			/**
			 * Sets the focused date of the calendar.
			 * @param oDate JavaScript date object for focused date.
			 * @return <code>this</code> to allow method chaining
			 */
			focusDate(oDate: any): Calendar;
			/**
			 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
			 * @return 
			 */
			getAriaLabelledBy(): sap.ui.core.ID[];
			/**
			 * Gets content of aggregation <code>disabledDates</code>.
			 * 
			 * Date Ranges for disabled dates
			 * @return 
			 */
			getDisabledDates(): DateRange[];
			/**
			 * Gets current value of property <code>firstDayOfWeek</code>.
			 * 
			 * If set, the first day of the displayed week is this day. Valid values are 0 to 6.
			 * If not a valid value is set, the default of the used locale is used.
			 * 
			 * Default value is <code>-1</code>.
			 * @return Value of property <code>firstDayOfWeek</code>
			 */
			getFirstDayOfWeek(): number;
			/**
			 * Gets current value of property <code>intervalSelection</code>.
			 * 
			 * If set, interval selection is allowed
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>intervalSelection</code>
			 */
			getIntervalSelection(): boolean;
			/**
			 * ID of the element which is the current target of the association <code>legend</code>, or <code>null</code>.
			 * @return 
			 */
			getLegend(): sap.ui.core.ID;
			/**
			 * Gets current value of property <code>maxDate</code>.
			 * 
			 * Maximum date that can be shown and selected in the Calendar. This must be a JavaScript date object.
			 * 
			 * <b>Note:</b> if the date is inside of a month the complete month is displayed,
			 * but dates outside the valid range can not be selected.
			 * 
			 * <b>Note:</b> If the <code>maxDate</code> is set to be before the <code>minDate</code>,
			 * the <code>minDate</code> is set to the begin of the month of the <code>maxDate</code>.
			 * @return Value of property <code>maxDate</code>
			 */
			getMaxDate(): any;
			/**
			 * Gets current value of property <code>minDate</code>.
			 * 
			 * Minimum date that can be shown and selected in the Calendar. This must be a JavaScript date object.
			 * 
			 * <b>Note:</b> if the date is inside of a month the complete month is displayed,
			 * but dates outside the valid range can not be selected.
			 * 
			 * <b>Note:</b> If the <code>minDate</code> is set to be after the <code>maxDate</code>,
			 * the <code>maxDate</code> is set to the end of the month of the <code>minDate</code>.
			 * @return Value of property <code>minDate</code>
			 */
			getMinDate(): any;
			/**
			 * Gets current value of property <code>months</code>.
			 * 
			 * number of months displayed
			 * on phones always only one month is displayed
			 * 
			 * Default value is <code>1</code>.
			 * @return Value of property <code>months</code>
			 */
			getMonths(): number;
			/**
			 * Gets current value of property <code>nonWorkingDays</code>.
			 * 
			 * If set, the provided weekdays are displayed as non-working days.
			 * Valid values inside the array are 0 to 6.
			 * If not set, the weekend defined in the locale settings is displayed as non-working days.
			 * @return Value of property <code>nonWorkingDays</code>
			 */
			getNonWorkingDays(): number[];
			/**
			 * Gets current value of property <code>primaryCalendarType</code>.
			 * 
			 * If set, the calendar type is used for display.
			 * If not set, the calendar type of the global configuration is used.
			 * @return Value of property <code>primaryCalendarType</code>
			 */
			getPrimaryCalendarType(): sap.ui.core.CalendarType;
			/**
			 * Gets current value of property <code>secondaryCalendarType</code>.
			 * 
			 * If set, the days are also displayed in this calendar type
			 * If not set, the dates are only displayed in the primary calendar type
			 * @return Value of property <code>secondaryCalendarType</code>
			 */
			getSecondaryCalendarType(): sap.ui.core.CalendarType;
			/**
			 * Gets content of aggregation <code>selectedDates</code>.
			 * 
			 * Date Ranges for selected dates of the DatePicker
			 * @return 
			 */
			getSelectedDates(): DateRange[];
			/**
			 * Gets current value of property <code>singleSelection</code>.
			 * 
			 * If set, only a single date or interval, if intervalSelection is enabled, can be selected
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>singleSelection</code>
			 */
			getSingleSelection(): boolean;
			/**
			 * Gets content of aggregation <code>specialDates</code>.
			 * 
			 * Date Range with type to visualize special days in the Calendar.
			 * If one day is assigned to more than one Type, only the first one will be used.
			 * @return 
			 */
			getSpecialDates(): DateTypeRange[];
			/**
			 * Returns the first day of the displayed month.
			 * 
			 * There might be some days of the previous month shown, but they can not be focused.
			 * @return JavaScript date object for start date.
			 */
			getStartDate(): any;
			/**
			 * Gets current value of property <code>width</code>.
			 * 
			 * Width of Calendar
			 * 
			 * <b>Note:</b> There is a theme depending minimum width, so the calendar can not be set smaller.
			 * @return Value of property <code>width</code>
			 */
			getWidth(): sap.ui.core.CSSSize;
			/**
			 * Checks for the provided <code>sap.ui.unified.DateRange</code> in the aggregation <code>disabledDates</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oDisabledDate The disabledDate whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfDisabledDate(oDisabledDate: DateRange): number;
			/**
			 * Checks for the provided <code>sap.ui.unified.DateRange</code> in the aggregation <code>selectedDates</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oSelectedDate The selectedDate whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfSelectedDate(oSelectedDate: DateRange): number;
			/**
			 * Checks for the provided <code>sap.ui.unified.DateTypeRange</code> in the aggregation <code>specialDates</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oSpecialDate The specialDate whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfSpecialDate(oSpecialDate: DateTypeRange): number;
			/**
			 * Inserts a disabledDate into the aggregation <code>disabledDates</code>.
			 * @param oDisabledDate the disabledDate to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the disabledDate should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the disabledDate is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the disabledDate is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertDisabledDate(oDisabledDate: DateRange, iIndex: number): Calendar;
			/**
			 * Inserts a selectedDate into the aggregation <code>selectedDates</code>.
			 * @param oSelectedDate the selectedDate to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the selectedDate should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the selectedDate is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the selectedDate is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertSelectedDate(oSelectedDate: DateRange, iIndex: number): Calendar;
			/**
			 * Inserts a specialDate into the aggregation <code>specialDates</code>.
			 * @param oSpecialDate the specialDate to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the specialDate should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the specialDate is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the specialDate is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertSpecialDate(oSpecialDate: DateTypeRange, iIndex: number): Calendar;
			/**
			 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllAriaLabelledBy(): sap.ui.core.ID[];
			/**
			 * Removes all the controls from the aggregation <code>disabledDates</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllDisabledDates(): DateRange[];
			/**
			 * Removes all the controls from the aggregation <code>selectedDates</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllSelectedDates(): DateRange[];
			/**
			 * Removes all the controls from the aggregation <code>specialDates</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllSpecialDates(): DateTypeRange[];
			/**
			 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
			 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
			 * @return The removed ariaLabelledBy or <code>null</code>
			 */
			removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
			/**
			 * Removes a disabledDate from the aggregation <code>disabledDates</code>.
			 * @param vDisabledDate The disabledDate to remove or its index or id
			 * @return The removed disabledDate or <code>null</code>
			 */
			removeDisabledDate(vDisabledDate: number|string|DateRange): DateRange;
			/**
			 * Removes a selectedDate from the aggregation <code>selectedDates</code>.
			 * @param vSelectedDate The selectedDate to remove or its index or id
			 * @return The removed selectedDate or <code>null</code>
			 */
			removeSelectedDate(vSelectedDate: number|string|DateRange): DateRange;
			/**
			 * Removes a specialDate from the aggregation <code>specialDates</code>.
			 * @param vSpecialDate The specialDate to remove or its index or id
			 * @return The removed specialDate or <code>null</code>
			 */
			removeSpecialDate(vSpecialDate: number|string|DateTypeRange): DateTypeRange;
			/**
			 * Sets a new value for property <code>firstDayOfWeek</code>.
			 * 
			 * If set, the first day of the displayed week is this day. Valid values are 0 to 6.
			 * If not a valid value is set, the default of the used locale is used.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>-1</code>.
			 * @param iFirstDayOfWeek New value for property <code>firstDayOfWeek</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setFirstDayOfWeek(iFirstDayOfWeek: number): Calendar;
			/**
			 * Sets a new value for property <code>intervalSelection</code>.
			 * 
			 * If set, interval selection is allowed
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bIntervalSelection New value for property <code>intervalSelection</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setIntervalSelection(bIntervalSelection: boolean): Calendar;
			/**
			 * Sets the associated <code>legend</code>.
			 * @param oLegend ID of an element which becomes the new target of this legend association; alternatively, an element instance may be given
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setLegend(oLegend: sap.ui.core.ID|CalendarLegend): Calendar;
			/**
			 * Sets a new value for property <code>maxDate</code>.
			 * 
			 * Maximum date that can be shown and selected in the Calendar. This must be a JavaScript date object.
			 * 
			 * <b>Note:</b> if the date is inside of a month the complete month is displayed,
			 * but dates outside the valid range can not be selected.
			 * 
			 * <b>Note:</b> If the <code>maxDate</code> is set to be before the <code>minDate</code>,
			 * the <code>minDate</code> is set to the begin of the month of the <code>maxDate</code>.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param oMaxDate New value for property <code>maxDate</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setMaxDate(oMaxDate: any): Calendar;
			/**
			 * Sets a new value for property <code>minDate</code>.
			 * 
			 * Minimum date that can be shown and selected in the Calendar. This must be a JavaScript date object.
			 * 
			 * <b>Note:</b> if the date is inside of a month the complete month is displayed,
			 * but dates outside the valid range can not be selected.
			 * 
			 * <b>Note:</b> If the <code>minDate</code> is set to be after the <code>maxDate</code>,
			 * the <code>maxDate</code> is set to the end of the month of the <code>minDate</code>.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param oMinDate New value for property <code>minDate</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setMinDate(oMinDate: any): Calendar;
			/**
			 * Sets a new value for property <code>months</code>.
			 * 
			 * number of months displayed
			 * on phones always only one month is displayed
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>1</code>.
			 * @param iMonths New value for property <code>months</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setMonths(iMonths: number): Calendar;
			/**
			 * Sets a new value for property <code>nonWorkingDays</code>.
			 * 
			 * If set, the provided weekdays are displayed as non-working days.
			 * Valid values inside the array are 0 to 6.
			 * If not set, the weekend defined in the locale settings is displayed as non-working days.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sNonWorkingDays New value for property <code>nonWorkingDays</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setNonWorkingDays(sNonWorkingDays: number[]): Calendar;
			/**
			 * Sets a new value for property <code>primaryCalendarType</code>.
			 * 
			 * If set, the calendar type is used for display.
			 * If not set, the calendar type of the global configuration is used.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sPrimaryCalendarType New value for property <code>primaryCalendarType</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setPrimaryCalendarType(sPrimaryCalendarType: sap.ui.core.CalendarType): Calendar;
			/**
			 * Sets a new value for property <code>secondaryCalendarType</code>.
			 * 
			 * If set, the days are also displayed in this calendar type
			 * If not set, the dates are only displayed in the primary calendar type
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sSecondaryCalendarType New value for property <code>secondaryCalendarType</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSecondaryCalendarType(sSecondaryCalendarType: sap.ui.core.CalendarType): Calendar;
			/**
			 * Sets a new value for property <code>singleSelection</code>.
			 * 
			 * If set, only a single date or interval, if intervalSelection is enabled, can be selected
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bSingleSelection New value for property <code>singleSelection</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSingleSelection(bSingleSelection: boolean): Calendar;
			/**
			 * Sets a new value for property <code>width</code>.
			 * 
			 * Width of Calendar
			 * 
			 * <b>Note:</b> There is a theme depending minimum width, so the calendar can not be set smaller.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sWidth New value for property <code>width</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setWidth(sWidth: sap.ui.core.CSSSize): Calendar;
		}
	
		class CalendarAppointment extends DateTypeRange {
			/**
			 * Constructor for a new <code>CalendarAppointment</code>.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.unified.CalendarAppointmentMetadata);
			/**
			 * Constructor for a new <code>CalendarAppointment</code>.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.ui.unified.CalendarAppointment with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.unified.DateTypeRange.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets current value of property <code>icon</code>.
			 * 
			 * Icon of the Appointment. (e.g. picture of the person)
			 * 
			 * URI of an image or an icon registered in sap.ui.core.IconPool.
			 * @return Value of property <code>icon</code>
			 */
			getIcon(): sap.ui.core.URI;
			/**
			 * Gets current value of property <code>key</code>.
			 * 
			 * Can be used as identifier of the appointment
			 * @return Value of property <code>key</code>
			 */
			getKey(): string;
			/**
			 * Gets current value of property <code>selected</code>.
			 * 
			 * Indicates if the icon is selected.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>selected</code>
			 */
			getSelected(): boolean;
			/**
			 * Gets current value of property <code>tentative</code>.
			 * 
			 * Indicates if the icon is tentative.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>tentative</code>
			 */
			getTentative(): boolean;
			/**
			 * Gets current value of property <code>text</code>.
			 * 
			 * Text of the appointment.
			 * @return Value of property <code>text</code>
			 */
			getText(): string;
			/**
			 * Gets current value of property <code>title</code>.
			 * 
			 * Title of the appointment.
			 * @return Value of property <code>title</code>
			 */
			getTitle(): string;
			/**
			 * Sets a new value for property <code>icon</code>.
			 * 
			 * Icon of the Appointment. (e.g. picture of the person)
			 * 
			 * URI of an image or an icon registered in sap.ui.core.IconPool.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sIcon New value for property <code>icon</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setIcon(sIcon: sap.ui.core.URI): CalendarAppointment;
			/**
			 * Sets a new value for property <code>key</code>.
			 * 
			 * Can be used as identifier of the appointment
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sKey New value for property <code>key</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setKey(sKey: string): CalendarAppointment;
			/**
			 * Sets a new value for property <code>selected</code>.
			 * 
			 * Indicates if the icon is selected.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bSelected New value for property <code>selected</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSelected(bSelected: boolean): CalendarAppointment;
			/**
			 * Sets a new value for property <code>tentative</code>.
			 * 
			 * Indicates if the icon is tentative.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bTentative New value for property <code>tentative</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setTentative(bTentative: boolean): CalendarAppointment;
			/**
			 * Sets a new value for property <code>text</code>.
			 * 
			 * Text of the appointment.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sText New value for property <code>text</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setText(sText: string): CalendarAppointment;
			/**
			 * Sets a new value for property <code>title</code>.
			 * 
			 * Title of the appointment.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sTitle New value for property <code>title</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setTitle(sTitle: string): CalendarAppointment;
		}
	
		class CalendarAppointmentVisualization {
			/**
			 * depending on the used theme the <code>CalendarAppoinment</code> are visualized with filled color
			 */
			static Filled: string;
			/**
			 * Standard visualization of an <code>CalendarAppoinment</code>
			 */
			static Standard: string;
		}
	
		class CalendarDateInterval extends Calendar {
			/**
			 * Constructor for a new <code>CalendarDateInterval</code>.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.unified.CalendarDateIntervalMetadata);
			/**
			 * Constructor for a new <code>CalendarDateInterval</code>.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.ui.unified.CalendarDateInterval with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.unified.Calendar.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets current value of property <code>days</code>.
			 * 
			 * number of days displayed
			 * on phones the maximum rendered number of days is 8.
			 * 
			 * Default value is <code>7</code>.
			 * @return Value of property <code>days</code>
			 */
			getDays(): number;
			/**
			 * Gets current value of property <code>pickerPopup</code>.
			 * 
			 * If set, the month- and yearPicker opens on a popup
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>pickerPopup</code>
			 */
			getPickerPopup(): boolean;
			/**
			 * Gets current value of property <code>showDayNamesLine</code>.
			 * 
			 * If set the day names are shown in a separate line.
			 * If not set the day names are shown inside the single days.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>showDayNamesLine</code>
			 */
			getShowDayNamesLine(): boolean;
			/**
			 * Sets a new value for property <code>days</code>.
			 * 
			 * number of days displayed
			 * on phones the maximum rendered number of days is 8.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>7</code>.
			 * @param iDays New value for property <code>days</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setDays(iDays: number): CalendarDateInterval;
			/**
			 * Setter for property <code>firstDayOfWeek</code>.
			 * 
			 * Property <code>firstDayOfWeek</code> is not supported in <code>sap.ui.unified.CalendarDateInterval</code> control.
			 * @param iFirstDayOfWeek first day of the week(optional)
			 */
			setFirstDayOfWeek(iFirstDayOfWeek?: number);
			/**
			 * Sets a new value for property <code>firstDayOfWeek</code>.
			 * 
			 * If set, the first day of the displayed week is this day. Valid values are 0 to 6.
			 * If not a valid value is set, the default of the used locale is used.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>-1</code>.
			 * @note Overload from base type sap.ui.unified.Calendar
			 * @param iFirstDayOfWeek New value for property <code>firstDayOfWeek</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setFirstDayOfWeek(iFirstDayOfWeek: number): Calendar;
			/**
			 * Setter for property <code>months</code>.
			 * 
			 * Property <code>months</code> is not supported in <code>sap.ui.unified.CalendarDateInterval</code> control.
			 * @param iMonths months(optional)
			 */
			setMonths(iMonths?: number);
			/**
			 * Sets a new value for property <code>months</code>.
			 * 
			 * number of months displayed
			 * on phones always only one month is displayed
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>1</code>.
			 * @note Overload from base type sap.ui.unified.Calendar
			 * @param iMonths New value for property <code>months</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setMonths(iMonths: number): Calendar;
			/**
			 * Sets a new value for property <code>pickerPopup</code>.
			 * 
			 * If set, the month- and yearPicker opens on a popup
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bPickerPopup New value for property <code>pickerPopup</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setPickerPopup(bPickerPopup: boolean): CalendarDateInterval;
			/**
			 * Sets a new value for property <code>showDayNamesLine</code>.
			 * 
			 * If set the day names are shown in a separate line.
			 * If not set the day names are shown inside the single days.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bShowDayNamesLine New value for property <code>showDayNamesLine</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setShowDayNamesLine(bShowDayNamesLine: boolean): CalendarDateInterval;
			/**
			 * Sets a new value for property <code>startDate</code>.
			 * 
			 * Start date of the Interval
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param oStartDate New value for property <code>startDate</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setStartDate(oStartDate: any): CalendarDateInterval;
		}
	
		class CalendarDayType {
			/**
			 * None: No special type is used
			 */
			static None: string;
			/**
			 * Type 01: The semantic meaning must be defined by the application. It can be shown in a legend.
			 */
			static Type01: string;
			/**
			 * Type 02: The semantic meaning must be defined by the application. It can be shown in a legend.
			 */
			static Type02: string;
			/**
			 * Type 03: The semantic meaning must be defined by the application. It can be shown in a legend.
			 */
			static Type03: string;
			/**
			 * Type 04: The semantic meaning must be defined by the application. It can be shown in a legend.
			 */
			static Type04: string;
			/**
			 * Type 05: The semantic meaning must be defined by the application. It can be shown in a legend.
			 */
			static Type05: string;
			/**
			 * Type 06: The semantic meaning must be defined by the application. It can be shown in a legend.
			 */
			static Type06: string;
			/**
			 * Type 07: The semantic meaning must be defined by the application. It can be shown in a legend.
			 */
			static Type07: string;
			/**
			 * Type 08: The semantic meaning must be defined by the application. It can be shown in a legend.
			 */
			static Type08: string;
			/**
			 * Type 09: The semantic meaning must be defined by the application. It can be shown in a legend.
			 */
			static Type09: string;
			/**
			 * Type 10: The semantic meaning must be defined by the application. It can be shown in a legend.
			 */
			static Type10: string;
		}
	
		class CalendarIntervalType {
			/**
			 * one code>CalendarRow</code> interval has the size of one day
			 */
			static Day: string;
			/**
			 * one code>CalendarRow</code> interval has the size of one hour
			 */
			static Hour: string;
			/**
			 * one code>CalendarRow</code> interval has the size of one Month
			 */
			static Month: string;
		}
	
		class CalendarLegend extends sap.ui.core.Control {
			/**
			 * Constructor for a new CalendarLegend.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.unified.CalendarLegendMetadata);
			/**
			 * Constructor for a new CalendarLegend.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some item to the aggregation <code>items</code>.
			 * @param oItem the item to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addItem(oItem: CalendarLegendItem): CalendarLegend;
			/**
			 * Destroys all the items in the aggregation <code>items</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyItems(): CalendarLegend;
			/**
			 * Creates a new subclass of class sap.ui.unified.CalendarLegend with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets current value of property <code>columnWidth</code>.
			 * 
			 * Width of the columns created in which the items are arranged.
			 * 
			 * Default value is <code>120px</code>.
			 * @return Value of property <code>columnWidth</code>
			 */
			getColumnWidth(): sap.ui.core.CSSSize;
			/**
			 * Gets content of aggregation <code>items</code>.
			 * 
			 * Items to be displayed.
			 * @return 
			 */
			getItems(): CalendarLegendItem[];
			/**
			 * Checks for the provided <code>sap.ui.unified.CalendarLegendItem</code> in the aggregation <code>items</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oItem The item whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfItem(oItem: CalendarLegendItem): number;
			/**
			 * Inserts a item into the aggregation <code>items</code>.
			 * @param oItem the item to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the item should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the item is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertItem(oItem: CalendarLegendItem, iIndex: number): CalendarLegend;
			/**
			 * Removes all the controls from the aggregation <code>items</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllItems(): CalendarLegendItem[];
			/**
			 * Removes a item from the aggregation <code>items</code>.
			 * @param vItem The item to remove or its index or id
			 * @return The removed item or <code>null</code>
			 */
			removeItem(vItem: number|string|CalendarLegendItem): CalendarLegendItem;
			/**
			 * Sets a new value for property <code>columnWidth</code>.
			 * 
			 * Width of the columns created in which the items are arranged.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>120px</code>.
			 * @param sColumnWidth New value for property <code>columnWidth</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setColumnWidth(sColumnWidth: sap.ui.core.CSSSize): CalendarLegend;
		}
	
		class CalendarLegendItem extends sap.ui.core.Element {
			/**
			 * Constructor for a new CalendarLegendItem.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.unified.CalendarLegendItemMetadata);
			/**
			 * Constructor for a new CalendarLegendItem.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.ui.unified.CalendarLegendItem with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets current value of property <code>text</code>.
			 * 
			 * Text to be displayed for the item.
			 * @return Value of property <code>text</code>
			 */
			getText(): string;
			/**
			 * Gets current value of property <code>type</code>.
			 * 
			 * Type of the item.
			 * If not set the type is automatically determined from the order of the items in the CalendarLegend.
			 * 
			 * Default value is <code>None</code>.
			 * @return Value of property <code>type</code>
			 */
			getType(): CalendarDayType;
			/**
			 * Sets a new value for property <code>text</code>.
			 * 
			 * Text to be displayed for the item.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sText New value for property <code>text</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setText(sText: string): CalendarLegendItem;
			/**
			 * Sets a new value for property <code>type</code>.
			 * 
			 * Type of the item.
			 * If not set the type is automatically determined from the order of the items in the CalendarLegend.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>None</code>.
			 * @param sType New value for property <code>type</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setType(sType: CalendarDayType): CalendarLegendItem;
		}
	
		class CalendarMonthInterval extends sap.ui.core.Control {
			/**
			 * Constructor for a new <code>CalendarMonthInterval</code>.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.unified.CalendarMonthIntervalMetadata);
			/**
			 * Constructor for a new <code>CalendarMonthInterval</code>.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
			 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): CalendarMonthInterval;
			/**
			 * Adds some selectedDate to the aggregation <code>selectedDates</code>.
			 * @param oSelectedDate the selectedDate to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addSelectedDate(oSelectedDate: DateRange): CalendarMonthInterval;
			/**
			 * Adds some specialDate to the aggregation <code>specialDates</code>.
			 * @param oSpecialDate the specialDate to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addSpecialDate(oSpecialDate: DateTypeRange): CalendarMonthInterval;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>cancel</code> event of this <code>sap.ui.unified.CalendarMonthInterval</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.unified.CalendarMonthInterval</code> itself.
			 * 
			 * Month selection was cancelled
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.CalendarMonthInterval</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachCancel(oData: any, fnFunction: any, oListener?: any): CalendarMonthInterval;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>select</code> event of this <code>sap.ui.unified.CalendarMonthInterval</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.unified.CalendarMonthInterval</code> itself.
			 * 
			 * Month selection changed
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.CalendarMonthInterval</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachSelect(oData: any, fnFunction: any, oListener?: any): CalendarMonthInterval;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>startDateChange</code> event of this <code>sap.ui.unified.CalendarMonthInterval</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.unified.CalendarMonthInterval</code> itself.
			 * 
			 * <code>startDate</code> was changed while navigation in <code>CalendarMonthInterval</code>
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.CalendarMonthInterval</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachStartDateChange(oData: any, fnFunction: any, oListener?: any): CalendarMonthInterval;
			/**
			 * Destroys all the selectedDates in the aggregation <code>selectedDates</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroySelectedDates(): CalendarMonthInterval;
			/**
			 * Destroys all the specialDates in the aggregation <code>specialDates</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroySpecialDates(): CalendarMonthInterval;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>cancel</code> event of this <code>sap.ui.unified.CalendarMonthInterval</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachCancel(fnFunction: any, oListener: any): CalendarMonthInterval;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>select</code> event of this <code>sap.ui.unified.CalendarMonthInterval</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachSelect(fnFunction: any, oListener: any): CalendarMonthInterval;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>startDateChange</code> event of this <code>sap.ui.unified.CalendarMonthInterval</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachStartDateChange(fnFunction: any, oListener: any): CalendarMonthInterval;
			/**
			 * Displays a month in the <code>CalendarMonthInterval</code> but doesn't set the focus.
			 * @param oDate JavaScript date object for displayed date. (The month of this date will be displayed.)
			 * @return <code>this</code> to allow method chaining
			 */
			displayDate(oDate: any): Calendar;
			/**
			 * Creates a new subclass of class sap.ui.unified.CalendarMonthInterval with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Fires event <code>cancel</code> to attached listeners.
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireCancel(mArguments?: any): CalendarMonthInterval;
			/**
			 * Fires event <code>select</code> to attached listeners.
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireSelect(mArguments?: any): CalendarMonthInterval;
			/**
			 * Fires event <code>startDateChange</code> to attached listeners.
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireStartDateChange(mArguments?: any): CalendarMonthInterval;
			/**
			 * Sets the focused month of the <code>CalendarMonthInterval</code>.
			 * @param oDate JavaScript date object for focused date. (The month of this date will be focused.)
			 * @return <code>this</code> to allow method chaining
			 */
			focusDate(oDate: any): Calendar;
			/**
			 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
			 * @return 
			 */
			getAriaLabelledBy(): sap.ui.core.ID[];
			/**
			 * Gets current value of property <code>intervalSelection</code>.
			 * 
			 * If set, interval selection is allowed
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>intervalSelection</code>
			 */
			getIntervalSelection(): boolean;
			/**
			 * ID of the element which is the current target of the association <code>legend</code>, or <code>null</code>.
			 * @return 
			 */
			getLegend(): sap.ui.core.ID;
			/**
			 * Gets current value of property <code>maxDate</code>.
			 * 
			 * Maximum date that can be shown and selected in the Calendar. This must be a JavaScript date object.
			 * 
			 * <b>Note:</b> If the <code>maxDate</code> is set to be before the <code>minDate</code>,
			 * the <code>minDate</code> is set to the begin of the month of the <code>maxDate</code>.
			 * @return Value of property <code>maxDate</code>
			 */
			getMaxDate(): any;
			/**
			 * Gets current value of property <code>minDate</code>.
			 * 
			 * Minimum date that can be shown and selected in the Calendar. This must be a JavaScript date object.
			 * 
			 * <b>Note:</b> If the <code>minDate</code> is set to be after the <code>maxDate</code>,
			 * the <code>maxDate</code> is set to the end of the month of the <code>minDate</code>.
			 * @return Value of property <code>minDate</code>
			 */
			getMinDate(): any;
			/**
			 * Gets current value of property <code>months</code>.
			 * 
			 * Number of months displayed
			 * 
			 * <b>Note:</b> On phones, the maximum number of months displayed in the row is always 6.
			 * 
			 * Default value is <code>12</code>.
			 * @return Value of property <code>months</code>
			 */
			getMonths(): number;
			/**
			 * Gets current value of property <code>pickerPopup</code>.
			 * 
			 * If set, the yearPicker opens on a popup
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>pickerPopup</code>
			 */
			getPickerPopup(): boolean;
			/**
			 * Gets content of aggregation <code>selectedDates</code>.
			 * 
			 * Date ranges for selected dates of the <code>CalendarMonthInterval</code>.
			 * 
			 * If <code>singleSelection</code> is set, only the first entry is used.
			 * 
			 * <b>Note:</b> Even if only one day is selected, the whole corresponding month is selected.
			 * @return 
			 */
			getSelectedDates(): DateRange[];
			/**
			 * Gets current value of property <code>singleSelection</code>.
			 * 
			 * If set, only a single date or interval, if <code>intervalSelection</code> is enabled, can be selected
			 * 
			 * <b>Note:</b> Selection of multiple intervals is not supported in the current version.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>singleSelection</code>
			 */
			getSingleSelection(): boolean;
			/**
			 * Gets content of aggregation <code>specialDates</code>.
			 * 
			 * Date ranges with type to visualize special months in the <code>CalendarMonthInterval</code>.
			 * If one day is assigned to more than one type, only the first one will be used.
			 * 
			 * <b>Note:</b> Even if only one day is set as a special day, the whole corresponding month is displayed in this way.
			 * @return 
			 */
			getSpecialDates(): DateTypeRange[];
			/**
			 * Gets current value of property <code>startDate</code>.
			 * 
			 * Start date of the Interval as JavaScript Date object.
			 * The month of this Date will be the first month in the displayed row.
			 * @return Value of property <code>startDate</code>
			 */
			getStartDate(): any;
			/**
			 * Gets current value of property <code>width</code>.
			 * 
			 * Width of the <code>CalendarMonthInterval</code>. The width of the single months depends on this width.
			 * @return Value of property <code>width</code>
			 */
			getWidth(): sap.ui.core.CSSSize;
			/**
			 * Checks for the provided <code>sap.ui.unified.DateRange</code> in the aggregation <code>selectedDates</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oSelectedDate The selectedDate whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfSelectedDate(oSelectedDate: DateRange): number;
			/**
			 * Checks for the provided <code>sap.ui.unified.DateTypeRange</code> in the aggregation <code>specialDates</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oSpecialDate The specialDate whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfSpecialDate(oSpecialDate: DateTypeRange): number;
			/**
			 * Inserts a selectedDate into the aggregation <code>selectedDates</code>.
			 * @param oSelectedDate the selectedDate to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the selectedDate should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the selectedDate is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the selectedDate is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertSelectedDate(oSelectedDate: DateRange, iIndex: number): CalendarMonthInterval;
			/**
			 * Inserts a specialDate into the aggregation <code>specialDates</code>.
			 * @param oSpecialDate the specialDate to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the specialDate should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the specialDate is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the specialDate is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertSpecialDate(oSpecialDate: DateTypeRange, iIndex: number): CalendarMonthInterval;
			/**
			 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllAriaLabelledBy(): sap.ui.core.ID[];
			/**
			 * Removes all the controls from the aggregation <code>selectedDates</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllSelectedDates(): DateRange[];
			/**
			 * Removes all the controls from the aggregation <code>specialDates</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllSpecialDates(): DateTypeRange[];
			/**
			 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
			 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
			 * @return The removed ariaLabelledBy or <code>null</code>
			 */
			removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
			/**
			 * Removes a selectedDate from the aggregation <code>selectedDates</code>.
			 * @param vSelectedDate The selectedDate to remove or its index or id
			 * @return The removed selectedDate or <code>null</code>
			 */
			removeSelectedDate(vSelectedDate: number|string|DateRange): DateRange;
			/**
			 * Removes a specialDate from the aggregation <code>specialDates</code>.
			 * @param vSpecialDate The specialDate to remove or its index or id
			 * @return The removed specialDate or <code>null</code>
			 */
			removeSpecialDate(vSpecialDate: number|string|DateTypeRange): DateTypeRange;
			/**
			 * Sets a new value for property <code>intervalSelection</code>.
			 * 
			 * If set, interval selection is allowed
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bIntervalSelection New value for property <code>intervalSelection</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setIntervalSelection(bIntervalSelection: boolean): CalendarMonthInterval;
			/**
			 * Sets the associated <code>legend</code>.
			 * @param oLegend ID of an element which becomes the new target of this legend association; alternatively, an element instance may be given
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setLegend(oLegend: sap.ui.core.ID|CalendarLegend): CalendarMonthInterval;
			/**
			 * Sets a new value for property <code>maxDate</code>.
			 * 
			 * Maximum date that can be shown and selected in the Calendar. This must be a JavaScript date object.
			 * 
			 * <b>Note:</b> If the <code>maxDate</code> is set to be before the <code>minDate</code>,
			 * the <code>minDate</code> is set to the begin of the month of the <code>maxDate</code>.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param oMaxDate New value for property <code>maxDate</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setMaxDate(oMaxDate: any): CalendarMonthInterval;
			/**
			 * Sets a new value for property <code>minDate</code>.
			 * 
			 * Minimum date that can be shown and selected in the Calendar. This must be a JavaScript date object.
			 * 
			 * <b>Note:</b> If the <code>minDate</code> is set to be after the <code>maxDate</code>,
			 * the <code>maxDate</code> is set to the end of the month of the <code>minDate</code>.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param oMinDate New value for property <code>minDate</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setMinDate(oMinDate: any): CalendarMonthInterval;
			/**
			 * Sets a new value for property <code>months</code>.
			 * 
			 * Number of months displayed
			 * 
			 * <b>Note:</b> On phones, the maximum number of months displayed in the row is always 6.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>12</code>.
			 * @param iMonths New value for property <code>months</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setMonths(iMonths: number): CalendarMonthInterval;
			/**
			 * Sets a new value for property <code>pickerPopup</code>.
			 * 
			 * If set, the yearPicker opens on a popup
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bPickerPopup New value for property <code>pickerPopup</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setPickerPopup(bPickerPopup: boolean): CalendarMonthInterval;
			/**
			 * Sets a new value for property <code>singleSelection</code>.
			 * 
			 * If set, only a single date or interval, if <code>intervalSelection</code> is enabled, can be selected
			 * 
			 * <b>Note:</b> Selection of multiple intervals is not supported in the current version.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bSingleSelection New value for property <code>singleSelection</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSingleSelection(bSingleSelection: boolean): CalendarMonthInterval;
			/**
			 * Sets a new value for property <code>startDate</code>.
			 * 
			 * Start date of the Interval as JavaScript Date object.
			 * The month of this Date will be the first month in the displayed row.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param oStartDate New value for property <code>startDate</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setStartDate(oStartDate: any): CalendarMonthInterval;
			/**
			 * Sets a new value for property <code>width</code>.
			 * 
			 * Width of the <code>CalendarMonthInterval</code>. The width of the single months depends on this width.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sWidth New value for property <code>width</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setWidth(sWidth: sap.ui.core.CSSSize): CalendarMonthInterval;
		}
	
		class CalendarRow extends sap.ui.core.Control {
			/**
			 * Constructor for a new <code>CalendarRow</code>.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.unified.CalendarRowMetadata);
			/**
			 * Constructor for a new <code>CalendarRow</code>.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some appointment to the aggregation <code>appointments</code>.
			 * @param oAppointment the appointment to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addAppointment(oAppointment: CalendarAppointment): CalendarRow;
			/**
			 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
			 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): CalendarRow;
			/**
			 * Adds some intervalHeader to the aggregation <code>intervalHeaders</code>.
			 * @param oIntervalHeader the intervalHeader to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addIntervalHeader(oIntervalHeader: CalendarAppointment): CalendarRow;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>intervalSelect</code> event of this <code>sap.ui.unified.CalendarRow</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.unified.CalendarRow</code> itself.
			 * 
			 * Fired if an interval was selected
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.CalendarRow</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachIntervalSelect(oData: any, fnFunction: any, oListener?: any): CalendarRow;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>leaveRow</code> event of this <code>sap.ui.unified.CalendarRow</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.unified.CalendarRow</code> itself.
			 * 
			 * The <code>CalendarRow</code> should be left while navigating. (Arrow up or arrow down.)
			 * The caller should determine the next control to be focused
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.CalendarRow</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachLeaveRow(oData: any, fnFunction: any, oListener?: any): CalendarRow;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>select</code> event of this <code>sap.ui.unified.CalendarRow</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.unified.CalendarRow</code> itself.
			 * 
			 * Fired if an appointment was selected
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.CalendarRow</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachSelect(oData: any, fnFunction: any, oListener?: any): CalendarRow;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>startDateChange</code> event of this <code>sap.ui.unified.CalendarRow</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.unified.CalendarRow</code> itself.
			 * 
			 * <code>startDate</code> was changed while navigating in <code>CalendarRow</code>
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.CalendarRow</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachStartDateChange(oData: any, fnFunction: any, oListener?: any): CalendarRow;
			/**
			 * Destroys all the appointments in the aggregation <code>appointments</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyAppointments(): CalendarRow;
			/**
			 * Destroys all the intervalHeaders in the aggregation <code>intervalHeaders</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyIntervalHeaders(): CalendarRow;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>intervalSelect</code> event of this <code>sap.ui.unified.CalendarRow</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachIntervalSelect(fnFunction: any, oListener: any): CalendarRow;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>leaveRow</code> event of this <code>sap.ui.unified.CalendarRow</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachLeaveRow(fnFunction: any, oListener: any): CalendarRow;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>select</code> event of this <code>sap.ui.unified.CalendarRow</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachSelect(fnFunction: any, oListener: any): CalendarRow;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>startDateChange</code> event of this <code>sap.ui.unified.CalendarRow</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachStartDateChange(fnFunction: any, oListener: any): CalendarRow;
			/**
			 * Creates a new subclass of class sap.ui.unified.CalendarRow with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Fires event <code>intervalSelect</code> to attached listeners.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>startDate</code> of type <code>object</code>Interval start date as JavaScript date object</li>
			 * <li><code>endDate</code> of type <code>object</code>Interval end date as JavaScript date object</li>
			 * <li><code>subInterval</code> of type <code>boolean</code>If set, the selected interval is a subinterval</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireIntervalSelect(mArguments?: any): CalendarRow;
			/**
			 * Fires event <code>leaveRow</code> to attached listeners.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>type</code> of type <code>string</code>The type of the event that triggers this <code>leaveRow</code></li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireLeaveRow(mArguments?: any): CalendarRow;
			/**
			 * Fires event <code>select</code> to attached listeners.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>appointment</code> of type <code>sap.ui.unified.CalendarAppointment</code>selected appointment</li>
			 * <li><code>appointments</code> of type <code>sap.ui.unified.CalendarAppointment[]</code>selected appointments in case a group appointment is selected</li>
			 * <li><code>multiSelect</code> of type <code>boolean</code>If set, the appointment was selected by multiple selection (e.g. shift + mouse click).
			 * So more than the current appointment could be selected.</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireSelect(mArguments?: any): CalendarRow;
			/**
			 * Fires event <code>startDateChange</code> to attached listeners.
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireStartDateChange(mArguments?: any): CalendarRow;
			/**
			 * Focus the given <code>CalendarAppointment</code> in the <code>CalendarRow</code>.
			 * @param oAppointment Appointment to be focused.
			 * @return <code>this</code> to allow method chaining
			 */
			focusAppointment(oAppointment: any): CalendarRow;
			/**
			 * Focus the <code>CalendarAppointment</code> in the <code>CalendarRow</code> that is nearest to
			 * the given date.
			 * @param oDate Javascript Date object.
			 * @return <code>this</code> to allow method chaining
			 */
			focusNearestAppointment(oDate: any): CalendarRow;
			/**
			 * Gets content of aggregation <code>appointments</code>.
			 * 
			 * Appointments to be displayed in the row. Appointments outside the visible time frame are not rendered.
			 * 
			 * <b>Note:</b> For performance reasons, only appointments in the visible time range or nearby should be assigned.
			 * @return 
			 */
			getAppointments(): CalendarAppointment[];
			/**
			 * Gets current value of property <code>appointmentsReducedHeight</code>.
			 * 
			 * If set the appointments without text (only title) are rendered with a smaller height.
			 * 
			 * <b>Note:</b> On phone devices this property is ignored, appointments are always rendered in full height
			 * to allow touching.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>appointmentsReducedHeight</code>
			 */
			getAppointmentsReducedHeight(): boolean;
			/**
			 * Gets current value of property <code>appointmentsVisualization</code>.
			 * 
			 * Defines the visualization of the <code>CalendarAppoinment</code>
			 * 
			 * <b>Note:</b> The real visualization depends on the used theme.
			 * 
			 * Default value is <code>Standard</code>.
			 * @return Value of property <code>appointmentsVisualization</code>
			 */
			getAppointmentsVisualization(): CalendarAppointmentVisualization;
			/**
			 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
			 * @return 
			 */
			getAriaLabelledBy(): sap.ui.core.ID[];
			/**
			 * Gets current value of property <code>checkResize</code>.
			 * 
			 * If set, the <code>CalendarRow</code> checks for resize by itself.
			 * 
			 * If a lot of <code>CalendarRow</code> controls are used in one container control (like <code>PlanningCalendar</code>).
			 * the resize checks should be done only by this container control. Then the container control should
			 * call <code>handleResize</code> of the <code>CalendarRow</code> if a resize happens.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>checkResize</code>
			 */
			getCheckResize(): boolean;
			/**
			 * Returns the focused <code>CalendarAppointment</code> of the <code>CalendarRow</code>.
			 * 
			 * The focus must not really be on the <code>CalendarAppointment</code>, it have just to
			 * be the one that has the focus when the <code>CalendarRow</code> was focused last time.
			 * @return Focused Appointment
			 */
			getFocusedAppointment(): CalendarAppointment;
			/**
			 * Gets current value of property <code>height</code>.
			 * 
			 * Height of the row
			 * @return Value of property <code>height</code>
			 */
			getHeight(): sap.ui.core.CSSSize;
			/**
			 * Gets content of aggregation <code>intervalHeaders</code>.
			 * 
			 * Appointments to be displayed in the top of the intervals. The <code>intervalHeaders</code> are used to visualize
			 * public holidays and similar things.
			 * 
			 * Appointments outside the visible time frame are not rendered.
			 * 
			 * The <code>intervalHeaders</code> always fill whole intervals. If they are shorter than one interval, they are not displayed.
			 * 
			 * <b>Note:</b> For performance reasons, only appointments in the visible time range or nearby should be assigned.
			 * @return 
			 */
			getIntervalHeaders(): CalendarAppointment[];
			/**
			 * Gets current value of property <code>intervals</code>.
			 * 
			 * Number of displayed intervals. The size of the intervals is defined with <code>intervalType</code>
			 * 
			 * Default value is <code>12</code>.
			 * @return Value of property <code>intervals</code>
			 */
			getIntervals(): number;
			/**
			 * Gets current value of property <code>intervalType</code>.
			 * 
			 * Type of the intervals of the row. The default is one hour.
			 * 
			 * Default value is <code>Hour</code>.
			 * @return Value of property <code>intervalType</code>
			 */
			getIntervalType(): CalendarIntervalType;
			/**
			 * ID of the element which is the current target of the association <code>legend</code>, or <code>null</code>.
			 * @return 
			 */
			getLegend(): sap.ui.core.ID;
			/**
			 * Gets current value of property <code>nonWorkingDays</code>.
			 * 
			 * If set, the provided weekdays are displayed as non-working days.
			 * Valid values inside the array are 0 to 6. (Other values will just be ignored.)
			 * 
			 * If not set, the weekend defined in the locale settings is displayed as non-working days.
			 * 
			 * <b>Note:</b> The non working days are only visualized if <code>intervalType</code> is set to day.
			 * @return Value of property <code>nonWorkingDays</code>
			 */
			getNonWorkingDays(): number[];
			/**
			 * Gets current value of property <code>nonWorkingHours</code>.
			 * 
			 * If set, the provided hours are displayed as non-working hours.
			 * Valid values inside the array are 0 to 23. (Other values will just be ignored.)
			 * 
			 * <b>Note:</b> The non working hours are only visualized if <code>intervalType</code> is set to hour.
			 * @return Value of property <code>nonWorkingHours</code>
			 */
			getNonWorkingHours(): number[];
			/**
			 * Gets current value of property <code>showEmptyIntervalHeaders</code>.
			 * 
			 * If set, interval headers are shown even if no <code>intervalHeaders</code> are assigned to the visible time frame.
			 * 
			 * If not set, no interval headers are shown if no <code>intervalHeaders</code> are assigned.
			 * 
			 * <b>Note:</b> This property is only used if <code>showIntervalHeaders</code> is set to true.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>showEmptyIntervalHeaders</code>
			 */
			getShowEmptyIntervalHeaders(): boolean;
			/**
			 * Gets current value of property <code>showIntervalHeaders</code>.
			 * 
			 * If set, interval headers are shown like specified in <code>showEmptyIntervalHeaders</code>.
			 * 
			 * If not set, no interval headers are shown even if <code>intervalHeaders</code> are assigned.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>showIntervalHeaders</code>
			 */
			getShowIntervalHeaders(): boolean;
			/**
			 * Gets current value of property <code>showSubIntervals</code>.
			 * 
			 * If set, subintervals are shown.
			 * 
			 * If the interval type is <code>Hour</code>, quarter hours are shown.
			 * 
			 * If the interval type is <code>Day</code>, hours are shown.
			 * 
			 * If the interval type is <code>Month</code>, days are shown.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>showSubIntervals</code>
			 */
			getShowSubIntervals(): boolean;
			/**
			 * Gets current value of property <code>startDate</code>.
			 * 
			 * Start date, as JavaScript Date object, of the row. As default, the current date is used.
			 * @return Value of property <code>startDate</code>
			 */
			getStartDate(): any;
			/**
			 * Gets current value of property <code>updateCurrentTime</code>.
			 * 
			 * If set the <code>CalendarRow</code> triggers a periodic update to visualize the current time.
			 * 
			 * If a lot of <code>CalendarRow</code> controls are used in one container control (like <code>PlanningCalendar</code>)
			 * the periodic update should be triggered only by this container control. Then the container control should
			 * call <code>updateCurrentTimeVisualization</code> of the <code>CalendarRow</code> to update the visualization.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>updateCurrentTime</code>
			 */
			getUpdateCurrentTime(): boolean;
			/**
			 * Gets current value of property <code>width</code>.
			 * 
			 * Width of the row
			 * @return Value of property <code>width</code>
			 */
			getWidth(): sap.ui.core.CSSSize;
			/**
			 * After a resize of the <code>CalendarRow</code>, some calculations for appointment
			 * sizes are needed.
			 * 
			 * For this, each <code>CalendarRow</code> can trigger the resize check for it's own DOM.
			 * But if multiple <code>CalendarRow</code>s are used in one container (e.g. <code>PlanningCalendar</code>),
			 * it is better if the container triggers the resize check once an then calls this function
			 * of each <code>CalendarRow</code>.
			 * @param oEvent The event object of the resize handler.
			 * @return <code>this</code> to allow method chaining
			 */
			handleResize(oEvent: jQuery.Event): CalendarRow;
			/**
			 * Checks for the provided <code>sap.ui.unified.CalendarAppointment</code> in the aggregation <code>appointments</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oAppointment The appointment whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfAppointment(oAppointment: CalendarAppointment): number;
			/**
			 * Checks for the provided <code>sap.ui.unified.CalendarAppointment</code> in the aggregation <code>intervalHeaders</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oIntervalHeader The intervalHeader whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfIntervalHeader(oIntervalHeader: CalendarAppointment): number;
			/**
			 * Inserts a appointment into the aggregation <code>appointments</code>.
			 * @param oAppointment the appointment to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the appointment should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the appointment is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the appointment is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertAppointment(oAppointment: CalendarAppointment, iIndex: number): CalendarRow;
			/**
			 * Inserts a intervalHeader into the aggregation <code>intervalHeaders</code>.
			 * @param oIntervalHeader the intervalHeader to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the intervalHeader should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the intervalHeader is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the intervalHeader is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertIntervalHeader(oIntervalHeader: CalendarAppointment, iIndex: number): CalendarRow;
			/**
			 * Removes all the controls from the aggregation <code>appointments</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllAppointments(): CalendarAppointment[];
			/**
			 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllAriaLabelledBy(): sap.ui.core.ID[];
			/**
			 * Removes all the controls from the aggregation <code>intervalHeaders</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllIntervalHeaders(): CalendarAppointment[];
			/**
			 * Removes a appointment from the aggregation <code>appointments</code>.
			 * @param vAppointment The appointment to remove or its index or id
			 * @return The removed appointment or <code>null</code>
			 */
			removeAppointment(vAppointment: number|string|CalendarAppointment): CalendarAppointment;
			/**
			 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
			 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
			 * @return The removed ariaLabelledBy or <code>null</code>
			 */
			removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
			/**
			 * Removes a intervalHeader from the aggregation <code>intervalHeaders</code>.
			 * @param vIntervalHeader The intervalHeader to remove or its index or id
			 * @return The removed intervalHeader or <code>null</code>
			 */
			removeIntervalHeader(vIntervalHeader: number|string|CalendarAppointment): CalendarAppointment;
			/**
			 * Sets a new value for property <code>appointmentsReducedHeight</code>.
			 * 
			 * If set the appointments without text (only title) are rendered with a smaller height.
			 * 
			 * <b>Note:</b> On phone devices this property is ignored, appointments are always rendered in full height
			 * to allow touching.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bAppointmentsReducedHeight New value for property <code>appointmentsReducedHeight</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setAppointmentsReducedHeight(bAppointmentsReducedHeight: boolean): CalendarRow;
			/**
			 * Sets a new value for property <code>appointmentsVisualization</code>.
			 * 
			 * Defines the visualization of the <code>CalendarAppoinment</code>
			 * 
			 * <b>Note:</b> The real visualization depends on the used theme.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>Standard</code>.
			 * @param sAppointmentsVisualization New value for property <code>appointmentsVisualization</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setAppointmentsVisualization(sAppointmentsVisualization: CalendarAppointmentVisualization): CalendarRow;
			/**
			 * Sets a new value for property <code>checkResize</code>.
			 * 
			 * If set, the <code>CalendarRow</code> checks for resize by itself.
			 * 
			 * If a lot of <code>CalendarRow</code> controls are used in one container control (like <code>PlanningCalendar</code>).
			 * the resize checks should be done only by this container control. Then the container control should
			 * call <code>handleResize</code> of the <code>CalendarRow</code> if a resize happens.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bCheckResize New value for property <code>checkResize</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setCheckResize(bCheckResize: boolean): CalendarRow;
			/**
			 * Sets a new value for property <code>height</code>.
			 * 
			 * Height of the row
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sHeight New value for property <code>height</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setHeight(sHeight: sap.ui.core.CSSSize): CalendarRow;
			/**
			 * Sets a new value for property <code>intervals</code>.
			 * 
			 * Number of displayed intervals. The size of the intervals is defined with <code>intervalType</code>
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>12</code>.
			 * @param iIntervals New value for property <code>intervals</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setIntervals(iIntervals: number): CalendarRow;
			/**
			 * Sets a new value for property <code>intervalType</code>.
			 * 
			 * Type of the intervals of the row. The default is one hour.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>Hour</code>.
			 * @param sIntervalType New value for property <code>intervalType</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setIntervalType(sIntervalType: CalendarIntervalType): CalendarRow;
			/**
			 * Sets the associated <code>legend</code>.
			 * @param oLegend ID of an element which becomes the new target of this legend association; alternatively, an element instance may be given
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setLegend(oLegend: sap.ui.core.ID|CalendarLegend): CalendarRow;
			/**
			 * Sets a new value for property <code>nonWorkingDays</code>.
			 * 
			 * If set, the provided weekdays are displayed as non-working days.
			 * Valid values inside the array are 0 to 6. (Other values will just be ignored.)
			 * 
			 * If not set, the weekend defined in the locale settings is displayed as non-working days.
			 * 
			 * <b>Note:</b> The non working days are only visualized if <code>intervalType</code> is set to day.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sNonWorkingDays New value for property <code>nonWorkingDays</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setNonWorkingDays(sNonWorkingDays: number[]): CalendarRow;
			/**
			 * Sets a new value for property <code>nonWorkingHours</code>.
			 * 
			 * If set, the provided hours are displayed as non-working hours.
			 * Valid values inside the array are 0 to 23. (Other values will just be ignored.)
			 * 
			 * <b>Note:</b> The non working hours are only visualized if <code>intervalType</code> is set to hour.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sNonWorkingHours New value for property <code>nonWorkingHours</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setNonWorkingHours(sNonWorkingHours: number[]): CalendarRow;
			/**
			 * Sets a new value for property <code>showEmptyIntervalHeaders</code>.
			 * 
			 * If set, interval headers are shown even if no <code>intervalHeaders</code> are assigned to the visible time frame.
			 * 
			 * If not set, no interval headers are shown if no <code>intervalHeaders</code> are assigned.
			 * 
			 * <b>Note:</b> This property is only used if <code>showIntervalHeaders</code> is set to true.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bShowEmptyIntervalHeaders New value for property <code>showEmptyIntervalHeaders</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setShowEmptyIntervalHeaders(bShowEmptyIntervalHeaders: boolean): CalendarRow;
			/**
			 * Sets a new value for property <code>showIntervalHeaders</code>.
			 * 
			 * If set, interval headers are shown like specified in <code>showEmptyIntervalHeaders</code>.
			 * 
			 * If not set, no interval headers are shown even if <code>intervalHeaders</code> are assigned.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bShowIntervalHeaders New value for property <code>showIntervalHeaders</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setShowIntervalHeaders(bShowIntervalHeaders: boolean): CalendarRow;
			/**
			 * Sets a new value for property <code>showSubIntervals</code>.
			 * 
			 * If set, subintervals are shown.
			 * 
			 * If the interval type is <code>Hour</code>, quarter hours are shown.
			 * 
			 * If the interval type is <code>Day</code>, hours are shown.
			 * 
			 * If the interval type is <code>Month</code>, days are shown.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bShowSubIntervals New value for property <code>showSubIntervals</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setShowSubIntervals(bShowSubIntervals: boolean): CalendarRow;
			/**
			 * Sets a new value for property <code>startDate</code>.
			 * 
			 * Start date, as JavaScript Date object, of the row. As default, the current date is used.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param oStartDate New value for property <code>startDate</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setStartDate(oStartDate: any): CalendarRow;
			/**
			 * Sets a new value for property <code>updateCurrentTime</code>.
			 * 
			 * If set the <code>CalendarRow</code> triggers a periodic update to visualize the current time.
			 * 
			 * If a lot of <code>CalendarRow</code> controls are used in one container control (like <code>PlanningCalendar</code>)
			 * the periodic update should be triggered only by this container control. Then the container control should
			 * call <code>updateCurrentTimeVisualization</code> of the <code>CalendarRow</code> to update the visualization.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bUpdateCurrentTime New value for property <code>updateCurrentTime</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setUpdateCurrentTime(bUpdateCurrentTime: boolean): CalendarRow;
			/**
			 * Sets a new value for property <code>width</code>.
			 * 
			 * Width of the row
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sWidth New value for property <code>width</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setWidth(sWidth: sap.ui.core.CSSSize): CalendarRow;
			/**
			 * If the current time is in the visible output of the <code>CalendarRow</code>,
			 * the indicator for the current time must be positioned.
			 * 
			 * For this, each <code>CalendarRow</code> can trigger a timer.
			 * But if multiple <code>CalendarRow</code>s are used in one container (e.G. <code>PlanningCalendar</code>),
			 * it is better if the container triggers the interval once an then calls this function
			 * of each <code>CalendarRow</code>.
			 * @return <code>this</code> to allow method chaining
			 */
			updateCurrentTimeVisualization(): CalendarRow;
		}
	
		class CalendarTimeInterval extends sap.ui.core.Control {
			/**
			 * Constructor for a new <code>CalendarTimeInterval</code>.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.unified.CalendarTimeIntervalMetadata);
			/**
			 * Constructor for a new <code>CalendarTimeInterval</code>.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId ID for the new control, generated automatically if no ID is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
			 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): CalendarTimeInterval;
			/**
			 * Adds some selectedDate to the aggregation <code>selectedDates</code>.
			 * @param oSelectedDate the selectedDate to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addSelectedDate(oSelectedDate: DateRange): CalendarTimeInterval;
			/**
			 * Adds some specialDate to the aggregation <code>specialDates</code>.
			 * @param oSpecialDate the specialDate to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addSpecialDate(oSpecialDate: DateTypeRange): CalendarTimeInterval;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>cancel</code> event of this <code>sap.ui.unified.CalendarTimeInterval</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.unified.CalendarTimeInterval</code> itself.
			 * 
			 * Time selection was cancelled
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.CalendarTimeInterval</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachCancel(oData: any, fnFunction: any, oListener?: any): CalendarTimeInterval;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>select</code> event of this <code>sap.ui.unified.CalendarTimeInterval</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.unified.CalendarTimeInterval</code> itself.
			 * 
			 * Time selection changed
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.CalendarTimeInterval</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachSelect(oData: any, fnFunction: any, oListener?: any): CalendarTimeInterval;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>startDateChange</code> event of this <code>sap.ui.unified.CalendarTimeInterval</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.unified.CalendarTimeInterval</code> itself.
			 * 
			 * <code>startDate</code> was changed while navigation in <code>CalendarTimeInterval</code>
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.CalendarTimeInterval</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachStartDateChange(oData: any, fnFunction: any, oListener?: any): CalendarTimeInterval;
			/**
			 * Destroys all the selectedDates in the aggregation <code>selectedDates</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroySelectedDates(): CalendarTimeInterval;
			/**
			 * Destroys all the specialDates in the aggregation <code>specialDates</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroySpecialDates(): CalendarTimeInterval;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>cancel</code> event of this <code>sap.ui.unified.CalendarTimeInterval</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachCancel(fnFunction: any, oListener: any): CalendarTimeInterval;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>select</code> event of this <code>sap.ui.unified.CalendarTimeInterval</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachSelect(fnFunction: any, oListener: any): CalendarTimeInterval;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>startDateChange</code> event of this <code>sap.ui.unified.CalendarTimeInterval</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachStartDateChange(fnFunction: any, oListener: any): CalendarTimeInterval;
			/**
			 * Displays a item in the <code>CalendarTimeInterval</code> but doesn't set the focus.
			 * @param oDate JavaScript date object for displayed item.
			 * @return <code>this</code> to allow method chaining
			 */
			displayDate(oDate: any): Calendar;
			/**
			 * Creates a new subclass of class sap.ui.unified.CalendarTimeInterval with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Fires event <code>cancel</code> to attached listeners.
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireCancel(mArguments?: any): CalendarTimeInterval;
			/**
			 * Fires event <code>select</code> to attached listeners.
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireSelect(mArguments?: any): CalendarTimeInterval;
			/**
			 * Fires event <code>startDateChange</code> to attached listeners.
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireStartDateChange(mArguments?: any): CalendarTimeInterval;
			/**
			 * Sets the focused item of the <code>CalendarTimeInterval</code>.
			 * @param oDate JavaScript date object for focused item.
			 * @return <code>this</code> to allow method chaining
			 */
			focusDate(oDate: any): Calendar;
			/**
			 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
			 * @return 
			 */
			getAriaLabelledBy(): sap.ui.core.ID[];
			/**
			 * Gets current value of property <code>intervalMinutes</code>.
			 * 
			 * Size of on time interval in minutes, default is 60 minutes.
			 * 
			 * <b>Note:</b> the start of the interval calculation is always on the corresponding date at 00:00.
			 * 
			 * A interval longer then 720 minutes is not allowed. Please use the <code>CalendarDateInterval</code> instead.
			 * 
			 * A day must be divisible by this interval size. One interval must not include more than one day.
			 * 
			 * Default value is <code>60</code>.
			 * @return Value of property <code>intervalMinutes</code>
			 */
			getIntervalMinutes(): number;
			/**
			 * Gets current value of property <code>intervalSelection</code>.
			 * 
			 * If set, interval selection is allowed
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>intervalSelection</code>
			 */
			getIntervalSelection(): boolean;
			/**
			 * Gets current value of property <code>items</code>.
			 * 
			 * Number of time items displayed. Default is 12.
			 * 
			 * <b>Note:</b> On phones, the maximum number of items displayed in the row is always 6.
			 * 
			 * Default value is <code>12</code>.
			 * @return Value of property <code>items</code>
			 */
			getItems(): number;
			/**
			 * ID of the element which is the current target of the association <code>legend</code>, or <code>null</code>.
			 * @return 
			 */
			getLegend(): sap.ui.core.ID;
			/**
			 * Gets current value of property <code>maxDate</code>.
			 * 
			 * Maximum date that can be shown and selected in the Calendar. This must be a JavaScript date object.
			 * 
			 * <b>Note:</b> If the <code>maxDate</code> is set to be before the <code>minDate</code>,
			 * the <code>minDate</code> is set to the begin of the month of the <code>maxDate</code>.
			 * @return Value of property <code>maxDate</code>
			 */
			getMaxDate(): any;
			/**
			 * Gets current value of property <code>minDate</code>.
			 * 
			 * Minimum date that can be shown and selected in the Calendar. This must be a JavaScript date object.
			 * 
			 * <b>Note:</b> If the <code>minDate</code> is set to be after the <code>maxDate</code>,
			 * the <code>maxDate</code> is set to the end of the month of the <code>minDate</code>.
			 * @return Value of property <code>minDate</code>
			 */
			getMinDate(): any;
			/**
			 * Gets current value of property <code>pickerPopup</code>.
			 * 
			 * If set, the day-, month- and yearPicker opens on a popup
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>pickerPopup</code>
			 */
			getPickerPopup(): boolean;
			/**
			 * Gets content of aggregation <code>selectedDates</code>.
			 * 
			 * Date ranges for selected items of the <code>CalendarTimeInterval</code>.
			 * 
			 * If <code>singleSelection</code> is set, only the first entry is used.
			 * @return 
			 */
			getSelectedDates(): DateRange[];
			/**
			 * Gets current value of property <code>singleSelection</code>.
			 * 
			 * If set, only a single date or interval, if <code>intervalSelection</code> is enabled, can be selected
			 * 
			 * <b>Note:</b> Selection of multiple intervals is not supported in the current version.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>singleSelection</code>
			 */
			getSingleSelection(): boolean;
			/**
			 * Gets content of aggregation <code>specialDates</code>.
			 * 
			 * Date ranges with type to visualize special items in the <code>CalendarTimeInterval</code>.
			 * If one interval is assigned to more than one type, only the first one will be used.
			 * @return 
			 */
			getSpecialDates(): DateTypeRange[];
			/**
			 * Gets current value of property <code>startDate</code>.
			 * 
			 * Start date of the Interval as JavaScript Date object.
			 * The time interval corresponding to this Date and <code>items</code> and <code>intervalMinutes</code>
			 * will be the first time in the displayed row.
			 * @return Value of property <code>startDate</code>
			 */
			getStartDate(): any;
			/**
			 * Gets current value of property <code>width</code>.
			 * 
			 * Width of the <code>CalendarTimeInterval</code>. The width of the single months depends on this width.
			 * @return Value of property <code>width</code>
			 */
			getWidth(): sap.ui.core.CSSSize;
			/**
			 * Checks for the provided <code>sap.ui.unified.DateRange</code> in the aggregation <code>selectedDates</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oSelectedDate The selectedDate whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfSelectedDate(oSelectedDate: DateRange): number;
			/**
			 * Checks for the provided <code>sap.ui.unified.DateTypeRange</code> in the aggregation <code>specialDates</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oSpecialDate The specialDate whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfSpecialDate(oSpecialDate: DateTypeRange): number;
			/**
			 * Inserts a selectedDate into the aggregation <code>selectedDates</code>.
			 * @param oSelectedDate the selectedDate to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the selectedDate should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the selectedDate is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the selectedDate is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertSelectedDate(oSelectedDate: DateRange, iIndex: number): CalendarTimeInterval;
			/**
			 * Inserts a specialDate into the aggregation <code>specialDates</code>.
			 * @param oSpecialDate the specialDate to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the specialDate should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the specialDate is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the specialDate is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertSpecialDate(oSpecialDate: DateTypeRange, iIndex: number): CalendarTimeInterval;
			/**
			 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllAriaLabelledBy(): sap.ui.core.ID[];
			/**
			 * Removes all the controls from the aggregation <code>selectedDates</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllSelectedDates(): DateRange[];
			/**
			 * Removes all the controls from the aggregation <code>specialDates</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllSpecialDates(): DateTypeRange[];
			/**
			 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
			 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
			 * @return The removed ariaLabelledBy or <code>null</code>
			 */
			removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
			/**
			 * Removes a selectedDate from the aggregation <code>selectedDates</code>.
			 * @param vSelectedDate The selectedDate to remove or its index or id
			 * @return The removed selectedDate or <code>null</code>
			 */
			removeSelectedDate(vSelectedDate: number|string|DateRange): DateRange;
			/**
			 * Removes a specialDate from the aggregation <code>specialDates</code>.
			 * @param vSpecialDate The specialDate to remove or its index or id
			 * @return The removed specialDate or <code>null</code>
			 */
			removeSpecialDate(vSpecialDate: number|string|DateTypeRange): DateTypeRange;
			/**
			 * Sets a new value for property <code>intervalMinutes</code>.
			 * 
			 * Size of on time interval in minutes, default is 60 minutes.
			 * 
			 * <b>Note:</b> the start of the interval calculation is always on the corresponding date at 00:00.
			 * 
			 * A interval longer then 720 minutes is not allowed. Please use the <code>CalendarDateInterval</code> instead.
			 * 
			 * A day must be divisible by this interval size. One interval must not include more than one day.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>60</code>.
			 * @param iIntervalMinutes New value for property <code>intervalMinutes</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setIntervalMinutes(iIntervalMinutes: number): CalendarTimeInterval;
			/**
			 * Sets a new value for property <code>intervalSelection</code>.
			 * 
			 * If set, interval selection is allowed
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bIntervalSelection New value for property <code>intervalSelection</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setIntervalSelection(bIntervalSelection: boolean): CalendarTimeInterval;
			/**
			 * Sets a new value for property <code>items</code>.
			 * 
			 * Number of time items displayed. Default is 12.
			 * 
			 * <b>Note:</b> On phones, the maximum number of items displayed in the row is always 6.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>12</code>.
			 * @param iItems New value for property <code>items</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setItems(iItems: number): CalendarTimeInterval;
			/**
			 * Sets the associated <code>legend</code>.
			 * @param oLegend ID of an element which becomes the new target of this legend association; alternatively, an element instance may be given
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setLegend(oLegend: sap.ui.core.ID|CalendarLegend): CalendarTimeInterval;
			/**
			 * Sets a new value for property <code>maxDate</code>.
			 * 
			 * Maximum date that can be shown and selected in the Calendar. This must be a JavaScript date object.
			 * 
			 * <b>Note:</b> If the <code>maxDate</code> is set to be before the <code>minDate</code>,
			 * the <code>minDate</code> is set to the begin of the month of the <code>maxDate</code>.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param oMaxDate New value for property <code>maxDate</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setMaxDate(oMaxDate: any): CalendarTimeInterval;
			/**
			 * Sets a new value for property <code>minDate</code>.
			 * 
			 * Minimum date that can be shown and selected in the Calendar. This must be a JavaScript date object.
			 * 
			 * <b>Note:</b> If the <code>minDate</code> is set to be after the <code>maxDate</code>,
			 * the <code>maxDate</code> is set to the end of the month of the <code>minDate</code>.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param oMinDate New value for property <code>minDate</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setMinDate(oMinDate: any): CalendarTimeInterval;
			/**
			 * Sets a new value for property <code>pickerPopup</code>.
			 * 
			 * If set, the day-, month- and yearPicker opens on a popup
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bPickerPopup New value for property <code>pickerPopup</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setPickerPopup(bPickerPopup: boolean): CalendarTimeInterval;
			/**
			 * Sets a new value for property <code>singleSelection</code>.
			 * 
			 * If set, only a single date or interval, if <code>intervalSelection</code> is enabled, can be selected
			 * 
			 * <b>Note:</b> Selection of multiple intervals is not supported in the current version.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bSingleSelection New value for property <code>singleSelection</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSingleSelection(bSingleSelection: boolean): CalendarTimeInterval;
			/**
			 * Sets a new value for property <code>startDate</code>.
			 * 
			 * Start date of the Interval as JavaScript Date object.
			 * The time interval corresponding to this Date and <code>items</code> and <code>intervalMinutes</code>
			 * will be the first time in the displayed row.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param oStartDate New value for property <code>startDate</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setStartDate(oStartDate: any): CalendarTimeInterval;
			/**
			 * Sets a new value for property <code>width</code>.
			 * 
			 * Width of the <code>CalendarTimeInterval</code>. The width of the single months depends on this width.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sWidth New value for property <code>width</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setWidth(sWidth: sap.ui.core.CSSSize): CalendarTimeInterval;
		}
	
		class ContentSwitcher extends sap.ui.core.Control {
			/**
			 * Constructor for a new ContentSwitcher.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.unified.ContentSwitcherMetadata);
			/**
			 * Constructor for a new ContentSwitcher.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some content1 to the aggregation <code>content1</code>.
			 * @param oContent1 the content1 to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addContent1(oContent1: sap.ui.core.Control): ContentSwitcher;
			/**
			 * Adds some content2 to the aggregation <code>content2</code>.
			 * @param oContent2 the content2 to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addContent2(oContent2: sap.ui.core.Control): ContentSwitcher;
			/**
			 * Destroys all the content1 in the aggregation <code>content1</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyContent1(): ContentSwitcher;
			/**
			 * Destroys all the content2 in the aggregation <code>content2</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyContent2(): ContentSwitcher;
			/**
			 * Creates a new subclass of class sap.ui.unified.ContentSwitcher with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets current value of property <code>activeContent</code>.
			 * 
			 * The number of the currently active content (1 or 2).
			 * 
			 * Default value is <code>1</code>.
			 * @return Value of property <code>activeContent</code>
			 */
			getActiveContent(): number;
			/**
			 * Gets current value of property <code>animation</code>.
			 * 
			 * Set the used animation when changing content. This just sets a CSS-class named "sapUiUnifiedACSwitcherAnimation" + this value on the root element of the control. The animation has to be implemented in CSS. This also enables applications to implement their own animations via CSS by reacting to the parent class.
			 * See the types sap.ui.unified.ContentSwitcherAnimation for default implementations.
			 * 
			 * Default value is <code>None</code>.
			 * @return Value of property <code>animation</code>
			 */
			getAnimation(): string;
			/**
			 * Gets content of aggregation <code>content1</code>.
			 * 
			 * The controls that should be shown in the first content
			 * @return 
			 */
			getContent1(): sap.ui.core.Control[];
			/**
			 * Gets content of aggregation <code>content2</code>.
			 * 
			 * The controls that should be shown in the second content
			 * @return 
			 */
			getContent2(): sap.ui.core.Control[];
			/**
			 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content1</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oContent1 The content1 whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfContent1(oContent1: sap.ui.core.Control): number;
			/**
			 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content2</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oContent2 The content2 whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfContent2(oContent2: sap.ui.core.Control): number;
			/**
			 * Inserts a content1 into the aggregation <code>content1</code>.
			 * @param oContent1 the content1 to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the content1 should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the content1 is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the content1 is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertContent1(oContent1: sap.ui.core.Control, iIndex: number): ContentSwitcher;
			/**
			 * Inserts a content2 into the aggregation <code>content2</code>.
			 * @param oContent2 the content2 to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the content2 should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the content2 is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the content2 is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertContent2(oContent2: sap.ui.core.Control, iIndex: number): ContentSwitcher;
			/**
			 * Removes all the controls from the aggregation <code>content1</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllContent1(): sap.ui.core.Control[];
			/**
			 * Removes all the controls from the aggregation <code>content2</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllContent2(): sap.ui.core.Control[];
			/**
			 * Removes a content1 from the aggregation <code>content1</code>.
			 * @param vContent1 The content1 to remove or its index or id
			 * @return The removed content1 or <code>null</code>
			 */
			removeContent1(vContent1: number|string|sap.ui.core.Control): sap.ui.core.Control;
			/**
			 * Removes a content2 from the aggregation <code>content2</code>.
			 * @param vContent2 The content2 to remove or its index or id
			 * @return The removed content2 or <code>null</code>
			 */
			removeContent2(vContent2: number|string|sap.ui.core.Control): sap.ui.core.Control;
			/**
			 * Sets a new value for property <code>activeContent</code>.
			 * 
			 * The number of the currently active content (1 or 2).
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>1</code>.
			 * @param iActiveContent New value for property <code>activeContent</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setActiveContent(iActiveContent: number): ContentSwitcher;
			/**
			 * Sets a new value for property <code>animation</code>.
			 * 
			 * Set the used animation when changing content. This just sets a CSS-class named "sapUiUnifiedACSwitcherAnimation" + this value on the root element of the control. The animation has to be implemented in CSS. This also enables applications to implement their own animations via CSS by reacting to the parent class.
			 * See the types sap.ui.unified.ContentSwitcherAnimation for default implementations.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>None</code>.
			 * @param sAnimation New value for property <code>animation</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setAnimation(sAnimation: string): ContentSwitcher;
			/**
			 * Changes the currently active content to the other one. If content 1 is active, content 2 will
			 * be activated and the other way around.
			 */
			switchContent();
		}
	
		class ContentSwitcherAnimation {
			/**
			 * Content is faded (opacity change).
			 */
			static Fade: string;
			/**
			 * No animation. Content is switched instantly.
			 */
			static None: string;
			/**
			 * The new content rotates in. (Just like one of those old newspaper-animations.)
			 */
			static Rotate: string;
			/**
			 * The new content slides in from the left while the old content slides out to the left at the same time.
			 */
			static SlideOver: string;
			/**
			 * The new slides in from the left (to the right).
			 */
			static SlideRight: string;
			/**
			 * The new content is "zoomed in" from the center and grows to fill the full content area.
			 */
			static ZoomIn: string;
			/**
			 * The old content is "zoomed out", i.e. shrinks to a point at the center of the content area.
			 */
			static ZoomOut: string;
		}
	
		class Currency extends sap.ui.core.Control {
			/**
			 * Constructor for a new Currency.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.unified.CurrencyMetadata);
			/**
			 * Constructor for a new Currency.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.ui.unified.Currency with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * 
			 */
			getAccessibilityInfo();
			/**
			 * This function (if available on the concrete control) provides
			 * the current accessibility state of the control.
			 * 
			 * Applications must not call this hook method directly, it is called by the framework.
			 * 
			 * Subclasses of Control should implement this hook to provide any necessary accessibility information:
			 * 
			 * <pre>
			 * MyControl.prototype.getAccessibilityInfo = function() {
			 *    return {
			 *      role: "textbox",      // String which represents the WAI-ARIA role which is implemented by the control.
			 *      type: "date input",   // String which represents the control type (Must be a translated text). Might correlate with
			 *                            // the role.
			 *      description: "value", // String which describes the most relevant control state (e.g. the inputs value). Must be a
			 *                            // translated text.
			 *                            // Note: The type and the enabled/editable state must not be handled here.
			 *      focusable: true,      // Boolean which describes whether the control can get the focus.
			 *      enabled: true,        // Boolean which describes whether the control is enabled. If not relevant it must not be set or
			 *                            // <code>null</code> can be provided.
			 *      editable: true,       // Boolean which describes whether the control is editable. If not relevant it must not be set or
			 *                            // <code>null</code> can be provided.
			 *      children: []          // Array of accessibility info objects of children of the given control (e.g. when the control is a layout).
			 *                            // Note: Children should only be provided when it is helpful to understand the accessibility context
			 *                            //       (e.g. a form control must not provide details of its internals (fields, labels, ...) but a
			 *                            //       layout should).
			 *    };
			 * };
			 * </pre>
			 * 
			 * Note: The returned object provides the accessibility state of the control at the point in time when this function is called.
			 * @note Overload from base type sap.ui.core.Control
			 * @return Current accessibility state of the control.
			 */
			getAccessibilityInfo(): any;
			/**
			 * Gets current value of property <code>currency</code>.
			 * 
			 * Determines the displayed currency code (ISO 4217).
			 * <b>Note: </b>If a * character is set instead of currency code,
			 * only the character itself will be rendered, ignoring the <code>value</code> property.
			 * @return Value of property <code>currency</code>
			 */
			getCurrency(): string;
			/**
			 * Get symbol of the currency, if available
			 * @return 
			 */
			getCurrencySymbol(): string;
			/**
			 * The formatted value
			 * @return 
			 */
			getFormattedValue(): string;
			/**
			 * Gets current value of property <code>maxPrecision</code>.
			 * 
			 * Defines the space that is available for the precision of the various currencies.
			 * 
			 * Default value is <code>3</code>.
			 * @return Value of property <code>maxPrecision</code>
			 */
			getMaxPrecision(): number;
			/**
			 * Gets current value of property <code>useSymbol</code>.
			 * 
			 * Show the currency symbol instead of the ISO currency code
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>useSymbol</code>
			 */
			getUseSymbol(): boolean;
			/**
			 * Gets current value of property <code>value</code>.
			 * 
			 * The currency value
			 * 
			 * Default value is <code>0</code>.
			 * @return Value of property <code>value</code>
			 */
			getValue(): number;
			/**
			 * Initializes the control.
			 */
			init();
		}
	
		class DateRange extends sap.ui.core.Element {
			/**
			 * Constructor for a new DateRange.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.unified.DateRangeMetadata);
			/**
			 * Constructor for a new DateRange.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.ui.unified.DateRange with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets current value of property <code>endDate</code>.
			 * 
			 * Start date for a date range. If empty only a single date is presented by this DateRange element. This must be a JavaScript date object.
			 * @return Value of property <code>endDate</code>
			 */
			getEndDate(): any;
			/**
			 * Gets current value of property <code>startDate</code>.
			 * 
			 * Start date for a date range. This must be a JavaScript date object.
			 * @return Value of property <code>startDate</code>
			 */
			getStartDate(): any;
			/**
			 * Sets a new value for property <code>endDate</code>.
			 * 
			 * Start date for a date range. If empty only a single date is presented by this DateRange element. This must be a JavaScript date object.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param oEndDate New value for property <code>endDate</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setEndDate(oEndDate: any): DateRange;
			/**
			 * Sets a new value for property <code>startDate</code>.
			 * 
			 * Start date for a date range. This must be a JavaScript date object.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param oStartDate New value for property <code>startDate</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setStartDate(oStartDate: any): DateRange;
		}
	
		class DateTypeRange extends DateRange {
			/**
			 * Constructor for a new DateTypeRange.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.unified.DateTypeRangeMetadata);
			/**
			 * Constructor for a new DateTypeRange.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.ui.unified.DateTypeRange with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.unified.DateRange.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets current value of property <code>type</code>.
			 * 
			 * Type of the date range.
			 * 
			 * Default value is <code>Type01</code>.
			 * @return Value of property <code>type</code>
			 */
			getType(): CalendarDayType;
			/**
			 * Sets a new value for property <code>type</code>.
			 * 
			 * Type of the date range.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>Type01</code>.
			 * @param sType New value for property <code>type</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setType(sType: CalendarDayType): DateTypeRange;
		}
	
		class FileUploader extends sap.ui.core.Control {
			/**
			 * Constructor for a new FileUploader.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.unified.FileUploaderMetadata);
			/**
			 * Constructor for a new FileUploader.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Aborts the currently running upload.
			 */
			abort();
			/**
			 * Adds some headerParameter to the aggregation <code>headerParameters</code>.
			 * @param oHeaderParameter the headerParameter to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addHeaderParameter(oHeaderParameter: FileUploaderParameter): FileUploader;
			/**
			 * Adds some parameter to the aggregation <code>parameters</code>.
			 * @param oParameter the parameter to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addParameter(oParameter: FileUploaderParameter): FileUploader;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>change</code> event of this <code>sap.ui.unified.FileUploader</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.unified.FileUploader</code> itself.
			 * 
			 * Event is fired when the value of the file path has been changed.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.FileUploader</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachChange(oData: any, fnFunction: any, oListener?: any): FileUploader;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>fileAllowed</code> event of this <code>sap.ui.unified.FileUploader</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.unified.FileUploader</code> itself.
			 * 
			 * Event is fired when the file is allowed for upload on client side.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.FileUploader</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachFileAllowed(oData: any, fnFunction: any, oListener?: any): FileUploader;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>filenameLengthExceed</code> event of this <code>sap.ui.unified.FileUploader</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.unified.FileUploader</code> itself.
			 * 
			 * Event is fired, if the filename of a chosen file is longer than the value specified with the maximumFilenameLength property.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.FileUploader</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachFilenameLengthExceed(oData: any, fnFunction: any, oListener?: any): FileUploader;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>fileSizeExceed</code> event of this <code>sap.ui.unified.FileUploader</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.unified.FileUploader</code> itself.
			 * 
			 * Event is fired when the size of a file is above the maximumFileSize property.
			 * This event is not supported by Internet Explorer 9 (same restriction as for the property maximumFileSize).
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.FileUploader</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachFileSizeExceed(oData: any, fnFunction: any, oListener?: any): FileUploader;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>typeMissmatch</code> event of this <code>sap.ui.unified.FileUploader</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.unified.FileUploader</code> itself.
			 * 
			 * Event is fired when the type of a file does not match the mimeType or fileType property.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.FileUploader</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachTypeMissmatch(oData: any, fnFunction: any, oListener?: any): FileUploader;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>uploadAborted</code> event of this <code>sap.ui.unified.FileUploader</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.unified.FileUploader</code> itself.
			 * 
			 * Event is fired after the current upload has been aborted.
			 * This is event is only supported with property sendXHR set to true, i.e. the event is not supported in Internet Explorer 9.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.FileUploader</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachUploadAborted(oData: any, fnFunction: any, oListener?: any): FileUploader;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>uploadComplete</code> event of this <code>sap.ui.unified.FileUploader</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.unified.FileUploader</code> itself.
			 * 
			 * Event is fired as soon as the upload request is completed (either successful or unsuccessful). To see if the upload request was successful, check the 'state' parameter for a value 2xx.
			 * The uploads actual progress can be retrieved via the 'uploadProgress' Event.
			 * However this covers only the client side of the Upload process and does not give any success status from the server.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.FileUploader</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachUploadComplete(oData: any, fnFunction: any, oListener?: any): FileUploader;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>uploadProgress</code> event of this <code>sap.ui.unified.FileUploader</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.unified.FileUploader</code> itself.
			 * 
			 * Event is fired after the upload has started and before the upload is completed and contains progress information related to the running upload.
			 * Depending on file size, band width and used browser the event is fired once or multiple times.
			 * This is event is only supported with property sendXHR set to true, i.e. the event is not supported in Internet Explorer 9.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.FileUploader</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachUploadProgress(oData: any, fnFunction: any, oListener?: any): FileUploader;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>uploadStart</code> event of this <code>sap.ui.unified.FileUploader</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.unified.FileUploader</code> itself.
			 * 
			 * Event is fired before an upload is started.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.FileUploader</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachUploadStart(oData: any, fnFunction: any, oListener?: any): FileUploader;
			/**
			 * Clears the content of the FileUploader. The attached additional data however is retained.
			 */
			clear();
			/**
			 * Destroys all the headerParameters in the aggregation <code>headerParameters</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyHeaderParameters(): FileUploader;
			/**
			 * Destroys all the parameters in the aggregation <code>parameters</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyParameters(): FileUploader;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>change</code> event of this <code>sap.ui.unified.FileUploader</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachChange(fnFunction: any, oListener: any): FileUploader;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>fileAllowed</code> event of this <code>sap.ui.unified.FileUploader</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachFileAllowed(fnFunction: any, oListener: any): FileUploader;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>filenameLengthExceed</code> event of this <code>sap.ui.unified.FileUploader</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachFilenameLengthExceed(fnFunction: any, oListener: any): FileUploader;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>fileSizeExceed</code> event of this <code>sap.ui.unified.FileUploader</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachFileSizeExceed(fnFunction: any, oListener: any): FileUploader;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>typeMissmatch</code> event of this <code>sap.ui.unified.FileUploader</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachTypeMissmatch(fnFunction: any, oListener: any): FileUploader;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>uploadAborted</code> event of this <code>sap.ui.unified.FileUploader</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachUploadAborted(fnFunction: any, oListener: any): FileUploader;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>uploadComplete</code> event of this <code>sap.ui.unified.FileUploader</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachUploadComplete(fnFunction: any, oListener: any): FileUploader;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>uploadProgress</code> event of this <code>sap.ui.unified.FileUploader</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachUploadProgress(fnFunction: any, oListener: any): FileUploader;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>uploadStart</code> event of this <code>sap.ui.unified.FileUploader</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachUploadStart(fnFunction: any, oListener: any): FileUploader;
			/**
			 * Creates a new subclass of class sap.ui.unified.FileUploader with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Fires event <code>change</code> to attached listeners.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>newValue</code> of type <code>string</code>New file path value.</li>
			 * <li><code>files</code> of type <code>object[]</code>Files.</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireChange(mArguments?: any): FileUploader;
			/**
			 * Fires event <code>fileAllowed</code> to attached listeners.
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireFileAllowed(mArguments?: any): FileUploader;
			/**
			 * Fires event <code>filenameLengthExceed</code> to attached listeners.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>fileName</code> of type <code>string</code>The filename, which is longer than specified by the value of the property maximumFilenameLength.</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireFilenameLengthExceed(mArguments?: any): FileUploader;
			/**
			 * Fires event <code>fileSizeExceed</code> to attached listeners.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>fileName</code> of type <code>string</code>The name of a file to be uploaded.</li>
			 * <li><code>fileSize</code> of type <code>string</code>The size in MB of a file to be uploaded.</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireFileSizeExceed(mArguments?: any): FileUploader;
			/**
			 * Fires event <code>typeMissmatch</code> to attached listeners.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>fileName</code> of type <code>string</code>The name of a file to be uploaded.</li>
			 * <li><code>fileType</code> of type <code>string</code>The file ending of a file to be uploaded.</li>
			 * <li><code>mimeType</code> of type <code>string</code>The MIME type of a file to be uploaded.</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireTypeMissmatch(mArguments?: any): FileUploader;
			/**
			 * Fires event <code>uploadAborted</code> to attached listeners.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>fileName</code> of type <code>string</code>The name of a file to be uploaded.</li>
			 * <li><code>requestHeaders</code> of type <code>object[]</code>Http-Request-Headers. Required for receiving "header" is to set the property "sendXHR" to true.
			 * This property is not supported by Internet Explorer 9.</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireUploadAborted(mArguments?: any): FileUploader;
			/**
			 * Fires event <code>uploadComplete</code> to attached listeners.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>fileName</code> of type <code>string</code>The name of a file to be uploaded.</li>
			 * <li><code>response</code> of type <code>string</code>Response message which comes from the server. On the server side this response has to be put within the &quot;body&quot; tags of the response document of the iFrame.
			 * It can consist of a return code and an optional message. This does not work in cross-domain scenarios.</li>
			 * <li><code>readyStateXHR</code> of type <code>string</code>ReadyState of the XHR request. Required for receiving a readyState is to set the property "sendXHR" to "true". This property is not supported by Internet Explorer 9.</li>
			 * <li><code>status</code> of type <code>string</code>Status of the XHR request. Required for receiving a status is to set the property "sendXHR" to "true". This property is not supported by Internet Explorer 9.</li>
			 * <li><code>responseRaw</code> of type <code>string</code>Http-Response which comes from the server. Required for receiving "responseRaw" is to set the property "sendXHR" to true. This property is not supported by Internet Explorer 9.</li>
			 * <li><code>headers</code> of type <code>object</code>Http-Response-Headers which come from the server. provided as a JSON-map, i.e. each header-field is reflected by a property in the header-object, with the property value reflecting the header-field's content.
			 * Required for receiving "header" is to set the property "sendXHR" to true.
			 * This property is not supported by Internet Explorer 9.</li>
			 * <li><code>requestHeaders</code> of type <code>object[]</code>Http-Request-Headers. Required for receiving "header" is to set the property "sendXHR" to true. This property is not supported by Internet Explorer 9.</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireUploadComplete(mArguments?: any): FileUploader;
			/**
			 * Fires event <code>uploadProgress</code> to attached listeners.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>lengthComputable</code> of type <code>boolean</code>Indicates whether or not the relative upload progress can be calculated out of loaded and total.</li>
			 * <li><code>loaded</code> of type <code>float</code>The number of bytes of the file which have been uploaded by to the time the event was fired.</li>
			 * <li><code>total</code> of type <code>float</code>The total size of the file to be uploaded in byte.</li>
			 * <li><code>fileName</code> of type <code>string</code>The name of a file to be uploaded.</li>
			 * <li><code>requestHeaders</code> of type <code>object[]</code>Http-Request-Headers. Required for receiving "header" is to set the property "sendXHR" to true.
			 * This property is not supported by Internet Explorer 9.</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireUploadProgress(mArguments?: any): FileUploader;
			/**
			 * Fires event <code>uploadStart</code> to attached listeners.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>fileName</code> of type <code>string</code>The name of a file to be uploaded.</li>
			 * <li><code>requestHeaders</code> of type <code>object[]</code>Http-Request-Headers. Required for receiving "header" is to set the property "sendXHR" to true.
			 * This property is not supported by Internet Explorer 9.</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireUploadStart(mArguments?: any): FileUploader;
			/**
			 * Gets current value of property <code>additionalData</code>.
			 * 
			 * Additional data that is sent to the back end service. Data will be transmitted as value of a hidden input where the name is derived from the name property with suffix -data.
			 * @return Value of property <code>additionalData</code>
			 */
			getAdditionalData(): string;
			/**
			 * Gets current value of property <code>buttonOnly</code>.
			 * 
			 * If set to "true", the FileUploader will be rendered as Button only, without showing the InputField.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>buttonOnly</code>
			 */
			getButtonOnly(): boolean;
			/**
			 * Gets current value of property <code>buttonText</code>.
			 * 
			 * The Button text can be overwritten using this property.
			 * @return Value of property <code>buttonText</code>
			 */
			getButtonText(): string;
			/**
			 * Gets current value of property <code>enabled</code>.
			 * 
			 * Disabled controls have different colors, depending on customer settings.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>enabled</code>
			 */
			getEnabled(): boolean;
			/**
			 * Gets current value of property <code>fileType</code>.
			 * 
			 * The chosen files will be checked against an array of file types. If at least one file does not fit the file type restriction the upload is prevented.
			 * Example: ["jpg", "png", "bmp"].
			 * @return Value of property <code>fileType</code>
			 */
			getFileType(): string[];
			/**
			 * Gets content of aggregation <code>headerParameters</code>.
			 * 
			 * The header parameters for the FileUploader which are only submitted with XHR requests. Header parameters are not supported by Internet Explorer 9.
			 * @return 
			 */
			getHeaderParameters(): FileUploaderParameter[];
			/**
			 * Gets current value of property <code>icon</code>.
			 * 
			 * Icon to be displayed as graphical element within the button.
			 * This can be an URI to an image or an icon font URI.
			 * 
			 * Default value is <code></code>.
			 * @return Value of property <code>icon</code>
			 */
			getIcon(): sap.ui.core.URI;
			/**
			 * Gets current value of property <code>iconFirst</code>.
			 * 
			 * If set to true (default), the display sequence is 1. icon 2. control text.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>iconFirst</code>
			 */
			getIconFirst(): boolean;
			/**
			 * Gets current value of property <code>iconHovered</code>.
			 * 
			 * Icon to be displayed as graphical element within the button when it is hovered (only if also a base icon was specified). If not specified the base icon is used.
			 * If a icon font icon is used, this property is ignored.
			 * 
			 * Default value is <code></code>.
			 * @return Value of property <code>iconHovered</code>
			 */
			getIconHovered(): sap.ui.core.URI;
			/**
			 * Gets current value of property <code>iconOnly</code>.
			 * 
			 * If set to true, the button is displayed without any text.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>iconOnly</code>
			 */
			getIconOnly(): boolean;
			/**
			 * Gets current value of property <code>iconSelected</code>.
			 * 
			 * Icon to be displayed as graphical element within the button when it is selected (only if also a base icon was specified). If not specified the base or hovered icon is used.
			 * If a icon font icon is used, this property is ignored.
			 * 
			 * Default value is <code></code>.
			 * @return Value of property <code>iconSelected</code>
			 */
			getIconSelected(): sap.ui.core.URI;
			/**
			 * Gets current value of property <code>maximumFilenameLength</code>.
			 * 
			 * The maximum length of a filename which the FileUploader will accept. If the maximum filename length is exceeded, the corresponding Event 'filenameLengthExceed' is fired.
			 * @return Value of property <code>maximumFilenameLength</code>
			 */
			getMaximumFilenameLength(): number;
			/**
			 * Gets current value of property <code>maximumFileSize</code>.
			 * 
			 * A file size limit in megabytes which prevents the upload if at least one file exceeds it. This property is not supported by Internet Explorer 9.
			 * @return Value of property <code>maximumFileSize</code>
			 */
			getMaximumFileSize(): number;
			/**
			 * Gets current value of property <code>mimeType</code>.
			 * 
			 * The chosen files will be checked against an array of mime types. If at least one file does not fit the mime type restriction the upload is prevented. This property is not supported by Internet Explorer 9.
			 * Example: mimeType ["image/png", "image/jpeg"].
			 * @return Value of property <code>mimeType</code>
			 */
			getMimeType(): string[];
			/**
			 * Gets current value of property <code>multiple</code>.
			 * 
			 * Allows multiple files to be chosen and uploaded from the same folder. This property is not supported by Internet Explorer 9.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>multiple</code>
			 */
			getMultiple(): boolean;
			/**
			 * Gets current value of property <code>name</code>.
			 * 
			 * Unique control name for identification on the server side after sending data to the server.
			 * @return Value of property <code>name</code>
			 */
			getName(): string;
			/**
			 * Gets content of aggregation <code>parameters</code>.
			 * 
			 * The parameters for the FileUploader which are rendered as a hidden inputfield.
			 * @return 
			 */
			getParameters(): FileUploaderParameter[];
			/**
			 * Gets current value of property <code>placeholder</code>.
			 * 
			 * Placeholder for the text field.
			 * @return Value of property <code>placeholder</code>
			 */
			getPlaceholder(): string;
			/**
			 * Gets current value of property <code>sameFilenameAllowed</code>.
			 * 
			 * If the FileUploader is configured to upload the file directly after the file is selected it is not allowed to upload a file with the same name again. If a user should be allowed to upload a file with the same name again this parameter has to be "true". A typical use case would be if the files have different paths.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>sameFilenameAllowed</code>
			 */
			getSameFilenameAllowed(): boolean;
			/**
			 * Gets current value of property <code>sendXHR</code>.
			 * 
			 * If set to "true", the request will be sent as XHR request instead of a form submit. This property is not supported by Internet Explorer 9.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>sendXHR</code>
			 */
			getSendXHR(): boolean;
			/**
			 * Gets current value of property <code>style</code>.
			 * 
			 * Style of the button. "Transparent, "Accept", "Reject", or "Emphasized" is allowed.
			 * @return Value of property <code>style</code>
			 */
			getStyle(): string;
			/**
			 * Gets current value of property <code>uploadOnChange</code>.
			 * 
			 * If set to "true", the upload immediately starts after file selection. With the default setting, the upload needs to be explicitly triggered.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>uploadOnChange</code>
			 */
			getUploadOnChange(): boolean;
			/**
			 * Gets current value of property <code>uploadUrl</code>.
			 * 
			 * Used when URL address is on a remote server.
			 * 
			 * Default value is <code></code>.
			 * @return Value of property <code>uploadUrl</code>
			 */
			getUploadUrl(): sap.ui.core.URI;
			/**
			 * Gets current value of property <code>useMultipart</code>.
			 * 
			 * If set to "false", the request will be sent as file only request instead of a multipart/form-data request. Only one file could be uploaded using this type of request. Required for sending such a request is to set the property "sendXHR" to "true". This property is not supported by Internet Explorer 9.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>useMultipart</code>
			 */
			getUseMultipart(): boolean;
			/**
			 * Gets current value of property <code>value</code>.
			 * 
			 * Value of the path for file upload.
			 * 
			 * Default value is <code></code>.
			 * @return Value of property <code>value</code>
			 */
			getValue(): string;
			/**
			 * Gets current value of property <code>valueState</code>.
			 * 
			 * Visualizes warnings or errors related to the text field. Possible values: Warning, Error, Success, None.
			 * 
			 * Default value is <code>None</code>.
			 * @return Value of property <code>valueState</code>
			 */
			getValueState(): sap.ui.core.ValueState;
			/**
			 * Gets current value of property <code>width</code>.
			 * 
			 * Specifies the displayed control width.
			 * 
			 * Default value is <code></code>.
			 * @return Value of property <code>width</code>
			 */
			getWidth(): sap.ui.core.CSSSize;
			/**
			 * Checks for the provided <code>sap.ui.unified.FileUploaderParameter</code> in the aggregation <code>headerParameters</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oHeaderParameter The headerParameter whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfHeaderParameter(oHeaderParameter: FileUploaderParameter): number;
			/**
			 * Checks for the provided <code>sap.ui.unified.FileUploaderParameter</code> in the aggregation <code>parameters</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oParameter The parameter whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfParameter(oParameter: FileUploaderParameter): number;
			/**
			 * Inserts a headerParameter into the aggregation <code>headerParameters</code>.
			 * @param oHeaderParameter the headerParameter to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the headerParameter should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the headerParameter is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the headerParameter is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertHeaderParameter(oHeaderParameter: FileUploaderParameter, iIndex: number): FileUploader;
			/**
			 * Inserts a parameter into the aggregation <code>parameters</code>.
			 * @param oParameter the parameter to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the parameter should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the parameter is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the parameter is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertParameter(oParameter: FileUploaderParameter, iIndex: number): FileUploader;
			/**
			 * Removes all the controls from the aggregation <code>headerParameters</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllHeaderParameters(): FileUploaderParameter[];
			/**
			 * Removes all the controls from the aggregation <code>parameters</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllParameters(): FileUploaderParameter[];
			/**
			 * Removes a headerParameter from the aggregation <code>headerParameters</code>.
			 * @param vHeaderParameter The headerParameter to remove or its index or id
			 * @return The removed headerParameter or <code>null</code>
			 */
			removeHeaderParameter(vHeaderParameter: number|string|FileUploaderParameter): FileUploaderParameter;
			/**
			 * Removes a parameter from the aggregation <code>parameters</code>.
			 * @param vParameter The parameter to remove or its index or id
			 * @return The removed parameter or <code>null</code>
			 */
			removeParameter(vParameter: number|string|FileUploaderParameter): FileUploaderParameter;
			/**
			 * Sets a new value for property <code>additionalData</code>.
			 * 
			 * Additional data that is sent to the back end service. Data will be transmitted as value of a hidden input where the name is derived from the name property with suffix -data.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sAdditionalData New value for property <code>additionalData</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setAdditionalData(sAdditionalData: string): FileUploader;
			/**
			 * Sets a new value for property <code>buttonOnly</code>.
			 * 
			 * If set to "true", the FileUploader will be rendered as Button only, without showing the InputField.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bButtonOnly New value for property <code>buttonOnly</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setButtonOnly(bButtonOnly: boolean): FileUploader;
			/**
			 * Sets a new value for property <code>buttonText</code>.
			 * 
			 * The Button text can be overwritten using this property.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sButtonText New value for property <code>buttonText</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setButtonText(sButtonText: string): FileUploader;
			/**
			 * Sets a new value for property <code>enabled</code>.
			 * 
			 * Disabled controls have different colors, depending on customer settings.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bEnabled New value for property <code>enabled</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setEnabled(bEnabled: boolean): FileUploader;
			/**
			 * Sets a new value for property <code>fileType</code>.
			 * 
			 * The chosen files will be checked against an array of file types. If at least one file does not fit the file type restriction the upload is prevented.
			 * Example: ["jpg", "png", "bmp"].
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sFileType New value for property <code>fileType</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setFileType(sFileType: string[]): FileUploader;
			/**
			 * Sets a new value for property <code>icon</code>.
			 * 
			 * Icon to be displayed as graphical element within the button.
			 * This can be an URI to an image or an icon font URI.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code></code>.
			 * @param sIcon New value for property <code>icon</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setIcon(sIcon: sap.ui.core.URI): FileUploader;
			/**
			 * Sets a new value for property <code>iconFirst</code>.
			 * 
			 * If set to true (default), the display sequence is 1. icon 2. control text.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bIconFirst New value for property <code>iconFirst</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setIconFirst(bIconFirst: boolean): FileUploader;
			/**
			 * Sets a new value for property <code>iconHovered</code>.
			 * 
			 * Icon to be displayed as graphical element within the button when it is hovered (only if also a base icon was specified). If not specified the base icon is used.
			 * If a icon font icon is used, this property is ignored.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code></code>.
			 * @param sIconHovered New value for property <code>iconHovered</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setIconHovered(sIconHovered: sap.ui.core.URI): FileUploader;
			/**
			 * Sets a new value for property <code>iconOnly</code>.
			 * 
			 * If set to true, the button is displayed without any text.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bIconOnly New value for property <code>iconOnly</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setIconOnly(bIconOnly: boolean): FileUploader;
			/**
			 * Sets a new value for property <code>iconSelected</code>.
			 * 
			 * Icon to be displayed as graphical element within the button when it is selected (only if also a base icon was specified). If not specified the base or hovered icon is used.
			 * If a icon font icon is used, this property is ignored.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code></code>.
			 * @param sIconSelected New value for property <code>iconSelected</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setIconSelected(sIconSelected: sap.ui.core.URI): FileUploader;
			/**
			 * Sets a new value for property <code>maximumFilenameLength</code>.
			 * 
			 * The maximum length of a filename which the FileUploader will accept. If the maximum filename length is exceeded, the corresponding Event 'filenameLengthExceed' is fired.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param iMaximumFilenameLength New value for property <code>maximumFilenameLength</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setMaximumFilenameLength(iMaximumFilenameLength: number): FileUploader;
			/**
			 * Sets a new value for property <code>maximumFileSize</code>.
			 * 
			 * A file size limit in megabytes which prevents the upload if at least one file exceeds it. This property is not supported by Internet Explorer 9.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param fMaximumFileSize New value for property <code>maximumFileSize</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setMaximumFileSize(fMaximumFileSize: number): FileUploader;
			/**
			 * Sets a new value for property <code>mimeType</code>.
			 * 
			 * The chosen files will be checked against an array of mime types. If at least one file does not fit the mime type restriction the upload is prevented. This property is not supported by Internet Explorer 9.
			 * Example: mimeType ["image/png", "image/jpeg"].
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sMimeType New value for property <code>mimeType</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setMimeType(sMimeType: string[]): FileUploader;
			/**
			 * Sets a new value for property <code>multiple</code>.
			 * 
			 * Allows multiple files to be chosen and uploaded from the same folder. This property is not supported by Internet Explorer 9.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bMultiple New value for property <code>multiple</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setMultiple(bMultiple: boolean): FileUploader;
			/**
			 * Sets a new value for property <code>name</code>.
			 * 
			 * Unique control name for identification on the server side after sending data to the server.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sName New value for property <code>name</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setName(sName: string): FileUploader;
			/**
			 * Sets a new value for property <code>placeholder</code>.
			 * 
			 * Placeholder for the text field.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sPlaceholder New value for property <code>placeholder</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setPlaceholder(sPlaceholder: string): FileUploader;
			/**
			 * Sets a new value for property <code>sameFilenameAllowed</code>.
			 * 
			 * If the FileUploader is configured to upload the file directly after the file is selected it is not allowed to upload a file with the same name again. If a user should be allowed to upload a file with the same name again this parameter has to be "true". A typical use case would be if the files have different paths.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bSameFilenameAllowed New value for property <code>sameFilenameAllowed</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSameFilenameAllowed(bSameFilenameAllowed: boolean): FileUploader;
			/**
			 * Sets a new value for property <code>sendXHR</code>.
			 * 
			 * If set to "true", the request will be sent as XHR request instead of a form submit. This property is not supported by Internet Explorer 9.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bSendXHR New value for property <code>sendXHR</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSendXHR(bSendXHR: boolean): FileUploader;
			/**
			 * Sets a new value for property <code>style</code>.
			 * 
			 * Style of the button. "Transparent, "Accept", "Reject", or "Emphasized" is allowed.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sStyle New value for property <code>style</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setStyle(sStyle: string): FileUploader;
			/**
			 * Sets a new value for property <code>uploadOnChange</code>.
			 * 
			 * If set to "true", the upload immediately starts after file selection. With the default setting, the upload needs to be explicitly triggered.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bUploadOnChange New value for property <code>uploadOnChange</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setUploadOnChange(bUploadOnChange: boolean): FileUploader;
			/**
			 * Sets a new value for property <code>uploadUrl</code>.
			 * 
			 * Used when URL address is on a remote server.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code></code>.
			 * @param sUploadUrl New value for property <code>uploadUrl</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setUploadUrl(sUploadUrl: sap.ui.core.URI): FileUploader;
			/**
			 * Sets a new value for property <code>useMultipart</code>.
			 * 
			 * If set to "false", the request will be sent as file only request instead of a multipart/form-data request. Only one file could be uploaded using this type of request. Required for sending such a request is to set the property "sendXHR" to "true". This property is not supported by Internet Explorer 9.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bUseMultipart New value for property <code>useMultipart</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setUseMultipart(bUseMultipart: boolean): FileUploader;
			/**
			 * Sets a new value for property <code>value</code>.
			 * 
			 * Value of the path for file upload.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code></code>.
			 * @param sValue New value for property <code>value</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setValue(sValue: string): FileUploader;
			/**
			 * Sets a new value for property <code>valueState</code>.
			 * 
			 * Visualizes warnings or errors related to the text field. Possible values: Warning, Error, Success, None.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>None</code>.
			 * @param sValueState New value for property <code>valueState</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setValueState(sValueState: sap.ui.core.ValueState): FileUploader;
			/**
			 * Sets a new value for property <code>width</code>.
			 * 
			 * Specifies the displayed control width.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code></code>.
			 * @param sWidth New value for property <code>width</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setWidth(sWidth: sap.ui.core.CSSSize): FileUploader;
			/**
			 * Starts the upload (as defined by uploadUrl)
			 */
			upload();
		}
	
		class FileUploaderParameter extends sap.ui.core.Element {
			/**
			 * Constructor for a new FileUploaderParameter.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.unified.FileUploaderParameterMetadata);
			/**
			 * Constructor for a new FileUploaderParameter.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.ui.unified.FileUploaderParameter with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets current value of property <code>name</code>.
			 * 
			 * The name of the hidden inputfield.
			 * @return Value of property <code>name</code>
			 */
			getName(): string;
			/**
			 * Gets current value of property <code>value</code>.
			 * 
			 * The value of the hidden inputfield.
			 * @return Value of property <code>value</code>
			 */
			getValue(): string;
			/**
			 * Sets a new value for property <code>name</code>.
			 * 
			 * The name of the hidden inputfield.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sName New value for property <code>name</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setName(sName: string): FileUploaderParameter;
			/**
			 * Sets a new value for property <code>value</code>.
			 * 
			 * The value of the hidden inputfield.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sValue New value for property <code>value</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setValue(sValue: string): FileUploaderParameter;
		}
	
		class Menu extends sap.ui.core.Control {
			/**
			 * Constructor for a new Menu control.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId Id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.unified.MenuMetadata);
			/**
			 * Constructor for a new Menu control.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId Id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
			 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): Menu;
			/**
			 * Adds some item to the aggregation <code>items</code>.
			 * @param oItem the item to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addItem(oItem: MenuItemBase): Menu;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>itemSelect</code> event of this <code>sap.ui.unified.Menu</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.unified.Menu</code> itself.
			 * 
			 * Fired on the root menu of a menu hierarchy whenever a user selects an item within the menu or within one of its direct or indirect submenus.
			 * <b>Note:</b> There is also a select event available for each single menu item. This event and the event of the menu items are redundant.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.Menu</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachItemSelect(oData: any, fnFunction: any, oListener?: any): Menu;
			/**
			 * Closes the menu.
			 */
			close();
			/**
			 * Destroys all the items in the aggregation <code>items</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyItems(): Menu;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>itemSelect</code> event of this <code>sap.ui.unified.Menu</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachItemSelect(fnFunction: any, oListener: any): Menu;
			/**
			 * Creates a new subclass of class sap.ui.unified.Menu with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Fires event <code>itemSelect</code> to attached listeners.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>item</code> of type <code>sap.ui.unified.MenuItemBase</code>The action (item) which was selected by the user.</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireItemSelect(mArguments?: any): Menu;
			/**
			 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
			 * @return 
			 */
			getAriaLabelledBy(): sap.ui.core.ID[];
			/**
			 * Gets current value of property <code>enabled</code>.
			 * 
			 * When a menu is disabled none of its items can be selected by the user.
			 * The enabled property of an item (@link sap.ui.unified.MenuItemBase#getEnabled) has no effect when the menu of the item is disabled.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>enabled</code>
			 */
			getEnabled(): boolean;
			/**
			 * Gets content of aggregation <code>items</code>.
			 * 
			 * The available actions to be displayed as items of the menu.
			 * @return 
			 */
			getItems(): MenuItemBase[];
			/**
			 * Gets current value of property <code>maxVisibleItems</code>.
			 * 
			 * The maximum number of items which are displayed before an overflow mechanism takes effect.
			 * A value smaller than 1 means an infinite number of visible items.
			 * The overall height of the menu is limited by the height of the screen. If the maximum possible height is reached, an
			 * overflow takes effect, even if the maximum number of visible items is not yet reached.
			 * 
			 * Default value is <code>0</code>.
			 * @return Value of property <code>maxVisibleItems</code>
			 */
			getMaxVisibleItems(): number;
			/**
			 * Gets current value of property <code>pageSize</code>.
			 * 
			 * The keyboard can be used to navigate through the items of a menu. Beside the arrow keys for single steps and the <i>Home</i> / <i>End</i> keys for jumping
			 * to the first / last item, the <i>Page Up</i> / <i>Page Down</i> keys can be used to jump an arbitrary number of items up or down. This number can be defined via the <code>pageSize</code> property.
			 * For values smaller than 1, paging behaves in a similar way to when using the <i>Home</i> / <i>End</i> keys. If the value equals 1, the paging behavior is similar to that of the arrow keys.
			 * 
			 * Default value is <code>5</code>.
			 * @return Value of property <code>pageSize</code>
			 */
			getPageSize(): number;
			/**
			 * Checks for the provided <code>sap.ui.unified.MenuItemBase</code> in the aggregation <code>items</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oItem The item whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfItem(oItem: MenuItemBase): number;
			/**
			 * Inserts a item into the aggregation <code>items</code>.
			 * @param oItem the item to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the item should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the item is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertItem(oItem: MenuItemBase, iIndex: number): Menu;
			/**
			 * Opens the menu at the specified position.
			 * 
			 * The position of the menu is defined relative to an element in the visible DOM by specifying
			 * the docking location of the menu and of the related element.
			 * 
			 * See {@link sap.ui.core.Popup#open Popup#open} for further details about popup positioning.
			 * @param bWithKeyboard Indicates whether or not the first item shall be highlighted when the menu is opened (keyboard case)
			 * @param oOpenerRef The element which will get the focus back again after the menu was closed
			 * @param sMy The reference docking location of the menu for positioning the menu on the screen
			 * @param sAt The 'of' element's reference docking location for positioning the menu on the screen
			 * @param oOf The menu is positioned relatively to this element based on the given dock locations
			 * @param sOffset The offset relative to the docking point, specified as a string with space-separated pixel values (e.g. "0 10" to move the popup 10 pixels to the right)(optional)
			 * @param sCollision The collision defines how the position of the menu should be adjusted in case it overflows the window in some direction(optional)
			 */
			open(bWithKeyboard: boolean, oOpenerRef: sap.ui.core.Element|any, sMy: sap.ui.core.Dock, sAt: sap.ui.core.Dock, oOf: sap.ui.core.Element|any, sOffset?: string, sCollision?: sap.ui.core.Collision);
			/**
			 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllAriaLabelledBy(): sap.ui.core.ID[];
			/**
			 * Removes all the controls from the aggregation <code>items</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllItems(): MenuItemBase[];
			/**
			 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
			 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
			 * @return The removed ariaLabelledBy or <code>null</code>
			 */
			removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
			/**
			 * Removes a item from the aggregation <code>items</code>.
			 * @param vItem The item to remove or its index or id
			 * @return The removed item or <code>null</code>
			 */
			removeItem(vItem: number|string|MenuItemBase): MenuItemBase;
			/**
			 * Sets a new value for property <code>enabled</code>.
			 * 
			 * When a menu is disabled none of its items can be selected by the user.
			 * The enabled property of an item (@link sap.ui.unified.MenuItemBase#getEnabled) has no effect when the menu of the item is disabled.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bEnabled New value for property <code>enabled</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setEnabled(bEnabled: boolean): Menu;
			/**
			 * Sets a new value for property <code>maxVisibleItems</code>.
			 * 
			 * The maximum number of items which are displayed before an overflow mechanism takes effect.
			 * A value smaller than 1 means an infinite number of visible items.
			 * The overall height of the menu is limited by the height of the screen. If the maximum possible height is reached, an
			 * overflow takes effect, even if the maximum number of visible items is not yet reached.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>0</code>.
			 * @param iMaxVisibleItems New value for property <code>maxVisibleItems</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setMaxVisibleItems(iMaxVisibleItems: number): Menu;
			/**
			 * Sets a new value for property <code>pageSize</code>.
			 * 
			 * The keyboard can be used to navigate through the items of a menu. Beside the arrow keys for single steps and the <i>Home</i> / <i>End</i> keys for jumping
			 * to the first / last item, the <i>Page Up</i> / <i>Page Down</i> keys can be used to jump an arbitrary number of items up or down. This number can be defined via the <code>pageSize</code> property.
			 * For values smaller than 1, paging behaves in a similar way to when using the <i>Home</i> / <i>End</i> keys. If the value equals 1, the paging behavior is similar to that of the arrow keys.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>5</code>.
			 * @param iPageSize New value for property <code>pageSize</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setPageSize(iPageSize: number): Menu;
		}
	
		class MenuItem extends MenuItemBase {
			/**
			 * Constructor for a new MenuItem element.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId Id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.unified.MenuItemMetadata);
			/**
			 * Constructor for a new MenuItem element.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId Id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Creates a new subclass of class sap.ui.unified.MenuItem with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.unified.MenuItemBase.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets current value of property <code>icon</code>.
			 * 
			 * Defines the icon of the {@link sap.ui.core.IconPool sap.ui.core.IconPool} or an image which should be displayed on the item.
			 * 
			 * Default value is <code></code>.
			 * @return Value of property <code>icon</code>
			 */
			getIcon(): sap.ui.core.URI;
			/**
			 * Gets current value of property <code>text</code>.
			 * 
			 * Defines the text which should be displayed on the item.
			 * 
			 * Default value is <code></code>.
			 * @return Value of property <code>text</code>
			 */
			getText(): string;
			/**
			 * Sets a new value for property <code>icon</code>.
			 * 
			 * Defines the icon of the {@link sap.ui.core.IconPool sap.ui.core.IconPool} or an image which should be displayed on the item.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code></code>.
			 * @param sIcon New value for property <code>icon</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setIcon(sIcon: sap.ui.core.URI): MenuItem;
			/**
			 * Sets a new value for property <code>text</code>.
			 * 
			 * Defines the text which should be displayed on the item.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code></code>.
			 * @param sText New value for property <code>text</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setText(sText: string): MenuItem;
		}
	
		class MenuItemBase extends sap.ui.core.Element {
			/**
			 * Abstract base class <code>MenuItemBase</code> for menu item elements. Please use concrete subclasses.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId Id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.unified.MenuItemBaseMetadata);
			/**
			 * Abstract base class <code>MenuItemBase</code> for menu item elements. Please use concrete subclasses.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId Id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>select</code> event of this <code>sap.ui.unified.MenuItemBase</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.unified.MenuItemBase</code> itself.
			 * 
			 * Fired when the item is selected by the user.
			 * <b>Note:</b> The event is also available for items which have a submenu.
			 * In general, applications must not handle event in this case because the user selection opens the sub menu.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.MenuItemBase</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachSelect(oData: any, fnFunction: any, oListener?: any): MenuItemBase;
			/**
			 * Destroys the submenu in the aggregation <code>submenu</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroySubmenu(): MenuItemBase;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>select</code> event of this <code>sap.ui.unified.MenuItemBase</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachSelect(fnFunction: any, oListener: any): MenuItemBase;
			/**
			 * Creates a new subclass of class sap.ui.unified.MenuItemBase with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Fires event <code>select</code> to attached listeners.
			 * 
			 * Expects the following event parameters:
			 * <ul>
			 * <li><code>item</code> of type <code>sap.ui.unified.MenuItemBase</code>The current item</li>
			 * </ul>
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireSelect(mArguments?: any): MenuItemBase;
			/**
			 * Gets current value of property <code>enabled</code>.
			 * 
			 * When an item is disabled the item can not be selected by the user.
			 * The enabled property of the item has no effect when the menu of the item is disabled ({@link sap.ui.unified.Menu#getEnabled Menu#getEnabled}).
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>enabled</code>
			 */
			getEnabled(): boolean;
			/**
			 * Gets current value of property <code>startsSection</code>.
			 * 
			 * Defines whether a visual separator should be rendered before the item.
			 * <b>Note:</b> If an item is invisible also the separator of this item is not shown.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>startsSection</code>
			 */
			getStartsSection(): boolean;
			/**
			 * Gets content of aggregation <code>submenu</code>.
			 * 
			 * An optional submenu of the item which is opened when the item is selected by the user.
			 * @return 
			 */
			getSubmenu(): Menu;
			/**
			 * Gets current value of property <code>visible</code>.
			 * 
			 * Invisible items do not appear in the menu.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>visible</code>
			 */
			getVisible(): boolean;
			/**
			 * Changes the visual hover state of the menu item.
			 * 
			 * Subclasses may override this function.
			 * @param bHovered Specifies whether the item is currently hovered or not.
			 * @param oMenu The menu to which this item belongs
			 */
			hover(bHovered: boolean, oMenu: Menu);
			/**
			 * Informs the item that the item HTML is now applied to the DOM.
			 * 
			 * Subclasses may override this function.
			 */
			onAfterRendering();
			/**
			 * Event handler which is called whenever the submenu of the item is opened or closed.
			 * 
			 * Subclasses may override this function.
			 * @param bOpened Specifies whether the submenu of the item is opened or closed
			 */
			onSubmenuToggle(bOpened: boolean);
			/**
			 * Produces the HTML of an item and writes it to render-output-buffer during the rendering of the corresponding menu.
			 * 
			 * Subclasses may override this function.
			 * @param oRenderManager The <code>RenderManager</code> that can be used for writing to the render-output-buffer
			 * @param oItem The item which should be rendered
			 * @param oMenu The menu to which this item belongs
			 */
			render(oRenderManager: sap.ui.core.RenderManager, oItem: MenuItemBase, oMenu: Menu);
			/**
			 * Sets a new value for property <code>enabled</code>.
			 * 
			 * When an item is disabled the item can not be selected by the user.
			 * The enabled property of the item has no effect when the menu of the item is disabled ({@link sap.ui.unified.Menu#getEnabled Menu#getEnabled}).
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bEnabled New value for property <code>enabled</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setEnabled(bEnabled: boolean): MenuItemBase;
			/**
			 * Sets a new value for property <code>startsSection</code>.
			 * 
			 * Defines whether a visual separator should be rendered before the item.
			 * <b>Note:</b> If an item is invisible also the separator of this item is not shown.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bStartsSection New value for property <code>startsSection</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setStartsSection(bStartsSection: boolean): MenuItemBase;
			/**
			 * Sets the aggregated <code>submenu</code>.
			 * @param oSubmenu The submenu to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSubmenu(oSubmenu: Menu): MenuItemBase;
			/**
			 * Sets a new value for property <code>visible</code>.
			 * 
			 * Invisible items do not appear in the menu.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bVisible New value for property <code>visible</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setVisible(bVisible: boolean): MenuItemBase;
		}
	
		class MenuTextFieldItem extends MenuItemBase {
			/**
			 * Constructor for a new MenuTextFieldItem element.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId Id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.unified.MenuTextFieldItemMetadata);
			/**
			 * Constructor for a new MenuTextFieldItem element.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId Id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings Initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * The aggregation <code>submenu</code> (inherited from parent class) is not supported for this type of menu item.
			 * @deprecated The aggregation <code>submenu</code> (inherited from parent class) is not supported for this type of menu item.
			 * @return <code>this</code> to allow method chaining
			 */
			destroySubmenu(): MenuTextFieldItem;
			/**
			 * Destroys the submenu in the aggregation <code>submenu</code>.
			 * @note Overload from base type sap.ui.unified.MenuItemBase
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroySubmenu(): MenuItemBase;
			/**
			 * Creates a new subclass of class sap.ui.unified.MenuTextFieldItem with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.unified.MenuItemBase.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets current value of property <code>icon</code>.
			 * 
			 * Defines the icon of the {@link sap.ui.core.IconPool sap.ui.core.IconPool} or an image which should be displayed on the item.
			 * @return Value of property <code>icon</code>
			 */
			getIcon(): sap.ui.core.URI;
			/**
			 * Gets current value of property <code>label</code>.
			 * 
			 * Defines the label of the text field of the item.
			 * @return Value of property <code>label</code>
			 */
			getLabel(): string;
			/**
			 * The aggregation <code>submenu</code> (inherited from parent class) is not supported for this type of menu item.
			 * @deprecated The aggregation <code>submenu</code> (inherited from parent class) is not supported for this type of menu item.
			 * @return 
			 */
			getSubmenu(): Menu;
			/**
			 * Gets current value of property <code>value</code>.
			 * 
			 * Defines the value of the text field of the item.
			 * @return Value of property <code>value</code>
			 */
			getValue(): string;
			/**
			 * Gets current value of property <code>valueState</code>.
			 * 
			 * Defines the value state of the text field of the item. This allows you to visualize e.g. warnings or errors.
			 * 
			 * Default value is <code>None</code>.
			 * @return Value of property <code>valueState</code>
			 */
			getValueState(): sap.ui.core.ValueState;
			/**
			 * Sets a new value for property <code>icon</code>.
			 * 
			 * Defines the icon of the {@link sap.ui.core.IconPool sap.ui.core.IconPool} or an image which should be displayed on the item.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sIcon New value for property <code>icon</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setIcon(sIcon: sap.ui.core.URI): MenuTextFieldItem;
			/**
			 * Sets a new value for property <code>label</code>.
			 * 
			 * Defines the label of the text field of the item.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sLabel New value for property <code>label</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setLabel(sLabel: string): MenuTextFieldItem;
			/**
			 * The aggregation <code>submenu</code> (inherited from parent class) is not supported for this type of menu item.
			 * @param oSubmenu 
			 * @deprecated The aggregation <code>submenu</code> (inherited from parent class) is not supported for this type of menu item.
			 * @return <code>this</code> to allow method chaining
			 */
			setSubmenu(oSubmenu: Menu): MenuTextFieldItem;
			/**
			 * Sets the aggregated <code>submenu</code>.
			 * @note Overload from base type sap.ui.unified.MenuItemBase
			 * @param oSubmenu The submenu to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSubmenu(oSubmenu: Menu): MenuItemBase;
			/**
			 * Sets a new value for property <code>value</code>.
			 * 
			 * Defines the value of the text field of the item.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sValue New value for property <code>value</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setValue(sValue: string): MenuTextFieldItem;
			/**
			 * Sets a new value for property <code>valueState</code>.
			 * 
			 * Defines the value state of the text field of the item. This allows you to visualize e.g. warnings or errors.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>None</code>.
			 * @param sValueState New value for property <code>valueState</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setValueState(sValueState: sap.ui.core.ValueState): MenuTextFieldItem;
		}
	
		class Shell extends ShellLayout {
			/**
			 * Constructor for a new Shell.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.unified.ShellMetadata);
			/**
			 * Constructor for a new Shell.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some curtainContent to the aggregation <code>curtainContent</code>.
			 * @param oCurtainContent the curtainContent to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addCurtainContent(oCurtainContent: sap.ui.core.Control): Shell;
			/**
			 * Adds some curtainPaneContent to the aggregation <code>curtainPaneContent</code>.
			 * @param oCurtainPaneContent the curtainPaneContent to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addCurtainPaneContent(oCurtainPaneContent: sap.ui.core.Control): Shell;
			/**
			 * Adds some headEndItem to the aggregation <code>headEndItems</code>.
			 * @param oHeadEndItem the headEndItem to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addHeadEndItem(oHeadEndItem: ShellHeadItem): Shell;
			/**
			 * Adds some headItem to the aggregation <code>headItems</code>.
			 * @param oHeadItem the headItem to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addHeadItem(oHeadItem: ShellHeadItem): Shell;
			/**
			 * Destroys all the curtainContent in the aggregation <code>curtainContent</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyCurtainContent(): Shell;
			/**
			 * Destroys all the curtainPaneContent in the aggregation <code>curtainPaneContent</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyCurtainPaneContent(): Shell;
			/**
			 * Destroys all the headEndItems in the aggregation <code>headEndItems</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyHeadEndItems(): Shell;
			/**
			 * Destroys the header in the aggregation named <code>header</code>, but only if a custom header is set.
			 * The default header can not be destroyed.
			 * @return <code>this</code> to allow method chaining
			 */
			destroyHeader(): Shell;
			/**
			 * Destroys the header in the aggregation <code>header</code>.
			 * @note Overload from base type sap.ui.unified.ShellLayout
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyHeader(): ShellLayout;
			/**
			 * Destroys all the headItems in the aggregation <code>headItems</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyHeadItems(): Shell;
			/**
			 * Destroys the search in the aggregation <code>search</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroySearch(): Shell;
			/**
			 * Destroys the user in the aggregation <code>user</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyUser(): Shell;
			/**
			 * Creates a new subclass of class sap.ui.unified.Shell with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.unified.ShellLayout.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets content of aggregation <code>curtainContent</code>.
			 * 
			 * The content to appear in the curtain area.
			 * @return 
			 */
			getCurtainContent(): sap.ui.core.Control[];
			/**
			 * Gets content of aggregation <code>curtainPaneContent</code>.
			 * 
			 * The content to appear in the pane area of the curtain.
			 * @return 
			 */
			getCurtainPaneContent(): sap.ui.core.Control[];
			/**
			 * Gets content of aggregation <code>headEndItems</code>.
			 * 
			 * The buttons shown in the end (right in left-to-right case) of the Shell header. Currently max. 3 visible buttons are supported (when user is set only 1). If a custom header is set this aggregation has no effect.
			 * @return 
			 */
			getHeadEndItems(): ShellHeadItem[];
			/**
			 * Gets content of aggregation <code>headItems</code>.
			 * 
			 * The buttons shown in the begin (left in left-to-right case) of the Shell header. Currently max. 3 visible buttons are supported. If a custom header is set this aggregation has no effect.
			 * @return 
			 */
			getHeadItems(): ShellHeadItem[];
			/**
			 * Gets current value of property <code>icon</code>.
			 * 
			 * The application icon. If a custom header is set this property has no effect.
			 * @return Value of property <code>icon</code>
			 */
			getIcon(): sap.ui.core.URI;
			/**
			 * Gets content of aggregation <code>search</code>.
			 * 
			 * Experimental (This aggregation might change in future!): The search control which should be displayed in the shell header. If a custom header is set this aggregation has no effect.
			 * @return 
			 */
			getSearch(): sap.ui.core.Control;
			/**
			 * Gets current value of property <code>searchVisible</code>.
			 * 
			 * If set to false, the search area (aggregation 'search') is hidden. If a custom header is set this property has no effect.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>searchVisible</code>
			 */
			getSearchVisible(): boolean;
			/**
			 * Gets content of aggregation <code>user</code>.
			 * 
			 * The user item which is rendered in the shell header beside the items. If a custom header is set this aggregation has no effect.
			 * @return 
			 */
			getUser(): ShellHeadUserItem;
			/**
			 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>curtainContent</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oCurtainContent The curtainContent whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfCurtainContent(oCurtainContent: sap.ui.core.Control): number;
			/**
			 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>curtainPaneContent</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oCurtainPaneContent The curtainPaneContent whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfCurtainPaneContent(oCurtainPaneContent: sap.ui.core.Control): number;
			/**
			 * Checks for the provided <code>sap.ui.unified.ShellHeadItem</code> in the aggregation <code>headEndItems</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oHeadEndItem The headEndItem whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfHeadEndItem(oHeadEndItem: ShellHeadItem): number;
			/**
			 * Checks for the provided <code>sap.ui.unified.ShellHeadItem</code> in the aggregation <code>headItems</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oHeadItem The headItem whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfHeadItem(oHeadItem: ShellHeadItem): number;
			/**
			 * Inserts a curtainContent into the aggregation <code>curtainContent</code>.
			 * @param oCurtainContent the curtainContent to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the curtainContent should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the curtainContent is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the curtainContent is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertCurtainContent(oCurtainContent: sap.ui.core.Control, iIndex: number): Shell;
			/**
			 * Inserts a curtainPaneContent into the aggregation <code>curtainPaneContent</code>.
			 * @param oCurtainPaneContent the curtainPaneContent to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the curtainPaneContent should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the curtainPaneContent is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the curtainPaneContent is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertCurtainPaneContent(oCurtainPaneContent: sap.ui.core.Control, iIndex: number): Shell;
			/**
			 * Inserts a headEndItem into the aggregation <code>headEndItems</code>.
			 * @param oHeadEndItem the headEndItem to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the headEndItem should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the headEndItem is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the headEndItem is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertHeadEndItem(oHeadEndItem: ShellHeadItem, iIndex: number): Shell;
			/**
			 * Inserts a headItem into the aggregation <code>headItems</code>.
			 * @param oHeadItem the headItem to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the headItem should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the headItem is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the headItem is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertHeadItem(oHeadItem: ShellHeadItem, iIndex: number): Shell;
			/**
			 * Removes all the controls from the aggregation <code>curtainContent</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllCurtainContent(): sap.ui.core.Control[];
			/**
			 * Removes all the controls from the aggregation <code>curtainPaneContent</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllCurtainPaneContent(): sap.ui.core.Control[];
			/**
			 * Removes all the controls from the aggregation <code>headEndItems</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllHeadEndItems(): ShellHeadItem[];
			/**
			 * Removes all the controls from the aggregation <code>headItems</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllHeadItems(): ShellHeadItem[];
			/**
			 * Removes a curtainContent from the aggregation <code>curtainContent</code>.
			 * @param vCurtainContent The curtainContent to remove or its index or id
			 * @return The removed curtainContent or <code>null</code>
			 */
			removeCurtainContent(vCurtainContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
			/**
			 * Removes a curtainPaneContent from the aggregation <code>curtainPaneContent</code>.
			 * @param vCurtainPaneContent The curtainPaneContent to remove or its index or id
			 * @return The removed curtainPaneContent or <code>null</code>
			 */
			removeCurtainPaneContent(vCurtainPaneContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
			/**
			 * Removes a headEndItem from the aggregation <code>headEndItems</code>.
			 * @param vHeadEndItem The headEndItem to remove or its index or id
			 * @return The removed headEndItem or <code>null</code>
			 */
			removeHeadEndItem(vHeadEndItem: number|string|ShellHeadItem): ShellHeadItem;
			/**
			 * Removes a headItem from the aggregation <code>headItems</code>.
			 * @param vHeadItem The headItem to remove or its index or id
			 * @return The removed headItem or <code>null</code>
			 */
			removeHeadItem(vHeadItem: number|string|ShellHeadItem): ShellHeadItem;
			/**
			 * Setter for the aggregated <code>header</code>.
			 * @param oHeader The Control which should be rendered within the Shell header or <code>null</code> to render the default Shell header.
			 * @return <code>this</code> to allow method chaining
			 */
			setHeader(oHeader: sap.ui.core.Control): Shell;
			/**
			 * Sets the aggregated <code>header</code>.
			 * @note Overload from base type sap.ui.unified.ShellLayout
			 * @param oHeader The header to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setHeader(oHeader: sap.ui.core.Control): ShellLayout;
			/**
			 * Sets a new value for property <code>icon</code>.
			 * 
			 * The application icon. If a custom header is set this property has no effect.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sIcon New value for property <code>icon</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setIcon(sIcon: sap.ui.core.URI): Shell;
			/**
			 * Sets the aggregated <code>search</code>.
			 * @param oSearch The search to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSearch(oSearch: sap.ui.core.Control): Shell;
			/**
			 * Sets a new value for property <code>searchVisible</code>.
			 * 
			 * If set to false, the search area (aggregation 'search') is hidden. If a custom header is set this property has no effect.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bSearchVisible New value for property <code>searchVisible</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSearchVisible(bSearchVisible: boolean): Shell;
			/**
			 * Sets the aggregated <code>user</code>.
			 * @param oUser The user to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setUser(oUser: ShellHeadUserItem): Shell;
		}
	
		class ShellHeadItem extends sap.ui.core.Element {
			/**
			 * Constructor for a new ShellHeadItem.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.unified.ShellHeadItemMetadata);
			/**
			 * Constructor for a new ShellHeadItem.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
			 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): ShellHeadItem;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this <code>sap.ui.unified.ShellHeadItem</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.unified.ShellHeadItem</code> itself.
			 * 
			 * Event is fired when the user presses the item.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.ShellHeadItem</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachPress(oData: any, fnFunction: any, oListener?: any): ShellHeadItem;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this <code>sap.ui.unified.ShellHeadItem</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachPress(fnFunction: any, oListener: any): ShellHeadItem;
			/**
			 * Creates a new subclass of class sap.ui.unified.ShellHeadItem with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Fires event <code>press</code> to attached listeners.
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			firePress(mArguments?: any): ShellHeadItem;
			/**
			 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
			 * @return 
			 */
			getAriaLabelledBy(): sap.ui.core.ID[];
			/**
			 * Gets current value of property <code>icon</code>.
			 * 
			 * The icon of the item, either defined in the sap.ui.core.IconPool or an URI to a custom image. An icon must be set.
			 * @return Value of property <code>icon</code>
			 */
			getIcon(): sap.ui.core.URI;
			/**
			 * Gets current value of property <code>selected</code>.
			 * 
			 * Defines the toggle state in case the item represents a toggle button (see also property <code>toggleEnabled</code>).
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>selected</code>
			 */
			getSelected(): boolean;
			/**
			 * Gets current value of property <code>showSeparator</code>.
			 * 
			 * If set to true, a separator is displayed after the item.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>showSeparator</code>
			 */
			getShowSeparator(): boolean;
			/**
			 * Gets current value of property <code>toggleEnabled</code>.
			 * 
			 * If set to true, the item represents a toggle button. The <code>selected</code> property can the be used to
			 * define the toggle state. Otherwise the item is displayed as action button. In this case the <code>selected</code> property
			 * is ignored.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>toggleEnabled</code>
			 */
			getToggleEnabled(): boolean;
			/**
			 * Gets current value of property <code>visible</code>.
			 * 
			 * Invisible items are not shown on the UI.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>visible</code>
			 */
			getVisible(): boolean;
			/**
			 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllAriaLabelledBy(): sap.ui.core.ID[];
			/**
			 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
			 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
			 * @return The removed ariaLabelledBy or <code>null</code>
			 */
			removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
			/**
			 * Sets a new value for property <code>icon</code>.
			 * 
			 * The icon of the item, either defined in the sap.ui.core.IconPool or an URI to a custom image. An icon must be set.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sIcon New value for property <code>icon</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setIcon(sIcon: sap.ui.core.URI): ShellHeadItem;
			/**
			 * Sets a new value for property <code>selected</code>.
			 * 
			 * Defines the toggle state in case the item represents a toggle button (see also property <code>toggleEnabled</code>).
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bSelected New value for property <code>selected</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSelected(bSelected: boolean): ShellHeadItem;
			/**
			 * Sets a new value for property <code>showSeparator</code>.
			 * 
			 * If set to true, a separator is displayed after the item.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bShowSeparator New value for property <code>showSeparator</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setShowSeparator(bShowSeparator: boolean): ShellHeadItem;
			/**
			 * Sets a new value for property <code>toggleEnabled</code>.
			 * 
			 * If set to true, the item represents a toggle button. The <code>selected</code> property can the be used to
			 * define the toggle state. Otherwise the item is displayed as action button. In this case the <code>selected</code> property
			 * is ignored.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bToggleEnabled New value for property <code>toggleEnabled</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setToggleEnabled(bToggleEnabled: boolean): ShellHeadItem;
			/**
			 * Sets a new value for property <code>visible</code>.
			 * 
			 * Invisible items are not shown on the UI.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bVisible New value for property <code>visible</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setVisible(bVisible: boolean): ShellHeadItem;
		}
	
		class ShellHeadUserItem extends sap.ui.core.Element {
			/**
			 * Constructor for a new ShellHeadUserItem.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.unified.ShellHeadUserItemMetadata);
			/**
			 * Constructor for a new ShellHeadUserItem.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
			 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): ShellHeadUserItem;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>press</code> event of this <code>sap.ui.unified.ShellHeadUserItem</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.unified.ShellHeadUserItem</code> itself.
			 * 
			 * Event is fired when the user presses the button.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.ShellHeadUserItem</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachPress(oData: any, fnFunction: any, oListener?: any): ShellHeadUserItem;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>press</code> event of this <code>sap.ui.unified.ShellHeadUserItem</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachPress(fnFunction: any, oListener: any): ShellHeadUserItem;
			/**
			 * Creates a new subclass of class sap.ui.unified.ShellHeadUserItem with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Element.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Fires event <code>press</code> to attached listeners.
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			firePress(mArguments?: any): ShellHeadUserItem;
			/**
			 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
			 * @return 
			 */
			getAriaLabelledBy(): sap.ui.core.ID[];
			/**
			 * Gets current value of property <code>image</code>.
			 * 
			 * An image of the user, normally an URI to a image but also an icon from the sap.ui.core.IconPool is possible.
			 * @return Value of property <code>image</code>
			 */
			getImage(): sap.ui.core.URI;
			/**
			 * Gets current value of property <code>showPopupIndicator</code>.
			 * 
			 * The user item is intended to be used for user settings. Normally these settings are done via a Menu or Dialog.
			 * If this property is set to true an indicator for such a popup mechanismn is shown in the item.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>showPopupIndicator</code>
			 */
			getShowPopupIndicator(): boolean;
			/**
			 * Gets current value of property <code>username</code>.
			 * 
			 * The name of the user.
			 * 
			 * Default value is <code></code>.
			 * @return Value of property <code>username</code>
			 */
			getUsername(): string;
			/**
			 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllAriaLabelledBy(): sap.ui.core.ID[];
			/**
			 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
			 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
			 * @return The removed ariaLabelledBy or <code>null</code>
			 */
			removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
			/**
			 * Sets a new value for property <code>image</code>.
			 * 
			 * An image of the user, normally an URI to a image but also an icon from the sap.ui.core.IconPool is possible.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param sImage New value for property <code>image</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setImage(sImage: sap.ui.core.URI): ShellHeadUserItem;
			/**
			 * Sets a new value for property <code>showPopupIndicator</code>.
			 * 
			 * The user item is intended to be used for user settings. Normally these settings are done via a Menu or Dialog.
			 * If this property is set to true an indicator for such a popup mechanismn is shown in the item.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bShowPopupIndicator New value for property <code>showPopupIndicator</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setShowPopupIndicator(bShowPopupIndicator: boolean): ShellHeadUserItem;
			/**
			 * Sets a new value for property <code>username</code>.
			 * 
			 * The name of the user.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code></code>.
			 * @param sUsername New value for property <code>username</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setUsername(sUsername: string): ShellHeadUserItem;
		}
	
		class ShellLayout extends sap.ui.core.Control {
			/**
			 * Constructor for a new ShellLayout.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.unified.ShellLayoutMetadata);
			/**
			 * Constructor for a new ShellLayout.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some content to the aggregation <code>content</code>.
			 * @param oContent the content to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addContent(oContent: sap.ui.core.Control): ShellLayout;
			/**
			 * Adds some paneContent to the aggregation <code>paneContent</code>.
			 * @param oPaneContent the paneContent to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addPaneContent(oPaneContent: sap.ui.core.Control): ShellLayout;
			/**
			 * Destroys all the content in the aggregation <code>content</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyContent(): ShellLayout;
			/**
			 * Destroys the header in the aggregation <code>header</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyHeader(): ShellLayout;
			/**
			 * Destroys all the paneContent in the aggregation <code>paneContent</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyPaneContent(): ShellLayout;
			/**
			 * Creates a new subclass of class sap.ui.unified.ShellLayout with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets content of aggregation <code>content</code>.
			 * 
			 * The content to appear in the main canvas.
			 * @return 
			 */
			getContent(): sap.ui.core.Control[];
			/**
			 * Gets content of aggregation <code>header</code>.
			 * 
			 * The control to appear in the header area.
			 * @return 
			 */
			getHeader(): sap.ui.core.Control;
			/**
			 * Gets current value of property <code>headerHiding</code>.
			 * 
			 * Whether the header can be hidden (manually or automatically). This feature is only available when touch events are supported.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>headerHiding</code>
			 */
			getHeaderHiding(): boolean;
			/**
			 * Gets current value of property <code>headerVisible</code>.
			 * 
			 * If set to false, no header (and no items, search, ...) is shown.
			 * 
			 * Default value is <code>true</code>.
			 * @return Value of property <code>headerVisible</code>
			 */
			getHeaderVisible(): boolean;
			/**
			 * Gets content of aggregation <code>paneContent</code>.
			 * 
			 * The content to appear in the pane area.
			 * @return 
			 */
			getPaneContent(): sap.ui.core.Control[];
			/**
			 * Gets current value of property <code>showPane</code>.
			 * 
			 * Shows / Hides the side pane.
			 * 
			 * Default value is <code>false</code>.
			 * @return Value of property <code>showPane</code>
			 */
			getShowPane(): boolean;
			/**
			 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oContent The content whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfContent(oContent: sap.ui.core.Control): number;
			/**
			 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>paneContent</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oPaneContent The paneContent whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfPaneContent(oPaneContent: sap.ui.core.Control): number;
			/**
			 * Inserts a content into the aggregation <code>content</code>.
			 * @param oContent the content to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the content should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the content is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertContent(oContent: sap.ui.core.Control, iIndex: number): ShellLayout;
			/**
			 * Inserts a paneContent into the aggregation <code>paneContent</code>.
			 * @param oPaneContent the paneContent to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the paneContent should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the paneContent is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the paneContent is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertPaneContent(oPaneContent: sap.ui.core.Control, iIndex: number): ShellLayout;
			/**
			 * Removes all the controls from the aggregation <code>content</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllContent(): sap.ui.core.Control[];
			/**
			 * Removes all the controls from the aggregation <code>paneContent</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllPaneContent(): sap.ui.core.Control[];
			/**
			 * Removes a content from the aggregation <code>content</code>.
			 * @param vContent The content to remove or its index or id
			 * @return The removed content or <code>null</code>
			 */
			removeContent(vContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
			/**
			 * Removes a paneContent from the aggregation <code>paneContent</code>.
			 * @param vPaneContent The paneContent to remove or its index or id
			 * @return The removed paneContent or <code>null</code>
			 */
			removePaneContent(vPaneContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
			/**
			 * Sets the aggregated <code>header</code>.
			 * @param oHeader The header to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setHeader(oHeader: sap.ui.core.Control): ShellLayout;
			/**
			 * Sets a new value for property <code>headerHiding</code>.
			 * 
			 * Whether the header can be hidden (manually or automatically). This feature is only available when touch events are supported.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bHeaderHiding New value for property <code>headerHiding</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setHeaderHiding(bHeaderHiding: boolean): ShellLayout;
			/**
			 * Sets a new value for property <code>headerVisible</code>.
			 * 
			 * If set to false, no header (and no items, search, ...) is shown.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>true</code>.
			 * @param bHeaderVisible New value for property <code>headerVisible</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setHeaderVisible(bHeaderVisible: boolean): ShellLayout;
			/**
			 * Sets a new value for property <code>showPane</code>.
			 * 
			 * Shows / Hides the side pane.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>false</code>.
			 * @param bShowPane New value for property <code>showPane</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setShowPane(bShowPane: boolean): ShellLayout;
		}
	
		class ShellOverlay extends sap.ui.core.Control {
			/**
			 * Constructor for a new ShellOverlay.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some ariaLabelledBy into the association <code>ariaLabelledBy</code>.
			 * @param vAriaLabelledBy the ariaLabelledBy to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addAriaLabelledBy(vAriaLabelledBy: sap.ui.core.ID|sap.ui.core.Control): ShellOverlay;
			/**
			 * Adds some content to the aggregation <code>content</code>.
			 * @param oContent the content to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addContent(oContent: sap.ui.core.Control): ShellOverlay;
			/**
			 * Attaches event handler <code>fnFunction</code> to the <code>closed</code> event of this <code>sap.ui.unified.ShellOverlay</code>.
			 * 
			 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener</code> if specified, 
			 * otherwise it will be bound to this <code>sap.ui.unified.ShellOverlay</code> itself.
			 * 
			 * Fired when the overlay was closed.
			 * @param oData An application-specific payload object that will be passed to the event handler along with the event object when firing the event
			 * @param fnFunction The function to be called when the event occurs
			 * @param oListener Context object to call the event handler with. Defaults to this <code>sap.ui.unified.ShellOverlay</code> itself(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			attachClosed(oData: any, fnFunction: any, oListener?: any): ShellOverlay;
			/**
			 * Closes the ShellOverlay.
			 */
			close();
			/**
			 * Destroys all the content in the aggregation <code>content</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyContent(): ShellOverlay;
			/**
			 * Destroys the search in the aggregation <code>search</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroySearch(): ShellOverlay;
			/**
			 * Detaches event handler <code>fnFunction</code> from the <code>closed</code> event of this <code>sap.ui.unified.ShellOverlay</code>.
			 * 
			 * The passed function and listener object must match the ones used for event registration.
			 * @param fnFunction The function to be called, when the event occurs
			 * @param oListener Context object on which the given function had to be called
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			detachClosed(fnFunction: any, oListener: any): ShellOverlay;
			/**
			 * Creates a new subclass of class sap.ui.unified.ShellOverlay with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Fires event <code>closed</code> to attached listeners.
			 * @param mArguments The arguments to pass along with the event(optional)
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			fireClosed(mArguments?: any): ShellOverlay;
			/**
			 * Returns array of IDs of the elements which are the current targets of the association <code>ariaLabelledBy</code>.
			 * @return 
			 */
			getAriaLabelledBy(): sap.ui.core.ID[];
			/**
			 * Gets content of aggregation <code>content</code>.
			 * 
			 * The content to appear in the overlay.
			 * @return 
			 */
			getContent(): sap.ui.core.Control[];
			/**
			 * Gets content of aggregation <code>search</code>.
			 * 
			 * Experimental (This aggregation might change in future!): The search control which should be displayed in the overlay header.
			 * @return 
			 */
			getSearch(): sap.ui.core.Control;
			/**
			 * ID of the element which is the current target of the association <code>shell</code>, or <code>null</code>.
			 * @return 
			 */
			getShell(): sap.ui.core.ID;
			/**
			 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oContent The content whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfContent(oContent: sap.ui.core.Control): number;
			/**
			 * Inserts a content into the aggregation <code>content</code>.
			 * @param oContent the content to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the content should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the content is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertContent(oContent: sap.ui.core.Control, iIndex: number): ShellOverlay;
			/**
			 * Opens the ShellOverlay.
			 */
			open();
			/**
			 * Removes all the controls in the association named <code>ariaLabelledBy</code>.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllAriaLabelledBy(): sap.ui.core.ID[];
			/**
			 * Removes all the controls from the aggregation <code>content</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllContent(): sap.ui.core.Control[];
			/**
			 * Removes an ariaLabelledBy from the association named <code>ariaLabelledBy</code>.
			 * @param vAriaLabelledBy The ariaLabelledBy to be removed or its index or ID
			 * @return The removed ariaLabelledBy or <code>null</code>
			 */
			removeAriaLabelledBy(vAriaLabelledBy: number|sap.ui.core.ID|sap.ui.core.Control): sap.ui.core.ID;
			/**
			 * Removes a content from the aggregation <code>content</code>.
			 * @param vContent The content to remove or its index or id
			 * @return The removed content or <code>null</code>
			 */
			removeContent(vContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
			/**
			 * Sets the aggregated <code>search</code>.
			 * @param oSearch The search to set
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSearch(oSearch: sap.ui.core.Control): ShellOverlay;
			/**
			 * Sets the associated <code>shell</code>.
			 * @param oShell ID of an element which becomes the new target of this shell association; alternatively, an element instance may be given
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setShell(oShell: sap.ui.core.ID|ShellLayout): ShellOverlay;
		}
	
		class SplitContainer extends sap.ui.core.Control {
			/**
			 * Constructor for a new SplitContainer.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: sap.ui.unified.SplitContainerMetadata);
			/**
			 * Constructor for a new SplitContainer.
			 * 
			 * 
			 * Accepts an object literal <code>mSettings</code> that defines initial
			 * property values, aggregated and associated objects as well as event handlers.
			 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
			 * @note Any overloads to support not documented metadata
			 * @param sId id for the new control, generated automatically if no id is given(optional)
			 * @param mSettings initial settings for the new control(optional)
			 */
			constructor(sId?: string, mSettings?: any);
			/**
			 * Adds some content to the aggregation <code>content</code>.
			 * @param oContent the content to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addContent(oContent: sap.ui.core.Control): SplitContainer;
			/**
			 * Adds some secondaryContent to the aggregation <code>secondaryContent</code>.
			 * @param oSecondaryContent the secondaryContent to add; if empty, nothing is inserted
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			addSecondaryContent(oSecondaryContent: sap.ui.core.Control): SplitContainer;
			/**
			 * Destroys all the content in the aggregation <code>content</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroyContent(): SplitContainer;
			/**
			 * Destroys all the secondaryContent in the aggregation <code>secondaryContent</code>.
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			destroySecondaryContent(): SplitContainer;
			/**
			 * Creates a new subclass of class sap.ui.unified.SplitContainer with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.core.Control.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets content of aggregation <code>content</code>.
			 * 
			 * The content to appear in the main area.
			 * @return 
			 */
			getContent(): sap.ui.core.Control[];
			/**
			 * Gets current value of property <code>orientation</code>.
			 * 
			 * Whether to show the secondary content on the left ("Horizontal", default) or on the top ("Vertical").
			 * 
			 * Default value is <code>Horizontal</code>.
			 * @return Value of property <code>orientation</code>
			 */
			getOrientation(): sap.ui.core.Orientation;
			/**
			 * Gets content of aggregation <code>secondaryContent</code>.
			 * 
			 * The content to appear in the secondary area.
			 * @return 
			 */
			getSecondaryContent(): sap.ui.core.Control[];
			/**
			 * Gets current value of property <code>secondaryContentSize</code>.
			 * 
			 * The width if the secondary content. The height is always 100%.
			 * 
			 * Default value is <code>250px</code>.
			 * @return Value of property <code>secondaryContentSize</code>
			 */
			getSecondaryContentSize(): sap.ui.core.CSSSize;
			/**
			 * Gets current value of property <code>showSecondaryContent</code>.
			 * 
			 * Shows / Hides the secondary area.
			 * @return Value of property <code>showSecondaryContent</code>
			 */
			getShowSecondaryContent(): boolean;
			/**
			 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>content</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oContent The content whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfContent(oContent: sap.ui.core.Control): number;
			/**
			 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation <code>secondaryContent</code>.
			 * and returns its index if found or -1 otherwise.
			 * @param oSecondaryContent The secondaryContent whose index is looked for
			 * @return The index of the provided control in the aggregation if found, or -1 otherwise
			 */
			indexOfSecondaryContent(oSecondaryContent: sap.ui.core.Control): number;
			/**
			 * Inserts a content into the aggregation <code>content</code>.
			 * @param oContent the content to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the content should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the content is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertContent(oContent: sap.ui.core.Control, iIndex: number): SplitContainer;
			/**
			 * Inserts a secondaryContent into the aggregation <code>secondaryContent</code>.
			 * @param oSecondaryContent the secondaryContent to insert; if empty, nothing is inserted
			 * @param iIndex the <code>0</code>-based index the secondaryContent should be inserted at; for
			 *              a negative value of <code>iIndex</code>, the secondaryContent is inserted at position 0; for a value
			 *              greater than the current size of the aggregation, the secondaryContent is inserted at
			 *              the last position
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			insertSecondaryContent(oSecondaryContent: sap.ui.core.Control, iIndex: number): SplitContainer;
			/**
			 * Removes all the controls from the aggregation <code>content</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllContent(): sap.ui.core.Control[];
			/**
			 * Removes all the controls from the aggregation <code>secondaryContent</code>.
			 * 
			 * Additionally, it unregisters them from the hosting UIArea.
			 * @return An array of the removed elements (might be empty)
			 */
			removeAllSecondaryContent(): sap.ui.core.Control[];
			/**
			 * Removes a content from the aggregation <code>content</code>.
			 * @param vContent The content to remove or its index or id
			 * @return The removed content or <code>null</code>
			 */
			removeContent(vContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
			/**
			 * Removes a secondaryContent from the aggregation <code>secondaryContent</code>.
			 * @param vSecondaryContent The secondaryContent to remove or its index or id
			 * @return The removed secondaryContent or <code>null</code>
			 */
			removeSecondaryContent(vSecondaryContent: number|string|sap.ui.core.Control): sap.ui.core.Control;
			/**
			 * Sets a new value for property <code>orientation</code>.
			 * 
			 * Whether to show the secondary content on the left ("Horizontal", default) or on the top ("Vertical").
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>Horizontal</code>.
			 * @param sOrientation New value for property <code>orientation</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setOrientation(sOrientation: sap.ui.core.Orientation): SplitContainer;
			/**
			 * Sets a new value for property <code>secondaryContentSize</code>.
			 * 
			 * The width if the secondary content. The height is always 100%.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * 
			 * Default value is <code>250px</code>.
			 * @param sSecondaryContentSize New value for property <code>secondaryContentSize</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setSecondaryContentSize(sSecondaryContentSize: sap.ui.core.CSSSize): SplitContainer;
			/**
			 * Sets a new value for property <code>showSecondaryContent</code>.
			 * 
			 * Shows / Hides the secondary area.
			 * 
			 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
			 * @param bShowSecondaryContent New value for property <code>showSecondaryContent</code>
			 * @return Reference to <code>this</code> in order to allow method chaining
			 */
			setShowSecondaryContent(bShowSecondaryContent: boolean): SplitContainer;
		}
	
		interface CalendarMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * If set, interval selection is allowed
			 * @default false
			 */
			intervalSelection?: boolean;
			/**
			 * If set, only a single date or interval, if intervalSelection is enabled, can be selected
			 * @default true
			 */
			singleSelection?: boolean;
			/**
			 * number of months displayed
			 * on phones always only one month is displayed
			 * @default 1
			 */
			months?: number;
			/**
			 * If set, the first day of the displayed week is this day. Valid values are 0 to 6.
			 * If not a valid value is set, the default of the used locale is used.
			 * @default -1
			 */
			firstDayOfWeek?: number;
			/**
			 * If set, the provided weekdays are displayed as non-working days.
			 * Valid values inside the array are 0 to 6.
			 * If not set, the weekend defined in the locale settings is displayed as non-working days.
			 */
			nonWorkingDays?: number[];
			/**
			 * If set, the calendar type is used for display.
			 * If not set, the calendar type of the global configuration is used.
			 */
			primaryCalendarType?: sap.ui.core.CalendarType;
			/**
			 * If set, the days are also displayed in this calendar type
			 * If not set, the dates are only displayed in the primary calendar type
			 */
			secondaryCalendarType?: sap.ui.core.CalendarType;
			/**
			 * Width of Calendar
			 * 
			 * <b>Note:</b> There is a theme depending minimum width, so the calendar can not be set smaller.
			 */
			width?: sap.ui.core.CSSSize;
			/**
			 * Minimum date that can be shown and selected in the Calendar. This must be a JavaScript date object.
			 * 
			 * <b>Note:</b> if the date is inside of a month the complete month is displayed,
			 * but dates outside the valid range can not be selected.
			 * 
			 * <b>Note:</b> If the <code>minDate</code> is set to be after the <code>maxDate</code>,
			 * the <code>maxDate</code> is set to the end of the month of the <code>minDate</code>.
			 */
			minDate?: any;
			/**
			 * Maximum date that can be shown and selected in the Calendar. This must be a JavaScript date object.
			 * 
			 * <b>Note:</b> if the date is inside of a month the complete month is displayed,
			 * but dates outside the valid range can not be selected.
			 * 
			 * <b>Note:</b> If the <code>maxDate</code> is set to be before the <code>minDate</code>,
			 * the <code>minDate</code> is set to the begin of the month of the <code>maxDate</code>.
			 */
			maxDate?: any;
		}
	
		interface CalendarAppointmentMetadata extends sap.ui.unified.DateTypeRangeMetadata {
			/**
			 * Title of the appointment.
			 */
			title?: string;
			/**
			 * Text of the appointment.
			 */
			text?: string;
			/**
			 * Icon of the Appointment. (e.g. picture of the person)
			 * 
			 * URI of an image or an icon registered in sap.ui.core.IconPool.
			 */
			icon?: sap.ui.core.URI;
			/**
			 * Indicates if the icon is tentative.
			 * @default false
			 */
			tentative?: boolean;
			/**
			 * Indicates if the icon is selected.
			 * @default false
			 */
			selected?: boolean;
			/**
			 * Can be used as identifier of the appointment
			 */
			key?: string;
		}
	
		interface CalendarDateIntervalMetadata extends sap.ui.unified.CalendarMetadata {
			/**
			 * Start date of the Interval
			 */
			startDate?: any;
			/**
			 * number of days displayed
			 * on phones the maximum rendered number of days is 8.
			 * @default 7
			 */
			days?: number;
			/**
			 * If set the day names are shown in a separate line.
			 * If not set the day names are shown inside the single days.
			 * @default true
			 */
			showDayNamesLine?: boolean;
			/**
			 * If set, the month- and yearPicker opens on a popup
			 * @default false
			 */
			pickerPopup?: boolean;
		}
	
		interface CalendarLegendMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * Width of the columns created in which the items are arranged.
			 * @default 120px
			 */
			columnWidth?: sap.ui.core.CSSSize;
		}
	
		interface CalendarLegendItemMetadata {
			/**
			 * Text to be displayed for the item.
			 */
			text?: string;
			/**
			 * Type of the item.
			 * If not set the type is automatically determined from the order of the items in the CalendarLegend.
			 * @default None
			 */
			type?: sap.ui.unified.CalendarDayType;
		}
	
		interface CalendarMonthIntervalMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * Width of the <code>CalendarMonthInterval</code>. The width of the single months depends on this width.
			 */
			width?: sap.ui.core.CSSSize;
			/**
			 * Start date of the Interval as JavaScript Date object.
			 * The month of this Date will be the first month in the displayed row.
			 */
			startDate?: any;
			/**
			 * If set, interval selection is allowed
			 * @default false
			 */
			intervalSelection?: boolean;
			/**
			 * If set, only a single date or interval, if <code>intervalSelection</code> is enabled, can be selected
			 * 
			 * <b>Note:</b> Selection of multiple intervals is not supported in the current version.
			 * @default true
			 */
			singleSelection?: boolean;
			/**
			 * Number of months displayed
			 * 
			 * <b>Note:</b> On phones, the maximum number of months displayed in the row is always 6.
			 * @default 12
			 */
			months?: number;
			/**
			 * If set, the yearPicker opens on a popup
			 * @default false
			 */
			pickerPopup?: boolean;
			/**
			 * Minimum date that can be shown and selected in the Calendar. This must be a JavaScript date object.
			 * 
			 * <b>Note:</b> If the <code>minDate</code> is set to be after the <code>maxDate</code>,
			 * the <code>maxDate</code> is set to the end of the month of the <code>minDate</code>.
			 */
			minDate?: any;
			/**
			 * Maximum date that can be shown and selected in the Calendar. This must be a JavaScript date object.
			 * 
			 * <b>Note:</b> If the <code>maxDate</code> is set to be before the <code>minDate</code>,
			 * the <code>minDate</code> is set to the begin of the month of the <code>maxDate</code>.
			 */
			maxDate?: any;
		}
	
		interface CalendarRowMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * Start date, as JavaScript Date object, of the row. As default, the current date is used.
			 */
			startDate?: any;
			/**
			 * Number of displayed intervals. The size of the intervals is defined with <code>intervalType</code>
			 * @default 12
			 */
			intervals?: number;
			/**
			 * Type of the intervals of the row. The default is one hour.
			 * @default Hour
			 */
			intervalType?: sap.ui.unified.CalendarIntervalType;
			/**
			 * If set, subintervals are shown.
			 * 
			 * If the interval type is <code>Hour</code>, quarter hours are shown.
			 * 
			 * If the interval type is <code>Day</code>, hours are shown.
			 * 
			 * If the interval type is <code>Month</code>, days are shown.
			 * @default false
			 */
			showSubIntervals?: boolean;
			/**
			 * If set, interval headers are shown like specified in <code>showEmptyIntervalHeaders</code>.
			 * 
			 * If not set, no interval headers are shown even if <code>intervalHeaders</code> are assigned.
			 * @default true
			 */
			showIntervalHeaders?: boolean;
			/**
			 * If set, interval headers are shown even if no <code>intervalHeaders</code> are assigned to the visible time frame.
			 * 
			 * If not set, no interval headers are shown if no <code>intervalHeaders</code> are assigned.
			 * 
			 * <b>Note:</b> This property is only used if <code>showIntervalHeaders</code> is set to true.
			 * @default true
			 */
			showEmptyIntervalHeaders?: boolean;
			/**
			 * If set, the provided weekdays are displayed as non-working days.
			 * Valid values inside the array are 0 to 6. (Other values will just be ignored.)
			 * 
			 * If not set, the weekend defined in the locale settings is displayed as non-working days.
			 * 
			 * <b>Note:</b> The non working days are only visualized if <code>intervalType</code> is set to day.
			 */
			nonWorkingDays?: number[];
			/**
			 * If set, the provided hours are displayed as non-working hours.
			 * Valid values inside the array are 0 to 23. (Other values will just be ignored.)
			 * 
			 * <b>Note:</b> The non working hours are only visualized if <code>intervalType</code> is set to hour.
			 */
			nonWorkingHours?: number[];
			/**
			 * Width of the row
			 */
			width?: sap.ui.core.CSSSize;
			/**
			 * Height of the row
			 */
			height?: sap.ui.core.CSSSize;
			/**
			 * If set, the <code>CalendarRow</code> checks for resize by itself.
			 * 
			 * If a lot of <code>CalendarRow</code> controls are used in one container control (like <code>PlanningCalendar</code>).
			 * the resize checks should be done only by this container control. Then the container control should
			 * call <code>handleResize</code> of the <code>CalendarRow</code> if a resize happens.
			 * @default true
			 */
			checkResize?: boolean;
			/**
			 * If set the <code>CalendarRow</code> triggers a periodic update to visualize the current time.
			 * 
			 * If a lot of <code>CalendarRow</code> controls are used in one container control (like <code>PlanningCalendar</code>)
			 * the periodic update should be triggered only by this container control. Then the container control should
			 * call <code>updateCurrentTimeVisualization</code> of the <code>CalendarRow</code> to update the visualization.
			 * @default true
			 */
			updateCurrentTime?: boolean;
			/**
			 * If set the appointments without text (only title) are rendered with a smaller height.
			 * 
			 * <b>Note:</b> On phone devices this property is ignored, appointments are always rendered in full height
			 * to allow touching.
			 * @default false
			 */
			appointmentsReducedHeight?: boolean;
			/**
			 * Defines the visualization of the <code>CalendarAppoinment</code>
			 * 
			 * <b>Note:</b> The real visualization depends on the used theme.
			 * @default Standard
			 */
			appointmentsVisualization?: sap.ui.unified.CalendarAppointmentVisualization;
		}
	
		interface CalendarTimeIntervalMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * Width of the <code>CalendarTimeInterval</code>. The width of the single months depends on this width.
			 */
			width?: sap.ui.core.CSSSize;
			/**
			 * Start date of the Interval as JavaScript Date object.
			 * The time interval corresponding to this Date and <code>items</code> and <code>intervalMinutes</code>
			 * will be the first time in the displayed row.
			 */
			startDate?: any;
			/**
			 * If set, interval selection is allowed
			 * @default false
			 */
			intervalSelection?: boolean;
			/**
			 * If set, only a single date or interval, if <code>intervalSelection</code> is enabled, can be selected
			 * 
			 * <b>Note:</b> Selection of multiple intervals is not supported in the current version.
			 * @default true
			 */
			singleSelection?: boolean;
			/**
			 * Number of time items displayed. Default is 12.
			 * 
			 * <b>Note:</b> On phones, the maximum number of items displayed in the row is always 6.
			 * @default 12
			 */
			items?: number;
			/**
			 * Size of on time interval in minutes, default is 60 minutes.
			 * 
			 * <b>Note:</b> the start of the interval calculation is always on the corresponding date at 00:00.
			 * 
			 * A interval longer then 720 minutes is not allowed. Please use the <code>CalendarDateInterval</code> instead.
			 * 
			 * A day must be divisible by this interval size. One interval must not include more than one day.
			 * @default 60
			 */
			intervalMinutes?: number;
			/**
			 * If set, the day-, month- and yearPicker opens on a popup
			 * @default false
			 */
			pickerPopup?: boolean;
			/**
			 * Minimum date that can be shown and selected in the Calendar. This must be a JavaScript date object.
			 * 
			 * <b>Note:</b> If the <code>minDate</code> is set to be after the <code>maxDate</code>,
			 * the <code>maxDate</code> is set to the end of the month of the <code>minDate</code>.
			 */
			minDate?: any;
			/**
			 * Maximum date that can be shown and selected in the Calendar. This must be a JavaScript date object.
			 * 
			 * <b>Note:</b> If the <code>maxDate</code> is set to be before the <code>minDate</code>,
			 * the <code>minDate</code> is set to the begin of the month of the <code>maxDate</code>.
			 */
			maxDate?: any;
		}
	
		interface ContentSwitcherMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * Set the used animation when changing content. This just sets a CSS-class named "sapUiUnifiedACSwitcherAnimation" + this value on the root element of the control. The animation has to be implemented in CSS. This also enables applications to implement their own animations via CSS by reacting to the parent class.
			 * See the types sap.ui.unified.ContentSwitcherAnimation for default implementations.
			 * @default None
			 */
			animation?: string;
			/**
			 * The number of the currently active content (1 or 2).
			 * @default 1
			 */
			activeContent?: number;
		}
	
		interface CurrencyMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * The currency value
			 * @default 0
			 */
			value?: number;
			/**
			 * Determines the displayed currency code (ISO 4217).
			 * <b>Note: </b>If a * character is set instead of currency code,
			 * only the character itself will be rendered, ignoring the <code>value</code> property.
			 */
			currency?: string;
			/**
			 * Defines the space that is available for the precision of the various currencies.
			 * @default 3
			 */
			maxPrecision?: number;
			/**
			 * Show the currency symbol instead of the ISO currency code
			 * @default true
			 */
			useSymbol?: boolean;
		}
	
		interface DateRangeMetadata {
			/**
			 * Start date for a date range. This must be a JavaScript date object.
			 */
			startDate?: any;
			/**
			 * Start date for a date range. If empty only a single date is presented by this DateRange element. This must be a JavaScript date object.
			 */
			endDate?: any;
		}
	
		interface DateTypeRangeMetadata extends sap.ui.unified.DateRangeMetadata {
			/**
			 * Type of the date range.
			 * @default Type01
			 */
			type?: sap.ui.unified.CalendarDayType;
		}
	
		interface FileUploaderMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * Value of the path for file upload.
			 * @default 
			 */
			value?: string;
			/**
			 * Disabled controls have different colors, depending on customer settings.
			 * @default true
			 */
			enabled?: boolean;
			/**
			 * Used when URL address is on a remote server.
			 * @default 
			 */
			uploadUrl?: sap.ui.core.URI;
			/**
			 * Unique control name for identification on the server side after sending data to the server.
			 */
			name?: string;
			/**
			 * Specifies the displayed control width.
			 * @default 
			 */
			width?: sap.ui.core.CSSSize;
			/**
			 * If set to "true", the upload immediately starts after file selection. With the default setting, the upload needs to be explicitly triggered.
			 * @default false
			 */
			uploadOnChange?: boolean;
			/**
			 * Additional data that is sent to the back end service. Data will be transmitted as value of a hidden input where the name is derived from the name property with suffix -data.
			 */
			additionalData?: string;
			/**
			 * If the FileUploader is configured to upload the file directly after the file is selected it is not allowed to upload a file with the same name again. If a user should be allowed to upload a file with the same name again this parameter has to be "true". A typical use case would be if the files have different paths.
			 * @default false
			 */
			sameFilenameAllowed?: boolean;
			/**
			 * The Button text can be overwritten using this property.
			 */
			buttonText?: string;
			/**
			 * The chosen files will be checked against an array of file types. If at least one file does not fit the file type restriction the upload is prevented.
			 * Example: ["jpg", "png", "bmp"].
			 */
			fileType?: string[];
			/**
			 * Allows multiple files to be chosen and uploaded from the same folder. This property is not supported by Internet Explorer 9.
			 * @default false
			 */
			multiple?: boolean;
			/**
			 * A file size limit in megabytes which prevents the upload if at least one file exceeds it. This property is not supported by Internet Explorer 9.
			 */
			maximumFileSize?: number;
			/**
			 * The chosen files will be checked against an array of mime types. If at least one file does not fit the mime type restriction the upload is prevented. This property is not supported by Internet Explorer 9.
			 * Example: mimeType ["image/png", "image/jpeg"].
			 */
			mimeType?: string[];
			/**
			 * If set to "true", the request will be sent as XHR request instead of a form submit. This property is not supported by Internet Explorer 9.
			 * @default false
			 */
			sendXHR?: boolean;
			/**
			 * Placeholder for the text field.
			 */
			placeholder?: string;
			/**
			 * Style of the button. "Transparent, "Accept", "Reject", or "Emphasized" is allowed.
			 */
			style?: string;
			/**
			 * If set to "true", the FileUploader will be rendered as Button only, without showing the InputField.
			 * @default false
			 */
			buttonOnly?: boolean;
			/**
			 * If set to "false", the request will be sent as file only request instead of a multipart/form-data request. Only one file could be uploaded using this type of request. Required for sending such a request is to set the property "sendXHR" to "true". This property is not supported by Internet Explorer 9.
			 * @default true
			 */
			useMultipart?: boolean;
			/**
			 * The maximum length of a filename which the FileUploader will accept. If the maximum filename length is exceeded, the corresponding Event 'filenameLengthExceed' is fired.
			 */
			maximumFilenameLength?: number;
			/**
			 * Visualizes warnings or errors related to the text field. Possible values: Warning, Error, Success, None.
			 * @default None
			 */
			valueState?: sap.ui.core.ValueState;
			/**
			 * Icon to be displayed as graphical element within the button.
			 * This can be an URI to an image or an icon font URI.
			 * @default 
			 */
			icon?: sap.ui.core.URI;
			/**
			 * Icon to be displayed as graphical element within the button when it is hovered (only if also a base icon was specified). If not specified the base icon is used.
			 * If a icon font icon is used, this property is ignored.
			 * @default 
			 */
			iconHovered?: sap.ui.core.URI;
			/**
			 * Icon to be displayed as graphical element within the button when it is selected (only if also a base icon was specified). If not specified the base or hovered icon is used.
			 * If a icon font icon is used, this property is ignored.
			 * @default 
			 */
			iconSelected?: sap.ui.core.URI;
			/**
			 * If set to true (default), the display sequence is 1. icon 2. control text.
			 * @default true
			 */
			iconFirst?: boolean;
			/**
			 * If set to true, the button is displayed without any text.
			 * @default false
			 */
			iconOnly?: boolean;
		}
	
		interface FileUploaderParameterMetadata {
			/**
			 * The name of the hidden inputfield.
			 */
			name?: string;
			/**
			 * The value of the hidden inputfield.
			 */
			value?: string;
		}
	
		interface MenuMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * When a menu is disabled none of its items can be selected by the user.
			 * The enabled property of an item (@link sap.ui.unified.MenuItemBase#getEnabled) has no effect when the menu of the item is disabled.
			 * @default true
			 */
			enabled?: boolean;
			/**
			 * The maximum number of items which are displayed before an overflow mechanism takes effect.
			 * A value smaller than 1 means an infinite number of visible items.
			 * The overall height of the menu is limited by the height of the screen. If the maximum possible height is reached, an
			 * overflow takes effect, even if the maximum number of visible items is not yet reached.
			 * @default 0
			 */
			maxVisibleItems?: number;
			/**
			 * The keyboard can be used to navigate through the items of a menu. Beside the arrow keys for single steps and the <i>Home</i> / <i>End</i> keys for jumping
			 * to the first / last item, the <i>Page Up</i> / <i>Page Down</i> keys can be used to jump an arbitrary number of items up or down. This number can be defined via the <code>pageSize</code> property.
			 * For values smaller than 1, paging behaves in a similar way to when using the <i>Home</i> / <i>End</i> keys. If the value equals 1, the paging behavior is similar to that of the arrow keys.
			 * @default 5
			 */
			pageSize?: number;
		}
	
		interface MenuItemMetadata extends sap.ui.unified.MenuItemBaseMetadata {
			/**
			 * Defines the text which should be displayed on the item.
			 * @default 
			 */
			text?: string;
			/**
			 * Defines the icon of the {@link sap.ui.core.IconPool sap.ui.core.IconPool} or an image which should be displayed on the item.
			 * @default 
			 */
			icon?: sap.ui.core.URI;
		}
	
		interface MenuItemBaseMetadata {
			/**
			 * When an item is disabled the item can not be selected by the user.
			 * The enabled property of the item has no effect when the menu of the item is disabled ({@link sap.ui.unified.Menu#getEnabled Menu#getEnabled}).
			 * @default true
			 */
			enabled?: boolean;
			/**
			 * Invisible items do not appear in the menu.
			 * @default true
			 */
			visible?: boolean;
			/**
			 * Defines whether a visual separator should be rendered before the item.
			 * <b>Note:</b> If an item is invisible also the separator of this item is not shown.
			 * @default false
			 */
			startsSection?: boolean;
		}
	
		interface MenuTextFieldItemMetadata extends sap.ui.unified.MenuItemBaseMetadata {
			/**
			 * Defines the label of the text field of the item.
			 */
			label?: string;
			/**
			 * Defines the icon of the {@link sap.ui.core.IconPool sap.ui.core.IconPool} or an image which should be displayed on the item.
			 */
			icon?: sap.ui.core.URI;
			/**
			 * Defines the value of the text field of the item.
			 */
			value?: string;
			/**
			 * Defines the value state of the text field of the item. This allows you to visualize e.g. warnings or errors.
			 * @default None
			 */
			valueState?: sap.ui.core.ValueState;
		}
	
		interface ShellMetadata extends sap.ui.unified.ShellLayoutMetadata {
			/**
			 * The application icon. If a custom header is set this property has no effect.
			 */
			icon?: sap.ui.core.URI;
			/**
			 * If set to false, the search area (aggregation 'search') is hidden. If a custom header is set this property has no effect.
			 * @default true
			 */
			searchVisible?: boolean;
		}
	
		interface ShellHeadItemMetadata {
			/**
			 * If set to true, a separator is displayed after the item.
			 * @default true
			 */
			showSeparator?: boolean;
			/**
			 * Defines the toggle state in case the item represents a toggle button (see also property <code>toggleEnabled</code>).
			 * @default false
			 */
			selected?: boolean;
			/**
			 * If set to true, the item represents a toggle button. The <code>selected</code> property can the be used to
			 * define the toggle state. Otherwise the item is displayed as action button. In this case the <code>selected</code> property
			 * is ignored.
			 * @default true
			 */
			toggleEnabled?: boolean;
			/**
			 * The icon of the item, either defined in the sap.ui.core.IconPool or an URI to a custom image. An icon must be set.
			 */
			icon?: sap.ui.core.URI;
			/**
			 * Invisible items are not shown on the UI.
			 * @default true
			 */
			visible?: boolean;
		}
	
		interface ShellHeadUserItemMetadata {
			/**
			 * The name of the user.
			 * @default 
			 */
			username?: string;
			/**
			 * The user item is intended to be used for user settings. Normally these settings are done via a Menu or Dialog.
			 * If this property is set to true an indicator for such a popup mechanismn is shown in the item.
			 * @default true
			 */
			showPopupIndicator?: boolean;
			/**
			 * An image of the user, normally an URI to a image but also an icon from the sap.ui.core.IconPool is possible.
			 */
			image?: sap.ui.core.URI;
		}
	
		interface ShellLayoutMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * Shows / Hides the side pane.
			 * @default false
			 */
			showPane?: boolean;
			/**
			 * Whether the header can be hidden (manually or automatically). This feature is only available when touch events are supported.
			 * @default false
			 */
			headerHiding?: boolean;
			/**
			 * If set to false, no header (and no items, search, ...) is shown.
			 * @default true
			 */
			headerVisible?: boolean;
		}
	
		interface SplitContainerMetadata extends sap.ui.core.ControlMetadata {
			/**
			 * Shows / Hides the secondary area.
			 */
			showSecondaryContent?: boolean;
			/**
			 * The width if the secondary content. The height is always 100%.
			 * @default 250px
			 */
			secondaryContentSize?: sap.ui.core.CSSSize;
			/**
			 * Whether to show the secondary content on the left ("Horizontal", default) or on the top ("Vertical").
			 * @default Horizontal
			 */
			orientation?: sap.ui.core.Orientation;
		}
	}

	/**
	 * Controls that implement the SAP User Experience (UX) Guidelines 3.0
	 */
	namespace ux3 {
	
		class ActionBarSocialActions {
			/**
			 * Standards action 'Mark as Favorite'
			 */
			static Favorite: string;
			/**
			 * Standard action 'Mark for Follow up'
			 */
			static Flag: string;
			/**
			 * Standard action 'Follow/Unfollow'
			 */
			static Follow: string;
			/**
			 * Standard action 'Open Thing Inspector'
			 */
			static Open: string;
			/**
			 * Standard action 'Create an update' (Feed)
			 */
			static Update: string;
		}
	
		interface DataSetView {
		}
	
		class ExactOrder {
			/**
			 * The order of the sub lists is defined by order of the defined sub attributes.
			 */
			static Fixed: string;
			/**
			 * The order of the sub lists is defined by the selection order of the user.
			 */
			static Select: string;
		}
	
		class FeederType {
			/**
			 * comment feeder (small)
			 */
			static Comment: string;
			/**
			 * large Feeder
			 */
			static Large: string;
			/**
			 * medium feeder
			 */
			static Medium: string;
		}
	
		class FollowActionState {
			/**
			 * default state
			 */
			static Default: string;
			/**
			 * follow state
			 */
			static Follow: string;
			/**
			 * hold state
			 */
			static Hold: string;
		}
	
		class NotificationBarStatus {
			/**
			 * Default height for the bar
			 */
			static Default: string;
			/**
			 * Bar should be maximized
			 */
			static Max: string;
			/**
			 * Bar should be minimized
			 */
			static Min: string;
			/**
			 * Bar should not be visible
			 */
			static None: string;
		}
	
		class ShellDesignType {
			/**
			 * 
			 * An even lighter design. It borrows most of its properties from the Light
			 * design and just changes a few details like the header colors in order to
			 * have a blue design within gold reflection.
			 */
			static Crystal: string;
			/**
			 * 
			 * A lighter design. Should be used in combination with the Standard header
			 * type.
			 */
			static Light: string;
			/**
			 * The standard Shell design (dark).
			 */
			static Standard: string;
		}
	
		class ShellHeaderType {
			/**
			 * Only the branding area is visible. Top-level navigation bar, header items, title and icon are not shown.
			 */
			static BrandOnly: string;
			/**
			 * Like the Standard Area but without top-level navigation bar.
			 */
			static NoNavigation: string;
			/**
			 * Like the Standard Area but with a leaner top-level navigation bar.
			 */
			static SlimNavigation: string;
			/**
			 * The standard Shell header.
			 */
			static Standard: string;
		}
	
		class ThingViewerHeaderType {
			/**
			 * The header content is displayed horizontally above the facet content
			 */
			static Horizontal: string;
			/**
			 * The standard ThingViewer header.
			 */
			static Standard: string;
		}
	
		class VisibleItemCountMode {
			/**
			 * The FacetFilter automatically fills the height of the surrounding container. The visibleItemCount property is automatically changed accordingly.
			 */
			static Auto: string;
			/**
			 * The FacetFilter always has as many items in the FacetFilterList as defined in the visibleItemCount property.
			 */
			static Fixed: string;
		}
	}

	namespace test {
	
		namespace gherkin {
		
			/**
			 * Provides utility functions for formatting 2D lists of strings (such as the raw data loaded from a Gherkin
			 * feature file) into a more useful format such as a list of objects or a single object. Also handles normalization
			 * of the raw strings.
			 */
			namespace dataTableUtils {
			
				/**
				 * A simple object containing a series of normalization functions that change a string according to a
				 * particular strategy.
				 */
				namespace normalization {
					/**
					 * e.g. "First Name" -> "firstName"
					 * @param sString the string to normalize
					 * @return the input string with all words after the first capitalized and all spaces removed
					 */
					function camelCase(sString: string): string;
					/**
					 * e.g. "First Name" -> "first-name"
					 * @param sString the string to normalize
					 * @return the input string trimmed, changed to lower case and with space between words
					 *                   replaced by a hyphen ('-')
					 */
					function hyphenated(sString: string): string;
					/**
					 * e.g. "First Name" -> "First Name"
					 * @param sString the string to normalize
					 * @return the original unchanged input string
					 */
					function none(sString: string): string;
					/**
					 * e.g. "first name" -> "FirstName"
					 * @param sString the string to normalize
					 * @return the input string with all words capitalized and all spaces removed
					 */
					function pascalCase(sString: string): string;
					/**
					 * e.g. "first name" -> "First Name"
					 * @param sString the string to normalize
					 * @return the input string trimmed and with all words capitalized
					 */
					function titleCase(sString: string): string;
				}
				/**
				 * Takes the inputed 2D list 'aData' and returns an equivalent object. Each row of data is expected to
				 * be a property-value pair. To create nested objects, add extra columns to the data. E.g.
				 * <pre>
				 *  [
				 *    ['Name', 'Alice'],
				 *    ['Mass', '135 lbs'],
				 *    ['Telephone Number', 'Home', '123-456-7890'],
				 *    ['Telephone Number', 'Work', '123-456-0987']
				 *  ]
				 * </pre>
				 * For each data row, the right-most element becomes a property value, and everything else is a property
				 * name. The property names get normalized according to the strategy defined by the parameter 'oNorm'.
				 * E.g. using camelCase strategy
				 * <pre>
				 *   {
				 *     name: 'Alice',
				 *     mass: '135 lbs',
				 *     telephoneNumber: {
				 *       home: '123-456-7890',
				 *       work: '123-456-0987'
				 *     }
				 *   }
				 * </pre>
				 * @param aData the input data to be converted
				 * @param oNorm the normalization function to use to normalize property
				 *                                              names. Can also be a string with values 'titleCase', 'pascalCase',
				 *                                              'camelCase', 'hyphenated' or 'none'.(optional)
				 * @return - an object equivalent to the input data, with property names normalized
				 */
				function toObject(aData: string[][], oNorm?: string|any): any;
				/**
				 * Takes the inputed 2D list 'aData' and returns an equivalent list of objects. The data is expected to
				 * have a header row, with each subsequent row being an entity, and each column being a property of that
				 * entity. E.g.
				 * <pre>
				 *   [
				 *     ["Their Name",  "Their Age"],
				 *     ["Alice",       "16"],
				 *     ["Bob",         "22"]
				 *   ]
				 * </pre>
				 * 
				 * The data's column headers become the returned objects' property names. The property names get normalized
				 * according to the strategy defined by the parameter 'oNorm'. E.g. using hyphenation strategy this is returned:
				 * <pre>
				 *   [
				 *     {their-name: "Alice", their-age: "16"},
				 *     {their-name: "Bob", their-age: "22"}
				 *   ]
				 * </pre>
				 * @param aData the input data to be converted, with a header row
				 * @param oNorm the normalization function to use to normalize property
				 *                                              names. Can also be a String with values 'titleCase', 'pascalCase',
				 *                                              'camelCase', 'hyphenated' or 'none'.(optional)
				 * @return - a list of objects equivalent to the input data, with property names normalized
				 */
				function toTable(aData: string[][], oNorm?: string|any): any[];
			}
		
			/**
			 * Dynamically generates Opa5 tests based on a Gherkin feature file and step definitions
			 * 
			 * Logs activity to Opa5, and some debug information to the console with the prefix "[GHERKIN]"
			 */
			namespace opa5TestHarness {
				/**
				 * Dynamically generates Opa5 tests
				 * 
				 * If a test step is missing and args.generateMissingSteps is true then the  Gherkin step will be converted into Opa
				 * Page Object code and executed. The text will be converted to camelCase and have any non-alphanumeric character
				 * removed. Here are two pertinent examples:
				 * 
				 * (1) The simple step "Given I start my app" will be converted into the call "Given.iStartMyApp();"
				 * 
				 * (2) The step "Then on page 1: I should see the page 1 text" will become the call
				 *     "Then.onPage1.iShouldSeeThePage1Text();"
				 * 
				 * Chaining function calls, such as "Then.iStartMyApp().and.iCloseMyApp()" is not possible at this time.
				 * @param args the arguments to the function
				 */
				function test(args: any);
			}
		
			/**
			 * Dynamically generates and executes QUnit tests based on a Gherkin feature file and step definitions
			 * 
			 * Logs activity to QUnit, and some debug information to the console with the prefix "[GHERKIN]"
			 */
			namespace qUnitTestHarness {
				/**
				 * Dynamically generates and executes QUnit tests
				 * @param args the arguments to the function
				 */
				function test(args: any);
			}
		
			class StepDefinitions extends sap.ui.base.Object {
				/**
				 * A Gherkin feature file is human-readable, and the computer does not know how to execute its steps. This
				 * StepDefinitions class provides the interface between human and machine. It defines what each step in the Gherkin
				 * feature file will actually do when it is executed.
				 * 
				 * Meant to be implemented/overridden by a child object. Specifically, the functions 'init' and 'closeApplication'
				 * need to be overridden.
				 */
				constructor();
				/**
				 * Closes the application and cleans up any mess made by the tests. To avoid erroneous exceptions during test
				 * execution, make sure that it is safe to run this method even if the application was never started.
				 */
				closeApplication();
				/**
				 * Creates a new subclass of class sap.ui.test.gherkin.StepDefinitions with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Registers the step definitions by calling the method 'register'. The order of the register calls is important.
				 * The first step definition whose regular expression matches the step text is the one that will be executed,
				 * however, the step definitions are checked in REVERSE ORDER (i.e. the last one you wrote is checked first).
				 */
				init();
				/**
				 * Registers a step definition.
				 * @param rRegex the regular expression that matches the feature file step (with leading 'Given', 'When',
				 *                          'Then' or 'But' removed). E.g. if the feature file has the step
				 *                          "Then I should be served a coffee" it will truncated to "I should be served a coffee"
				 *                          and tested against 'rRegex' to check for a match. The simple regular expression
				 *                          /^I should be served a coffee$/i would match this text. The regular
				 *                          expression can specify capturing groups, which will be passed as parameters to 'fnFunc'.
				 * @param fnFunc the function to execute in the event that the regular expression matches. Receives
				 *                            regular expression capturing groups as parameters in the same order that they are
				 *                            specified in the regular expression. If a data table is specified for the step, it
				 *                            will be passed as an additional final parameter. At execution time, all functions
				 *                            within a particular scenario will execute within the same 'this' context.
				 */
				register(rRegex: string, fnFunc: any);
			}
		}
	
		namespace actions {
		
			class Action extends sap.ui.base.ManagedObject {
				/**
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 */
				constructor();
				/**
				 * Checks if the matcher is matching - will get an instance of sap.ui.Control as parameter
				 * Should be overwritten by subclasses
				 * @param element the {@link sap.ui.core.Element} or a control (extends element) the action will be executed on
				 */
				executeOn(element: sap.ui.core.Control);
				/**
				 * Creates a new subclass of class sap.ui.test.actions.Action with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Gets current value of property <code>idSuffix</code>.
				 * @return Value of property <code>idSuffix</code>
				 */
				getIdSuffix(): string;
				/**
				 * Sets a new value for property <code>idSuffix</code>.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sIdSuffix New value for property <code>idSuffix</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setIdSuffix(sIdSuffix: string): Action;
			}
		
			class EnterText extends Action {
				/**
				 * The EnterText action is used to simulate a user entering texts to inputs.
				 * EnterText will be executed on a control's focus dom ref.
				 * Supported controls are (for other controls this action still might work):
				 * <ul>
				 *     <li>sap.m.Input</li>
				 *     <li>sap.m.SearchField</li>
				 *     <li>sap.m.TextArea</li>
				 * </ul>
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 */
				constructor();
				/**
				 * Sets focus on given control and triggers Multiple keyboard events on it, one event for every character in the text.
				 * Logs an error if control has no focusable dom ref or is not visible.
				 * @param oControl the control on which the text event should be entered in.
				 */
				executeOn(oControl: sap.ui.core.Control);
				/**
				 * Checks if the matcher is matching - will get an instance of sap.ui.Control as parameter
				 * Should be overwritten by subclasses
				 * @note Overload from base type sap.ui.test.actions.Action
				 * @param element the {@link sap.ui.core.Element} or a control (extends element) the action will be executed on
				 */
				executeOn(element: sap.ui.core.Control);
				/**
				 * Creates a new subclass of class sap.ui.test.actions.EnterText with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.test.actions.Action.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Gets current value of property <code>clearTextFirst</code>.
				 * 
				 * Default value is <code>true</code>.
				 * @return Value of property <code>clearTextFirst</code>
				 */
				getClearTextFirst(): boolean;
				/**
				 * Gets current value of property <code>text</code>.
				 * 
				 * The Text that is going to be typed to the control. If you are entering an empty string, the value will be cleared.
				 * @return Value of property <code>text</code>
				 */
				getText(): string;
				/**
				 * Sets a new value for property <code>clearTextFirst</code>.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * 
				 * Default value is <code>true</code>.
				 * @param bClearTextFirst New value for property <code>clearTextFirst</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setClearTextFirst(bClearTextFirst: boolean): EnterText;
				/**
				 * Sets a new value for property <code>text</code>.
				 * 
				 * The Text that is going to be typed to the control. If you are entering an empty string, the value will be cleared.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sText New value for property <code>text</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setText(sText: string): EnterText;
			}
		
			class Press extends Action {
				/**
				 * The Press action is used to simulate a press interaction on a Control's dom ref.
				 * This will work out of the box for most of the controls (even custom controls).
				 * 
				 * Here is a List of supported controls (some controls will trigger the press on a specific region):
				 * 
				 * <ul>
				 *     <li>sap.m.Button</li>
				 *     <li>sap.m.Link</li>
				 *     <li>sap.m.StandardListItem</li>
				 *     <li>sap.m.IconTabFilter</li>
				 *     <li>sap.m.SearchField - Search Button</li>
				 *     <li>sap.m.Page - Back Button</li>
				 *     <li>sap.m.semantic.FullscreenPage - Back Button</li>
				 *     <li>sap.m.semantic.DetailPage - Back Button</li>
				 *     <li>sap.m.List - More Button</li>
				 *     <li>sap.m.Table - More Button</li>
				 *     <li>sap.m.StandardTile</li>
				 * </ul>
				 */
				constructor();
				/**
				 * A map that contains the id suffixes for certain controls of the library.
				 * When you extended a UI5 controls the adapter of the control will be taken.
				 * If you need an adapter for your own control you can add it here. For example:
				 * You wrote a control with the namespace my.Control it renders two buttons and you want the press action to press the second one by default.
				 * 
				 * <pre>
				 * <code>
				 *     new my.Control("myId");
				 * </code>
				 * </pre>
				 * 
				 * It contains two button tags in its dom.
				 * When you render your control it creates the following dom:
				 * 
				 * 
				 * <pre>
				 * <code>
				 *     <div id="myId">
				 *         <button id="myId-firstButton"/>
				 *         <button id="myId-secondButton"/>
				 *     </div>
				 * </code>
				 * </pre>
				 * 
				 * Then you may add a control adapter like this
				 * 
				 * <pre>
				 * <code>
				 *     Press.controlAdapters["my.control"] = "secondButton" //This can be used by setting the Target Property of an action
				 * 
				 *     // Example usage
				 *     new Press(); // executes on second Button since it is set as default
				 *     new Press({ idSuffix: "firstButton"}); // executes on the first button has to be the same as the last part of the id in the dom
				 * </code>
				 * </pre>
				 */
				controlAdapters: any;
				/**
				 * Sets focus on given control and triggers a 'tap' event on it (which is
				 * internally translated into a 'press' event).
				 * Logs an error if control is not visible (i.e. has no dom representation)
				 * @param oControl the control on which the 'press' event is triggered
				 */
				executeOn(oControl: sap.ui.core.Control);
				/**
				 * Checks if the matcher is matching - will get an instance of sap.ui.Control as parameter
				 * Should be overwritten by subclasses
				 * @note Overload from base type sap.ui.test.actions.Action
				 * @param element the {@link sap.ui.core.Element} or a control (extends element) the action will be executed on
				 */
				executeOn(element: sap.ui.core.Control);
				/**
				 * Creates a new subclass of class sap.ui.test.actions.Press with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.test.actions.Action.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			}
		}
	
		namespace matchers {
		
			class AggregationContainsPropertyEqual extends Matcher {
				/**
				 * AggregationContainsPropertyEqual - checks if an aggregation contains at least one item that has a Property set to a certain value.
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param mSettings optional map/JSON-object with initial settings for the new AggregationContainsPropertyEqualMatcher(optional)
				 */
				constructor(mSettings?: sap.ui.test.matchers.AggregationContainsPropertyEqualMetadata);
				/**
				 * AggregationContainsPropertyEqual - checks if an aggregation contains at least one item that has a Property set to a certain value.
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @note Any overloads to support not documented metadata
				 * @param mSettings optional map/JSON-object with initial settings for the new AggregationContainsPropertyEqualMatcher(optional)
				 */
				constructor(mSettings?: any);
				/**
				 * Creates a new subclass of class sap.ui.test.matchers.AggregationContainsPropertyEqual with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Gets current value of property <code>aggregationName</code>.
				 * 
				 * The Name of the aggregation that is used for matching.
				 * @return Value of property <code>aggregationName</code>
				 */
				getAggregationName(): string;
				/**
				 * Gets current value of property <code>propertyName</code>.
				 * 
				 * The Name of the property that is used for matching.
				 * @return Value of property <code>propertyName</code>
				 */
				getPropertyName(): string;
				/**
				 * Gets current value of property <code>propertyValue</code>.
				 * 
				 * The value of the Property that is used for matching.
				 * @return Value of property <code>propertyValue</code>
				 */
				getPropertyValue(): any;
				/**
				 * Checks if the control has a filled aggregation with at least one control that have a property equaling propertyName/Value.
				 * @param oControl the control that is checked by the matcher
				 * @return true if the Aggregation set in the property aggregationName is filled, false if it is not.
				 */
				isMatching(oControl: sap.ui.core.Control): boolean;
				/**
				 * Sets a new value for property <code>aggregationName</code>.
				 * 
				 * The Name of the aggregation that is used for matching.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sAggregationName New value for property <code>aggregationName</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setAggregationName(sAggregationName: string): AggregationContainsPropertyEqual;
				/**
				 * Sets a new value for property <code>propertyName</code>.
				 * 
				 * The Name of the property that is used for matching.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sPropertyName New value for property <code>propertyName</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setPropertyName(sPropertyName: string): AggregationContainsPropertyEqual;
				/**
				 * Sets a new value for property <code>propertyValue</code>.
				 * 
				 * The value of the Property that is used for matching.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param oPropertyValue New value for property <code>propertyValue</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setPropertyValue(oPropertyValue: any): AggregationContainsPropertyEqual;
			}
		
			class AggregationFilled extends Matcher {
				/**
				 * AggregationFilled - checks if an aggregation contains at least one entry.
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param mSettings optional map/JSON-object with initial settings for the new AggregationFilledMatcher(optional)
				 */
				constructor(mSettings?: sap.ui.test.matchers.AggregationFilledMetadata);
				/**
				 * AggregationFilled - checks if an aggregation contains at least one entry.
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @note Any overloads to support not documented metadata
				 * @param mSettings optional map/JSON-object with initial settings for the new AggregationFilledMatcher(optional)
				 */
				constructor(mSettings?: any);
				/**
				 * Creates a new subclass of class sap.ui.test.matchers.AggregationFilled with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Gets current value of property <code>name</code>.
				 * 
				 * The name of the aggregation that is used for matching.
				 * @return Value of property <code>name</code>
				 */
				getName(): string;
				/**
				 * Checks if the control has a filled aggregation.
				 * @param oControl the control that is checked by the matcher
				 * @return true if the Aggregation set in the property aggregationName is filled, false if it is not.
				 */
				isMatching(oControl: sap.ui.core.Control): boolean;
				/**
				 * Sets a new value for property <code>name</code>.
				 * 
				 * The name of the aggregation that is used for matching.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sName New value for property <code>name</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setName(sName: string): AggregationFilled;
			}
		
			class AggregationLengthEquals extends Matcher {
				/**
				 * AggregationLengthEquals - checks if an aggregation contains at least one entry.
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param mSettings optional map/JSON-object with initial settings for the new AggregationLengthEqualsMatcher(optional)
				 */
				constructor(mSettings?: sap.ui.test.matchers.AggregationLengthEqualsMetadata);
				/**
				 * AggregationLengthEquals - checks if an aggregation contains at least one entry.
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @note Any overloads to support not documented metadata
				 * @param mSettings optional map/JSON-object with initial settings for the new AggregationLengthEqualsMatcher(optional)
				 */
				constructor(mSettings?: any);
				/**
				 * Creates a new subclass of class sap.ui.test.matchers.AggregationLengthEquals with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Gets current value of property <code>length</code>.
				 * 
				 * The length that aggregation <code>name</code> should have.
				 * @return Value of property <code>length</code>
				 */
				getLength(): number;
				/**
				 * Gets current value of property <code>name</code>.
				 * 
				 * The name of the aggregation that is used for matching.
				 * @return Value of property <code>name</code>
				 */
				getName(): string;
				/**
				 * Checks if the control's aggregation <code>name</code> has length <code>length</code>.
				 * @param oControl the control that is checked by the matcher
				 * @return true if the length of aggregation <code>name</code> is the same as <code>length</code>, false if it is not.
				 */
				isMatching(oControl: sap.ui.core.Control): boolean;
				/**
				 * Sets a new value for property <code>length</code>.
				 * 
				 * The length that aggregation <code>name</code> should have.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param iLength New value for property <code>length</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setLength(iLength: number): AggregationLengthEquals;
				/**
				 * Sets a new value for property <code>name</code>.
				 * 
				 * The name of the aggregation that is used for matching.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sName New value for property <code>name</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setName(sName: string): AggregationLengthEquals;
			}
		
			class Ancestor  {
				/**
				 * 
				 * @param oAncestorControl the ancestor control to check, if undefined, validates every control to true
				 * @param bDirect specifies if the ancestor should be a direct ancestor (parent)(optional)
				 */
				constructor(oAncestorControl: any, bDirect?: boolean);
			}
		
			class BindingPath extends Matcher {
				/**
				 * BindingPath - checks if a control has a binding context with the exact same binding path.
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param mSettings Map/JSON-object with initial settings for the new BindingPath.(optional)
				 */
				constructor(mSettings?: sap.ui.test.matchers.BindingPathMetadata);
				/**
				 * BindingPath - checks if a control has a binding context with the exact same binding path.
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @note Any overloads to support not documented metadata
				 * @param mSettings Map/JSON-object with initial settings for the new BindingPath.(optional)
				 */
				constructor(mSettings?: any);
				/**
				 * Creates a new subclass of class sap.ui.test.matchers.BindingPath with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Gets current value of property <code>modelName</code>.
				 * 
				 * The name of the binding model that is used for matching.
				 * @return Value of property <code>modelName</code>
				 */
				getModelName(): string;
				/**
				 * Gets current value of property <code>path</code>.
				 * 
				 * The value of the binding path that is used for matching.
				 * @return Value of property <code>path</code>
				 */
				getPath(): string;
				/**
				 * Checks if the control has a binding context that matches the path
				 * @param oControl the control that is checked by the matcher
				 * @return true if the binding path has a strictly matching value.
				 */
				isMatching(oControl: sap.ui.core.Control): boolean;
				/**
				 * Sets a new value for property <code>modelName</code>.
				 * 
				 * The name of the binding model that is used for matching.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sModelName New value for property <code>modelName</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setModelName(sModelName: string): BindingPath;
				/**
				 * Sets a new value for property <code>path</code>.
				 * 
				 * The value of the binding path that is used for matching.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sPath New value for property <code>path</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setPath(sPath: string): BindingPath;
			}
		
			class Interactable extends Matcher {
				/**
				 * 
				 */
				constructor();
				/**
				 * Creates a new subclass of class sap.ui.test.matchers.Interactable with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			}
		
			class Matcher extends sap.ui.base.ManagedObject {
				/**
				 * 
				 */
				constructor();
				/**
				 * Creates a new subclass of class sap.ui.test.matchers.Matcher with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.ManagedObject.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Checks if the matcher is matching - will get an instance of sap.ui.Control as parameter.
				 * 
				 * Should be overwritten by subclasses
				 * @param oControl the control that is checked by the matcher
				 * @return true if the Control is matching the condition of the matcher
				 */
				isMatching(oControl: sap.ui.core.Control): boolean;
			}
		
			class Properties  {
				/**
				 * 
				 * @param oProperties the object with the properties to be checked. Example:
				 * <pre>
				 * // Would filter for an enabled control with the text "Accept".
				 * new Properties({
				 *     // The property text has the exact value "Accept"
				 *     text: "Accept",
				 *     // The property enabled also has to be true
				 *     enabled: true
				 * })
				 * </pre>
				 * If the value is a RegExp, it tests the RegExp with the value. RegExp only works with string properties.
				 */
				constructor(oProperties: any);
			}
		
			class PropertyStrictEquals extends Matcher {
				/**
				 * PropertyStrictEquals - checks if a property has the exact same value.
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @param mSettings optional map/JSON-object with initial settings for the new PropertyStrictEquals(optional)
				 */
				constructor(mSettings?: sap.ui.test.matchers.PropertyStrictEqualsMetadata);
				/**
				 * PropertyStrictEquals - checks if a property has the exact same value.
				 * 
				 * Accepts an object literal <code>mSettings</code> that defines initial
				 * property values, aggregated and associated objects as well as event handlers.
				 * See {@link sap.ui.base.ManagedObject#constructor} for a general description of the syntax of the settings object.
				 * @note Any overloads to support not documented metadata
				 * @param mSettings optional map/JSON-object with initial settings for the new PropertyStrictEquals(optional)
				 */
				constructor(mSettings?: any);
				/**
				 * Creates a new subclass of class sap.ui.test.matchers.PropertyStrictEquals with name <code>sClassName</code>
				 * and enriches it with the information contained in <code>oClassInfo</code>.
				 * 
				 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.test.matchers.Matcher.extend}.
				 * @param sClassName Name of the class being created
				 * @param oClassInfo Object literal with information about the class(optional)
				 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
				 * @return Created class / constructor function
				 */
				extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
				/**
				 * Gets current value of property <code>name</code>.
				 * 
				 * The Name of the property that is used for matching.
				 * @return Value of property <code>name</code>
				 */
				getName(): string;
				/**
				 * Gets current value of property <code>value</code>.
				 * 
				 * The value of the property that is used for matching.
				 * @return Value of property <code>value</code>
				 */
				getValue(): any;
				/**
				 * Checks if the control has a property that matches the value
				 * @param oControl the control that is checked by the matcher
				 * @return true if the property has a strictly matching value.
				 */
				isMatching(oControl: sap.ui.core.Control): boolean;
				/**
				 * Sets a new value for property <code>name</code>.
				 * 
				 * The Name of the property that is used for matching.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param sName New value for property <code>name</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setName(sName: string): PropertyStrictEquals;
				/**
				 * Sets a new value for property <code>value</code>.
				 * 
				 * The value of the property that is used for matching.
				 * 
				 * When called with a value of <code>null</code> or <code>undefined</code>, the default value of the property will be restored.
				 * @param oValue New value for property <code>value</code>
				 * @return Reference to <code>this</code> in order to allow method chaining
				 */
				setValue(oValue: any): PropertyStrictEquals;
			}
		
			interface AggregationContainsPropertyEqualMetadata {
				/**
				 * The Name of the aggregation that is used for matching.
				 */
				aggregationName?: string;
				/**
				 * The Name of the property that is used for matching.
				 */
				propertyName?: string;
				/**
				 * The value of the Property that is used for matching.
				 */
				propertyValue?: any;
			}
		
			interface AggregationFilledMetadata {
				/**
				 * The name of the aggregation that is used for matching.
				 */
				name?: string;
			}
		
			interface AggregationLengthEqualsMetadata {
				/**
				 * The name of the aggregation that is used for matching.
				 */
				name?: string;
				/**
				 * The length that aggregation <code>name</code> should have.
				 */
				length?: number;
			}
		
			interface BindingPathMetadata {
				/**
				 * The value of the binding path that is used for matching.
				 */
				path?: string;
				/**
				 * The name of the binding model that is used for matching.
				 */
				modelName?: string;
			}
		
			interface PropertyStrictEqualsMetadata {
				/**
				 * The Name of the property that is used for matching.
				 */
				name?: string;
				/**
				 * The value of the property that is used for matching.
				 */
				value?: any;
			}
		}
	
		class Opa  {
			/**
			 * This class will help you write acceptance tests in one page or single page applications.
			 * You can wait for certain conditions to be met.
			 * @param extensionObject An object containing properties and functions. The newly created Opa will be extended by these properties and functions using jQuery.extend.(optional)
			 */
			constructor(extensionObject?: any);
			/**
			 * the global configuration of Opa.
			 * All of the global values can be overwritten in an individual waitFor call.
			 * The default values are:
			 * <ul>
			 * 		<li>arrangements: A new Opa instance</li>
			 * 		<li>actions: A new Opa instance</li>
			 * 		<li>assertions: A new Opa instance</li>
			 * 		<li>timeout : 15 seconds, is increased to 5 minutes if running in debug mode e.g. with URL parameter sap-ui-debug=true</li>
			 * 		<li>pollingInterval: 400 milliseconds</li>
			 * </ul>
			 * You can either directly manipulate the config, or extend it using {@link sap.ui.test.Opa#.extendConfig}
			 */
			config: any;
			/**
			 * Calls the static emptyQueue function in the Opa namespace {@link sap.ui.test.Opa#.emptyQueue}
			 */
			emptyQueue();
			/**
			 * Waits until all waitFor calls are done.
			 * @return If the waiting was successful, the promise will be resolved. If not it will be rejected
			 */
			emptyQueue(): any;
			/**
			 * Calls the static extendConfig function in the Opa namespace {@link sap.ui.test.Opa#.extendConfig}
			 */
			extendConfig();
			/**
			 * Extends and overwrites default values of the {@link sap.ui.test.Opa#.config}.
			 * Sample usage:
			 * <pre>
			 *     <code>
			 *         var oOpa = new Opa();
			 * 
			 *         // this statement will  will time out after 15 seconds and poll every 400ms.
			 *         // those two values come from the defaults of {@link sap.ui.test.Opa#.config}.
			 *         oOpa.waitFor({
			 *         });
			 * 
			 *         // All wait for statements added after this will take other defaults
			 *         Opa.extendConfig({
			 *             timeout: 10,
			 *             pollingInterval: 100
			 *         });
			 * 
			 *         // this statement will time out after 10 seconds and poll every 100 ms
			 *         oOpa.waitFor({
			 *         });
			 * 
			 *         // this statement will time out after 20 seconds and poll every 100 ms
			 *         oOpa.waitFor({
			 *             timeout: 20;
			 *         });
			 *     </code>
			 * </pre>
			 * @param options The values to be added to the existing config
			 */
			extendConfig(options: any);
			/**
			 * Gives access to a singleton object you can save values in.
			 * This object will only be created once and it will never be destroyed.
			 * That means you can use it to save values you need in multiple separated tests.
			 * @return the context object
			 */
			getContext(): any;
			/**
			 * Gives access to a singleton object you can save values in.
			 * Same as {@link sap.ui.test.Opa#getContext}
			 * @return the context object
			 */
			getContext(): any;
			/**
			 * Reset Opa.config to its default values.
			 * All of the global values can be overwritten in an individual waitFor call.
			 * 
			 * The default values are:
			 * <ul>
			 * 		<li>arrangements: A new Opa instance</li>
			 * 		<li>actions: A new Opa instance</li>
			 * 		<li>assertions: A new Opa instance</li>
			 * 		<li>timeout : 15 seconds, is increased to 5 minutes if running in debug mode e.g. with URL parameter sap-ui-debug=true</li>
			 * 		<li>pollingInterval: 400 milliseconds</li>
			 * </ul>
			 */
			resetConfig();
			/**
			 * Clears the queue and stops running tests so that new tests can be run.
			 * This means all waitFor statements registered by {@link sap.ui.test.Opa#waitFor} will not be invoked anymore and
			 * the promise returned by {@link sap.ui.test.Opa#.emptyQueue}
			 * will be rejected or resolved depending on the failTest parameter.
			 * When its called inside of a check in {@link sap.ui.test.Opa#waitFor}
			 * the success function of this waitFor will not be called.
			 * @param boolean failTest If true is passed or the parameter is omited,
			 * the promise of {@link sap.ui.test.Opa#.emptyQueue} is rejected. If false is passed the promis is resolved.(optional)
			 */
			stopQueue(boolean?: any);
			/**
			 * Queues up a waitFor command for Opa.
			 * The Queue will not be emptied until {@link sap.ui.test.Opa#.emptyQueue} is called.
			 * If you are using {@link sap.ui.test.opaQunit}, emptyQueue will be called by the wrapped tests.
			 * 
			 * If you are using Opa5, waitFor takes additional parameters.
			 * They can be found here: {@link sap.ui.test.Opa5#waitFor}.
			 * Waits for a check condition to return true, in which case a success function will be called.
			 * If the timeout is reached before the check returns true, an error function will be called.
			 * @param options These contain check, success and error functions
			 * @return A promise that gets resolved on success
			 */
			waitFor(options: any): any;
		}
	
		class Opa5 extends sap.ui.base.Object {
			/**
			 * Helps you when writing tests for UI5 applications.
			 * Provides convenience to wait and retrieve for UI5 controls without relying on global IDs.
			 * Makes it easy to wait until your UI is in the state you need for testing, e.g.: waiting for backend data.
			 */
			constructor();
			/**
			 * Create a page object configured as arrangement, action and assertion to the Opa.config.
			 * Use it to structure your arrangement, action and assertion based on parts of the screen to avoid name clashes and help to structure your tests.
			 * @param mPageObjects 
			 * @return mPageObject The created page object. It will look like this:
			 * <pre><code>
			 *  {
			 *   &lt;your-page-object-name&gt; : {
			 *       actions: // an instance of baseClass or Opa5 with all the actions defined above
			 *       assertions: // an instance of baseClass or Opa5 with all the assertions defined above
			 *   }
			 *  }
			 * </code></pre>
			 */
			createPageObjects(mPageObjects: any): any;
			/**
			 * Waits until all waitFor calls are done
			 * See {@link sap.ui.test.Opa#.emptyQueue} for the description
			 * @return If the waiting was successful, the promise will be resolved. If not it will be rejected
			 */
			emptyQueue(): any;
			/**
			 * 
			 * Extends and overwrites default values of the {@link sap.ui.test.Opa#.config}.
			 * Most frequent usecase:
			 * <pre>
			 *     <code>
			 *         // Every waitFor will append this namespace in front of your viewName
			 *         Opa5.extendConfig({
			 *            viewNamespace: "namespace.of.my.views."
			 *         });
			 * 
			 *         var oOpa = new Opa5();
			 * 
			 *         // Looks for a control with the id "myButton" in a View with the name "namespace.of.my.views.Detail"
			 *         oOpa.waitFor({
			 *              id: "myButton",
			 *              viewName: "Detail"
			 *         });
			 * 
			 *         // Looks for a control with the id "myList" in a View with the name "namespace.of.my.views.Master"
			 *         oOpa.waitFor({
			 *              id: "myList",
			 *              viewName: "Master"
			 *         });
			 *     </code>
			 * </pre>
			 * 
			 * Sample usage:
			 * <pre>
			 *     <code>
			 *         var oOpa = new Opa5();
			 * 
			 *         // this statement will  will time out after 15 seconds and poll every 400ms.
			 *         // those two values come from the defaults of {@link sap.ui.test.Opa#.config}.
			 *         oOpa.waitFor({
			 *         });
			 * 
			 *         // All wait for statements added after this will take other defaults
			 *         Opa5.extendConfig({
			 *             timeout: 10,
			 *             pollingInterval: 100
			 *         });
			 * 
			 *         // this statement will time out after 10 seconds and poll every 100 ms
			 *         oOpa.waitFor({
			 *         });
			 * 
			 *         // this statement will time out after 20 seconds and poll every 100 ms
			 *         oOpa.waitFor({
			 *             timeout: 20;
			 *         });
			 *     </code>
			 * </pre>
			 * @param options The values to be added to the existing config
			 */
			extendConfig(options: any);
			/**
			 * Gives access to a singleton object you can save values in.
			 * See {@link sap.ui.test.Opa#.getContext} for the description
			 * @return the context object
			 */
			getContext(): any;
			/**
			 * Returns HashChanger object of the IFrame. If the IFrame is not loaded it will return null.
			 * @return The HashChanger instance
			 */
			getHashChanger(): sap.ui.core.routing.HashChanger;
			/**
			 * Returns the jQuery object of the IFrame. If the IFrame is not loaded it will return null.
			 * @return The jQuery object
			 */
			getJQuery(): any;
			/**
			 * Returns the Opa plugin used for retrieving controls. If an IFrame is used it will return the iFrame's plugin.
			 * @return The plugin instance
			 */
			getPlugin(): OpaPlugin;
			/**
			 * Returns QUnit utils object of the IFrame. If the IFrame is not loaded it will return null.
			 * @return The QUnit utils
			 */
			getUtils(): any;
			/**
			 * Returns the window object of the IFrame or the current window. If the IFrame is not loaded it will return null.
			 * @return The window of the IFrame
			 */
			getWindow(): any;
			/**
			 * Starts an app in an IFrame. Only works reliably if running on the same server.
			 * @param sSource The source of the IFrame
			 * @param iTimeout The timeout for loading the IFrame in seconds - default is 80(optional)
			 * @return A promise that gets resolved on success
			 */
			iStartMyAppInAFrame(sSource: string, iTimeout?: number): any;
			/**
			 * Starts a UIComponent.
			 * @param oOptions An Object that contains the configuration for starting up a UIComponent.
			 * @return A promise that gets resolved on success.
			 */
			iStartMyUIComponent(oOptions: any): any;
			/**
			 * Removes the IFrame from the DOM and removes all the references to its objects
			 * @return A promise that gets resolved on success
			 */
			iTeardownMyAppFrame(): any;
			/**
			 * Destroys the UIComponent and removes the div from the dom like all the references on its objects
			 * @return a promise that gets resolved on success.
			 */
			iTeardownMyUIComponent(): any;
			/**
			 * Resets Opa.config to its default values.
			 * See {@link sap.ui.test.Opa5#waitFor} for the description
			 * Default values for OPA5 are:
			 * <ul>
			 * 	<li>viewNamespace: empty string</li>
			 * 	<li>arrangements: instance of OPA5</li>
			 * 	<li>actions: instance of OPA5</li>
			 * 	<li>assertions: instance of OPA5</li>
			 * 	<li>visible: true</li>
			 * 	<li>timeout : 15 seconds, is increased to 5 minutes if running in debug mode e.g. with URL parameter sap-ui-debug=true</li>
			 * 	<li>pollingInterval: 400 milliseconds</li>
			 * </ul>
			 */
			resetConfig();
			/**
			 * Clears the queue and stops running tests so that new tests can be run.
			 * This means all waitFor statements registered by {@link sap.ui.test.Opa5#waitFor} will not be invoked anymore and
			 * the promise returned by {@link sap.ui.test.Opa5#.emptyQueue} will be rejected.
			 * When its called inside of a check in {@link sap.ui.test.Opa5#waitFor}
			 * the success function of this waitFor will not be called.
			 */
			stopQueue();
			/**
			 * Takes the same parameters as {@link sap.ui.test.Opa#waitFor}. Also allows you to specify additional parameters:
			 * @param oOptions An Object containing conditions for waiting and callbacks
			 * @return A promise that gets resolved on success
			 */
			waitFor(oOptions: any): any;
		}
	
		class OpaPlugin  {
			/**
			 * 
			 */
			constructor();
			/**
			 * Creates a new subclass of class sap.ui.test.OpaPlugin with name <code>sClassName</code>
			 * and enriches it with the information contained in <code>oClassInfo</code>.
			 * 
			 * <code>oClassInfo</code> might contain the same kind of information as described in {@link sap.ui.base.Object.extend Object.extend}.
			 * @param sClassName Name of the class being created
			 * @param oClassInfo Object literal with information about the class(optional)
			 * @param FNMetaImpl Constructor function for the metadata object; if not given, it defaults to <code>sap.ui.core.ElementMetadata</code>(optional)
			 * @return Created class / constructor function
			 */
			extend(sClassName: string, oClassInfo?: any, FNMetaImpl?: any): any;
			/**
			 * Gets all the controls of a certain type that are currently instantiated.
			 * If the control type is omitted, nothing is returned.
			 * @param fnConstructorType the control type, e.g: sap.m.CheckBox(optional)
			 * @return an array of the found controls (can be empty)
			 */
			getAllControls(fnConstructorType?: any): any[];
			/**
			 * Returns a control by its id
			 * accepts an object with an ID property the ID can be
			 * will check a control type also, if defined
			 * <ul>
			 * 	<li>a single string - function will return the control instance or undefined</li>
			 * 	<li>an array of strings - function will return an array of found controls or an empty array</li>
			 * 	<li>a regexp - function will return an array of found controls or an empty array</li>
			 * </ul>
			 * @param oOptions should contain an ID property. It can be of the type string or regex. If contains controlType property, will check it as well
			 * @return all controls matched by the regex or the control matched by the string or null
			 */
			getControlByGlobalId(oOptions: any): sap.ui.core.Element[];
			/**
			 * Gets the constructor function of a certain controlType
			 * @param sControlType the name of the type eg: "sap.m.Button"
			 * @return When the type is loaded, the contstructor is returned, if it is a lazy stub or not yet loaded, null will be returned and there will be a log entry.
			 */
			getControlConstructor(sControlType: string): any;
			/**
			 * Gets a control inside of the view (same as calling oView.byId)
			 * If no ID is provided, it will return all the controls inside of a view (also nested views and their children).<br/>
			 * eg : { id : "foo" } will search globally for a control with the ID foo<br/>
			 * eg : { id : "foo" , viewName : "bar" } will search for a control with the ID foo inside the view with the name bar<br/>
			 * eg : { viewName : "bar" } will return all the controls inside the view with the name bar<br/>
			 * eg : { viewName : "bar", controlType : sap.m.Button } will return all the Buttons inside a view with the name bar<br/>
			 * eg : { viewName : "bar", viewNamespace : "baz." } will return all the Controls in the view with the name baz.bar<br/>
			 * @param oOptions that may contain a viewName, id, viewNamespace and controlType properties.
			 * @return If the passed id is a string it returns the found control or null.
			 * Else an array of matching controls, if the view is not found or no control is found for multiple ids an empty array is returned.
			 */
			getControlInView(oOptions: any): sap.ui.core.Element|sap.ui.core.Element[];
			/**
			 * Tries to find a control depending on the options provided.
			 * @param oOptions a map of options used to describe the control you are looking for.(optional)
			 * @return <ul>
			 *     <li>an array of found Controls depending on the options</li>
			 *     <li>an empty array if no id was given</li>
			 *     <li>the found control/element when an id as a string is specified</li>
			 *     <li>null if an id as string was specified</li>
			 * </ul>
			 */
			getMatchingControls(oOptions?: any): sap.ui.core.Element|sap.ui.core.Element[];
			/**
			 * Returns the view with a specific name - if there are multiple views with that name only the first one is returned.
			 * @param sViewName the name of the view
			 * @return or undefined
			 */
			getView(sViewName: string): sap.ui.core.mvc.View;
		}
	
		class PageObjectFactory extends sap.ui.base.Object {
			/**
			 * Create a page object configured as arrangement, action and assertion to the Opa.config.
			 * Use it to structure your arrangement, action and assertion based on parts of the screen to avoid name clashes and help structuring your tests.
			 */
			create();
		}
	}
	/**
	 * Creates a new instance of a <code>Component</code> or returns the instance
	 * of an existing <code>Component</code>.
	 * 
	 * If you want to look up an existing <code>Component</code> you can call
	 * this function with a Component ID as parameter:
	 * <pre>
	 *   var oComponent = sap.ui.component(sComponentId);
	 * </pre>
	 * 
	 * To create a new instance of a component you pass a component configuration
	 * object into this function:
	 * <pre>
	 *   var oComponent = sap.ui.component({
	 *     name: "my.Component",
	 *     url: "my/component/location",
	 *     id: "myCompId1"
	 *   });
	 * </pre>
	 * @param vConfig ID of an existing Component or the configuration object to create the Component
	 * @return the Component instance or a Promise in case of asynchronous loading
	 */
	function component(vConfig: string|any): ui.core.Component|any;
	/**
	 * Defines a controller class or creates an instance of an already defined controller class.
	 * 
	 * When a name and a controller implementation object is given, a new controller class
	 * of the given name is created. The members of the implementation object will be copied
	 * into each new instance of that controller class (shallow copy).
	 * <b>Note</b>: as the members are shallow copied, controller instances will share all object values.
	 * This might or might not be what applications expect.
	 * 
	 * If only a name is given, a new instance of the named controller class is returned.
	 * @param sName The controller name
	 * @param oControllerImpl An object literal defining the methods and properties of the controller(optional)
	 * @return void or the new controller instance, depending on the use case
	 */
	function controller(sName: string, oControllerImpl?: any): void|ui.core.mvc.Controller;
	/**
	 * Defines a Javascript module with its name, its dependencies and a module value or factory.
	 * 
	 * The typical and only suggested usage of this method is to have one single, top level call to
	 * <code>sap.ui.define</code> in one Javascript resource (file). When a module is requested by its
	 * name for the first time, the corresponding resource is determined from the name and the current
	 * {@link jQuery.sap.registerResourcePath configuration}. The resource will be loaded and executed
	 * which in turn will execute the top level <code>sap.ui.define</code> call.
	 * 
	 * If the module name was omitted from that call, it will be substituted by the name that was used to
	 * request the module. As a preparation step, the dependencies as well as their transitive dependencies,
	 * will be loaded. Then, the module value will be determined: if a static value (object, literal) was
	 * given, that value will be the module value. If a function was given, that function will be called
	 * (providing the module values of the declared dependencies as parameters to the function) and its
	 * return value will be used as module value. The framework internally associates the resulting value
	 * with the module name and provides it to the original requestor of the module. Whenever the module
	 * is requested again, the same value will be returned (modules are executed only once).
	 * 
	 * <i>Example:</i><br>
	 * The following example defines a module "SomeClass", but doesn't hard code the module name.
	 * If stored in a file 'sap/mylib/SomeClass.js', it can be requested as 'sap/mylib/SomeClass'.
	 * <pre>
	 *   sap.ui.define(['./Helper', 'sap/m/Bar'], function(Helper,Bar) {
	 * 
	 *     // create a new class
	 *     var SomeClass = function();
	 * 
	 *     // add methods to its prototype
	 *     SomeClass.prototype.foo = function() {
	 * 
	 *         // use a function from the dependency 'Helper' in the same package (e.g. 'sap/mylib/Helper' )
	 *         var mSettings = Helper.foo();
	 * 
	 *         // create and return a sap.m.Bar (using its local name 'Bar')
	 *         return new Bar(mSettings);
	 * 
	 *     }
	 * 
	 *     // return the class as module value
	 *     return SomeClass;
	 * 
	 *   });
	 * </pre>
	 * 
	 * In another module or in an application HTML page, the {@link sap.ui.require} API can be used
	 * to load the Something module and to work with it:
	 * 
	 * <pre>
	 * sap.ui.require(['sap/mylib/Something'], function(Something) {
	 * 
	 *   // instantiate a Something and call foo() on it
	 *   new Something().foo();
	 * 
	 * });
	 * </pre>
	 * 
	 * <b>Module Name Syntax</b><br>
	 * <code>sap.ui.define</code> uses a simplified variant of the {@link jQuery.sap.getResourcePath
	 * unified resource name} syntax for the module's own name as well as for its dependencies.
	 * The only difference to that syntax is, that for <code>sap.ui.define</code> and
	 * <code>sap.ui.require</code>, the extension (which always would be '.js') has to be omitted.
	 * Both methods always add this extension internally.
	 * 
	 * As a convenience, the name of a dependency can start with the segment './' which will be
	 * replaced by the name of the package that contains the currently defined module (relative name).
	 * 
	 * It is best practice to omit the name of the defined module (first parameter) and to use
	 * relative names for the dependencies whenever possible. This reduces the necessary configuration,
	 * simplifies renaming of packages and allows to map them to a different namespace.
	 * 
	 * 
	 * <b>Dependency to Modules</b><br>
	 * If a dependencies array is given, each entry represents the name of another module that
	 * the currently defined module depends on. All dependency modules are loaded before the value
	 * of the currently defined module is determined. The module value of each dependency module
	 * will be provided as a parameter to a factory function, the order of the parameters will match
	 * the order of the modules in the dependencies array.
	 * 
	 * <b>Note:</b> the order in which the dependency modules are <i>executed</i> is <b>not</b>
	 * defined by the order in the dependencies array! The execution order is affected by dependencies
	 * <i>between</i> the dependency modules as well as by their current state (whether a module
	 * already has been loaded or not). Neither module implementations nor dependants that require
	 * a module set must make any assumption about the execution order (other than expressed by
	 * their dependencies). There is, however, one exception with regard to third party libraries,
	 * see the list of limitations further down below.
	 * 
	 * <b>Note:</b>a static module value (a literal provided to <code>sap.ui.define</code>) cannot
	 * depend on the module values of the depency modules. Instead, modules can use a factory function,
	 * calculate the static value in that function, potentially based on the dependencies, and return
	 * the result as module value. The same approach must be taken when the module value is supposed
	 * to be a function.
	 * 
	 * 
	 * <b>Asynchronous Contract</b><br>
	 * <code>sap.ui.define</code> is designed to support real Asynchronous Module Definitions (AMD)
	 * in future, although it internally still uses the the old synchronous module loading of UI5.
	 * Callers of <code>sap.ui.define</code> therefore must not rely on any synchronous behavior
	 * that they might observe with the current implementation.
	 * 
	 * For example, callers of <code>sap.ui.define</code> must not use the module value immediately
	 * after invoking <code>sap.ui.define</code>:
	 * 
	 * <pre>
	 *   // COUNTER EXAMPLE HOW __NOT__ TO DO IT
	 * 
	 *   // define a class Something as AMD module
	 *   sap.ui.define('Something', [], function() {
	 *     var Something = function();
	 *     return Something;
	 *   });
	 * 
	 *   // DON'T DO THAT!
	 *   // accessing the class _synchronously_ after sap.ui.define was called
	 *   new Something();
	 * </pre>
	 * 
	 * Applications that need to ensure synchronous module definition or synchronous loading of dependencies
	 * <b>MUST</b> use the old {@link jQuery.sap.declare} and {@link jQuery.sap.require} APIs.
	 * 
	 * 
	 * <b>(No) Global References</b><br>
	 * To be in line with AMD best practices, modules defined with <code>sap.ui.define</code>
	 * should not make any use of global variables if those variables are also available as module
	 * values. Instead, they should add dependencies to those modules and use the corresponding parameter
	 * of the factory function to access the module value.
	 * 
	 * As the current programming model and the documentation of UI5 heavily rely on global names,
	 * there will be a transition phase where UI5 enables AMD modules and local references to module
	 * values in parallel to the old global names. The fourth parameter of <code>sap.ui.define</code>
	 * has been added to support that transition phase. When this parameter is set to true, the framework
	 * provides two additional functionalities
	 * 
	 * <ol>
	 * <li>before the factory function is called, the existence of the global parent namespace for
	 *     the current module is ensured</li>
	 * <li>the module value will be automatically exported under a global name which is derived from
	 *     the name of the module</li>
	 * </ol>
	 * 
	 * The parameter lets the framework know whether any of those two operations is needed or not.
	 * In future versions of UI5, a central configuration option is planned to suppress those 'exports'.
	 * 
	 * 
	 * <b>Third Party Modules</b><br>
	 * Although third party modules don't use UI5 APIs, they still can be listed as dependencies in
	 * a <code>sap.ui.define</code> call. They will be requested and executed like UI5 modules, but their
	 * module value will be <code>undefined</code>.
	 * 
	 * If the currently defined module needs to access the module value of such a third party module,
	 * it can access the value via its global name (if the module supports such a usage).
	 * 
	 * Note that UI5 temporarily deactivates an existing AMD loader while it executes third party modules
	 * known to support AMD. This sounds contradictarily at a first glance as UI5 wants to support AMD,
	 * but for now it is necessary to fully support UI5 apps that rely on global names for such modules.
	 * 
	 * Example:
	 * <pre>
	 *   // module 'Something' wants to use third party library 'URI.js'
	 *   // It is packaged by UI5 as non-UI5-module 'sap/ui/thirdparty/URI'
	 * 
	 *   sap.ui.define('Something', ['sap/ui/thirdparty/URI'], function(URIModuleValue) {
	 * 
	 *     new URIModuleValue(); // fails as module value is undefined
	 * 
	 *     //global URI // (optional) declare usage of global name so that static code checks don't complain
	 *     new URI(); // access to global name 'URI' works
	 * 
	 *     ...
	 *   });
	 * </pre>
	 * 
	 * 
	 * <b>Differences to requireJS</b><br>
	 * The current implementation of <code>sap.ui.define</code> differs from <code>requireJS</code>
	 * or other AMD loaders in several aspects:
	 * <ul>
	 * <li>the name <code>sap.ui.define</code> is different from the plain <code>define</code>.
	 * This has two reasons: first, it avoids the impression that <code>sap.ui.define</code> is
	 * an exact implementation of an AMD loader. And second, it allows the coexistence of an AMD
	 * loader (requireJS) and <code>sap.ui.define</code> in one application as long as UI5 or
	 * apps using UI5 are not fully prepared to run with an AMD loader</li>
	 * <li><code>sap.ui.define</code> currently loads modules with synchronous XHR calls. This is
	 * basically a tribute to the synchronous history of UI5.
	 * <b>BUT:</b> synchronous dependency loading and factory execution explicitly it not part of
	 * contract of <code>sap.ui.define</code>. To the contrary, it is already clear and planned
	 * that asynchronous loading will be implemented, at least as an alternative if not as the only
	 * implementation. Also check section <b>Asynchronous Contract</b> above.<br>
	 * Applications that need to ensure synchronous loading of dependencies <b>MUST</b> use the old
	 * {@link jQuery.sap.require} API.</li>
	 * <li><code>sap.ui.define</code> does not support plugins to use other file types, formats or
	 * protocols. It is not planned to support this in future</li>
	 * <li><code>sap.ui.define</code> does <b>not</b> support the 'sugar' of requireJS where CommonJS
	 * style dependency declarations using <code>sap.ui.require("something")</code> are automagically
	 * converted into <code>sap.ui.define</code> dependencies before executing the factory function.</li>
	 * </ul>
	 * 
	 * 
	 * <b>Limitations, Design Considerations</b><br>
	 * <ul>
	 * <li><b>Limitation</b>: as dependency management is not supported for Non-UI5 modules, the only way
	 *     to ensure proper execution order for such modules currently is to rely on the order in the
	 *     dependency array. Obviously, this only works as long as <code>sap.ui.define</code> uses
	 *     synchronous loading. It will be enhanced when asynchronous loading is implemented.</li>
	 * <li>it was discussed to enfore asynchronous execution of the module factory function (e.g. with a
	 *     timeout of 0). But this would have invalidated the current migration scenario where a
	 *     sync <code>jQuery.sap.require</code> call can load a <code>sap.ui.define</code>'ed module.
	 *     If the module definition would not execute synchronously, the synchronous contract of the
	 *     require call would be broken (default behavior in existing UI5 apps)</li>
	 * <li>a single file must not contain multiple calls to <code>sap.ui.define</code>. Multiple calls
	 *     currently are only supported in the so called 'preload' files that the UI5 merge tooling produces.
	 *     The exact details of how this works might be changed in future implementations and are not
	 *     yet part of the API contract</li>
	 * </ul>
	 * @param sModuleName name of the module in simplified resource name syntax.
	 *        When omitted, the loader determines the name from the request.
	 * @param aDependencies list of dependencies of the module
	 * @param vFactory the module value or a function that calculates the value
	 * @param bExport whether an export to global names is required - should be used by SAP-owned code only(optional)
	 */
	function define(sModuleName: string, aDependencies: string[], vFactory: any, bExport?: boolean);
	/**
	 * Creates 0..n UI5 controls from an ExtensionPoint.
	 * One control if the ExtensionPoint is e.g. filled with a View, zero for ExtensionPoints without configured extension and
	 * n controls for multi-root Fragments as extension.
	 * 
	 * In JSViews, this function allows both JSON notation in aggregation content as well as adding an extension point to an aggregation after the target control
	 * has already been instantiated. In the latter case the optional parameters oTargetControls and oTargetAggregation need to be specified.
	 * @param oContainer The view or fragment containing the extension point
	 * @param sExtName The extensionName used to identify the extension point in the customizing
	 * @param fnCreateDefaultContent Optional callback function creating default content, returning an Array of controls. It is executed
	 * 			when there's no customizing, if not provided, no default content will be rendered.(optional)
	 * @param oTargetControl Optional - use this parameter to attach the extension point to a particular aggregation(optional)
	 * @param sAggregationName Optional - if provided along with oTargetControl, the extension point content is added to this particular aggregation at oTargetControl,
	 * 			if not given, but an oTargetControl is still present, the function will attempt to add the extension point to the default aggregation of oTargetControl.
	 * 			If no oTargetControl is provided, sAggregationName will also be ignored.(optional)
	 * @return an array with 0..n controls created from an ExtensionPoint
	 */
	function extensionpoint(oContainer: ui.core.mvc.View|ui.core.Fragment, sExtName: string, fnCreateDefaultContent?: any, oTargetControl?: ui.core.Control, sAggregationName?: string): ui.core.Control[];
	/**
	 * Instantiate a Fragment - this method loads the Fragment content, instantiates it, and returns this content.
	 * The Fragment object itself is not an entity which has further significance beyond this constructor.
	 * 
	 * To instantiate an existing Fragment, call this method as:
	 *    sap.ui.fragment(sName, sType, [oController]);
	 * The sName must correspond to an XML Fragment which can be loaded
	 * via the module system (fragmentName + suffix ".fragment.[typeextension]") and which defines the Fragment content.
	 * If oController is given, the (event handler) methods referenced in the Fragment will be called on this controller.
	 * Note that Fragments may require a Controller to be given and certain methods to be available.
	 * 
	 * The Fragment types "XML", "JS" and "HTML" are available by default; additional Fragment types can be implemented
	 * and added using the sap.ui.core.Fragment.registerType() function.
	 * 
	 * 
	 * Advanced usage:
	 * To instantiate a Fragment and give further configuration options, call this method as:
	 *     sap.ui.fragment(oFragmentConfig, [oController]);
	 * The oFragmentConfig object can have the following properties:
	 * - "fragmentName": the name of the Fragment, as above
	 * - "fragmentContent": the definition of the Fragment content itself. When this property is given, any given name is ignored.
	 *         The type of this property depends on the Fragment type, e.g. it could be a string for XML Fragments.
	 * - "type": the type of the Fragment, as above (mandatory)
	 * - "id": the ID of the Fragment (optional)
	 * Further properties may be supported by future or custom Fragment types. Any given properties
	 * will be forwarded to the Fragment implementation.
	 * 
	 * If you want to give a fixed ID for the Fragment, please use the advanced version of this method call with the
	 * configuration object or use the typed factories like sap.ui.xmlfragment(...) or sap.ui.jsfragment(...).
	 * Otherwise the Fragment ID is generated. In any case, the Fragment ID will be used as prefix for the ID of
	 * all contained controls.
	 * @param sName the Fragment name
	 * @param sType the Fragment type, e.g. "XML", "JS", or "HTML"
	 * @param oController the Controller which should be used by the controls in the Fragment. Note that some Fragments may not need a Controller and other may need one - and even rely on certain methods implemented in the Controller.(optional)
	 * @return the root Control(s) of the Fragment content
	 */
	function fragment(sName: string, sType: string, oController?: ui.core.mvc.Controller): ui.core.Control|ui.core.Control[];
	/**
	 * Retrieve the {@link sap.ui.core.Core SAPUI5 Core} instance for the current window.
	 * @return the API of the current SAPUI5 Core instance.
	 */
	function getCore(): ui.core.Core;
	/**
	 * Loads the version info file (resources/sap-ui-version.json) and returns
	 * it or if a library name is specified then the version info of the individual
	 * library will be returned.
	 * 
	 * In case of the version info file is not available an error will occur when
	 * calling this function.
	 * @param mOptions name of the library (e.g. "sap.ui.core") or a object map (see below)(optional)
	 * @return the full version info, the library specific one,
	 *                                    undefined (if library is not listed or there was an error and "failOnError" is set to "false")
	 *                                    or a Promise which resolves with one of them
	 */
	function getVersionInfo(mOptions?: string|any): any;
	/**
	 * Instantiates an HTML-based Fragment.
	 * 
	 * To instantiate a Fragment, call this method as:
	 *    sap.ui.htmlfragment([sId], sFragmentName, [oController]);
	 * The Fragment instance ID is optional (generated if not given) and will be used as prefix for the ID of all
	 * contained controls. The sFragmentName must correspond to an HTML Fragment which can be loaded
	 * via the module system (fragmentName + ".fragment.html") and which defines the Fragment.
	 * If oController is given, the methods referenced in the Fragment will be called on this controller.
	 * Note that Fragments may require a Controller to be given and certain methods to be available.
	 * 
	 * 
	 * Advanced usage:
	 * To instantiate a Fragment and optionally directly give the HTML definition instead of loading it from a file,
	 * call this method as:
	 *     sap.ui.htmlfragment(oFragmentConfig, [oController]);
	 * The oFragmentConfig object can have a either a "fragmentName" or a "fragmentContent" property.
	 * fragmentContent is optional and can hold the Fragment definition as XML string; if not
	 * given, fragmentName must be given and the Fragment content definition is loaded by the module system.
	 * Again, if oController is given, the methods referenced in the Fragment will be called on this controller.
	 * @param sId id of the newly created Fragment
	 * @param vFragment name of the Fragment (or Fragment configuration as described above, in this case no sId may be given. Instead give the id inside the config object, if desired.)
	 * @param oController a Controller to be used for event handlers in the Fragment(optional)
	 * @return the root Control(s) of the created Fragment instance
	 */
	function htmlfragment(sId: string, vFragment: string|any, oController?: ui.core.mvc.Controller): ui.core.Control|ui.core.Control[];
	/**
	 * Defines or creates an instance of a declarative HTML view.
	 * 
	 * The behavior of this method depends on the signature of the call and on the current context.
	 * 
	 * <ul>
	 * <li>View Definition <code>sap.ui.htmlview(sId, vView)</code>: Defines a view of the given name with the given
	 * implementation. sId must be the views name, vView must be an object and can contain
	 * implementations for any of the hooks provided by HTMLView</li>
	 * <li>View Instantiation <code>sap.ui.htmlview(sId?, vView)</code>: Creates an instance of the view with the given name (and id)</li>.
	 * </ul>
	 * 
	 * Any other call signature will lead to a runtime error. If the id is omitted in the second variant, an id will
	 * be created automatically.
	 * @param sId id of the newly created view, only allowed for instance creation
	 * @param vView name or implementation of the view.
	 * @return the created HTMLView instance in the creation case, otherwise undefined
	 */
	function htmlview(sId: string, vView: string|any): ui.core.mvc.HTMLView|any;
	/**
	 * Defines OR instantiates an HTML-based Fragment.
	 * 
	 * To define a JS Fragment, call this method as:
	 *    sap.ui.jsfragment(sName, oFragmentDefinition)
	 * Where:
	 * - "sName" is the name by which this fragment can be found and instantiated. If defined in its own file,
	 *    in order to be found by the module loading system, the file location and name must correspond to sName
	 *    (path + file name must be: fragmentName + ".fragment.js").
	 * - "oFragmentDefinition" is an object at least holding the "createContent(oController)" method which defines
	 *    the Fragment content. If given during instantiation, the createContent method receives a Controller
	 *    instance (otherwise oController is undefined) and the return value must be one sap.ui.core.Control
	 *    (which could have any number of children).
	 * 
	 * 
	 * To instantiate a JS Fragment, call this method as:
	 *    sap.ui.jsfragment([sId], sFragmentName, [oController]);
	 * The Fragment ID is optional (generated if not given) and the Fragment implementation CAN use it
	 * to make contained controls unique (this depends on the implementation: some JS Fragments may choose
	 * not to support multiple instances within one application and not use the ID prefixing).
	 * The sFragmentName must correspond to a JS Fragment which can be loaded
	 * via the module system (fragmentName + ".fragment.js") and which defines the Fragment.
	 * If oController is given, the methods referenced in the Fragment will be called on this controller.
	 * Note that Fragments may require a Controller to be given and certain methods to be available.
	 * @param sId id of the newly created Fragment
	 * @param sFragmentName name of the Fragment (or Fragment configuration as described above, in this case no sId may be given. Instead give the id inside the config object, if desired)
	 * @param oController a Controller to be used for event handlers in the Fragment(optional)
	 * @return the root Control(s) of the created Fragment instance
	 */
	function jsfragment(sId: string, sFragmentName: string|any, oController?: ui.core.mvc.Controller): ui.core.Control|ui.core.Control[];
	/**
	 * Creates a JSON view of the given name and id.
	 * 
	 * The <code>viewName</code> must either correspond to a JSON module that can be loaded
	 * via the module system (viewName + suffix ".view.json") and which defines the view or it must
	 * be a configuration object for a view.
	 * The configuration object can have a viewName, viewContent and a controller property. The viewName
	 * behaves as described above, viewContent can hold the view description as JSON string or as object literal.
	 * 
	 * <strong>Note</strong>: when an object literal is given, it might be modified during view construction.
	 * 
	 * The controller property can hold an controller instance. If a controller instance is given,
	 * it overrides the controller defined in the view.
	 * 
	 * Like with any other control, an id is optional and will be created when missing.
	 * @param sId id of the newly created view
	 * @param vView name of a view resource or view configuration as described above.
	 * @return the created JSONView instance
	 */
	function jsonview(sId: string, vView: string|any): ui.core.mvc.JSONView;
	/**
	 * Defines or creates an instance of a JavaScript view.
	 * 
	 * The behavior of this method depends on the signature of the call and on the current context.
	 * 
	 * <ul>
	 * <li>View Definition <code>sap.ui.jsview(sId, vView)</code>: Defines a view of the given name with the given
	 * implementation. sId must be the view's name, vView must be an object and can contain
	 * implementations for any of the hooks provided by JSView</li>
	 * 
	 * <li>View Instantiation <code>sap.ui.jsview(sId?, vView)</code>: Creates an instance of the view with the given name (and id).
	 * If no view implementation has been defined for that view name, a JavaScript module with the same name and with suffix "view.js" will be loaded
	 * and executed. The module should contain a view definition (1st. variant above). </li>
	 * </ul>
	 * 
	 * Any other call signature will lead to a runtime error. If the id is omitted in the second variant, an id will
	 * be created automatically.
	 * @param sId id of the newly created view, only allowed for instance creation
	 * @param vView name or implementation of the view.
	 * @param bAsync defines how the view source is loaded and rendered later on (only relevant for instantiation, ignored for everything else)(optional)
	 * @return the created JSView instance in the creation case, otherwise undefined
	 */
	function jsview(sId: string, vView: string|any, bAsync?: boolean): ui.core.mvc.JSView|any;
	/**
	 * Creates a lazy loading stub for a given class <code>sClassName</code>.
	 * 
	 * If the class has been loaded already, nothing is done. Otherwise a stub object
	 * or constructor and - optionally - a set of stub methods are created.
	 * All created stubs will load the corresponding module on execution
	 * and then delegate to their counterpart in the loaded module.
	 * 
	 * When no methods are given or when the list of methods contains the special name
	 * "new" (which is an operator can't be used as method name in JavaScript), then a
	 * stub <b>constructor</b> for class <code>sClassName</code> is created.
	 * Otherwise, a plain object is created.
	 * 
	 * <b>Note</b>: Accessing any stub as a plain object without executing it (no matter
	 * whether it is a function or an object) won't load the module and therefore most like
	 * won't work as expected. This is a fundamental restriction of the lazy loader approach.
	 * It could only be fixed with JavaScript 1.5 features that are not available in all
	 * UI5 target browsers (e.g. not in IE8).
	 * 
	 * <b>Note</b>: As a side effect of this method, the namespace containing the given
	 * class is created <b>immediately</b>.
	 * @param sClassName Fully qualified name (dot notation) of the class that should be prepared
	 * @param sMethods space separated list of additional (static) methods that should be created as stubs(optional)
	 * @param sModuleName name of the module to load, defaults to the class name(optional)
	 */
	function lazyRequire(sClassName: string, sMethods?: string, sModuleName?: string);
	/**
	 * Redirects access to resources that are part of the given namespace to a location
	 * relative to the assumed <b>application root folder</b>.
	 * 
	 * Any UI5 managed resource (view, controller, control, JavaScript module, CSS file, etc.)
	 * whose resource name starts with <code>sNamespace</code>, will be loaded from an
	 * equally named subfolder of the <b>application root folder</b>.
	 * If the resource name consists of multiple segments (separated by a dot), each segment
	 * is assumed to represent an individual folder. In other words: when a resource name is
	 * converted to an URL, any dots ('.') are converted to slashes ('/').
	 * 
	 * <b>Limitation:</b> For the time being, the <b>application root folder</b> is assumed to be
	 * the same as the folder where the current page resides in.
	 * 
	 * Usage sample:
	 * <pre>
	 *   // Let UI5 know that resources, whose name starts with "com.mycompany.myapp"
	 *   // should be loaded from the URL location "./com/mycompany/myapp"
	 *   sap.ui.localResources("com.mycompany.myapp");
	 * 
	 *   // The following call implicitly will use the mapping done by the previous line
	 *   // It will load a view from ./com/mycompany/myapp/views/Main.view.xml
	 *   sap.ui.view({ view : "com.mycompany.myapp.views.Main", type : sap.ui.core.mvc.ViewType.XML});
	 * </pre>
	 * 
	 * When applications need a more flexible mapping between resource names and their location,
	 * they can use {@link jQuery.sap.registerModulePath}.
	 * 
	 * It is intended to make this configuration obsolete in future releases, but for the time
	 * being, applications must call this method when they want to store resources relative to
	 * the assumed application root folder.
	 * @param sNamespace Namespace prefix for which to load resources relative to the application root folder
	 */
	function localResources(sNamespace: string);
	/**
	 * Ensures that a given a namespace or hierarchy of nested namespaces exists in the
	 * current <code>window</code>.
	 * @param sNamespace 
	 * @deprecated Use jQuery.sap.declare or jQuery.sap.getObject(...,0) instead
	 * @return the innermost namespace of the hierarchy
	 */
	function namespace(sNamespace: string): any;
	/**
	 * Resolves one or more module dependencies.
	 * 
	 * <b>Synchronous Retrieval of a Single Module Value</b>
	 * 
	 * When called with a single string, that string is assumed to be the name of an already loaded
	 * module and the value of that module is returned. If the module has not been loaded yet,
	 * or if it is a Non-UI5 module (e.g. third party module), <code>undefined</code> is returned.
	 * This signature variant allows synchronous access to module values without initiating module loading.
	 * 
	 * Sample:
	 * <pre>
	 *   var JSONModel = sap.ui.require("sap/ui/model/json/JSONModel");
	 * </pre>
	 * 
	 * For modules that are known to be UI5 modules, this signature variant can be used to check whether
	 * the module has been loaded.
	 * 
	 * <b>Asynchronous Loading of Multiple Modules</b>
	 * 
	 * If an array of strings is given and (optionally) a callback function, then the strings
	 * are interpreted as module names and the corresponding modules (and their transitive
	 * dependencies) are loaded. Then the callback function will be called asynchronously.
	 * The module values of the specified modules will be provided as parameters to the callback
	 * function in the same order in which they appeared in the dependencies array.
	 * 
	 * The return value for the asynchronous use case is <code>undefined</code>.
	 * 
	 * <pre>
	 *   sap.ui.require(['sap/ui/model/json/JSONModel', 'sap/ui/core/UIComponent'], function(JSONModel,UIComponent) {
	 * 
	 *     var MyComponent = UIComponent.extend('MyComponent', {
	 *       ...
	 *     });
	 *     ...
	 * 
	 *   });
	 * </pre>
	 * 
	 * This method uses the same variation of the {@link jQuery.sap.getResourcePath unified resource name}
	 * syntax that {@link sap.ui.define} uses: module names are specified without the implicit extension '.js'.
	 * Relative module names are not supported.
	 * @param vDependencies dependency (dependencies) to resolve
	 * @param fnCallback callback function to execute after resolving an array of dependencies(optional)
	 * @return a single module value or undefined
	 */
	function require(vDependencies: string|string[], fnCallback?: any): any;
	/**
	 * Returns the URL of a resource that belongs to the given library and has the given relative location within the library.
	 * This is mainly meant for static resources like images that are inside the library.
	 * It is NOT meant for access to JavaScript modules or anything for which a different URL has been registered with jQuery.sap.registerModulePath(). For
	 * these cases use jQuery.sap.getModulePath().
	 * It DOES work, however, when the given sResourcePath starts with "themes/" (= when it is a theme-dependent resource). Even when for this theme a different
	 * location outside the normal library location is configured.
	 * @param sLibraryName the name of a library, like "sap.ui.commons"
	 * @param sResourcePath the relative path of a resource inside this library, like "img/mypic.png" or "themes/my_theme/img/mypic.png"
	 * @return the URL of the requested resource
	 */
	function resource(sLibraryName: string, sResourcePath: string): string;
	/**
	 * Displays the control tree with the given root inside the area of the given
	 * DOM reference (or inside the DOM node with the given ID) or in the given Control.
	 * 
	 * Example:
	 * <pre>
	 *   &lt;div id="SAPUI5UiArea">&lt;/div>
	 *   &lt;script type="text/javascript">
	 *     var oRoot = new sap.ui.commons.Label();
	 *     oRoot.setText("Hello world!");
	 *     sap.ui.setRoot("SAPUI5UiArea", oRoot);
	 *   &lt;/script>
	 * </pre>
	 * <p>
	 * 
	 * This is a shortcut for <code>sap.ui.getCore().setRoot()</code>.
	 * 
	 * Internally, if a string is given that does not identify an UIArea or a control
	 * then implicitly a new <code>UIArea</code> is created for the given DOM reference
	 * and the given control is added.
	 * @param oDomRef a DOM Element or Id String of the UIArea
	 * @param oControl the Control that should be added to the <code>UIArea</code>.
	 * @deprecated Use function <code>placeAt</code> of <code>sap.ui.core.Control</code> instead.
	 */
	function setRoot(oDomRef: string|any|ui.core.Control, oControl: ui.base.Interface|ui.core.Control);
	/**
	 * Creates a Template for the given id, dom reference or a configuration object.
	 * If no parameter is defined this function makes a lookup of DOM elements
	 * which are specifying a type attribute. If the value of this type attribute
	 * matches an registered type then the content of this DOM element will be
	 * used to create a new <code>Template</code> instance.
	 * 
	 * If you want to lookup all kind of existing and known templates and parse them
	 * directly you can simply call:
	 * <pre>
	 *   sap.ui.template();
	 * </pre>
	 * 
	 * To parse a concrete DOM element you can do so by using this function in the
	 * following way:
	 * <pre>
	 *   sap.ui.template("theTemplateId");
	 * </pre>
	 * 
	 * Or you can pass the reference to a DOM element and use this DOM element as
	 * a source for the template:
	 * <pre>
	 *   sap.ui.template(oDomRef);
	 * </pre>
	 * 
	 * The last option to use this function is to pass the information via a
	 * configuration object. This configuration object can be used to pass a
	 * context for the templating framework when compiling the template:
	 * <pre>
	 *   var oTemplateById = sap.ui.template({
	 *     id: "theTemplateId",
	 *     context: { ... }
	 *   });
	 * 
	 *   var oTemplateByDomRef = sap.ui.template({
	 *     domref: oDomRef,
	 *     context: { ... }
	 *   });
	 * </pre>
	 * 
	 * It can also be used to load a template from another file:
	 * <pre>
	 *   var oTemplate = sap.ui.template({
	 *     id: "myTemplate",
	 *     src: "myTemplate.tmpl"
	 *   });
	 * 
	 *   var oTemplateWithContext = sap.ui.template({
	 *     id: "myTemplate",
	 *     src: "myTemplate.tmpl",
	 *     context: { ... }
	 *   });
	 * </pre>
	 * 
	 * The properties of the configuration object are the following:
	 * <ul>
	 * <li><code>id</code> - the ID of the Template / the ID  of the DOM element containing the source of the Template</li>
	 * <li><code>domref</code> - the DOM element containing the source of the Template</li>
	 * <li><code>type</code> - the type of the Template</li>
	 * <li><code>src</code> - the URL to lookup the template</li> (<i>experimental!</i>)
	 * <li><code>control</code> - the fully qualified name of the control to declare</li> (<i>experimental!</i>)
	 * </ul>
	 * @param oTemplate the id or the DOM reference to the template to lookup or an configuration object containing the src, type and eventually the id of the Template.(optional)
	 * @return the created Template instance
	 *         or in case of usage without parametes any array of templates is returned
	 */
	function template(oTemplate?: string|any): ui.core.tmpl.Template|ui.core.tmpl.Template[];
	/**
	 * Defines or creates an instance of a template view.
	 * 
	 * The behavior of this method depends on the signature of the call and on the current context.
	 * 
	 * <ul>
	 * <li>View Definition <code>sap.ui.templateview(sId, vView)</code>: Defines a view of the given name with the given
	 * implementation. sId must be the views name, vView must be an object and can contain
	 * implementations for any of the hooks provided by templateview</li>
	 * <li>View Instantiation <code>sap.ui.templateview(sId?, vView)</code>: Creates an instance of the view with the given name (and id)</li>.
	 * </ul>
	 * 
	 * Any other call signature will lead to a runtime error. If the id is omitted in the second variant, an id will
	 * be created automatically.
	 * @param sId id of the newly created view, only allowed for instance creation
	 * @param vView name or implementation of the view.
	 * @return the created TemplateView instance in the creation case, otherwise undefined
	 */
	function templateview(sId: string, vView: string|any): ui.core.mvc.TemplateView|any;
	/**
	 * Creates a view of the given type, name and with the given id.
	 * 
	 * The <code>vView</code> configuration object can have the following properties for the view
	 * instantiation:
	 * <ul>
	 * <li>The ID <code>vView.id</code> specifies an ID for the View instance. If no ID is given,
	 * an ID will be generated.</li>
	 * <li>The view name <code>vView.viewName</code> corresponds to an XML module that can be loaded
	 * via the module system (vView.viewName + suffix ".view.xml")</li>
	 * <li>The controller instance <code>vView.controller</code> must be a valid controller implementation.
	 * The given controller instance overrides the controller defined in the view definition</li>
	 * <li>The view type <code>vView.type</code> specifies what kind of view will be instantiated. All valid
	 * view types are listed in the enumeration sap.ui.core.mvc.ViewType.</li>
	 * <li>The view data <code>vView.viewData</code> can hold user specific data. This data is available
	 * during the whole lifecycle of the view and the controller</li>
	 * <li>The view loading mode <code>vView.async</code> must be a boolean and defines if the view source is loaded
	 * synchronously or asynchronously. In async mode, the view is rendered empty initially, and rerenderd with the
	 * loaded view content.</li>
	 * <li><code>vView.preprocessors</code></li> can hold a map from the specified preprocessor type (e.g. "xml") to an array of
	 * preprocessor configurations; each configuration consists of a <code>preprocessor</code> property (optional when
	 * registered as on-demand preprocessor) and may contain further preprocessor-specific settings. The preprocessor can
	 * be either a module name as string implementation of {@link sap.ui.core.mvc.View.Preprocessor} or a function according to
	 * {@link sap.ui.core.mvc.View.Preprocessor.process}. Do not set properties starting with underscore like <code>_sProperty</code>
	 * property, these are reserved for internal purposes. When several preprocessors are provided for one hook, it has to be made
	 * sure that they do not conflict when beeing processed serially.
	 * 
	 * <strong>Note</strong>: These preprocessors are only available to this instance. For global or
	 * on-demand availability use {@link sap.ui.core.mvc.XMLView.registerPreprocessor}.
	 * 
	 * <strong>Note</strong>: Please note that preprocessors in general are currently only available
	 * to XMLViews.
	 * 
	 * <strong>Note</strong>: Preprocessors only work in async views and will be ignored when the view is instantiated
	 * in sync mode by default, as this could have unexpected side effects. You may override this behaviour by setting the
	 * bSyncSupport flag of the preprocessor to true.
	 * @param sId id of the newly created view, only allowed for instance creation
	 * @param vView the view name or view configuration object(optional)
	 * @return the created View instance
	 */
	function view(sId: string, vView?: string|any): ui.core.mvc.View;
	/**
	 * Instantiates an XML-based Fragment.
	 * 
	 * To instantiate a Fragment, call this method as:
	 *    sap.ui.xmlfragment([sId], sFragmentName, [oController]);
	 * The Fragment instance ID is optional (generated if not given) and will be used as prefix for the ID of all
	 * contained controls. The sFragmentName must correspond to an XML Fragment which can be loaded
	 * via the module system (fragmentName + ".fragment.xml") and which defines the Fragment.
	 * If oController is given, the methods referenced in the Fragment will be called on this controller.
	 * Note that Fragments may require a Controller to be given and certain methods to be available.
	 * 
	 * 
	 * Advanced usage:
	 * To instantiate a Fragment and optionally directly give the XML definition instead of loading it from a file,
	 * call this method as:
	 *     sap.ui.xmlfragment(oFragmentConfig, [oController]);
	 * The oFragmentConfig object can have a either a "fragmentName" or a "fragmentContent" property.
	 * fragmentContent is optional and can hold the Fragment definition as XML string; if not
	 * given, fragmentName must be given and the Fragment content definition is loaded by the module system.
	 * Again, if oController is given, the methods referenced in the Fragment will be called on this controller.
	 * @param sId id of the newly created Fragment
	 * @param vFragment name of the Fragment (or Fragment configuration as described above, in this case no sId may be given. Instead give the id inside the config object, if desired)
	 * @param oController a Controller to be used for event handlers in the Fragment(optional)
	 * @return the root Control(s) of the created Fragment instance
	 */
	function xmlfragment(sId: string, vFragment: string|any, oController?: ui.core.mvc.Controller): ui.core.Control|ui.core.Control[];
	/**
	 * Instantiates an XMLView of the given name and with the given ID.
	 * 
	 * The <code>viewName</code> must either correspond to an XML module that can be loaded
	 * via the module system (viewName + suffix ".view.xml") and which defines the view, or it must
	 * be a configuration object for a view.
	 * The configuration object can have a <code>viewName</code>, <code>viewContent</code> and a <code>controller
	 * </code> property. The <code>viewName</code> behaves as described above. <code>viewContent</code> is optional
	 * and can hold a view description as XML string or as already parsed XML Document. If not given, the view content
	 *  definition is loaded by the module system.
	 * 
	 * <strong>Note</strong>: if a <code>Document</code> is given, it might be modified during view construction.
	 * 
	 * <strong>Note</strong>: if you enable caching, you need to take care of the invalidation via keys. Automatic
	 * invalidation takes only place if the UI5 version or the component descriptor (manifest.json) change. This is
	 * still an experimental feature and may experience slight changes of the invalidation parameters or the cache
	 * key format.
	 * 
	 * The controller property can hold an controller instance. If a controller instance is given,
	 * it overrides the controller defined in the view.
	 * 
	 * Like with any other control, ID is optional and one will be created automatically.
	 * @param sId ID of the newly created view
	 * @param vView Name of the view or a view configuration object as described above
	 * @param  
	 * @return the created XMLView instance
	 */
	function xmlview(sId: string, vView: string|any): ui.core.mvc.XMLView;
}
